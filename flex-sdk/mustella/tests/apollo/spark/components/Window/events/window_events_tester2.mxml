<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<UnitTester testDir="apollo/spark/components/Window/events/"  xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" testSWF="window_events_multple_windows.mxml">

    <!-- this set of lines form a template that must be in each unit test -->
    <mx:Script>
    <![CDATA[
    public static function init(o:DisplayObject):void
    {
    }                    
    ]]>
    </mx:Script>
    <mx:Metadata>
    <![CDATA[
        [Mixin]
    ]]>
    </mx:Metadata>    
    <!-- end of set of lines that must be in each unit test -->

    <mx:Script>
    <![CDATA[
    	 import mx.core.FlexGlobals;
    	 import spark.components.Window;
    	 import mx.events.CloseEvent;
	 import mx.events.AIREvent;
	 import mx.events.FlexNativeWindowBoundsEvent;
    	 
	 import comps.*;
         public var window1:Window, window2:Window, window3:Window;
         
         
	public function myListener(event:mx.events.AIREvent):void
	{
		FlexGlobals.topLevelApplication.testLabel.text=event.type;
	}
	public function myFlashEventListener(event:flash.events.Event):void
	{
		FlexGlobals.topLevelApplication.testLabel.text=event.type;
	}	
	public function myNativeDSEventListener(event:flash.events.NativeWindowDisplayStateEvent):void
	{
		FlexGlobals.topLevelApplication.testLabel.text=event.type;
	}
	public function myNativeBoundsEventListener(event:flash.events.NativeWindowBoundsEvent):void
	{
		FlexGlobals.topLevelApplication.testLabel.text=event.type;
	}		
			

    ]]>
    </mx:Script>

<testCases>
    <TestCase testID="Window_Event_windowComplete_1" keywords="[Window,Event, windowComplete]" description="check windowComplete event">
        <body>
            <RunCode code="FlexGlobals.topLevelApplication.closeAllChildWindow()"/>
            <RunCode code="FlexGlobals.topLevelApplication.createAWindow()" waitTarget="" waitEvent="myWindowComplete" />
            <AssertEvent target="myWin" eventName="windowComplete" eventClass="mx.events::AIREvent" /> 
        </body> 
    </TestCase> 

	<!-- FIXME AJH different behavior mac vs win
    <TestCase testID="Window_Event_windowActivate_1" keywords="[Window,Event, windowActivate]" description="check windowActivate event">
        <body>
            <RunCode code="FlexGlobals.topLevelApplication.closeAllChildWindow()"/>
            <RunCode code="FlexGlobals.topLevelApplication.createAWindow()" waitTarget="" waitEvent="myWindowComplete" />
            <RunCode code="FlexGlobals.topLevelApplication.myWin.activate()" waitEvent="enterFrame" waitTarget="myWin"/>
            <AssertEvent target="myWin" eventName="windowActivate" eventClass="mx.events::AIREvent" /> 
            <WaitForEvent target="stage" eventName="enterFrame" numExpectedEvents="2"/>
        </body> 
    </TestCase>

    <TestCase testID="Window_Event_windowDeactivate_1" keywords="[Window,Event, windowDeactivate]" description="check windowDectivate event">
        <body>
            <RunCode code="FlexGlobals.topLevelApplication.closeAllChildWindow()"/>
            <RunCode code="FlexGlobals.topLevelApplication.createAWindow()" waitTarget="" waitEvent="myWindowComplete" />
            <RunCode code="FlexGlobals.topLevelApplication.myWin.addEventListener(AIREvent.WINDOW_DEACTIVATE,myListener);"/> 
            <RunCode code="FlexGlobals.topLevelApplication.myWin.activate()" waitEvent="enterFrame" waitTarget="stage"/>
            <RunCode code="FlexGlobals.topLevelApplication.window1=FlexGlobals.topLevelApplication.createAWindowByClass(Window,'window1',300)" waitTarget="" waitEvent="myWindowComplete" />
            <RunCode code="FlexGlobals.topLevelApplication.window1.activate()" waitEvent="enterFrame" waitTarget="stage"/>
            <WaitForEvent target="stage" eventName="enterFrame" numExpectedEvents="1"/>	
            <RunCode code="FlexGlobals.topLevelApplication.myWin.activate()" waitEvent="windowActivate" waitTarget="myWin"/>
            <WaitForEvent target="stage" eventName="enterFrame" numExpectedEvents="1"/>	
            <RunCode code="FlexGlobals.topLevelApplication.window1.activate()" waitEvent="windowActivate" waitTarget="window1"/>
            <AssertPropertyValue target="testLabel" propertyName="text" valueExpression="value=AIREvent.WINDOW_DEACTIVATE" />
            <RunCode code="FlexGlobals.topLevelApplication.closeAllChildWindow()"/>
       </body>
    </TestCase>
	-->
	
    <TestCase testID="Window_Event_windowMove_1" keywords="[Window,Event, windowMove]" description="check windowMove event">
        <body>
            <RunCode code="FlexGlobals.topLevelApplication.closeAllChildWindow()"/>
            <RunCode code="FlexGlobals.topLevelApplication.createAWindow()" waitTarget="" waitEvent="myWindowComplete" />
            <RunCode code="FlexGlobals.topLevelApplication.myWin.addEventListener('windowMove', myNativeBoundsEventListener);"/>
            <SetProperty target="myWin" propertyName="height" value="400" waitEvent="updateComplete" />
            <RunCode code="FlexGlobals.topLevelApplication.myWin.move(200,400)" waitEvent="windowMove" waitTarget="myWin"/>
            <AssertEvent target="myWin" eventName="windowMove" eventClass="mx.events::FlexNativeWindowBoundsEvent" /> 
            <!-- assert testLabel.text -->
            <AssertPropertyValue target="testLabel" propertyName="text" valueExpression="value=FlexNativeWindowBoundsEvent.WINDOW_MOVE" />  
       </body> 
    </TestCase>



    <TestCase testID="Window_Event_windowResize_1" keywords="[Window,Event, windowResize]" description="check windowResize event">
        <body>   
	    <RunCode code="FlexGlobals.topLevelApplication.closeAllChildWindow()"/> 
	    <RunCode code="FlexGlobals.topLevelApplication.createAWindow()" waitTarget="" waitEvent="myWindowComplete" />
	    <RunCode code="FlexGlobals.topLevelApplication.myWin.addEventListener('windowResize', myNativeBoundsEventListener);"/>
	    <SetProperty target="myWin" propertyName="height" value="400" waitEvent="updateComplete" />
	    <AssertEvent target="myWin" eventName="windowResize" eventClass="mx.events::FlexNativeWindowBoundsEvent" /> 
	    <!-- assert testLabel.text -->
	    <AssertPropertyValue target="testLabel" propertyName="text" valueExpression="value=FlexNativeWindowBoundsEvent.WINDOW_RESIZE" /> 
        </body> 
    </TestCase>



    <TestCase testID="Window_Event_close_1" keywords="[Window,Event, close]" description="check close event">
        <body>
	    <RunCode code="FlexGlobals.topLevelApplication.closeAllChildWindow()"/> 
	    <RunCode code="FlexGlobals.topLevelApplication.createAWindow()" waitTarget="" waitEvent="myWindowComplete" />
	    <RunCode code="FlexGlobals.topLevelApplication.myWin.addEventListener('close', myFlashEventListener);"/>
	    <SetProperty target="myWin" propertyName="height" value="400" waitEvent="updateComplete" />
	    <RunCode code="FlexGlobals.topLevelApplication.myWin.close()" waitEvent="close" waitTarget="myWin" />
	    <!-- assert testLabel.text -->
	    <AssertPropertyValue target="testLabel" propertyName="text" valueExpression="value=flash.events.Event.CLOSE" />
	    <WaitForEvent target="stage" eventName="enterFrame" numExpectedEvents="2"/>
	    <RunCode code="FlexGlobals.topLevelApplication.closeAllChildWindow()"/> 
        </body> 
    </TestCase>

</testCases>

</UnitTester>
