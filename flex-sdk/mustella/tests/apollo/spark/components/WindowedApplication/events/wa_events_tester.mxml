<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<UnitTester testDir="apollo/spark/components/WindowedApplication/events/"  xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" testSWF="wa_app2.mxml">

    <!-- this set of lines form a template that must be in each unit test -->
    <mx:Script>
    <![CDATA[
    public static function init(o:DisplayObject):void
    {
    }
    ]]>
    </mx:Script>
    <mx:Metadata>
    <![CDATA[
        [Mixin]
    ]]>
    </mx:Metadata>
    <!-- end of set of lines that must be in each unit test -->

    <mx:Script>
    <![CDATA[

        import flash.events.*;
        import mx.events.*;
        import mx.core.FlexGlobals;
        import spark.components.*;

    ]]>
    </mx:Script>

    <testCases>

        <TestCase testID="wa_displayStateChangeAndChanging_test1" keywords="[WindowedApplication,displayStateChange,displayStateChanging]" description="Make sure displayStateChange and displayStateChanging occur when minimizing." >
            <setup>
                <RunCode code="FlexGlobals.topLevelApplication.doReset()" waitTarget="" waitEvent="resetComplete" />
            </setup>
            <body>
               <RunCode code="FlexGlobals.topLevelApplication.setUpDisplayStateListeners()" />
               <RunCode code="FlexGlobals.topLevelApplication.minimize()" waitEvent="displayStateChange" />
               <AssertMethodValue method="value = FlexGlobals.topLevelApplication.eventArray[0]" valueExpression="value = flash.events.NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING" />
               <AssertMethodValue method="value = FlexGlobals.topLevelApplication.eventArray[1]" valueExpression="value = flash.events.NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE" />
            </body>
        </TestCase>

        <TestCase testID="wa_displayStateChangeAndChanging_test2" keywords="[WindowedApplication,displayStateChange,displayStateChanging]" description="Make sure displayStateChange and displayStateChanging occur when maximizing." >
            <setup>
                <RunCode code="FlexGlobals.topLevelApplication.doReset()" waitTarget="" waitEvent="resetComplete" />
            </setup>
            <body>
               <RunCode code="FlexGlobals.topLevelApplication.setUpDisplayStateListeners()" />
               <RunCode code="FlexGlobals.topLevelApplication.maximize()" waitEvent="displayStateChange" />
               <AssertMethodValue method="value = FlexGlobals.topLevelApplication.eventArray[0]" valueExpression="value = flash.events.NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING" />
               <AssertMethodValue method="value = FlexGlobals.topLevelApplication.eventArray[1]" valueExpression="value = flash.events.NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE" />
            </body>
        </TestCase>

        <TestCase testID="wa_displayStateChangeAndChanging_test3" keywords="[WindowedApplication,displayStateChange,displayStateChanging]" description="Make sure displayStateChange and displayStateChanging occur when restoring from minimized." >
            <setup>
                <RunCode code="FlexGlobals.topLevelApplication.doReset()" waitTarget="" waitEvent="resetComplete" />
            </setup>
            <body>
               <RunCode code="FlexGlobals.topLevelApplication.setUpDisplayStateListeners()" />
               <RunCode code="FlexGlobals.topLevelApplication.minimize()" waitEvent="displayStateChange" />
               <RunCode code="FlexGlobals.topLevelApplication.eventArray = new Array()" />
               <RunCode code="FlexGlobals.topLevelApplication.restore()" waitEvent="displayStateChange" />
               <AssertMethodValue method="value = FlexGlobals.topLevelApplication.eventArray[0]" valueExpression="value = flash.events.NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING" />
               <AssertMethodValue method="value = FlexGlobals.topLevelApplication.eventArray[1]" valueExpression="value = flash.events.NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE" />
            </body>
        </TestCase>

        <TestCase testID="wa_displayStateChangeAndChanging_test4" keywords="[WindowedApplication,displayStateChange,displayStateChanging]" description="Make sure displayStateChange and displayStateChanging occur when restoring from maximized." >
            <setup>
                <RunCode code="FlexGlobals.topLevelApplication.doReset()" waitTarget="" waitEvent="resetComplete" />
            </setup>
            <body>
               <RunCode code="FlexGlobals.topLevelApplication.setUpDisplayStateListeners()" />
               <RunCode code="FlexGlobals.topLevelApplication.maximize()" waitEvent="displayStateChange" />
               <RunCode code="FlexGlobals.topLevelApplication.eventArray = new Array()" />
               <RunCode code="FlexGlobals.topLevelApplication.restore()" waitEvent="displayStateChange" />               
               <AssertMethodValue method="value = FlexGlobals.topLevelApplication.eventArray[0]" valueExpression="value = flash.events.NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING" />
               <AssertMethodValue method="value = FlexGlobals.topLevelApplication.eventArray[1]" valueExpression="value = flash.events.NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE" />
            </body>
        </TestCase>

        <TestCase testID="wa_invoke_test1" keywords="[WindowedApplication,invoke]" description="Make sure invoke was dispatched when the app. started." >
            <body>
               <AssertPropertyValue target="" propertyName="invoked" value="invoke" />
            </body>
        </TestCase>

        <TestCase testID="wa_windowComplete_test1" keywords="[WindowedApplication,windowComplete]" description="Make sure windowComplete was dispatched when the app. started." >
            <body>
               <AssertPropertyValue target="" propertyName="windowCompleted" value="windowComplete" />
            </body>
        </TestCase>
        
    </testCases>
</UnitTester>
