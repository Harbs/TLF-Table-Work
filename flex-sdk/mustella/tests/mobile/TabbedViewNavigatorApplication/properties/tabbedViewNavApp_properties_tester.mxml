<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<UnitTester testDir="mobile/TabbedViewNavigatorApplication/properties/"  
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns="*" 
	testSWF="TabbedAppNoNavigators.mxml">
    
	<!-- This set of lines form a template that must be in each unit test. -->
    <fx:Script>
        <![CDATA[
        public static function init(o:DisplayObject):void
        {
        }           
        ]]>
    </fx:Script>
    
    <fx:Metadata>
        <![CDATA[
            [Mixin]
        ]]>
    </fx:Metadata>  
    <!-- end of set of lines that must be in each unit test -->

    <fx:Script>
        <![CDATA[
			import views.*;
			import mx.core.FlexGlobals;
			import spark.components.TabbedViewNavigator;
			import spark.components.View;
			import spark.components.ViewNavigator;
			import spark.components.supportClasses.ViewNavigatorBase;

			private var _nav1:ViewNavigator;
			private var _nav2:ViewNavigator;
			private var _nav3:ViewNavigator;
			
			public function get nav1():ViewNavigator
			{
				if (_nav1 == null)
				{
					_nav1 = new ViewNavigator();
					_nav1.percentWidth = 100;
					_nav1.percentHeight = 100;
					_nav1.label = "Nav1";
				}
				return _nav1;
			}

			public function get nav2():ViewNavigator
			{
				if (_nav2 == null)
				{
					_nav2 = new ViewNavigator();
					_nav2.percentWidth = 100;
					_nav2.percentHeight = 100;
					_nav2.label = "Nav2";
				}
				return _nav2;
			}

			public function get nav3():ViewNavigator
			{
				if (_nav3 == null)
				{
					_nav3 = new ViewNavigator();
					_nav3.percentWidth = 100;
					_nav3.percentHeight = 100;
					_nav3.label = "Nav3";
				}
				return _nav3;
			}
			
			public function activeView() : View 
			{
				return tabbedNavigator().activeView;
			}

			public function tabbedNavigator() : TabbedViewNavigator 
			{
				return FlexGlobals.topLevelApplication.tabbedNavigator;
			}
			
			public function selectedNavigator() : ViewNavigator 
			{
				return FlexGlobals.topLevelApplication.tabbedNavigator.selectedNavigator;
			}
			
			private function assignNewInstance1():void
			{
				var nav:Vector.<ViewNavigatorBase> = new Vector.<ViewNavigatorBase>();
				nav.push(nav2);
				nav.push(nav3);
				FlexGlobals.topLevelApplication.navigators = nav;
			}

			private function assignNewInstance2():void
			{
				var nav:Vector.<ViewNavigatorBase> = new Vector.<ViewNavigatorBase>();
				nav.push(nav2);
				nav.push(nav3);
				nav.push(nav1);
				FlexGlobals.topLevelApplication.navigators = nav;
			}
			
			private function assignNewInstanceEmpty():void
			{
				FlexGlobals.topLevelApplication.navigators = new Vector.<ViewNavigatorBase>();
			}
			
        ]]>
    </fx:Script>

    <testCases>
		<TestCase testID="tabbedViewNavigatorApp_navigators_removeItemInNewInstance" description="Change navigators vector to a list with less elements than original" keywords="[TabbedViewNavigatorApplication]">
			<setup>
				<RunCode code="FlexGlobals.topLevelApplication.resetNavigator()" waitTarget="tabbedNavigator" waitEvent="resetNavigatorComplete"/>
				<RunCode code="FlexGlobals.topLevelApplication.tabbedNavigator.addItem(nav1)" waitTarget="tabbedNavigator" waitEvent="propertyChange"/>				
				<RunCode code="FlexGlobals.topLevelApplication.tabbedNavigator.addItem(nav2)" waitTarget="tabbedNavigator" waitEvent="propertyChange"/>				
				<RunCode code="FlexGlobals.topLevelApplication.tabbedNavigator.addItem(nav3)" waitTarget="tabbedNavigator" waitEvent="propertyChange"/>				
			</setup>
            <body>
				<AssertPropertyValue target="navigators" propertyName="length" value="3"/>
				<AssertPropertyValue target="tabbedNavigator.selectedNavigator" propertyName="label" value="Nav1"/>
				<RunCode code="assignNewInstance1()" waitEvent="collectionChange" waitTarget="tabbedNavigator"/>
				<AssertPropertyValue target="navigators" propertyName="length" value="2"/>
				<AssertPropertyValue target="tabbedNavigator.selectedNavigator" propertyName="label" value="Nav2"/>
            </body>
        </TestCase>

		<TestCase testID="tabbedViewNavigatorApp_navigators_addItemInNewInstance" description="Change navigators vector to a list with more elements than original" keywords="[TabbedViewNavigatorApplication]">
			<setup>
				<RunCode code="FlexGlobals.topLevelApplication.resetNavigator()" waitTarget="tabbedNavigator" waitEvent="resetNavigatorComplete"/>
				<RunCode code="FlexGlobals.topLevelApplication.tabbedNavigator.addItem(nav1)" waitTarget="tabbedNavigator" waitEvent="propertyChange"/>				
				<RunCode code="FlexGlobals.topLevelApplication.tabbedNavigator.addItem(nav2)" waitTarget="tabbedNavigator" waitEvent="propertyChange"/>				
			</setup>
            <body>
				<AssertPropertyValue target="navigators" propertyName="length" value="2"/>
				<AssertPropertyValue target="tabbedNavigator.selectedNavigator" propertyName="label" value="Nav1"/>
				<RunCode code="assignNewInstance2()" waitEvent="collectionChange" waitTarget="tabbedNavigator"/>
				<AssertPropertyValue target="navigators" propertyName="length" value="3"/>
				<AssertPropertyValue target="tabbedNavigator.selectedNavigator" propertyName="label" value="Nav2"/>
            </body>
        </TestCase>
		
		<TestCase testID="tabbedViewNavigatorApp_navigators_emptyInstance" description="Change navigators to an empty vector" keywords="[TabbedViewNavigatorApplication]">
			<setup>
				<RunCode code="FlexGlobals.topLevelApplication.resetNavigator()" waitTarget="tabbedNavigator" waitEvent="resetNavigatorComplete"/>
				<RunCode code="FlexGlobals.topLevelApplication.tabbedNavigator.addItem(nav1)" waitTarget="tabbedNavigator" waitEvent="propertyChange"/>				
				<RunCode code="FlexGlobals.topLevelApplication.tabbedNavigator.addItem(nav2)" waitTarget="tabbedNavigator" waitEvent="propertyChange"/>				
				<RunCode code="FlexGlobals.topLevelApplication.tabbedNavigator.addItem(nav3)" waitTarget="tabbedNavigator" waitEvent="propertyChange"/>				
			</setup>
            <body>
				<AssertPropertyValue target="navigators" propertyName="length" value="3"/>
				<AssertPropertyValue target="tabbedNavigator.selectedNavigator" propertyName="label" value="Nav1"/>
				<RunCode code="assignNewInstanceEmpty()" waitEvent="collectionChange" waitTarget="tabbedNavigator"/>
				<AssertPropertyValue target="navigators" propertyName="length" value="0"/>
				<AssertMethodValue method="value=(selectedNavigator() == null)" value="true"/>
            </body>
        </TestCase>

    </testCases>

</UnitTester>
