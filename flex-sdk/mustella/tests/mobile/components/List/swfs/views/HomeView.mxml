<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:renderers="renderers.*"
        xmlns:q="*"
        title="List Testing"
		viewDeactivate="saveScrollPosition()">

    <fx:Script>
        <![CDATA[
			import mx.events.FlexEvent;
			
			import spark.events.ElementExistenceEvent;
			import spark.events.IndexChangeEvent;

            private function testCaseSelected(event:IndexChangeEvent):void {
                navigator.pushView(event.target.selectedItem.className);
            }

            private function getLabel(item:Object):String {
                return ((testCaseViews.getItemIndex(item) as Number) + 1) + ".  " + item.name;
            }

            private function restoreScrollPosition(event:FlexEvent):void {

                // the data might be null if it has never been set
                if (data == null)
                    return;

                // restore the saved scroll position
                var vsp:Number = data.verticalScrollPosition as Number;
                var hsp:Number = data.horizontalScrollPosition as Number;

                testCaseList.dataGroup.verticalScrollPosition = (vsp) ? vsp : 0;
                testCaseList.dataGroup.horizontalScrollPosition =  (hsp) ? hsp : 0;
            }

			private function saveScrollPosition():void {
				if (data == null)
					data = new Object();

				// save the current scroll position of the List when the screen is deactivated
				data.verticalScrollPosition   = testCaseList.dataGroup.verticalScrollPosition;
				data.horizontalScrollPosition = testCaseList.dataGroup.horizontalScrollPosition;
			}

        ]]>
    </fx:Script>

    <fx:Declarations>
        <s:ArrayList id="testCaseViews">
            <fx:Object name="Common Touch Scrolling" className="{views.CommonTouchScrollingGroupBasicView}" />
            <fx:Object name="Greydient" className="{views.GreydientView}" />
            <fx:Object name="Split List" className="{views.SplitListView}" />
            <fx:Object name="RSS Reader" className="{views.RSSReaderView}" />
            <fx:Object name="Nested" className="{views.NestedInVerticalView}" />
            <fx:Object name="Expanding Item Renderers" className="{views.ExpandingItemRendererView}" />
            <fx:Object name="Airline Item Renderer" className="{views.AirlineView}" />
            <fx:Object name="Hockey Rosters" className="{views.SportsPlayersView}" />
            <fx:Object name="TileLayout" className="{views.TileLayoutView}" />
            <fx:Object name="Phone Dialer" className="{views.PhoneDialerListView}" />
            <fx:Object name="Scroll Policy" className="{views.ScrollPolicyView}" />
            <fx:Object name="Button Renderer" className="{views.ButtonRendererView}" />
			<fx:Object name="LabelItemRenderer" className="{views.LabelItemRendererView}" />
            <fx:Object name="IconItemRenderer" className="{views.IconItemRendererView}" />
            <fx:Object name="Calculator" className="{views.CalculatorView}" />
            <fx:Object name="Hover" className="{views.HoverView}" />
            <fx:Object name="Button Down" className="{views.ButtonDownView}" />
            <fx:Object name="Minor Axis Scrolling" className="{views.MinorAxisScrollingView}" />
            <fx:Object name="Checkmark Selection" className="{views.CheckmarkSelectionView}" />
            <fx:Object name="Multiple Selection" className="{views.MultipleSelectionView}" />
            <fx:Object name="Contact List" className="{views.ContactListView}" />
            <fx:Object name="Settings" className="{views.SettingsView}" />
            <fx:Object name="Market" className="{views.MarketView}" />
			<fx:Object name="Touch Delay" className="{views.TouchDelayView}" /><!-- TODO: Remove, touchup this view? -->
			<fx:Object name="Bounce/Pull Effects" className="{views.SmallContentView}" />
            <fx:Object name="ScrollBar Color" className="{views.ScrollBarColorView}" />
            <fx:Object name="Springboard" className="{views.SpringboardView}" />
            <fx:Object name="Content Size Change" className="{views.ContentSizeChangeView}" />
            <fx:Object name="Sports News" className="{views.SportsNewsView}" />
            <fx:Object name="Measure" className="{views.MeasureView}" />
            <fx:Object name="ScrollBar Creation" className="{views.ScrollBarCreationView}" />
			<fx:Object name="Paging HGroup" className="{views.PagingHGroup}" />
			<fx:Object name="Paging VGroup" className="{views.PagingVGroup}" />
			<fx:Object name="List Paging Vertical" className="{views.PagingList}" />
			<fx:Object name="List Paging Horizontal" className="{views.PagingListHorizontal}" />
			<fx:Object name="List Paging Tile" className="{views.PagingListTile}" />
			<fx:Object name="List Vertical" className="{views.ListVertical}" />
			<fx:Object name="List Horizontal" className="{views.ListHorizontal}" />
			<fx:Object name="List Tile" className="{views.ListTile}" />
			<fx:Object name="Snapping HGroup" className="{views.SnappingHGroup}" />
			<fx:Object name="Snapping VGroup" className="{views.SnappingVGroup}" />
			<fx:Object name="Snapping TileGroup" className="{views.SnappingTileGroup}" />
			<fx:Object name="Paging and Snapping" className="{views.PagingAndSnappingHGroup}" />
			<fx:Object name="List Resize with Snapping" className="{views.ListResize}" />
			<fx:Object name="List Resize with Transition" className="{views.ListResizeWithTransition}" />
        </s:ArrayList>
    </fx:Declarations>

    <s:states>
        <s:State name="portrait"/>
        <s:State name="landscape"/>
    </s:states>

    <s:Label text="Choose test case:" horizontalCenter="0" top="20" fontWeight="bold" />

    <s:List id="testCaseList" labelFunction="getLabel" top="65" left="30" right="30" bottom="30"
            dataProvider="{testCaseViews}"
            creationComplete="restoreScrollPosition(event)"
            change="testCaseSelected(event)">
        <s:itemRenderer>
            <fx:Component>
                <s:LabelItemRenderer height="100"/>
            </fx:Component>
        </s:itemRenderer>
        <s:layout>
            <s:VerticalLayout horizontalAlign="justify" gap="0" />
        </s:layout>
    </s:List>

</s:View>
