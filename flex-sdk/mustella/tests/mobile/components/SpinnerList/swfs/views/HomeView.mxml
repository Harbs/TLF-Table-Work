<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        title="SpinnerList Testing"
        viewDeactivate="saveScrollPosition()">
    
    <fx:Script>
        <![CDATA[
            import mx.events.FlexEvent;
            
            import spark.events.ElementExistenceEvent;
            import spark.events.IndexChangeEvent;
            
            private function testCaseSelected(event:IndexChangeEvent):void {
                navigator.pushView(event.target.selectedItem.className);
            }
            
            private function getLabel(item:Object):String {
                return ((testCaseViews.getItemIndex(item) as Number) + 1) + ".  " + item.name;
            }
            
            private function restoreScrollPosition(event:FlexEvent):void {
                
                // the data might be null if it has never been set
                if (data == null)
                    return;
                
                // restore the saved scroll position
                var vsp:Number = data.verticalScrollPosition as Number;
                var hsp:Number = data.horizontalScrollPosition as Number;
                
                testCaseList.dataGroup.verticalScrollPosition = (vsp) ? vsp : 0;
                testCaseList.dataGroup.horizontalScrollPosition =  (hsp) ? hsp : 0;
            }
            
            private function saveScrollPosition():void {
                if (data == null)
                    data = new Object();
                
                // save the current scroll position of the List when the screen is deactivated
                data.verticalScrollPosition   = testCaseList.dataGroup.verticalScrollPosition;
                data.horizontalScrollPosition = testCaseList.dataGroup.horizontalScrollPosition;
            }
            
        ]]>
    </fx:Script>
    
    <fx:Declarations>
        <s:ArrayList id="testCaseViews">
            <fx:Object name="Android DateSpinner" className="{views.AndroidDateSpinnerView}" />
            <fx:Object name="Android Timer" className="{views.AndroidTimerView}" />
            <fx:Object name="iOS Date Spinner" className="{views.iOSDateSpinnerView}" />
            <fx:Object name="iOS Time Spinner" className="{views.iOSTimeSpinnerView}" />
            <fx:Object name="Pop Up Date Spinner" className="{views.PopUpSpinnerView}" />
            <fx:Object name="Slot Machine" className="{views.SlotMachineView}" />
            <fx:Object name="DataProvider" className="{views.DataProviderView}" />
            <fx:Object name="Events" className="{views.EventsView}" />
            <fx:Object name="Virtual Layout" className="{views.VirtualLayoutView}" />
            <fx:Object name="Expanding" className="{views.ExpandingView}" />
            <fx:Object name="Animate to Selected Index" className="{views.AnimateToSelectedIndexView}" />
            <fx:Object name="Disabled Items View" className="{views.DisabledItemsView}" />
            <fx:Object name="Nested Scrolling" className="{views.NestedScrollingView}" />
            <fx:Object name="Styles" className="{views.StylesView}" />
            <fx:Object name="States" className="{views.StatesView}" />
            <fx:Object name="Empty" className="{views.EmptyView}" />
        </s:ArrayList>
    </fx:Declarations>
    
    <s:Label text="Choose test case:" horizontalCenter="0" top="20" fontWeight="bold" />
    
    <s:List id="testCaseList" labelFunction="getLabel" top="65" left="30" right="30" bottom="30"
            dataProvider="{testCaseViews}"
            creationComplete="restoreScrollPosition(event)"
            change="testCaseSelected(event)">
        <s:itemRenderer>
            <fx:Component>
                <s:LabelItemRenderer height="100"/>
            </fx:Component>
        </s:itemRenderer>
    </s:List>
    
</s:View>
