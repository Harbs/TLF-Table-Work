<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
        xmlns:s="library://ns.adobe.com/flex/spark" 
        title="Animate To Selected Index">
    
    <fx:Script>
        <![CDATA[
            import mx.events.PropertyChangeEvent;
            
            /** Keeps track of the scroll position changes during an animation */
            public var scrollPositions:Array = new Array();
            
            /** Setup a listener to watch for scroll position changes */
            private function detectScrollPositionChanges():void
            {
                target.dataGroup.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, handle, false, 0, true);
                target2.dataGroup.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, handle, false, 0, true);
            }
            
            /** Keep track of scroll position changes */
            private function handle(e:PropertyChangeEvent):void 
            {
                if (e.source == e.target && e.property == "verticalScrollPosition")
                    scrollPositions.push(e.newValue as Number);
            }
            
            /** Returns true if the scroll positions are non-decreasing */
            public function assertPositiveScrollDirection():Boolean
            {
                for (var i:int = 0; i < scrollPositions.length - 1; i++)
                    if (scrollPositions[i] > scrollPositions[i+1])
                        return false;
                
                return true;
            }
            
            /** Returns true if the scroll positions are non-increasing */
            public function assertNegativeScrollDirection():Boolean
            {
                for (var i:int = 0; i < scrollPositions.length - 1; i++)
                    if (scrollPositions[i] < scrollPositions[i+1])
                        return false;
                
                return true;
            }
        
            /** Traces the direction of scroll */
            private function showResults():void
            {
                trace('positive scroll direction:', assertPositiveScrollDirection());
                trace('negative scroll direction:', assertNegativeScrollDirection());
            }
        ]]>
    </fx:Script>
    
    <fx:Declarations>
        <s:ArrayList id="objectDataProvider">
            <fx:Object name="first" />
            <fx:Object name="second" />
            <fx:Object name="third" />
            <fx:Object name="fourth"  />
            <fx:Object name="fifth"  />
            <fx:Object name="sixth" />
            <fx:Object name="seventh" />
        </s:ArrayList>
    </fx:Declarations>
    
    <s:actionContent>
        <s:Button label="clear" click="scrollPositions = new Array()" />
        <s:Button label="go to 50" click="target.mx_internal::animateToSelectedIndex(50)" />
        <s:Button label="show" click="showResults()" />
    </s:actionContent>
    
    <s:layout>
        <s:VerticalLayout paddingTop="25" />
    </s:layout>
    
    <s:SpinnerList id="target" creationComplete="detectScrollPositionChanges()"
                   typicalItem="1000"
                   textAlign="center">
        <s:NumericDataProvider minimum="0" maximum="100" />
    </s:SpinnerList>
    
    <s:Rect width="100%" height="2">
        <s:fill>
            <s:SolidColor color="red" />
        </s:fill>
    </s:Rect>
    
    <!-- SDK-31315 -->
    <s:SpinnerList id="target2" width="300" height="140"> 
        <s:ArrayList> 
            <fx:String>first</fx:String> 
            <fx:String>second</fx:String> 
            <fx:String>third</fx:String> 
            <fx:String>fourth</fx:String> 
            <fx:String>fifth</fx:String> 
            <fx:String>sixth</fx:String> 
            <fx:String>seventh</fx:String> 
            <fx:String>last</fx:String> 
        </s:ArrayList> 
    </s:SpinnerList> 
    
</s:View>
