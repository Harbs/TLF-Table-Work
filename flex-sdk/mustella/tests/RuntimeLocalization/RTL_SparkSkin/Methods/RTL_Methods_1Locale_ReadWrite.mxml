<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<UnitTester testDir="RuntimeLocalization/RTL_SparkSkin/Methods/"  xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" testSWF="RTL_ResourceBundleMetadata_frFR_ReadWrite.mxml">

    <!-- this set of lines form a template that must be in each unit test -->
        <mx:Script><![CDATA[
            public static function init(o:DisplayObject):void{}
        ]]></mx:Script>

        <mx:Metadata><![CDATA[
            [Mixin]
        ]]></mx:Metadata>   
    <!-- end of set of lines that must be in each unit test. -->
    
    <mx:Script><![CDATA[
        import mx.controls.Alert;
        import mx.utils.*;
        import mx.resources.IResourceManager
        import mx.resources.ResourceManager;
        import mx.resources.ResourceBundle;
        import mx.events.ResourceEvent;
        
        public var rm:IResourceManager = ResourceManager.getInstance();
        public var curAlert:Alert = null;

        // There is very funky behavior when reusing the same variable for the returned IEventDispatchers.  Bug 203869.
        public var ed1:IEventDispatcher;
        public var ed2:IEventDispatcher;
        public var ed3:IEventDispatcher;
        public var ed4:IEventDispatcher;
        public var ed5:IEventDispatcher;
        public var ed6:IEventDispatcher;

        private function clearAllNonFrenchData():void{            
            
            ResourceManager.getInstance().localeChain = ['fr_FR'];
            
            var numLocales:int = ResourceManager.getInstance().getLocales().length;
            
            for(var i:int = numLocales; i > 0; --i){
                if(ResourceManager.getInstance().getLocales()[i-1] != "fr_FR"){
                    ResourceManager.getInstance().removeResourceBundlesForLocale(ResourceManager.getInstance().getLocales()[i-1]);
                }
            }
        }

        // The dispatcher param. is used to choose one of ed1, ed2, or ed3 from above.
        private function setUpEventDispatchers(dispatcher:int):void{
            switch(dispatcher){
                case 1:
                    ed1 = ResourceManager.getInstance().loadResourceModule('Assets/bundles/framework/resMod_framework_enUS_001.swf');
                    ed1.addEventListener(ResourceEvent.ERROR, handleErrorEvent);
                    ed1.addEventListener(ResourceEvent.COMPLETE, handleCompleteEvent);
                    break;
                case 2:
                    ed2 = ResourceManager.getInstance().loadResourceModule('Assets/bundles/framework/resMod_framework_enUS_002.swf', true);
                    ed2.addEventListener(ResourceEvent.ERROR, handleErrorEvent);
                    ed2.addEventListener(ResourceEvent.COMPLETE, handleCompleteEvent);
                    break;
                case 3:
                    ed3 = ResourceManager.getInstance().loadResourceModule('Assets/bundles/framework/resMod_framework_enUS_003.swf', false);
                    ed3.addEventListener(ResourceEvent.ERROR, handleErrorEvent);
                    ed3.addEventListener(ResourceEvent.COMPLETE, handleCompleteEvent);
                    break;
                case 4:
                    ed4 = ResourceManager.getInstance().loadResourceModule('Assets/bundles/custom/resMod_enUS_bundle1_001.swf');
                    ed4.addEventListener(ResourceEvent.ERROR, handleErrorEvent);
                    ed4.addEventListener(ResourceEvent.COMPLETE, handleCompleteEvent);
                    break;
                case 5:
                    ed5 = ResourceManager.getInstance().loadResourceModule('Assets/bundles/custom/resMod_enUS_bundle1_002.swf');
                    ed5.addEventListener(ResourceEvent.ERROR, handleErrorEvent);
                    ed5.addEventListener(ResourceEvent.COMPLETE, handleCompleteEvent);
                    break;
                case 6:
                    ed6 = ResourceManager.getInstance().loadResourceModule('Assets/bundles/custom/resMod_enUS_bundle1_003.swf');
                    ed6.addEventListener(ResourceEvent.ERROR, handleErrorEvent);
                    ed6.addEventListener(ResourceEvent.COMPLETE, handleCompleteEvent);
                    break;
            }
        }

        // Listeners
        private function handleErrorEvent(e:ResourceEvent):void{trace("handleErrorEvent: " + e.toString())}
        private function handleProgressEvent(e:ResourceEvent):void{trace("handleProgressEvent: " + e.toString())}
        private function handleCompleteEvent(e:ResourceEvent):void{trace("handleCompleteEvent: " + e.toString())}
                
    ]]></mx:Script>

    <testCases>

        <TestCase frequency="all" testID="RTL_Method_loadResourceModule_UpdateFlagDefaultTrue" description="Confirm that loadResourceModule defaults to sending an update event when it is done." keywords="[Runtime Localization,loadResourceModule]" >
            <setup>
                <RunCode code="clearAllNonFrenchData()" />
                <AssertMethodValue method="value=ResourceManager.getInstance().getLocales().length" value="1" />
                <AssertMethodValue method="value=ResourceManager.getInstance().getLocales()[0]" value="fr_FR" />
                <AssertMethodValue method="value=ResourceManager.getInstance().localeChain.length" value="1" />
                <AssertMethodValue method="value=ResourceManager.getInstance().localeChain[0]" value="fr_FR" />
                <AssertPropertyValue target="lbl1" propertyName="text" value="French View Source" />
            </setup>
            <body>
                <!-- load a single en_US bundle so we can add en_US to the locale chain -->
                <RunCode code="setUpEventDispatchers(4)" />
                <AssertEvent target="script:ed4" eventName="complete" eventClass="mx.events::ResourceEvent" />
                <RunCode code="ResourceManager.getInstance().localeChain=['en_US','fr_FR']" /> 
                <RunCode code="setUpEventDispatchers(1)" />
                <AssertEvent target="script:ed1" eventName="complete" eventClass="mx.events::ResourceEvent" />
                <AssertPropertyValue target="lbl1" propertyName="text" value="View Source" />
            </body>
        </TestCase>

        <TestCase frequency="all" testID="RTL_Method_loadResourceModule_UpdateFlagTrue" description="Confirm that loadResourceModule sends an update event when it is done if update is explicitly set to true." keywords="[Runtime Localization,loadResourceModule]" >
            <setup>
                <RunCode code="clearAllNonFrenchData()" />
                <AssertMethodValue method="value=ResourceManager.getInstance().getLocales().length" value="1" />
                <AssertMethodValue method="value=ResourceManager.getInstance().getLocales()[0]" value="fr_FR" />
                <AssertMethodValue method="value=ResourceManager.getInstance().localeChain.length" value="1" />
                <AssertMethodValue method="value=ResourceManager.getInstance().localeChain[0]" value="fr_FR" />
                <AssertPropertyValue target="lbl1" propertyName="text" value="French View Source" />
            </setup>
            <body>
                <!-- load a single en_US bundle so we can add en_US to the locale chain -->
                <RunCode code="setUpEventDispatchers(5)" />
                <AssertEvent target="script:ed5" eventName="complete" eventClass="mx.events::ResourceEvent" />
                <RunCode code="ResourceManager.getInstance().localeChain=['en_US','fr_FR']" /> 
                <RunCode code="setUpEventDispatchers(2)" />
                <AssertEvent target="script:ed2" eventName="complete" eventClass="mx.events::ResourceEvent" />
                <AssertPropertyValue target="lbl1" propertyName="text" value="View Source" />
            </body>
        </TestCase>

        <TestCase frequency="all" testID="RTL_Method_loadResourceModule_UpdateFlagFalse" description="Confirm that loadResourceModule does not send an update event when it is done if update is set to false." keywords="[Runtime Localization,loadResourceModule]" >
            <setup>
                <RunCode code="clearAllNonFrenchData()" />
                <AssertMethodValue method="value=ResourceManager.getInstance().getLocales().length" value="1" />
                <AssertMethodValue method="value=ResourceManager.getInstance().getLocales()[0]" value="fr_FR" />
                <AssertMethodValue method="value=ResourceManager.getInstance().localeChain.length" value="1" />
                <AssertMethodValue method="value=ResourceManager.getInstance().localeChain[0]" value="fr_FR" />
                <AssertPropertyValue target="lbl1" propertyName="text" value="French View Source" />
            </setup>
            <body>
                <!-- load a single en_US bundle so we can add en_US to the locale chain -->
                <RunCode code="setUpEventDispatchers(6)" />
                <AssertEvent target="script:ed6" eventName="complete" eventClass="mx.events::ResourceEvent" />
                <RunCode code="ResourceManager.getInstance().localeChain=['en_US','fr_FR']" /> 
                <RunCode code="setUpEventDispatchers(3)" />
                <AssertEvent target="script:ed3" eventName="complete" eventClass="mx.events::ResourceEvent" />
                <AssertPropertyValue target="lbl1" propertyName="text" value="French View Source" />
            </body>
        </TestCase>

    </testCases>
</UnitTester>
