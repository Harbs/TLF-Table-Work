<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<UnitTester testDir="resources/Integration/FrameworkProperties/"  xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" testSWF="RTL_Integration_FrameworkProperties_App.mxml" >

    <!-- this set of lines form a template that must be in each unit test -->
        <mx:Script><![CDATA[
            public static function init(o:DisplayObject):void{}
        ]]></mx:Script>

        <mx:Metadata><![CDATA[
            [Mixin]
        ]]></mx:Metadata>   
    <!-- end of set of lines that must be in each unit test -->
    
    <mx:Script><![CDATA[
        import mx.controls.Alert;
        import mx.formatters.NumberBaseRoundType;
        import mx.formatters.DateBase;
        import mx.managers.PopUpManager;
        import mx.validators.CurrencyValidatorAlignSymbol;

        public var curAlert:Alert;
        
        // For reference, here is how to use mx_internal if we need to:
        // use namespace mx_internal;
        // <AssertPropertyValue target="dc.mx_internal:monthDisplay" propertyName="text" valueExpression="value=qaMonths[monthIndex]" />
        
    ]]></mx:Script>

<!--
    These may appear to be getter/setter tests, but they are more.
    They are testing that, when compiled for 3.0:
    - Users can get the property.
    - Users can set the property and get it.
    - Users can set the property to null and get back the default.
    - Users can set the property to non-null, set it to null, and get back the default.
    
    There will be a similar set of tests for the 2.0.1 backwards compatibility mode.
    For example, they will test the null is returned when it is set.
-->    
    <testCases>

<!--
==============================================================================
Alert - cancelLabel
==============================================================================
-->
<!-- 
    Cannot call ResetComponent on Alert to reset the static members.  The 
    test cases will therefore be sensitive to the order in which they are run.

    To help with this, put sets of test cases that will be affected into
    one test cases with several asserts.  It's not ideal, since it breaks the
    one-test-case-per-test-case model, and there's no way to start from scratch.
    Perhaps there should be a separate SWF for each Alert test.

    Until then, a failure in one, e.g. setting the custom value, will result in the 
    test case ending, and not putting the original value back, so the next test
    case will have a mess to clean up when it starts.  So we're starting each
    Alert test case by setting the property being tested to null, which is in
    itself a test case.  
    
    Each Alert test really should be in a separate SWF.

-->
<TestCase frequency="all" testID="Alert_cancelLabel" description="Test default value." keywords="[Runtime Localization,Alert,cancelLabel]" >
    <body>
        <AssertMethodValue method="value=Alert.cancelLabel" valueExpression="value='Cancel'" />
        <RunCode code="Alert.cancelLabel='custom'" />
        <AssertMethodValue method="value=Alert.cancelLabel" valueExpression="value='custom'" />
        <RunCode code="Alert.cancelLabel=null" />
        <AssertMethodValue method="value=Alert.cancelLabel" valueExpression="value='Cancel'" />
        <Pause timeout="1" />
    </body>
    <cleanup>
        <RunCode code="Alert.cancelLabel=null" />
    </cleanup>
</TestCase>

<TestCase frequency="all" testID="Alert_cancelLabel_UseTheProperty" description="Test default value." keywords="[Runtime Localization,Alert,cancelLabel]" >
    <setup>
        <RunCode code="Alert.cancelLabel=null" />
        <AssertMethodValue method="value=Alert.cancelLabel" valueExpression="value='Cancel'" />
    </setup>
    <body>
        <RunCode code="Alert.cancelLabel='custom'" />
        <RunCode code="curAlert=Alert.show('The Cancel button should say custom.', 'Alert Test', mx.controls.Alert.CANCEL)" />
        <WaitForEffectsToEnd />
        <AssertPropertyValue target="script:curAlert.mx_internal:alertForm.mx_internal:buttons.0" propertyName="label" value="custom" />
        <RunCode code="PopUpManager.removePopUp(curAlert)" />
        <WaitForEffectsToEnd />
    </body>
    <cleanup>
        <RunCode code="Alert.cancelLabel=null" />
    </cleanup>
</TestCase>

<TestCase frequency="all" testID="Alert_cancelLabel_UI_Null" description="Test default value." keywords="[Runtime Localization,Alert,cancelLabel]" >
    <setup>
        <RunCode code="Alert.cancelLabel=null" />
        <AssertMethodValue method="value=Alert.cancelLabel" valueExpression="value='Cancel'" />
    </setup>
    <body>
        <RunCode code="Alert.cancelLabel='custom'" />
        <RunCode code="curAlert=Alert.show('The Cancel button should say custom.', 'Alert Test', mx.controls.Alert.CANCEL)" />
        <WaitForEffectsToEnd />
        <RunCode code="PopUpManager.removePopUp(curAlert)" />
        <WaitForEffectsToEnd />
        <RunCode code="Alert.cancelLabel=null" />
        <RunCode code="curAlert=Alert.show('The Cancel button should be the default value.', 'Alert Test', mx.controls.Alert.CANCEL)" />
        <WaitForEffectsToEnd />
        <AssertPropertyValue target="script:curAlert.mx_internal:alertForm.mx_internal:buttons.0" propertyName="label" value="Cancel" />
        <RunCode code="PopUpManager.removePopUp(curAlert)" />
        <WaitForEffectsToEnd />
    </body>
    <cleanup>
        <RunCode code="Alert.cancelLabel=null" />
    </cleanup>
</TestCase>

<!--
==============================================================================
Alert - noLabel 
TODO: UI
==============================================================================
-->
<TestCase frequency="all" testID="Alert_noLabel_Default" description="Test default value." keywords="[Runtime Localization,Alert,noLabel]" >
    <body>
        <AssertMethodValue method="value=Alert.noLabel" valueExpression="value='No'" />
        <RunCode code="Alert.noLabel='custom'" />
        <AssertMethodValue method="value=Alert.noLabel" valueExpression="value='custom'" />
        <RunCode code="Alert.noLabel=null" />
        <AssertMethodValue method="value=Alert.noLabel" valueExpression="value='No'" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
Alert - okLabel
TODO: UI
==============================================================================
-->

<TestCase frequency="all" testID="Alert_okLabel_Default" description="Test default value." keywords="[Runtime Localization,Alert,okLabel]" >
    <body>
        <AssertMethodValue method="value=Alert.okLabel" valueExpression="value='OK'" />
        <RunCode code="Alert.okLabel='custom'" />
        <AssertMethodValue method="value=Alert.okLabel" valueExpression="value='custom'" />
        <RunCode code="Alert.okLabel=null" />
        <AssertMethodValue method="value=Alert.okLabel" valueExpression="value='OK'" />
        <Pause timeout="1" />
    </body>
</TestCase>


<!--
==============================================================================
Alert - yesLabel
TODO: UI
==============================================================================
-->

<TestCase frequency="all" testID="Alert_yesLabel_Default" description="Test default value." keywords="[Runtime Localization,Alert,yesLabel]" >
    <body>
        <AssertMethodValue method="value=Alert.yesLabel" valueExpression="value='Yes'" />
        <RunCode code="Alert.yesLabel='custom'" />
        <AssertMethodValue method="value=Alert.yesLabel" valueExpression="value='custom'" />
        <RunCode code="Alert.yesLabel=null" />
        <AssertMethodValue method="value=Alert.yesLabel" valueExpression="value='Yes'" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
DateField - dayNames
TODO: UI
==============================================================================
-->

<TestCase frequency="all" testID="DateField_dayNames_Default" description="Test default value." keywords="[Runtime Localization,DateField,dayNames]" >
    <setup>
        <ResetComponent className="mx.controls.DateField" target="df" waitEvent="updateComplete" />
    </setup>
    <body>
        <AssertPropertyValue target="df" propertyName="dayNames" valueExpression="value='S,M,T,W,T,F,S'" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateField_dayNames_Custom" description="Test custom value." keywords="[Runtime Localization,DateField,dayNames]" >
    <setup>
        <ResetComponent className="mx.controls.DateField" target="df" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="df" propertyName="dayNames" valueExpression="value=['A','B','C','D','E','F','G']" />
        <AssertPropertyValue target="df" propertyName="dayNames" valueExpression="value='A,B,C,D,E,F,G'" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateField_dayNames_Null" description="Test null value." keywords="[Runtime Localization,DateField,dayNames]" >
    <setup>
        <ResetComponent className="mx.controls.DateField" target="df" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="df" propertyName="dayNames" valueExpression="value=null" />
        <AssertPropertyValue target="df" propertyName="dayNames" valueExpression="value='S,M,T,W,T,F,S'" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateField_dayNames_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,DateField,dayNames]" >
    <setup>
        <ResetComponent className="mx.controls.DateField" target="df" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="df" propertyName="dayNames" valueExpression="value=['A','B','C','D','E','F','G']" />
        <SetProperty target="df" propertyName="dayNames" valueExpression="value=null" />
        <AssertPropertyValue target="df" propertyName="dayNames" valueExpression="value='S,M,T,W,T,F,S'" />
        <Pause timeout="1" />
    </body>
</TestCase>


<!--
==============================================================================
DateField - firstDayOfWeek
TODO: UI
==============================================================================
-->

<TestCase frequency="all" testID="DateField_firstDayOfWeek_Default" description="Test default value." keywords="[Runtime Localization,DateField,firstDayOfWeek]" >
    <setup>
        <ResetComponent className="mx.controls.DateField" target="df" waitEvent="updateComplete" />
    </setup>
    <body>
        <AssertPropertyValue target="df" propertyName="firstDayOfWeek" value="0" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateField_firstDayOfWeek_Custom" description="Test custom value." keywords="[Runtime Localization,DateField,firstDayOfWeek]" >
    <setup>
        <ResetComponent className="mx.controls.DateField" target="df" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="df" propertyName="firstDayOfWeek" value="4" />
        <AssertPropertyValue target="df" propertyName="firstDayOfWeek" value="4" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateField_firstDayOfWeek_Null" description="Test null value." keywords="[Runtime Localization,DateField,firstDayOfWeek]" >
    <setup>
        <ResetComponent className="mx.controls.DateField" target="df" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="df" propertyName="firstDayOfWeek" valueExpression="value=null" />
        <AssertPropertyValue target="df" propertyName="firstDayOfWeek" value="0" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateField_firstDayOfWeek_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,DateField,firstDayOfWeek]" >
    <setup>
        <ResetComponent className="mx.controls.DateField" target="df" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="df" propertyName="firstDayOfWeek" value="4" />
        <SetProperty target="df" propertyName="firstDayOfWeek" valueExpression="value=null" />
        <AssertPropertyValue target="df" propertyName="firstDayOfWeek" value="0" />
        <Pause timeout="1" />
    </body>
</TestCase>


<!--
==============================================================================
DateField - formatString
TODO: UI
==============================================================================
-->

<TestCase frequency="all" testID="DateField_formatString_Default" description="Test default value." keywords="[Runtime Localization,DateField,formatString]" >
    <setup>
        <ResetComponent className="mx.controls.DateField" target="df" waitEvent="updateComplete" />
    </setup>
    <body>
        <AssertPropertyValue target="df" propertyName="formatString" value="MM/DD/YYYY" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateField_formatString_Custom" description="Test custom value." keywords="[Runtime Localization,DateField,formatString]" >
    <setup>
        <ResetComponent className="mx.controls.DateField" target="df" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="df" propertyName="formatString" value="DD-YYYY-MM" />
        <AssertPropertyValue target="df" propertyName="formatString" value="DD-YYYY-MM" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateField_formatString_Null" description="Test null value." keywords="[Runtime Localization,DateField,formatString]" >
    <setup>
        <ResetComponent className="mx.controls.DateField" target="df" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="df" propertyName="formatString" valueExpression="value=null" />
        <AssertPropertyValue target="df" propertyName="formatString" value="MM/DD/YYYY" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateField_formatString_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,DateField,formatString]" >
    <setup>
        <ResetComponent className="mx.controls.DateField" target="df" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="df" propertyName="formatString" value="DD-YYYY-MM" />
        <SetProperty target="df" propertyName="formatString" valueExpression="value=null" />
        <AssertPropertyValue target="df" propertyName="formatString" value="MM/DD/YYYY" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
DateField - monthNames
TODO: UI
==============================================================================
-->

<TestCase frequency="all" testID="DateField_monthNames_Default" description="Test default value." keywords="[Runtime Localization,DateField,monthNames]" >
    <setup>
        <ResetComponent className="mx.controls.DateField" target="df" waitEvent="updateComplete" />
    </setup>
    <body>
        <AssertPropertyValue target="df" propertyName="monthNames" value="January,February,March,April,May,June,July,August,September,October,November,December" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateField_monthNames_Custom" description="Test custom value." keywords="[Runtime Localization,DateField,monthNames]" >
    <setup>
        <ResetComponent className="mx.controls.DateField" target="df" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="df" propertyName="monthNames" valueExpression="value=['A','B','C','D','E','F','G','H','I','J','K','L']" />
        <AssertPropertyValue target="df" propertyName="monthNames" value="A,B,C,D,E,F,G,H,I,J,K,L" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateField_monthNames_Null" description="Test null value." keywords="[Runtime Localization,DateField,monthNames]" >
    <setup>
        <ResetComponent className="mx.controls.DateField" target="df" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="df" propertyName="monthNames" valueExpression="value=null" />
        <AssertPropertyValue target="df" propertyName="monthNames" value="January,February,March,April,May,June,July,August,September,October,November,December" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateField_monthNames_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,DateField,monthNames]" >
    <setup>
        <ResetComponent className="mx.controls.DateField" target="df" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="df" propertyName="monthNames" valueExpression="value=['A','B','C','D','E','F','G','H','I','J','K','L']" />
        <SetProperty target="df" propertyName="monthNames" valueExpression="value=null" />
        <AssertPropertyValue target="df" propertyName="monthNames" value="January,February,March,April,May,June,July,August,September,October,November,December" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
ProgressBar - label
TODO: UI
==============================================================================
-->

<TestCase frequency="all" testID="ProgressBar_label_Default" description="Test default value." keywords="[Runtime Localization,ProgressBar,label]" >
    <setup>
        <ResetComponent className="mx.controls.ProgressBar" target="pb" waitEvent="updateComplete" />
    </setup>
    <body>
        <AssertPropertyValue target="pb" propertyName="label" value="LOADING %3%%" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ProgressBar_label_Custom" description="Test custom value." keywords="[Runtime Localization,ProgressBar,label]" >
    <setup>
        <ResetComponent className="mx.controls.ProgressBar" target="pb" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="pb" propertyName="label" value="Please wait" />
        <AssertPropertyValue target="pb" propertyName="label" value="Please wait" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ProgressBar_label_Null" description="Test null value." keywords="[Runtime Localization,ProgressBar,label]" >
    <setup>
        <ResetComponent className="mx.controls.ProgressBar" target="pb" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="pb" propertyName="label" valueExpression="value=null" />
        <AssertPropertyValue target="pb" propertyName="label" value="LOADING %3%%" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ProgressBar_label_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,ProgressBar,label]" >
    <setup>
        <ResetComponent className="mx.controls.ProgressBar" target="pb" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="pb" propertyName="label" value="Please wait" />
        <SetProperty target="pb" propertyName="label" valueExpression="value=null" />
        <AssertPropertyValue target="pb" propertyName="label" value="LOADING %3%%" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyFormatter - alignSymbol
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyFormatter_alignSymbol_Default" description="Test default value." keywords="[Runtime Localization,CurrencyFormatter,alignSymbol]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <AssertPropertyValue target="cf" propertyName="alignSymbol" value="left" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_alignSymbol_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyFormatter,alignSymbol]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <AssertMethodValue method="value=application.cf.format(100)" value="$100" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_alignSymbol_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyFormatter,alignSymbol]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="alignSymbol" value="right" />
        <AssertPropertyValue target="cf" propertyName="alignSymbol" value="right" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_alignSymbol_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyFormatter,alignSymbol]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="alignSymbol" value="right" />
        <AssertMethodValue method="value=application.cf.format(100)" value="100$" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_alignSymbol_Null" description="Test null value." keywords="[Runtime Localization,CurrencyFormatter,alignSymbol]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="alignSymbol" valueExpression="value=null" /> 
        <AssertPropertyValue target="cf" propertyName="alignSymbol" value="left" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_alignSymbol_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyFormatter,alignSymbol]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="alignSymbol" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cf.format(100)" value="$100" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_alignSymbol_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyFormatter,alignSymbol]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="alignSymbol" value="right" />
        <SetProperty target="cf" propertyName="alignSymbol" valueExpression="value=null" />
        <AssertPropertyValue target="cf" propertyName="alignSymbol" value="left" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_alignSymbol_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyFormatter,alignSymbol]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="alignSymbol" value="right" />
        <SetProperty target="cf" propertyName="alignSymbol" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cf.format(100)" value="$100" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyFormatter - currencySymbol
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyFormatter_currencySymbol_Default" description="Test default value." keywords="[Runtime Localization,CurrencyFormatter,currencySymbol]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <AssertPropertyValue target="cf" propertyName="currencySymbol" value="$" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_currencySymbol_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyFormatter,currencySymbol]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <AssertMethodValue method="value=application.cf.format(100)" value="$100" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_currencySymbol_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyFormatter,currencySymbol]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="currencySymbol" value="-" />
        <AssertPropertyValue target="cf" propertyName="currencySymbol" value="-" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_currencySymbol_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyFormatter,currencySymbol]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="currencySymbol" value="-" />
        <AssertMethodValue method="value=application.cf.format(100)" value="-100" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_currencySymbol_Null" description="Test null value." keywords="[Runtime Localization,CurrencyFormatter,currencySymbol]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="currencySymbol" valueExpression="value=null" />
        <AssertPropertyValue target="cf" propertyName="currencySymbol" value="$" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_currencySymbol_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyFormatter,currencySymbol]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="currencySymbol" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cf.format(100)" value="$100" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_currencySymbol_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyFormatter,currencySymbol]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="currencySymbol" value="-" />
        <SetProperty target="cf" propertyName="currencySymbol" valueExpression="value=null" />
        <AssertPropertyValue target="cf" propertyName="currencySymbol" value="$" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_currencySymbol_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyFormatter,currencySymbol]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="currencySymbol" value="-" />
        <SetProperty target="cf" propertyName="currencySymbol" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cf.format(100)" value="$100" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyFormatter - decimalSeparatorFrom
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyFormatter_decimalSeparatorFrom_Default" description="Test default value." keywords="[Runtime Localization,CurrencyFormatter,decimalSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <AssertPropertyValue target="cf" propertyName="decimalSeparatorFrom" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_decimalSeparatorFrom_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyFormatter,decimalSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <AssertMethodValue method="value=application.cf.format('100.50')" value="$100.50" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_decimalSeparatorFrom_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyFormatter,decimalSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="decimalSeparatorFrom" value="," />
        <AssertPropertyValue target="cf" propertyName="decimalSeparatorFrom" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_decimalSeparatorFrom_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyFormatter,decimalSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="decimalSeparatorFrom" value="u" />
        <AssertMethodValue method="value=application.cf.format('100u50')" value="$100.50" />
        <Pause timeout="1" />
    </body>
</TestCase>


<TestCase frequency="all" testID="CurrencyFormatter_decimalSeparatorFrom_Null" description="Test null value." keywords="[Runtime Localization,CurrencyFormatter,decimalSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="decimalSeparatorFrom" valueExpression="value=null" />
        <AssertPropertyValue target="cf" propertyName="decimalSeparatorFrom" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_decimalSeparatorFrom_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyFormatter,decimalSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="decimalSeparatorFrom" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cf.format('100.50')" value="$100.50" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_decimalSeparatorFrom_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyFormatter,decimalSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="decimalSeparatorFrom" value="," />
        <SetProperty target="cf" propertyName="decimalSeparatorFrom" valueExpression="value=null" />
        <AssertPropertyValue target="cf" propertyName="decimalSeparatorFrom" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_decimalSeparatorFrom_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyFormatter,decimalSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="decimalSeparatorFrom" value="u" />
        <SetProperty target="cf" propertyName="decimalSeparatorFrom" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cf.format('100.50')" value="$100.50" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyFormatter - decimalSeparatorTo
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyFormatter_decimalSeparatorTo_Default" description="Test default value." keywords="[Runtime Localization,CurrencyFormatter,decimalSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <AssertPropertyValue target="cf" propertyName="decimalSeparatorTo" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_decimalSeparatorTo_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyFormatter,decimalSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <AssertMethodValue method="value=application.cf.format('100.50')" value="$100.50" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_decimalSeparatorTo_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyFormatter,decimalSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="decimalSeparatorTo" value="," />
        <AssertPropertyValue target="cf" propertyName="decimalSeparatorTo" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_decimalSeparatorTo_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyFormatter,decimalSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="decimalSeparatorTo" value="u" />
        <AssertMethodValue method="value=application.cf.format('100.50')" value="$100u50" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_decimalSeparatorTo_Null" description="Test null value." keywords="[Runtime Localization,CurrencyFormatter,decimalSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="decimalSeparatorTo" valueExpression="value=null" />
        <AssertPropertyValue target="cf" propertyName="decimalSeparatorTo" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_decimalSeparatorTo_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyFormatter,decimalSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="decimalSeparatorTo" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cf.format('100.50')" value="$100.50" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_decimalSeparatorTo_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyFormatter,decimalSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="decimalSeparatorTo" value="," />
        <SetProperty target="cf" propertyName="decimalSeparatorTo" valueExpression="value=null" />
        <AssertPropertyValue target="cf" propertyName="decimalSeparatorTo" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_decimalSeparatorTo_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyFormatter,decimalSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="decimalSeparatorTo" value="u" />
        <SetProperty target="cf" propertyName="decimalSeparatorTo" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cf.format('100.50')" value="$100.50" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyFormatter - precision
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyFormatter_precision_Default" description="Test default value." keywords="[Runtime Localization,CurrencyFormatter,precision]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <AssertPropertyValue target="cf" propertyName="precision" value="-1" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_precision_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyFormatter,precision]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <AssertMethodValue method="value=application.cf.format('100.5000')" value="$100.5000" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_precision_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyFormatter,precision]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="precision" value="2" />
        <AssertPropertyValue target="cf" propertyName="precision" value="2" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_precision_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyFormatter,precision]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="precision" value="1" />
        <AssertMethodValue method="value=application.cf.format('100.5000')" value="$100.5" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_precision_Null" description="Test null value." keywords="[Runtime Localization,CurrencyFormatter,precision]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="precision" valueExpression="value=null" />
        <AssertPropertyValue target="cf" propertyName="precision" value="-1" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_precision_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyFormatter,precision]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="precision" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cf.format('100.5000')" value="$100.5000" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_precision_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyFormatter,precision]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="precision" value="2" />
        <SetProperty target="cf" propertyName="precision" valueExpression="value=null" />
        <AssertPropertyValue target="cf" propertyName="precision" value="-1" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_precision_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyFormatter,precision]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="precision" value="1" />
        <SetProperty target="cf" propertyName="precision" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cf.format('100.5000')" value="$100.5000" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyFormatter - rounding
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyFormatter_rounding_Default" description="Test default value." keywords="[Runtime Localization,CurrencyFormatter,rounding]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <AssertPropertyValue target="cf" propertyName="rounding" valueExpression="value=NumberBaseRoundType.NONE" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_rounding_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyFormatter,rounding]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="precision" value="2" />
        <AssertMethodValue method="value=application.cf.format('100.005')" value="$100.00" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_rounding_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyFormatter,rounding]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="rounding" valueExpression="value=NumberBaseRoundType.NEAREST" />
        <AssertPropertyValue target="cf" propertyName="rounding" valueExpression="value=NumberBaseRoundType.NEAREST" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_rounding_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyFormatter,rounding]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="precision" value="2" />
        <SetProperty target="cf" propertyName="rounding" valueExpression="value=NumberBaseRoundType.NEAREST" />
        <AssertMethodValue method="value=application.cf.format('100.005')" value="$100.01" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_rounding_Null" description="Test null value." keywords="[Runtime Localization,CurrencyFormatter,rounding]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="rounding" valueExpression="value=null" />
        <AssertPropertyValue target="cf" propertyName="rounding" valueExpression="value=NumberBaseRoundType.NONE" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_rounding_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyFormatter,rounding]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="rounding" valueExpression="value=null" />
        <SetProperty target="cf" propertyName="precision" value="2" />
        <AssertMethodValue method="value=application.cf.format('100.005')" value="$100.00" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_rounding_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyFormatter,rounding]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="rounding" valueExpression="value=NumberBaseRoundType.NEAREST" />
        <SetProperty target="cf" propertyName="rounding" valueExpression="value=null" />
        <AssertPropertyValue target="cf" propertyName="rounding" valueExpression="value=NumberBaseRoundType.NONE" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_rounding_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyFormatter,rounding]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="rounding" valueExpression="value=NumberBaseRoundType.NEAREST" />
        <SetProperty target="cf" propertyName="rounding" valueExpression="value=null" />
        <SetProperty target="cf" propertyName="precision" value="2" />
        <AssertMethodValue method="value=application.cf.format('100.005')" value="$100.00" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyFormatter - thousandsSeparatorFrom
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyFormatter_thousandsSeparatorFrom_Default" description="Test default value." keywords="[Runtime Localization,CurrencyFormatter,thousandsSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <AssertPropertyValue target="cf" propertyName="thousandsSeparatorFrom" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_thousandsSeparatorFrom_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyFormatter,thousandsSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <AssertMethodValue method="value=application.cf.format('1,000.00')" value="$1,000.00" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_thousandsSeparatorFrom_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyFormatter,thousandsSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="thousandsSeparatorFrom" value="." />
        <AssertPropertyValue target="cf" propertyName="thousandsSeparatorFrom" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_thousandsSeparatorFrom_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyFormatter,thousandsSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="thousandsSeparatorFrom" value="u" />
        <AssertMethodValue method="value=application.cf.format('1u000.00')" value="$1,000.00" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_thousandsSeparatorFrom_Null" description="Test null value." keywords="[Runtime Localization,CurrencyFormatter,thousandsSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="thousandsSeparatorFrom" valueExpression="value=null" />
        <AssertPropertyValue target="cf" propertyName="thousandsSeparatorFrom" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_thousandsSeparatorFrom_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyFormatter,thousandsSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="thousandsSeparatorFrom" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cf.format('1,000.00')" value="$1,000.00" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_thousandsSeparatorFrom_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyFormatter,thousandsSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="thousandsSeparatorFrom" value="." />
        <SetProperty target="cf" propertyName="thousandsSeparatorFrom" valueExpression="value=null" />
        <AssertPropertyValue target="cf" propertyName="thousandsSeparatorFrom" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_thousandsSeparatorFrom_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyFormatter,thousandsSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="thousandsSeparatorFrom" value="u" />
        <SetProperty target="cf" propertyName="thousandsSeparatorFrom" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cf.format('1,000.00')" value="$1,000.00" />
        <Pause timeout="1" />
    </body>
</TestCase>
<!--
==============================================================================
CurrencyFormatter - thousandsSeparatorTo
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyFormatter_thousandsSeparatorTo_Default" description="Test default value." keywords="[Runtime Localization,CurrencyFormatter,thousandsSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <AssertPropertyValue target="cf" propertyName="thousandsSeparatorTo" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_thousandsSeparatorTo_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyFormatter,thousandsSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <AssertMethodValue method="value=application.cf.format('1,000.00')" value="$1,000.00" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_thousandsSeparatorTo_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyFormatter,thousandsSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="thousandsSeparatorTo" value="." />
        <AssertPropertyValue target="cf" propertyName="thousandsSeparatorTo" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_thousandsSeparatorTo_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyFormatter,thousandsSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="thousandsSeparatorTo" value="u" />
        <AssertMethodValue method="value=application.cf.format('1,000.00')" value="$1u000.00" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_thousandsSeparatorTo_Null" description="Test null value." keywords="[Runtime Localization,CurrencyFormatter,thousandsSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="thousandsSeparatorTo" valueExpression="value=null" />
        <AssertPropertyValue target="cf" propertyName="thousandsSeparatorTo" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_thousandsSeparatorTo_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyFormatter,thousandsSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="thousandsSeparatorTo" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cf.format('1,000.00')" value="$1,000.00" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_thousandsSeparatorTo_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyFormatter,thousandsSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="thousandsSeparatorTo" value="." />
        <SetProperty target="cf" propertyName="thousandsSeparatorTo" valueExpression="value=null" />
        <AssertPropertyValue target="cf" propertyName="thousandsSeparatorTo" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_thousandsSeparatorTo_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyFormatter,thousandsSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="thousandsSeparatorTo" value="u" />
        <SetProperty target="cf" propertyName="thousandsSeparatorTo" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cf.format('1,000.00')" value="$1,000.00" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyFormatter - useNegativeSign
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyFormatter_useNegativeSign_Default" description="Test default value." keywords="[Runtime Localization,CurrencyFormatter,useNegativeSign]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <AssertPropertyValue target="cf" propertyName="useNegativeSign" valueExpression="value=true" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_useNegativeSign_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyFormatter,useNegativeSign]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <AssertMethodValue method="value=application.cf.format('-1,000.00')" value="-$1,000.00" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_useNegativeSign_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyFormatter,useNegativeSign]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="useNegativeSign" valueExpression="value=false" />
        <AssertPropertyValue target="cf" propertyName="useNegativeSign" valueExpression="value=false" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_useNegativeSign_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyFormatter,useNegativeSign]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="useNegativeSign" valueExpression="value=false" />
        <AssertMethodValue method="value=application.cf.format('-1,000.00')" value="($1,000.00)" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_useNegativeSign_Null" description="Test null value." keywords="[Runtime Localization,CurrencyFormatter,useNegativeSign]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="useNegativeSign" valueExpression="value=null" />
        <AssertPropertyValue target="cf" propertyName="useNegativeSign"  valueExpression="value=true" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_useNegativeSign_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyFormatter,useNegativeSign]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="useNegativeSign" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cf.format('-1,000.00')" value="-$1,000.00" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_useNegativeSign_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyFormatter,useNegativeSign]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="useNegativeSign" valueExpression="value=false" />
        <SetProperty target="cf" propertyName="useNegativeSign" valueExpression="value=null" />
        <AssertPropertyValue target="cf" propertyName="useNegativeSign"  valueExpression="value=true" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_useNegativeSign_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyFormatter,useNegativeSign]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="useNegativeSign" valueExpression="value=false" />
        <SetProperty target="cf" propertyName="useNegativeSign" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cf.format('-1,000.00')" value="-$1,000.00" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyFormatter - useThousandsSeparator
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyFormatter_useThousandsSeparator_Default" description="Test default value." keywords="[Runtime Localization,CurrencyFormatter,useThousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <AssertPropertyValue target="cf" propertyName="useThousandsSeparator" valueExpression="value=true" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_useThousandsSeparator_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyFormatter,useThousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <AssertMethodValue method="value=application.cf.format('1,000.00')" value="$1,000.00" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_useThousandsSeparator_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyFormatter,useThousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="useThousandsSeparator" valueExpression="value=false" />
        <AssertPropertyValue target="cf" propertyName="useThousandsSeparator" valueExpression="value=false" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_useThousandsSeparator_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyFormatter,useThousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="useThousandsSeparator" valueExpression="value=false" />
        <AssertMethodValue method="value=application.cf.format('1,000.00')" value="$1000.00" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_useThousandsSeparator_Null" description="Test null value." keywords="[Runtime Localization,CurrencyFormatter,useThousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="useThousandsSeparator" valueExpression="value=null" />
        <AssertPropertyValue target="cf" propertyName="useThousandsSeparator"  valueExpression="value=true" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_useThousandsSeparator_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyFormatter,useThousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="useThousandsSeparator" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cf.format('1,000.00')" value="$1,000.00" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_useThousandsSeparator_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyFormatter,useThousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="useThousandsSeparator" valueExpression="value=false" />
        <SetProperty target="cf" propertyName="useThousandsSeparator" valueExpression="value=null" />
        <AssertPropertyValue target="cf" propertyName="useThousandsSeparator"  valueExpression="value=true" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyFormatter_useThousandsSeparator_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyFormatter,useThousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.formatters.CurrencyFormatter" target="cf" />
    </setup>    
    <body>
        <SetProperty target="cf" propertyName="useThousandsSeparator" valueExpression="value=false" />
        <SetProperty target="cf" propertyName="useThousandsSeparator" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cf.format('1,000.00')" value="$1,000.00" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
DateFormatter - formatString
TODO: UseTheProperty
==============================================================================
-->

<TestCase frequency="all" testID="DateFormatter_formatString_Default" description="Test default value." keywords="[Runtime Localization,DateFormatter,formatString]" >
    <setup>
        <ResetComponent className="mx.formatters.DateFormatter" target="dfo" />
    </setup>    
    <body>
        <AssertPropertyValue target="df" propertyName="formatString" value="MM/DD/YYYY" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateFormatter_formatString_Custom" description="Test custom value." keywords="[Runtime Localization,DateFormatter,formatString]" >
    <setup>
        <ResetComponent className="mx.formatters.DateFormatter" target="dfo" />
    </setup>    
    <body>
        <SetProperty target="df" propertyName="formatString" value="YYYY-DD-MM" />
        <AssertPropertyValue target="df" propertyName="formatString" value="YYYY-DD-MM" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateFormatter_formatString_Null" description="Test null value." keywords="[Runtime Localization,DateFormatter,formatString]" >
    <setup>
        <ResetComponent className="mx.formatters.DateFormatter" target="dfo" />
    </setup>    
    <body>
        <SetProperty target="df" propertyName="formatString" valueExpression="value=null" />
        <AssertPropertyValue target="df" propertyName="formatString" value="MM/DD/YYYY" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateFormatter_formatString_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,DateFormatter,formatString]" >
    <setup>
        <ResetComponent className="mx.formatters.DateFormatter" target="dfo" />
    </setup>    
    <body>
        <SetProperty target="df" propertyName="formatString" value="YYYY-DD-MM" />
        <SetProperty target="df" propertyName="formatString" valueExpression="value=null" />
        <AssertPropertyValue target="df" propertyName="formatString" value="MM/DD/YYYY" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberFormatter - decimalSeparatorFrom
TODO: UseTheProperty
==============================================================================
-->

<TestCase frequency="all" testID="NumberFormatter_decimalSeparatorFrom_Default" description="Test default value." keywords="[Runtime Localization,NumberFormatter,decimalSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <AssertPropertyValue target="nf" propertyName="decimalSeparatorFrom" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_decimalSeparatorFrom_Custom" description="Test custom value." keywords="[Runtime Localization,NumberFormatter,decimalSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="decimalSeparatorFrom" value="," />
        <AssertPropertyValue target="nf" propertyName="decimalSeparatorFrom" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_decimalSeparatorFrom_Null" description="Test null value." keywords="[Runtime Localization,NumberFormatter,decimalSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="decimalSeparatorFrom" valueExpression="value=null" />
        <AssertPropertyValue target="nf" propertyName="decimalSeparatorFrom" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_decimalSeparatorFrom_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberFormatter,decimalSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="decimalSeparatorFrom" value="," />
        <SetProperty target="nf" propertyName="decimalSeparatorFrom" valueExpression="value=null" />
        <AssertPropertyValue target="nf" propertyName="decimalSeparatorFrom" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberFormatter - decimalSeparatorTo
TODO: UseTheProperty
==============================================================================
-->

<TestCase frequency="all" testID="NumberFormatter_decimalSeparatorTo_Default" description="Test default value." keywords="[Runtime Localization,NumberFormatter,decimalSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <AssertPropertyValue target="nf" propertyName="decimalSeparatorTo" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_decimalSeparatorTo_Custom" description="Test custom value." keywords="[Runtime Localization,NumberFormatter,decimalSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="decimalSeparatorTo" value="," />
        <AssertPropertyValue target="nf" propertyName="decimalSeparatorTo" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_decimalSeparatorTo_Null" description="Test null value." keywords="[Runtime Localization,NumberFormatter,decimalSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="decimalSeparatorTo" valueExpression="value=null" />
        <AssertPropertyValue target="nf" propertyName="decimalSeparatorTo" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_decimalSeparatorTo_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberFormatter,decimalSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="decimalSeparatorTo" value="," />
        <SetProperty target="nf" propertyName="decimalSeparatorTo" valueExpression="value=null" />
        <AssertPropertyValue target="nf" propertyName="decimalSeparatorTo" value="." />
        <Pause timeout="1" />
    </body>
    
</TestCase>

<!--
==============================================================================
NumberFormatter - precision
TODO: UseTheProperty
==============================================================================
-->

<TestCase frequency="all" testID="NumberFormatter_precision_Default" description="Test default value." keywords="[Runtime Localization,NumberFormatter,precision]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <AssertPropertyValue target="nf" propertyName="precision" value="-1" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_precision_Custom" description="Test custom value." keywords="[Runtime Localization,NumberFormatter,precision]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="precision" value="2" />
        <AssertPropertyValue target="nf" propertyName="precision" value="2" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_precision_Null" description="Test null value." keywords="[Runtime Localization,NumberFormatter,precision]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="precision" valueExpression="value=null" />
        <AssertPropertyValue target="nf" propertyName="precision" value="-1" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_precision_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberFormatter,precision]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="precision" value="2" />
        <SetProperty target="nf" propertyName="precision" valueExpression="value=null" />
        <AssertPropertyValue target="nf" propertyName="precision" value="-1" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberFormatter - rounding
TODO: UseTheProperty
==============================================================================
-->

<TestCase frequency="all" testID="NumberFormatter_rounding_Default" description="Test default value." keywords="[Runtime Localization,NumberFormatter,rounding]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <AssertPropertyValue target="nf" propertyName="rounding" valueExpression="value=NumberBaseRoundType.NONE" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_rounding_Custom" description="Test custom value." keywords="[Runtime Localization,NumberFormatter,rounding]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="rounding" valueExpression="value=NumberBaseRoundType.NEAREST" />
        <AssertPropertyValue target="nf" propertyName="rounding" valueExpression="value=NumberBaseRoundType.NEAREST" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_rounding_Null" description="Test null value." keywords="[Runtime Localization,NumberFormatter,rounding]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="rounding" valueExpression="value=null" />
        <AssertPropertyValue target="nf" propertyName="rounding" valueExpression="value=NumberBaseRoundType.NONE" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_rounding_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberFormatter,rounding]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="rounding" valueExpression="value=NumberBaseRoundType.NEAREST" />
        <SetProperty target="nf" propertyName="rounding" valueExpression="value=null" />
        <AssertPropertyValue target="nf" propertyName="rounding" valueExpression="value=NumberBaseRoundType.NONE" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberFormatter - thousandsSeparatorFrom
TODO: UseTheProperty
==============================================================================
-->

<TestCase frequency="all" testID="NumberFormatter_thousandsSeparatorFrom_Default" description="Test default value." keywords="[Runtime Localization,NumberFormatter,thousandsSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <AssertPropertyValue target="nf" propertyName="thousandsSeparatorFrom" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_thousandsSeparatorFrom_Custom" description="Test custom value." keywords="[Runtime Localization,NumberFormatter,thousandsSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="thousandsSeparatorFrom" value="." />
        <AssertPropertyValue target="nf" propertyName="thousandsSeparatorFrom" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_thousandsSeparatorFrom_Null" description="Test null value." keywords="[Runtime Localization,NumberFormatter,thousandsSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="thousandsSeparatorFrom" valueExpression="value=null" />
        <AssertPropertyValue target="nf" propertyName="thousandsSeparatorFrom" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_thousandsSeparatorFrom_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberFormatter,thousandsSeparatorFrom]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="thousandsSeparatorFrom" value="." />
        <SetProperty target="nf" propertyName="thousandsSeparatorFrom" valueExpression="value=null" />
        <AssertPropertyValue target="nf" propertyName="thousandsSeparatorFrom" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberFormatter - thousandsSeparatorTo
TODO: UseTheProperty
==============================================================================
-->

<TestCase frequency="all" testID="NumberFormatter_thousandsSeparatorTo_Default" description="Test default value." keywords="[Runtime Localization,NumberFormatter,thousandsSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <AssertPropertyValue target="nf" propertyName="thousandsSeparatorTo" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_thousandsSeparatorTo_Custom" description="Test custom value." keywords="[Runtime Localization,NumberFormatter,thousandsSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="thousandsSeparatorTo" value="." />
        <AssertPropertyValue target="nf" propertyName="thousandsSeparatorTo" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_thousandsSeparatorTo_Null" description="Test null value." keywords="[Runtime Localization,NumberFormatter,thousandsSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="thousandsSeparatorTo" valueExpression="value=null" />
        <AssertPropertyValue target="nf" propertyName="thousandsSeparatorTo" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_thousandsSeparatorTo_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberFormatter,thousandsSeparatorTo]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="thousandsSeparatorTo" value="." />
        <SetProperty target="nf" propertyName="thousandsSeparatorTo" valueExpression="value=null" />
        <AssertPropertyValue target="nf" propertyName="thousandsSeparatorTo" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberFormatter - useNegativeSign
TODO: UseTheProperty
==============================================================================
-->

<TestCase frequency="all" testID="NumberFormatter_useNegativeSign_Default" description="Test default value." keywords="[Runtime Localization,NumberFormatter,useNegativeSign]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <AssertPropertyValue target="nf" propertyName="useNegativeSign" valueExpression="value=true" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_useNegativeSign_Custom" description="Test custom value." keywords="[Runtime Localization,NumberFormatter,useNegativeSign]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="useNegativeSign" valueExpression="value=false" />
        <AssertPropertyValue target="nf" propertyName="useNegativeSign" valueExpression="value=false" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_useNegativeSign_Null" description="Test null value." keywords="[Runtime Localization,NumberFormatter,useNegativeSign]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="useNegativeSign" valueExpression="value=null" />
        <AssertPropertyValue target="nf" propertyName="useNegativeSign" valueExpression="value=true" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_useNegativeSign_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberFormatter,useNegativeSign]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="useNegativeSign" valueExpression="value=false" />
        <SetProperty target="nf" propertyName="useNegativeSign" valueExpression="value=null" />
        <AssertPropertyValue target="nf" propertyName="useNegativeSign" valueExpression="value=true" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberFormatter - useThousandsSeparator
TODO: UseTheProperty
==============================================================================
-->

<TestCase frequency="all" testID="NumberFormatter_useThousandsSeparator_Default" description="Test default value." keywords="[Runtime Localization,NumberFormatter,useThousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <AssertPropertyValue target="nf" propertyName="useThousandsSeparator" valueExpression="value=true" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_useThousandsSeparator_Custom" description="Test custom value." keywords="[Runtime Localization,NumberFormatter,useThousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="useThousandsSeparator" valueExpression="value=false" />
        <AssertPropertyValue target="nf" propertyName="useThousandsSeparator" valueExpression="value=false" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_useThousandsSeparator_Null" description="Test null value." keywords="[Runtime Localization,NumberFormatter,useThousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="useThousandsSeparator" valueExpression="value=null" />
        <AssertPropertyValue target="nf" propertyName="useThousandsSeparator" valueExpression="value=true" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberFormatter_useThousandsSeparator_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberFormatter,useThousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.formatters.NumberFormatter" target="nf" />
    </setup>    
    <body>
        <SetProperty target="nf" propertyName="useThousandsSeparator" valueExpression="value=false" />
        <SetProperty target="nf" propertyName="useThousandsSeparator" valueExpression="value=null" />
        <AssertPropertyValue target="nf" propertyName="useThousandsSeparator" valueExpression="value=true" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
PhoneFormatter - areaCode
TODO: UseTheProperty
==============================================================================
-->

<TestCase frequency="all" testID="PhoneFormatter_areaCode_Default" description="Test default value." keywords="[Runtime Localization,PhoneFormatter,areaCode]" >
    <setup>
        <ResetComponent className="mx.formatters.PhoneFormatter" target="pf" />
    </setup>    
    <body>
        <AssertPropertyValue target="pf" propertyName="areaCode" value="-1" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="PhoneFormatter_areaCode_Custom" description="Test custom value." keywords="[Runtime Localization,PhoneFormatter,areaCode]" >
    <setup>
        <ResetComponent className="mx.formatters.PhoneFormatter" target="pf" />
    </setup>    
    <body>
        <SetProperty target="pf" propertyName="areaCode" value="415" />
        <AssertPropertyValue target="pf" propertyName="areaCode" value="415" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="PhoneFormatter_areaCode_Null" description="Test null value." keywords="[Runtime Localization,PhoneFormatter,areaCode]" >
    <setup>
        <ResetComponent className="mx.formatters.PhoneFormatter" target="pf" />
    </setup>    
    <body>
        <SetProperty target="pf" propertyName="areaCode" valueExpression="value=null" />
        <AssertPropertyValue target="pf" propertyName="areaCode" value="-1" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="PhoneFormatter_areaCode_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,PhoneFormatter,areaCode]" >
    <setup>
        <ResetComponent className="mx.formatters.PhoneFormatter" target="pf" />
    </setup>    
    <body>
        <SetProperty target="pf" propertyName="areaCode" value="415" />
        <SetProperty target="pf" propertyName="areaCode" valueExpression="value=null" />
        <AssertPropertyValue target="pf" propertyName="areaCode" value="-1" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
PhoneFormatter - areaCodeFormat
TODO: UseTheProperty
==============================================================================
-->

<TestCase frequency="all" testID="PhoneFormatter_areaCodeFormat_Default" description="Test default value." keywords="[Runtime Localization,PhoneFormatter,areaCodeFormat]" >
    <setup>
        <ResetComponent className="mx.formatters.PhoneFormatter" target="pf" />
    </setup>    
    <body>
        <AssertPropertyValue target="pf" propertyName="areaCodeFormat" value="(###)" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="PhoneFormatter_areaCodeFormat_Custom" description="Test custom value." keywords="[Runtime Localization,PhoneFormatter,areaCodeFormat]" >
    <setup>
        <ResetComponent className="mx.formatters.PhoneFormatter" target="pf" />
    </setup>    
    <body>
        <SetProperty target="pf" propertyName="areaCodeFormat" value="###-" />
        <AssertPropertyValue target="pf" propertyName="areaCodeFormat" value="###-" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="PhoneFormatter_areaCodeFormat_Null" description="Test null value." keywords="[Runtime Localization,PhoneFormatter,areaCodeFormat]" >
    <setup>
        <ResetComponent className="mx.formatters.PhoneFormatter" target="pf" />
    </setup>    
    <body>
        <SetProperty target="pf" propertyName="areaCodeFormat" valueExpression="value=null" />
        <AssertPropertyValue target="pf" propertyName="areaCodeFormat" value="(###)" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="PhoneFormatter_areaCodeFormat_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,PhoneFormatter,areaCodeFormat]" >
    <setup>
        <ResetComponent className="mx.formatters.PhoneFormatter" target="pf" />
    </setup>    
    <body>
        <SetProperty target="pf" propertyName="areaCodeFormat" value="###-" />
        <SetProperty target="pf" propertyName="areaCodeFormat" valueExpression="value=null" />
        <AssertPropertyValue target="pf" propertyName="areaCodeFormat" value="(###)" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
PhoneFormatter - formatString
TODO: UseTheProperty
==============================================================================
-->

<TestCase frequency="all" testID="PhoneFormatter_formatString_Default" description="Test default value." keywords="[Runtime Localization,PhoneFormatter,formatString]" >
    <setup>
        <ResetComponent className="mx.formatters.PhoneFormatter" target="pf" />
    </setup>    
    <body>
        <AssertPropertyValue target="pf" propertyName="formatString" value="(###) ###-####" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="PhoneFormatter_formatString_Custom" description="Test custom value." keywords="[Runtime Localization,PhoneFormatter,formatString]" >
    <setup>
        <ResetComponent className="mx.formatters.PhoneFormatter" target="pf" />
    </setup>    
    <body>
        <SetProperty target="pf" propertyName="formatString" value="###-#######" />
        <AssertPropertyValue target="pf" propertyName="formatString" value="###-#######" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="PhoneFormatter_formatString_Null" description="Test null value." keywords="[Runtime Localization,PhoneFormatter,formatString]" >
    <setup>
        <ResetComponent className="mx.formatters.PhoneFormatter" target="pf" />
    </setup>    
    <body>
        <SetProperty target="pf" propertyName="formatString" valueExpression="value=null" />
        <AssertPropertyValue target="pf" propertyName="formatString" value="(###) ###-####" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="PhoneFormatter_formatString_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,PhoneFormatter,formatString]" >
    <setup>
        <ResetComponent className="mx.formatters.PhoneFormatter" target="pf" />
    </setup>    
    <body>
        <SetProperty target="pf" propertyName="formatString" value="###-#######" />
        <SetProperty target="pf" propertyName="formatString" valueExpression="value=null" />
        <AssertPropertyValue target="pf" propertyName="formatString" value="(###) ###-####" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
PhoneFormatter - validPatternChars
TODO: UseTheProperty
==============================================================================
-->

<TestCase frequency="all" testID="PhoneFormatter_validPatternChars_Default" description="Test default value." keywords="[Runtime Localization,PhoneFormatter,validPatternChars]" >
    <setup>
        <ResetComponent className="mx.formatters.PhoneFormatter" target="pf" />
    </setup>    
    <body>
        <AssertPropertyValue target="pf" propertyName="validPatternChars" value="+()#- ." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="PhoneFormatter_validPatternChars_Custom" description="Test custom value." keywords="[Runtime Localization,PhoneFormatter,validPatternChars]" >
    <setup>
        <ResetComponent className="mx.formatters.PhoneFormatter" target="pf" />
    </setup>    
    <body>
        <SetProperty target="pf" propertyName="validPatternChars" value=")(" />
        <AssertPropertyValue target="pf" propertyName="validPatternChars" value=")(" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="PhoneFormatter_validPatternChars_Null" description="Test null value." keywords="[Runtime Localization,PhoneFormatter,validPatternChars]" >
    <setup>
        <ResetComponent className="mx.formatters.PhoneFormatter" target="pf" />
    </setup>    
    <body>
        <SetProperty target="pf" propertyName="validPatternChars" valueExpression="value=null" />
        <AssertPropertyValue target="pf" propertyName="validPatternChars" value="+()#- ." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="PhoneFormatter_validPatternChars_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,PhoneFormatter,validPatternChars]" >
    <setup>
        <ResetComponent className="mx.formatters.PhoneFormatter" target="pf" />
    </setup>    
    <body>
        <SetProperty target="pf" propertyName="validPatternChars" value=")(" />
        <SetProperty target="pf" propertyName="validPatternChars" valueExpression="value=null" />
        <AssertPropertyValue target="pf" propertyName="validPatternChars" value="+()#- ." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
ZipCodeFormatter - formatString
TODO: UseTheProperty
==============================================================================
-->

<TestCase frequency="all" testID="ZipCodeFormatter_formatString_Default" description="Test default value." keywords="[Runtime Localization,ZipCodeFormatter,formatString]" >
    <setup>
        <ResetComponent className="mx.formatters.ZipCodeFormatter" target="zcf" />
    </setup>
    <body>
        <AssertPropertyValue target="zcf" propertyName="formatString" value="#####" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeFormatter_formatString_Custom" description="Test custom value." keywords="[Runtime Localization,ZipCodeFormatter,formatString]" >
    <setup>
        <ResetComponent className="mx.formatters.ZipCodeFormatter" target="zcf" />
    </setup>    
    <body>
        <SetProperty target="zcf" propertyName="formatString" value="#####-####" />
        <AssertPropertyValue target="zcf" propertyName="formatString" value="#####-####" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeFormatter_formatString_Null" description="Test null value." keywords="[Runtime Localization,ZipCodeFormatter,formatString]" >
    <setup>
        <ResetComponent className="mx.formatters.ZipCodeFormatter" target="zcf" />
    </setup>
    <body>
        <SetProperty target="zcf" propertyName="formatString" valueExpression="value=null" />
        <AssertPropertyValue target="zcf" propertyName="formatString" value="#####" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeFormatter_formatString_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,ZipCodeFormatter,formatString]" >
    <setup>
        <ResetComponent className="mx.formatters.ZipCodeFormatter" target="zcf" />
    </setup>
    <body>
        <SetProperty target="zcf" propertyName="formatString" value="#####-####" />
        <SetProperty target="zcf" propertyName="formatString" valueExpression="value=null" />
        <AssertPropertyValue target="zcf" propertyName="formatString" value="#####" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CreditCardValidator - allowedFormatChars
TODO: UseTheProperty
==============================================================================
-->

<TestCase frequency="all" testID="CreditCardValidator_allowedFormatChars_Default" description="Test default value." keywords="[Runtime Localization,CreditCardValidator,allowedFormatChars]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <AssertPropertyValue target="ccv" propertyName="allowedFormatChars" value=" -" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CreditCardValidator_allowedFormatChars_Custom" description="Test custom value." keywords="[Runtime Localization,CreditCardValidator,allowedFormatChars]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <SetProperty target="ccv" propertyName="allowedFormatChars" value=")(" />
        <AssertPropertyValue target="ccv" propertyName="allowedFormatChars" value=")(" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CreditCardValidator_allowedFormatChars_Null" description="Test null value." keywords="[Runtime Localization,CreditCardValidator,allowedFormatChars]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <SetProperty target="ccv" propertyName="allowedFormatChars" valueExpression="value=null" />
        <AssertPropertyValue target="ccv" propertyName="allowedFormatChars" value=" -" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CreditCardValidator_allowedFormatChars_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CreditCardValidator,allowedFormatChars]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <SetProperty target="ccv" propertyName="allowedFormatChars" value=")(" />
        <SetProperty target="ccv" propertyName="allowedFormatChars" valueExpression="value=null" />
        <AssertPropertyValue target="ccv" propertyName="allowedFormatChars" value=" -" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CreditCardValidator - invalidCharError
TODO: UseTheProperty
==============================================================================
-->

<TestCase frequency="all" testID="CreditCardValidator_invalidCharError_Default" description="Test default value." keywords="[Runtime Localization,CreditCardValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <AssertPropertyValue target="ccv" propertyName="invalidCharError" value="Invalid characters in your credit card number. (Enter numbers only.)" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CreditCardValidator_invalidCharError_Custom" description="Test custom value." keywords="[Runtime Localization,CreditCardValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <SetProperty target="ccv" propertyName="invalidCharError" value="nope!" />
        <AssertPropertyValue target="ccv" propertyName="invalidCharError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CreditCardValidator_invalidCharError_Null" description="Test null value." keywords="[Runtime Localization,CreditCardValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <SetProperty target="ccv" propertyName="invalidCharError" valueExpression="value=null" />
        <AssertPropertyValue target="ccv" propertyName="invalidCharError" value="Invalid characters in your credit card number. (Enter numbers only.)" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CreditCardValidator_invalidCharError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CreditCardValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <SetProperty target="ccv" propertyName="invalidCharError" value="nope!" />
        <SetProperty target="ccv" propertyName="invalidCharError" valueExpression="value=null" />
        <AssertPropertyValue target="ccv" propertyName="invalidCharError" value="Invalid characters in your credit card number. (Enter numbers only.)" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CreditCardValidator - invalidNumberError
TODO: UseTheProperty
==============================================================================
-->

<TestCase frequency="all" testID="CreditCardValidator_invalidNumberError_Default" description="Test default value." keywords="[Runtime Localization,CreditCardValidator,invalidNumberError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <AssertPropertyValue target="ccv" propertyName="invalidNumberError" value="The credit card number is invalid." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CreditCardValidator_invalidNumberError_Custom" description="Test custom value." keywords="[Runtime Localization,CreditCardValidator,invalidNumberError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <SetProperty target="ccv" propertyName="invalidNumberError" value="nope!" />
        <AssertPropertyValue target="ccv" propertyName="invalidNumberError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CreditCardValidator_invalidNumberError_Null" description="Test null value." keywords="[Runtime Localization,CreditCardValidator,invalidNumberError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <SetProperty target="ccv" propertyName="invalidNumberError" valueExpression="value=null" />
        <AssertPropertyValue target="ccv" propertyName="invalidNumberError" value="The credit card number is invalid." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CreditCardValidator_invalidNumberError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CreditCardValidator,invalidNumberError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <SetProperty target="ccv" propertyName="invalidNumberError" value="nope!" />
        <SetProperty target="ccv" propertyName="invalidNumberError" valueExpression="value=null" />
        <AssertPropertyValue target="ccv" propertyName="invalidNumberError" value="The credit card number is invalid." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CreditCardValidator - noNumError
TODO: UseTheProperty
==============================================================================
-->

<TestCase frequency="all" testID="CreditCardValidator_noNumError_Default" description="Test default value." keywords="[Runtime Localization,CreditCardValidator,noNumError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <AssertPropertyValue target="ccv" propertyName="noNumError" value="No credit card number is specified." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CreditCardValidator_noNumError_Custom" description="Test custom value." keywords="[Runtime Localization,CreditCardValidator,noNumError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <SetProperty target="ccv" propertyName="noNumError" value="nope!" />
        <AssertPropertyValue target="ccv" propertyName="noNumError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CreditCardValidator_noNumError_Null" description="Test null value." keywords="[Runtime Localization,CreditCardValidator,noNumError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <SetProperty target="ccv" propertyName="noNumError" valueExpression="value=null" />
        <AssertPropertyValue target="ccv" propertyName="noNumError" value="No credit card number is specified." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CreditCardValidator_noNumError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CreditCardValidator,noNumError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <SetProperty target="ccv" propertyName="noNumError" value="nope!" />
        <SetProperty target="ccv" propertyName="noNumError" valueExpression="value=null" />
        <AssertPropertyValue target="ccv" propertyName="noNumError" value="No credit card number is specified." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CreditCardValidator - noTypeError
TODO: UseTheProperty
==============================================================================
-->

<TestCase frequency="all" testID="CreditCardValidator_noTypeError_Default" description="Test default value." keywords="[Runtime Localization,CreditCardValidator,noTypeError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <AssertPropertyValue target="ccv" propertyName="noTypeError" value="No credit card type is specified or the type is not valid." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CreditCardValidator_noTypeError_Custom" description="Test custom value." keywords="[Runtime Localization,CreditCardValidator,noTypeError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <SetProperty target="ccv" propertyName="noTypeError" value="nope!" />
        <AssertPropertyValue target="ccv" propertyName="noTypeError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CreditCardValidator_noTypeError_Null" description="Test null value." keywords="[Runtime Localization,CreditCardValidator,noTypeError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <SetProperty target="ccv" propertyName="noTypeError" valueExpression="value=null" />
        <AssertPropertyValue target="ccv" propertyName="noTypeError" value="No credit card type is specified or the type is not valid." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CreditCardValidator_noTypeError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CreditCardValidator,noTypeError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <SetProperty target="ccv" propertyName="noTypeError" value="nope!" />
        <SetProperty target="ccv" propertyName="noTypeError" valueExpression="value=null" />
        <AssertPropertyValue target="ccv" propertyName="noTypeError" value="No credit card type is specified or the type is not valid." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CreditCardValidator - wrongLengthError
TODO: UseTheProperty
==============================================================================
-->

<TestCase frequency="all" testID="CreditCardValidator_wrongLengthError_Default" description="Test default value." keywords="[Runtime Localization,CreditCardValidator,wrongLengthError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <AssertPropertyValue target="ccv" propertyName="wrongLengthError" value="Your credit card number contains the wrong number of digits." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CreditCardValidator_wrongLengthError_Custom" description="Test custom value." keywords="[Runtime Localization,CreditCardValidator,wrongLengthError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <SetProperty target="ccv" propertyName="wrongLengthError" value="nope!" />
        <AssertPropertyValue target="ccv" propertyName="wrongLengthError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CreditCardValidator_wrongLengthError_Null" description="Test null value." keywords="[Runtime Localization,CreditCardValidator,wrongLengthError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <SetProperty target="ccv" propertyName="wrongLengthError" valueExpression="value=null" />
        <AssertPropertyValue target="ccv" propertyName="wrongLengthError" value="Your credit card number contains the wrong number of digits." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CreditCardValidator_wrongLengthError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CreditCardValidator,wrongLengthError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <SetProperty target="ccv" propertyName="wrongLengthError" value="nope!" />
        <SetProperty target="ccv" propertyName="wrongLengthError" valueExpression="value=null" />
        <AssertPropertyValue target="ccv" propertyName="wrongLengthError" value="Your credit card number contains the wrong number of digits." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CreditCardValidator - wrongTypeError
TODO: UseTheProperty
==============================================================================
-->

<TestCase frequency="all" testID="CreditCardValidator_wrongTypeError_Default" description="Test default value." keywords="[Runtime Localization,CreditCardValidator,wrongTypeError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <AssertPropertyValue target="ccv" propertyName="wrongTypeError" value="Incorrect card type is specified." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CreditCardValidator_wrongTypeError_Custom" description="Test custom value." keywords="[Runtime Localization,CreditCardValidator,wrongTypeError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <SetProperty target="ccv" propertyName="wrongTypeError" value="nope!" />
        <AssertPropertyValue target="ccv" propertyName="wrongTypeError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CreditCardValidator_wrongTypeError_Null" description="Test null value." keywords="[Runtime Localization,CreditCardValidator,wrongTypeError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <SetProperty target="ccv" propertyName="wrongTypeError" valueExpression="value=null" />
        <AssertPropertyValue target="ccv" propertyName="wrongTypeError" value="Incorrect card type is specified." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CreditCardValidator_wrongTypeError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CreditCardValidator,wrongTypeError]" >
    <setup>
        <ResetComponent className="mx.validators.CreditCardValidator" target="ccv" />
    </setup>
    <body>
        <SetProperty target="ccv" propertyName="wrongTypeError" value="nope!" />
        <SetProperty target="ccv" propertyName="wrongTypeError" valueExpression="value=null" />
        <AssertPropertyValue target="ccv" propertyName="wrongTypeError" value="Incorrect card type is specified." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyValidator - alignSymbol
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyValidator_alignSymbol_Default" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,alignSymbol]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertPropertyValue target="cv" propertyName="alignSymbol" valueExpression="value=CurrencyValidatorAlignSymbol.LEFT" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_alignSymbol_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,alignSymbol]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertMethodValue method="value=application.cv.validate('$5')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>                
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_alignSymbol_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,alignSymbol]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="alignSymbol" valueExpression="value=CurrencyValidatorAlignSymbol.RIGHT" />
        <AssertPropertyValue target="cv" propertyName="alignSymbol" valueExpression="value=CurrencyValidatorAlignSymbol.RIGHT" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_alignSymbol_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,alignSymbol]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="alignSymbol" valueExpression="value=CurrencyValidatorAlignSymbol.RIGHT" />
        <AssertMethodValue method="value=application.cv.validate('5$')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>                
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_alignSymbol_Null" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,alignSymbol]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="alignSymbol" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="alignSymbol" valueExpression="value=CurrencyValidatorAlignSymbol.LEFT" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_alignSymbol_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,alignSymbol]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="alignSymbol" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cv.validate('$5')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>                
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_alignSymbol_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,alignSymbol]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="alignSymbol" valueExpression="value=CurrencyValidatorAlignSymbol.RIGHT" />
        <SetProperty target="cv" propertyName="alignSymbol" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="alignSymbol" valueExpression="value=CurrencyValidatorAlignSymbol.LEFT" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_alignSymbol_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,alignSymbol]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="alignSymbol" valueExpression="value=CurrencyValidatorAlignSymbol.RIGHT" />
        <SetProperty target="cv" propertyName="alignSymbol" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cv.validate('$5')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>                
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyValidator - allowNegative
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyValidator_allowNegative_Default" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,allowNegative]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertPropertyValue target="cv" propertyName="allowNegative" valueExpression="value=true" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_allowNegative_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,allowNegative]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertMethodValue method="value=application.cv.validate('-$5')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>                
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_allowNegative_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,allowNegative]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="allowNegative" valueExpression="value=false" />
        <AssertPropertyValue target="cv" propertyName="allowNegative" valueExpression="value=false" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_allowNegative_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,allowNegative]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="allowNegative" valueExpression="value=false" />
        <AssertMethodValue method="value=application.cv.validate('-$5')" >
            <value>
                <mx:String>[Event type="invalid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>                
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_allowNegative_Null" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,allowNegative]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="allowNegative" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="allowNegative" valueExpression="value=true" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_allowNegative_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,allowNegative]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="allowNegative" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cv.validate('-$5')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>                
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_allowNegative_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,allowNegative]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="allowNegative" valueExpression="value=false" />
        <SetProperty target="cv" propertyName="allowNegative" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="allowNegative" valueExpression="value=true" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_allowNegative_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,allowNegative]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="allowNegative" valueExpression="value=false" />
        <SetProperty target="cv" propertyName="allowNegative" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cv.validate('-$5')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>                
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyValidator - currencySymbol
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyValidator_currencySymbol_Default" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,currencySymbol]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertPropertyValue target="cv" propertyName="currencySymbol" value="$" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_currencySymbol_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,currencySymbol]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertMethodValue method="value=application.cv.validate('$5')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>                
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_currencySymbol_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,currencySymbol]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="currencySymbol" value="@" />
        <AssertPropertyValue target="cv" propertyName="currencySymbol" value="@" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_currencySymbol_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,currencySymbol]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="currencySymbol" value="@" />
        <AssertMethodValue method="value=application.cv.validate('@5')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>                
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_currencySymbol_Null" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,currencySymbol]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="currencySymbol" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="currencySymbol" value="$" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_currencySymbol_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,currencySymbol]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="currencySymbol" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cv.validate('$5')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>                
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_currencySymbol_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,currencySymbol]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="currencySymbol" value="@" />
        <SetProperty target="cv" propertyName="currencySymbol" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="currencySymbol" value="$" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_currencySymbol_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,currencySymbol]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="currencySymbol" value="@" />
        <SetProperty target="cv" propertyName="currencySymbol" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cv.validate('$5')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>                
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyValidator - decimalSeparator
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyValidator_decimalSeparator_Default" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,decimalSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertPropertyValue target="cv" propertyName="decimalSeparator" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_decimalSeparator_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,decimalSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertMethodValue method="value=application.cv.validate('$5.00')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>                
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_decimalSeparator_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,decimalSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="decimalSeparator" value="," />
        <AssertPropertyValue target="cv" propertyName="decimalSeparator" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_decimalSeparator_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,decimalSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="decimalSeparator" value="u" />
        <AssertMethodValue method="value=application.cv.validate('$5u00')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>                
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_decimalSeparator_Null" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,decimalSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="decimalSeparator" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="decimalSeparator" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_decimalSeparator_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,decimalSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="decimalSeparator" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cv.validate('$5.00')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_decimalSeparator_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,decimalSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="decimalSeparator" value="," />
        <SetProperty target="cv" propertyName="decimalSeparator" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="decimalSeparator" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_decimalSeparator_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,decimalSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="decimalSeparator" value="," />
        <SetProperty target="cv" propertyName="decimalSeparator" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cv.validate('$5.00')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyValidator - maxValue
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyValidator_maxValue_Default" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,maxValue]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertPropertyValue target="cv" propertyName="maxValue" valueExpression="value=NaN" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_maxValue_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,maxValue]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertMethodValue method="value=application.cv.validate('$5.00')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_maxValue_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,maxValue]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="maxValue" value="4" />
        <AssertPropertyValue target="cv" propertyName="maxValue" value="4" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_maxValue_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,maxValue]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="maxValue" value="4" />
        <AssertMethodValue method="value=application.cv.validate('$5.00')" >
            <value>
                <mx:String>[Event type="invalid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_maxValue_Null" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,maxValue]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="maxValue" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="maxValue" valueExpression="value=NaN" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_maxValue_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,maxValue]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="maxValue" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cv.validate('$5.00')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_maxValue_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,maxValue]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="maxValue" value="4" />
        <SetProperty target="cv" propertyName="maxValue" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="maxValue" valueExpression="value=NaN" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_maxValue_ResetToNull_useTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,maxValue]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="maxValue" value="4" />
        <SetProperty target="cv" propertyName="maxValue" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cv.validate('$5.00')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyValidator - minValue
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyValidator_minValue_Default" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,minValue]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertPropertyValue target="cv" propertyName="minValue" valueExpression="value=NaN" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_minValue_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,minValue]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertMethodValue method="value=application.cv.validate('$5.00')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_minValue_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,minValue]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="minValue" value="4" />
        <AssertPropertyValue target="cv" propertyName="minValue" value="4" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_minValue_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,minValue]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="minValue" value="6" />
        <AssertMethodValue method="value=application.cv.validate('$5.00')" >
            <value>
                <mx:String>[Event type="invalid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_minValue_Null" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,minValue]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="minValue" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="minValue" valueExpression="value=NaN" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_minValue_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,minValue]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="minValue" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cv.validate('$5.00')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_minValue_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,minValue]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="minValue" value="4" />
        <SetProperty target="cv" propertyName="minValue" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="minValue" valueExpression="value=NaN" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_minValue_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,minValue]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="minValue" value="6" />
        <SetProperty target="cv" propertyName="minValue" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cv.validate('$5.00')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>
        <Pause timeout="1" />
    </body>
</TestCase>
<!--
==============================================================================
CurrencyValidator - precision
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyValidator_precision_Default" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,precision]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertPropertyValue target="cv" propertyName="precision" value="2" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_precision_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,precision]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertMethodValue method="value=application.cv.validate('$5.000')" >
            <value>
                <mx:String>[Event type="invalid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_precision_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,precision]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="precision" value="3" />
        <AssertPropertyValue target="cv" propertyName="precision" value="3" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_precision_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,precision]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="precision" value="3" />
        <AssertMethodValue method="value=application.cv.validate('$5.000')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_precision_Null" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,precision]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="precision" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="precision" value="2" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_precision_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,precision]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="precision" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cv.validate('$5.00')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_precision_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,precision]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="precision" value="3" />
        <SetProperty target="cv" propertyName="precision" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="precision" value="2" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_precision_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,precision]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="precision" value="4" />
        <SetProperty target="cv" propertyName="precision" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cv.validate('$5.00')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>
        <Pause timeout="1" />
    </body>
</TestCase>


<!--
==============================================================================
CurrencyValidator - thousandsSeparator
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyValidator_thousandsSeparator_Default" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,thousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertPropertyValue target="cv" propertyName="thousandsSeparator" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_thousandsSeparator_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,thousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertMethodValue method="value=application.cv.validate('$5,000.00')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_thousandsSeparator_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,thousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="thousandsSeparator" value="." />
        <AssertPropertyValue target="cv" propertyName="thousandsSeparator" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_thousandsSeparator_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,thousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="thousandsSeparator" value="u" />
        <AssertMethodValue method="value=application.cv.validate('$5u000.00')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_thousandsSeparator_Null" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,thousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="thousandsSeparator" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="thousandsSeparator" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_thousandsSeparator_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,thousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="thousandsSeparator" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cv.validate('$5u000.00')" >
            <value>
                <mx:String>[Event type="invalid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_thousandsSeparator_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,thousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="thousandsSeparator" value="." />
        <SetProperty target="cv" propertyName="thousandsSeparator" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="thousandsSeparator" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_thousandsSeparator_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,thousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="thousandsSeparator" value="u" />
        <SetProperty target="cv" propertyName="thousandsSeparator" valueExpression="value=null" />
        <AssertMethodValue method="value=application.cv.validate('$5,000.00')" >
            <value>
                <mx:String>[Event type="valid" bubbles=false cancelable=false eventPhase=2]</mx:String>
            </value>
        </AssertMethodValue>
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyValidator - currencySymbolError
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyValidator_currencySymbolError_Default" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,currencySymbolError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertPropertyValue target="cv" propertyName="currencySymbolError" value="The currency symbol occurs in an invalid location." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_currencySymbolError_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,currencySymbolError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <RunCode code="script:value=application.cv.validate('5$')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The currency symbol occurs in an invalid location." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_currencySymbolError_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,currencySymbolError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="currencySymbolError" value="nope!" />
        <AssertPropertyValue target="cv" propertyName="currencySymbolError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_currencySymbolError_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,currencySymbolError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="currencySymbolError" value="nope!" />
        <RunCode code="script:value=application.cv.validate('5$')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_currencySymbolError_Null" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,currencySymbolError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="currencySymbolError" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="currencySymbolError" value="The currency symbol occurs in an invalid location." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_currencySymbolError_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,currencySymbolError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="currencySymbolError" valueExpression="value=null" />
        <RunCode code="script:value=application.cv.validate('5$')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The currency symbol occurs in an invalid location." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_currencySymbolError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,currencySymbolError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="currencySymbolError" value="nope!" />
        <SetProperty target="cv" propertyName="currencySymbolError" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="currencySymbolError" value="The currency symbol occurs in an invalid location." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_currencySymbolError_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,currencySymbolError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="currencySymbolError" value="nope!" />
        <SetProperty target="cv" propertyName="currencySymbolError" valueExpression="value=null" />
        <RunCode code="script:value=application.cv.validate('5$')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The currency symbol occurs in an invalid location." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyValidator - decimalPointCountError
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyValidator_decimalPointCountError_Default" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,decimalPointCountError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertPropertyValue target="cv" propertyName="decimalPointCountError" value="The decimal separator can occur only once." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_decimalPointCountError_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,decimalPointCountError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <RunCode code="script:value=application.cv.validate('$5.00.00')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The decimal separator can occur only once." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_decimalPointCountError_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,decimalPointCountError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="decimalPointCountError" value="nope!" />
        <AssertPropertyValue target="cv" propertyName="decimalPointCountError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_decimalPointCountError_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,decimalPointCountError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="decimalPointCountError" value="nope!" />
        <RunCode code="script:value=application.cv.validate('$5.00.00')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_decimalPointCountError_Null" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,decimalPointCountError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="decimalPointCountError" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="decimalPointCountError" value="The decimal separator can occur only once." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_decimalPointCountError_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,decimalPointCountError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="decimalPointCountError" valueExpression="value=null" />
        <RunCode code="script:value=application.cv.validate('$5.00.00')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The decimal separator can occur only once." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_decimalPointCountError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,decimalPointCountError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="decimalPointCountError" value="nope!" />
        <SetProperty target="cv" propertyName="decimalPointCountError" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="decimalPointCountError" value="The decimal separator can occur only once." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_decimalPointCountError_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,decimalPointCountError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="decimalPointCountError" value="nope!" />
        <SetProperty target="cv" propertyName="decimalPointCountError" valueExpression="value=null" />
        <RunCode code="script:value=application.cv.validate('$5.00.00')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The decimal separator can occur only once." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyValidator - exceedsMaxError
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyValidator_exceedsMaxError_Default" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,exceedsMaxError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertPropertyValue target="cv" propertyName="exceedsMaxError" value="The amount entered is too large." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_exceedsMaxError_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,exceedsMaxError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="maxValue" value="5" />
        <RunCode code="script:value=application.cv.validate('$6')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The amount entered is too large." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_exceedsMaxError_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,exceedsMaxError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="exceedsMaxError" value="nope!" />
        <AssertPropertyValue target="cv" propertyName="exceedsMaxError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_exceedsMaxError_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,exceedsMaxError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="exceedsMaxError" value="nope!" />
        <SetProperty target="cv" propertyName="maxValue" value="5" />
        <RunCode code="script:value=application.cv.validate('$6')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_exceedsMaxError_Null" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,exceedsMaxError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="exceedsMaxError" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="exceedsMaxError" value="The amount entered is too large." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_exceedsMaxError_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,exceedsMaxError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="exceedsMaxError" valueExpression="value=null" />
        <SetProperty target="cv" propertyName="maxValue" value="5" />
        <RunCode code="script:value=application.cv.validate('$6')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The amount entered is too large." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_exceedsMaxError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,exceedsMaxError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="exceedsMaxError" value="nope!" />
        <SetProperty target="cv" propertyName="exceedsMaxError" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="exceedsMaxError" value="The amount entered is too large." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_exceedsMaxError_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,exceedsMaxError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="exceedsMaxError" value="nope!" />
        <SetProperty target="cv" propertyName="exceedsMaxError" valueExpression="value=null" />
        <SetProperty target="cv" propertyName="maxValue" value="5" />
        <RunCode code="script:value=application.cv.validate('$6')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The amount entered is too large." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyValidator - invalidCharError
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyValidator_invalidCharError_Default" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertPropertyValue target="cv" propertyName="invalidCharError" value="The input contains invalid characters." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_invalidCharError_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <RunCode code="script:value=application.cv.validate('~6')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The input contains invalid characters." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_invalidCharError_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="invalidCharError" value="nope!" />
        <AssertPropertyValue target="cv" propertyName="invalidCharError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_invalidCharError_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="invalidCharError" value="nope!" />
        <RunCode code="script:value=application.cv.validate('~6')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_invalidCharError_Null" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="invalidCharError" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="invalidCharError" value="The input contains invalid characters." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_invalidCharError_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="invalidCharError" valueExpression="value=null" />
        <RunCode code="script:value=application.cv.validate('~6')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The input contains invalid characters." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_invalidCharError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="invalidCharError" value="nope!" />
        <SetProperty target="cv" propertyName="invalidCharError" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="invalidCharError" value="The input contains invalid characters." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_invalidCharError_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="invalidCharError" value="nope!" />
        <SetProperty target="cv" propertyName="invalidCharError" valueExpression="value=null" />
        <RunCode code="script:value=application.cv.validate('~6')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The input contains invalid characters." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyValidator - invalidFormatCharsError
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyValidator_invalidFormatCharsError_Default" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,invalidFormatCharsError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertPropertyValue target="cv" propertyName="invalidFormatCharsError" value="One of the formatting parameters is invalid." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_invalidFormatCharsError_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,invalidFormatCharsError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="currencySymbol" value="," />
        <RunCode code="script:value=application.cv.validate('$5')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="One of the formatting parameters is invalid." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_invalidFormatCharsError_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,invalidFormatCharsError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="invalidFormatCharsError" value="nope!" />
        <AssertPropertyValue target="cv" propertyName="invalidFormatCharsError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_invalidFormatCharsError_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,invalidFormatCharsError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="invalidFormatCharsError" value="nope!" />
        <SetProperty target="cv" propertyName="currencySymbol" value="," />
        <RunCode code="script:value=application.cv.validate('$5')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_invalidFormatCharsError_Null" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,invalidFormatCharsError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="invalidFormatCharsError" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="invalidFormatCharsError" value="One of the formatting parameters is invalid." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_invalidFormatCharsError_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,invalidFormatCharsError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="invalidFormatCharsError" valueExpression="value=null" />
        <SetProperty target="cv" propertyName="currencySymbol" value="," />
        <RunCode code="script:value=application.cv.validate('$5')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="One of the formatting parameters is invalid." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_invalidFormatCharsError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,invalidFormatCharsError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="invalidFormatCharsError" value="nope!" />
        <SetProperty target="cv" propertyName="invalidFormatCharsError" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="invalidFormatCharsError" value="One of the formatting parameters is invalid." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_invalidFormatCharsError_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,invalidFormatCharsError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="invalidFormatCharsError" value="nope!" />
        <SetProperty target="cv" propertyName="invalidFormatCharsError" valueExpression="value=null" />
        <SetProperty target="cv" propertyName="currencySymbol" value="," />
        <RunCode code="script:value=application.cv.validate('$5')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="One of the formatting parameters is invalid." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyValidator - lowerThanMinError
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyValidator_lowerThanMinError_Default" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,lowerThanMinError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertPropertyValue target="cv" propertyName="lowerThanMinError" value="The amount entered is too small." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_lowerThanMinError_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,lowerThanMinError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="minValue" value="5" />
        <RunCode code="script:value=application.cv.validate('$4')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The amount entered is too small." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_lowerThanMinError_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,lowerThanMinError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="lowerThanMinError" value="nope!" />
        <AssertPropertyValue target="cv" propertyName="lowerThanMinError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_lowerThanMinError_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,lowerThanMinError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="lowerThanMinError" value="nope!" />
        <SetProperty target="cv" propertyName="minValue" value="5" />
        <RunCode code="script:value=application.cv.validate('$4')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_lowerThanMinError_Null" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,lowerThanMinError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="lowerThanMinError" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="lowerThanMinError" value="The amount entered is too small." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_lowerThanMinError_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,lowerThanMinError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="lowerThanMinError" valueExpression="value=null" />
        <SetProperty target="cv" propertyName="minValue" value="5" />
        <RunCode code="script:value=application.cv.validate('$4')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The amount entered is too small." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_lowerThanMinError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,lowerThanMinError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="lowerThanMinError" value="nope!" />
        <SetProperty target="cv" propertyName="lowerThanMinError" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="lowerThanMinError" value="The amount entered is too small." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_lowerThanMinError_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,lowerThanMinError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="lowerThanMinError" value="nope!" />
        <SetProperty target="cv" propertyName="lowerThanMinError" valueExpression="value=null" />
        <SetProperty target="cv" propertyName="minValue" value="5" />
        <RunCode code="script:value=application.cv.validate('$4')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The amount entered is too small." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyValidator - negativeError
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyValidator_negativeError_Default" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,negativeError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertPropertyValue target="cv" propertyName="negativeError" value="The amount may not be negative." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_negativeError_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,negativeError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="allowNegative" value="false" />
        <RunCode code="script:value=application.cv.validate('-$4')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The amount may not be negative." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_negativeError_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,negativeError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="negativeError" value="nope!" />
        <AssertPropertyValue target="cv" propertyName="negativeError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_negativeError_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,negativeError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="negativeError" value="nope!" />
        <SetProperty target="cv" propertyName="allowNegative" value="false" />
        <RunCode code="script:value=application.cv.validate('-$4')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_negativeError_Null" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,negativeError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="negativeError" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="negativeError" value="The amount may not be negative." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_negativeError_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,negativeError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="negativeError" valueExpression="value=null" />
        <SetProperty target="cv" propertyName="allowNegative" value="false" />
        <RunCode code="script:value=application.cv.validate('-$4')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The amount may not be negative." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_negativeError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,negativeError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="negativeError" value="nope!" />
        <SetProperty target="cv" propertyName="negativeError" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="negativeError" value="The amount may not be negative." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_negativeError_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,negativeError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="negativeError" value="nope!" />
        <SetProperty target="cv" propertyName="negativeError" valueExpression="value=null" />
        <SetProperty target="cv" propertyName="allowNegative" value="false" />
        <RunCode code="script:value=application.cv.validate('-$4')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The amount may not be negative." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyValidator - precisionError
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyValidator_precisionError_Default" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,precisionError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertPropertyValue target="cv" propertyName="precisionError" value="The amount entered has too many digits beyond the decimal point." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_precisionError_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,precisionError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="precision" value="2" />
        <RunCode code="script:value=application.cv.validate('$4.000')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The amount entered has too many digits beyond the decimal point." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_precisionError_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,precisionError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="precisionError" value="nope!" />
        <AssertPropertyValue target="cv" propertyName="precisionError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_precisionError_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,precisionError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="precisionError" value="nope!" />
        <SetProperty target="cv" propertyName="precision" value="2" />
        <RunCode code="script:value=application.cv.validate('$4.000')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_precisionError_Null" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,precisionError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="precisionError" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="precisionError" value="The amount entered has too many digits beyond the decimal point." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_precisionError_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,precisionError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="precisionError" valueExpression="value=null" />
        <SetProperty target="cv" propertyName="precision" value="2" />
        <RunCode code="script:value=application.cv.validate('$4.000')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The amount entered has too many digits beyond the decimal point." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_precisionError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,precisionError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="precisionError" value="nope!" />
        <SetProperty target="cv" propertyName="precisionError" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="precisionError" value="The amount entered has too many digits beyond the decimal point." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_precisionError_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,precisionError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="precisionError" value="nope!" />
        <SetProperty target="cv" propertyName="precisionError" valueExpression="value=null" />
        <SetProperty target="cv" propertyName="precision" value="2" />
        <RunCode code="script:value=application.cv.validate('$4.000')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The amount entered has too many digits beyond the decimal point." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CurrencyValidator - separationError
==============================================================================
-->

<TestCase frequency="all" testID="CurrencyValidator_separationError_Default" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,separationError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <AssertPropertyValue target="cv" propertyName="separationError" value="The thousands separator must be followed by three digits." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_separationError_Default_UseTheProperty" description="Test default value." keywords="[Runtime Localization,CurrencyValidator,separationError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <RunCode code="script:value=application.cv.validate('$4,00')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The thousands separator must be followed by three digits." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_separationError_Custom" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,separationError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="separationError" value="nope!" />
        <AssertPropertyValue target="cv" propertyName="separationError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_separationError_Custom_UseTheProperty" description="Test custom value." keywords="[Runtime Localization,CurrencyValidator,separationError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="separationError" value="nope!" />
        <RunCode code="script:value=application.cv.validate('$4,00')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_separationError_Null" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,separationError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="separationError" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="separationError" value="The thousands separator must be followed by three digits." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_separationError_Null_UseTheProperty" description="Test null value." keywords="[Runtime Localization,CurrencyValidator,separationError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="separationError" valueExpression="value=null" />
        <RunCode code="script:value=application.cv.validate('$4,00')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The thousands separator must be followed by three digits." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_separationError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,separationError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="separationError" value="nope!" />
        <SetProperty target="cv" propertyName="separationError" valueExpression="value=null" />
        <AssertPropertyValue target="cv" propertyName="separationError" value="The thousands separator must be followed by three digits." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CurrencyValidator_separationError_ResetToNull_UseTheProperty" description="Test resetting to null value." keywords="[Runtime Localization,CurrencyValidator,separationError]" >
    <setup>
        <ResetComponent className="mx.validators.CurrencyValidator" target="cv" />
    </setup>
    <body>
        <SetProperty target="cv" propertyName="separationError" value="nope!" />
        <SetProperty target="cv" propertyName="separationError" valueExpression="value=null" />
        <RunCode code="script:value=application.cv.validate('$4,00')" />
        <AssertPropertyValue target="script:value.results.0" propertyName="errorMessage" value="The thousands separator must be followed by three digits." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
DateValidator - allowedFormatChars
==============================================================================
-->
<TestCase frequency="all" testID="DateValidator_allowedFormatChars_Default" description="Test default value." keywords="[Runtime Localization,DateValidator,allowedFormatChars]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <AssertPropertyValue target="dv" propertyName="allowedFormatChars" valueExpression="value = '/- \\.'" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_allowedFormatChars_Custom" description="Test custom value." keywords="[Runtime Localization,DateValidator,allowedFormatChars]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="allowedFormatChars" value="nope!" />
        <AssertPropertyValue target="dv" propertyName="allowedFormatChars" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_allowedFormatChars_Null" description="Test null value." keywords="[Runtime Localization,DateValidator,allowedFormatChars]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="allowedFormatChars" valueExpression="value=null" />
        <AssertPropertyValue target="dv" propertyName="allowedFormatChars" valueExpression="value = '/- \\.'" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_allowedFormatChars_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,DateValidator,allowedFormatChars]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="allowedFormatChars" value="nope!" />
        <SetProperty target="dv" propertyName="allowedFormatChars" valueExpression="value=null" />
        <AssertPropertyValue target="dv" propertyName="allowedFormatChars" valueExpression="value = '/- \\.'" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
DateValidator - inputFormat
==============================================================================
-->
<TestCase frequency="all" testID="DateValidator_inputFormat_Default" description="Test default value." keywords="[Runtime Localization,DateValidator,inputFormat]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <AssertPropertyValue target="dv" propertyName="inputFormat" value="MM/DD/YYYY" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_inputFormat_Custom" description="Test custom value." keywords="[Runtime Localization,DateValidator,inputFormat]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="inputFormat" value="YYYY/MM/DD" />
        <AssertPropertyValue target="dv" propertyName="inputFormat" value="YYYY/MM/DD" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_inputFormat_Null" description="Test null value." keywords="[Runtime Localization,DateValidator,inputFormat]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="inputFormat" valueExpression="value=null" />
        <AssertPropertyValue target="dv" propertyName="inputFormat" value="MM/DD/YYYY" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_inputFormat_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,DateValidator,inputFormat]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="inputFormat" value="YYYY/MM/DD" />
        <SetProperty target="dv" propertyName="inputFormat" valueExpression="value=null" />
        <AssertPropertyValue target="dv" propertyName="inputFormat" value="MM/DD/YYYY" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
DateValidator - validateAsString
==============================================================================
-->
<TestCase frequency="all" testID="DateValidator_validateAsString_Default" description="Test default value." keywords="[Runtime Localization,DateValidator,validateAsString]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <AssertPropertyValue target="dv" propertyName="validateAsString" value="true" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_validateAsString_Custom" description="Test custom value." keywords="[Runtime Localization,DateValidator,validateAsString]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="validateAsString" value="false" />
        <AssertPropertyValue target="dv" propertyName="validateAsString" value="false" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_validateAsString_Null" description="Test null value." keywords="[Runtime Localization,DateValidator,validateAsString]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="validateAsString" valueExpression="value=null" />
        <AssertPropertyValue target="dv" propertyName="validateAsString" value="true" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_validateAsString_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,DateValidator,validateAsString]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="validateAsString" value="false" />
        <SetProperty target="dv" propertyName="validateAsString" valueExpression="value=null" />
        <AssertPropertyValue target="dv" propertyName="validateAsString" value="true" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
DateValidator - `
==============================================================================
-->
<TestCase frequency="all" testID="DateValidator_formatError_Default" description="Test default value." keywords="[Runtime Localization,DateValidator,formatError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <AssertPropertyValue target="dv" propertyName="formatError" value="Configuration error: Incorrect formatting string." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_formatError_Custom" description="Test custom value." keywords="[Runtime Localization,DateValidator,formatError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="formatError" value="nope!" />
        <AssertPropertyValue target="dv" propertyName="formatError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_formatError_Null" description="Test null value." keywords="[Runtime Localization,DateValidator,formatError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="formatError" valueExpression="value=null" />
        <AssertPropertyValue target="dv" propertyName="formatError" value="Configuration error: Incorrect formatting string." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_formatError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,DateValidator,formatError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="formatError" value="nope!" />
        <SetProperty target="dv" propertyName="formatError" valueExpression="value=null" />
        <AssertPropertyValue target="dv" propertyName="formatError" value="Configuration error: Incorrect formatting string." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
DateValidator - invalidCharError
==============================================================================
-->
<TestCase frequency="all" testID="DateValidator_invalidCharError_Default" description="Test default value." keywords="[Runtime Localization,DateValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <AssertPropertyValue target="dv" propertyName="invalidCharError" value="The date contains invalid characters." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_invalidCharError_Custom" description="Test custom value." keywords="[Runtime Localization,DateValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="invalidCharError" value="nope!" />
        <AssertPropertyValue target="dv" propertyName="invalidCharError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_invalidCharError_Null" description="Test null value." keywords="[Runtime Localization,DateValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="invalidCharError" valueExpression="value=null" />
        <AssertPropertyValue target="dv" propertyName="invalidCharError" value="The date contains invalid characters." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_invalidCharError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,DateValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="invalidCharError" value="nope!" />
        <SetProperty target="dv" propertyName="invalidCharError" valueExpression="value=null" />
        <AssertPropertyValue target="dv" propertyName="invalidCharError" value="The date contains invalid characters." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
DateValidator - wrongDayError
==============================================================================
-->
<TestCase frequency="all" testID="DateValidator_wrongDayError_Default" description="Test default value." keywords="[Runtime Localization,DateValidator,wrongDayError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <AssertPropertyValue target="dv" propertyName="wrongDayError" value="Enter a valid day for the month." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_wrongDayError_Custom" description="Test custom value." keywords="[Runtime Localization,DateValidator,wrongDayError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="wrongDayError" value="nope!" />
        <AssertPropertyValue target="dv" propertyName="wrongDayError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_wrongDayError_Null" description="Test null value." keywords="[Runtime Localization,DateValidator,wrongDayError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="wrongDayError" valueExpression="value=null" />
        <AssertPropertyValue target="dv" propertyName="wrongDayError" value="Enter a valid day for the month." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_wrongDayError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,DateValidator,wrongDayError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="wrongDayError" value="nope!" />
        <SetProperty target="dv" propertyName="wrongDayError" valueExpression="value=null" />
        <AssertPropertyValue target="dv" propertyName="wrongDayError" value="Enter a valid day for the month." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
DateValidator - wrongLengthError
==============================================================================
-->
<TestCase frequency="all" testID="DateValidator_wrongLengthError_Default" description="Test default value." keywords="[Runtime Localization,DateValidator,wrongLengthError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <AssertPropertyValue target="dv" propertyName="wrongLengthError" value="Type the date in the format." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_wrongLengthError_Custom" description="Test custom value." keywords="[Runtime Localization,DateValidator,wrongLengthError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="wrongLengthError" value="nope!" />
        <AssertPropertyValue target="dv" propertyName="wrongLengthError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_wrongLengthError_Null" description="Test null value." keywords="[Runtime Localization,DateValidator,wrongLengthError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="wrongLengthError" valueExpression="value=null" />
        <AssertPropertyValue target="dv" propertyName="wrongLengthError" value="Type the date in the format." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_wrongLengthError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,DateValidator,wrongLengthError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="wrongLengthError" value="nope!" />
        <SetProperty target="dv" propertyName="wrongLengthError" valueExpression="value=null" />
        <AssertPropertyValue target="dv" propertyName="wrongLengthError" value="Type the date in the format." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
DateValidator - wrongMonthError
==============================================================================
-->
<TestCase frequency="all" testID="DateValidator_wrongMonthError_Default" description="Test default value." keywords="[Runtime Localization,DateValidator,wrongMonthError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <AssertPropertyValue target="dv" propertyName="wrongMonthError" value="Enter a month between 1 and 12." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_wrongMonthError_Custom" description="Test custom value." keywords="[Runtime Localization,DateValidator,wrongMonthError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="wrongMonthError" value="nope!" />
        <AssertPropertyValue target="dv" propertyName="wrongMonthError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_wrongMonthError_Null" description="Test null value." keywords="[Runtime Localization,DateValidator,wrongMonthError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="wrongMonthError" valueExpression="value=null" />
        <AssertPropertyValue target="dv" propertyName="wrongMonthError" value="Enter a month between 1 and 12." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_wrongMonthError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,DateValidator,wrongMonthError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="wrongMonthError" value="nope!" />
        <SetProperty target="dv" propertyName="wrongMonthError" valueExpression="value=null" />
        <AssertPropertyValue target="dv" propertyName="wrongMonthError" value="Enter a month between 1 and 12." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
DateValidator - wrongYearError
==============================================================================
-->
<TestCase frequency="all" testID="DateValidator_wrongYearError_Default" description="Test default value." keywords="[Runtime Localization,DateValidator,wrongYearError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <AssertPropertyValue target="dv" propertyName="wrongYearError" value="Enter a year between 0 and 9999." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_wrongYearError_Custom" description="Test custom value." keywords="[Runtime Localization,DateValidator,wrongYearError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="wrongYearError" value="nope!" />
        <AssertPropertyValue target="dv" propertyName="wrongYearError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_wrongYearError_Null" description="Test null value." keywords="[Runtime Localization,DateValidator,wrongYearError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="wrongYearError" valueExpression="value=null" />
        <AssertPropertyValue target="dv" propertyName="wrongYearError" value="Enter a year between 0 and 9999." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateValidator_wrongYearError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,DateValidator,wrongYearError]" >
    <setup>
        <ResetComponent className="mx.validators.DateValidator" target="dv" />
    </setup>
    <body>
        <SetProperty target="dv" propertyName="wrongYearError" value="nope!" />
        <SetProperty target="dv" propertyName="wrongYearError" valueExpression="value=null" />
        <AssertPropertyValue target="dv" propertyName="wrongYearError" value="Enter a year between 0 and 9999." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
EmailValidator - invalidDomainError
==============================================================================
-->

<TestCase frequency="all" testID="EmailValidator_invalidDomainError_Default" description="Test default value." keywords="[Runtime Localization,EmailValidator,invalidDomainError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <AssertPropertyValue target="ev" propertyName="invalidDomainError" value="The domain in your e-mail address is incorrectly formatted." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="EmailValidator_invalidDomainError_Custom" description="Test custom value." keywords="[Runtime Localization,EmailValidator,invalidDomainError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <SetProperty target="ev" propertyName="invalidDomainError" value="nope!" />
        <AssertPropertyValue target="ev" propertyName="invalidDomainError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="EmailValidator_invalidDomainError_Null" description="Test null value." keywords="[Runtime Localization,EmailValidator,invalidDomainError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <SetProperty target="ev" propertyName="invalidDomainError" valueExpression="value=null" />
        <AssertPropertyValue target="ev" propertyName="invalidDomainError" value="The domain in your e-mail address is incorrectly formatted." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="EmailValidator_invalidDomainError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,EmailValidator,invalidDomainError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <SetProperty target="ev" propertyName="invalidDomainError" value="nope!" />
        <SetProperty target="ev" propertyName="invalidDomainError" valueExpression="value=null" />
        <AssertPropertyValue target="ev" propertyName="invalidDomainError" value="The domain in your e-mail address is incorrectly formatted." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
EmailValidator - invalidIPDomainError
==============================================================================
-->

<TestCase frequency="all" testID="EmailValidator_invalidIPDomainError_Default" description="Test default value." keywords="[Runtime Localization,EmailValidator,invalidIPDomainError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <AssertPropertyValue target="ev" propertyName="invalidIPDomainError" value="The IP domain in your e-mail address is incorrectly formatted." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="EmailValidator_invalidIPDomainError_Custom" description="Test custom value." keywords="[Runtime Localization,EmailValidator,invalidIPDomainError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <SetProperty target="ev" propertyName="invalidIPDomainError" value="nope!" />
        <AssertPropertyValue target="ev" propertyName="invalidIPDomainError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="EmailValidator_invalidIPDomainError_Null" description="Test null value." keywords="[Runtime Localization,EmailValidator,invalidIPDomainError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <SetProperty target="ev" propertyName="invalidIPDomainError" valueExpression="value=null" />
        <AssertPropertyValue target="ev" propertyName="invalidIPDomainError" value="The IP domain in your e-mail address is incorrectly formatted." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="EmailValidator_invalidIPDomainError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,EmailValidator,invalidIPDomainError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <SetProperty target="ev" propertyName="invalidIPDomainError" value="nope!" />
        <SetProperty target="ev" propertyName="invalidIPDomainError" valueExpression="value=null" />
        <AssertPropertyValue target="ev" propertyName="invalidIPDomainError" value="The IP domain in your e-mail address is incorrectly formatted." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
EmailValidator - invalidPeriodsInDomainError
==============================================================================
-->
<TestCase frequency="all" testID="EmailValidator_invalidPeriodsInDomainError_Default" description="Test default value." keywords="[Runtime Localization,EmailValidator,invalidPeriodsInDomainError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <AssertPropertyValue target="ev" propertyName="invalidPeriodsInDomainError" value="The domain in your e-mail address has consecutive periods." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="EmailValidator_invalidPeriodsInDomainError_Custom" description="Test custom value." keywords="[Runtime Localization,EmailValidator,invalidPeriodsInDomainError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <SetProperty target="ev" propertyName="invalidPeriodsInDomainError" value="nope!" />
        <AssertPropertyValue target="ev" propertyName="invalidPeriodsInDomainError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="EmailValidator_invalidPeriodsInDomainError_Null" description="Test null value." keywords="[Runtime Localization,EmailValidator,invalidPeriodsInDomainError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <SetProperty target="ev" propertyName="invalidPeriodsInDomainError" valueExpression="value=null" />
        <AssertPropertyValue target="ev" propertyName="invalidPeriodsInDomainError" value="The domain in your e-mail address has consecutive periods." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="EmailValidator_invalidPeriodsInDomainError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,EmailValidator,invalidPeriodsInDomainError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <SetProperty target="ev" propertyName="invalidPeriodsInDomainError" value="nope!" />
        <SetProperty target="ev" propertyName="invalidPeriodsInDomainError" valueExpression="value=null" />
        <AssertPropertyValue target="ev" propertyName="invalidPeriodsInDomainError" value="The domain in your e-mail address has consecutive periods." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
EmailValidator - missingAtSignError
==============================================================================
-->
<TestCase frequency="all" testID="EmailValidator_missingAtSignError_Default" description="Test default value." keywords="[Runtime Localization,EmailValidator,missingAtSignError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <AssertPropertyValue target="ev" propertyName="missingAtSignError" value="An at sign (@) is missing in your e-mail address." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="EmailValidator_missingAtSignError_Custom" description="Test custom value." keywords="[Runtime Localization,EmailValidator,missingAtSignError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <SetProperty target="ev" propertyName="missingAtSignError" value="nope!" />
        <AssertPropertyValue target="ev" propertyName="missingAtSignError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="EmailValidator_missingAtSignError_Null" description="Test null value." keywords="[Runtime Localization,EmailValidator,missingAtSignError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <SetProperty target="ev" propertyName="missingAtSignError" valueExpression="value=null" />
        <AssertPropertyValue target="ev" propertyName="missingAtSignError" value="An at sign (@) is missing in your e-mail address." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="EmailValidator_missingAtSignError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,EmailValidator,missingAtSignError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <SetProperty target="ev" propertyName="missingAtSignError" value="nope!" />
        <SetProperty target="ev" propertyName="missingAtSignError" valueExpression="value=null" />
        <AssertPropertyValue target="ev" propertyName="missingAtSignError" value="An at sign (@) is missing in your e-mail address." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
EmailValidator - missingPeriodInDomainError
==============================================================================
-->
<TestCase frequency="all" testID="EmailValidator_missingPeriodInDomainError_Default" description="Test default value." keywords="[Runtime Localization,EmailValidator,missingPeriodInDomainError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <AssertPropertyValue target="ev" propertyName="missingPeriodInDomainError" value="The domain in your e-mail address is missing a period." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="EmailValidator_missingPeriodInDomainError_Custom" description="Test custom value." keywords="[Runtime Localization,EmailValidator,missingPeriodInDomainError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <SetProperty target="ev" propertyName="missingPeriodInDomainError" value="nope!" />
        <AssertPropertyValue target="ev" propertyName="missingPeriodInDomainError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="EmailValidator_missingPeriodInDomainError_Null" description="Test null value." keywords="[Runtime Localization,EmailValidator,missingPeriodInDomainError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <SetProperty target="ev" propertyName="missingPeriodInDomainError" valueExpression="value=null" />
        <AssertPropertyValue target="ev" propertyName="missingPeriodInDomainError" value="The domain in your e-mail address is missing a period." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="EmailValidator_missingPeriodInDomainError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,EmailValidator,missingPeriodInDomainError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <SetProperty target="ev" propertyName="missingPeriodInDomainError" value="nope!" />
        <SetProperty target="ev" propertyName="missingPeriodInDomainError" valueExpression="value=null" />
        <AssertPropertyValue target="ev" propertyName="missingPeriodInDomainError" value="The domain in your e-mail address is missing a period." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
EmailValidator - missingUsernameError
==============================================================================
-->
<TestCase frequency="all" testID="EmailValidator_missingUsernameError_Default" description="Test default value." keywords="[Runtime Localization,EmailValidator,missingUsernameError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <AssertPropertyValue target="ev" propertyName="missingUsernameError" value="The username in your e-mail address is missing." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="EmailValidator_missingUsernameError_Custom" description="Test custom value." keywords="[Runtime Localization,EmailValidator,missingUsernameError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <SetProperty target="ev" propertyName="missingUsernameError" value="nope!" />
        <AssertPropertyValue target="ev" propertyName="missingUsernameError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="EmailValidator_missingUsernameError_Null" description="Test null value." keywords="[Runtime Localization,EmailValidator,missingUsernameError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <SetProperty target="ev" propertyName="missingUsernameError" valueExpression="value=null" />
        <AssertPropertyValue target="ev" propertyName="missingUsernameError" value="The username in your e-mail address is missing." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="EmailValidator_missingUsernameError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,EmailValidator,missingUsernameError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <SetProperty target="ev" propertyName="missingUsernameError" value="nope!" />
        <SetProperty target="ev" propertyName="missingUsernameError" valueExpression="value=null" />
        <AssertPropertyValue target="ev" propertyName="missingUsernameError" value="The username in your e-mail address is missing." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
EmailValidator - tooManyAtSignsError
==============================================================================
-->
<TestCase frequency="all" testID="EmailValidator_tooManyAtSignsError_Default" description="Test default value." keywords="[Runtime Localization,EmailValidator,tooManyAtSignsError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <AssertPropertyValue target="ev" propertyName="tooManyAtSignsError" value="Your e-mail address contains too many @ characters." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="EmailValidator_tooManyAtSignsError_Custom" description="Test custom value." keywords="[Runtime Localization,EmailValidator,tooManyAtSignsError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <SetProperty target="ev" propertyName="tooManyAtSignsError" value="nope!" />
        <AssertPropertyValue target="ev" propertyName="tooManyAtSignsError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="EmailValidator_tooManyAtSignsError_Null" description="Test null value." keywords="[Runtime Localization,EmailValidator,tooManyAtSignsError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <SetProperty target="ev" propertyName="tooManyAtSignsError" valueExpression="value=null" />
        <AssertPropertyValue target="ev" propertyName="tooManyAtSignsError" value="Your e-mail address contains too many @ characters." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="EmailValidator_tooManyAtSignsError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,EmailValidator,tooManyAtSignsError]" >
    <setup>
        <ResetComponent className="mx.validators.EmailValidator" target="ev" />
    </setup>
    <body>
        <SetProperty target="ev" propertyName="tooManyAtSignsError" value="nope!" />
        <SetProperty target="ev" propertyName="tooManyAtSignsError" valueExpression="value=null" />
        <AssertPropertyValue target="ev" propertyName="tooManyAtSignsError" value="Your e-mail address contains too many @ characters." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberValidator - allowNegative
==============================================================================
-->
<TestCase frequency="all" testID="NumberValidator_allowNegative_Default" description="Test default value." keywords="[Runtime Localization,NumberValidator,allowNegative]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <AssertPropertyValue target="nv" propertyName="allowNegative" value="true" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_allowNegative_Custom" description="Test custom value." keywords="[Runtime Localization,NumberValidator,allowNegative]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="allowNegative" value="false" />
        <AssertPropertyValue target="nv" propertyName="allowNegative" value="false" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_allowNegative_Null" description="Test null value." keywords="[Runtime Localization,NumberValidator,allowNegative]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="allowNegative" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="allowNegative" value="true" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_allowNegative_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberValidator,allowNegative]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="allowNegative" value="false" />
        <SetProperty target="nv" propertyName="allowNegative" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="allowNegative" value="true" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberValidator - decimalSeparator
==============================================================================
-->
<TestCase frequency="all" testID="NumberValidator_decimalSeparator_Default" description="Test default value." keywords="[Runtime Localization,NumberValidator,decimalSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <AssertPropertyValue target="nv" propertyName="decimalSeparator" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_decimalSeparator_Custom" description="Test custom value." keywords="[Runtime Localization,NumberValidator,decimalSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="decimalSeparator" value="," />
        <AssertPropertyValue target="nv" propertyName="decimalSeparator" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_decimalSeparator_Null" description="Test null value." keywords="[Runtime Localization,NumberValidator,decimalSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="decimalSeparator" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="decimalSeparator" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_decimalSeparator_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberValidator,decimalSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="decimalSeparator" value="," />
        <SetProperty target="nv" propertyName="decimalSeparator" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="decimalSeparator" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberValidator - domain
==============================================================================
-->
<TestCase frequency="all" testID="NumberValidator_domain_Default" description="Test default value." keywords="[Runtime Localization,NumberValidator,domain]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <AssertPropertyValue target="nv" propertyName="domain" value="real" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_domain_Custom" description="Test custom value." keywords="[Runtime Localization,NumberValidator,domain]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="domain" value="int" />
        <AssertPropertyValue target="nv" propertyName="domain" value="int" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_domain_Null" description="Test null value." keywords="[Runtime Localization,NumberValidator,domain]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="domain" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="domain" value="real" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_domain_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberValidator,domain]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="domain" value="int" />
        <SetProperty target="nv" propertyName="domain" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="domain" value="real" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberValidator - maxValue
==============================================================================
-->
<TestCase frequency="all" testID="NumberValidator_maxValue_Default" description="Test default value." keywords="[Runtime Localization,NumberValidator,maxValue]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <AssertPropertyValue target="nv" propertyName="maxValue" value="NaN" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_maxValue_Custom" description="Test custom value." keywords="[Runtime Localization,NumberValidator,maxValue]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="maxValue" value="5" />
        <AssertPropertyValue target="nv" propertyName="maxValue" value="5" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_maxValue_Null" description="Test null value." keywords="[Runtime Localization,NumberValidator,maxValue]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="maxValue" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="maxValue" value="NaN" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_maxValue_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberValidator,maxValue]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="maxValue" value="5" />
        <SetProperty target="nv" propertyName="maxValue" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="maxValue" value="NaN" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberValidator - minValue
==============================================================================
-->
<TestCase frequency="all" testID="NumberValidator_minValue_Default" description="Test default value." keywords="[Runtime Localization,NumberValidator,minValue]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <AssertPropertyValue target="nv" propertyName="minValue" value="NaN" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_minValue_Custom" description="Test custom value." keywords="[Runtime Localization,NumberValidator,minValue]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="minValue" value="5" />
        <AssertPropertyValue target="nv" propertyName="minValue" value="5" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_minValue_Null" description="Test null value." keywords="[Runtime Localization,NumberValidator,minValue]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="minValue" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="minValue" value="NaN" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_minValue_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberValidator,minValue]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="minValue" value="5" />
        <SetProperty target="nv" propertyName="minValue" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="minValue" value="NaN" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberValidator - precision
==============================================================================
-->
<TestCase frequency="all" testID="NumberValidator_precision_Default" description="Test default value." keywords="[Runtime Localization,NumberValidator,precision]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <AssertPropertyValue target="nv" propertyName="precision" value="-1" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_precision_Custom" description="Test custom value." keywords="[Runtime Localization,NumberValidator,precision]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="precision" value="5" />
        <AssertPropertyValue target="nv" propertyName="precision" value="5" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_precision_Null" description="Test null value." keywords="[Runtime Localization,NumberValidator,precision]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="precision" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="precision" value="-1" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_precision_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberValidator,precision]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="precision" value="5" />
        <SetProperty target="nv" propertyName="precision" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="precision" value="-1" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberValidator - thousandsSeparator
==============================================================================
-->
<TestCase frequency="all" testID="NumberValidator_thousandsSeparator_Default" description="Test default value." keywords="[Runtime Localization,NumberValidator,thousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <AssertPropertyValue target="nv" propertyName="thousandsSeparator" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_thousandsSeparator_Custom" description="Test custom value." keywords="[Runtime Localization,NumberValidator,thousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="thousandsSeparator" value="." />
        <AssertPropertyValue target="nv" propertyName="thousandsSeparator" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_thousandsSeparator_Null" description="Test null value." keywords="[Runtime Localization,NumberValidator,thousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="thousandsSeparator" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="thousandsSeparator" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_thousandsSeparator_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberValidator,thousandsSeparator]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="thousandsSeparator" value="." />
        <SetProperty target="nv" propertyName="thousandsSeparator" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="thousandsSeparator" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberValidator - decimalPointCountError
==============================================================================
-->
<TestCase frequency="all" testID="NumberValidator_decimalPointCountError_Default" description="Test default value." keywords="[Runtime Localization,NumberValidator,decimalPointCountError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <AssertPropertyValue target="nv" propertyName="decimalPointCountError" value="The decimal separator can occur only once." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_decimalPointCountError_Custom" description="Test custom value." keywords="[Runtime Localization,NumberValidator,decimalPointCountError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="decimalPointCountError" value="nope!" />
        <AssertPropertyValue target="nv" propertyName="decimalPointCountError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_decimalPointCountError_Null" description="Test null value." keywords="[Runtime Localization,NumberValidator,decimalPointCountError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="decimalPointCountError" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="decimalPointCountError" value="The decimal separator can occur only once." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_decimalPointCountError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberValidator,decimalPointCountError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="decimalPointCountError" value="nope!" />
        <SetProperty target="nv" propertyName="decimalPointCountError" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="decimalPointCountError" value="The decimal separator can occur only once." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberValidator - exceedsMaxError
==============================================================================
-->
<TestCase frequency="all" testID="NumberValidator_exceedsMaxError_Default" description="Test default value." keywords="[Runtime Localization,NumberValidator,exceedsMaxError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <AssertPropertyValue target="nv" propertyName="exceedsMaxError" value="The number entered is too large." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_exceedsMaxError_Custom" description="Test custom value." keywords="[Runtime Localization,NumberValidator,exceedsMaxError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="exceedsMaxError" value="nope!" />
        <AssertPropertyValue target="nv" propertyName="exceedsMaxError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_exceedsMaxError_Null" description="Test null value." keywords="[Runtime Localization,NumberValidator,exceedsMaxError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="exceedsMaxError" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="exceedsMaxError" value="The number entered is too large." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_exceedsMaxError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberValidator,exceedsMaxError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="exceedsMaxError" value="nope!" />
        <SetProperty target="nv" propertyName="exceedsMaxError" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="exceedsMaxError" value="The number entered is too large." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberValidator - integerError
==============================================================================
-->
<TestCase frequency="all" testID="NumberValidator_integerError_Default" description="Test default value." keywords="[Runtime Localization,NumberValidator,integerError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <AssertPropertyValue target="nv" propertyName="integerError" value="The number must be an integer." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_integerError_Custom" description="Test custom value." keywords="[Runtime Localization,NumberValidator,integerError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="integerError" value="nope!" />
        <AssertPropertyValue target="nv" propertyName="integerError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_integerError_Null" description="Test null value." keywords="[Runtime Localization,NumberValidator,integerError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="integerError" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="integerError" value="The number must be an integer." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_integerError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberValidator,integerError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="integerError" value="nope!" />
        <SetProperty target="nv" propertyName="integerError" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="integerError" value="The number must be an integer." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberValidator - invalidCharError
==============================================================================
-->
<TestCase frequency="all" testID="NumberValidator_invalidCharError_Default" description="Test default value." keywords="[Runtime Localization,NumberValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <AssertPropertyValue target="nv" propertyName="invalidCharError" value="The input contains invalid characters." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_invalidCharError_Custom" description="Test custom value." keywords="[Runtime Localization,NumberValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="invalidCharError" value="nope!" />
        <AssertPropertyValue target="nv" propertyName="invalidCharError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_invalidCharError_Null" description="Test null value." keywords="[Runtime Localization,NumberValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="invalidCharError" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="invalidCharError" value="The input contains invalid characters." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_invalidCharError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="invalidCharError" value="nope!" />
        <SetProperty target="nv" propertyName="invalidCharError" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="invalidCharError" value="The input contains invalid characters." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberValidator - invalidFormatCharsError
==============================================================================
-->
<TestCase frequency="all" testID="NumberValidator_invalidFormatCharsError_Default" description="Test default value." keywords="[Runtime Localization,NumberValidator,invalidFormatCharsError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <AssertPropertyValue target="nv" propertyName="invalidFormatCharsError" value="One of the formatting parameters is invalid." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_invalidFormatCharsError_Custom" description="Test custom value." keywords="[Runtime Localization,NumberValidator,invalidFormatCharsError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="invalidFormatCharsError" value="nope!" />
        <AssertPropertyValue target="nv" propertyName="invalidFormatCharsError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_invalidFormatCharsError_Null" description="Test null value." keywords="[Runtime Localization,NumberValidator,invalidFormatCharsError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="invalidFormatCharsError" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="invalidFormatCharsError" value="One of the formatting parameters is invalid." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_invalidFormatCharsError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberValidator,invalidFormatCharsError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="invalidFormatCharsError" value="nope!" />
        <SetProperty target="nv" propertyName="invalidFormatCharsError" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="invalidFormatCharsError" value="One of the formatting parameters is invalid." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberValidator - lowerThanMinError
==============================================================================
-->
<TestCase frequency="all" testID="NumberValidator_lowerThanMinError_Default" description="Test default value." keywords="[Runtime Localization,NumberValidator,lowerThanMinError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <AssertPropertyValue target="nv" propertyName="lowerThanMinError" value="The amount entered is too small." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_lowerThanMinError_Custom" description="Test custom value." keywords="[Runtime Localization,NumberValidator,lowerThanMinError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="lowerThanMinError" value="nope!" />
        <AssertPropertyValue target="nv" propertyName="lowerThanMinError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_lowerThanMinError_Null" description="Test null value." keywords="[Runtime Localization,NumberValidator,lowerThanMinError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="lowerThanMinError" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="lowerThanMinError" value="The amount entered is too small." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_lowerThanMinError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberValidator,lowerThanMinError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="lowerThanMinError" value="nope!" />
        <SetProperty target="nv" propertyName="lowerThanMinError" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="lowerThanMinError" value="The amount entered is too small." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberValidator - negativeError
==============================================================================
-->
<TestCase frequency="all" testID="NumberValidator_negativeError_Default" description="Test default value." keywords="[Runtime Localization,NumberValidator,negativeError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <AssertPropertyValue target="nv" propertyName="negativeError" value="The amount may not be negative." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_negativeError_Custom" description="Test custom value." keywords="[Runtime Localization,NumberValidator,negativeError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="negativeError" value="nope!" />
        <AssertPropertyValue target="nv" propertyName="negativeError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_negativeError_Null" description="Test null value." keywords="[Runtime Localization,NumberValidator,negativeError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="negativeError" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="negativeError" value="The amount may not be negative." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_negativeError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberValidator,negativeError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="negativeError" value="nope!" />
        <SetProperty target="nv" propertyName="negativeError" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="negativeError" value="The amount may not be negative." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberValidator - precisionError
==============================================================================
-->
<TestCase frequency="all" testID="NumberValidator_precisionError_Default" description="Test default value." keywords="[Runtime Localization,NumberValidator,precisionError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <AssertPropertyValue target="nv" propertyName="precisionError" value="The amount entered has too many digits beyond the decimal point." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_precisionError_Custom" description="Test custom value." keywords="[Runtime Localization,NumberValidator,precisionError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="precisionError" value="nope!" />
        <AssertPropertyValue target="nv" propertyName="precisionError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_precisionError_Null" description="Test null value." keywords="[Runtime Localization,NumberValidator,precisionError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="precisionError" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="precisionError" value="The amount entered has too many digits beyond the decimal point." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_precisionError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberValidator,precisionError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="precisionError" value="nope!" />
        <SetProperty target="nv" propertyName="precisionError" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="precisionError" value="The amount entered has too many digits beyond the decimal point." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
NumberValidator - separationError
==============================================================================
-->
<TestCase frequency="all" testID="NumberValidator_separationError_Default" description="Test default value." keywords="[Runtime Localization,NumberValidator,separationError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <AssertPropertyValue target="nv" propertyName="separationError" value="The thousands separator must be followed by three digits." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_separationError_Custom" description="Test custom value." keywords="[Runtime Localization,NumberValidator,separationError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="separationError" value="nope!" />
        <AssertPropertyValue target="nv" propertyName="separationError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_separationError_Null" description="Test null value." keywords="[Runtime Localization,NumberValidator,separationError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="separationError" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="separationError" value="The thousands separator must be followed by three digits." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="NumberValidator_separationError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,NumberValidator,separationError]" >
    <setup>
        <ResetComponent className="mx.validators.NumberValidator" target="nv" />
    </setup>
    <body>
        <SetProperty target="nv" propertyName="separationError" value="nope!" />
        <SetProperty target="nv" propertyName="separationError" valueExpression="value=null" />
        <AssertPropertyValue target="nv" propertyName="separationError" value="The thousands separator must be followed by three digits." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
PhoneNumberValidator - allowedFormatChars
==============================================================================
-->
<TestCase frequency="all" testID="PhoneNumberValidator_allowedFormatChars_Default" description="Test default value." keywords="[Runtime Localization,PhoneNumberValidator,allowedFormatChars]" >
    <setup>
        <ResetComponent className="mx.validators.PhoneNumberValidator" target="pnv" />
    </setup>
    <body>
        <AssertPropertyValue target="pnv" propertyName="allowedFormatChars" value="-()+ ." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="PhoneNumberValidator_allowedFormatChars_Custom" description="Test custom value." keywords="[Runtime Localization,PhoneNumberValidator,allowedFormatChars]" >
    <setup>
        <ResetComponent className="mx.validators.PhoneNumberValidator" target="pnv" />
    </setup>
    <body>
        <SetProperty target="pnv" propertyName="allowedFormatChars" value="," />
        <AssertPropertyValue target="pnv" propertyName="allowedFormatChars" value="," />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="PhoneNumberValidator_allowedFormatChars_Null" description="Test null value." keywords="[Runtime Localization,PhoneNumberValidator,allowedFormatChars]" >
    <setup>
        <ResetComponent className="mx.validators.PhoneNumberValidator" target="pnv" />
    </setup>
    <body>
        <SetProperty target="pnv" propertyName="allowedFormatChars" valueExpression="value=null" />
        <AssertPropertyValue target="pnv" propertyName="allowedFormatChars" value="-()+ ." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="PhoneNumberValidator_allowedFormatChars_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,PhoneNumberValidator,allowedFormatChars]" >
    <setup>
        <ResetComponent className="mx.validators.PhoneNumberValidator" target="pnv" />
    </setup>
    <body>
        <SetProperty target="pnv" propertyName="allowedFormatChars" value="," />
        <SetProperty target="pnv" propertyName="allowedFormatChars" valueExpression="value=null" />
        <AssertPropertyValue target="pnv" propertyName="allowedFormatChars" value="-()+ ." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
PhoneNumberValidator - invalidCharError
==============================================================================
-->
<TestCase frequency="all" testID="PhoneNumberValidator_invalidCharError_Default" description="Test default value." keywords="[Runtime Localization,PhoneNumberValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.PhoneNumberValidator" target="pnv" />
    </setup>
    <body>
        <AssertPropertyValue target="pnv" propertyName="invalidCharError" value="Your telephone number contains invalid characters." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="PhoneNumberValidator_invalidCharError_Custom" description="Test custom value." keywords="[Runtime Localization,PhoneNumberValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.PhoneNumberValidator" target="pnv" />
    </setup>
    <body>
        <SetProperty target="pnv" propertyName="invalidCharError" value="nope!" />
        <AssertPropertyValue target="pnv" propertyName="invalidCharError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="PhoneNumberValidator_invalidCharError_Null" description="Test null value." keywords="[Runtime Localization,PhoneNumberValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.PhoneNumberValidator" target="pnv" />
    </setup>
    <body>
        <SetProperty target="pnv" propertyName="invalidCharError" valueExpression="value=null" />
        <AssertPropertyValue target="pnv" propertyName="invalidCharError" value="Your telephone number contains invalid characters." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="PhoneNumberValidator_invalidCharError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,PhoneNumberValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.PhoneNumberValidator" target="pnv" />
    </setup>
    <body>
        <SetProperty target="pnv" propertyName="invalidCharError" value="nope!" />
        <SetProperty target="pnv" propertyName="invalidCharError" valueExpression="value=null" />
        <AssertPropertyValue target="pnv" propertyName="invalidCharError" value="Your telephone number contains invalid characters." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
PhoneNumberValidator - wrongLengthError
==============================================================================
-->
<TestCase frequency="all" testID="PhoneNumberValidator_wrongLengthError_Default" description="Test default value." keywords="[Runtime Localization,PhoneNumberValidator,wrongLengthError]" >
    <setup>
        <ResetComponent className="mx.validators.PhoneNumberValidator" target="pnv" />
    </setup>
    <body>
        <AssertPropertyValue target="pnv" propertyName="wrongLengthError" value="Your telephone number must contain at least \{0\} digits." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="PhoneNumberValidator_wrongLengthError_Custom" description="Test custom value." keywords="[Runtime Localization,PhoneNumberValidator,wrongLengthError]" >
    <setup>
        <ResetComponent className="mx.validators.PhoneNumberValidator" target="pnv" />
    </setup>
    <body>
        <SetProperty target="pnv" propertyName="wrongLengthError" value="nope!" />
        <AssertPropertyValue target="pnv" propertyName="wrongLengthError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="PhoneNumberValidator_wrongLengthError_Null" description="Test null value." keywords="[Runtime Localization,PhoneNumberValidator,wrongLengthError]" >
    <setup>
        <ResetComponent className="mx.validators.PhoneNumberValidator" target="pnv" />
    </setup>
    <body>
        <SetProperty target="pnv" propertyName="wrongLengthError" valueExpression="value=null" />
        <AssertPropertyValue target="pnv" propertyName="wrongLengthError" value="Your telephone number must contain at least \{0\} digits." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="PhoneNumberValidator_wrongLengthError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,PhoneNumberValidator,wrongLengthError]" >
    <setup>
        <ResetComponent className="mx.validators.PhoneNumberValidator" target="pnv" />
    </setup>
    <body>
        <SetProperty target="pnv" propertyName="wrongLengthError" value="nope!" />
        <SetProperty target="pnv" propertyName="wrongLengthError" valueExpression="value=null" />
        <AssertPropertyValue target="pnv" propertyName="wrongLengthError" value="Your telephone number must contain at least \{0\} digits." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
RegExpValidator - noExpressionError
==============================================================================
-->
<TestCase frequency="all" testID="RegExpValidator_noExpressionError_Default" description="Test default value." keywords="[Runtime Localization,RegExpValidator,noExpressionError]" >
    <setup>
        <ResetComponent className="mx.validators.RegExpValidator" target="rev" />
    </setup>
    <body>
        <AssertPropertyValue target="rev" propertyName="noExpressionError" value="The expression is missing." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="RegExpValidator_noExpressionError_Custom" description="Test custom value." keywords="[Runtime Localization,RegExpValidator,noExpressionError]" >
    <setup>
        <ResetComponent className="mx.validators.RegExpValidator" target="rev" />
    </setup>
    <body>
        <SetProperty target="rev" propertyName="noExpressionError" value="nope!" />
        <AssertPropertyValue target="rev" propertyName="noExpressionError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="RegExpValidator_noExpressionError_Null" description="Test null value." keywords="[Runtime Localization,RegExpValidator,noExpressionError]" >
    <setup>
        <ResetComponent className="mx.validators.RegExpValidator" target="rev" />
    </setup>
    <body>
        <SetProperty target="rev" propertyName="noExpressionError" valueExpression="value=null" />
        <AssertPropertyValue target="rev" propertyName="noExpressionError" value="The expression is missing." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="RegExpValidator_noExpressionError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,RegExpValidator,noExpressionError]" >
    <setup>
        <ResetComponent className="mx.validators.RegExpValidator" target="rev" />
    </setup>
    <body>
        <SetProperty target="rev" propertyName="noExpressionError" value="nope!" />
        <SetProperty target="rev" propertyName="noExpressionError" valueExpression="value=null" />
        <AssertPropertyValue target="rev" propertyName="noExpressionError" value="The expression is missing." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
RegExpValidator - noMatchError
==============================================================================
-->
<TestCase frequency="all" testID="RegExpValidator_noMatchError_Default" description="Test default value." keywords="[Runtime Localization,RegExpValidator,noMatchError]" >
    <setup>
        <ResetComponent className="mx.validators.RegExpValidator" target="rev" />
    </setup>
    <body>
        <AssertPropertyValue target="rev" propertyName="noMatchError" value="The field is invalid." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="RegExpValidator_noMatchError_Custom" description="Test custom value." keywords="[Runtime Localization,RegExpValidator,noMatchError]" >
    <setup>
        <ResetComponent className="mx.validators.RegExpValidator" target="rev" />
    </setup>
    <body>
        <SetProperty target="rev" propertyName="noMatchError" value="nope!" />
        <AssertPropertyValue target="rev" propertyName="noMatchError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="RegExpValidator_noMatchError_Null" description="Test null value." keywords="[Runtime Localization,RegExpValidator,noMatchError]" >
    <setup>
        <ResetComponent className="mx.validators.RegExpValidator" target="rev" />
    </setup>
    <body>
        <SetProperty target="rev" propertyName="noMatchError" valueExpression="value=null" />
        <AssertPropertyValue target="rev" propertyName="noMatchError" value="The field is invalid." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="RegExpValidator_noMatchError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,RegExpValidator,noMatchError]" >
    <setup>
        <ResetComponent className="mx.validators.RegExpValidator" target="rev" />
    </setup>
    <body>
        <SetProperty target="rev" propertyName="noMatchError" value="nope!" />
        <SetProperty target="rev" propertyName="noMatchError" valueExpression="value=null" />
        <AssertPropertyValue target="rev" propertyName="noMatchError" value="The field is invalid." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
SocialSecurityValidator - allowedFormatChars
==============================================================================
-->
<TestCase frequency="all" testID="SocialSecurityValidator_allowedFormatChars_Default" description="Test default value." keywords="[Runtime Localization,SocialSecurityValidator,allowedFormatChars]" >
    <setup>
        <ResetComponent className="mx.validators.SocialSecurityValidator" target="ssv" />
    </setup>
    <body>
        <AssertPropertyValue target="ssv" propertyName="allowedFormatChars" value=" -" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="SocialSecurityValidator_allowedFormatChars_Custom" description="Test custom value." keywords="[Runtime Localization,SocialSecurityValidator,allowedFormatChars]" >
    <setup>
        <ResetComponent className="mx.validators.SocialSecurityValidator" target="ssv" />
    </setup>
    <body>
        <SetProperty target="ssv" propertyName="allowedFormatChars" value="." />
        <AssertPropertyValue target="ssv" propertyName="allowedFormatChars" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="SocialSecurityValidator_allowedFormatChars_Null" description="Test null value." keywords="[Runtime Localization,SocialSecurityValidator,allowedFormatChars]" >
    <setup>
        <ResetComponent className="mx.validators.SocialSecurityValidator" target="ssv" />
    </setup>
    <body>
        <SetProperty target="ssv" propertyName="allowedFormatChars" valueExpression="value=null" />
        <AssertPropertyValue target="ssv" propertyName="allowedFormatChars" value=" -" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="SocialSecurityValidator_allowedFormatChars_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,SocialSecurityValidator,allowedFormatChars]" >
    <setup>
        <ResetComponent className="mx.validators.SocialSecurityValidator" target="ssv" />
    </setup>
    <body>
        <SetProperty target="ssv" propertyName="allowedFormatChars" value="." />
        <SetProperty target="ssv" propertyName="allowedFormatChars" valueExpression="value=null" />
        <AssertPropertyValue target="ssv" propertyName="allowedFormatChars" value=" -" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
SocialSecurityValidator - invalidCharError
==============================================================================
-->
<TestCase frequency="all" testID="SocialSecurityValidator_invalidCharError_Default" description="Test default value." keywords="[Runtime Localization,SocialSecurityValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.SocialSecurityValidator" target="ssv" />
    </setup>
    <body>
        <AssertPropertyValue target="ssv" propertyName="invalidCharError" value="You entered invalid characters in your Social Security number." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="SocialSecurityValidator_invalidCharError_Custom" description="Test custom value." keywords="[Runtime Localization,SocialSecurityValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.SocialSecurityValidator" target="ssv" />
    </setup>
    <body>
        <SetProperty target="ssv" propertyName="invalidCharError" value="nope!" />
        <AssertPropertyValue target="ssv" propertyName="invalidCharError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="SocialSecurityValidator_invalidCharError_Null" description="Test null value." keywords="[Runtime Localization,SocialSecurityValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.SocialSecurityValidator" target="ssv" />
    </setup>
    <body>
        <SetProperty target="ssv" propertyName="invalidCharError" valueExpression="value=null" />
        <AssertPropertyValue target="ssv" propertyName="invalidCharError" value="You entered invalid characters in your Social Security number." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="SocialSecurityValidator_invalidCharError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,SocialSecurityValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.SocialSecurityValidator" target="ssv" />
    </setup>
    <body>
        <SetProperty target="ssv" propertyName="invalidCharError" value="nope!" />
        <SetProperty target="ssv" propertyName="invalidCharError" valueExpression="value=null" />
        <AssertPropertyValue target="ssv" propertyName="invalidCharError" value="You entered invalid characters in your Social Security number." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
SocialSecurityValidator - wrongFormatError
==============================================================================
-->
<TestCase frequency="all" testID="SocialSecurityValidator_wrongFormatError_Default" description="Test default value." keywords="[Runtime Localization,SocialSecurityValidator,wrongFormatError]" >
    <setup>
        <ResetComponent className="mx.validators.SocialSecurityValidator" target="ssv" />
    </setup>
    <body>
        <AssertPropertyValue target="ssv" propertyName="wrongFormatError" value="The Social Security number must be 9 digits or in the form NNN-NN-NNNN." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="SocialSecurityValidator_wrongFormatError_Custom" description="Test custom value." keywords="[Runtime Localization,SocialSecurityValidator,wrongFormatError]" >
    <setup>
        <ResetComponent className="mx.validators.SocialSecurityValidator" target="ssv" />
    </setup>
    <body>
        <SetProperty target="ssv" propertyName="wrongFormatError" value="nope!" />
        <AssertPropertyValue target="ssv" propertyName="wrongFormatError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="SocialSecurityValidator_wrongFormatError_Null" description="Test null value." keywords="[Runtime Localization,SocialSecurityValidator,wrongFormatError]" >
    <setup>
        <ResetComponent className="mx.validators.SocialSecurityValidator" target="ssv" />
    </setup>
    <body>
        <SetProperty target="ssv" propertyName="wrongFormatError" valueExpression="value=null" />
        <AssertPropertyValue target="ssv" propertyName="wrongFormatError" value="The Social Security number must be 9 digits or in the form NNN-NN-NNNN." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="SocialSecurityValidator_wrongFormatError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,SocialSecurityValidator,wrongFormatError]" >
    <setup>
        <ResetComponent className="mx.validators.SocialSecurityValidator" target="ssv" />
    </setup>
    <body>
        <SetProperty target="ssv" propertyName="wrongFormatError" value="nope!" />
        <SetProperty target="ssv" propertyName="wrongFormatError" valueExpression="value=null" />
        <AssertPropertyValue target="ssv" propertyName="wrongFormatError" value="The Social Security number must be 9 digits or in the form NNN-NN-NNNN." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
SocialSecurityValidator - zeroStartError
==============================================================================
-->
<TestCase frequency="all" testID="SocialSecurityValidator_zeroStartError_Default" description="Test default value." keywords="[Runtime Localization,SocialSecurityValidator,zeroStartError]" >
    <setup>
        <ResetComponent className="mx.validators.SocialSecurityValidator" target="ssv" />
    </setup>
    <body>
        <AssertPropertyValue target="ssv" propertyName="zeroStartError" value="Invalid Social Security number; the number cannot start with 000." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="SocialSecurityValidator_zeroStartError_Custom" description="Test custom value." keywords="[Runtime Localization,SocialSecurityValidator,zeroStartError]" >
    <setup>
        <ResetComponent className="mx.validators.SocialSecurityValidator" target="ssv" />
    </setup>
    <body>
        <SetProperty target="ssv" propertyName="zeroStartError" value="nope!" />
        <AssertPropertyValue target="ssv" propertyName="zeroStartError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="SocialSecurityValidator_zeroStartError_Null" description="Test null value." keywords="[Runtime Localization,SocialSecurityValidator,zeroStartError]" >
    <setup>
        <ResetComponent className="mx.validators.SocialSecurityValidator" target="ssv" />
    </setup>
    <body>
        <SetProperty target="ssv" propertyName="zeroStartError" valueExpression="value=null" />
        <AssertPropertyValue target="ssv" propertyName="zeroStartError" value="Invalid Social Security number; the number cannot start with 000." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="SocialSecurityValidator_zeroStartError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,SocialSecurityValidator,zeroStartError]" >
    <setup>
        <ResetComponent className="mx.validators.SocialSecurityValidator" target="ssv" />
    </setup>
    <body>
        <SetProperty target="ssv" propertyName="zeroStartError" value="nope!" />
        <SetProperty target="ssv" propertyName="zeroStartError" valueExpression="value=null" />
        <AssertPropertyValue target="ssv" propertyName="zeroStartError" value="Invalid Social Security number; the number cannot start with 000." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
StringValidator - maxLength
==============================================================================
-->
<TestCase frequency="all" testID="StringValidator_maxLength_Default" description="Test default value." keywords="[Runtime Localization,StringValidator,maxLength]" >
    <setup>
        <ResetComponent className="mx.validators.StringValidator" target="sv" />
    </setup>
    <body>
        <AssertPropertyValue target="sv" propertyName="maxLength" value="NaN" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="StringValidator_maxLength_Custom" description="Test custom value." keywords="[Runtime Localization,StringValidator,maxLength]" >
    <setup>
        <ResetComponent className="mx.validators.StringValidator" target="sv" />
    </setup>
    <body>
        <SetProperty target="sv" propertyName="maxLength" value="5" />
        <AssertPropertyValue target="sv" propertyName="maxLength" value="5" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="StringValidator_maxLength_Null" description="Test null value." keywords="[Runtime Localization,StringValidator,maxLength]" >
    <setup>
        <ResetComponent className="mx.validators.StringValidator" target="sv" />
    </setup>
    <body>
        <SetProperty target="sv" propertyName="maxLength" valueExpression="value=null" />
        <AssertPropertyValue target="sv" propertyName="maxLength" value="NaN" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="StringValidator_maxLength_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,StringValidator,maxLength]" >
    <setup>
        <ResetComponent className="mx.validators.StringValidator" target="sv" />
    </setup>
    <body>
        <SetProperty target="sv" propertyName="maxLength" value="5" />
        <SetProperty target="sv" propertyName="maxLength" valueExpression="value=null" />
        <AssertPropertyValue target="sv" propertyName="maxLength" value="NaN" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
StringValidator - minLength
==============================================================================
-->
<TestCase frequency="all" testID="StringValidator_minLength_Default" description="Test default value." keywords="[Runtime Localization,StringValidator,minLength]" >
    <setup>
        <ResetComponent className="mx.validators.StringValidator" target="sv" />
    </setup>
    <body>
        <AssertPropertyValue target="sv" propertyName="minLength" value="NaN" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="StringValidator_minLength_Custom" description="Test custom value." keywords="[Runtime Localization,StringValidator,minLength]" >
    <setup>
        <ResetComponent className="mx.validators.StringValidator" target="sv" />
    </setup>
    <body>
        <SetProperty target="sv" propertyName="minLength" value="5" />
        <AssertPropertyValue target="sv" propertyName="minLength" value="5" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="StringValidator_minLength_Null" description="Test null value." keywords="[Runtime Localization,StringValidator,minLength]" >
    <setup>
        <ResetComponent className="mx.validators.StringValidator" target="sv" />
    </setup>
    <body>
        <SetProperty target="sv" propertyName="minLength" valueExpression="value=null" />
        <AssertPropertyValue target="sv" propertyName="minLength" value="NaN" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="StringValidator_minLength_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,StringValidator,minLength]" >
    <setup>
        <ResetComponent className="mx.validators.StringValidator" target="sv" />
    </setup>
    <body>
        <SetProperty target="sv" propertyName="minLength" value="5" />
        <SetProperty target="sv" propertyName="minLength" valueExpression="value=null" />
        <AssertPropertyValue target="sv" propertyName="minLength" value="NaN" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
StringValidator - tooLongError
==============================================================================
-->
<TestCase frequency="all" testID="StringValidator_tooLongError_Default" description="Test default value." keywords="[Runtime Localization,StringValidator,tooLongError]" >
    <setup>
        <ResetComponent className="mx.validators.StringValidator" target="sv" />
    </setup>
    <body>
        <AssertPropertyValue target="sv" propertyName="tooLongError" value="This string is longer than the maximum allowed length. This must be less than \{0\} characters long." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="StringValidator_tooLongError_Custom" description="Test custom value." keywords="[Runtime Localization,StringValidator,tooLongError]" >
    <setup>
        <ResetComponent className="mx.validators.StringValidator" target="sv" />
    </setup>
    <body>
        <SetProperty target="sv" propertyName="tooLongError" value="nope!" />
        <AssertPropertyValue target="sv" propertyName="tooLongError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="StringValidator_tooLongError_Null" description="Test null value." keywords="[Runtime Localization,StringValidator,tooLongError]" >
    <setup>
        <ResetComponent className="mx.validators.StringValidator" target="sv" />
    </setup>
    <body>
        <SetProperty target="sv" propertyName="tooLongError" valueExpression="value=null" />
        <AssertPropertyValue target="sv" propertyName="tooLongError" value="This string is longer than the maximum allowed length. This must be less than \{0\} characters long." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="StringValidator_tooLongError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,StringValidator,tooLongError]" >
    <setup>
        <ResetComponent className="mx.validators.StringValidator" target="sv" />
    </setup>
    <body>
        <SetProperty target="sv" propertyName="tooLongError" value="nope!" />
        <SetProperty target="sv" propertyName="tooLongError" valueExpression="value=null" />
        <AssertPropertyValue target="sv" propertyName="tooLongError" value="This string is longer than the maximum allowed length. This must be less than \{0\} characters long." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
StringValidator - tooShortError
==============================================================================
-->
<TestCase frequency="all" testID="StringValidator_tooShortError_Default" description="Test default value." keywords="[Runtime Localization,StringValidator,tooShortError]" >
    <setup>
        <ResetComponent className="mx.validators.StringValidator" target="sv" />
    </setup>
    <body>
        <AssertPropertyValue target="sv" propertyName="tooShortError" value="This string is shorter than the minimum allowed length. This must be at least \{0\} characters long." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="StringValidator_tooShortError_Custom" description="Test custom value." keywords="[Runtime Localization,StringValidator,tooShortError]" >
    <setup>
        <ResetComponent className="mx.validators.StringValidator" target="sv" />
    </setup>
    <body>
        <SetProperty target="sv" propertyName="tooShortError" value="nope!" />
        <AssertPropertyValue target="sv" propertyName="tooShortError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="StringValidator_tooShortError_Null" description="Test null value." keywords="[Runtime Localization,StringValidator,tooShortError]" >
    <setup>
        <ResetComponent className="mx.validators.StringValidator" target="sv" />
    </setup>
    <body>
        <SetProperty target="sv" propertyName="tooShortError" valueExpression="value=null" />
        <AssertPropertyValue target="sv" propertyName="tooShortError" value="This string is shorter than the minimum allowed length. This must be at least \{0\} characters long." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="StringValidator_tooShortError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,StringValidator,tooShortError]" >
    <setup>
        <ResetComponent className="mx.validators.StringValidator" target="sv" />
    </setup>
    <body>
        <SetProperty target="sv" propertyName="tooShortError" value="nope!" />
        <SetProperty target="sv" propertyName="tooShortError" valueExpression="value=null" />
        <AssertPropertyValue target="sv" propertyName="tooShortError" value="This string is shorter than the minimum allowed length. This must be at least \{0\} characters long." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
Validator - requiredFieldError
==============================================================================
-->
<TestCase frequency="all" testID="Validator_requiredFieldError_Default" description="Test default value." keywords="[Runtime Localization,Validator,requiredFieldError]" >
    <setup>
        <ResetComponent className="mx.validators.Validator" target="v" />
    </setup>
    <body>
        <AssertPropertyValue target="v" propertyName="requiredFieldError" value="This field is required." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="Validator_requiredFieldError_Custom" description="Test custom value." keywords="[Runtime Localization,Validator,requiredFieldError]" >
    <setup>
        <ResetComponent className="mx.validators.Validator" target="v" />
    </setup>
    <body>
        <SetProperty target="v" propertyName="requiredFieldError" value="nope!" />
        <AssertPropertyValue target="v" propertyName="requiredFieldError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="Validator_requiredFieldError_Null" description="Test null value." keywords="[Runtime Localization,Validator,requiredFieldError]" >
    <setup>
        <ResetComponent className="mx.validators.Validator" target="v" />
    </setup>
    <body>
        <SetProperty target="v" propertyName="requiredFieldError" valueExpression="value=null" />
        <AssertPropertyValue target="v" propertyName="requiredFieldError" value="This field is required." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="Validator_requiredFieldError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,Validator,requiredFieldError]" >
    <setup>
        <ResetComponent className="mx.validators.Validator" target="v" />
    </setup>
    <body>
        <SetProperty target="v" propertyName="requiredFieldError" value="nope!" />
        <SetProperty target="v" propertyName="requiredFieldError" valueExpression="value=null" />
        <AssertPropertyValue target="v" propertyName="requiredFieldError" value="This field is required." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
ZipCodeValidator - allowedFormatChars
==============================================================================
-->
<TestCase frequency="all" testID="ZipCodeValidator_allowedFormatChars_Default" description="Test default value." keywords="[Runtime Localization,ZipCodeValidator,allowedFormatChars]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <AssertPropertyValue target="zcv" propertyName="allowedFormatChars" value=" -" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeValidator_allowedFormatChars_Custom" description="Test custom value." keywords="[Runtime Localization,ZipCodeValidator,allowedFormatChars]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <SetProperty target="zcv" propertyName="allowedFormatChars" value="." />
        <AssertPropertyValue target="zcv" propertyName="allowedFormatChars" value="." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeValidator_allowedFormatChars_Null" description="Test null value." keywords="[Runtime Localization,ZipCodeValidator,allowedFormatChars]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <SetProperty target="zcv" propertyName="allowedFormatChars" valueExpression="value=null" />
        <AssertPropertyValue target="zcv" propertyName="allowedFormatChars" value=" -" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeValidator_allowedFormatChars_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,ZipCodeValidator,allowedFormatChars]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <SetProperty target="zcv" propertyName="allowedFormatChars" value="." />
        <SetProperty target="zcv" propertyName="allowedFormatChars" valueExpression="value=null" />
        <AssertPropertyValue target="zcv" propertyName="allowedFormatChars" value=" -" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
ZipCodeValidator - domain
==============================================================================
-->
<TestCase frequency="all" testID="ZipCodeValidator_domain_Default" description="Test default value." keywords="[Runtime Localization,ZipCodeValidator,domain]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <AssertPropertyValue target="zcv" propertyName="domain" value="US Only" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeValidator_domain_Custom" description="Test custom value." keywords="[Runtime Localization,ZipCodeValidator,domain]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <SetProperty target="zcv" propertyName="domain" value="US or Canada" />
        <AssertPropertyValue target="zcv" propertyName="domain" value="US or Canada" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeValidator_domain_Null" description="Test null value." keywords="[Runtime Localization,ZipCodeValidator,domain]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <SetProperty target="zcv" propertyName="domain" valueExpression="value=null" />
        <AssertPropertyValue target="zcv" propertyName="domain" value="US Only" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeValidator_domain_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,ZipCodeValidator,domain]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <SetProperty target="zcv" propertyName="domain" value="US or Canada" />
        <SetProperty target="zcv" propertyName="domain" valueExpression="value=null" />
        <AssertPropertyValue target="zcv" propertyName="domain" value="US Only" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
ZipCodeValidator - invalidCharError
==============================================================================
-->
<TestCase frequency="all" testID="ZipCodeValidator_invalidCharError_Default" description="Test default value." keywords="[Runtime Localization,ZipCodeValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <AssertPropertyValue target="zcv" propertyName="invalidCharError" value="The ZIP code contains invalid characters." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeValidator_invalidCharError_Custom" description="Test custom value." keywords="[Runtime Localization,ZipCodeValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <SetProperty target="zcv" propertyName="invalidCharError" value="nope!" />
        <AssertPropertyValue target="zcv" propertyName="invalidCharError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeValidator_invalidCharError_Null" description="Test null value." keywords="[Runtime Localization,ZipCodeValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <SetProperty target="zcv" propertyName="invalidCharError" valueExpression="value=null" />
        <AssertPropertyValue target="zcv" propertyName="invalidCharError" value="The ZIP code contains invalid characters." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeValidator_invalidCharError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,ZipCodeValidator,invalidCharError]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <SetProperty target="zcv" propertyName="invalidCharError" value="nope!" />
        <SetProperty target="zcv" propertyName="invalidCharError" valueExpression="value=null" />
        <AssertPropertyValue target="zcv" propertyName="invalidCharError" value="The ZIP code contains invalid characters." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
ZipCodeValidator - invalidDomainError
==============================================================================
-->
<TestCase frequency="all" testID="ZipCodeValidator_invalidDomainError_Default" description="Test default value." keywords="[Runtime Localization,ZipCodeValidator,invalidDomainError]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <AssertPropertyValue target="zcv" propertyName="invalidDomainError" value="The domain parameter is invalid. It must be either 'US Only', 'Canada Only', or 'US or Canada'." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeValidator_invalidDomainError_Custom" description="Test custom value." keywords="[Runtime Localization,ZipCodeValidator,invalidDomainError]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <SetProperty target="zcv" propertyName="invalidDomainError" value="nope!" />
        <AssertPropertyValue target="zcv" propertyName="invalidDomainError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeValidator_invalidDomainError_Null" description="Test null value." keywords="[Runtime Localization,ZipCodeValidator,invalidDomainError]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <SetProperty target="zcv" propertyName="invalidDomainError" valueExpression="value=null" />
        <AssertPropertyValue target="zcv" propertyName="invalidDomainError" value="The domain parameter is invalid. It must be either 'US Only', 'Canada Only', or 'US or Canada'." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeValidator_invalidDomainError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,ZipCodeValidator,invalidDomainError]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <SetProperty target="zcv" propertyName="invalidDomainError" value="nope!" />
        <SetProperty target="zcv" propertyName="invalidDomainError" valueExpression="value=null" />
        <AssertPropertyValue target="zcv" propertyName="invalidDomainError" value="The domain parameter is invalid. It must be either 'US Only', 'Canada Only', or 'US or Canada'." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
ZipCodeValidator - wrongCAFormatError
==============================================================================
-->
<TestCase frequency="all" testID="ZipCodeValidator_wrongCAFormatError_Default" description="Test default value." keywords="[Runtime Localization,ZipCodeValidator,wrongCAFormatError]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <AssertPropertyValue target="zcv" propertyName="wrongCAFormatError" value="The Canadian postal code must be formatted 'A1B 2C3'." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeValidator_wrongCAFormatError_Custom" description="Test custom value." keywords="[Runtime Localization,ZipCodeValidator,wrongCAFormatError]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <SetProperty target="zcv" propertyName="wrongCAFormatError" value="nope!" />
        <AssertPropertyValue target="zcv" propertyName="wrongCAFormatError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeValidator_wrongCAFormatError_Null" description="Test null value." keywords="[Runtime Localization,ZipCodeValidator,wrongCAFormatError]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <SetProperty target="zcv" propertyName="wrongCAFormatError" valueExpression="value=null" />
        <AssertPropertyValue target="zcv" propertyName="wrongCAFormatError" value="The Canadian postal code must be formatted 'A1B 2C3'." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeValidator_wrongCAFormatError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,ZipCodeValidator,wrongCAFormatError]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <SetProperty target="zcv" propertyName="wrongCAFormatError" value="nope!" />
        <SetProperty target="zcv" propertyName="wrongCAFormatError" valueExpression="value=null" />
        <AssertPropertyValue target="zcv" propertyName="wrongCAFormatError" value="The Canadian postal code must be formatted 'A1B 2C3'." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
ZipCodeValidator - wrongLengthError
==============================================================================
-->
<TestCase frequency="all" testID="ZipCodeValidator_wrongLengthError_Default" description="Test default value." keywords="[Runtime Localization,ZipCodeValidator,wrongLengthError]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <AssertPropertyValue target="zcv" propertyName="wrongLengthError" value="The ZIP code must be 5 digits or 5+4 digits." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeValidator_wrongLengthError_Custom" description="Test custom value." keywords="[Runtime Localization,ZipCodeValidator,wrongLengthError]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <SetProperty target="zcv" propertyName="wrongLengthError" value="nope!" />
        <AssertPropertyValue target="zcv" propertyName="wrongLengthError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeValidator_wrongLengthError_Null" description="Test null value." keywords="[Runtime Localization,ZipCodeValidator,wrongLengthError]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <SetProperty target="zcv" propertyName="wrongLengthError" valueExpression="value=null" />
        <AssertPropertyValue target="zcv" propertyName="wrongLengthError" value="The ZIP code must be 5 digits or 5+4 digits." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeValidator_wrongLengthError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,ZipCodeValidator,wrongLengthError]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <SetProperty target="zcv" propertyName="wrongLengthError" value="nope!" />
        <SetProperty target="zcv" propertyName="wrongLengthError" valueExpression="value=null" />
        <AssertPropertyValue target="zcv" propertyName="wrongLengthError" value="The ZIP code must be 5 digits or 5+4 digits." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
ZipCodeValidator - wrongUSFormatError
==============================================================================
-->
<TestCase frequency="all" testID="ZipCodeValidator_wrongUSFormatError_Default" description="Test default value." keywords="[Runtime Localization,ZipCodeValidator,wrongUSFormatError]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <AssertPropertyValue target="zcv" propertyName="wrongUSFormatError" value="The ZIP+4 code must be formatted '12345-6789'." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeValidator_wrongUSFormatError_Custom" description="Test custom value." keywords="[Runtime Localization,ZipCodeValidator,wrongUSFormatError]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <SetProperty target="zcv" propertyName="wrongUSFormatError" value="nope!" />
        <AssertPropertyValue target="zcv" propertyName="wrongUSFormatError" value="nope!" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeValidator_wrongUSFormatError_Null" description="Test null value." keywords="[Runtime Localization,ZipCodeValidator,wrongUSFormatError]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <SetProperty target="zcv" propertyName="wrongUSFormatError" valueExpression="value=null" />
        <AssertPropertyValue target="zcv" propertyName="wrongUSFormatError" value="The ZIP+4 code must be formatted '12345-6789'." />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="ZipCodeValidator_wrongUSFormatError_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,ZipCodeValidator,wrongUSFormatError]" >
    <setup>
        <ResetComponent className="mx.validators.ZipCodeValidator" target="zcv" />
    </setup>
    <body>
        <SetProperty target="zcv" propertyName="wrongUSFormatError" value="nope!" />
        <SetProperty target="zcv" propertyName="wrongUSFormatError" valueExpression="value=null" />
        <AssertPropertyValue target="zcv" propertyName="wrongUSFormatError" value="The ZIP+4 code must be formatted '12345-6789'." />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CalendarLayout - dayNames
==============================================================================
-->
<TestCase frequency="all" testID="CalendarLayout_dayNames_Default" description="Test default value." keywords="[Runtime Localization,CalendarLayout,dayNames]" >
    <setup>
        <ResetComponent className="mx.controls.DateChooser" target="dc" waitEvent="updateComplete" />
    </setup>
    <body>
        <AssertPropertyValue target="dc" propertyName="dayNames" value="S,M,T,W,T,F,S" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CalendarLayout_dayNames_Custom" description="Test custom value." keywords="[Runtime Localization,CalendarLayout,dayNames]" >
    <setup>
        <ResetComponent className="mx.controls.DateChooser" target="dc" />
    </setup>
    <body>
        <SetProperty target="dc" propertyName="dayNames" valueExpression="value=['A','B','C','D','E','F','G']" />
        <AssertPropertyValue target="dc" propertyName="dayNames" value="A,B,C,D,E,F,G" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CalendarLayout_dayNames_Null" description="Test null value." keywords="[Runtime Localization,CalendarLayout,dayNames]" >
    <setup>
        <ResetComponent className="mx.controls.DateChooser" target="dc" />
    </setup>
    <body>
        <SetProperty target="dc" propertyName="dayNames" valueExpression="value=null" />
        <AssertPropertyValue target="dc" propertyName="dayNames" value="S,M,T,W,T,F,S" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CalendarLayout_dayNames_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CalendarLayout,dayNames]" >
    <setup>
        <ResetComponent className="mx.controls.DateChooser" target="dc" />
    </setup>
    <body>
        <SetProperty target="dc" propertyName="dayNames" valueExpression="value=['A','B','C','D','E','F','G']" />
        <SetProperty target="dc" propertyName="dayNames" valueExpression="value=null" />
        <AssertPropertyValue target="dc" propertyName="dayNames" value="S,M,T,W,T,F,S" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CalendarLayout - firstDayOfWeek
==============================================================================
-->
<TestCase frequency="all" testID="CalendarLayout_firstDayOfWeek_Default" description="Test default value." keywords="[Runtime Localization,CalendarLayout,firstDayOfWeek]" >
    <setup>
        <ResetComponent className="mx.controls.DateChooser" target="dc" waitEvent="updateComplete" />
    </setup>
    <body>
        <AssertPropertyValue target="dc" propertyName="firstDayOfWeek" value="0" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CalendarLayout_firstDayOfWeek_Custom" description="Test custom value." keywords="[Runtime Localization,CalendarLayout,firstDayOfWeek]" >
    <setup>
        <ResetComponent className="mx.controls.DateChooser" target="dc" />
    </setup>
    <body>
        <SetProperty target="dc" propertyName="firstDayOfWeek" value="5" />
        <AssertPropertyValue target="dc" propertyName="firstDayOfWeek" value="5" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CalendarLayout_firstDayOfWeek_Null" description="Test null value." keywords="[Runtime Localization,CalendarLayout,firstDayOfWeek]" >
    <setup>
        <ResetComponent className="mx.controls.DateChooser" target="dc" />
    </setup>
    <body>
        <SetProperty target="dc" propertyName="firstDayOfWeek" valueExpression="value=null" />
        <AssertPropertyValue target="dc" propertyName="firstDayOfWeek" value="0" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CalendarLayout_firstDayOfWeek_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CalendarLayout,firstDayOfWeek]" >
    <setup>
        <ResetComponent className="mx.controls.DateChooser" target="dc" />
    </setup>
    <body>
        <SetProperty target="dc" propertyName="firstDayOfWeek" value="5" />
        <SetProperty target="dc" propertyName="firstDayOfWeek" valueExpression="value=null" />
        <AssertPropertyValue target="dc" propertyName="firstDayOfWeek" value="0" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CalendarLayout - monthNames
==============================================================================
-->
<TestCase frequency="all" testID="CalendarLayout_monthNames_Default" description="Test default value." keywords="[Runtime Localization,CalendarLayout,monthNames]" >
    <setup>
        <ResetComponent className="mx.controls.DateChooser" target="dc" waitEvent="updateComplete" />
    </setup>
    <body>
        <AssertPropertyValue target="dc" propertyName="monthNames" value="January,February,March,April,May,June,July,August,September,October,November,December" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CalendarLayout_monthNames_Custom" description="Test custom value." keywords="[Runtime Localization,CalendarLayout,monthNames]" >
    <setup>
        <ResetComponent className="mx.controls.DateChooser" target="dc" />
    </setup>
    <body>
        <SetProperty target="dc" propertyName="monthNames" valueExpression="value=['A','B','C','D','E','F','G','H','I','J','K','L']" />
        <AssertPropertyValue target="dc" propertyName="monthNames" value="A,B,C,D,E,F,G,H,I,J,K,L" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CalendarLayout_monthNames_Null" description="Test null value." keywords="[Runtime Localization,CalendarLayout,monthNames]" >
    <setup>
        <ResetComponent className="mx.controls.DateChooser" target="dc" />
    </setup>
    <body>
        <SetProperty target="dc" propertyName="monthNames" valueExpression="value=null" />
        <AssertPropertyValue target="dc" propertyName="monthNames" value="January,February,March,April,May,June,July,August,September,October,November,December" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CalendarLayout_monthNames_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CalendarLayout,monthNames]" >
    <setup>
        <ResetComponent className="mx.controls.DateChooser" target="dc" />
    </setup>
    <body>
        <SetProperty target="dc" propertyName="monthNames" valueExpression="value=['A','B','C','D','E','F','G']" />
        <SetProperty target="dc" propertyName="monthNames" valueExpression="value=null" />
        <AssertPropertyValue target="dc" propertyName="monthNames" value="January,February,March,April,May,June,July,August,September,October,November,December" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CalendarLayout - monthSymbol
==============================================================================
-->
<TestCase frequency="all" testID="CalendarLayout_monthSymbol_Default" description="Test default value." keywords="[Runtime Localization,CalendarLayout,monthSymbol]" >
    <setup>
        <ResetComponent className="mx.controls.DateChooser" target="dc" waitEvent="updateComplete" />
    </setup>
    <body>
        <AssertPropertyValue target="dc" propertyName="monthSymbol" value="" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CalendarLayout_monthSymbol_Custom" description="Test custom value." keywords="[Runtime Localization,CalendarLayout,monthSymbol]" >
    <setup>
        <ResetComponent className="mx.controls.DateChooser" target="dc" />
    </setup>
    <body>
        <SetProperty target="dc" propertyName="monthSymbol" value="@" />
        <AssertPropertyValue target="dc" propertyName="monthSymbol" value="@" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CalendarLayout_monthSymbol_Null" description="Test null value." keywords="[Runtime Localization,CalendarLayout,monthSymbol]" >
    <setup>
        <ResetComponent className="mx.controls.DateChooser" target="dc" />
    </setup>
    <body>
        <SetProperty target="dc" propertyName="monthSymbol" valueExpression="value=null" />
        <AssertPropertyValue target="dc" propertyName="monthSymbol" value="" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CalendarLayout_monthSymbol_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CalendarLayout,monthSymbol]" >
    <setup>
        <ResetComponent className="mx.controls.DateChooser" target="dc" />
    </setup>
    <body>
        <SetProperty target="dc" propertyName="monthSymbol" value="@" />
        <SetProperty target="dc" propertyName="monthSymbol" valueExpression="value=null" />
        <AssertPropertyValue target="dc" propertyName="monthSymbol" value="" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
CalendarLayout - yearSymbol
==============================================================================
-->
<TestCase frequency="all" testID="CalendarLayout_yearSymbol_Default" description="Test default value." keywords="[Runtime Localization,CalendarLayout,yearSymbol]" >
    <setup>
        <ResetComponent className="mx.controls.DateChooser" target="dc" waitEvent="updateComplete" />
    </setup>
    <body>
        <AssertPropertyValue target="dc" propertyName="yearSymbol" value="" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CalendarLayout_yearSymbol_Custom" description="Test custom value." keywords="[Runtime Localization,CalendarLayout,yearSymbol]" >
    <setup>
        <ResetComponent className="mx.controls.DateChooser" target="dc" />
    </setup>
    <body>
        <SetProperty target="dc" propertyName="yearSymbol" value="@" />
        <AssertPropertyValue target="dc" propertyName="yearSymbol" value="@" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CalendarLayout_yearSymbol_Null" description="Test null value." keywords="[Runtime Localization,CalendarLayout,yearSymbol]" >
    <setup>
        <ResetComponent className="mx.controls.DateChooser" target="dc" />
    </setup>
    <body>
        <SetProperty target="dc" propertyName="yearSymbol" valueExpression="value=null" />
        <AssertPropertyValue target="dc" propertyName="yearSymbol" value="" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="CalendarLayout_yearSymbol_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,CalendarLayout,yearSymbol]" >
    <setup>
        <ResetComponent className="mx.controls.DateChooser" target="dc" />
    </setup>
    <body>
        <SetProperty target="dc" propertyName="yearSymbol" value="@" />
        <SetProperty target="dc" propertyName="yearSymbol" valueExpression="value=null" />
        <AssertPropertyValue target="dc" propertyName="yearSymbol" value="" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
DateBase - dayNamesLong
There is no point in calling ResetComponent on DateBase because the properties 
are static members.
==============================================================================
-->
<TestCase frequency="all" testID="DateBase_dayNamesLong_Default" description="Test default value." keywords="[Runtime Localization,DateBase,dayNamesLong]" >
    <body>
        <AssertMethodValue method="value=DateBase.dayNamesLong.toString()" value="Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateBase_dayNamesLong_Custom" description="Test custom value." keywords="[Runtime Localization,DateBase,dayNamesLong]" >
    <body>
        <RunCode code="DateBase.dayNamesLong=['1','2','3','4','5','6','7']" />
        <AssertMethodValue method="value=DateBase.dayNamesLong.toString()" value="1,2,3,4,5,6,7" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateBase_dayNamesLong_Null" description="Test null value." keywords="[Runtime Localization,DateBase,dayNamesLong]" >
    <body>
        <RunCode code="DateBase.dayNamesLong=null" />
        <AssertMethodValue method="value=DateBase.dayNamesLong.toString()" value="Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateBase_dayNamesLong_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,DateBase,dayNamesLong]" >
    <body>
        <RunCode code="DateBase.dayNamesLong=['1','2','3','4','5','6','7']" />
        <RunCode code="DateBase.dayNamesLong=null" />
        <AssertMethodValue method="value=DateBase.dayNamesLong.toString()" value="Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday" />
        <Pause timeout="1" />
    </body>
</TestCase>

<!--
==============================================================================
DateBase - dayNamesShort
There is no point in calling ResetComponent on DateBase because the properties 
are static members.
==============================================================================
-->
<TestCase frequency="all" testID="DateBase_dayNamesShort_Default" description="Test default value." keywords="[Runtime Localization,DateBase,dayNamesShort]" >
    <body>
        <AssertMethodValue method="value=DateBase.dayNamesShort.toString()" value="Sun,Mon,Tue,Wed,Thu,Fri,Sat" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateBase_dayNamesShort_Custom" description="Test custom value." keywords="[Runtime Localization,DateBase,dayNamesShort]" >
    <body>
        <RunCode code="DateBase.dayNamesShort=['1','2','3','4','5','6','7']" />
        <AssertMethodValue method="value=DateBase.dayNamesShort.toString()" value="1,2,3,4,5,6,7" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateBase_dayNamesShort_Null" description="Test null value." keywords="[Runtime Localization,DateBase,dayNamesShort]" >
    <body>
        <RunCode code="DateBase.dayNamesShort=null" />
        <AssertMethodValue method="value=DateBase.dayNamesShort.toString()" value="Sun,Mon,Tue,Wed,Thu,Fri,Sat" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateBase_dayNamesShort_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,DateBase,dayNamesShort]" >
    <body>
        <RunCode code="DateBase.dayNamesShort=['1','2','3','4','5','6','7']" />
        <RunCode code="DateBase.dayNamesShort=null" />
        <AssertMethodValue method="value=DateBase.dayNamesShort.toString()" value="Sun,Mon,Tue,Wed,Thu,Fri,Sat" />
        <Pause timeout="1" />
    </body>
</TestCase>
<!--
==============================================================================
DateBase - monthNamesLong
==============================================================================
-->
<TestCase frequency="all" testID="DateBase_monthNamesLong_Default" description="Test default value." keywords="[Runtime Localization,DateBase,monthNamesLong]" >
    <body>
        <AssertMethodValue method="value=DateBase.monthNamesLong.toString()" value="January,February,March,April,May,June,July,August,September,October,November,December" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateBase_monthNamesLong_Custom" description="Test custom value." keywords="[Runtime Localization,DateBase,monthNamesLong]" >
    <body>
        <RunCode code="DateBase.monthNamesLong=['1','2','3','4','5','6','7']" />
        <AssertMethodValue method="value=DateBase.monthNamesLong.toString()" value="1,2,3,4,5,6,7" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateBase_monthNamesLong_Null" description="Test null value." keywords="[Runtime Localization,DateBase,monthNamesLong]" >
    <body>
        <RunCode code="DateBase.monthNamesLong=null" />
        <AssertMethodValue method="value=DateBase.monthNamesLong.toString()" value="January,February,March,April,May,June,July,August,September,October,November,December" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateBase_monthNamesLong_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,DateBase,monthNamesLong]" >
    <body>
        <RunCode code="DateBase.monthNamesLong=['1','2','3','4','5','6','7']" />
        <RunCode code="DateBase.monthNamesLong=null" />
        <AssertMethodValue method="value=DateBase.monthNamesLong.toString()" value="January,February,March,April,May,June,July,August,September,October,November,December" />
        <Pause timeout="1" />
    </body>
</TestCase>
<!--
==============================================================================
DateBase - monthNamesShort
==============================================================================
-->
<TestCase frequency="all" testID="DateBase_monthNamesShort_Default" description="Test default value." keywords="[Runtime Localization,DateBase,monthNamesShort]" >
    <body>
        <AssertMethodValue method="value=DateBase.monthNamesShort.toString()" value="Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateBase_monthNamesShort_Custom" description="Test custom value." keywords="[Runtime Localization,DateBase,monthNamesShort]" >
    <body>
        <RunCode code="DateBase.monthNamesShort=['1','2','3','4','5','6','7']" />
        <AssertMethodValue method="value=DateBase.monthNamesShort.toString()" value="1,2,3,4,5,6,7" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateBase_monthNamesShort_Null" description="Test null value." keywords="[Runtime Localization,DateBase,monthNamesShort]" >
    <body>
        <RunCode code="DateBase.monthNamesShort=null" />
        <AssertMethodValue method="value=DateBase.monthNamesShort.toString()" value="Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateBase_monthNamesShort_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,DateBase,monthNamesShort]" >
    <body>
        <RunCode code="DateBase.monthNamesShort=['1','2','3','4','5','6','7']" />
        <RunCode code="DateBase.monthNamesShort=null" />
        <AssertMethodValue method="value=DateBase.monthNamesShort.toString()" value="Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec" />
        <Pause timeout="1" />
    </body>
</TestCase>
<!--
==============================================================================
DateBase - timeOfDay
==============================================================================
-->
<TestCase frequency="all" testID="DateBase_timeOfDay_Default" description="Test default value." keywords="[Runtime Localization,DateBase,timeOfDay]" >
    <body>
        <AssertMethodValue method="value=DateBase.timeOfDay.toString()" value="AM,PM" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateBase_timeOfDay_Custom" description="Test custom value." keywords="[Runtime Localization,DateBase,timeOfDay]" >
    <body>
        <RunCode code="DateBase.timeOfDay=['1','2']" />
        <AssertMethodValue method="value=DateBase.timeOfDay.toString()" value="1,2" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateBase_timeOfDay_Null" description="Test null value." keywords="[Runtime Localization,DateBase,timeOfDay]" >
    <body>
        <RunCode code="DateBase.timeOfDay=null" />
        <AssertMethodValue method="value=DateBase.timeOfDay.toString()" value="AM,PM" />
        <Pause timeout="1" />
    </body>
</TestCase>

<TestCase frequency="all" testID="DateBase_timeOfDay_ResetToNull" description="Test resetting to null value." keywords="[Runtime Localization,DateBase,timeOfDay]" >
    <body>
        <RunCode code="DateBase.timeOfDay=['1','2']" />
        <RunCode code="DateBase.timeOfDay=null" />
        <AssertMethodValue method="value=DateBase.timeOfDay.toString()" value="AM,PM" />
        <Pause timeout="1" />
    </body>
</TestCase>

</testCases>
</UnitTester>
