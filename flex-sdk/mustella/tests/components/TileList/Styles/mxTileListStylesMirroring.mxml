<UnitTester testDir="components/TileList/Styles/"
    xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:mx="library://ns.adobe.com/flex/mx"
    xmlns:s="library://ns.adobe.com/flex/spark"
    xmlns="*"
    testSWF="TileListMirroringBasic.mxml">

	<!-- this set of lines form a template that must be in each unit test -->
	<fx:Script>
		<![CDATA[
		public static function init(o:DisplayObject):void
		{
		}
		]]>
	</fx:Script>

	<fx:Metadata>
		<![CDATA[
			[Mixin]
		]]>
	</fx:Metadata>
	<!-- end of set of lines that must be in each unit test -->

	<fx:Script>
		<![CDATA[
			{
				import mx.core.FlexGlobals;
			}
		]]>
	</fx:Script>

    <testCases>

		<TestCase testID="mxTileList_Mirroring_as_default" keywords="[TileList, Mirroring, rtl]" description="Test layoutDirection/direction set to rtl in AS on TileList">
			<setup>
				<ResetComponent target="list_m1" className="comps.Custom_TileList_M" waitEvent="updateComplete"/>
			</setup>
			<body>
				<RunCode code="FlexGlobals.topLevelApplication.setLdRTL()" />
				<Pause timeout="20"/>
				<AssertStyleValue target="list_m1" styleName="layoutDirection" value="rtl"/>

				<RunCode code="FlexGlobals.topLevelApplication.setDRTL()" />
				<Pause timeout="20"/>
				<AssertStyleValue target="list_m1" styleName="direction" value="rtl"/>
				<SetProperty target="list_m1" propertyName="height" value="160" waitEvent="updateComplete" />
				<SetProperty target="list_m1" propertyName="width"  value="160" waitEvent="updateComplete" />
				<CompareBitmap target="list_m1" url="../Styles/Baselines/$testID.png" numColorVariances="10" ignoreMaxColorVariance="true"/>
			</body>
		</TestCase>

		<TestCase testID="mxTileList_Mirroring_default" keywords="[TileList, Mirroring, rtl]" description="Test layoutDirection/direction rtl on TileList">
			<setup>
				<ResetComponent target="list_m1" className="comps.Custom_TileList_M" waitEvent="updateComplete"/>
			</setup>
			<body>
				<AssertStyleValue target="list_m1" styleName="layoutDirection" value="ltr"/>
				<AssertStyleValue target="list_m1" styleName="direction" value="ltr"/>
				<SetStyle target="list_m1" styleName="layoutDirection" value="rtl" waitEvent="updateComplete"/>
				<AssertStyleValue target="list_m1" styleName="layoutDirection" value="rtl"/>
				<AssertStyleValue target="list_m1" styleName="direction" value="ltr"/>
				<SetProperty target="list_m1" propertyName="height" value="160" waitEvent="updateComplete" />
				<SetProperty target="list_m1" propertyName="width"  value="160" waitEvent="updateComplete" />
				<CompareBitmap target="list_m1" url="../Styles/Baselines/$testID_1.png" numColorVariances="10" ignoreMaxColorVariance="true"/>
				<SetStyle target="list_m1" styleName="direction" value="rtl" waitEvent="updateComplete"/>
				<SetProperty target="list_m1" propertyName="height" value="155" waitEvent="updateComplete" />
				<SetProperty target="list_m1" propertyName="width"  value="155" waitEvent="updateComplete" />
				<AssertStyleValue target="list_m1" styleName="direction" value="rtl"/>
				<AssertStyleValue target="list_m1" styleName="layoutDirection" value="rtl"/>
				<CompareBitmap target="list_m1" url="../Styles/Baselines/$testID_2.png" numColorVariances="10" ignoreMaxColorVariance="true"/>

			</body>
		</TestCase>


		<TestCase testID="mxTileList_Mirroring_mxml_changeDir" keywords="[TileList, Mirroring, rtl]" description="Test layoutDirection set to ltr at runtime on TileList">
			<setup>
				<ResetComponent target="list_m2" className="comps.Custom_TileList_M_RTL" waitEvent="updateComplete"/>
			</setup>
			<body>
				<SetProperty target="list_m2" propertyName="height" value="155" waitEvent="updateComplete" />
				<SetProperty target="list_m2" propertyName="width"  value="155" waitEvent="updateComplete" />
				<CompareBitmap target="list_m2" url="../Styles/Baselines/$testID_1.png" numColorVariances="10" ignoreMaxColorVariance="true"/>
				<SetStyle target="list_m2" styleName="layoutDirection" value="ltr" />
				<SetStyle target="list_m2" styleName="direction" value="ltr" />
				<AssertStyleValue target="list_m2" styleName="layoutDirection" value="ltr"/>
				<AssertStyleValue target="list_m2" styleName="direction" value="ltr"/>
				<SetProperty target="list_m2" propertyName="height" value="160" waitEvent="updateComplete" />
				<SetProperty target="list_m2" propertyName="width"  value="160" waitEvent="updateComplete" />
				<CompareBitmap target="list_m2" url="../Styles/Baselines/$testID_2.png" numColorVariances="10" ignoreMaxColorVariance="true"/>
			</body>
		</TestCase>

		<TestCase testID="mxTileList_Mirroring_keyboard1" keywords="[TileList, Mirroring, rtl]" description="Test keyboard navigation with layoutDirection rtl on TileList">
			<setup>
				<ResetComponent target="list_m1" className="comps.Custom_TileList_M" waitEvent="updateComplete"/>
				<SetStyle target="list_m1" styleName="layoutDirection" value="rtl" waitEvent="updateComplete"/>
			</setup>
			<body>
				<DispatchKeyEvent keys="[TAB]" waitEvent="focusIn" waitTarget="list_m1"/>

				<DispatchKeyEvent keys="[DOWN]" />
				<Pause timeout="100"/>
				<DispatchKeyEvent keys="[DOWN]" />
				<Pause timeout="100"/>

				<AssertPropertyValue target="list_m1" propertyName="selectedIndex" value="16"/>
				<AssertPropertyValue target="list_m1" propertyName="selectedItem" value="Q"/>
			</body>
		</TestCase>

		<TestCase testID="mxTileList_Mirroring_keyboard2" keywords="[TileList, Mirroring, rtl]" description="Test keyboard navigation with layoutDirection rtl on TileList">
			<setup>
				<ResetComponent target="list_m1" className="comps.Custom_TileList_M" waitEvent="updateComplete"/>
				<SetStyle target="list_m1" styleName="layoutDirection" value="rtl" waitEvent="updateComplete"/>
				<SetProperty target="list_m1" propertyName="selectedIndex" value="4" />
			</setup>
			<body>
				<DispatchKeyEvent keys="[TAB]" waitEvent="focusIn" waitTarget="list_m1"/>
				<DispatchKeyEvent keys="[UP]" />
				<Pause timeout="100"/>
				<DispatchKeyEvent keys="[UP]" />
				<Pause timeout="100"/>
				<AssertPropertyValue target="list_m1" propertyName="selectedIndex" value="17"/>
				<AssertPropertyValue target="list_m1" propertyName="selectedItem" value="R"/>
			</body>
		</TestCase>

		<TestCase testID="mxTileList_Mirroring_parentContainer1" keywords="[TileList, Mirroring, rtl]" description="Test setting layDirection on parentContainer of TileList">
			<setup>
				<ResetComponent target="myPanel3" className="comps.myCustomPanel_M" waitEvent="updateComplete"/>
				<SetStyle target="myPanel3" styleName="layoutDirection" value="rtl" waitEvent="updateComplete"/>
			</setup>
			<body>
				<AssertStyleValue target="myPanel3" styleName="layoutDirection" value="rtl"/>
				<SetProperty target="myPanel3" propertyName="height" value="150" waitEvent="updateComplete" />
				<SetProperty target="myPanel3" propertyName="width"  value="180" waitEvent="updateComplete" />
				<CompareBitmap target="myPanel3" url="../Styles/Baselines/$testID.png" numColorVariances="10" ignoreMaxColorVariance="true"/>
			</body>
		</TestCase>


		<TestCase testID="mxTileList_Mirroring_parentContainer3" keywords="[TileList, Mirroring, rtl]" description="Test setting layoutDirection/direction on parentContainer of TileList">
			<setup>
				<ResetComponent target="myPanel3" className="comps.myCustomPanel_M" waitEvent="updateComplete"/>
				<SetStyle target="myPanel3" styleName="direction" value="rtl" waitEvent="updateComplete"/>
				<SetStyle target="myPanel3" styleName="layoutDirection" value="rtl" waitEvent="updateComplete"/>
			</setup>
			<body>
				<AssertStyleValue target="myPanel3" styleName="direction" value="rtl"/>
				<AssertStyleValue target="myPanel3" styleName="layoutDirection" value="rtl"/>
				<SetProperty target="myPanel3" propertyName="height" value="160" waitEvent="updateComplete" />
				<SetProperty target="myPanel3" propertyName="width"  value="160" waitEvent="updateComplete" />

				<CompareBitmap target="myPanel3" url="../Styles/Baselines/$testID_1.png" numColorVariances="10" ignoreMaxColorVariance="true"/>

			</body>
		</TestCase>

		<TestCase testID="mxTileList_Mirroring_parentContainer4" keywords="[TileList, Mirroring, rtl]" description="Test setting styles and layoutDirection/direction on parentContainer of TileList">
			<setup>
				<ResetComponent target="myPanel3" className="comps.myCustomPanel_M" waitEvent="updateComplete"/>
				<SetStyle target="myPanel3" styleName="color" value="0x00DD00" waitEvent="updateComplete"/>
				<SetStyle target="myPanel3" styleName="fontSize" value="14" waitEvent="updateComplete"/>
				<SetStyle target="myPanel3" styleName="chromeColor" value="0x0000DD" waitEvent="updateComplete"/>
				<SetStyle target="myPanel3" styleName="direction" value="rtl" waitEvent="updateComplete"/>
				<SetStyle target="myPanel3" styleName="layoutDirection" value="rtl" waitEvent="updateComplete"/>
			</setup>
			<body>
				<AssertStyleValue target="myPanel3" styleName="direction" value="rtl"/>
				<AssertStyleValue target="myPanel3" styleName="layoutDirection" value="rtl"/>
				<AssertStyleValue target="myPanel3" styleName="color" value="0x00DD00" />
				<AssertStyleValue target="myPanel3" styleName="fontSize" value="14" />
				<AssertStyleValue target="myPanel3" styleName="chromeColor" value="0x0000DD" />
				<SetProperty target="myPanel3" propertyName="height" value="160" waitEvent="updateComplete" />
				<SetProperty target="myPanel3" propertyName="width"  value="160" waitEvent="updateComplete" />

				<CompareBitmap target="myPanel3" url="../Styles/Baselines/$testID_1.png" numColorVariances="10" ignoreMaxColorVariance="true"/>

			</body>
		</TestCase>

		<TestCase testID="mxTileList_Mirroring_selectedIndex" keywords="[TileList, Mirroring, rtl]" description="Test selectedIndex with layoutDirection/direction rtl on TileList">
			<setup>
				<ResetComponent target="list_m1" className="comps.Custom_TileList_M" waitEvent="updateComplete"/>
				<SetStyle target="list_m1" styleName="layoutDirection" value="rtl" waitEvent="updateComplete"/>
				<SetStyle target="list_m1" styleName="direction" value="rtl" waitEvent="updateComplete"/>
			</setup>
			<body>
				<AssertStyleValue target="list_m1" styleName="layoutDirection" value="rtl"/>
				<AssertStyleValue target="list_m1" styleName="direction" value="rtl"/>
				<SetProperty target="list_m1" propertyName="selectedIndex" value="2" />
				<AssertPropertyValue target="list_m1" propertyName="selectedIndex" value="2"/>
				<AssertPropertyValue target="list_m1" propertyName="selectedItem" value="C"/>
				<SetProperty target="list_m1" propertyName="height" value="160" waitEvent="updateComplete" />
				<SetProperty target="list_m1" propertyName="width"  value="160" waitEvent="updateComplete" />

				<CompareBitmap target="list_m1" url="../Styles/Baselines/$testID.png" numColorVariances="10" ignoreMaxColorVariance="true"/>
			</body>
		</TestCase>

		<TestCase testID="mxTileList_Mirroring_selectedItem" keywords="[TileList, Mirroring, rtl]" description="Test selectedIndex with layoutDirection/direction rtl on TileList">
			<setup>
				<ResetComponent target="list_m1" className="comps.Custom_TileList_M" waitEvent="updateComplete"/>
				<SetStyle target="list_m1" styleName="layoutDirection" value="rtl" waitEvent="updateComplete"/>
				<SetStyle target="list_m1" styleName="direction" value="rtl" waitEvent="updateComplete"/>
			</setup>
			<body>
				<AssertStyleValue target="list_m1" styleName="layoutDirection" value="rtl"/>
				<AssertStyleValue target="list_m1" styleName="direction" value="rtl"/>
				<SetProperty target="list_m1" propertyName="selectedItem" value="Y" waitEvent="valueCommit"/>
				<AssertPropertyValue target="list_m1" propertyName="selectedItem" value="Y"/>
				<AssertPropertyValue target="list_m1" propertyName="selectedIndex" value="24"/>
				<SetProperty target="list_m1" propertyName="height" value="160" waitEvent="updateComplete" />
				<SetProperty target="list_m1" propertyName="width"  value="160" waitEvent="updateComplete" />

				<CompareBitmap target="list_m1" url="../Styles/Baselines/$testID.png" numColorVariances="10" ignoreMaxColorVariance="true"/>
			</body>
		</TestCase>

		<TestCase testID="mxTileList_Mirroring_styles" keywords="[TileList, Mirroring, rtl]" description="Test styles with layoutDirection/direction rtl on TileList">
			<setup>
				<ResetComponent target="list_m1" className="comps.Custom_TileList_M" waitEvent="updateComplete"/>
				<SetStyle target="list_m1" styleName="color" value="0x00FF00" waitEvent="updateComplete"/>
				<SetStyle target="list_m1" styleName="fontSize" value="16" waitEvent="updateComplete"/>
				<SetStyle target="list_m1" styleName="chromeColor" value="0xDD0000" waitEvent="updateComplete"/>
				<SetStyle target="list_m1" styleName="layoutDirection" value="rtl" waitEvent="updateComplete"/>
				<SetStyle target="list_m1" styleName="direction" value="rtl" waitEvent="updateComplete"/>
			</setup>
			<body>
				<AssertStyleValue target="list_m1" styleName="layoutDirection" value="rtl"/>
				<AssertStyleValue target="list_m1" styleName="direction" value="rtl"/>
				<AssertStyleValue target="list_m1" styleName="color" value="0x00FF00"/>
				<AssertStyleValue target="list_m1" styleName="fontSize" value="16"/>
				<AssertStyleValue target="list_m1" styleName="chromeColor" value="0xDD0000"/>
				<SetProperty target="list_m1" propertyName="selectedItem" value="Y" waitEvent="valueCommit"/>
				<AssertPropertyValue target="list_m1" propertyName="selectedItem" value="Y" />
				<AssertPropertyValue target="list_m1" propertyName="selectedIndex" value="24"/>
				<SetProperty target="list_m1" propertyName="height" value="160" waitEvent="updateComplete" />
				<SetProperty target="list_m1" propertyName="width"  value="160" waitEvent="updateComplete" />

				<CompareBitmap target="list_m1" url="../Styles/Baselines/$testID_1.png" numColorVariances="3" ignoreMaxColorVariance="true"/>

				<SetStyle target="list_m1" styleName="layoutDirection" value="ltr" waitEvent="updateComplete"/>
				<SetStyle target="list_m1" styleName="direction" value="ltr" waitEvent="updateComplete"/>
				<AssertStyleValue target="list_m1" styleName="layoutDirection" value="ltr"/>
				<AssertStyleValue target="list_m1" styleName="direction" value="ltr"/>
				<AssertStyleValue target="list_m1" styleName="color" value="0x00FF00"/>
				<AssertStyleValue target="list_m1" styleName="fontSize" value="16"/>
				<AssertStyleValue target="list_m1" styleName="chromeColor" value="0xDD0000"/>
				<AssertPropertyValue target="list_m1" propertyName="selectedItem" value="Y"/>
				<AssertPropertyValue target="list_m1" propertyName="selectedIndex" value="24"/>
				<SetProperty target="list_m1" propertyName="height" value="155" waitEvent="updateComplete" />
				<SetProperty target="list_m1" propertyName="width"  value="155" waitEvent="updateComplete" />

				<CompareBitmap target="list_m1" url="../Styles/Baselines/$testID_3.png" numColorVariances="3" ignoreMaxColorVariance="true"/>
			</body>
		</TestCase>

		<TestCase testID="mxTileList_Mirroring_dragDrop1" keywords="[TileList, Mirroring, dragDrop, rtl]" description="Test dragDrop on TileList">
			<setup>
				<ResetComponent target="list_m1" className="comps.Custom_TileList_M" waitEvent="updateComplete"/>
			</setup>
			<body>
				<RunCode code="FlexGlobals.topLevelApplication.setLdRTL()" />
				<SetProperty target="list_m1" propertyName="dragEnabled" value="true"  />
				<SetProperty target="list_m1" propertyName="dropEnabled"  value="true"  />
				<AssertStyleValue target="list_m1" styleName="layoutDirection" value="rtl"/>

				<RunCode code="FlexGlobals.topLevelApplication.setDRTL()" />
				<SetProperty target="list_m1" propertyName="height" value="160" waitEvent="updateComplete" />
				<SetProperty target="list_m1" propertyName="width"  value="160" waitEvent="updateComplete" />
				<DispatchKeyEvent   keys="[TAB]"   waitEvent="focusIn" waitTarget="list_m1" />

				<DispatchMouseEvent  target="list_m1"  type="mouseOver" buttonDown="false" localX="20" localY="30"  waitTarget="list_m1" waitEvent="mouseOver"/>
				<DispatchMouseEvent  target="list_m1"  type="mouseDown" buttonDown="true"  localX="20" localY="30"  waitTarget="list_m1" waitEvent="mouseDown"/>
				<DispatchMouseEvent  target="list_m1"  type="mouseMove" buttonDown="true"  localX="20" localY="30" />
				<Pause timeout="20"/>
				<DispatchMouseEvent  target="list_m1"  type="mouseMove" buttonDown="true"  localX="20" localY="40" />
				<DispatchMouseEvent  target="list_m1"  type="mouseMove" buttonDown="true"  localX="20" localY="70" />
				<Pause timeout="20"/>
				<DispatchMouseEvent  target="list_m1"  type="mouseMove" buttonDown="true"  localX="20" localY="90" />
				<Pause timeout="20"/>
				<DispatchMouseEvent  target="list_m1"  type="mouseMove" buttonDown="true"  localX="30" localY="120" />
				<Pause timeout="20"/>
				<DispatchMouseEvent  target="list_m1"   type="mouseMove" buttonDown="true"  localX="30"  localY="65" />
				<DispatchMouseEvent  target="list_m1"   type="mouseMove" buttonDown="true"  localX="40"  localY="65" />
				<Pause timeout="20"/>
				<DispatchMouseEvent  target="list_m1"   type="mouseUp" localX="40" localY="65" waitTarget="list_m1" waitEvent="dragDrop" />
				<Pause timeout="100"/>

				<CompareBitmap target="list_m1" url="../Styles/Baselines/$testID.png" numColorVariances="10" ignoreMaxColorVariance="true"/>
			</body>
		</TestCase>

		<TestCase testID="mxTileList_Mirroring_dragDrop3" keywords="[TileList, Mirroring, dragDrop, rtl]" description="Test dragDrop on TileList">
			<setup>
				<ResetComponent target="list_m2" className="comps.Custom_TileList_M_RTL" waitEvent="updateComplete"/>
			</setup>
			<body>
				<SetProperty target="list_m2" propertyName="height" value="160" waitEvent="updateComplete" />
				<SetProperty target="list_m2" propertyName="width"  value="160" waitEvent="updateComplete" />
				<DispatchKeyEvent   keys="[TAB,TAB]"   waitEvent="focusIn" waitTarget="list_m2" />

				<DispatchMouseEvent  target="list_m2"  type="mouseOver" buttonDown="false" localX="20" localY="30"  waitTarget="list_m2" waitEvent="mouseOver"/>
				<DispatchMouseEvent  target="list_m2"  type="mouseDown" buttonDown="true"  localX="20" localY="30"  waitTarget="list_m2" waitEvent="mouseDown"/>
				<DispatchMouseEvent  target="list_m2"  type="mouseMove" buttonDown="true"  localX="20" localY="30" />
				<Pause timeout="20"/>
				<DispatchMouseEvent  target="list_m2"  type="mouseMove" buttonDown="true"  localX="20" localY="40" />
				<DispatchMouseEvent  target="list_m2"  type="mouseMove" buttonDown="true"  localX="20" localY="70" />
				<Pause timeout="20"/>
				<DispatchMouseEvent  target="list_m2"  type="mouseMove" buttonDown="true"  localX="20" localY="90" />
				<Pause timeout="20"/>
				<DispatchMouseEvent  target="list_m2"  type="mouseMove" buttonDown="true"  localX="30" localY="120" />
				<Pause timeout="20"/>
				<DispatchMouseEvent  target="list_m2"   type="mouseMove" buttonDown="true"  localX="30"  localY="65" />
				<DispatchMouseEvent  target="list_m2"   type="mouseMove" buttonDown="true"  localX="40"  localY="65" />
				<Pause timeout="20"/>
				<DispatchMouseEvent  target="list_m2"   type="mouseUp" localX="40" localY="65" waitTarget="list_m2" waitEvent="dragDrop" />
				<Pause timeout="100"/>

				<CompareBitmap target="list_m2" url="../Styles/Baselines/$testID.png" numColorVariances="10" ignoreMaxColorVariance="true"/>
			</body>
		</TestCase>
		<TestCase testID="mxTileList_Mirroring_dragDrop4" keywords="[TileList, Mirroring, dragDrop, rtl]" description="Test dragDrop on TileList">
			<setup>
				<ResetComponent target="list_m2" className="comps.Custom_TileList_M_RTL" waitEvent="updateComplete"/>
			</setup>
			<body>
				<SetProperty target="list_m2" propertyName="height" value="160" waitEvent="updateComplete" />
				<SetProperty target="list_m2" propertyName="width"  value="160" waitEvent="updateComplete" />
				<DispatchKeyEvent   keys="[TAB,TAB]"   waitEvent="focusIn" waitTarget="list_m2" />

				<DispatchMouseEvent  target="list_m2"  type="mouseOver" buttonDown="false" localX="40" localY="30"  waitTarget="list_m2" waitEvent="mouseOver"/>
				<DispatchMouseEvent  target="list_m2"  type="mouseDown" buttonDown="true"  localX="40" localY="30"  waitTarget="list_m2" waitEvent="mouseDown"/>
				<Pause timeout="20"/>
				<DispatchMouseEvent  target="list_m2"  type="mouseMove" buttonDown="true"  localX="40" localY="30" />
				<DispatchMouseEvent  target="list_m2"  type="mouseMove" buttonDown="true"  localX="60" localY="60" />
				<Pause timeout="20"/>
				<DispatchMouseEvent  target="list_m2"  type="mouseMove" buttonDown="true"  localX="80" localY="60" />
				<Pause timeout="100"/>
				<CompareBitmap target="list_m2" url="../Styles/Baselines/$testID.png" numColorVariances="20" ignoreMaxColorVariance="true"/>
			</body>
		</TestCase>
    </testCases>

</UnitTester>
