<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->

<UnitTester testDir="components/Label/events/"  xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" testSWF="Label_main.mxml">



	<!-- this set of lines form a template that must be in each unit test -->



	<mx:Script>

		<![CDATA[

		public static function init(o:DisplayObject):void

		{

		}			

		]]>

	</mx:Script>

	

	<mx:Metadata>

		<![CDATA[

			[Mixin]

		]]>

	</mx:Metadata>	

	

	<!-- end of set of lines that must be in each unit test -->

	

	<mx:Script>

		<![CDATA[

			import mx.controls.Label;

			import data.MyLabel;

			import data.ListDataAS;

			import mx.controls.List;

			import mx.effects.Fade;



			[Bindable]

			private var dpLabel:ListDataAS = new ListDataAS();



			[Bindable]

			private var dpData:Object = dpLabel.myData;



			private function createData(dgTarget:List): void

			{

				var newDP:ListDataAS = new ListDataAS();

				dgTarget.dataProvider = newDP.myData;

			}					

			

			[Bindable]

			private var myFade:Fade = new Fade();



		]]>

	</mx:Script>



	<testCases>

		<TestCase testID="dataChange_event_Label" description="Testing the dataChange event of Label" keywords="[dataChange, event, Label]">

			<setup>

				<ResetComponent target="myLabel" className="mx.controls.Label" waitEvent="updateComplete" waitTarget="myLabel"/>	

				<SetProperty target="myLabel" propertyName="data" value="{dpData[0].label}" waitEvent="updateComplete" waitTarget="myLabel"/>

			</setup>

			<body>

				<CompareBitmap url="../events/baselines/dataChange_before_event_Label.png" target="myLabel"/>

				<SetProperty target="myLabel" propertyName="data" value="{dpData[1].label}" waitEvent="updateComplete" waitTarget="myLabel"/>	

				<AssertEvent target="myLabel" eventName="dataChange" eventClass="mx.events::FlexEvent" timeout="1000"/>

				<AssertPropertyValue target="myLabel" propertyName="data" value="{dpData[1].label}"/>

				<CompareBitmap url="../events/baselines/dataChange_after_event_Label.png" target="myLabel"/>

			</body>

		</TestCase>



		<!--Testcase for manual test of effectEnd for Label-->

		<TestCase testID="effectEnd_event_Label" description="Test the effectEnd event of Label" keywords="[effectEnd, event, Label]">

			<setup>

				<ResetComponent target="myLabel" className="mx.controls.Label" waitEvent="updateComplete" waitTarget="myLabel"/>

				<SetProperty target="myLabel" propertyName="text" value="effectEnd Label"/>

				<SetStyle target="myLabel" styleName="rollOverEffect" value="{myFade}" waitEvent="updateComplete" waitTarget="myLabel"/>

			</setup>

			<body>

				<DispatchMouseEvent target="myLabel" localX="10" localY="10" type="rollOver" waitEvent="effectEnd" waitTarget="myLabel"/>

			</body>		

		</TestCase>

	

		<!--Testcase for manual test of effectStart for Label-->

		<TestCase testID="effectStart_event_Label" description="Test the effectStart event of Label" keywords="[effectStart, event, Label]">

			<setup>

				<ResetComponent target="myLabel" className="mx.controls.Label" waitEvent="updateComplete" waitTarget="myLabel"/>

				<SetProperty target="myLabel" propertyName="text" value="effectStart Label"/>

				<SetStyle target="myLabel" styleName="rollOverEffect" value="{myFade}" waitEvent="updateComplete" waitTarget="myLabel"/>

			</setup>

			<body>

				<DispatchMouseEvent target="myLabel" localX="10" localY="10" type="rollOver" waitEvent="effectStart" waitTarget="myLabel"/>

			</body>		

		</TestCase>



		<!--Test for manual test checking hide event for Label-->

		<TestCase testID="Checking_hide_Event_of_Label" keywords="[Label, hide, Event]" description="Ensure that the hide event gets triggered when visible is false for Label.">

			<setup>

				<ResetComponent target="myLabel" className="mx.controls.Label" waitEvent="updateComplete" waitTarget="myLabel"/>

				<SetProperty target="myLabel" propertyName="text" value="hide Label" waitEvent="updateComplete" waitTarget="myLabel"/>

			</setup>

			<body>

				<SetProperty target="myLabel" propertyName="visible" value="false" waitTarget="myLabel" waitEvent="hide"/>

			</body>

		</TestCase>



		<!--Test for manual test checking toolTipShow event of Label-->

		<TestCase testID="Checking_toolTipShow_Event_of_Label" keywords="[Label, toolTipHide, Event]" description="Ensure the toolTipHide event gets triggered.">

			<setup>

				<ResetComponent target="myLabel" className="mx.controls.Label" waitEvent="updateComplete" waitTarget="myLabel"/>

				<SetProperty target="myLabel" propertyName="toolTip" value="Label tool tip"/>

				<SetProperty target="myLabel" propertyName="text" value="Tool tip Label" waitEvent="updateComplete" waitTarget="myLabel"/>

			</setup>

			<body>

				<DispatchMouseEvent target="myLabel" localX="15" localY="1" type="mouseOver" waitEvent="toolTipShow" waitTarget="myLabel"/>	

			</body>

		</TestCase>



		<!--Testcase for manual test of move for Label-->

		<TestCase testID="Checking_move_event_of_Label" keywords="[Label, move, Event]" description="Make sure move event gets fired when Label moves">

			<setup>				

				<ResetComponent target="myLabel" className="mx.controls.Label" waitEvent="updateComplete" waitTarget="myLabel"/>

				<SetProperty target="myLabel" propertyName="x" value="50"/>

				<SetProperty target="myLabel" propertyName="text" value="Move Label" waitEvent="updateComplete" waitTarget="myLabel"/>

			</setup>

			<body>

				<SetProperty target="myLabel" propertyName="x" value="70" waitEvent="move" waitTarget="myLabel"/>

			</body>

		</TestCase>



		<!--Testcase for manual test of resize for Label-->

		<TestCase testID="Checking_resize_event_of_Label" keywords="[Label, resize, Event]" description="Make sure resize event gets fired when Label moves">

			<setup>				

				<ResetComponent target="myLabel" className="mx.controls.Label" waitEvent="updateComplete" waitTarget="myLabel"/>

				<SetProperty target="myLabel" propertyName="width" value="30"/>

				<SetProperty target="myLabel" propertyName="text" value="Resize Label" waitEvent="updateComplete" waitTarget="myLabel"/>

			</setup>

			<body>

				<SetProperty target="myLabel" propertyName="width" value="70" waitEvent="resize" waitTarget="myLabel"/>

			</body>

		</TestCase>



		

	</testCases>

</UnitTester>
