<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300">
	
	
	<fx:Script>
		<![CDATA[
			import flash.globalization.CurrencyParseResult;
			
			/* define function for component */		
			public function format(value:Object):String
			{
				return cfC.format(value);
			}
			
			public function parse(parseString:String):CurrencyParseResult
			{
				return cfC.parse(parseString);
			}
			
			/* define properties for cf component */
			public function get currencyISOCode():String
			{
				return cfC.currencyISOCode;
			}
			public function set currencyISOCode(value:String):void
			{
				cfC.currencyISOCode = value;
			}
			
			public function get currencySymbol():String
			{
				return cfC.currencySymbol;
			}
			public function set currencySymbol(value:String):void
			{
				cfC.currencySymbol = value;
			}
			
			public function get negativeCurrencyFormat():int
			{
				return cfC.negativeCurrencyFormat;
			}
			public function set negativeCurrencyFormat(value:int):void
			{
				cfC.negativeCurrencyFormat = value;
			}
			
			public function get positiveCurrencyFormat():int
			{
				return cfC.positiveCurrencyFormat;
			}
			public function set positiveCurrencyFormat(value:int):void
			{
				cfC.positiveCurrencyFormat = value;
			}
			
			public function get useCurrencySymbol():Boolean
			{
				return cfC.useCurrencySymbol;
			}
			public function set useCurrencySymbol(value:Boolean):void
			{
				cfC.useCurrencySymbol = value;
			}
			
			/* inherited properties */
			public function get lastOperationStatus():String
			{
				return cfC.lastOperationStatus;
			}
			
			public function get actualLocaleIDName():String
			{                   
				return cfC.actualLocaleIDName;
			}
			public function set locale(value:String):void
			{
				cfC.setStyle("locale",value);
			}
			
			public function get fractionalDigits():int
			{
				return cfC.fractionalDigits;
			}
			public function set fractionalDigits(value:int):void
			{
				cfC.fractionalDigits = value;
			}
			
			public function get groupingPattern():String
			{
				return cfC.groupingPattern;
			}
			public function set groupingPattern(value:String):void
			{
				cfC.groupingPattern = value;
			}
			
			public function get digitsType():uint
			{
				return cfC.digitsType;
			}
			public function set digitsType(value:uint):void
			{
				cfC.digitsType = value;
			}
			
			public function get decimalSeparator():String
			{
				return cfC.decimalSeparator;
			}
			public function set decimalSeparator(value:String):void
			{
				cfC.decimalSeparator = value;
			}
			
			public function get groupingSeparator():String
			{
				return cfC.groupingSeparator;
			}
			public function set groupingSeparator(value:String):void
			{
				cfC.groupingSeparator = value;
			}
			
			public function get negativeSymbol():String
			{
				return cfC.negativeSymbol;
			}
			public function set negativeSymbol(value:String):void
			{
				cfC.negativeSymbol = value;
			}
			
			public function get leadingZero():Boolean
			{
				return cfC.leadingZero;
			}
			public function set leadingZero(value:Boolean):void
			{
				cfC.leadingZero = value;
			}
			
			public function get trailingZeros():Boolean
			{
				return cfC.trailingZeros;
			}
			public function set trailingZeros(value:Boolean):void
			{
				cfC.trailingZeros = value;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:CurrencyFormatter id="cfC"/>
		
	</fx:Declarations>
	
	
</s:Group>