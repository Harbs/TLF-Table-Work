<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="1000" height="100%">
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		
		/* predefine style in case styleManager get a null object */
 		global {
			locale: 'en_US';
		}
		
		.myStyle {
			locale: 'en_US';
		}	 
		
		s|CurrencyFormatter {
			locale: 'en_US';
		}
		
 		#CFlocalIDSelector{
			locale:'en_US';
		} 
		
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import flash.globalization.*;
			import flash.utils.setTimeout;			
			import mx.styles.IStyleManager2;
			
			public var myStyleManager:IStyleManager2;
			
			public function testStyleManager(Object:String):void {
				
				myStyleManager = StyleManager.getStyleManager(this.moduleFactory);
				
				switch (Object)
				{
					//case 1 is using styleManger API to set styles using global Selector CSS style 
					case '1':
						if(myStyleManager.getStyleDeclaration("spark.formatters.CurrencyFormatter"))
						{
							myStyleManager.getStyleDeclaration("spark.formatters.CurrencyFormatter").clearStyle("locale");
						}
						myStyleManager.getStyleDeclaration("global").setStyle("locale", "fr_FR");
						break;
					
					//case 2 is using styleManger API to set styles using Type Selector CSS style
					case '2':						
						myStyleManager.getStyleDeclaration("spark.formatters.CurrencyFormatter").setStyle("locale", "ru_RU");
						break;
					
					//case 3 is using styleManger API to set styles using Class Selector CSS style
					case '3':
						myStyleManager.getStyleDeclaration(".myStyle").setStyle("locale", "ja_JP");
						break;
					
					//case 4 is using styleManger API to set styles using ID Selector CSS style
					case '4':
						myStyleManager.getStyleDeclaration("#CFlocalIDSelector").setStyle("locale", "zh_TW");
						break;	
					
					//case 5 is loading external Class Selector, Type Selector and ID selector style CSS declaration using styleManager API
					case '5':
						myStyleManager.loadStyleDeclarations("assets/CF_extStyle.swf");
						break;	
					
				} // end of switch
					
			}
			
			//this function is used to unload external type style with styleManager
			public function unloadStyle():void  {
				myStyleManager = StyleManager.getStyleManager(this.moduleFactory);
				myStyleManager.unloadStyleDeclarations("assets/CF_extStyle.swf", true);
			}

		]]>
	</fx:Script>

	<fx:Declarations>
		
		<s:CurrencyFormatter id="cf" />
		
		<!-- the CurrencyFormatter for testing Global selector -->
		<s:CurrencyFormatter id="cfGlobalSelector" />
		
		<!-- the CurrencyFormatter for testing type selector -->
		<s:CurrencyFormatter id="cfTypeSelector" />
		
		<!-- the CurrencyFormatter for testing class selector -->
		<s:CurrencyFormatter id="cfClassSelector"  styleName="myStyle"/>
		
		<!-- the CurrencyFormatter for testing ID selector -->
		<s:CurrencyFormatter id="CFlocalIDSelector" />
		
	</fx:Declarations>

</s:Application>
