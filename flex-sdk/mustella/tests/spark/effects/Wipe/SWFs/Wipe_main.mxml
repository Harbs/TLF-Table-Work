<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<mx:Application
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:mx="library://ns.adobe.com/flex/mx" 
    xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:trix="assets.*"
	width="600" height="600"
    backgroundColor="0xFFFFFF" 
	layout="absolute">

	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";

		@font-face{
		src: url("../../../../../Assets/Fonts/Open_Sans/OpenSans-Regular.ttf");
		fontFamily: vera0;
		embedAsCFF: false;
		}

		@font-face{
		src: url("../../../../../Assets/Fonts/Open_Sans/OpenSans-Regular.ttf");
		fontFamily: vera1;
		embedAsCFF: true;
		}
		@font-face{
		src: url("../../../../../Assets/Fonts/Open_Sans/OpenSans-Bold.ttf");
		fontFamily: vera1;
		embedAsCFF: true;
		}

		mx|Panel {
		fontFamily: vera0;
		color: blue;
		}
		
		global
		{
		fontFamily: vera0;
		}

		s|SkinnableComponent,s|RichText {
		fontFamily: vera1;
		fontLookup: "embeddedCFF";
		color: black;
		}		

	</fx:Style>
	
    <fx:Script>
        <![CDATA[
        import mx.core.UIComponent;
		import mx.controls.Image;
		import spark.effects.WipeDirection;
        
        //Pubs
        public var pauseQuanta:int = 500;
        
		
		[Embed(source='assets/wipe_clear.png')]
		public var wipeClearImage:Class;
		public var wipeClearBitmap:Bitmap = new wipeClearImage();


        private function Init():void
		{
		}
        
        public function ShowContainer(container:UIComponent):void
        {
            if(container == this.controls1)
                this.controls1.visible = true;
            else
                this.controls1.visible = false;
            
            if(container == this.controls2)
                this.controls2.visible = true;
            else
                this.controls2.visible = false;
            
            if(container == this.controls3)
                this.controls3.visible = true;
            else
                this.controls3.visible = false;
            
            if(container == this.controls4)
                this.controls4.visible = true;
            else
                this.controls4.visible = false;
            
            if(container == this.card)
                this.card.visible = true;
            else
                this.card.visible = false;
        }
        
        public function IsInRange(current:Number, low:Number, high:Number):Boolean
        {
            if((low <= current) && (high >= current))
            {
                return(true);
            }
            
            return(false);
        }
		]]>
    </fx:Script>

    <fx:Declarations>
        <s:Wipe id="e_Wipe" />

        <mx:Parallel id="p_fxWipe_fxAnimate">
            <s:Wipe
	        	bitmapFrom="{wipeClearBitmap.bitmapData}"
	        	direction="left" />
            <s:Animate>
                <s:motionPaths>
                    <s:SimpleMotionPath property="x" valueFrom="100" valueTo="200" />
                    <s:SimpleMotionPath property="y" valueFrom="100" valueTo="200" />
                </s:motionPaths>
            </s:Animate>
        </mx:Parallel>

        <mx:Parallel id="p_fxWipe_fxAnimateColor">
            <s:Wipe
	        	bitmapFrom="{wipeClearBitmap.bitmapData}"
	        	direction="left" />
            <s:AnimateColor colorFrom="0xFF0000" colorTo="0x0000FF"/>
        </mx:Parallel>

        <mx:Parallel id="p_fxWipe_fxFade">
            <s:Wipe
	        	bitmapFrom="{wipeClearBitmap.bitmapData}"
	        	direction="left" />
            <s:Fade alphaFrom="1" alphaTo="0" />
        </mx:Parallel>
        
        <mx:Parallel id="p_fxWipe_fxMove" >
            <s:Wipe
	        	bitmapFrom="{wipeClearBitmap.bitmapData}"
	        	direction="left" />
            <s:Move yFrom="100" yTo="200"/>
        </mx:Parallel>

        <mx:Parallel id="p_fxWipe_fxResize">
            <s:Wipe
	        	bitmapFrom="{wipeClearBitmap.bitmapData}"
	        	direction="left" />
            <s:Resize widthFrom="100" widthTo="200"/>
        </mx:Parallel>

        <mx:Parallel id="p_fxWipe_fxRotate">
            <s:Wipe
	        	bitmapFrom="{wipeClearBitmap.bitmapData}"
	        	direction="left" />
            <s:Rotate angleFrom="0" angleTo="90"/>
        </mx:Parallel>

        <mx:Parallel id="p_fxWipe_fxRotate3D">
            <s:Wipe
	        	bitmapFrom="{wipeClearBitmap.bitmapData}"
	        	direction="left" />
            <s:Rotate3D angleXFrom="0" angleXTo="90" angleYFrom="0" angleYTo="90" angleZFrom="0" angleZTo="90"/>
        </mx:Parallel>

    </fx:Declarations>

    <trix:Controls1 id="controls1" visible="true"
        x="100" y="10"
        height="570"/>

    <trix:Controls2 id="controls2" visible="false"
        x="100" y="10"/>

    <trix:Controls3 id="controls3" visible="false"
        x="100" y="10"/>

    <trix:Controls4 id="controls4" visible="false"
        x="100" y="10"/>

    <trix:Card id="card" visible="false"
		x="100" y="10"/>

</mx:Application>

