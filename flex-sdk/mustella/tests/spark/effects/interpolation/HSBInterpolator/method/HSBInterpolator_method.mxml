<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<UnitTester 
    testDir="spark/effects/interpolation/HSBInterpolator/method/"  
    xmlns:mx="http://www.adobe.com/2006/mxml" 
    xmlns="*" 
    testSWF="../SWFs/HSBInterpolator_main.mxml">

    <!-- this set of lines form a template that must be in each unit test -->
    <mx:Script>
        <![CDATA[
        import spark.effects.interpolation.*;
        
        public static function init(o:DisplayObject):void{}
        
        private function BadInterpolatorInput():Boolean
        {
            try
            {
                //This should throw an error
                application.testInterpolator.interpolate(.5, NaN, 1);
                
                //Return false since we were expecting the error
                return(false);
            }
            catch(error:Error)
            {
                //Return true since we got the expected error
                return(true);
            }
            
            return(false);
        }
        ]]>
    </mx:Script>

    <mx:Metadata>
        <![CDATA[
        [Mixin]
        ]]>
    </mx:Metadata>
    <!-- end of set of lines that must be in each unit test -->

    <testCases>

        <!-- Constructor -->
        <TestCase testID="HSBInterpolator_Constructor_Empty"  keywords="[HSBInterpolator, method, constructor]" description="Try to initialize the constructor with an empty arg.">
            <body>
                <RunCode code="application.testInterpolator = new HSBInterpolator();"/>
            </body>
        </TestCase>

        <!-- Interpolate -->
        <TestCase testID="HSBInterpolator_interpolate_SingleChannel"  keywords="[HSBInterpolator, method, interpolate]" description="Verify the interpolator returns values as expected for 1 channel.">
            <setup>
                <RunCode code="application.testInterpolator = new HSBInterpolator();" />
            </setup>
            <body>
                <AssertMethodValue method="value=application.testInterpolator.interpolate(.5, 0xFF0000, 0x000000);" value="0x7F3F3F" />
            </body>
        </TestCase>

        <TestCase testID="HSBInterpolator_interpolate_MultiChannel"  keywords="[HSBInterpolator, method, interpolate]" description="Verify the interpolator returns values as expected for 3 channels.">
            <setup>
                <RunCode code="application.testInterpolator = new HSBInterpolator();" />
            </setup>
            <body>
                <AssertMethodValue method="value=application.testInterpolator.interpolate(.5, 0xFF4488, 0x000000);" value="0x7F5061" />
            </body>
        </TestCase>

        <TestCase testID="HSBInterpolator_interpolate_NegativeFraction"  keywords="[HSBInterpolator, method, interpolate]" description="Verify the interpolator handles a negative fraction.">
            <setup>
                <RunCode code="application.testInterpolator = new HSBInterpolator();" />
            </setup>
            <body>
                <AssertMethodValue method="value=application.testInterpolator.interpolate(-.5, 0x444444, 0x000000);" value="0x666666" />
            </body>
        </TestCase>


        <!-- decrement -->
        <TestCase testID="HSBInterpolator_decrement" keywords="[HSBInterpolator, method, decrement]" description="Test the decrement() method.">
            <setup>
                <RunCode code="application.testInterpolator = new HSBInterpolator();" />
            </setup>
            <body>
                <AssertMethodValue method="value=application.testInterpolator.decrement(0xFF4488, 0x000001);" value="0xFEFEFE" />
            </body>
        </TestCase>
        <!-- increment -->
        <TestCase testID="HSBInterpolator_increment" keywords="[HSBInterpolator, method, increment]" description="Test the increment() method.">
            <setup>
                <RunCode code="application.testInterpolator = new HSBInterpolator();" />
            </setup>
            <body>
                <AssertMethodValue method="value=application.testInterpolator.increment(0xFF4488, 0x000001);" value="0x005CFF" />
            </body>
        </TestCase>        
        
    </testCases>

</UnitTester>
