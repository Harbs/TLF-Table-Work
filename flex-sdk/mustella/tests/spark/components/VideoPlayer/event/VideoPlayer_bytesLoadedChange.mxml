<UnitTester
    testDir="spark/components/VideoPlayer/event/"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns="*"
    testSWF="../SWFs/VideoPlayer_default_no_comp.mxml">

    <!--Default Script-->
    <mx:Script>
		<![CDATA[
			import org.osmf.events.LoadEvent;
			import org.osmf.events.LoaderEvent;
			import spark.components.VideoPlayer;
			import org.osmf.events.MediaPlayerStateChangeEvent;
			import org.osmf.media.MediaPlayerState;
			import mx.utils.ObjectUtil;

        	public static function init(o:DisplayObject):void{}
			
	      	public function testPlayerInit():void
	        {
			    application.testPlayer.addEventListener(MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE, mediaPlayerStateChangeHandler);
				application.testPlayer.addEventListener(LoadEvent.LOAD_STATE_CHANGE,loadStateEventHandler);
				application.testPlayer.addEventListener(LoadEvent.BYTES_LOADED_CHANGE,bytesLoadedChangeEventHandler);
				trace("******************* testPlayerInit*********************");
			}
			            
	        public function mediaPlayerStateChangeHandler(event:MediaPlayerStateChangeEvent):void
	        {
				trace("******************* current state: " + ObjectUtil.toString(event.state) );
	            if (event.state == MediaPlayerState.READY)
		            application.testPlayer.dispatchEvent(new Event("mediaPlayerIsReady"));
	            else if (event.state == MediaPlayerState.PLAYING)
		            application.testPlayer.dispatchEvent(new Event("mediaPlayerIsPlaying"));
				else if (event.state == MediaPlayerState.PAUSED)
					application.testPlayer.dispatchEvent(new Event("mediaPlayerIsPaused"));
				else if (event.state == MediaPlayerState.BUFFERING)
					application.testPlayer.dispatchEvent(new Event("mediaPlayerIsBuffering"));
				else if (event.state == MediaPlayerState.UNINITIALIZED)
					application.testPlayer.dispatchEvent(new Event("mediaPlayerIsUninitialized")); 
	        }
			
			public function loadStateEventHandler(event:LoadEvent):void
			{
				trace("******************* mediaPlayerIsLoading: " + ObjectUtil.toString(event.loadState) );
				if (event.loadState == LoadEvent.LOAD_STATE_CHANGE)
					application.testPlayer.dispatchEvent(new Event("mediaPlayerIsLoading"));
			}
			
			public function bytesLoadedChangeEventHandler(event:LoadEvent):void
			{
				trace("******************* mediaPlayerBytesLoadedChange: " + ObjectUtil.toString(event.bytes)+ ": " + LoadEvent.BYTES_LOADED_CHANGE);
				if (event.loadState == LoadEvent.BYTES_LOADED_CHANGE)
					application.testPlayer.dispatchEvent(new Event("mediaPlayerBytesLoadedChange"));
			}

		]]>
    </mx:Script>

    <!--Default Metadata-->
    <mx:Metadata><![CDATA[[Mixin]]]></mx:Metadata>

 <testCases>


        <!-- ********* -->
        <!-- STREAMING -->
        <!-- ********* -->

        <TestCase testID="VideoPlayer_bytesLoadedChange_setSource_S" keywords="[VideoPlayer, event, bytesLoadedChange]" description="Verify bytesLoadedChange is not raised when streaming video source is set.">
            <setup>
				<ResetComponent target="testPlayer" className="spark.components::VideoPlayer" waitTarget="testPlayer" waitEvent="updateComplete" />
				<RunCode code="testPlayerInit()"/>
				<RunCode code="application.testPlayer.source = application.streamingVid" waitTarget="testPlayer" waitEvent="mediaPlayerStateChange" />
            </setup>
            <body>
               <AssertNoEvent target="testPlayer" eventName="bytesLoadedChange" eventClass="org.osmf.events::LoadEvent"/>
            </body>
        </TestCase>

        <TestCase testID="VideoPlayer_bytesLoadedChange_changeSource_S" keywords="[VideoPlayer, event, bytesLoadedChange]" description="Verify bytesLoadedChange is not raised when video source is changed.">
            <setup>
                <ResetComponent target="testPlayer" className="spark.components::VideoPlayer" waitTarget="testPlayer" waitEvent="updateComplete" />
				<RunCode code="testPlayerInit()"/>
				<RunCode code="application.testPlayer.source = application.streamingVid" waitTarget="testPlayer" waitEvent="mediaPlayerStateChange" />
				<Pause timeout="2000"/>
				<RunCode code="application.testPlayer.source = application.streamingVid2" waitTarget="testPlayer" waitEvent="mediaPlayerStateChange" />
            </setup>
            <body>
                <AssertNoEvent target="testPlayer" eventName="bytesLoadedChange" eventClass="org.osmf.events::LoadEvent"/>
                <AssertNoEvent target="testPlayer" eventName="complete" eventClass="org.osmf.events::TimeEvent"/>
            </body>
        </TestCase>

        <TestCase testID="VideoPlayer_bytesLoadedChange_removeSource_S" keywords="[VideoPlayer, event, bytesLoadedChange]" description="Verify bytesLoadedChange is not raised when video source is removed.">
            <setup>
                <ResetComponent target="testPlayer" className="spark.components::VideoPlayer" waitTarget="testPlayer" waitEvent="updateComplete" />
				<RunCode code="testPlayerInit()"/>
				<RunCode code="application.testPlayer.source = application.streamingVid" waitTarget="testPlayer" waitEvent="mediaPlayerIsReady" />
				<Pause timeout="2000"/>
            </setup>
            <body>
				<RunCode code="application.testPlayer.source = null" />
				<AssertEvent target="testPlayer" eventName="bytesLoadedChange" eventClass="org.osmf.events::LoadEvent" numExpectedEvents="-1" />
				<AssertEvent target="testPlayer" eventName="mediaPlayerIsUninitialized" eventClass="flash.events::Event" numExpectedEvents="-1" />
				<AssertNoEvent target="testPlayer" eventName="complete" eventClass="org.osmf.events::TimeEvent"/>
            </body>
        </TestCase>

        <TestCase testID="VideoPlayer_bytesLoadedChange_autoDisplayFF_S" keywords="[VideoPlayer, event, bytesLoadedChange]" description="Verify bytesLoadedChange is not raised when autoDisplayFirstFrame is true and autoPlay is false.">
            <setup>
                <ResetComponent target="testPlayer" className="spark.components::VideoPlayer" waitTarget="testPlayer" waitEvent="updateComplete" />
                <RunCode code="application.testPlayer.autoPlay = false" />
		<RunCode code="application.testPlayer.source = application.streamingVid" waitTarget="testPlayer" waitEvent="mediaPlayerStateChange" />
            </setup>
            <body>
                <AssertNoEvent target="testPlayer" eventName="bytesLoadedChange" eventClass="org.osmf.events::LoadEvent"/>
            </body>
        </TestCase>


        <!-- *********** -->
        <!-- PROGRESSIVE -->
        <!-- *********** -->

        <TestCase testID="VideoPlayer_bytesLoadedChange_setSource_P" keywords="[VideoPlayer, event, bytesLoadedChange]" description="Verify bytesLoadedChange is raised when video source is set.">
            <setup>
                <ResetComponent target="testPlayer" className="spark.components::VideoPlayer" waitTarget="testPlayer" waitEvent="updateComplete" />
				<RunCode code="testPlayerInit()"/>
				<RunCode code="application.testPlayer.source = application.progressiveVid" waitTarget="testPlayer" waitEvent="mediaPlayerStateChange" />
            </setup>
            <body>
                <AssertEvent target="testPlayer" eventName="bytesLoadedChange" eventClass="org.osmf.events::LoadEvent"/>
            </body>
        </TestCase>

        <TestCase testID="VideoPlayer_bytesLoadedChange_changeSource_P" keywords="[VideoPlayer, event, bytesLoadedChange]" description="Verify bytesLoadedChange is raised when video source is changed.">
            <setup>
                <ResetComponent target="testPlayer" className="spark.components::VideoPlayer" waitTarget="testPlayer" waitEvent="updateComplete" />
				<RunCode code="testPlayerInit()"/>
				<RunCode code="application.testPlayer.source = application.progressiveVid" waitTarget="testPlayer" waitEvent="mediaPlayerIsReady" />
				<Pause timeout="2000"/>
				<RunCode code="application.testPlayer.source = application.progressiveVid2" waitTarget="testPlayer" waitEvent="mediaPlayerIsPlaying"/>
            </setup>
            <body>
				<AssertEvent target="testPlayer" eventName="bytesLoadedChange" eventClass="org.osmf.events::LoadEvent" numExpectedEvents="-1" />
                <AssertNoEvent target="testPlayer" eventName="complete" eventClass="org.osmf.events::TimeEvent"/>
            </body>
        </TestCase>

        <TestCase testID="VideoPlayer_bytesLoadedChange_removeSource_P" keywords="[VideoPlayer, event, bytesLoadedChange]" description="Verify bytesLoadedChange is raised when video source is removed.">
            <setup>
                <ResetComponent target="testPlayer" className="spark.components::VideoPlayer" waitTarget="testPlayer" waitEvent="updateComplete" />
				<RunCode code="testPlayerInit()"/>
				<RunCode code="application.testPlayer.source = application.progressiveVid" waitTarget="testPlayer" waitEvent="mediaPlayerIsReady" />
				<Pause timeout="2000"/>
            </setup>
            <body>
				<RunCode code="application.testPlayer.source = null" />
				<AssertEvent target="testPlayer" eventName="bytesLoadedChange" eventClass="org.osmf.events::LoadEvent" numExpectedEvents="-1" />
				<AssertNoEvent target="testPlayer" eventName="complete" eventClass="org.osmf.events::TimeEvent"/>
            </body>
        </TestCase>

        <TestCase testID="VideoPlayer_bytesLoadedChange_autoDisplayFF_P" keywords="[VideoPlayer, event, bytesLoadedChange]" description="Verify bytesLoadedChange is not raised when autoDisplayFirstFrame is true and autoPlay is false.">
            <setup>
                <ResetComponent target="testPlayer" className="spark.components::VideoPlayer" waitTarget="testPlayer" waitEvent="updateComplete" />
				<RunCode code="testPlayerInit()"/>
                <RunCode code="application.testPlayer.autoPlay = false" />
				<RunCode code="application.testPlayer.source = application.progressiveVid" waitTarget="testPlayer" waitEvent="mediaPlayerStateChange" />
            </setup>
            <body>
                <AssertNoEvent target="testPlayer" eventName="bytesLoadedChange" eventClass="org.osmf.events::LoadEvent"/>
            </body>
        </TestCase>

    </testCases>
</UnitTester>
