<UnitTester
    testDir="spark/components/VideoPlayer/property/"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns="*"
    testSWF="../SWFs/VideoPlayer_PWH.mxml">

    <!--Default Script-->
    <mx:Script>
        <![CDATA[
        import spark.components.VideoPlayer;
        public static function init(o:DisplayObject):void{}
        ]]>
    </mx:Script>
    <mx:Script>
        import org.osmf.display.*;
	  import org.osmf.events.MediaPlayerStateChangeEvent;
	  import org.osmf.media.MediaPlayerState;

	  private function testPlayerInit():void
        {
            application.testComp.testPlayer.addEventListener("mediaPlayerStateChange", mediaPlayerStateChangeHandler);
        }
            
        private function mediaPlayerStateChangeHandler(event:MediaPlayerStateChangeEvent):void
        {
            if (event.state == MediaPlayerState.READY)
                application.testComp.testPlayer.dispatchEvent(new Event("mediaPlayerIsReady"));
            else if (event.state == MediaPlayerState.PLAYING)
                application.testComp.testPlayer.dispatchEvent(new Event("mediaPlayerIsPlaying"));
            else if (event.state == MediaPlayerState.LOADING)
                application.testComp.testPlayer.dispatchEvent(new Event("mediaPlayerIsLoading"));
        }

    </mx:Script>
    <!--Default Metadata-->
    <mx:Metadata><![CDATA[[Mixin]]]></mx:Metadata>

    <!--Test Cases-->
    <testCases>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenT_Default"
        description="Test the default value of the pauseWhenHidden property is true."
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerStateChange" />
            </setup>
            <body>
                <AssertMethodValue method="value=application.testComp.testPlayer.pauseWhenHidden" value="true"/>
            </body>
        </TestCase>


        <!-- ********* -->
        <!-- PROGRESSIVE -->
        <!-- ********* -->

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenT_autoPlayTrue1"
        description="Test the pauseWhenHidden property when autoPlay is true: hide video - video pauses."
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerStateChange"/>
            </setup>
            <body>
		<!--<RunCode code="application.testComp.testPlayer.seek(5)" waitTarget="testComp.testPlayer" waitEvent="playheadUpdate"/>-->
            	<SetProperty target="testComp.testPlayer" propertyName="visible" value="false" waitTarget="testComp.testPlayer" waitEvent="hide" timeout="4000"/>
            	<!--<AssertPropertyValue target="testComp.testPlayer" propertyName="currentTime" value="5"/>-->
                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenT_autoPlayTrue2"
        description="Test the pauseWhenHidden property when autoPlay is true: hide video, show video - resumes playing at same spot."
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerStateChange"/>
            </setup>
            <body>
            	<AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="true"/>
            	<!--<RunCode code="application.testComp.testPlayer.seek(5)" waitTarget="testComp.testPlayer" waitEvent="playheadUpdate"/>-->

            	<SetProperty target="testComp.testPlayer" propertyName="visible" value="false" waitTarget="testComp.testPlayer" waitEvent="hide" timeout="3000"/>
                <SetProperty target="testComp.testPlayer" propertyName="visible" value="true" waitTarget="testComp.testPlayer" waitEvent="show" timeout="3000"/>

                <!--<AssertPropertyValue target="testComp.testPlayer" propertyName="currentTime" value="5"/>-->
                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="true"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenT_autoPlayTrue3"
        description="Test the pauseWhenHidden property when autoPlay is true: pause video, hide video - video stays paused."
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerStateChange"/>
            </setup>
            <body>
            	<AssertMethodValue method="value=application.testComp.testPlayer.pause()"/>
            	<SetProperty target="testComp.testPlayer" propertyName="visible" value="false" waitTarget="testComp.testPlayer" waitEvent="hide"/>
                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenT_autoPlayTrue4"
        description="Test the pauseWhenHidden property when autoPlay is true: pause video, hide video, show video - video plays"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerStateChange"/>
            </setup>
            <body>
            	<AssertMethodValue method="value=application.testComp.testPlayer.pause()"/>
            	<SetProperty target="testComp.testPlayer" propertyName="visible" value="false" waitTarget="testComp.testPlayer" waitEvent="hide"/>
                <SetProperty target="testComp.testPlayer" propertyName="visible" value="true" waitTarget="testComp.testPlayer" waitEvent="show"/>

                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>


        <TestCase
        testID="VideoPlayer_pauseWhenHiddenT_autoPlayFalse3"
        description="Test the pauseWhenHidden property when autoPlay is false: play video, hide video - pauses video"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
		<RunCode code="testPlayerInit()"/>
                <RunCode code="application.testComp.testPlayer.autoPlay = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerIsLoading"/>
            </setup>
            <body>
            	<RunCode code="application.testComp.testPlayer.play()" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerIsPlaying"/>
            	<AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="true"/>
            	<SetProperty target="testComp.testPlayer" propertyName="visible" value="false" waitTarget="testComp.testPlayer" waitEvent="hide"/>
                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenT_autoPlayFalse4"
        description="Test the pauseWhenHidden property when autoPlay is false: play video, hide video, show video -  remains paused at same spot"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
		<RunCode code="testPlayerInit()"/>
                <RunCode code="application.testComp.testPlayer.autoPlay = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerIsReady" />
            </setup>
            <body>
            	<AssertMethodValue method="value=application.testComp.testPlayer.play()"/>
            	<SetProperty target="testComp.testPlayer" propertyName="visible" value="false" waitTarget="testComp.testPlayer" waitEvent="hide"/>
            	<SetProperty target="testComp.testPlayer" propertyName="visible" value="true" waitTarget="testComp.testPlayer" waitEvent="show"/>
             	<AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>

	<TestCase
        testID="VideoPlayer_pauseWhenHiddenF_autoPlayTrue1"
        description="Test the pauseWhenHidden (False) property when autoPlay is true: hide video - video keeps playing."
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
                <RunCode code="application.testComp.testPlayer.pauseWhenHidden = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerStateChange"/>
            </setup>
            <body>
            	<AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="true"/>

            	<SetProperty target="testComp.testPlayer" propertyName="visible" value="false" waitTarget="testComp.testPlayer" waitEvent="hide"/>
                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="true"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenF_autoPlayTrue2"
        description="Test the pauseWhenHidden (False) property when autoPlay is true: hide video, show video - video keeps playing."
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
                <RunCode code="application.testComp.testPlayer.pauseWhenHidden = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerStateChange"/>
            </setup>
            <body>

            	<SetProperty target="testComp.testPlayer" propertyName="visible" value="false" waitTarget="testComp.testPlayer" waitEvent="hide"/>
                <SetProperty target="testComp.testPlayer" propertyName="visible" value="true" waitTarget="testComp.testPlayer" waitEvent="show"/>

                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="true"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenF_autoPlayTrue3"
        description="Test the pauseWhenHidden (False) property when autoPlay is true: pause video, hide video - video is paused."
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
		<RunCode code="testPlayerInit()"/>
                <RunCode code="application.testComp.testPlayer.pauseWhenHidden = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerIsReady"/>
            </setup>
            <body>
            	<AssertMethodValue method="value=application.testComp.testPlayer.pause()"/>
            	<SetProperty target="testComp.testPlayer" propertyName="visible" value="false" waitTarget="testComp.testPlayer" waitEvent="hide"/>
                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenF_autoPlayTrue4"
        description="Test the pauseWhenHidden (False) property when autoPlay is true: pause video, hide video, show video - video is paused"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
		<RunCode code="testPlayerInit()"/>
                <RunCode code="application.testComp.testPlayer.pauseWhenHidden = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerIsReady"/>
            </setup>
            <body>
            	<AssertMethodValue method="value=application.testComp.testPlayer.pause()"/>
            	<SetProperty target="testComp.testPlayer" propertyName="visible" value="false" waitTarget="testComp.testPlayer" waitEvent="hide"/>
                <SetProperty target="testComp.testPlayer" propertyName="visible" value="true" waitTarget="testComp.testPlayer" waitEvent="show"/>

                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenF_autoPlayTrue5"
        description="Test the pauseWhenHidden (False) property when autoPlay is true: stop video, hide video - video is stopped."
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
		<RunCode code="testPlayerInit()"/>
                <RunCode code="application.testComp.testPlayer.pauseWhenHidden = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerIsReady"/>
            </setup>
            <body>
            	<AssertMethodValue method="value=application.testComp.testPlayer.stop()"/>
            	<SetProperty target="testComp.testPlayer" propertyName="visible" value="false" waitTarget="testComp.testPlayer" waitEvent="hide"/>
                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenF_autoPlayTrue6"
        description="Test the pauseWhenHidden (False) property when autoPlay is true: stop video, hide video, show video - video is stopped"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
		<RunCode code="testPlayerInit()"/>
                <RunCode code="application.testComp.testPlayer.pauseWhenHidden = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerIsReady"/>
            </setup>
            <body>
            	<AssertMethodValue method="value=application.testComp.testPlayer.stop()"/>
            	<SetProperty target="testComp.testPlayer" propertyName="visible" value="false" waitTarget="testComp.testPlayer" waitEvent="hide" timeout="4000"/>
                <SetProperty target="testComp.testPlayer" propertyName="visible" value="true" waitTarget="testComp.testPlayer" waitEvent="show" timeout="4000"/>

                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenF_autoPlayFalse1"
        description="Test the pauseWhenHidden (False) property when autoPlay is false: hide video - video doesn't play"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
                <RunCode code="application.testComp.testPlayer.pauseWhenHidden = false"/>
                <RunCode code="application.testComp.testPlayer.autoPlay = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerStateChange"/>
            </setup>
            <body>
            	<SetProperty target="testComp.testPlayer" propertyName="visible" value="false" waitTarget="testComp.testPlayer" waitEvent="hide"/>
            	<Pause timeout="1000"/>
                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenF_autoPlayFalse2"
        description="Test the pauseWhenHidden (False) property when autoPlay is false: hide video, show video - video doesn't play"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
                <RunCode code="application.testComp.testPlayer.pauseWhenHidden = false"/>
                <RunCode code="application.testComp.testPlayer.autoPlay = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerStateChange"/>
            </setup>
            <body>
            	<SetProperty target="testComp.testPlayer" propertyName="visible" value="false" waitTarget="testComp.testPlayer" waitEvent="hide"/>
            	<SetProperty target="testComp.testPlayer" propertyName="visible" value="true" waitTarget="testComp.testPlayer" waitEvent="show"/>
            	<Pause timeout="1000"/>
                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenF_autoPlayFalse3"
        description="Test the pauseWhenHidden (False) property when autoPlay is false: play video, hide video - video plays"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
		<RunCode code="testPlayerInit()"/>
                <RunCode code="application.testComp.testPlayer.pauseWhenHidden = false"/>
                <RunCode code="application.testComp.testPlayer.autoPlay = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerIsReady"/>
            </setup>
            <body>
			<RunCode code="application.testComp.testPlayer.play()" waitTarget="testComp.testPlayer" waitEvent="currentTimeChange"/>
            	<Pause timeout="2000"/>
            	<SetProperty target="testComp.testPlayer" propertyName="visible" value="false" waitTarget="testComp.testPlayer" waitEvent="hide"/>
            	<Pause timeout="1000"/>
                  <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="true"/>
            </body>
        </TestCase>


        <TestCase
        testID="VideoPlayer_pauseWhenHiddenF_autoPlayFalse4"
        description="Test the pauseWhenHidden (False) property when autoPlay is false: play video, hide video, show video - video keeps playing"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
		<RunCode code="testPlayerInit()"/>
                <RunCode code="application.testComp.testPlayer.pauseWhenHidden = false"/>
                <RunCode code="application.testComp.testPlayer.autoPlay = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerIsReady"/>
            </setup>
            <body>
			<RunCode code="application.testComp.testPlayer.play()" waitTarget="testComp.testPlayer" waitEvent="currentTimeChange"/>
            	<Pause timeout="2000"/>
            	<SetProperty target="testComp.testPlayer" propertyName="visible" value="false" waitTarget="testComp.testPlayer" waitEvent="hide"/>
            	<SetProperty target="testComp.testPlayer" propertyName="visible" value="true" waitTarget="testComp.testPlayer" waitEvent="show"/>
		<Pause timeout="2000"/>
                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="true"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenT_autoPlayTrue_FS"
        description="Test the pauseWhenHidden (True) property when autoPlay is true with Full Screen: enter fullscreen - video is playing, exit fullscreen - video is playing"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerStateChange"/>
            </setup>
            <body>
            	<DispatchMouseClickEvent target="testComp.testPlayer.fullScreenButton" localX="5" localY="5" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
		<AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="true"/>
		<DispatchMouseClickEvent target="testComp.testPlayer.fullScreenButton" localX="5" localY="5" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
		<AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="true"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenT_autoPlayFalse_FS"
        description="Test the pauseWhenHidden (True) property when autoPlay is false with Full Screen: play video, enter fullscreen - video is playing, exit fullscreen - video is playing"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
		<RunCode code="testPlayerInit()"/>
                <RunCode code="application.testComp.testPlayer.autoPlay = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerIsReady"/>
            </setup>
            <body>
			<RunCode code="application.testComp.testPlayer.play()" waitTarget="testComp.testPlayer" waitEvent="currentTimeChange"/>
            	<Pause timeout="2000"/>
            	<DispatchMouseClickEvent target="testComp.testPlayer.fullScreenButton" localX="5" localY="5" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
		<AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="true"/>
		<DispatchMouseClickEvent target="testComp.testPlayer.fullScreenButton" localX="5" localY="5" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
		<Pause timeout="2000"/>
		<AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="true"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenF_autoPlayTrue_FS"
        description="Test the pauseWhenHidden (False) property when autoPlay is true with Full Screen: enter fullscreen - video is playing, exit fullscreen - video is playing"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
                <RunCode code="application.testComp.testPlayer.pauseWhenHidden = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerStateChange"/>
            </setup>
            <body>
            	<DispatchMouseClickEvent target="testComp.testPlayer.fullScreenButton" localX="5" localY="5" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
		<AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="true"/>
		<DispatchMouseClickEvent target="testComp.testPlayer.fullScreenButton" localX="5" localY="5" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
		<AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="true"/>
            </body>
        </TestCase>


        <TestCase
        testID="VideoPlayer_pauseWhenHiddenT_autoPlayTrue_Disabled1"
        description="Test the pauseWhenHidden (True) property when autoPlay is true: disable video - has no effect on disabled video natural behavior"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerStateChange" />
            </setup>
            <body>
            	<SetProperty target="testComp.testPlayer" propertyName="enabled" value="false" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>

                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenT_autoPlayTrue_Disabled2"
        description="Test the pauseWhenHidden (True) property when autoPlay is true: disable video, enable video - has no effect on disabled video natural behavior"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerStateChange" />
            </setup>
            <body>
            	<SetProperty target="testComp.testPlayer" propertyName="enabled" value="false" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
		<SetProperty target="testComp.testPlayer" propertyName="enabled" value="true" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenT_autoPlayFalse_Disabled1"
        description="Test the pauseWhenHidden (True) property when autoPlay is false:play video, disable video - has no effect on disabled video natural behavior"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
		<RunCode code="testPlayerInit()"/>
                <RunCode code="application.testComp.testPlayer.autoPlay = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerIsReady" />
            </setup>
            <body>
			<RunCode code="application.testComp.testPlayer.play()" waitTarget="testComp.testPlayer" waitEvent="currentTimeChange"/>
            	<SetProperty target="testComp.testPlayer" propertyName="enabled" value="false" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenT_autoPlayFalse_Disabled2"
        description="Test the pauseWhenHidden (True) property when autoPlay is false:play video, disable video, enable video - has no effect on disabled video natural behavior"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
		<RunCode code="testPlayerInit()"/>
                <RunCode code="application.testComp.testPlayer.autoPlay = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerIsReady" />
            </setup>
            <body>
			<RunCode code="application.testComp.testPlayer.play()" waitTarget="testComp.testPlayer" waitEvent="currentTimeChange"/>
            	<SetProperty target="testComp.testPlayer" propertyName="enabled" value="false" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
		<SetProperty target="testComp.testPlayer" propertyName="enabled" value="true" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenT_autoPlayFalse_Disabled3"
        description="Test the pauseWhenHidden (True) property when autoPlay is false: disable video - has no effect on disabled video natural behavior"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
                <RunCode code="application.testComp.testPlayer.autoPlay = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerStateChange" />
                <Pause timeout="2000"/>
            </setup>
            <body>
            	<SetProperty target="testComp.testPlayer" propertyName="enabled" value="false" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
            	<Pause timeout="3000"/>
                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenT_autoPlayFalse_Disabled4"
        description="Test the pauseWhenHidden (True) property when autoPlay is false: disable video, enable video - has no effect on disabled video natural behavior"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
                <RunCode code="application.testComp.testPlayer.autoPlay = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerStateChange" />
            </setup>
            <body>
            	<SetProperty target="testComp.testPlayer" propertyName="enabled" value="false" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
		<SetProperty target="testComp.testPlayer" propertyName="enabled" value="true" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
		<Pause timeout="500"/>
                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenF_autoPlayTrue_Disabled1"
        description="Test the pauseWhenHidden (False) property when autoPlay is true: disable video - has no effect on disabled video natural behavior"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
                <RunCode code="application.testComp.testPlayer.pauseWhenHidden = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerStateChange" />
            </setup>
            <body>
            	<SetProperty target="testComp.testPlayer" propertyName="enabled" value="false" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenF_autoPlayTrue_Disabled2"
        description="Test the pauseWhenHidden (False) property when autoPlay is true: disable video, enable video - has no effect on disabled video natural behavior"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
                <RunCode code="application.testComp.testPlayer.pauseWhenHidden = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerStateChange" />
            </setup>
            <body>
            	<SetProperty target="testComp.testPlayer" propertyName="enabled" value="false" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
		<SetProperty target="testComp.testPlayer" propertyName="enabled" value="true" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenF_autoPlayFalse_Disabled1"
        description="Test the pauseWhenHidden (False) property when autoPlay is false: play video, disable video - has no effect on disabled video natural behavior"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
		<RunCode code="testPlayerInit()"/>
                <RunCode code="application.testComp.testPlayer.pauseWhenHidden = false"/>
                <RunCode code="application.testComp.testPlayer.autoPlay = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerIsReady" />
            </setup>
            <body>
			<RunCode code="application.testComp.testPlayer.play()" waitTarget="testComp.testPlayer" waitEvent="currentTimeChange"/>
            	<SetProperty target="testComp.testPlayer" propertyName="enabled" value="false" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenF_autoPlayFalse_Disabled2"
        description="Test the pauseWhenHidden (False) property when autoPlay is false: play video, disable video, enable video -has no effect on disabled video natural behavior"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
		<RunCode code="testPlayerInit()"/>
                <RunCode code="application.testComp.testPlayer.pauseWhenHidden = false"/>
                <RunCode code="application.testComp.testPlayer.autoPlay = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerIsReady" />
            </setup>
            <body>
			<RunCode code="application.testComp.testPlayer.play()" waitTarget="testComp.testPlayer" waitEvent="currentTimeChange"/>
            	<Pause timeout="2000"/>
            	<SetProperty target="testComp.testPlayer" propertyName="enabled" value="false" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
		<SetProperty target="testComp.testPlayer" propertyName="enabled" value="true" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
		<Pause timeout="2000"/>
                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenF_autoPlayFalse_Disabled3"
        description="Test the pauseWhenHidden (False) property when autoPlay is false: disable video - has no effect on disabled video natural behavior"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
                <RunCode code="application.testComp.testPlayer.pauseWhenHidden = false"/>
                <RunCode code="application.testComp.testPlayer.autoPlay = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerStateChange" />
            </setup>
            <body>
            	<SetProperty target="testComp.testPlayer" propertyName="enabled" value="false" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
            	<Pause timeout="500"/>
                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>

        <TestCase
        testID="VideoPlayer_pauseWhenHiddenF_autoPlayFalse_Disabled4"
        description="Test the pauseWhenHidden (False) property when autoPlay is false: disable video, enable video - has no effect on disabled video natural behavior"
        keywords="[VideoPlayer, pauseWhenHidden]">
            <setup>
                <ResetComponent target="testComp" className="asset.VP_Comp" waitTarget="testComp" waitEvent="updateComplete"/>
                <RunCode code="application.testComp.testPlayer.pauseWhenHidden = false"/>
                <RunCode code="application.testComp.testPlayer.autoPlay = false"/>
                <RunCode code="application.testComp.testPlayer.source = application.progressiveVideoSRC" waitTarget="testComp.testPlayer" waitEvent="mediaPlayerStateChange" />
            </setup>
            <body>
            	<SetProperty target="testComp.testPlayer" propertyName="enabled" value="false" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
		<SetProperty target="testComp.testPlayer" propertyName="enabled" value="true" waitTarget="testComp.testPlayer" waitEvent="updateComplete"/>
		<Pause timeout="1000"/>
                <AssertPropertyValue target="testComp.testPlayer" propertyName="playing" value="false"/>
            </body>
        </TestCase>


    </testCases>
</UnitTester>
