<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<UnitTester testDir="gumbo/layout/HorizontalLayout/Properties/"  xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" testSWF="HorizontalLayout_Container_main.mxml">

	<!-- this set of lines form a template that must be in each unit test -->
	<mx:Script>
	<![CDATA[
	public static function init(o:DisplayObject):void
	{
	}
	]]>
	</mx:Script>
	<mx:Metadata>
	<![CDATA[
		[Mixin]
	]]>
	</mx:Metadata>
	<!-- end of set of lines that must be in each unit test -->

	<mx:Script>
	<![CDATA[

        [Bindable]
		private var textString:String = new String("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis nisi. Duis at turpis. Sed hendrerit porttitor est. Ut et eros. Nullam risus lacus, semper ut, gravida vitae, tempus ac, ligula. Nulla mollis. Curabitur neque nibh, pretium quis, hendrerit sit amet, molestie non, sem. Pellentesque quis arcu quis odio hendrerit aliquam. Nam ligula. Phasellus a nisi eu justo pretium accumsan. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Fusce ac metus. Nulla dignissim elit id dolor. Curabitur elit. Phasellus tempus nisi sed eros. Fusce ac ipsum sed ligula volutpat molestie. ");
		
	]]>
	</mx:Script>

	<testCases>
	
		<TestCase testID="HLayout_container_clipAndEnableScrolling_default" keywords="[HorizontalLayout,clipAndEnableScrolling]" description="Defaults to false." >
			<setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
			</setup>
			<body>
				<AssertPropertyValue propertyName="clipAndEnableScrolling" target="cont.contentGroup" value="false" />
			</body>
		</TestCase>

		<TestCase testID="HLayout_container_clipAndEnableScrolling_false" keywords="[HorizontalLayout,clipAndEnableScrolling]" description="No clipping occurs" >
		    <setup>
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
		    </setup>
		    <body>
				<SetProperty propertyName="height" value="200" target="cont"/>
				<SetProperty propertyName="width" value="200" target="cont" waitEvent="updateComplete" waitTarget="cont.skin"/>
	
				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(0)" value="200" waitEvent="updateComplete" waitTarget="cont.skin"/>
				<SetProperty propertyName="height" target="cont.getElementAt(0)" value="150" waitEvent="updateComplete" waitTarget="cont.skin"/>
				
				<AssertPropertyValue propertyName="width" value="200" target="cont"/>
				<AssertPropertyValue propertyName="height" value="200" target="cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="200" target="cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="150" target="cont.contentGroup"/>
				
				<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
		    </body>
		</TestCase>

		<TestCase testID="HLayout_container_clipAndEnableScrolling_true" keywords="[HorizontalLayout,clipAndEnableScrolling]" description="Clipping occurs">
		    <setup>
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
			</setup>
		    <body>
				<SetProperty propertyName="clipAndEnableScrolling" value="true" target="cont.contentGroup"/>
				<SetProperty propertyName="height" value="200" target="cont"/>
				<SetProperty propertyName="width" value="200" target="cont" waitEvent="updateComplete" waitTarget="cont.skin"/>

				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(0)" value="250" waitEvent="updateComplete" waitTarget="cont.skin"/>
				<SetProperty propertyName="height" target="cont.getElementAt(0)" value="250" waitEvent="updateComplete" waitTarget="cont.skin"/>

				<AssertPropertyValue propertyName="width" value="200" target="cont"/>
				<AssertPropertyValue propertyName="height" value="200" target="cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="250" target="cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="250" target="cont.contentGroup"/>
				
				<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
		    </body>
		</TestCase>

		 <TestCase testID="HLayout_container_clipAndEnableScrolling_true_scroller" keywords="[HorizontalLayout,clipAndEnableScrolling]" description="Clipping occurs">
		    <setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="cont"/>
		    </setup>
		    <body>
				<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.contentGroup"/>

				<RunCode code="application.addRect(application.myScroll.cont)"/>
				<SetProperty propertyName="width" target="myScroll.cont.getElementAt(0)" value="300" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
				<SetProperty propertyName="height" target="myScroll.cont.getElementAt(0)" value="300" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
				<SetProperty propertyName="height" value="215" target="myScroll.cont" waitEvent="updateComplete" />
				<SetProperty propertyName="width" value="215" target="myScroll.cont" waitEvent="updateComplete"/>

				<AssertPropertyValue propertyName="width" value="215" target="myScroll.cont"/>
				<AssertPropertyValue propertyName="height" value="215" target="myScroll.cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="300" target="myScroll.cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="300" target="myScroll.cont.contentGroup"/>
				<Pause timeout="1000"/>
				<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
		    </body>
		</TestCase>
        
        <TestCase testID="HLayout_container_clipAndEnableScrolling_parent_true_children_false" keywords="[HorizontalLayout,clipAndEnableScrolling]" description="Clipping occurs for parent but not child">
		    <setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
		    </setup>
		    <body>
	
				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(0)" value="600" waitEvent="updateComplete" waitTarget="cont.skin"/>
				<SetProperty propertyName="height" target="cont.getElementAt(0)" value="600" waitEvent="updateComplete" waitTarget="cont.skin"/>
				<SetProperty propertyName="height" value="550" target="cont" waitEvent="updateComplete" />
				<SetProperty propertyName="width" value="550" target="cont" waitEvent="updateComplete"/>
				
				<AssertPropertyValue propertyName="width" value="550" target="cont"/>
				<AssertPropertyValue propertyName="height" value="550" target="cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="600" target="cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="600" target="cont.contentGroup"/>
				
				<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
		    </body>
		</TestCase>
        
        <TestCase testID="HLayout_container_clipAndEnableScrolling_parent_false_children_true" keywords="[HorizontalLayout,clipAndEnableScrolling]" description="Clipping occurs for parent but not child">
		    <setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="cont"/>
		    </setup>
		    <body>
			
				<RunCode code="application.addRect(application.myScroll.cont)"/>
				<SetProperty propertyName="width" target="myScroll.cont.getElementAt(0)" value="200" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
				<SetProperty propertyName="height" target="myScroll.cont.getElementAt(0)" value="200" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
				<SetProperty propertyName="height" value="115" target="myScroll.cont" waitEvent="updateComplete" />
				<SetProperty propertyName="width" value="115" target="myScroll.cont" waitEvent="updateComplete"/>
				<Pause timeout="1000"/>
				
				<AssertPropertyValue propertyName="width" value="115" target="myScroll.cont"/>
				<AssertPropertyValue propertyName="height" value="115" target="myScroll.cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="200" target="myScroll.cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="200" target="myScroll.cont.contentGroup"/>
				
				<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
		    </body>
		</TestCase>
		
		<TestCase testID="HLayout_container_clipAndEnableScrolling_child_percent_lessThan" keywords="[HorizontalLayout,clipAndEnableScrolling]" description="Clipping occurs for parent but not child">
		    <setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="cont"/>
		    </setup>
		    <body>
				<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.contentGroup"/>			
				<RunCode code="application.addRect(application.myScroll.cont)"/>
				<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
				<SetProperty propertyName="percentWidth" target="myScroll.cont.getElementAt(0)" value="50" />
				<SetProperty propertyName="percentHeight" target="myScroll.cont.getElementAt(0)" value="50" />
				<SetProperty propertyName="percentWidth" target="myScroll.cont.getElementAt(1)" value="30" />
				<SetProperty propertyName="percentHeight" target="myScroll.cont.getElementAt(1)" value="30" />
				<SetProperty propertyName="height" value="400" target="myScroll.cont" waitEvent="updateComplete" />
				<SetProperty propertyName="width" value="400" target="myScroll.cont" waitEvent="updateComplete"/>

				<AssertPropertyValue propertyName="width" value="400" target="myScroll.cont"/>
				<AssertPropertyValue propertyName="height" value="400" target="myScroll.cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="326" target="myScroll.cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="200" target="myScroll.cont.contentGroup"/>

				<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
		    </body>
		</TestCase>
		
		<TestCase testID="HLayout_container_clipAndEnableScrolling_child_percent_greaterThan" keywords="[HorizontalLayout,clipAndEnableScrolling]" description="Clipping occurs for parent but not child">
		    <setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="cont"/>
		    </setup>
		    <body>
				<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.contentGroup"/>			
				<RunCode code="application.addRect(application.myScroll.cont)"/>
				<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
				<SetProperty propertyName="percentWidth" target="myScroll.cont.getElementAt(0)" value="110" />
				<SetProperty propertyName="percentHeight" target="myScroll.cont.getElementAt(0)" value="110" />
				<SetProperty propertyName="percentWidth" target="myScroll.cont.getElementAt(1)" value="120" />
				<SetProperty propertyName="percentHeight" target="myScroll.cont.getElementAt(1)" value="120" />
				<SetProperty propertyName="height" value="400" target="myScroll.cont" waitEvent="updateComplete" />
				<SetProperty propertyName="width" value="400" target="myScroll.cont" waitEvent="updateComplete"/>

				<AssertPropertyValue propertyName="width" value="400" target="myScroll.cont"/>
				<AssertPropertyValue propertyName="height" value="400" target="myScroll.cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="400" target="myScroll.cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="400" target="myScroll.cont.contentGroup"/>
				<AssertPropertyValue propertyName="width" value="188" target="myScroll.cont.getElementAt(0)"/>
				<AssertPropertyValue propertyName="height" value="400" target="myScroll.cont.getElementAt(0)"/>
				<AssertPropertyValue propertyName="width" value="206" target="myScroll.cont.getElementAt(1)"/>
				<AssertPropertyValue propertyName="height" value="400" target="myScroll.cont.getElementAt(1)"/>

				<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
		    </body>
		</TestCase>
		
		<TestCase testID="HLayout_container_firstIndexInView_default" keywords="[HorizontalLayout, firstIndexInView]" description="firstIndexInView -1 at start up">
			<setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
			</setup>
			<body>
				<AssertPropertyValue propertyName="firstIndexInView" value="-1" target="cont.layout"/>
			</body>
		</TestCase>
		
		<TestCase testID="HLayout_container_firstIndexInView_spark_components" keywords="[HorizontalLayout, firstIndexInView]" description="firstIndexInView with Spark children returns appropriate component">
			<setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
			</setup>
			<body>
				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>

				<AssertPropertyValue propertyName="width" value="192" target="cont"/>
				<AssertPropertyValue propertyName="height" value="80" target="cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="192" target="cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="80" target="cont.contentGroup"/>

				<AssertPropertyValue propertyName="firstIndexInView" value="0" target="cont.layout"/>
			</body>
		</TestCase>
		
		<TestCase testID="HLayout_container_firstIndexInView_spark_components_visible_false" keywords="[HorizontalLayout, firstIndexInView]" description="firstIndexInView with Spark children returns appropriate component">
			<setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
			</setup>
			<body>
				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				<SetProperty propertyName="visible" target="cont.getElementAt(0)" value="false" />
				
				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				
				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>

				<AssertPropertyValue propertyName="width" value="192" target="cont"/>
				<AssertPropertyValue propertyName="height" value="80" target="cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="192" target="cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="80" target="cont.contentGroup"/>

				<AssertPropertyValue propertyName="firstIndexInView" value="0" target="cont.layout"/>
			</body>
		</TestCase>
		
		<TestCase testID="HLayout_container_firstIndexInView_spark_all_includeInLayout_false" keywords="[HorizontalLayout, firstIndexInView]" description="firstIndexInView all children includeInLayout false">
			<setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
			</setup>
			<body>
				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				<SetProperty propertyName="includeInLayout" target="cont.getElementAt(0)" value="false" />

				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				<SetProperty propertyName="includeInLayout" target="cont.getElementAt(1)" value="false" />

				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="includeInLayout" target="cont.getElementAt(2)" value="false" />
				<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
			
				<AssertPropertyValue propertyName="width" value="0" target="cont"/>
				<AssertPropertyValue propertyName="height" value="0" target="cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="60" target="cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="80" target="cont.contentGroup"/>
				
				<AssertPropertyValue propertyName="firstIndexInView" value="-1" target="cont.layout"/>
				<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
			</body>
		</TestCase>
		
		<TestCase testID="HLayout_container_firstIndexInView_spark_components_includeInLayout" keywords="[HorizontalLayout, firstIndexInView]" description="firstIndexInView with Spark children returns appropriate component">
			<setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
			</setup>
			<body>
				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>

				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				<SetProperty propertyName="includeInLayout" target="cont.getElementAt(0)" value="false" />

				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
				
				<AssertPropertyValue propertyName="width" value="126" target="cont"/>
				<AssertPropertyValue propertyName="height" value="80" target="cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="126" target="cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="80" target="cont.contentGroup"/>

				<AssertPropertyValue propertyName="firstIndexInView" value="1" target="cont.layout"/>
			</body>
		</TestCase>
		
		<TestCase testID="HLayout_container_firstIndexInView_spark_components_includeInLayout_visible" keywords="[HorizontalLayout, firstIndexInView]" description="firstIndexInView with Spark children returns appropriate component">
			<setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
			</setup>
			<body>
				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				<SetProperty propertyName="includeInLayout" target="cont.getElementAt(0)" value="false"/>
				
				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				<SetProperty propertyName="visible" target="cont.getElementAt(0)" value="false" />

				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
				
				<AssertPropertyValue propertyName="width" value="126" target="cont"/>
				<AssertPropertyValue propertyName="height" value="80" target="cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="126" target="cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="80" target="cont.contentGroup"/>

				<AssertPropertyValue propertyName="firstIndexInView" value="1" target="cont.layout"/>
			</body>
		</TestCase>
		
		<TestCase testID="HLayout_container_firstIndexInView_spark_components_includeInLayout_firstTwo" keywords="[HorizontalLayout, firstIndexInView]" description="firstIndexInView with Spark children returns appropriate component">
			<setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
			</setup>
			<body>
				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				<SetProperty propertyName="includeInLayout" target="cont.getElementAt(0)" value="false"/>
				
				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				<SetProperty propertyName="includeInLayout" target="cont.getElementAt(1)" value="false" />

				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>

				<AssertPropertyValue propertyName="width" value="60" target="cont"/>
				<AssertPropertyValue propertyName="height" value="80" target="cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="60" target="cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="80" target="cont.contentGroup"/>

				<AssertPropertyValue propertyName="firstIndexInView" value="2" target="cont.layout"/>
			</body>
		</TestCase>
		
		<TestCase testID="HLayout_container_firstIndexInView_spark_container_includeInLayout_false" keywords="[HorizontalLayout, firstIndexInView]" description="firstIndexInView with container not in layout">
			<setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
			</setup>
			<body>
				<SetProperty propertyName="includeInLayout" target="cont" value="false"/>
				<AssertPropertyValue propertyName="firstIndexInView" value="-1" target="cont.layout"/>

				<AssertPropertyValue propertyName="width" value="0" target="cont"/>
				<AssertPropertyValue propertyName="height" value="0" target="cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="0" target="cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="0" target="cont.contentGroup"/>
			</body>
		</TestCase>
		
		<TestCase testID="HLayout_container_firstIndexInView_halo_components" keywords="[HorizontalLayout, firstIndexInView]" description="firstIndexInView with Spark children returns appropriate component">
			<setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
			</setup>
			<body>
				<RunCode code="application.addHaloCB(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				<RunCode code="application.addHaloCB(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				<RunCode code="application.addHaloCB(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>

				<AssertPropertyValue propertyName="width" value="192" target="cont"/>
				<AssertPropertyValue propertyName="height" value="80" target="cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="192" target="cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="80" target="cont.contentGroup"/>

				<AssertPropertyValue propertyName="firstIndexInView" value="0" target="cont.layout"/>
			</body>
		</TestCase>

		<TestCase testID="HLayout_container_firstIndexInView_halo_components_visible_false" keywords="[HorizontalLayout, firstIndexInView]" description="firstIndexInView with Spark children returns appropriate component">
			<setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
			</setup>
			<body>
				<RunCode code="application.addHaloCB(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				<SetProperty propertyName="visible" target="cont.getElementAt(0)" value="false" />

				<RunCode code="application.addHaloCB(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>

				<RunCode code="application.addHaloCB(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>

				<AssertPropertyValue propertyName="width" value="192" target="cont"/>
				<AssertPropertyValue propertyName="height" value="80" target="cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="192" target="cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="80" target="cont.contentGroup"/>

				<AssertPropertyValue propertyName="firstIndexInView" value="0" target="cont.layout"/>
			</body>
		</TestCase>

		<TestCase testID="HLayout_container_firstIndexInView_halo_all_includeInLayout_false" keywords="[HorizontalLayout, firstIndexInView]" description="firstIndexInView all children includeInLayout false">
			<setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
			</setup>
			<body>
				<RunCode code="application.addHaloCB(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				
				<RunCode code="application.addHaloCB(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				
				<RunCode code="application.addHaloCB(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(2)" value="90" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(2)" value="180" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
				
				<SetProperty propertyName="includeInLayout" target="cont.getElementAt(0)" value="false" />
				<SetProperty propertyName="includeInLayout" target="cont.getElementAt(1)" value="false" />
				<SetProperty propertyName="includeInLayout" target="cont.getElementAt(2)" value="false" />
				
				<Pause timeout="1000"/>
				
				<AssertPropertyValue propertyName="width" value="0" target="cont"/>
				<AssertPropertyValue propertyName="height" value="0" target="cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="222" target="cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="180" target="cont.contentGroup"/>

				<AssertPropertyValue propertyName="firstIndexInView" value="-1" target="cont.layout"/>
			</body>
		</TestCase>

		<TestCase testID="HLayout_container_firstIndexInView_halo_components_includeInLayout" keywords="[HorizontalLayout, firstIndexInView]" description="firstIndexInView with Spark children returns appropriate component">
			<setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
			</setup>
			<body>
				<RunCode code="application.addHaloCB(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>

				<RunCode code="application.addHaloCB(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				<SetProperty propertyName="includeInLayout" target="cont.getElementAt(0)" value="false" />

				<RunCode code="application.addHaloCB(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>

				<AssertPropertyValue propertyName="width" value="126" target="cont"/>
				<AssertPropertyValue propertyName="height" value="80" target="cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="126" target="cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="80" target="cont.contentGroup"/>

				<AssertPropertyValue propertyName="firstIndexInView" value="1" target="cont.layout"/>
			</body>
		</TestCase>

		<TestCase testID="HLayout_container_firstIndexInView_halo_components_includeInLayout_visible" keywords="[HorizontalLayout, firstIndexInView]" description="firstIndexInView with Spark children returns appropriate component">
			<setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
			</setup>
			<body>
				<RunCode code="application.addHaloCB(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				<SetProperty propertyName="includeInLayout" target="cont.getElementAt(0)" value="false"/>

				<RunCode code="application.addHaloCB(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				<SetProperty propertyName="visible" target="cont.getElementAt(0)" value="false" />

				<RunCode code="application.addHaloCB(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
				
				<AssertPropertyValue propertyName="width" value="126" target="cont"/>
				<AssertPropertyValue propertyName="height" value="80" target="cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="126" target="cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="80" target="cont.contentGroup"/>

				<AssertPropertyValue propertyName="firstIndexInView" value="1" target="cont.layout"/>
			</body>
		</TestCase>

		<TestCase testID="HLayout_container_firstIndexInView_halo_components_includeInLayout_firstTwo" keywords="[HorizontalLayout, firstIndexInView]" description="firstIndexInView with Spark children returns appropriate component">
			<setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
			</setup>
			<body>
				<RunCode code="application.addHaloCB(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>

				<RunCode code="application.addHaloCB(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>

				<RunCode code="application.addHaloCB(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>

				<SetProperty propertyName="includeInLayout" target="cont.getElementAt(0)" value="false"/>
				<SetProperty propertyName="includeInLayout" target="cont.getElementAt(1)" value="false" />
				
				<Pause timeout="500"/>
				
				<AssertPropertyValue propertyName="width" value="60" target="cont"/>
				<AssertPropertyValue propertyName="height" value="80" target="cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="60" target="cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="80" target="cont.contentGroup"/>

				<AssertPropertyValue propertyName="firstIndexInView" value="2" target="cont.layout"/>
			</body>
		</TestCase>

		<TestCase testID="HLayout_container_firstIndexInView_halo_container_includeInLayout_false" keywords="[HorizontalLayout, firstIndexInView]" description="firstIndexInView with container not in layout">
			<setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
			</setup>
			<body>
				<SetProperty propertyName="includeInLayout" target="cont" value="false"/>
				<AssertPropertyValue propertyName="firstIndexInView" value="-1" target="cont.layout"/>
			</body>
		</TestCase>
		
		<TestCase testID="HLayout_container_firstIndexInView_binding" keywords="[HorizontalLayout, firstIndexInView]" description="bind to firstIndexInView">
			<setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
			</setup>
			<body>
				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
				<AssertPropertyValue propertyName="label" target="bindBtn" value="0" />
				<SetProperty propertyName="includeInLayout" target="cont.getElementAt(0)" value="false" />

				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
				<AssertPropertyValue propertyName="label" target="bindBtn" value="1" />
				
				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
				<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>

				<AssertPropertyValue propertyName="firstIndexInView" value="1" target="cont.layout"/>
			</body>
		</TestCase>
		
		<TestCase testID="HLayout_container_gap_default" keywords="[HorizontalLayout,gap]" description="Default gap is 6">
		    <setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
		    </setup>
		    <body>
				<AssertPropertyValue propertyName="gap" value="6" target="cont.layout"/>
		    </body>
		</TestCase>
		
		<TestCase testID="HLayout_container_gap_negative" keywords="[HorizontalLayout,gap]" description="Negative gap, items overlap">
		    <setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
		    </setup>
		    <body>
		    	<SetProperty propertyName="gap" value="-10" target="cont.layout"/>
		    	<RunCode code="application.addSparkBtn(application.cont)"/>
		    	<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
				<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
				<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont"/>
				
				<AssertPropertyValue propertyName="width" value="180" target="cont"/>
				<AssertPropertyValue propertyName="height" value="80" target="cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="180" target="cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="80" target="cont.contentGroup"/>
				
				<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
		    </body>
		</TestCase>
		
		<TestCase testID="HLayout_container_gap_positive" keywords="[HorizontalLayout,gap]" description="Positive gap, items do not overlap">
		    <setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
		    </setup>
		    <body>
				<SetProperty propertyName="gap" value="30" target="cont.layout"/>
				<RunCode code="application.addSparkBtn(application.cont)"/>
				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
				<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
				<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont"/>
				
				<AssertPropertyValue propertyName="width" value="260" target="cont"/>
				<AssertPropertyValue propertyName="height" value="80" target="cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="260" target="cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="80" target="cont.contentGroup"/>

				<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
		    </body>
		</TestCase>
		
		<TestCase testID="HLayout_container_gap_change_runtime" keywords="[HorizontalLayout,gap]" description="Change gap at runtime, items lays out again">
		    <setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				<SetProperty propertyName="visible" value="false" target="myScroll"/>
		    </setup>
		    <body>
				<SetProperty propertyName="gap" value="30" target="cont.layout"/>
				<RunCode code="application.addSparkBtn(application.cont)"/>
				<RunCode code="application.addRect(application.cont)"/>
				<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
				<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
				<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont"/>
				<SetProperty propertyName="gap" value="50" target="cont.layout" waitEvent="updateComplete" waitTarget="cont.skin"/>
				
				<AssertPropertyValue propertyName="width" value="300" target="cont"/>
				<AssertPropertyValue propertyName="height" value="80" target="cont"/>
				<AssertPropertyValue propertyName="contentWidth" value="300" target="cont.contentGroup"/>
				<AssertPropertyValue propertyName="contentHeight" value="80" target="cont.contentGroup"/>
				
				<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
		    </body>
		</TestCase>
		
		<TestCase testID="HLayout_container_verticalAlign_default" keywords="[HorizontalLayout, verticalAlign]" description="default is top">
			<setup>
				<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
				<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
			</setup>
			<body>
				<AssertPropertyValue propertyName="verticalAlign" value="top" target="cont.layout"/>	
			</body>
		</TestCase>
		
			<TestCase testID="HLayout_container_verticalAlign_top" keywords="[HorizontalLayout, verticalAlign]" description="default is top">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="center"/>
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="width" target="cont.getElementAt(2)" value="100" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" value="200" target="cont" waitEvent="updateComplete" />
						<SetProperty propertyName="width" value="200" target="cont" waitEvent="updateComplete"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="242" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="617" target="cont.contentGroup"/>
		
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_verticalAlign_top_text_percent_50" keywords="[HorizontalLayout, verticalAlign]" description="top all children text percentage height">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="top" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="200" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="percentWidth" target="cont.getElementAt(2)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" value="200" target="cont" waitEvent="updateComplete"/>
						<SetProperty propertyName="width" value="200" target="cont" waitEvent="updateComplete"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="200" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="905" target="cont.contentGroup"/>
		
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_verticalAlign_top_text_percent_100" keywords="[HorizontalLayout, verticalAlign]" description="top all children text percentage height">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="top" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="percentWidth" target="cont.getElementAt(2)" value="100" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="height" value="200" target="cont" />
						<SetProperty propertyName="width" value="200" target="cont" waitEvent="updateComplete" waitTarget="cont.skin"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="200" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="905" target="cont.contentGroup"/>
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_verticalAlign_middle" keywords="[HorizontalLayout, verticalAlign]" description="middle">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="middle" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="middle"/>
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="width" target="cont.getElementAt(2)" value="100" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" value="200" target="cont" waitEvent="updateComplete" />
						<SetProperty propertyName="width" value="200" target="cont" waitEvent="updateComplete"/>
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="318" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="409" target="cont.contentGroup"/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_verticalAlign_middle_to_top" keywords="[HorizontalLayout, verticalAlign]" description="Change verticalAlign at runtime">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="middle" target="cont.hl"/>
						
						<RunCode code="application.addSparkBtn(application.cont)"/>
						
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" value="500" target="cont.getElementAt(2)" />
						<SetProperty propertyName="percentWidth" target="cont.getElementAt(2)" value="100" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						
						<SetProperty propertyName="height" value="200" target="cont" />
						<SetProperty propertyName="width" value="200" target="cont" />
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="verticalAlign" value="top" target="cont.hl" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="208" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="500" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_verticalAlign_middle_to_top_change_text" keywords="[HorizontalLayout, verticalAlign]" description="Change verticalAlign at runtime">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="middle" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="percentHeight" target="cont.getElementAt(2)" value="100" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" value="200" target="cont" />
						<SetProperty propertyName="width" value="200" target="cont" />
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="verticalAlign" value="top" target="cont.hl" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="New text string for re-laid out label.  The quick bcolumnn fox jumps over the lazy dog." waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="686" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
						
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_verticalAlign_middle_to_bottom" keywords="[HorizontalLayout, verticalAlign]" description="Change verticalAlign at runtime">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="middle" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="middle" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="percentHeight" target="cont.getElementAt(2)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" value="200" target="cont" />
						<SetProperty propertyName="width" value="200" target="cont" />
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="verticalAlign" value="bottom" target="cont.hl" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="3617" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="18" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_verticalAlign_middle_to_bottom_change_text" keywords="[HorizontalLayout, verticalAlign]" description="Change verticalAlign at runtime">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="middle" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="middle" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="percentWidth" target="cont.getElementAt(2)" value="100" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
					
						<SetProperty propertyName="height" value="200" target="cont" />
						<SetProperty propertyName="width" value="200" target="cont" />
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="verticalAlign" value="bottom" target="cont.hl" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="New text string for re-laid out label.  The quick bcolumnn fox jumps over the lazy dog." waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="208" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_verticalAlign_middle_to_contentJustify" keywords="[HorizontalLayout, verticalAlign]" description="Change verticalAlign at runtime">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="middle" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="middle" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="percentWidth" target="cont.getElementAt(2)" value="100" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="height" value="200" target="cont" />
						<SetProperty propertyName="width" value="200" target="cont" />
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="verticalAlign" value="contentJustify" target="cont.hl" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="208" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_verticalAlign_middle_to_contentJustify_change_text" keywords="[HorizontalLayout, verticalAlign]" description="Change verticalAlign at runtime">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="middle" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="middle" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="percentWidth" target="cont.getElementAt(2)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" value="200" target="cont" />
						<SetProperty propertyName="width" value="200" target="cont" />
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="verticalAlign" value="contentJustify" target="cont.hl" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="New text string for re-laid out label.  The quick bcolumnn fox jumps over the lazy dog." waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="208" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_verticalAlign_middle_to_justify" keywords="[HorizontalLayout, verticalAlign]" description="Change verticalAlign at runtime">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="middle" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="middle" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="percentWidth" target="cont.getElementAt(2)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" value="200" target="cont" />
						<SetProperty propertyName="width" value="200" target="cont" />
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="verticalAlign" value="justify" target="cont.hl" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="208" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_verticalAlign_middle_to_justify_change_text" keywords="[HorizontalLayout, verticalAlign]" description="Change verticalAlign at runtime">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="middle" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="middle" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="percentWidth" target="cont.getElementAt(2)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" value="200" target="cont" />
						<SetProperty propertyName="width" value="200" target="cont" />
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="verticalAlign" value="justify" target="cont.hl" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="New text string for re-laid out label.  The quick bcolumnn fox jumps over the lazy dog." waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="208" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_verticalAlign_justify" keywords="[HorizontalLayout, verticalAlign]" description="justify">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="justify" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="100" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" value="200" target="cont" waitEvent="updateComplete" />
						<SetProperty propertyName="width" value="200" target="cont" waitEvent="updateComplete"/>
						
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="3627" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="18" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
				
				
				<TestCase testID="HLayout_container_verticalAlign_justify_to_top" keywords="[HorizontalLayout, verticalAlign]" description="justify to top">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="justify" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="50" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="height" value="200" target="cont" waitEvent="updateComplete" />
						<SetProperty propertyName="width" value="200" target="cont" waitEvent="updateComplete"/>
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="verticalAlign" value="top" target="cont.hl" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="3627" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="80" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="18" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_scroll_verticalAlign_justify" keywords="[HorizontalLayout, verticalAlign]" description="justify to top">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="cont"/>
					</setup>
					<body>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.hl"/>
						<SetProperty propertyName="verticalAlign" value="justify" target="myScroll.cont.hl"/>
		
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<RunCode code="application.addSimpleText(application.myScroll.cont)"/>
						<SetStyle styleName="textAlign" target="myScroll.cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="myScroll.cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(2)" value="50" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
						<SetProperty propertyName="height" value="215" target="myScroll.cont" waitEvent="updateComplete" />
						<SetProperty propertyName="width" value="200" target="myScroll.cont" waitEvent="updateComplete"/>
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
				
				
				<TestCase testID="HLayout_container_scroll_verticalAlign_justify_to_top" keywords="[HorizontalLayout, verticalAlign]" description="justify to top">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="cont"/>
					</setup>
					<body>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.hl"/>
						<SetProperty propertyName="verticalAlign" value="justify" target="myScroll.cont.hl"/>
						
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<RunCode code="application.addSimpleText(application.myScroll.cont)"/>
						<SetStyle styleName="textAlign" target="myScroll.cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="myScroll.cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(2)" value="50" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
						<SetProperty propertyName="height" value="215" target="myScroll.cont" waitEvent="updateComplete" />
						<SetProperty propertyName="width" value="200" target="myScroll.cont" waitEvent="updateComplete"/>
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="verticalAlign" value="top" target="myScroll.cont.hl" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="height" value="215" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="3551" target="myScroll.cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="80" target="myScroll.cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_verticalAlign_justify_to_top_change_text" keywords="[HorizontalLayout, verticalAlign]" description="justify to top change text">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="justify" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="50" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="height" value="200" target="cont" waitEvent="updateComplete" />
						<SetProperty propertyName="width" value="200" target="cont" waitEvent="updateComplete"/>
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="verticalAlign" value="top" target="cont.hl" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="New text string for re-laid out label.  The quick bcolumnn fox jumps over the lazy dog." waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="696" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="80" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_verticalAlign_justify_to_bottom" keywords="[HorizontalLayout, verticalAlign]" description="justify to bottom">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="justify" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="50" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="height" value="200" target="cont" waitEvent="updateComplete" />
						<SetProperty propertyName="width" value="200" target="cont" waitEvent="updateComplete"/>
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="verticalAlign" value="bottom" target="cont.hl" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="3627" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="18" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_verticalAlign_justify_to_bottom_change_text" keywords="[HorizontalLayout, verticalAlign]" description="justify to bottom change text">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="justify" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="50" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="height" value="200" target="cont" waitEvent="updateComplete" />
						<SetProperty propertyName="width" value="200" target="cont" waitEvent="updateComplete"/>
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="verticalAlign" value="bottom" target="cont.hl" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="New text string for re-laid out label.  The quick bcolumnn fox jumps over the lazy dog." waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="696" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_verticalAlign_justify_childWidth_greater_parent" keywords="[HorizontalLayout, verticalAlign]" description="justify all children height of container">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="justify" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="250" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="250" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="100" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="height" value="200" target="cont" waitEvent="updateComplete" />
						<SetProperty propertyName="width" value="200" target="cont" waitEvent="updateComplete"/>
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="3817" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_verticalAlign_justify_childWidth_less_parent" keywords="[HorizontalLayout, verticalAlign]" description="justify all children height of container">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="justify" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="70" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" value="200" target="cont" />
						<SetProperty propertyName="width" value="200" target="cont" />
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="3617" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="18" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_verticalAlign_justify_childWidth_text_percent_70" keywords="[HorizontalLayout, verticalAlign]" description="text wraps appropriately">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="justify" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="percentWidth" target="cont.getElementAt(2)" value="70" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" value="200" target="cont" />
						<SetProperty propertyName="width" value="200" target="cont" />
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="208" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_verticalAlign_justify_childWidth_text_percent_100" keywords="[HorizontalLayout, verticalAlign]" description="text wraps appropriately">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="justify" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="percentWidth" target="cont.getElementAt(2)" value="100" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="height" value="200" target="cont" />
						<SetProperty propertyName="width" value="200" target="cont" />
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="208" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
						
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_verticalAlign_contentJustify" keywords="[HorizontalLayout, verticalAlign]" description="contentJustify">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="justify" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="contentJustify" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="100" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" value="200" target="cont" waitEvent="updateComplete" />
						<SetProperty propertyName="width" value="200" target="cont" waitEvent="updateComplete"/>
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="3627" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="18" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_verticalAlign_contentJustify_to_top" keywords="[HorizontalLayout, verticalAlign]" description="contentJustify to top">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="contentJustify" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="contentJustify" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="50" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="height" value="200" target="cont" waitEvent="updateComplete" />
						<SetProperty propertyName="width" value="200" target="cont" waitEvent="updateComplete"/>
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="verticalAlign" value="top" target="cont.hl" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="3627" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="80" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="18" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_verticalAlign_contentJustify_to_top_change_text" keywords="[HorizontalLayout, verticalAlign]" description="contentJustify to top change text">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="contentJustify" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="contentJustify" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="50" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="height" value="200" target="cont" waitEvent="updateComplete" />
						<SetProperty propertyName="width" value="200" target="cont" waitEvent="updateComplete"/>
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="verticalAlign" value="top" target="cont.hl" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="New text string for re-laid out label.  The quick bcolumnn fox jumps over the lazy dog." waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="696" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="80" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_verticalAlign_contentJustify_to_bottom" keywords="[HorizontalLayout, verticalAlign]" description="contentJustify to bottom">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="contentJustify" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="contentJustify" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="50" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="height" value="200" target="cont" waitEvent="updateComplete" />
						<SetProperty propertyName="width" value="200" target="cont" waitEvent="updateComplete"/>
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="verticalAlign" value="bottom" target="cont.hl" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="3627" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="18" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_verticalAlign_contentJustify_to_bottom_change_text" keywords="[HorizontalLayout, verticalAlign]" description="contentJustify to bottom change text">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="contentJustify" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="contentJustify" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="50" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="height" value="200" target="cont" waitEvent="updateComplete" />
						<SetProperty propertyName="width" value="200" target="cont" waitEvent="updateComplete"/>
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="verticalAlign" value="bottom" target="cont.hl" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="New text string for re-laid out label.  The quick bcolumnn fox jumps over the lazy dog." waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="696" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_verticalAlign_contentJustify_childWidth_greater_parent" keywords="[HorizontalLayout, verticalAlign]" description="contentJustify all children height of widest child">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="justify" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="250" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="250" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="contentJustify" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="100" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="height" value="200" target="cont" waitEvent="updateComplete" />
						<SetProperty propertyName="width" value="200" target="cont" waitEvent="updateComplete"/>
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="3817" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_verticalAlign_contentJustify_childWidth_less_parent" keywords="[HorizontalLayout, verticalAlign]" description="contentJustify all children height of widest child">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="contentJustify" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="70" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" value="200" target="cont" />
						<SetProperty propertyName="width" value="200" target="cont" />
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="3617" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="18" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_verticalAlign_contentJustify_text_percent_50" keywords="[HorizontalLayout, verticalAlign]" description="contentJustify all children text percentage height">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="contentJustify" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="percentWidth" target="cont.getElementAt(2)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" value="200" target="cont" />
						<SetProperty propertyName="width" value="200" target="cont" />
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="208" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="387" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_verticalAlign_contentJustify_text_percent_100" keywords="[HorizontalLayout, verticalAlign]" description="contentJustify all children text percentage height">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="contentJustify" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="percentWidth" target="cont.getElementAt(2)" value="100" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="height" value="200" target="cont" />
						<SetProperty propertyName="width" value="200" target="cont" />
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="208" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
						
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_verticalAlign_bottom" keywords="[HorizontalLayout, verticalAlign]" description="bottom">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="bottom" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetStyle styleName="textAlign" target="cont.getElementAt(2)" value="bottom" waitEvent="updateComplete" />
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="100" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" value="200" target="cont" waitEvent="updateComplete" />
						<SetProperty propertyName="width" value="200" target="cont" waitEvent="updateComplete"/>
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="3627" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="18" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_verticalAlign_bottom_text_percent_50" keywords="[HorizontalLayout, verticalAlign]" description="bottom all children text percentage height">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="bottom" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="200" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="percentWidth" target="cont.getElementAt(2)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" value="200" target="cont" />
						<SetProperty propertyName="width" value="200" target="cont" />
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
		
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="208" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_verticalAlign_bottom_text_percent_100" keywords="[HorizontalLayout, verticalAlign]" description="bottom all children text percentage height">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="verticalAlign" value="bottom" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="50" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<RunCode code="application.addSimpleText(application.cont)"/>
						<SetProperty propertyName="text" target="cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="percentWidth" target="cont.getElementAt(2)" value="100" waitEvent="updateComplete" waitTarget="cont.skin.contentGroup"/>
						<SetProperty propertyName="height" value="200" target="cont" />
						<SetProperty propertyName="width" value="200" target="cont" />
		
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont.skin"/>
						
						<AssertPropertyValue propertyName="width" value="200" target="cont"/>
						<AssertPropertyValue propertyName="height" value="200" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="208" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="200" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_scroll_horizontalScrollPosition_bind" keywords="[HorizontalLayout, horizontalScrollPosition]" description="binding to horizontalScrollPosition">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="cont"/>
					</setup>
					<body>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.hl"/>
						<SetProperty propertyName="height" value="70" target="myScroll.cont" waitEvent="updateComplete" />
						<SetProperty propertyName="width" value="70" target="myScroll.cont" waitEvent="updateComplete"/>
		
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(1)" value="140" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<RunCode code="application.addSimpleText(application.myScroll.cont)"/>
						<SetStyle styleName="textAlign" target="myScroll.cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="myScroll.cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(2)" value="190" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<SetProperty propertyName="horizontalScrollPosition" value="90" target="myScroll.cont.hl" waitEvent="updateComplete" waitTarget="bindScroll.skin"/>
						<AssertPropertyValue propertyName="label" value="90" target="bindScroll"/>
					</body>
				</TestCase>
				
				
				<TestCase testID="HLayout_container_lastIndexInView_default" keywords="[HorizontalLayout, lastIndexInView]" description="lastIndexInView -1 at start up">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<AssertPropertyValue propertyName="lastIndexInView" value="-1" target="cont.layout"/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_lastIndexInView_spark_components" keywords="[HorizontalLayout, lastIndexInView]" description="lastIndexInView with Spark children returns appropriate component">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
		
						<AssertPropertyValue propertyName="lastIndexInView" value="2" target="cont.layout"/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_lastIndexInView_spark_components_visible_false" keywords="[HorizontalLayout, lastIndexInView]" description="lastIndexInView with Spark children returns appropriate component">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
		
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
		
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="visible" target="cont.getElementAt(2)" value="false" />
		
						<AssertPropertyValue propertyName="lastIndexInView" value="2" target="cont.layout"/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_lastIndexInView_spark_all_includeInLayout_false" keywords="[HorizontalLayout, lastIndexInView]" description="lastIndexInView all children includeInLayout false">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
						<SetProperty propertyName="includeInLayout" target="cont.getElementAt(0)" value="false" />
		
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="includeInLayout" target="cont.getElementAt(1)" value="false" />
		
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="includeInLayout" target="cont.getElementAt(2)" value="false" />
						<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<AssertPropertyValue propertyName="lastIndexInView" value="-1" target="cont.layout"/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_lastIndexInView_spark_components_includeInLayout" keywords="[HorizontalLayout, lastIndexInView]" description="lastIndexInView with Spark children returns appropriate component">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
		
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
		
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="includeInLayout" target="cont.getElementAt(2)" value="false" />
						<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
		
						<AssertPropertyValue propertyName="lastIndexInView" value="1" target="cont.layout"/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_lastIndexInView_spark_components_includeInLayout_visible" keywords="[HorizontalLayout, lastIndexInView]" description="lastIndexInView with Spark children returns appropriate component">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
		
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="visible" target="cont.getElementAt(0)" value="false" />
		
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="includeInLayout" target="cont.getElementAt(2)" value="false"/>
						<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<AssertPropertyValue propertyName="lastIndexInView" value="1" target="cont.layout"/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_lastIndexInView_spark_components_includeInLayout_lastTwo" keywords="[HorizontalLayout, lastIndexInView]" description="lastIndexInView with Spark children returns appropriate component">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
		
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="includeInLayout" target="cont.getElementAt(1)" value="false" />
		
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="includeInLayout" target="cont.getElementAt(2)" value="false"/>
						<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
		
						<AssertPropertyValue propertyName="lastIndexInView" value="0" target="cont.layout"/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_lastIndexInView_spark_container_includeInLayout_false" keywords="[HorizontalLayout, lastIndexInView]" description="lastIndexInView with container not in layout">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="includeInLayout" target="cont" value="false"/>
						<AssertPropertyValue propertyName="lastIndexInView" value="-1" target="cont.layout"/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_lastIndexInView_halo_components" keywords="[HorizontalLayout, lastIndexInView]" description="lastIndexInView with Spark children returns appropriate component">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<RunCode code="application.addHaloCB(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
						<RunCode code="application.addHaloCB(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<RunCode code="application.addHaloCB(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
		
						<AssertPropertyValue propertyName="lastIndexInView" value="2" target="cont.layout"/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_lastIndexInView_halo_components_visible_false" keywords="[HorizontalLayout, lastIndexInView]" description="lastIndexInView with Spark children returns appropriate component">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<RunCode code="application.addHaloCB(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
		
						<RunCode code="application.addHaloCB(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
		
						<RunCode code="application.addHaloCB(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="visible" target="cont.getElementAt(2)" value="false" />
		
						<AssertPropertyValue propertyName="lastIndexInView" value="2" target="cont.layout"/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_lastIndexInView_halo_all_includeInLayout_false" keywords="[HorizontalLayout, lastIndexInView]" description="lastIndexInView all children includeInLayout false">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<RunCode code="application.addHaloCB(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
						<SetProperty propertyName="includeInLayout" target="cont.getElementAt(0)" value="false"/>
		
						<RunCode code="application.addHaloCB(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="includeInLayout" target="cont.getElementAt(1)" value="false" />
		
						<RunCode code="application.addHaloCB(application.cont)"/>
						<SetProperty propertyName="includeInLayout" target="cont.getElementAt(2)" value="false" />
						<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
		
						<AssertPropertyValue propertyName="lastIndexInView" value="-1" target="cont.layout"/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_lastIndexInView_halo_components_includeInLayout" keywords="[HorizontalLayout, lastIndexInView]" description="lastIndexInView with Spark children returns appropriate component">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<RunCode code="application.addHaloCB(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
		
						<RunCode code="application.addHaloCB(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
		
						<RunCode code="application.addHaloCB(application.cont)"/>
						<SetProperty propertyName="includeInLayout" target="cont.getElementAt(2)" value="false" />
						<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
		
						<AssertPropertyValue propertyName="lastIndexInView" value="1" target="cont.layout"/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_lastIndexInView_halo_components_includeInLayout_visible" keywords="[HorizontalLayout, lastIndexInView]" description="lastIndexInView with Spark children returns appropriate component">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<RunCode code="application.addHaloCB(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
		
						<RunCode code="application.addHaloCB(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="visible" target="cont.getElementAt(0)" value="false" />
		
						<RunCode code="application.addHaloCB(application.cont)"/>
						<SetProperty propertyName="includeInLayout" target="cont.getElementAt(2)" value="false"/>
						<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<AssertPropertyValue propertyName="lastIndexInView" value="1" target="cont.layout"/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_lastIndexInView_halo_components_includeInLayout_firstTwo" keywords="[HorizontalLayout, lastIndexInView]" description="lastIndexInView with Spark children returns appropriate component">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<RunCode code="application.addHaloCB(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
		
						<RunCode code="application.addHaloCB(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="includeInLayout" target="cont.getElementAt(1)" value="false" />
		
						<RunCode code="application.addHaloCB(application.cont)"/>
						<SetProperty propertyName="includeInLayout" target="cont.getElementAt(2)" value="false"/>
						<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
		
						<AssertPropertyValue propertyName="lastIndexInView" value="0" target="cont.layout"/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_lastIndexInView_halo_container_includeInLayout_false" keywords="[HorizontalLayout, lastIndexInView]" description="lastIndexInView with container not in layout">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<SetProperty propertyName="includeInLayout" target="cont" value="false"/>
						<AssertPropertyValue propertyName="lastIndexInView" value="-1" target="cont.layout"/>
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_lastIndexInView_binding" keywords="[HorizontalLayout, lastIndexInView]" description="bind to lastIndexInView">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
					</setup>
					<body>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(0)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(0)"/>
						<AssertPropertyValue propertyName="label" target="bindBtn" value="0" />
						<SetProperty propertyName="includeInLayout" target="cont.getElementAt(0)" value="false" />
		
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(1)"/>
						<AssertPropertyValue propertyName="label" target="lastViewBtn" value="1" />
		
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(2)" value="60" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
						<SetProperty propertyName="height" target="cont.getElementAt(2)" value="80" waitEvent="updateComplete" waitTarget="cont.getElementAt(2)"/>
		
						<AssertPropertyValue propertyName="label" target="lastViewBtn" value="2" />				
						<AssertPropertyValue propertyName="lastIndexInView" value="2" target="cont.layout"/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_paddingBottom_default" keywords="[HorizontalLayout,paddingBottom]" description="default 0">
				    <setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				    </setup>
				    <body>
						<AssertPropertyValue propertyName="paddingBottom" value="0" target="cont.layout"/>
						<AssertPropertyValue propertyName="width" value="0" target="cont"/>
						<AssertPropertyValue propertyName="height" value="0" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="0" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="0" target="cont.contentGroup"/>
				   </body>
				</TestCase>
						
				<TestCase testID="HLayout_container_paddingTop_default" keywords="[HorizontalLayout,paddingTop]" description="default 0">
				    <setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				    </setup>
				    <body>
						<AssertPropertyValue propertyName="paddingTop" value="0" target="cont.layout"/>
						<AssertPropertyValue propertyName="width" value="0" target="cont"/>
						<AssertPropertyValue propertyName="height" value="0" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="0" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="0" target="cont.contentGroup"/>			
				   </body>
				</TestCase>
						
						
				<TestCase testID="HLayout_container_paddingLeft_default" keywords="[HorizontalLayout,paddingLeft]" description="default 0">
				    <setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				    </setup>
				    <body>
						<AssertPropertyValue propertyName="width" value="0" target="cont"/>
						<AssertPropertyValue propertyName="height" value="0" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="0" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="0" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="paddingLeft" value="0" target="cont.layout"/>
				   </body>
				</TestCase>
						
				<TestCase testID="HLayout_container_paddingRight_default" keywords="[HorizontalLayout,paddingLeft]" description="default 0">
				    <setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
				    </setup>
				    <body>
						<AssertPropertyValue propertyName="width" value="0" target="cont"/>
						<AssertPropertyValue propertyName="height" value="0" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="0" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="0" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="paddingRight" value="0" target="cont.layout"/>
				   </body>
				</TestCase>
				
				<TestCase testID="HLayout_container_paddingBottom_positive" keywords="[HorizontalLayout,paddingBottom]" description="paddingBottom space at the bottom">
				    <setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
				    </setup>
				    <body>
						<SetProperty propertyName="paddingBottom" value="30" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont"/>
						<AssertPropertyValue propertyName="width" value="212" target="cont"/>
						<AssertPropertyValue propertyName="height" value="110" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="212" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="110" target="cont.contentGroup"/>
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
				    </body>
				</TestCase>
				
				<TestCase testID="HLayout_container_paddingTop_positive" keywords="[HorizontalLayout,paddingTop]" description="paddingTop space at top">
				    <setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
				    </setup>
				    <body>
						<SetProperty propertyName="paddingTop" value="30" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont"/>
						<AssertPropertyValue propertyName="width" value="212" target="cont"/>
						<AssertPropertyValue propertyName="height" value="110" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="212" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="110" target="cont.contentGroup"/>
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
				    </body>
				</TestCase>
				
				<TestCase testID="HLayout_container_paddingLeft_positive" keywords="[HorizontalLayout,paddingLeft]" description="paddingLeft space at top">
				    <setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
				    </setup>
				    <body>
						<SetProperty propertyName="paddingLeft" value="30" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont"/>
						<AssertPropertyValue propertyName="width" value="242" target="cont"/>
						<AssertPropertyValue propertyName="height" value="80" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="242" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="80" target="cont.contentGroup"/>
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
				    </body>
				</TestCase>
						
				<TestCase testID="HLayout_container_paddingRight_positive" keywords="[HorizontalLayout,paddingLeft]" description="paddingLeft space at top">
				    <setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
				    </setup>
				    <body>
						<SetProperty propertyName="paddingRight" value="30" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont"/>
						<AssertPropertyValue propertyName="width" value="242" target="cont"/>
						<AssertPropertyValue propertyName="height" value="80" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="242" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="80" target="cont.contentGroup"/>			
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
				    </body>
				</TestCase>
				
				<TestCase testID="HLayout_container_paddingBottom_negative" keywords="[HorizontalLayout,paddingBottom]" description="paddingBottom space at the bottom">
				    <setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
				    </setup>
				    <body>
						<SetProperty propertyName="paddingBottom" value="-20" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont"/>
						<AssertPropertyValue propertyName="width" value="212" target="cont"/>
						<AssertPropertyValue propertyName="height" value="60" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="212" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="60" target="cont.contentGroup"/>
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
				    </body>
				</TestCase>
		
				<TestCase testID="HLayout_container_paddingTop_negative" keywords="[HorizontalLayout,paddingTop]" description="paddingTop space at top">
				    <setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
				    </setup>
				    <body>
						<SetProperty propertyName="paddingTop" value="-20" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont"/>
						<AssertPropertyValue propertyName="width" value="212" target="cont"/>
						<AssertPropertyValue propertyName="height" value="60" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="212" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="60" target="cont.contentGroup"/>
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
				    </body>
				</TestCase>
		
				<TestCase testID="HLayout_container_paddingLeft_negative" keywords="[HorizontalLayout,paddingLeft]" description="paddingLeft space at top">
				    <setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
				    </setup>
				    <body>
						<SetProperty propertyName="paddingLeft" value="-20" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont"/>
		
						<AssertPropertyValue propertyName="width" value="192" target="cont"/>
						<AssertPropertyValue propertyName="height" value="80" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="192" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="80" target="cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
				    </body>
				</TestCase>
		
				<TestCase testID="HLayout_container_paddingRight_negative" keywords="[HorizontalLayout,paddingLeft]" description="paddingLeft space at top">
				    <setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="myScroll"/>
				    </setup>
				    <body>
						<SetProperty propertyName="paddingRight" value="-20" target="cont.layout"/>
						<RunCode code="application.addSparkBtn(application.cont)"/>
						<RunCode code="application.addRect(application.cont)"/>
						<SetProperty propertyName="width" target="cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<SetProperty propertyName="height" target="cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="cont.skin"/>
						<RunCode code="application.addSparkBtn(application.cont)" waitEvent="updateComplete" waitTarget="cont"/>
						<AssertPropertyValue propertyName="width" value="192" target="cont"/>
						<AssertPropertyValue propertyName="height" value="80" target="cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="192" target="cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="80" target="cont.contentGroup"/>
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
				    </body>
				</TestCase>
				
				<TestCase testID="HLayout_container_paddingBottom_positive_scroll" keywords="[HorizontalLayout,paddingBottom]" description="paddingBottom space at the bottom">
				    <setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="cont"/>
				    </setup>
				    <body>
						<SetProperty propertyName="height" value="115" target="myScroll.cont" waitEvent="updateComplete" waitTarget="myScroll.cont.skin" />
						<SetProperty propertyName="width" value="115" target="myScroll.cont" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.contentGroup"/>			
						<SetProperty propertyName="paddingBottom" value="30" target="myScroll.cont.layout"/>
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<RunCode code="application.addSparkBtn(application.myScroll.cont)" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<AssertPropertyValue propertyName="width" value="115" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="height" value="115" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="212" target="myScroll.cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="110" target="myScroll.cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
				    </body>
				</TestCase>
		
				<TestCase testID="HLayout_container_paddingTop_positive_scroll" keywords="[HorizontalLayout,paddingTop]" description="paddingTop space at top">
				    <setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="cont"/>
				    </setup>
				    <body>
				    	<SetProperty propertyName="height" value="115" target="myScroll.cont" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="width" value="115" target="myScroll.cont" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.contentGroup"/>			
						<SetProperty propertyName="paddingTop" value="30" target="myScroll.cont.layout"/>
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<RunCode code="application.addSparkBtn(application.myScroll.cont)" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						
						<AssertPropertyValue propertyName="width" value="115" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="height" value="115" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="212" target="myScroll.cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="110" target="myScroll.cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
				    </body>
				</TestCase>
		
				<TestCase testID="HLayout_container_paddingLeft_positive_scroll" keywords="[HorizontalLayout,paddingLeft]" description="paddingLeft space at top">
				    <setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="cont"/>
				    </setup>
				    <body>
				    	<SetProperty propertyName="height" value="115" target="myScroll.cont" waitEvent="updateComplete" waitTarget="myScroll.cont.skin" />
						<SetProperty propertyName="width" value="100" target="myScroll.cont" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.contentGroup"/>			
						<SetProperty propertyName="paddingLeft" value="30" target="myScroll.cont.layout"/>
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<RunCode code="application.addSparkBtn(application.myScroll.cont)" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<AssertPropertyValue propertyName="width" value="100" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="height" value="115" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="242" target="myScroll.cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="80" target="myScroll.cont.contentGroup"/>
						
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
				    </body>
				</TestCase>
		
				<TestCase testID="HLayout_container_paddingRight_positive_scroll" keywords="[HorizontalLayout,paddingLeft]" description="paddingLeft space at top">
				    <setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="cont"/>
				    </setup>
				    <body>
				    	<SetProperty propertyName="height" value="115" target="myScroll.cont" waitEvent="updateComplete" waitTarget="myScroll.cont.skin" />
						<SetProperty propertyName="width" value="100" target="myScroll.cont" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.contentGroup"/>			
						<SetProperty propertyName="paddingRight" value="30" target="myScroll.cont.layout"/>
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<RunCode code="application.addSparkBtn(application.myScroll.cont)" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<AssertPropertyValue propertyName="width" value="100" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="height" value="115" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="242" target="myScroll.cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="80" target="myScroll.cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
				    </body>
				</TestCase>
		
				<TestCase testID="HLayout_container_paddingBottom_negative_scroll" keywords="[HorizontalLayout,paddingBottom]" description="paddingBottom space at the bottom">
				    <setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="cont"/>
				    </setup>
				    <body>
				    	<SetProperty propertyName="height" value="115" target="myScroll.cont" waitEvent="updateComplete" waitTarget="myScroll.cont.skin" />
						<SetProperty propertyName="width" value="100" target="myScroll.cont" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.contentGroup"/>			
						<SetProperty propertyName="paddingBottom" value="-20" target="myScroll.cont.layout"/>
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<RunCode code="application.addSparkBtn(application.myScroll.cont)" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<AssertPropertyValue propertyName="width" value="100" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="height" value="115" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="212" target="myScroll.cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="60" target="myScroll.cont.contentGroup"/>
						
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
				    </body>
				</TestCase>
		
				<TestCase testID="HLayout_container_paddingTop_negative_scroll" keywords="[HorizontalLayout,paddingTop]" description="paddingTop space at top">
				    <setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="cont"/>
				    </setup>
				    <body>
				    	<SetProperty propertyName="height" value="115" target="myScroll.cont" waitEvent="updateComplete" waitTarget="myScroll.cont.skin" />
						<SetProperty propertyName="width" value="100" target="myScroll.cont" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.contentGroup"/>			
						<SetProperty propertyName="paddingTop" value="-20" target="myScroll.cont.layout"/>
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<RunCode code="application.addSparkBtn(application.myScroll.cont)" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<AssertPropertyValue propertyName="width" value="100" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="height" value="115" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="212" target="myScroll.cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="60" target="myScroll.cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
				    </body>
				</TestCase>
		
				<TestCase testID="HLayout_container_paddingLeft_negative_scroll" keywords="[HorizontalLayout,paddingLeft]" description="paddingLeft space at top">
				    <setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="cont"/>
				    </setup>
				    <body>
				    	<SetProperty propertyName="height" value="115" target="myScroll.cont" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="width" value="100" target="myScroll.cont" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.contentGroup"/>			
						<SetProperty propertyName="paddingLeft" value="-20" target="myScroll.cont.layout"/>
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<RunCode code="application.addSparkBtn(application.myScroll.cont)" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<AssertPropertyValue propertyName="width" value="100" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="height" value="115" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="192" target="myScroll.cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="80" target="myScroll.cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
				    </body>
				</TestCase>
		
				<TestCase testID="HLayout_container_paddingRight_negative_scroll" keywords="[HorizontalLayout,paddingLeft]" description="paddingLeft space at top">
				    <setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />
						<SetProperty propertyName="visible" value="false" target="cont"/>
				    </setup>
				    <body>
				    	<SetProperty propertyName="height" value="115" target="myScroll.cont" waitEvent="updateComplete" waitTarget="myScroll.cont.skin" />
						<SetProperty propertyName="width" value="100" target="myScroll.cont" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.contentGroup"/>			
						<SetProperty propertyName="paddingRight" value="-20" target="myScroll.cont.layout"/>
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(1)" value="80" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<RunCode code="application.addSparkBtn(application.myScroll.cont)" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						
						<AssertPropertyValue propertyName="width" value="100" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="height" value="115" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="192" target="myScroll.cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="80" target="myScroll.cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>
				    </body>
				</TestCase>
				
				<TestCase testID="HLayout_container_scroll_requestedColumnCount_default" keywords="[HorizontalLayout, requestedColumnCount]" description="requestedColumnCount default is -1">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="cont"/>
					</setup>
					<body>
						<AssertPropertyValue propertyName="requestedColumnCount" value="-1" target="myScroll.cont.hl"/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_scroll_requestedColumnCount_default_fit_all" keywords="[HorizontalLayout, requestedColumnCount]" description="default requestedColumnCount shows all children">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="cont"/>
					</setup>
					<body>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.hl"/>
						<AssertPropertyValue propertyName="requestedColumnCount" value="-1" target="myScroll.cont.hl"/>
		
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(1)" value="140" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<RunCode code="application.addSimpleText(application.myScroll.cont)"/>
						<SetStyle styleName="textAlign" target="myScroll.cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="myScroll.cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(2)" value="190" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(3)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(3)" value="100" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
		
						<AssertPropertyValue propertyName="width" value="3617" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="height" value="190" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="3617" target="myScroll.cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="190" target="myScroll.cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="18" maxColorVariance="5" target=""/>				
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_scroll_requestedColumnCount_explicit_size" keywords="[HorizontalLayout, requestedColumnCount]" description="requestedColumnCount ignored when default size is set">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="cont"/>
					</setup>
					<body>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.hl"/>
						<SetProperty propertyName="height" value="115" target="myScroll.cont"/>
						<SetProperty propertyName="width" value="115" target="myScroll.cont"/>
		
						<AssertPropertyValue propertyName="requestedColumnCount" value="-1" target="myScroll.cont.hl"/>
		
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(1)" value="140" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<RunCode code="application.addSimpleText(application.myScroll.cont)"/>
						<SetStyle styleName="textAlign" target="myScroll.cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="myScroll.cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(2)" value="190" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(3)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(3)" value="100" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
						
						<AssertPropertyValue propertyName="columnCount" value="2" target="myScroll.cont.hl"/>
						<AssertPropertyValue propertyName="width" value="115" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="height" value="115" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="3617" target="myScroll.cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="190" target="myScroll.cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>				
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_scroll_requestedColumnCount_4" keywords="[HorizontalLayout, requestedColumnCount]" description="requestedColumnCount set to 4 shows 4 children">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="cont"/>
					</setup>
					<body>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.hl"/>
						<SetProperty propertyName="requestedColumnCount" value="4" target="myScroll.cont.hl"/>
		
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(1)" value="140"/>
		
						<RunCode code="application.addSimpleText(application.myScroll.cont)"/>
						<SetStyle styleName="textAlign" target="myScroll.cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="myScroll.cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(2)" value="190"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(3)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(3)" value="100" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
		
						<RunCode code="application.addSimpleText(application.myScroll.cont)"/>
						<SetStyle styleName="textAlign" target="myScroll.cont.getElementAt(4)" value="justify" />
						<SetProperty propertyName="text" target="myScroll.cont.getElementAt(4)" value="{textString}" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(4)" value="190" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(5)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(5)" value="80" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
						
						<AssertPropertyValue propertyName="columnCount" value="4" target="myScroll.cont.hl"/>
						<AssertPropertyValue propertyName="width" value="3617" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="height" value="205" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="7098" target="myScroll.cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="190" target="myScroll.cont.contentGroup"/>
		
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_scroll_requestedColumnCount_greaterThan_children" keywords="[HorizontalLayout, requestedColumnCount]" description="requestedColumnCount greater than number of children">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="cont"/>
					</setup>
					<body>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.hl"/>
						<SetProperty propertyName="requestedColumnCount" value="8" target="myScroll.cont.hl"/>
		
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
						<RunCode code="application.addSparkBtn(application.myScroll.cont)" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						
						<AssertPropertyValue propertyName="columnCount" value="5" target="myScroll.cont.hl"/>
						<AssertPropertyValue propertyName="width" value="602" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="height" value="21" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="374" target="myScroll.cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="21" target="myScroll.cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="8" maxColorVariance="5" target=""/>				
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_scroll_requestedColumnCount_change_runtime" keywords="[HorizontalLayout, requestedColumnCount]" description="requestedColumnCount changes from 4 to 8 all children should show">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="cont"/>
					</setup>
					<body>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.hl"/>
						<SetProperty propertyName="requestedColumnCount" value="4" target="myScroll.cont.hl"/>
		
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(1)" value="30" />
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(1)" value="140" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
		
						<RunCode code="application.addSimpleText(application.myScroll.cont)"/>
						<SetStyle styleName="textAlign" target="myScroll.cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="myScroll.cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(2)" value="30"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(2)" value="190" />
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(3)" value="20" />
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(3)" value="100" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
		
						<RunCode code="application.addSimpleText(application.myScroll.cont)"/>
						<SetStyle styleName="textAlign" target="myScroll.cont.getElementAt(4)" value="justify" />
						<SetProperty propertyName="text" target="myScroll.cont.getElementAt(4)" value="{textString}" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(2)" value="30"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(4)" value="250" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
		
						<SetProperty propertyName="requestedColumnCount" value="8" target="myScroll.cont.hl"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(5)" value="40" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(5)" value="80" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
						
						<AssertPropertyValue propertyName="columnCount" value="6" target="myScroll.cont.hl"/>
						
						<AssertPropertyValue propertyName="width" value="3781" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="height" value="250" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="3629" target="myScroll.cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="250" target="myScroll.cont.contentGroup"/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_scroll_columnCount_default" keywords="[HorizontalLayout, columnCount]" description="requestedColumnCount default is -1">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="cont"/>
					</setup>
					<body>
						<AssertPropertyValue propertyName="columnCount" value="0" target="myScroll.cont.hl"/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_scroll_columnCount_requestedColumnCount" keywords="[HorizontalLayout, columnCount]" description="change requestedColumnCount verify columnCount is updated">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="cont"/>
					</setup>
					<body>
						<SetProperty propertyName="requestedColumnCount" value="8" target="myScroll.cont.hl"/>
						<AssertPropertyValue propertyName="columnCount" value="0" target="myScroll.cont.hl"/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_scroll_columnCount_binding" keywords="[HorizontalLayout, requestedColumnCount]" description="requestedColumnCount changes from 4 to 8 all children should show">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="cont"/>
					</setup>
					<body>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.hl"/>
						<SetProperty propertyName="requestedColumnCount" value="4" target="myScroll.cont.hl"/>
		
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(1)" value="30" />
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(1)" value="140" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
		
						<RunCode code="application.addSimpleText(application.myScroll.cont)"/>
						<SetStyle styleName="textAlign" target="myScroll.cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="myScroll.cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(2)" value="30"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(2)" value="190" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(3)" value="20" />
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(3)" value="100" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
						
						<AssertPropertyValue propertyName="columnCount" value="4" target="myScroll.cont.hl"/>
						<AssertPropertyValue propertyName="label" value="4" target="colCountBtn" />
						
						<RunCode code="application.addSimpleText(application.myScroll.cont)"/>
						<SetStyle styleName="textAlign" target="myScroll.cont.getElementAt(4)" value="justify" />
						<SetProperty propertyName="text" target="myScroll.cont.getElementAt(4)" value="{textString}" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(2)" value="30"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(4)" value="250" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
		
						<SetProperty propertyName="requestedColumnCount" value="8" target="myScroll.cont.hl"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(5)" value="40" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(5)" value="80" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
		
						<AssertPropertyValue propertyName="columnCount" value="6" target="myScroll.cont.hl"/>
						<AssertPropertyValue propertyName="label" value="6" target="colCountBtn" />	
		
						<AssertPropertyValue propertyName="width" value="3781" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="height" value="250" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="3629" target="myScroll.cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="250" target="myScroll.cont.contentGroup"/>				
		
					</body>
				</TestCase>
			
				<TestCase testID="HLayout_container_columnWidth_variableColumnWidth" keywords="[HorizontalLayout, columnWidth]" description="columnWidth has no effect when variableColumnWidth is true">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="cont"/>
					</setup>
					<body>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.hl"/>
						<SetProperty propertyName="variableColumnWidth" value="true" target="myScroll.cont.hl"/>
						<SetProperty propertyName="columnWidth" value="100" target="myScroll.cont.hl"/>
		
						<AssertPropertyValue propertyName="requestedColumnCount" value="-1" target="myScroll.cont.hl"/>
		
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(1)" value="140" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<RunCode code="application.addSimpleText(application.myScroll.cont)"/>
						<SetStyle styleName="textAlign" target="myScroll.cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="myScroll.cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(2)" value="190" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(3)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(3)" value="100" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
		
						<AssertPropertyValue propertyName="width" value="3617" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="height" value="190" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="3617" target="myScroll.cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="190" target="myScroll.cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="18" maxColorVariance="5" target=""/>				
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_columnWidth_variableColumnWidth_false" keywords="[HorizontalLayout, columnWidth]" description="columnWidth has no effect when variableColumnWidth is true">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="cont"/>
					</setup>
					<body>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.hl"/>
						<SetProperty propertyName="variableColumnWidth" value="false" target="myScroll.cont.hl"/>
						<SetProperty propertyName="columnWidth" value="100" target="myScroll.cont.hl"/>
		
						<AssertPropertyValue propertyName="requestedColumnCount" value="-1" target="myScroll.cont.hl"/>
		
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(1)" value="140" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<RunCode code="application.addSimpleText(application.myScroll.cont)"/>
						<SetStyle styleName="textAlign" target="myScroll.cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="myScroll.cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(2)" value="190" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(3)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(3)" value="100" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
		
						<AssertPropertyValue propertyName="width" value="418" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="height" value="190" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="418" target="myScroll.cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="190" target="myScroll.cont.contentGroup"/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_columnWidth_default_variableColumnWidth_false" keywords="[HorizontalLayout, columnWidth]" description="columnWidth has no effect when variableColumnWidth is true">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="cont"/>
					</setup>
					<body>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.hl"/>
						<SetProperty propertyName="variableColumnWidth" value="false" target="myScroll.cont.hl"/>
		
						<AssertPropertyValue propertyName="requestedColumnCount" value="-1" target="myScroll.cont.hl"/>
		
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(1)" value="140" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<RunCode code="application.addSimpleText(application.myScroll.cont)"/>
						<SetStyle styleName="textAlign" target="myScroll.cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="myScroll.cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(2)" value="190" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(3)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(3)" value="100" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
		
						<AssertPropertyValue propertyName="width" value="298" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="height" value="190" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="298" target="myScroll.cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="190" target="myScroll.cont.contentGroup"/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_variableColumnWidth_default" keywords="[HorizontalLayout, variableColumnWidth]" description="variableColumnWidth default is true">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="cont"/>
					</setup>
					<body>
						<AssertPropertyValue propertyName="variableColumnWidth" value="true" target="myScroll.cont.hl"/>
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_columnWidth_default_variableColumnWidth_false_typicalLayoutElement" keywords="[HorizontalLayout, columnWidth]" description="columnWidth has no effect when variableColumnWidth is true">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="cont"/>
					</setup>
					<body>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.hl"/>
						<SetProperty propertyName="variableColumnWidth" value="false" target="myScroll.cont.hl"/>
		
						<AssertPropertyValue propertyName="requestedColumnCount" value="-1" target="myScroll.cont.hl"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(0)" value="140" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
		
						<RunCode code="application.addSimpleText(application.myScroll.cont)"/>
						<SetStyle styleName="textAlign" target="myScroll.cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="myScroll.cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(2)" value="190" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(3)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(3)" value="100" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
		
						<AssertPropertyValue propertyName="width" value="258" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="height" value="190" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="258" target="myScroll.cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="190" target="myScroll.cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="30" maxColorVariance="5" target=""/>				
					</body>
				</TestCase>
				<TestCase testID="HLayout_container_columnWidth_typicalLayoutElement_UIComponent" keywords="[HorizontalLayout, columnWidth]" description="columnWidth has no effect when variableColumnWidth is true">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="cont"/>
					</setup>
					<body>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.hl"/>
						<SetProperty propertyName="variableColumnWidth" value="false" target="myScroll.cont.hl"/>
		
						<AssertPropertyValue propertyName="requestedColumnCount" value="-1" target="myScroll.cont.hl"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(0)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(0)" value="140" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(1)" value="140" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
		
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
		
						<SetProperty propertyName="typicalLayoutElement" valueExpression="value=application.myScroll.cont.hl.target.getElementAt(2)" target="myScroll.cont.hl"/>
		
						<RunCode code="application.addSimpleText(application.myScroll.cont)"/>
						<SetStyle styleName="textAlign" target="myScroll.cont.getElementAt(3)" value="justify" />
						<SetProperty propertyName="text" target="myScroll.cont.getElementAt(3)" value="{textString}" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(3)" value="190" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(4)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(4)" value="100" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
		
						<AssertPropertyValue propertyName="width" value="374" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="height" value="190" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="374" target="myScroll.cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="190" target="myScroll.cont.contentGroup"/>
		
					</body>
				</TestCase>
		
				<TestCase testID="HLayout_container_columnWidth_typicalLayoutElement_GraphicElement" keywords="[HorizontalLayout, columnWidth]" description="columnWidth has no effect when variableColumnWidth is true">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="cont"/>
					</setup>
					<body>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.hl"/>
						<SetProperty propertyName="variableColumnWidth" value="false" target="myScroll.cont.hl"/>
		
						<AssertPropertyValue propertyName="requestedColumnCount" value="-1" target="myScroll.cont.hl"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(0)" value="30" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(0)" value="140" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(1)" value="140" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
		
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
		
						<SetProperty propertyName="typicalLayoutElement" valueExpression="value=application.myScroll.cont.hl.target.getElementAt(1)" target="myScroll.cont.hl"/>
		
						<RunCode code="application.addSimpleText(application.myScroll.cont)"/>
						<SetStyle styleName="textAlign" target="myScroll.cont.getElementAt(3)" value="justify" />
						<SetProperty propertyName="text" target="myScroll.cont.getElementAt(3)" value="{textString}" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(3)" value="190" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(4)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(4)" value="100" waitEvent="updateComplete" waitTarget="myScroll.cont.skin.contentGroup"/>
		
						<AssertPropertyValue propertyName="width" value="324" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="height" value="190" target="myScroll.cont"/>
						<AssertPropertyValue propertyName="contentWidth" value="324" target="myScroll.cont.contentGroup"/>
						<AssertPropertyValue propertyName="contentHeight" value="190" target="myScroll.cont.contentGroup"/>
		
						<CompareBitmap url="../Properties/baselines/$testID.png" numColorVariances="30" maxColorVariance="5" target=""/>				
					</body>
				</TestCase>
				
				<TestCase testID="HLayout_container_scroll_verticalScrollPosition_bind" keywords="[HorizontalLayout, verticalScrollPosition]" description="binding to verticalScrollPosition">
					<setup>
						<ResetComponent target="myScroll" className="Assets.MyContScroller" waitEvent="updateComplete" />
						<ResetComponent target="cont" className="Assets.MyContainer" waitEvent="updateComplete" />	
						<SetProperty propertyName="visible" value="false" target="cont"/>
					</setup>
					<body>
						<SetProperty propertyName="clipAndEnableScrolling" value="true" target="myScroll.cont.hl"/>
						<SetProperty propertyName="height" value="70" target="myScroll.cont" waitEvent="updateComplete" />
						<SetProperty propertyName="width" value="70" target="myScroll.cont" waitEvent="updateComplete"/>
		
						<RunCode code="application.addSparkBtn(application.myScroll.cont)"/>
						<RunCode code="application.addRect(application.myScroll.cont)"/>
						<SetProperty propertyName="width" target="myScroll.cont.getElementAt(1)" value="60" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(1)" value="140" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<RunCode code="application.addSimpleText(application.myScroll.cont)"/>
						<SetStyle styleName="textAlign" target="myScroll.cont.getElementAt(2)" value="justify" />
						<SetProperty propertyName="text" target="myScroll.cont.getElementAt(2)" value="{textString}" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
						<SetProperty propertyName="height" target="myScroll.cont.getElementAt(2)" value="190" waitEvent="updateComplete" waitTarget="myScroll.cont.skin"/>
		
						<SetProperty propertyName="verticalScrollPosition" value="90" target="myScroll.cont.hl" waitEvent="updateComplete" waitTarget="bindVScroll.skin"/>
						<AssertPropertyValue propertyName="label" value="90" target="bindVScroll"/>
					</body>
				</TestCase>
				
		
	</testCases>
</UnitTester>