<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:comps="comps.*"
		backgroundColor="#FFFFFF"
		height="700" width="800">

    <fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";

		@font-face{
			src: url("../../../../../Assets/Fonts/Open_Sans/OpenSans-Regular.ttf");
			fontFamily: myVera;
			embedAsCFF: true;
		}


		@font-face{
			src: url("../../../../../Assets/Fonts/Open_Sans/OpenSans-Bold.ttf");
			fontWeight: bold;
			fontFamily: myVera;
			embedAsCFF: true;
		}

		@font-face{
			src: url("../../../../../Assets/Fonts/Open_Sans/OpenSans-Italic.ttf");
			fontStyle: italic;
			fontFamily: myVera;
			embedAsCFF: true;
		}
		
		@font-face{
			src: url("../../../../../Assets/Fonts/Cousine/Cousine-Regular.ttf");
			fontFamily: MyriadWebPro;
			embedAsCFF: true;
		}
		
		@font-face{
			src: url("../../../../../Assets/Fonts/Cousine/Cousine-Bold.ttf");
			fontWeight: bold;
			fontFamily: MyriadWebPro;
			embedAsCFF: true;
		}
		
		s|TextArea{
			fontAntiAliasType: "normal";
			fontFamily: myVera;
			fontSize: 12;
            fontLookup: "embeddedCFF";
		}
		s|SkinnableTextBase:normalWithPrompt {
			color: red;
		}
		
		s|SkinnableTextBase:disabledWithPrompt {
			color: green;
		}

	</fx:Style>

	<fx:Script>
		<![CDATA[
			import mx.events.StateChangeEvent;
			
			public function doManualReset():void{
				if(currentState == "def"){
					dispatchEvent(new Event("manualResetComplete"));
				}else{
					addEventListener("currentStateChange", handleCurrentStateChange);
					currentState = "def";   
				}
			}
			
			private function handleCurrentStateChange(e:StateChangeEvent):void{
				dispatchEvent(new Event("manualResetComplete"));
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="def" />
		<s:State name="state_one" />
		<s:State name="state_two" />
	</s:states>
	
	<s:VGroup left="20" top="20">
		<mx:Canvas id="panel1" backgroundColor="#EEEEEE" width="300" height="200">
			<s:TextArea id="textArea"/>
		</mx:Canvas>

		<s:HGroup width="90%">
			<mx:Box paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" id="focusColor_ta_box" >
				  <s:TextArea id="focusColor_ta" text="focusColor" focusColor="0xCC0033" />
				</mx:Box>
			<s:TextArea id="baseColor_ta" text="baseColor" chromeColor="0xFFFF00" />
			<s:TextArea id="color_ta" text="color" color="0xFF0000" />
		</s:HGroup>
		<s:HGroup width="90%">
			<s:TextArea id="contentBackgroundColor_ta" text="contentBackgroundColor" contentBackgroundColor="0xFFCCFF" />
			<s:TextArea id="selectionColor_ta" text="selectionColor" focusedTextSelectionColor="0xFF9966" />
			<s:TextArea id="symbolColor_ta" text="symbolColor. The FormHeading container is used to display a heading for a group of controls inside a Form container." symbolColor="0x00FFAA" />
		</s:HGroup>
		
		<s:HGroup width="90%">
			<s:TextArea id="state_ta" prompt.def="default prompt" prompt.state_one="prompt 1" prompt.state_two="prompt 2"/>
		</s:HGroup>
    </s:VGroup>

</s:Application>
