<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
              >
    
    <!--
    The following test creates a 100,000 row by 4 cell grid, selects
    99% of the rows (mimicking SHIFT-selection), then attempts to 
    sort the data provider with preserveSelection enabled.  
    
    This test should take no longer than 1000 ms (1 second).
    -->
    
    <fx:Script>
        <![CDATA[
            import mx.collections.*;
            import flash.utils.getTimer;
            
            private var startTime:uint = 0;
            private var endTime:uint = 0;
            
            public var selectionTime:Number=0;
            
            private function populateGrid():void
            {
                var a:Array = new Array(100000);
                for (var i:int = 0; i < 100000; i++)
                {
                    var o:Object = new Object();
                    o.A = "00" + i;
                    o.B = "ABCD";
                    o.C = "9999";
                    o.D = "####";
                    a[i] = o;
                }
                ac.source = a;
            }
            
            private function sort():void
            {
                var dataSortField:SortField = new SortField();
                dataSortField.name = "A";
                dataSortField.numeric = true;
                
                var numericDataSort:Sort = new Sort();
                numericDataSort.fields = [dataSortField];
                numericDataSort.reverse();
                
                ac.sort = numericDataSort;
                ac.refresh();
            }
            
            private function sel():void
            {
                dg.selectIndices(0, 50000);
            }
                        
            public function startTest():void
            {
                sel();

                // Listen for when grid finishes rendering.
                dg.grid.addEventListener("updateComplete", onGridUpdate);
                 addEventListener("selectionComplete", getResults);
            } 
            
            private function onGridUpdate(e:Event):void
            {
                // Remove our listener.
                dg.grid.removeEventListener("updateComplete", onGridUpdate);
		callLater( 
			    function():void {
				startTime = getTimer();
				sort();
				dg.grid.addEventListener("updateComplete", onGridFinalUpdate);
			    } 
                );
                
            }
            
           private function onGridFinalUpdate(e:Event):void
            {
                dg.grid.removeEventListener("updateComplete", onGridFinalUpdate);
                
                endTime = getTimer();
                selectionTime = (endTime - startTime);
                
                // Report
                dispatchEvent(new Event("selectionComplete"));
                ti.text = "Time to select: " + selectionTime + " ms.";
            }
   
	    public function verifyCumulativeTime(delta:uint):String
	    {
		var errMsg:String="";
		if (selectionTime<=0)
			errMsg+="no cumulativeTime for the task, possible onDataGridUpdate isn't invoked";
		else if (selectionTime>delta)
			errMsg+="Time to finish the task is out of expectation: actual time="+selectionTime+"; expect time<="+delta;

		return errMsg;
	    }            
            private function getResults(evt:Event):void {
                lbl.text = verifyCumulativeTime(1000);
            }
        ]]>
    </fx:Script>
    
    <s:layout>
        <s:VerticalLayout paddingBottom="10" paddingTop="10" paddingRight="10" paddingLeft="10"/>
    </s:layout>
    <s:HGroup>
        <s:TextInput id="ti"/>
        <s:Button click="sel()" label="Select 50%"/>
        <s:Button click="sort()" label="Sort"/>
    </s:HGroup>
    
    <s:DataGrid id="dg" width="100%" height="100%" selectionMode="multipleRows" initialize="populateGrid()" preserveSelection="true">
        <s:columns>
            <s:ArrayCollection>
                <s:GridColumn dataField="A"/>
                <s:GridColumn dataField="B"/>
                <s:GridColumn dataField="C"/>
                <s:GridColumn dataField="D"/>
            </s:ArrayCollection>
        </s:columns>
        <s:dataProvider>
            <s:ArrayCollection id="ac"/>
        </s:dataProvider>
    </s:DataGrid>
     <s:Label id="lbl" fontSize="24" color="red"/>
    
</s:Application> 

