<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<UnitTester testDir="gumbo/components/RadioButton/events/"  xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"  xmlns:m="http://ns.adobe.com/mxml/2009" xmlns="*" testSWF="FxRadioButtonEvents.mxml">

	<!-- this set of lines form a template that must be in each unit test -->

	<fx:Script>
		<![CDATA[
		public static function init(o:DisplayObject):void
		{
		}			
		]]>
	</fx:Script>
	
	<fx:Metadata>
		<![CDATA[
			[Mixin]
		]]>
	</fx:Metadata>	
	
	<!-- end of set of lines that must be in each unit test -->

	<fx:Script>
		<![CDATA[
			import spark.components.RadioButton;
			import comps.*;
			import spark.components.Group;
		]]>
	</fx:Script>

	<testCases>

<!-- change event -->

		<TestCase testID="FxRadioButton_event_change_onClick" keywords="[FxRadioButton, event, change]" description="check that change event is fired off the group">
			<setup>
				<ResetComponent target="erg" className="comps.EventsRadioButtonGroup" waitEvent="updateComplete"/>
			</setup>
			<body>
				<DispatchMouseClickEvent target="erg.e1" localX="6" localY="8" waitEvent="change" waitTarget="erg.eventGrp" />
				<DispatchMouseClickEvent target="erg.e2" localX="6" localY="8" waitEvent="change" waitTarget="erg.eventGrp" />
				<DispatchMouseClickEvent target="erg.e1" localX="6" localY="8" waitEvent="change" waitTarget="erg.eventGrp" />
			</body>
		</TestCase>

		<TestCase testID="FxRadioButton_event_change_onClick_noEvent" keywords="[FxRadioButton, event, change]" description="check that change event isn't fired if selection hasnt changed">
			<setup>
				<ResetComponent target="erg" className="comps.EventsRadioButtonGroup" waitEvent="updateComplete"/>
			</setup>
			<body>
				<DispatchMouseClickEvent target="erg.e1" localX="6" localY="8" waitEvent="change" waitTarget="erg.eventGrp" />
				<DispatchMouseClickEvent target="erg.e3" localX="6" localY="8" waitEvent="change" waitTarget="erg.eventGrp" />
				<DispatchMouseClickEvent target="erg.e3" localX="6" localY="8" />
				<AssertNoEvent target="erg.eventGrp" eventName="change" eventClass="flash.events::Event" />
			</body>
		</TestCase>
		
		<TestCase testID="FxRadioButton_event_change_moveIn_unselected" keywords="[FxRadioButton, event, itemClick]" description="check that change doesn't fire when moving in an unselected rb">
			<setup>
				<ResetComponent target="erg" className="comps.EventsRadioButtonGroup" waitEvent="updateComplete"/>
				<AssertMethodValue method="application.erg.e4.group = application.erg.eventGrp" />
				<AssertNoEvent target="erg.eventGrp" eventName="change" eventClass="flash.events::Event" />
			</setup>
		</TestCase>

		<TestCase testID="FxRadioButton_event_change_keyboard" keywords="[FxRadioButton, event, itemClick]" description="check that change doesn't fire when moving in an unselected rb">
			<setup>
				<ResetComponent target="erg" className="comps.EventsRadioButtonGroup" waitEvent="updateComplete"/>
			</setup>
			<body>
				<DispatchMouseClickEvent target="erg.e1" localX="6" localY="8" waitEvent="change" waitTarget="erg.eventGrp" />
				<DispatchKeyEvent key="DOWN" waitEvent="change" waitTarget="erg.eventGrp" />
				<DispatchKeyEvent key="UP" waitEvent="change" waitTarget="erg.eventGrp" />
			</body>
		</TestCase>
		
<!-- itemClick event -->

		<TestCase testID="FxRadioButton_event_itemClick" keywords="[FxRadioButton, event, itemClick]" description="check that itemClick event is fired off the group">
			<setup>
				<ResetComponent target="erg" className="comps.EventsRadioButtonGroup" waitEvent="updateComplete"/>
			</setup>
			<body>
				<DispatchMouseClickEvent target="erg.e1" localX="6" localY="8" waitEvent="itemClick" waitTarget="erg.eventGrp" />
				<DispatchMouseClickEvent target="erg.e2" localX="6" localY="8" waitEvent="itemClick" waitTarget="erg.eventGrp" />
				<DispatchMouseClickEvent target="erg.e3" localX="6" localY="8" waitEvent="itemClick" waitTarget="erg.eventGrp" />
			</body>
		</TestCase>
		
		<TestCase testID="FxRadioButton_event_itemClick_keyboard" keywords="[FxRadioButton, event, itemClick]" description="check that itemClick event is fired off the group">
			<setup>
				<ResetComponent target="erg" className="comps.EventsRadioButtonGroup" waitEvent="updateComplete"/>
			</setup>
			<body>
				<DispatchMouseClickEvent target="erg.e1" localX="6" localY="8" waitEvent="itemClick" waitTarget="erg.eventGrp" />
				<DispatchKeyEvent key="DOWN" />
				<AssertNoEvent target="erg.eventGrp" eventName="itemClick" eventClass="mx.events::ItemClickEvent" />
				<DispatchKeyEvent key="UP" />
				<AssertNoEvent target="erg.eventGrp" eventName="itemClick" eventClass="mx.events::ItemClickEvent" />
				<DispatchKeyEvent key="RIGHT" />
				<AssertNoEvent target="erg.eventGrp" eventName="itemClick" eventClass="mx.events::ItemClickEvent" />
				<DispatchKeyEvent key="LEFT" />
				<AssertNoEvent target="erg.eventGrp" eventName="itemClick" eventClass="mx.events::ItemClickEvent" />
			</body>
		</TestCase>
		
		<TestCase testID="FxRadioButton_event_itemClick_moveIn_unselected" keywords="[FxRadioButton, event, itemClick]" description="check that itemClick doesn't fire when moving in an unselected rb">
			<setup>
				<ResetComponent target="erg" className="comps.EventsRadioButtonGroup" waitEvent="updateComplete"/>
				<AssertMethodValue method="application.erg.e4.group = application.erg.eventGrp" />
				<AssertNoEvent target="erg.eventGrp" eventName="itemClick" eventClass="mx.events::ItemClickEvent" />
			</setup>
		</TestCase>
		
		<TestCase testID="FxRadioButton_event_itemClick_programmatic" keywords="[FxRadioButton, event, itemClick]" description="check that itemClick doesn't fire when programmatically setting selected">
			<setup>
				<ResetComponent target="erg" className="comps.EventsRadioButtonGroup" waitEvent="updateComplete"/>
				<AssertMethodValue method="application.erg.e3.selected = true" />
				<AssertNoEvent target="erg.eventGrp" eventName="itemClick" eventClass="mx.events::ItemClickEvent" />
			</setup>
		</TestCase>

		<TestCase testID="FxRadioButton_event_itemClick_properties" keywords="[FxRadioButton, event, itemClick]" description="check that itemClick properties are correct">
			<setup>
				<ResetComponent target="erg" className="comps.EventsRadioButtonGroup" waitEvent="updateComplete"/>
				<DispatchMouseClickEvent target="erg.e1" localX="6" localY="8" />				
				<AssertEvent eventName="itemClick" eventClass="mx.events::ItemClickEvent" target="erg.eventGrp" />
       				<AssertEventPropertyValue propertyName="index" value="0" />
				<AssertEventPropertyValue propertyName="item" valueExpression="value=null" />
				<AssertEventPropertyValue propertyName="label" value="Event 1" />
			</setup>
		</TestCase>		

	</testCases>
</UnitTester>


