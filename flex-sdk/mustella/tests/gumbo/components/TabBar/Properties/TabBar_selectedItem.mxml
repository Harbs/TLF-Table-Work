<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<UnitTester testDir="gumbo/components/TabBar/Properties/"  xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" testSWF="TabBarApp1.mxml">

	<!-- this set of lines form a template that must be in each unit test -->
	<mx:Script>
	<![CDATA[
	public static function init(o:DisplayObject):void
	{
	}
	]]>
	</mx:Script>
	<mx:Metadata>
	<![CDATA[
		[Mixin]
	]]>
	</mx:Metadata>
	<!-- end of set of lines that must be in each unit test -->

	<mx:Script>
	<![CDATA[

        import Assets.*;
		import mx.core.FlexGlobals;
        import spark.components.*;

	]]>
	</mx:Script>

	<testCases>

<!--
========================================================
selectedItem
Verify that the correct button ends up in the selected
state and that selectedIndex is correct.
========================================================
-->
<TestCase testID="selectedItem_sanityTest" keywords="[TabBar,selectedItem]" description="Make sure selection looks right." >
    <setup>
        <ResetComponent target="tb1" className="spark.components::TabBar" waitEvent="updateComplete" />
        <RunCode code="FlexGlobals.topLevelApplication.setDataProvider(FlexGlobals.topLevelApplication.tb1, 1)" waitTarget="tb1" waitEvent="updateComplete" />
    </setup>
    <body>
        <DispatchMouseClickEvent target="tb1.dataGroup.getElementAt(0)" /><!-- first item is already selected, so no need wait updateComplete event -->
        <AssertPropertyValue target="tb1" propertyName="selectedIndex" value="0" />
        <AssertPropertyValue target="tb1" propertyName="selectedItem" valueExpression="value=FlexGlobals.topLevelApplication.tb1.dataProvider.getItemAt(0)" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(0)" propertyName="selected" value="true" />
        <CompareBitmap numColorVariances="4" maxColorVariance="8" url="../Properties/baselines/$testID.png" target="tb1" />
    </body>
</TestCase>

<TestCase testID="selectedItem_test1" keywords="[TabBar,selectedItem]" description="Use it to select the first item." >
    <setup>
        <ResetComponent target="tb1" className="spark.components::TabBar" waitEvent="updateComplete" />
        <RunCode code="FlexGlobals.topLevelApplication.setDataProvider(FlexGlobals.topLevelApplication.tb1, 1)" waitTarget="tb1" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="tb1" propertyName="selectedItem" valueExpression="value=FlexGlobals.topLevelApplication.tb1.dataProvider.getItemAt(0)"  /><!-- first item is already selected, so no need wait updateComplete event -->
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(0)" propertyName="selected" value="true" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(1)" propertyName="selected" value="false" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(2)" propertyName="selected" value="false" />
        <AssertPropertyValue target="tb1" propertyName="selectedIndex" value="0" />
    </body>
</TestCase>

<TestCase testID="selectedItem_test2" keywords="[TabBar,selectedItem]" description="Use it to select the middle item." >
    <setup>
        <ResetComponent target="tb1" className="spark.components::TabBar" waitEvent="updateComplete" />
        <RunCode code="FlexGlobals.topLevelApplication.setDataProvider(FlexGlobals.topLevelApplication.tb1, 1)" waitTarget="tb1" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="tb1" propertyName="selectedItem" valueExpression="value=FlexGlobals.topLevelApplication.tb1.dataProvider.getItemAt(1)" waitEvent="updateComplete" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(0)" propertyName="selected" value="false" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(1)" propertyName="selected" value="true" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(2)" propertyName="selected" value="false" />
        <AssertPropertyValue target="tb1" propertyName="selectedIndex" value="1" />
    </body>
</TestCase>

<TestCase testID="selectedItem_test3" keywords="[TabBar,selectedItem]" description="Use it to select the last item." >
    <setup>
        <ResetComponent target="tb1" className="spark.components::TabBar" waitEvent="updateComplete" />
        <RunCode code="FlexGlobals.topLevelApplication.setDataProvider(FlexGlobals.topLevelApplication.tb1, 1)" waitTarget="tb1" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="tb1" propertyName="selectedItem" valueExpression="value=FlexGlobals.topLevelApplication.tb1.dataProvider.getItemAt(2)" waitEvent="updateComplete" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(0)" propertyName="selected" value="false" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(1)" propertyName="selected" value="false" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(2)" propertyName="selected" value="true" />
        <AssertPropertyValue target="tb1" propertyName="selectedIndex" value="2" />
    </body>
</TestCase>

<TestCase testID="selectedItem_test4" keywords="[TabBar,selectedItem]" description="Use it to select an item which is not in the bar." >
    <setup>
        <ResetComponent target="tb1" className="spark.components::TabBar" waitEvent="updateComplete" />
        <RunCode code="FlexGlobals.topLevelApplication.setDataProvider(FlexGlobals.topLevelApplication.tb1, 1)" waitTarget="tb1" waitEvent="updateComplete" />
        <RunCode code="FlexGlobals.topLevelApplication.setDataProvider(FlexGlobals.topLevelApplication.tb2, 2)" waitTarget="tb2" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="tb1" propertyName="selectedItem" valueExpression="value=FlexGlobals.topLevelApplication.tb2" waitEvent="updateComplete" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(0)" propertyName="selected" value="true" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(1)" propertyName="selected" value="false" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(2)" propertyName="selected" value="false" />
        <AssertPropertyValue target="tb1" propertyName="selectedIndex" value="0" />
    </body>
</TestCase>

<TestCase testID="selectedItem_test5" keywords="[TabBar,selectedItem]" description="Use it to select an item which is already selected. Just change the size instead of pausing." >
    <setup>
        <ResetComponent target="tb1" className="spark.components::TabBar" waitEvent="updateComplete" />
        <RunCode code="FlexGlobals.topLevelApplication.setDataProvider(FlexGlobals.topLevelApplication.tb1, 1)" waitTarget="tb1" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="tb1" propertyName="selectedItem" valueExpression="value=FlexGlobals.topLevelApplication.tb1.dataProvider.getItemAt(2)" waitEvent="updateComplete" />
        <SetProperty target="tb1" propertyName="selectedItem" valueExpression="value=FlexGlobals.topLevelApplication.tb1.dataProvider.getItemAt(2)" />
        <SetProperty target="tb1" propertyName="width" valueExpression="value=FlexGlobals.topLevelApplication.tb1.width + 1" waitEvent="updateComplete" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(0)" propertyName="selected" value="false" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(1)" propertyName="selected" value="false" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(2)" propertyName="selected" value="true" />
        <AssertPropertyValue target="tb1" propertyName="selectedIndex" value="2" />
    </body>
</TestCase>

<TestCase testID="selectedItem_test6" keywords="[TabBar,selectedItem]" description="Use it to select an item, then remove the item. Prop should use the first item as selected item" >
    <setup>
        <ResetComponent target="tb1" className="spark.components::TabBar" waitEvent="updateComplete" />
        <RunCode code="FlexGlobals.topLevelApplication.setDataProvider(FlexGlobals.topLevelApplication.tb1, 1)" waitTarget="tb1" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="tb1" propertyName="selectedItem" valueExpression="value=FlexGlobals.topLevelApplication.tb1.dataProvider.getItemAt(2)" waitEvent="updateComplete" />
        <RunCode code="FlexGlobals.topLevelApplication.tb1.dataProvider.removeItemAt(2)" waitTarget="tb1" waitEvent="updateComplete" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(0)" propertyName="selected" value="true" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(1)" propertyName="selected" value="false" />
        <AssertPropertyValue target="tb1" propertyName="selectedIndex" value="0" />
        <AssertPropertyValue target="tb1" propertyName="selectedItem" value="one" />
    </body>
</TestCase>

<TestCase testID="selectedItem_test7" keywords="[TabBar,selectedItem]" description="Set it to null, still firstItem is the selected one" >
    <setup>
        <ResetComponent target="tb1" className="spark.components::TabBar" waitEvent="updateComplete" />
        <RunCode code="FlexGlobals.topLevelApplication.setDataProvider(FlexGlobals.topLevelApplication.tb1, 1)" waitTarget="tb1" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="tb1" propertyName="selectedItem" valueExpression="value=null" />
        <SetProperty target="tb1" propertyName="width" valueExpression="value=FlexGlobals.topLevelApplication.tb1.width + 1" waitEvent="updateComplete" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(0)" propertyName="selected" value="true" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(1)" propertyName="selected" value="false" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(2)" propertyName="selected" value="false" />
        <AssertPropertyValue target="tb1" propertyName="selectedIndex" value="0" />
    </body>
</TestCase>

<TestCase testID="selectedItem_test8" keywords="[TabBar,selectedItem]" description="Set it to null when something is selected.  Because deselecting a button does not dispatch an event (SDK-18305), change size and wait for updateComplete." >
    <setup>
        <ResetComponent target="tb1" className="spark.components::TabBar" waitEvent="updateComplete" />
        <RunCode code="FlexGlobals.topLevelApplication.setDataProvider(FlexGlobals.topLevelApplication.tb1, 1)" waitTarget="tb1" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="tb1" propertyName="selectedIndex" value="1" waitEvent="updateComplete" />
        <SetProperty target="tb1" propertyName="selectedItem" valueExpression="value=null" />
        <SetProperty target="tb1" propertyName="width" valueExpression="value=FlexGlobals.topLevelApplication.tb1.width + 1" waitEvent="updateComplete" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(0)" propertyName="selected" value="false" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(1)" propertyName="selected" value="true" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(2)" propertyName="selected" value="false" />
        <AssertPropertyValue target="tb1" propertyName="selectedIndex" value="1" />
    </body>
</TestCase>

<!-- Bug SDK-18389. -->
<TestCase testID="selectedItem_test9" keywords="[TabBar,selectedItem]" description="Set it to null when requireSelection is true (not allowed)." >
    <setup>
        <ResetComponent target="tb1" className="spark.components::TabBar" waitEvent="updateComplete" />
        <RunCode code="FlexGlobals.topLevelApplication.setDataProvider(FlexGlobals.topLevelApplication.tb1, 1)" waitTarget="tb1" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="tb1" propertyName="selectedItem" value="null" />
        <SetProperty target="tb1" propertyName="width" valueExpression="value=FlexGlobals.topLevelApplication.tb1.width + 1" waitEvent="updateComplete" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(0)" propertyName="selected" value="true" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(1)" propertyName="selected" value="false" />
        <AssertPropertyValue target="tb1.dataGroup.getElementAt(2)" propertyName="selected" value="false" />
        <AssertPropertyValue target="tb1" propertyName="selectedIndex" value="0" />
    </body>
</TestCase>

<TestCase testID="selectedItem_test10" keywords="[TabBar,selectedItem]" description="Get it when the first item is already selected." >
    <setup>
        <ResetComponent target="tb1" className="spark.components::TabBar" waitEvent="updateComplete" />
        <RunCode code="FlexGlobals.topLevelApplication.setDataProvider(FlexGlobals.topLevelApplication.tb1, 1)" waitTarget="tb1" waitEvent="updateComplete" />
    </setup>
    <body>
        <DispatchMouseClickEvent target="tb1.dataGroup.getElementAt(0)" />
        <AssertPropertyValue target="tb1" propertyName="selectedItem" value="one" />
    </body>
</TestCase>

<TestCase testID="selectedItem_test11" keywords="[TabBar,selectedItem]" description="Get it when the middle item is selected." >
    <setup>
        <ResetComponent target="tb1" className="spark.components::TabBar" waitEvent="updateComplete" />
        <RunCode code="FlexGlobals.topLevelApplication.setDataProvider(FlexGlobals.topLevelApplication.tb1, 1)" waitTarget="tb1" waitEvent="updateComplete" />
    </setup>
    <body>
        <DispatchMouseClickEvent target="tb1.dataGroup.getElementAt(1)"  localX="10" localY="5" waitEvent="updateComplete" />
        <AssertPropertyValue target="tb1" propertyName="selectedItem" value="two" />
    </body>
</TestCase>

<TestCase testID="selectedItem_test12" keywords="[TabBar,selectedItem]" description="Get it when the last item is selected." >
    <setup>
        <ResetComponent target="tb1" className="spark.components::TabBar" waitEvent="updateComplete" />
        <RunCode code="FlexGlobals.topLevelApplication.setDataProvider(FlexGlobals.topLevelApplication.tb1, 1)" waitTarget="tb1" waitEvent="updateComplete" />
    </setup>
    <body>
        <DispatchMouseClickEvent target="tb1.dataGroup.getElementAt(2)"  localX="10" localY="5" waitEvent="updateComplete" />
        <AssertPropertyValue target="tb1" propertyName="selectedItem" value="three" />
    </body>
</TestCase>

	</testCases>
</UnitTester>
