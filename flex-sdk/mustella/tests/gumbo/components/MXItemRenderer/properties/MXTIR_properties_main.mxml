<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<UnitTester xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx " xmlns:s="library://ns.adobe.com/flex/spark"  xmlns:m="http://ns.adobe.com/mxml/2009" xmlns="*" testDir="gumbo/components/MXItemRenderer/properties/"  testSWF="TreeBasic.mxml">
  <!-- this set of lines form a template that must be in each unit test -->
  <fx:Script>
    <![CDATA[
      public static function init(o:DisplayObject):void { }
    ]]>
  </fx:Script>
  <fx:Metadata>
    <![CDATA[
      [Mixin]
    ]]>
  </fx:Metadata>
  <!-- end of set of lines that must be in each unit test -->
  <fx:Script>
    <![CDATA[
    	import comps.*
    	import spark.skins.spark.*;
    	import mx.core.FlexGlobals;
    	import 	mx.controls.listClasses.*;
    	public var txt:String;
    ]]>
  </fx:Script>
  <testCases>


<!--

MXItemRenderer Testing - Tree - Properties related tests
=====================================================

-->

<TestCase testID="MXTIR_disclosureGroup_setter_001" keywords="[Tree, mxTreeItemRenderer,disclosureGroup]" description="set disclosureGroup with a group having textInput " >
    <setup>
        <ResetComponent target="treeRoot" className="comps.TreeIntegration" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="treeRoot.tree1" propertyName="showRoot" value="false" waitEvent="updateComplete" />
        <SetProperty target="treeRoot.tree1" propertyName="itemRenderer" value="{new ClassFactory(comps.MXTIR_DisclosureGroup)}"  />
        <SetProperty target="treeRoot.tree1" propertyName="editable" value="true" waitEvent="updateComplete" />
        <CompareBitmap url="../properties/baselines/$testID.png" target="treeRoot.tree1"  numColorVariances="10" maxColorVariance="10" />
    </body>
</TestCase>

<TestCase testID="MXTIR_disclosureGroup_setter_002" keywords="[Tree, mxTreeItemRenderer,disclosureGroup]" description="set disclosureGroup with a group having textInput,verify focus is on the group " >
    <setup>
        <ResetComponent target="treeRoot" className="comps.TreeIntegration" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="treeRoot.tree1" propertyName="showRoot" value="false" waitEvent="updateComplete" />
        <SetProperty target="treeRoot.tree1" propertyName="itemRenderer" value="{new ClassFactory(comps.MXTIR_DisclosureGroup)}"  />
        <SetProperty target="treeRoot.tree1" propertyName="editable" value="true" />
        <RunCode code="FlexGlobals.topLevelApplication.treeRoot.tree1.setFocus()" waitEvent="focusIn" waitTarget="treeRoot.tree1" />
        <RunCode code="FlexGlobals.topLevelApplication.treeRoot.tree1.expandChildrenOf(FlexGlobals.topLevelApplication.treeRoot.tree1.dataProvider.children()[0], true)" waitEvent="updateComplete" waitTarget="treeRoot.tree1" />
        <!-- focus on the tree, open, verify the focus item should show up --> 
        <RunCode code="FlexGlobals.topLevelApplication.treeRoot.tree1.setFocus()" waitEvent="focusIn" waitTarget="treeRoot.tree1" />
        <CompareBitmap url="../properties/baselines/$testID.png" target="treeRoot.tree1"  numColorVariances="10" maxColorVariance="10" />
    </body>
</TestCase>

<TestCase testID="MXTIR_disclosureGroup_setter_003" keywords="[Tree, mxTreeItemRenderer,disclosureGroup]" description="set disclosureGroup with a group having textInput and label,verify focus is on the group " >
    <setup>
        <ResetComponent target="treeRoot" className="comps.TreeIntegration" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="treeRoot.tree1" propertyName="showRoot" value="false" waitEvent="updateComplete" />
        <SetProperty target="treeRoot.tree1" propertyName="itemRenderer" value="{new ClassFactory(comps.MXTIR_DisclosureGroup2)}"  />
	<SetProperty target="treeRoot.tree1" propertyName="editable" value="true" />
        <RunCode code="FlexGlobals.topLevelApplication.treeRoot.tree1.setFocus()" waitEvent="focusIn" waitTarget="treeRoot.tree1" />
        <RunCode code="FlexGlobals.topLevelApplication.treeRoot.tree1.expandChildrenOf(FlexGlobals.topLevelApplication.treeRoot.tree1.dataProvider.children()[0], true)" waitEvent="updateComplete" waitTarget="treeRoot.tree1" />
        <!-- focus on the tree, open, verify the focus item should show up --> 
        <RunCode code="FlexGlobals.topLevelApplication.treeRoot.tree1.setFocus()"  waitEvent="focusIn" waitTarget="treeRoot.tree1" />   
        <CompareBitmap url="../properties/baselines/$testID.png" target="treeRoot.tree1"  numColorVariances="10" maxColorVariance="10" />
    </body>
</TestCase>

<TestCase testID="MXTIR_disclosureGroup_setter_004" keywords="[Tree, mxTreeItemRenderer,disclosureGroup]" description="set disclosureGroup with a group having textInput and label,verify focus is on the group " >
    <setup>
        <ResetComponent target="treeRoot" className="comps.TreeIntegration" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="treeRoot.tree1" propertyName="showRoot" value="false" waitEvent="updateComplete" />
        <SetProperty target="treeRoot.tree1" propertyName="itemRenderer" value="{new ClassFactory(comps.MXTIR_DisclosureGroup3)}"  />
	<SetProperty target="treeRoot.tree1" propertyName="editable" value="true" />
        <RunCode code="FlexGlobals.topLevelApplication.treeRoot.tree1.setFocus()" waitEvent="focusIn" waitTarget="treeRoot.tree1" />
        <RunCode code="FlexGlobals.topLevelApplication.treeRoot.tree1.expandChildrenOf(FlexGlobals.topLevelApplication.treeRoot.tree1.dataProvider.children()[0], true)" waitEvent="updateComplete" waitTarget="treeRoot.tree1" />
        <!-- focus on the tree, open, verify the focus item should show up --> 
        <RunCode code="FlexGlobals.topLevelApplication.treeRoot.tree1.setFocus()"  waitEvent="focusIn" waitTarget="treeRoot.tree1" />   
        <CompareBitmap url="../properties/baselines/$testID.png" target="treeRoot.tree1"  numColorVariances="10" maxColorVariance="10" />
    </body>
</TestCase>

<TestCase testID="MXTIR_layout_size_001" keywords="[Tree, mxTreeItemRenderer,size]" description="set width/height for the render,verify render height is respected,width is ignored " >
    <setup>
        <ResetComponent target="treeRoot" className="comps.TreeIntegration" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="treeRoot.tree1" propertyName="showRoot" value="false" waitEvent="updateComplete" />
        <SetProperty target="treeRoot.tree1" propertyName="itemRenderer" value="{new ClassFactory(comps.MXTIR_Layout1)}"  />
	<SetProperty target="treeRoot.tree1" propertyName="editable" value="true" />
        <RunCode code="FlexGlobals.topLevelApplication.treeRoot.tree1.expandChildrenOf(FlexGlobals.topLevelApplication.treeRoot.tree1.dataProvider.children()[0], true)" waitEvent="updateComplete" waitTarget="treeRoot.tree1" />
        <AssertPropertyValue target="treeRoot.tree1" propertyName="rowHeight" value="124" />  
        <AssertPropertyValue target="treeRoot.tree1" propertyName="columnWidth" value="236" /> 
        <CompareBitmap url="../properties/baselines/$testID.png" target="treeRoot.tree1"  numColorVariances="10" maxColorVariance="10" />
    </body>
</TestCase>

<TestCase testID="MXTIR_layout_size_002" keywords="[Tree, mxTreeItemRenderer,size]" description="set height of chidren inside render is calculated as height " >
    <setup>
        <ResetComponent target="treeRoot" className="comps.TreeIntegration" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="treeRoot.tree1" propertyName="showRoot" value="false" waitEvent="updateComplete" />
        <SetProperty target="treeRoot.tree1" propertyName="itemRenderer" value="{new ClassFactory(comps.MXTIR_Layout1)}"  />
	<SetProperty target="treeRoot.tree1" propertyName="editable" value="true" />
	 <SetProperty target="treeRoot.tree1" propertyName="height" value="250" waitEvent="updateComplete" />
        <RunCode code="FlexGlobals.topLevelApplication.treeRoot.tree1.expandChildrenOf(FlexGlobals.topLevelApplication.treeRoot.tree1.dataProvider.children()[0], true)" waitEvent="updateComplete" waitTarget="treeRoot.tree1" />
        <AssertPropertyValue target="treeRoot.tree1" propertyName="rowHeight" value="124" />  
        <CompareBitmap url="../properties/baselines/$testID.png" target="treeRoot.tree1"  numColorVariances="10" maxColorVariance="10" />
    </body>
</TestCase>


<TestCase testID="MXTIR_layout_haloContent_001" keywords="[Tree, mxTreeItemRenderer,content]" description="render has halo contents, verify layout is expected " >
    <setup>
        <ResetComponent target="treeRoot" className="comps.TreeIntegration" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="treeRoot.tree1" propertyName="showRoot" value="false" waitEvent="updateComplete" />
        <SetProperty target="treeRoot.tree1" propertyName="itemRenderer" value="{new ClassFactory(comps.MXTIR_HaloContent)}"  />
	<SetProperty target="treeRoot.tree1" propertyName="editable" value="true" />
	 <SetProperty target="treeRoot.tree1" propertyName="height" value="250" waitEvent="updateComplete" />
        <RunCode code="FlexGlobals.topLevelApplication.treeRoot.tree1.expandChildrenOf(FlexGlobals.topLevelApplication.treeRoot.tree1.dataProvider.children()[0], true)" waitEvent="updateComplete" waitTarget="treeRoot.tree1" />
        <AssertPropertyValue target="treeRoot.tree1" propertyName="rowHeight" value="133" />  
        <CompareBitmap url="../properties/baselines/$testID.png" target="treeRoot.tree1"  numColorVariances="15" ignoreMaxColorVariance="true" />
    </body>
</TestCase>

<TestCase testID="MXTIR_layout_resize_001" keywords="[Tree, mxTreeItemRenderer,size]" description="verify rowHeight is different for different rows based on contents" >
    <setup>
        <ResetComponent target="treeRoot" className="comps.TreeIntegration" waitEvent="updateComplete" />
        <SetProperty target="treeRoot.tree1" propertyName="labelField" value="firstName" waitEvent="updateComplete" waitTarget="treeRoot.tree1" />
        <SetProperty target="treeRoot.tree1" propertyName="dataProvider" valueExpression="value=FlexGlobals.topLevelApplication.treeRoot.hierarr" waitEvent="updateComplete" />
       
    </setup>
    <body>
        <SetProperty target="treeRoot.tree1" propertyName="showRoot" value="false" waitEvent="updateComplete" />
        <SetProperty target="treeRoot.tree1" propertyName="itemRenderer" value="{new ClassFactory(comps.MXTIR_Layout3)}"  />
	<SetProperty target="treeRoot.tree1" propertyName="variableRowHeight" value="true" waitEvent="updateComplete"/>
	<SetProperty target="treeRoot.tree1" propertyName="height" value="250" waitEvent="updateComplete" />      
        <RunCode code="FlexGlobals.topLevelApplication.treeRoot.tree1.expandItem(FlexGlobals.topLevelApplication.treeRoot.tree1.dataProvider[0], true)" waitEvent="updateComplete" waitTarget="treeRoot.tree1" />
        <!-- 
        <DispatchMouseClickEvent target="treeRoot.tree1" localX="106" localY="28" waitEvent="itemClick" waitTarget="treeRoot.tree1"/>
        -->
        <CompareBitmap url="../properties/baselines/$testID.png" target="treeRoot.tree1"  numColorVariances="10" maxColorVariance="10"/>
    </body>
</TestCase>

<TestCase testID="MXTIR_layout_resize_002" keywords="[Tree, mxTreeItemRenderer,size]" description="verify resizing tree will cause row height adjusted" >
   <setup>
           <ResetComponent target="treeRoot" className="comps.TreeIntegration" waitEvent="updateComplete" />
           <SetProperty target="treeRoot.tree1" propertyName="labelField" value="firstName" waitEvent="updateComplete" waitTarget="treeRoot.tree1" />
           <SetProperty target="treeRoot.tree1" propertyName="dataProvider" valueExpression="value=FlexGlobals.topLevelApplication.treeRoot.hierarr" waitEvent="updateComplete" />
          
       </setup>
       <body>
           <SetProperty target="treeRoot.tree1" propertyName="showRoot" value="false" waitEvent="updateComplete" />
           <SetProperty target="treeRoot.tree1" propertyName="itemRenderer" value="{new ClassFactory(comps.MXTIR_Layout3)}"  />
   	   <SetProperty target="treeRoot.tree1" propertyName="variableRowHeight" value="true" waitEvent="updateComplete"/>
   	   <SetProperty target="treeRoot.tree1" propertyName="height" value="350" waitEvent="updateComplete" />
	   <SetProperty target="treeRoot.tree1" propertyName="width" value="250" waitEvent="updateComplete" />     
           <RunCode code="FlexGlobals.topLevelApplication.treeRoot.tree1.expandItem(FlexGlobals.topLevelApplication.treeRoot.tree1.dataProvider[0], true)" waitEvent="updateComplete" waitTarget="treeRoot.tree1" />
           <!-- 
           <DispatchMouseClickEvent target="treeRoot.tree1" localX="106" localY="28" waitEvent="itemClick" waitTarget="treeRoot.tree1"/>
           -->
           <CompareBitmap url="../properties/baselines/$testID.png"  numColorVariances="10" maxColorVariance="10" target="treeRoot.tree1" />
    </body>  
</TestCase>

<TestCase testID="MXTIR_layout_resize_003" keywords="[Tree, mxTreeItemRenderer,size]" description="verify resizing tree, rowHeight is fixed, rowHeight should be adjusted from early variableRowHeight" >
   <setup>
           <ResetComponent target="treeRoot" className="comps.TreeIntegration" waitEvent="updateComplete" />
           <SetProperty target="treeRoot.tree1" propertyName="labelField" value="firstName" waitEvent="updateComplete" waitTarget="treeRoot.tree1" />
           <SetProperty target="treeRoot.tree1" propertyName="dataProvider" valueExpression="value=FlexGlobals.topLevelApplication.treeRoot.hierarr" waitEvent="updateComplete" />
          
       </setup>
       <body>
           <SetProperty target="treeRoot.tree1" propertyName="showRoot" value="false" waitEvent="updateComplete" />
           <SetProperty target="treeRoot.tree1" propertyName="itemRenderer" value="{new ClassFactory(comps.MXTIR_Layout3)}"  />
   	   <SetProperty target="treeRoot.tree1" propertyName="variableRowHeight" value="true" waitEvent="updateComplete"/>
   	   <SetProperty target="treeRoot.tree1" propertyName="height" value="350" waitEvent="updateComplete" />
	   <SetProperty target="treeRoot.tree1" propertyName="width" value="250" waitEvent="updateComplete" />     
           <RunCode code="FlexGlobals.topLevelApplication.treeRoot.tree1.expandItem(FlexGlobals.topLevelApplication.treeRoot.tree1.dataProvider[0], true)" waitEvent="updateComplete" waitTarget="treeRoot.tree1" />
           <SetProperty target="treeRoot.tree1" propertyName="variableRowHeight" value="false" waitEvent="updateComplete"/>
           <SetProperty target="treeRoot.tree1" propertyName="rowHeight" value="30" waitEvent="updateComplete"/>
           <!-- 
           <DispatchMouseClickEvent target="treeRoot.tree1" localX="106" localY="28" waitEvent="itemClick" waitTarget="treeRoot.tree1"/>
           -->
           <CompareBitmap url="../properties/baselines/$testID.png"  numColorVariances="10" maxColorVariance="10" target="treeRoot.tree1" />
    </body>  
</TestCase>


<TestCase testID="MXTIR_layout_resize_004" keywords="[Tree, mxTreeItemRenderer,size]" description="verify resizing tree, rowHeight is fixed, rowHeight should be adjusted from early variableRowHeight" >
   <setup>
           <ResetComponent target="treeRoot" className="comps.TreeIntegration" waitEvent="updateComplete" />
           <SetProperty target="treeRoot.tree1" propertyName="labelField" value="firstName" waitEvent="updateComplete" waitTarget="treeRoot.tree1" />
           <SetProperty target="treeRoot.tree1" propertyName="dataProvider" valueExpression="value=FlexGlobals.topLevelApplication.treeRoot.hierarr" waitEvent="updateComplete" />
          
       </setup>
       <body>
           <SetProperty target="treeRoot.tree1" propertyName="showRoot" value="false" waitEvent="updateComplete" />
	   <SetProperty target="treeRoot.tree1" propertyName="editable" value="true" />
	   <SetProperty target="treeRoot.tree1" propertyName="itemRenderer" value="{new ClassFactory(comps.MXTIR_Layout3)}"  />
	   <SetProperty target="treeRoot.tree1" propertyName="itemEditor" value="{new ClassFactory(comps.MXTIR_TextInput)}" />
	   <SetProperty target="treeRoot.tree1" propertyName="variableRowHeight" value="true" waitEvent="updateComplete"/>
	   <SetProperty target="treeRoot.tree1" propertyName="height" value="350"  />
	   <SetProperty target="treeRoot.tree1" propertyName="width" value="250" waitEvent="updateComplete" />
	   

	   <DispatchMouseClickEvent target="treeRoot.tree1" localX="160" localY="24" waitEvent="click" waitTarget="treeRoot.tree1"/>
	   <DispatchMouseClickEvent target="treeRoot.tree1" localX="160" localY="24" waitEvent="click" waitTarget="treeRoot.tree1"/>

	   <DispatchKeyEvent char="this is a long string to test variable row height" />

	   <Pause timeout="200" />

	   <DispatchMouseClickEvent target="treeRoot.tree1" localX="100" localY="60" waitEvent="click" waitTarget="treeRoot.tree1"/>

	   	 
           <CompareBitmap url="../properties/baselines/$testID.png"  numColorVariances="10" maxColorVariance="10" target="treeRoot.tree1" />
    </body>  
</TestCase>

<TestCase testID="MXTIR_codecoverage_001" keywords="[Tree, mxItemRenderer,setFocus,Text]" description="code coverage test for setFocus, get text " >
    <setup>
        <ResetComponent target="treeRoot" className="comps.TreeIntegration" waitEvent="updateComplete" />
    </setup>
    <body>
        <SetProperty target="treeRoot.tree1" propertyName="showRoot" value="false" waitEvent="updateComplete" />
        <SetProperty target="treeRoot.tree1" propertyName="itemRenderer" value="{new ClassFactory(comps.MXTIR_DisclosureGroup)}"  />
        <RunCode code="txt=MXItemRenderer(FlexGlobals.topLevelApplication.treeRoot.tree1.itemRenderer.newInstance()).text"/>
        <RunCode code="MXItemRenderer(FlexGlobals.topLevelApplication.treeRoot.tree1.itemRenderer.newInstance()).setFocus()"/>
        
        </body>
</TestCase>


	</testCases>
</UnitTester>
