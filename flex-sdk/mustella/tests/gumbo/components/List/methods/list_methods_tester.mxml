<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<UnitTester testDir="gumbo/components/List/methods/"  xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"  xmlns:m="http://ns.adobe.com/mxml/2009" xmlns="*" testSWF="ListBasic.mxml">

    <!-- this set of lines form a template that must be in each unit test -->

    <fx:Script>
        <![CDATA[
        public static function init(o:DisplayObject):void
        {
        }
        ]]>
    </fx:Script>

    <fx:Metadata>
        <![CDATA[
            [Mixin]
        ]]>
    </fx:Metadata>
    <!-- end of set of lines that must be in each unit test -->
    <fx:Script>
    <![CDATA[
        import comps.*;
        import spark.layouts.*;
        import mx.collections.ArrayCollection;
        import mx.core.mx_internal;
        use namespace mx_internal;
    ]]>
    </fx:Script>
    <testCases>

        <!--             selectedIndex                        -->

        <TestCase testID="List_method_addItem_same_comp_selectedIndex" keywords="[List, method, addItem]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty    target="list1" propertyName="layout"  valueExpression="value=new HorizontalLayout()" />
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([])" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list2" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([])" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <RunCode code="application.list1.itemRendererFunction=application.useDefaultComplexItemRenderer"  />
                <RunCode code="application.list2.itemRendererFunction=application.useDefaultComplexItemRenderer"  />
                <SetProperty    target="list1" propertyName="width"  value="400" waitEvent="updateComplete"/>
                <SetProperty    target="list2" propertyName="height"  value="600" waitEvent="updateComplete"/>
            </setup>
            <body>
                <RunCode code="application.list1.dataProvider.addItem(new comps.SelectorComp)" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <RunCode code="application.list2.dataProvider.addItem(new comps.SelectorComp)" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <RunCode code="application.list2.dataProvider.addItem(new comps.SelectorComp)" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <RunCode code="application.list2.dataProvider.addItem(new comps.SelectorComp)" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <RunCode code="application.list2.dataProvider.addItem(new comps.SelectorComp)" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <RunCode code="application.list2.dataProvider.addItem(new comps.SelectorComp)" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <SetProperty    target="list1" propertyName="selectedIndex"  value="0" />
                <SetProperty    target="list2" propertyName="selectedIndex"  value="3" />
                <RunCode code="application.list2.dataProvider.removeItemAt(0)" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <RunCode code="application.list2.dataProvider.removeItemAt(3)" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <RunCode code="application.list2.dataProvider.removeItemAt(0)" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <RunCode code="application.list1.dataProvider.removeItemAt(0)" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <AssertPropertyValue target = "list2.dataProvider" propertyName="length" value="2" />
                <AssertPropertyValue target = "list1.dataProvider" propertyName="length" value="0" />
                <AssertPropertyValue target = "list1" propertyName="selectedIndex"  value="-1" />
                <AssertPropertyValue target = "list2" propertyName="selectedIndex"  value="1" />

                <SetProperty    target="list2" propertyName="width"  value="200" waitEvent="updateComplete"/>
                <SetProperty    target="list2" propertyName="height"  value="400" waitEvent="updateComplete"/>
                <CompareBitmap url="../methods/baselines/$testID.png" target="list2" />

            </body>
        </TestCase>
        <TestCase testID="List_method_arrayCollection_ellipse_selectedIndex" keywords="[List, method,arrayCollection,selectedIndex" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />

            </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.ColorEllipseRenderer);"  />
                <RunCode code="application.createEllipseAC()" />
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.ellipseAC" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="selectedIndex" value="2" waitEvent="updateComplete" />

                <SetProperty target="list1" propertyName="layout" valueExpression="value=new HorizontalLayout()" waitEvent="updateComplete" />
                <AssertMethodValue   method="value=application.list1.selectedItem.label" value="gray" />

            </body>
        </TestCase>

        <TestCase testID="List_method_addItem_graphics_comps" keywords="[List, method, dataProvider.addItem]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty    target="list1" propertyName="layout"  valueExpression="value=new HorizontalLayout()"  />
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([])" />
                <SetProperty target="list2" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([])"  />
                <RunCode code="application.list1.itemRendererFunction=application.useDefaultComplexItemRenderer"  />
                <RunCode code="application.list2.itemRendererFunction=application.useDefaultComplexItemRenderer"  />
                <SetProperty target="list1" propertyName="width"  value="500" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="height"  value="600" waitEvent="updateComplete" />

            </setup>
            <body>
                <RunCode code="application.list1.dataProvider.addItem(new comps.EllipseBasic)"      waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <RunCode code="application.list1.dataProvider.addItem(new comps.SelectorComp)"      waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <RunCode code="application.list1.dataProvider.addItem(new comps.FancyPanelComp)"    waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <RunCode code="application.list1.dataProvider.addItem(new comps.GraphicStatesComp)" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <RunCode code="application.list1.dataProvider.addItem(new comps.RectBasicComp)"     waitEvent="updateComplete" waitTarget="list1.dataGroup"/>

                <AssertPropertyValue target="list1.dataProvider" propertyName="length" value="5" />
                <AssertPropertyValue target="list2.dataProvider" propertyName="length" value="0" />

                <SetProperty target="list1" propertyName="height"  value="300" waitEvent="updateComplete" />
                <CompareBitmap url="../methods/baselines/$testID.png" target="list1" />
            </body>
        </TestCase>

        <TestCase testID="List_method_addItem_string_elements_array_selectedItem_remove" keywords="[List, method, dataProvider.addItem, array]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty    target="list1" propertyName="layout"  valueExpression="value=new HorizontalLayout()"  />
            </setup>
            <body>
                <SetProperty    target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['a','b','c'])"   waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty    target="list2" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([1,2,3,4])"   waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <AssertPropertyValue target = "list1.dataProvider" propertyName="length" value="3" />
                <AssertPropertyValue target = "list2.dataProvider" propertyName="length" value="4" />
                <AssertMethodValue   method="value=application.list1.dataProvider.getItemAt(0)" value="a" />
                <AssertMethodValue   method="value=application.list2.dataProvider.getItemAt(1)" value="2" />
                <RunCode code="application.list1.dataProvider.addItem('d');"  waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <RunCode code="application.list1.dataProvider.addItemAt('e',0);"  waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <AssertMethodValue   method="value=application.list1.dataProvider.getItemAt(0)" value="e" />
                <RunCode code="application.list2.dataProvider.addItem('d');"  waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <SetProperty    target="list2" propertyName="selectedItem" value="d" waitEvent="updateComplete" />
                <SetProperty    target="list1" propertyName="selectedItem" value="d" waitEvent="updateComplete" />
                <AssertPropertyValue target = "list2.dataProvider" propertyName="length" value="5" />
                <RunCode code="application.list2.dataProvider.removeItemAt(4);"  waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <AssertPropertyValue target = "list2" propertyName="selectedIndex" value="-1" />
                <RunCode code="application.list1.dataProvider.removeItemAt(4);"  waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="-1" />
            </body>
        </TestCase>

        <!--            dataProvider.addItemAt          -->

        <TestCase testID="List_method_arrayCollection_binding_addItemAt" keywords="[List, method,arrayCollection,binding, dataProvider.addItemAt, bug15940]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty    target="list1" propertyName="layout"  valueExpression="value=new HorizontalLayout()"  />
            </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.PlayerRenderer);"  />
                <RunCode code="application.list2.itemRenderer=new ClassFactory(comps.PlayerRenderer);"  />
                <RunCode code="application.sortAC();application.createPlayersAC()" />
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.players" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list2" propertyName="dataProvider" valueExpression="value=application.ac" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <RunCode code="application.ac.addItemAt(application.newPlayer, 0);" waitEvent="updateComplete"  waitTarget="list2.dataGroup" />
                <AssertPropertyValue target = "list2.dataProvider" propertyName="length" value="5" />
                <RunCode code="application.list1.dataProvider.addItemAt(application.newPlayer, 0);" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <AssertPropertyValue target = "list1.dataProvider" propertyName="length" value="8" />

            </body>
        </TestCase>
        <TestCase testID="List_method_addItemAt_elements_array_selected" keywords="[List, method, dataProvider.addItemAt, array]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty    target="list1" propertyName="layout"  valueExpression="value=new HorizontalLayout()"  />
            </setup>
            <body>
                <SetProperty    target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['a','b','c'])"   waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty    target="list2" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([1,2,3,4])"   waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <SetProperty    target="list1" propertyName="selectedIndex" value="0" />
                <RunCode code="application.list1.dataProvider.addItemAt('d',0);"  waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <AssertPropertyValue target = "list1" propertyName="selectedItem" value="a" />
                <RunCode code="application.list1.dataProvider.addItemAt('e',4);"  waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty    target="list1" propertyName="selectedIndex" value="4" waitEvent="updateComplete"/>
                <AssertPropertyValue target = "list1" propertyName="selectedItem" value="e" />

                <AssertMethodValue   method="value=application.list1.dataProvider.getItemAt(0)" value="d" />
                <AssertMethodValue   method="value=application.list1.dataProvider.getItemAt(4)" value="e" />
                <RunCode code="application.list2.dataProvider.addItemAt('abc',4);"  waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <SetProperty    target="list2" propertyName="selectedIndex" value="4" waitEvent="updateComplete"/>
                <AssertPropertyValue target = "list1.dataProvider" propertyName="length" value="5" />
                <AssertPropertyValue target = "list2.dataProvider" propertyName="length" value="5" />

            </body>
        </TestCase>
        <!--             dataProvider.getItemAt, getItemIndex                         -->
        <TestCase testID="List_method_arrayCollection_binding_getItemAt" keywords="[List, method,arrayCollection,binding, dataProvider.getItemAt]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty    target="list1" propertyName="layout"  valueExpression="value=new HorizontalLayout()"  />
            </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.PlayerRenderer);"  />
                <RunCode code="application.createPlayersAC()" />
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.players" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <RunCode code="application.list1.dataProvider.addItem(application.newPlayer);" waitEvent="updateComplete"  waitTarget="list1.dataGroup" />
                <AssertPropertyValue target = "list1.dataProvider" propertyName="length" value="8" />
                <AssertMethodValue   method="value=application.list1.dataProvider.getItemIndex(application.newPlayer)" value="7" />
            </body>
        </TestCase>
        <TestCase testID="List_method_arrayCollection_getItemAt" keywords="[List, method,arrayCollection,binding, dataProvider.getItemAt]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty    target="list1" propertyName="layout"  valueExpression="value=new HorizontalLayout()"  />
            </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.PlayerRenderer);"  />
                <RunCode code="application.createPlayersAC()" />
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.players" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <RunCode code="application.list1.dataProvider.addItemAt(application.newPlayer,1);" waitEvent="updateComplete"  waitTarget="list1.dataGroup" />
                <AssertPropertyValue target = "list1.dataProvider" propertyName="length" value="8" />
                <AssertMethodValue   method="value=application.list1.dataProvider.getItemIndex(application.newPlayer)" value="1" />
            </body>
        </TestCase>

        <!--              dataProvider.removeItem                          -->

        <TestCase testID="List_method_arrayCollection_removeItem" keywords="[List, method,arrayCollection,binding, dataProvider.removeItem]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.PlayerRenderer);"  />
                <RunCode code="application.createPlayersAC()" />
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.players" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="selectedIndex" value="1" waitEvent="valueCommit" waitTarget="list1"/>
                <RunCode code="application.list1.dataProvider.removeItemAt(1);" waitEvent="updateComplete"  waitTarget="list1.dataGroup" />
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="-1" />

            </body>
        </TestCase>
        <TestCase testID="List_method_arrayCollection_ellipse_removeItem" keywords="[List, method,arrayCollection, dataProvider.removeItem" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([])" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list2" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([])" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>

            </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.ColorEllipseRenderer);"  />
                <RunCode code="application.createEllipseAC()" />
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.ellipseAC" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="selectedIndex" value="6" waitEvent="updateComplete" />
                <RunCode code="application.list1.dataProvider.removeItemAt(6);" waitEvent="updateComplete"  waitTarget="list1.dataGroup" />
                <SetProperty target="list1" propertyName="layout" valueExpression="value=new HorizontalLayout()" waitEvent="updateComplete" />
                <AssertPropertyValue   target = "list1" propertyName="selectedIndex" value="-1" />

            </body>
        </TestCase>

        <!--             dataProvider.removeItemAt                          -->

        <TestCase testID="List_method_arrayCollection_binding_removeItemAt" keywords="[List, method,arrayCollection,binding, bug15925]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty    target="list1" propertyName="layout"  valueExpression="value=new HorizontalLayout()"  />
            </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.PlayerRenderer);"  />
                <RunCode code="application.list2.itemRenderer=new ClassFactory(comps.PlayerRenderer);"  />
                <RunCode code="application.sortAC();application.createPlayersAC()" />
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=application.players" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list2" propertyName="dataProvider" valueExpression="value=application.ac" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <AssertPropertyValue target = "list1.dataProvider" propertyName="length" value="7" />
                <AssertPropertyValue target = "list2.dataProvider" propertyName="length" value="4" />
                <AssertMethodValue   method="value=application.list1.dataProvider.getItemAt(0).team" value="ATeam" />
                <AssertMethodValue   method="value=application.list2.dataProvider.getItemAt(0).firstName" value="AdName" />
                <RunCode code="application.ac.removeItemAt(0);" waitEvent="updateComplete"  waitTarget="list2.dataGroup" />
                <AssertPropertyValue target = "list2.dataProvider" propertyName="length" value="3" />
                <AssertMethodValue   method="value=application.list2.dataProvider.getItemAt(1).firstName" value="RaName" />
                <RunCode code="application.ac.removeItemAt(0);" waitEvent="updateComplete"  waitTarget="list2.dataGroup" />
                <AssertMethodValue   method="value=application.list2.dataProvider.getItemAt(0).firstName" value="RaName" />
                <RunCode code="application.ac.removeItemAt(0);" waitEvent="updateComplete"  waitTarget="list2.dataGroup" />
                <AssertPropertyValue target = "list2.dataProvider" propertyName="length" value="1" />
                <AssertMethodValue   method="value=application.list2.dataProvider.getItemAt(0).firstName" value="DaName" />
                <RunCode code="application.ac.removeItemAt(0);" waitEvent="updateComplete"  waitTarget="list2.dataGroup" />
                <AssertPropertyValue target = "list2.dataProvider" propertyName="length" value="0" />
            </body>
        </TestCase>
        <TestCase testID="List_method_arrayCollection_ellipse_removeItemAt" keywords="[List, method,arrayCollection, dataProvider.removeItemAt" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />

            </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.ColorEllipseRenderer);"  />
                <RunCode code="application.createEllipseAC()" />
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.ellipseAC" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="selectedIndex" value="6" waitEvent="updateComplete" />
                <RunCode code="application.list1.dataProvider.removeItemAt(6);" waitEvent="updateComplete"  waitTarget="list1.dataGroup" />
                <SetProperty target="list1" propertyName="layout" valueExpression="value=new HorizontalLayout()" waitEvent="updateComplete" />
                <AssertPropertyValue   target = "list1" propertyName="selectedIndex" value="-1" />

            </body>
        </TestCase>
        <TestCase testID="List_method_graphics_removeItemAt" keywords="[List, method,dataProvider.removeItemAt]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([])" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list2" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([])" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>

            </setup>
            <body>
                <RunCode code="application.list1.itemRendererFunction=application.useDefaultComplexItemRenderer"  />
                <RunCode code="application.list2.itemRendererFunction=application.useDefaultComplexItemRenderer"  />
                <RunCode code="application.list1.dataProvider.addItem(application.createGroup(0xFF0000,20,30))" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <RunCode code="application.list1.dataProvider.addItem(application.createGroup(0x00FF00,30,40))" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <RunCode code="application.list2.dataProvider.addItem(application.createGroup(0xFFFF00,40,50))" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <RunCode code="application.list2.dataProvider.addItem(application.createGroup(0x0000FF,50,60))" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <RunCode code="application.list2.dataProvider.addItem(application.createGroup(0x0000FF,50,60))" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>

                <SetProperty target="list1" propertyName="selectedIndex" value="1" waitEvent="updateComplete" />
                <SetProperty target="list2" propertyName="selectedIndex" value="1" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="layout" valueExpression="value=new HorizontalLayout()" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <RunCode code="application.list1.dataProvider.removeItemAt(0);" waitEvent="updateComplete" waitTarget="list1.dataGroup" />
                <RunCode code="application.list2.dataProvider.removeItemAt(1);" waitEvent="updateComplete" waitTarget="list2.dataGroup" />
                <CompareBitmap url="../methods/baselines/$testID.png" target="list1" />
                <AssertPixelValue    target = "list2" x="20"  y="20" value="0xFFFF00" />
            </body>
        </TestCase>
        <TestCase testID="List_method_graphics_content_removeItemAt" keywords="[List, method,dataProvider.removeItemAt]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([])" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list2" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([])" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>

            </setup>
            <body>
                <RunCode code="application.list1.itemRendererFunction=application.useDefaultComplexItemRenderer"  />
                <RunCode code="application.list2.itemRendererFunction=application.useDefaultComplexItemRenderer"  />
                <SetProperty target="list1" propertyName="width"  value="300" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list2" propertyName="width"  value="300" waitEvent="updateComplete" waitTarget="list2"/>
                <!--
                <RunCode code="application.list1.dataProvider.addItem(application.createGroup(0xFF0000,20,30))" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <RunCode code="application.list1.dataProvider.addItem(application.createGroup(0x00FF00,30,40))" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <RunCode code="application.list2.dataProvider.addItem(application.createGroup(0xFFFF00,40,50))" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <RunCode code="application.list2.dataProvider.addItem(application.createGroup(0x0000FF,50,60))" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>

                <SetProperty target="list1" propertyName="selectedIndex" value="1" waitEvent="updateComplete" />
                <SetProperty target="list2" propertyName="selectedIndex" value="1" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="layout" valueExpression="value=new HorizontalLayout()" waitEvent="updateComplete" />
                <RunCode code="application.list1.dataProvider[0].dataProvider.removeItemAt(0);"  />
                <RunCode code="application.list2.dataProvider[0].dataProvider.removeItemAt(1);"  />
                <AssertPixelValue    target = "list1" x="5"  y="80" value="0xFFFFFF" />
                <AssertPixelValue    target = "list1" x="80" y="20" value="0x33FFFF" />
                <AssertPixelValue    target = "list2" x="5"  y="80" value="0xFFFFFF" />
                -->
            </body>
        </TestCase>

        <!--             removeAll                        -->

        <TestCase testID="List_method_arrayCollection_binding_removeAll" keywords="[List, method,arrayCollection,binding, removeAll, bug15925]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty    target="list1" propertyName="layout"  valueExpression="value=new HorizontalLayout()"  />
            </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.PlayerRenderer);"  />
                <RunCode code="application.list2.itemRenderer=new ClassFactory(comps.PlayerRenderer);"  />
                <RunCode code="application.sortAC();application.createPlayersAC()" />
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=application.players" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list2" propertyName="dataProvider" valueExpression="value=application.ac" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <RunCode code="application.ac.removeAll();" />
                <RunCode code="application.list1.dataProvider.removeAll();" waitEvent="updateComplete"  waitTarget="list1.dataGroup" />
                <AssertPropertyValue target = "list1.dataProvider" propertyName="length" value="0" />
                <AssertPropertyValue target = "list2.dataProvider" propertyName="length" value="0" />

            </body>
        </TestCase>
        <TestCase testID="List_method_arrayCollection_removeAll" keywords="[List, method,arrayCollection,binding, dataProvider.removeItem]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.PlayerRenderer);"  />
                <RunCode code="application.createPlayersAC()" />
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.players" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="selectedIndex" value="1" waitEvent="valueCommit" waitTarget="list1"/>
                <RunCode code="application.list1.dataProvider.removeItemAt(1);" waitEvent="updateComplete"  waitTarget="list1.dataGroup" />
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="-1" />

            </body>
        </TestCase>
        <TestCase testID="List_method_arrayCollection_ellipse_removeAll" keywords="[List, method,arrayCollection, removeAll" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />

            </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.ColorEllipseRenderer);"  />
                <RunCode code="application.createEllipseAC()" />
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.ellipseAC" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="selectedIndex" value="6" waitEvent="updateComplete" />
                <RunCode code="application.list1.dataProvider.removeAll();" waitEvent="updateComplete"  waitTarget="list1.dataGroup" />
                <AssertPropertyValue   target = "list1" propertyName="selectedIndex" value="-1" />
                <AssertPropertyValue   target = "list1.dataProvider" propertyName="length" value="0" />
            </body>
        </TestCase>
        <TestCase testID="List_method_arrayCollection_isItemSelected" keywords="[List, method,arrayCollection]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.PlayerRenderer);"  />
                <RunCode code="application.createPlayersAC()" />
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.players" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="selectedIndex" value="1" waitEvent="valueCommit" waitTarget="list1"/>
                <!--AssertMethodValue method="value=application.list1.isItemSelected(application.players[1])" value="true" /-->
                <RunCode code="application.list1.dataProvider.removeItemAt(1);" waitEvent="updateComplete"  waitTarget="list1.dataGroup" />
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="-1" />
                <!--AssertMethodValue method="value=application.list1.isItemSelected(application.players[1])" value="false" /-->

            </body>
        </TestCase>
        <TestCase testID="List_method_arrayCollection_isItemIndexSelected" keywords="[List, method,arrayCollection]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.PlayerRenderer);"  />
                <RunCode code="application.createPlayersAC()" />
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.players" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="selectedIndex" value="0" waitEvent="valueCommit" waitTarget="list1"/>
                <AssertMethodValue method="value=application.list1.mx_internal::isItemIndexSelected(0)" value="true" />
                <RunCode code="application.list1.dataProvider.removeItemAt(0);" waitEvent="updateComplete"  waitTarget="list1.dataGroup" />
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="-1" />
                <AssertMethodValue method="value=application.list1.mx_internal::isItemIndexSelected(application.players[0])" value="false" />

            </body>
        </TestCase>
       <TestCase testID="List_method_arrayCollection_isItemInCaret" keywords="[List, method,arrayCollection]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.PlayerRenderer);"  />
                <RunCode code="application.createPlayersAC()" />
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.players" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="selectedIndex" value="1" waitEvent="valueCommit" waitTarget="list1"/>
                <AssertMethodValue method="value=application.list1.mx_internal::isItemIndexShowingCaret(application.players[1])" value="false" />
                <RunCode code="application.list1.dataProvider.removeItemAt(1);" waitEvent="updateComplete"  waitTarget="list1.dataGroup" />
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="-1" />
                <DispatchKeyEvent keys="[TAB]" waitTarget="list1" waitEvent="focusIn" />
                <DispatchKeyEvent keys="[HOME]"  waitEvent="caretChange"  waitTarget="list1"/>

                <AssertMethodValue method="value=application.list1.mx_internal::isItemIndexShowingCaret(application.players[0])" value="true" />

            </body>
        </TestCase>

       <TestCase testID="List_method_itemIndex_binding_sdk-24086" keywords="[List, method, dataProvider.addItem, sdk-24086]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />

            </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.ItemIndexRenderer);"  />
                <SetProperty    target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['a','b','c'])"   waitEvent="updateComplete" waitTarget="list1.dataGroup"/>

                <RunCode code="application.list1.dataProvider.addItem('d');"  waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <RunCode code="application.list1.dataProvider.addItemAt('e',0);"  waitEvent="updateComplete" waitTarget="list1.dataGroup"/>

                <RunCode code="application.list1.dataProvider.removeItemAt(4);"  waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <CompareBitmap numColorVariances="7" maxColorVariance="20"   url="../methods/baselines/$testID.png" target="list1"  />
            </body>
        </TestCase>


    </testCases>


</UnitTester>
