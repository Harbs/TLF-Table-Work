<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<UnitTester testDir="gumbo/components/List/properties/"  xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"
xmlns="*" testSWF="ListBasic.mxml">

    <!-- this set of lines form a template that must be in each unit test -->

    <fx:Script>
        <![CDATA[
        public static function init(o:DisplayObject):void
        {
        }
        ]]>
    </fx:Script>

    <fx:Metadata>
        <![CDATA[
            [Mixin]
        ]]>
    </fx:Metadata>
    <!-- end of set of lines that must be in each unit test -->
    <fx:Script>
    <![CDATA[

        import comps.*;
        import mx.collections.*;
        import spark.layouts.*;

    ]]>
    </fx:Script>
    <testCases>

        <TestCase testID="List_ms_property_arrayCollection__selectedIndex_dup0" keywords="[List, property,selectedIndex]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createNullDupAC()" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="selectedItem" value="a" waitEvent="valueCommit" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="height" value="100" waitEvent="updateComplete" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="4" />
                <DispatchKeyEvent keys="[TAB]" waitTarget="list1" waitEvent="focusIn" />
                <DispatchKeyEvent keys="[PAGE_DOWN]"  waitTarget="list1" waitEvent="updateComplete"/>
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="6" />
            </body>
        </TestCase>
        <TestCase testID="List_ms_property_arrayCollection__selectedIndex_dup1" keywords="[List, property,selectedIndex]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createNullDupAC()" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="selectedItem" value="A" waitEvent="valueCommit" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="height" value="100" waitEvent="updateComplete" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="1" />
                <DispatchKeyEvent keys="[TAB]" waitTarget="list1" waitEvent="focusIn" />
                <DispatchKeyEvent keys="[END]"  waitTarget="list1" waitEvent="updateComplete"/>
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="37" />
            </body>
        </TestCase>
        <TestCase testID="List_ms_property_arrayCollection__selectedIndex_dup2" keywords="[List, property,selectedIndex]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createNullDupAC()" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="selectedIndex" value="0" waitEvent="valueCommit" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="height" value="100" waitEvent="updateComplete" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedItem" valueExpression="value=null" />
                <DispatchKeyEvent keys="[TAB]" waitTarget="list1" waitEvent="focusIn" />
                <DispatchKeyEvent keys="[END]"  waitTarget="list1" waitEvent="updateComplete"/>
                <DispatchKeyEvent keys="[HOME]"  waitTarget="list1" waitEvent="updateComplete"/>
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="0" />
                <AssertPropertyValue target = "list1" propertyName="selectedItem" valueExpression="value=null" />
            </body>
        </TestCase>
        <TestCase testID="List_ms_property_arrayCollection__selectedIndex_dup_addItem0" keywords="[List, property,selectedIndex]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createNullDupAC()" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="selectedItem" value="a" waitEvent="valueCommit" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="height" value="100" waitEvent="updateComplete" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="4" />
                <RunCode code="application.list1.dataProvider.addItemAt('a',0)" />
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="5" />
            </body>
        </TestCase>
        <TestCase testID="List_ms_property_arrayCollection__selectedIndex_dup_addItem1" keywords="[List, property,selectedIndex]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createNullDupAC()" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="selectedItem" value="Z" waitEvent="valueCommit" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="height" value="100" waitEvent="updateComplete" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="31" />
                <RunCode code="application.list1.dataProvider.addItem('Z')" />
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="31" />
            </body>
        </TestCase>
        <TestCase testID="List_ms_property_arrayCollection__selectedIndex_dup_addItem2" keywords="[List, property,selectedIndex]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createNullDupAC()" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="selectedIndex" value="0" waitEvent="valueCommit" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="height" value="100" waitEvent="updateComplete" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedItem" valueExpression="value=null" />
                <DispatchKeyEvent keys="[TAB]" waitTarget="list1" waitEvent="focusIn" />
                <DispatchKeyEvent keys="[END]"  waitTarget="list1" waitEvent="updateComplete"/>
                <RunCode code="application.list1.dataProvider.addItemAt('A',0)" />
                <DispatchKeyEvent keys="[HOME]"  waitTarget="list1" waitEvent="updateComplete"/>
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="0" />

            </body>
        </TestCase>
        <TestCase testID="List_ms_property_default_size" keywords="[List, property, default]" description="">
                <setup>
                    <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                    <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                    <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                    <SetProperty target="list1" propertyName="requireSelection" value="true" />
                </setup>
                <body>
                    <AssertPropertyValue target = "list1" propertyName="width" value="112" />
                    <AssertPropertyValue target = "list2" propertyName="height" value="112" />

                </body>
        </TestCase>
        <TestCase testID="List_ms_property_selectedIndex_simple_array" keywords="[List, property, selectedIndex, array]" description="">
                <setup>
                    <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                    <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                    <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                    <SetProperty target="list1" propertyName="requireSelection" value="true" />
                    <SetProperty target="list2" propertyName="allowMultipleSelection" value="true" />
                    <SetProperty target="list2" propertyName="requireSelection" value="true" />
                </setup>
                <body>
                    <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['1','2','3'])" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                    <SetProperty target="list2" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['john','tim','david'])" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                    <SetProperty target="list2" propertyName="selectedIndex"  value="2" waitEvent="updateComplete" waitTarget="list2"/>
                    <AssertPropertyValue target = "list1.dataProvider" propertyName="length" value="3" />
                    <AssertPropertyValue target = "list2.dataProvider" propertyName="length" value="3" />
                    <AssertMethodValue   method="value=application.list1.dataProvider.getItemAt(0).toString()" value="1" />
                    <AssertMethodValue   method="value=application.list2.dataProvider.getItemAt(2).toString()" value="david" />
                    <AssertPixelValue    target="list1" x="2"  y="9"  value="0xA8C6EE" />
                    <AssertPixelValue    target="list2" x="2"  y="54"  value="0xA8C6EE" />

                </body>
        </TestCase>
        <TestCase testID="List_ms_property_selectedItem_simple_array" keywords="[List, property, selectedItem, array]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="requireSelection" value="true" />
                <SetProperty target="list2" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list2" propertyName="requireSelection" value="true" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['1','2','3'])" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list2" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['john','tim','david'])" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <SetProperty target="list1" propertyName="selectedItem"  valueExpression="value=application.list1.dataProvider.getItemAt(0)"  />
                <SetProperty target="list2" propertyName="selectedItem"  valueExpression="value=application.list2.dataProvider.getItemAt(2)" waitEvent="valueCommit" />
                <AssertPropertyValue target="list1" propertyName="selectedIndex" value="0" />
                <AssertPropertyValue target="list2" propertyName="selectedIndex" value="2" />
                <AssertPixelValue    target="list1" x="2"  y="9"  value="0xA8C6EE" />
                <AssertPixelValue    target="list2" x="2"  y="54"  value="0xA8C6EE" />
                <SetProperty    target="list1" propertyName="layout"  valueExpression="value=new HorizontalLayout()"   waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty    target="list2" propertyName="layout"  valueExpression="value=new HorizontalLayout()"   waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <AssertPixelValue    target="list1" x="2"  y="9"  value="0xA8C6EE" />
                <AssertPixelValue    target="list2" x="72"  y="1"  value="0xA8C6EE" />

            </body>
        </TestCase>

        <TestCase testID="List_ms_property_selectedIndex_custom_array" keywords="[List, property, selectedIndex, array]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty    target="list1" propertyName="layout"  valueExpression="value=new HorizontalLayout()"  />
                <SetProperty target="list1" propertyName="width"  value="500" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list2" propertyName="height" value="200" waitEvent="updateComplete" waitTarget="list2"/>
                <SetProperty target="list2" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list2" propertyName="requireSelection" value="true" />
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="requireSelection" value="true" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(application.abcArr)" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list2" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(application.abcArr)" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <RunCode code="application.list1.selectedIndex=13" waitEvent="updateComplete" waitTarget="list1" />
                <RunCode code="application.list2.selectedIndex=0"  />
                <AssertPropertyValue target = "list1.dataProvider" propertyName="length" value="14" />
                <AssertPropertyValue target = "list2.dataProvider" propertyName="length" value="14" />
                <AssertMethodValue   method="value=application.list2.dataProvider.getItemAt(0)" value=" " />
                <AssertMethodValue   method="value=application.list1.dataProvider.getItemAt(13)" value="L" />
                <CompareBitmap numColorVariances="5" maxColorVariance="10" url="../properties/baselines/$testID.png" target="list2" />
            </body>
        </TestCase>
        <TestCase testID="List_ms_property_selectedIndex_custom_array_click" keywords="[List, property, selectedIndex, array]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty    target="list1" propertyName="layout"  valueExpression="value=new HorizontalLayout()" waitEvent="updateComplete"  waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="requireSelection" value="true" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(application.abcArr)" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list2" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(application.abcArr)" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <DispatchMouseClickEvent target="list1" localX="3"  localY="3"  />
                <DispatchMouseClickEvent target="list2" localX="8"    localY="8"  />
                <SetProperty target="list1" propertyName="width"  value="280" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="height" value="60" waitEvent="updateComplete" waitTarget="list1"/>

                <CompareBitmap  numColorVariances="15" maxColorVariance="5" url="../properties/baselines/$testID.png" target="list1" />
            </body>
        </TestCase>
        <TestCase testID="List_ms_property_selectedIndex_simple_array_swap_layout" keywords="[List, property, selectedIndex, array]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="requireSelection" value="true" />
                <SetProperty target="list2" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list2" propertyName="requireSelection" value="true" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['1','2','3'])" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list2" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['john','tim','david'])" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <SetProperty target="list1" propertyName="selectedIndex"  value="0"  />
                <SetProperty target="list2" propertyName="selectedIndex"  value="2" waitEvent="valueCommit" />
                <AssertPropertyValue target = "list1.dataProvider" propertyName="length" value="3" />
                <AssertPropertyValue target = "list2.dataProvider" propertyName="length" value="3" />
                <AssertMethodValue   method="value=application.list1.dataProvider.getItemAt(0)" value="1" />
                <AssertMethodValue   method="value=application.list2.dataProvider.getItemAt(2)" value="david" />
                <AssertPixelValue    target="list1" x="2"  y="9"  value="0xA8C6EE" />
                <AssertPixelValue    target="list2" x="2"  y="54"  value="0xA8C6EE" />
                <SetProperty    target="list1" propertyName="layout"  valueExpression="value=new HorizontalLayout()"   waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty    target="list2" propertyName="layout"  valueExpression="value=new HorizontalLayout()"   waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <AssertPixelValue    target="list1" x="2"  y="9"  value="0xA8C6EE" />
                <AssertPixelValue    target="list2" x="72"  y="1"  value="0xA8C6EE" />
            </body>
        </TestCase>
        <TestCase testID="List_ms_property_selectedIndex_simple_array_click" keywords="[List, property, selectedIndex, array]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                 <SetProperty target="list1" propertyName="requireSelection" value="true" />
                <SetProperty target="list2" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list2" propertyName="requireSelection" value="true" />

            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['1','2','3'])" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list2" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['john','tim','david'])" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <DispatchMouseClickEvent target="list1" localX="10"  localY="10"  />
                <DispatchMouseClickEvent target="list2" localX="12"  localY="55" waitEvent="change" />

                <AssertPropertyValue target="list1"  propertyName="selectedIndex" value="0" />
                <AssertPropertyValue target="list2" propertyName="selectedIndex" value="2" />
                <AssertPixelValue    target="list1" x="10"  y="10"  value="0xA8C6EE" />
                <AssertPixelValue    target="list2" x="12"  y="54"  value="0xA8C6EE" />
                <SetProperty    target="list1" propertyName="layout"  valueExpression="value=new HorizontalLayout()"   waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty    target="list2" propertyName="layout"  valueExpression="value=new HorizontalLayout()"   waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <AssertPixelValue    target="list1" x="10"  y="10"  value="0xA8C6EE" />
                <AssertPixelValue    target="list2" x="72"  y="1"  value="0xA8C6EE" />
                <AssertPropertyValue target="list1" propertyName="selectedIndex" value="0" />
                <AssertPropertyValue target="list2"  propertyName="selectedIndex" value="2" />
            </body>
        </TestCase>
        <TestCase testID="List_ms_property_selectedIndex_label_array" keywords="[List, property, selectedIndex, array]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="requireSelection" value="true" />
                <SetProperty target="list2" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list2" propertyName="requireSelection" value="true" />

            </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.LabelRenderer);"  />
                <RunCode code="application.list2.itemRenderer=new ClassFactory(comps.LabelRenderer);"  />
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(application.labelArr)" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list2" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(application.labelArr)" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <SetProperty target="list1" propertyName="width"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list2" propertyName="width"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="height"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list2" propertyName="height"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="selectedIndex"  value="0"  />
                <SetProperty target="list2" propertyName="selectedIndex"  value="5" waitEvent="valueCommit" />

                <AssertPropertyValue target = "list1.dataProvider" propertyName="length" value="6" />
                <AssertPropertyValue target = "list2.dataProvider" propertyName="length" value="6" />
                <AssertMethodValue   method="value=application.list1.dataProvider.getItemAt(0).label" value="top" />
                <AssertMethodValue   method="value=application.list2.dataProvider.getItemAt(5).label" value="bottom" />
                <AssertPixelValue    target="list1" x="30"  y="5"   value="0xC2C2C2" />

            </body>
        </TestCase>
        <TestCase testID="List_ms_property_selectedIndex_label_array_mouseMove" keywords="[List, property, selectedIndex, array]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="requireSelection" value="true" />
                <SetProperty target="list2" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list2" propertyName="requireSelection" value="true" />

            </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.LabelRenderer);"  />
                <RunCode code="application.list2.itemRenderer=new ClassFactory(comps.LabelRenderer);"  />
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(application.labelArr)" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list2" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(application.labelArr)" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <SetProperty target="list1" propertyName="width"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list2" propertyName="width"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="height"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list2" propertyName="height"  value="300" waitEvent="updateComplete" />
                <DispatchMouseClickEvent target="list1" localX="20"  localY="3"  />

                <AssertMethodValue   method="value=application.list1.dataProvider.getItemAt(0).label" value="top" />
                <AssertMethodValue   method="value=application.list2.dataProvider.getItemAt(5).label" value="bottom" />
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="0" />
                <AssertPropertyValue target = "list2" propertyName="selectedIndex" value="0" />
                <AssertPixelValue    target="list1" x="30"  y="5"   value="0xC2C2C2" />

            </body>
        </TestCase>
        <TestCase testID="List_ms_property_graphics_elements" keywords="[List, property, elements, array, bug15885]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <RunCode code="application.list1.itemRendererFunction=application.useDefaultComplexItemRenderer"  />
                <RunCode code="application.list2.itemRendererFunction=application.useDefaultComplexItemRenderer"  />

                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="requireSelection" value="true" />
                <SetProperty target="list2" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list2" propertyName="requireSelection" value="true" />

            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([])"  waitTarget="list1.dataGroup"/>
                <SetProperty target="list2" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([])"  waitTarget="list2.dataGroup"/>
                <SetProperty target="list1" propertyName="width"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list2" propertyName="width"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="height"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list2" propertyName="height"  value="300" waitEvent="updateComplete" />
                <RunCode code="application.addEllipseAt(application.list1,0,0x00FF00);" waitEvent="updateComplete" waitTarget="list1.dataGroup" />
                <RunCode code="application.addEllipseAt(application.list1,1,0xFF0000);" waitEvent="updateComplete" waitTarget="list1.dataGroup" />
                <RunCode code="application.addEllipseAt(application.list2,0,0x00FF00);" waitEvent="updateComplete" waitTarget="list2.dataGroup" />
                <RunCode code="application.addEllipseAt(application.list2,1,0xFF0000);" waitEvent="updateComplete" waitTarget="list2.dataGroup" />
                <AssertPropertyValue target = "list1.dataProvider" propertyName="length" value="2" />
                <AssertPropertyValue target = "list2.dataProvider" propertyName="length" value="2" />
                <AssertMethodValue   method="value=application.list1.dataProvider.getItemAt(0).width" value="40" />
                <AssertMethodValue   method="value=application.list2.dataProvider.getItemAt(1).height" value="30" />
            </body>
        </TestCase>
        <TestCase testID="List_ms_property_visible_component" keywords="[List, property, visible]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([])" />
                <SetProperty target="list2" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([])"  />
                <RunCode code="application.list1.itemRendererFunction=application.useDefaultComplexItemRenderer"  />
                <RunCode code="application.list2.itemRendererFunction=application.useDefaultComplexItemRenderer"  />
                <SetProperty target="list1" propertyName="width"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list2" propertyName="width"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="height"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list2" propertyName="height"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="requireSelection" value="true" />
            </setup>
            <body>
                <RunCode code="application.list1.dataProvider.addItem(new comps.EllipseBasic)" waitEvent="updateComplete" waitTarget="list1.dataGroup" />
                <RunCode code="application.list1.dataProvider.addItem(new comps.EllipseBasic)" waitEvent="updateComplete" waitTarget="list1.dataGroup" />
                <AssertPixelValue    target="list1" x="35"  y="35"  value="0x9966FF" />
                <AssertPixelValue    target="list1" x="7" y="7" value="0x0000AA" />
                <AssertPixelValue    target="list1" x="30"  y="240" value="0x9966FF" />
                <AssertPixelValue    target="list1" x="7" y="215" value="0x0000AA" />
                <RunCode code="application.list1.dataGroup.getElementAt(0).visible=false" />
                <AssertPixelValue    target="list1" x="7"  y="7"  value="0xFFFFFF" />
                <AssertPixelValue    target="list1" x="150" y="150" value="0xFFFFFF" />
                <AssertPixelValue    target="list1" x="30"  y="240" value="0x9966FF" />
                <AssertPixelValue    target="list1" x="7" y="215" value="0x0000AA" />

            </body>
        </TestCase>

        <TestCase testID="List_ms_property_content_mix_array_itemRendererFunction" keywords="[List, property, dataProvider, itemRendererFunction]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="requireSelection" value="true" />
                <SetProperty target="list2" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list2" propertyName="requireSelection" value="true" />

            </setup>
            <body>
                <SetProperty target="list1" propertyName="width"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list2" propertyName="width"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="height"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list2" propertyName="height"  value="300" waitEvent="updateComplete" />
                <RunCode code="application.list1.itemRendererFunction=application.myItemRendererFunction"  />
                <RunCode code="application.list2.itemRendererFunction=application.myItemRendererFunction"  />
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(application.mixArr)" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list2" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(application.mixArr)" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <SetProperty target="list1" propertyName="selectedIndex"  value="1" />
                <SetProperty target="list2" propertyName="selectedIndex"  value="5" />
                <AssertPropertyValue target = "list1.dataProvider" propertyName="length" value="6" />
                <AssertPropertyValue target = "list2.dataProvider" propertyName="length" value="6" />
                <AssertMethodValue   method="value=application.list1.dataProvider.getItemAt(0).label" value="Green string" />
                <AssertMethodValue   method="value=application.list1.dataProvider.getItemAt(2).label" value="Checked" />
                <AssertMethodValue   method="value=application.list2.dataProvider.getItemAt(5).color" value="0xFF0000" />

            </body>
        </TestCase>


        <TestCase testID="List_ms_method_itemRenderer_mixData_comp" keywords="[List, method, addItem]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([])"  waitTarget="list1.dataGroup"/>
                <SetProperty target="list2" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([])"  waitTarget="list2.dataGroup"/>
                <RunCode code="application.list1.itemRendererFunction=application.useDefaultComplexItemRenderer"  />
                <RunCode code="application.list2.itemRendererFunction=application.useDefaultComplexItemRenderer"  />
                <SetProperty target="list1" propertyName="width"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list2" propertyName="width"  value="100" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="height"  value="600" waitEvent="updateComplete" />
                <SetProperty target="list2" propertyName="height"  value="100" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="requireSelection" value="true" />
            </setup>
            <body>
                <RunCode code="application.list1.dataProvider.addItem(new comps.MixDataComp)" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <RunCode code="application.list1.dataProvider.addItem(new comps.MixDataComp)" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <RunCode code="application.list1.dataProvider.addItem(new comps.MixDataComp)" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="selectedIndex"  value="1" />

                <SetProperty target="list1" propertyName="width"  value="310" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="height"  value="550" waitEvent="updateComplete" />

                <AssertPropertyValue target = "list2" propertyName="selectedIndex" value="-1" />
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="1" />
                <AssertPropertyValue target = "list1.dataProvider" propertyName="length" value="3" />

            </body>
        </TestCase>

        <!--        requireSelection        -->

        <TestCase testID="List_ms_property_arrayCollection_requiresSelection" keywords="[List, property,arrayCollection,binding, requireSelection ]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />

        </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.PlayerRenderer);"  />
                <RunCode code="application.createPlayersAC()" />
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.players" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="requireSelection" value="true" waitEvent="updateComplete" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="0" />
                <AssertPixelValue    target = "list1" x="65"  y="5" value="0x6666FF" />
            </body>
        </TestCase>
        <TestCase testID="List_ms_method_itemRenderer_mixData_comp_requiresSelection" keywords="[List, method, requireSelection ]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([])"  />
                <SetProperty target="list2" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([])"  />
                <RunCode code="application.list1.itemRendererFunction=application.useDefaultComplexItemRenderer" />
                <RunCode code="application.list2.itemRendererFunction=application.useDefaultComplexItemRenderer"  />
                <SetProperty target="list1" propertyName="width"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list2" propertyName="width"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="height"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list2" propertyName="height"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />

            </setup>
            <body>
                <RunCode code="application.list1.dataProvider.addItem(new comps.MixDataComp)" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <RunCode code="application.list1.dataProvider.addItem(new comps.MixDataComp)" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <RunCode code="application.list1.dataProvider.addItem(new comps.MixDataComp)" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="requireSelection" value="true" waitEvent="updateComplete" waitTarget="list1"/>
                <AssertPropertyValue target = "list2" propertyName="selectedIndex" value="-1" />
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="0" />
                <AssertPropertyValue target = "list1.dataProvider" propertyName="length" value="3" />

            </body>
        </TestCase>

        <!--        layout      -->

        <TestCase testID="List_ms_property_arrayCollection_changeLayout" keywords="[List, property,arrayCollection,layout]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="width"  value="600" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="height"  value="100" waitEvent="updateComplete" />

                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="requireSelection" value="true" />
            </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.PlayerRenderer);"  />
                <RunCode code="application.createPlayersAC()" />
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.players" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="selectedItem" valueExpression="value=application.list1.dataProvider.getItemAt(3)" waitEvent="updateComplete" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="3" />
                <SetProperty target="list1" propertyName="layout" valueExpression="value=new HorizontalLayout()" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <CompareBitmap numColorVariances="5" maxColorVariance="10" url="../properties/baselines/$testID.png" target="list1" />
            </body>
        </TestCase>

        <TestCase testID="List_ms_property_itemRenderer_mixData_comp_layout_change" keywords="[List, property, layout]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([])"  waitTarget="list1.dataGroup"/>
                <SetProperty target="list2" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([])"  waitTarget="list2.dataGroup"/>
                <RunCode code="application.list1.itemRendererFunction=application.useDefaultComplexItemRenderer"  />
                <RunCode code="application.list2.itemRendererFunction=application.useDefaultComplexItemRenderer"  />
                <SetProperty target="list1" propertyName="width"  value="350" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="height" value="220" waitEvent="updateComplete" waitTarget="list1"/>

                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="requireSelection" value="true" />
            </setup>
            <body>
                <RunCode code="application.list1.dataProvider.addItem(new comps.MixDataComp)" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <RunCode code="application.list1.dataProvider.addItem(new comps.MixDataComp)" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="selectedIndex" value="1" waitEvent="valueCommit" />
                <SetProperty target="list1" propertyName="layout" valueExpression="value=new HorizontalLayout()" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <CompareBitmap numColorVariances="5" maxColorVariance="10" url="../properties/baselines/$testID.png" target="list1" />
            </body>
        </TestCase>
        <TestCase testID="List_ms_property_arrayCollection_ellipse_numItems" keywords="[List, property,arrayCollection,length]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <ResetComponent target="list2" className="spark.components.List" waitEvent="updateComplete" />

                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="requireSelection" value="true" />
        </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.ColorEllipseRenderer);"  />
                <RunCode code="application.list2.itemRenderer=new ClassFactory(comps.ColorEllipseRenderer);"  />
                <RunCode code="application.createEllipseAC()" />
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.ellipseAC" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list2" propertyName="dataProvider" valueExpression="value=application.ellipseAC" waitEvent="updateComplete" waitTarget="list2.dataGroup"/>
                <SetProperty target="list1" propertyName="layout" valueExpression="value=new HorizontalLayout()" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <AssertPropertyValue target = "list1.dataProvider" propertyName="length" value="7" />
                <AssertPropertyValue target = "list2.dataProvider" propertyName="length" value="7" />

            </body>
        </TestCase>

        <!--        labelField labelFunction       -->

        <TestCase testID="List_ms_property_arrayCollection_labelFunction" keywords="[List, property,arrayCollection,binding, labelFunction]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />

            </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.PlayerRenderer);"  />
                <RunCode code="application.createPlayersAC()" />
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.players" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="requireSelection" value="true" waitEvent="updateComplete" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="0" />
                <AssertPixelValue    target = "list1" x="65"  y="5" value="0x6666FF" />
            </body>
        </TestCase>
        <!--        labelField labelFunction       -->

        <TestCase testID="List_ms_property_arrayCollection_labelField_lastName" keywords="[List, property,arrayCollection,binding, labelFunction]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="requireSelection" value="true" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createPlayersAC()" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="labelField" value="lastName" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="selectedIndex" value="3" waitEvent="updateComplete" waitTarget="list1"/>
                <CompareBitmap numColorVariances="5" maxColorVariance="10" url="../properties/baselines/$testID.png" target="list1" />
            </body>
        </TestCase>
        <TestCase testID="List_ms_property_arrayCollection_labelField_labelFunction" keywords="[List, property,arrayCollection,binding, labelFunction]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="requireSelection" value="true" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createPlayersAC()" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="labelField" value="lastName" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="labelFunction" valueExpression="value=application.jerseyNumberLabelFunction" />
                <SetProperty target="list1" propertyName="selectedIndex" value="3" waitEvent="valueCommit" waitTarget="list1"/>
				<WaitForLayoutManager />
                <CompareBitmap numColorVariances="5" maxColorVariance="10" url="../properties/baselines/$testID.png" target="list1" />
            </body>
        </TestCase>
        <TestCase testID="List_ms_property_arrayCollection_labelField_labelFunction_reset" keywords="[List, property,arrayCollection,binding, labelFunction]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="requireSelection" value="true" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createPlayersAC()" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="labelField" value="lastName" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="labelFunction" valueExpression="value=application.jerseyNumberLabelFunction" />
                <SetProperty target="list1" propertyName="selectedIndex" value="3" waitEvent="valueCommit" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="labelFunction" valueExpression="value=application.teamLabelFunction" />
                <SetProperty target="list1" propertyName="width" value="200" waitEvent="updateComplete" waitTarget="list1"/>
                <CompareBitmap numColorVariances="15" maxColorVariance="30" url="../properties/baselines/$testID.png" target="list1" />
            </body>
        </TestCase>
        <TestCase testID="List_ms_property_arrayCollection_labelField_labelFunction_null" keywords="[List, property,arrayCollection,binding, labelFunction]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="requireSelection" value="true" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createPlayersAC()" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="labelField" value="firstName" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="labelFunction" valueExpression="value=application.jerseyNumberLabelFunction" />
                <SetProperty target="list1" propertyName="selectedIndex" value="3" waitEvent="valueCommit" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="labelFunction" valueExpression="value=null" />
                <SetProperty target="list1" propertyName="width" value="100" waitEvent="updateComplete" waitTarget="list1"/>
                <CompareBitmap numColorVariances="5" maxColorVariance="10" url="../properties/baselines/$testID.png" target="list1" />
            </body>
        </TestCase>
        <TestCase testID="List_ms_property_arrayCollection_selectedIndices_dup0" keywords="[List, property,selectedIndex]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createNullDupAC()" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="selectedItem" value="a" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="height" value="120" waitEvent="updateComplete" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="4" />
                <DispatchKeyEvent key="TAB" waitTarget="list1" waitEvent="focusIn" />
             	<DispatchKeyEvent key="DOWN"  shiftKey="true" waitTarget="list1" waitEvent="change" />
		<DispatchKeyEvent key="DOWN"  shiftKey="true" waitTarget="list1" waitEvent="change" />
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="6" />
                <AssertPropertyValue target = "list1" propertyName="selectedIndices" value="[6,5,4]" />
                <AssertPropertyValue target = "list1" propertyName="selectedItems" value="['a','a','a']" />
            </body>
        </TestCase>
        <TestCase testID="List_ms_property_arrayCollection_selectedIndices_dup1" keywords="[List, property,selectedIndex]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createNullDupAC()" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="selectedItem" value="A" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="height" value="100" waitEvent="updateComplete" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="1" />
                <DispatchKeyEvent keys="[TAB]" waitTarget="list1" waitEvent="focusIn" />
                <DispatchKeyEvent keys="[END]"  waitTarget="list1" waitEvent="updateComplete"/>
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="37" />
                <DispatchKeyEvent key="UP"  shiftKey="true" waitTarget="list1" waitEvent="change" />
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="36" />
                <AssertPropertyValue target = "list1" propertyName="selectedIndices" value="[36,37]" />
                <AssertPropertyValue target = "list1" propertyName="selectedItems" value="[null,null]" />
            </body>
        </TestCase>
       <TestCase testID="List_ms_property_arrayCollection_selectedIndices_dup2" keywords="[List, property,selectedIndex]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createNullDupAC()" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="selectedIndex" value="0" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="height" value="100" waitEvent="updateComplete" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedItem" valueExpression="value=null" />
                <DispatchKeyEvent keys="[TAB]" waitTarget="list1" waitEvent="focusIn" />
                <DispatchKeyEvent keys="[END]"  waitTarget="list1" waitEvent="updateComplete"/>
                <DispatchKeyEvent keys="[HOME]"  shiftKey="true" waitTarget="list1" waitEvent="updateComplete"/>
                <DispatchKeyEvent keys="[DOWN]"   waitTarget="list1" waitEvent="updateComplete"/>
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="1" />
                <AssertPropertyValue target = "list1" propertyName="selectedItem" value="A" />
            </body>
        </TestCase>
        <TestCase testID="List_ms_property_arrayCollection_selectedIndices_dup_addItem0" keywords="[List, property,selectedIndex]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createNullDupAC()" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="selectedIndices" valueExpression="value=new &lt;int&gt;[1,2,3,4,5]" waitEvent="valueCommit" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="height" value="200" waitEvent="updateComplete" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedItems" value="['A',null,'A','a','a']" />
                <RunCode code="application.list1.dataProvider.addItemAt('a',0)" />
                <AssertPropertyValue target = "list1" propertyName="selectedItems" value="['A',null,'A','a','a']" />
            </body>
        </TestCase>
        <TestCase testID="List_ms_property_arrayCollection_selectedIndices_dup_addItem1" keywords="[List, property,selectedIndex]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createNullDupAC()" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="selectedItems" valueExpression="value=new  &lt;Object&gt;['X','Y','Z']" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="height" value="200" waitEvent="updateComplete" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedIndices" value="[31,30,29]" />
                <RunCode code="application.list1.dataProvider.addItem('Z')" />
                <AssertPropertyValue target = "list1" propertyName="selectedIndices" value="[31,30,29]" />
            </body>
        </TestCase>
       <TestCase testID="List_ms_property_arrayCollection_selectedIndices_dup_addItem2" keywords="[List, property,selectedIndex]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createNullDupAC()" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="selectedIndices" valueExpression="value=new  &lt;int&gt;[0,2,4,6,8]" waitEvent="valueCommit" waitTarget="list1"/>

                <SetProperty target="list1" propertyName="height" value="200" waitEvent="updateComplete" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedItem" value="null" />
                <DispatchKeyEvent keys="[TAB]" waitTarget="list1" waitEvent="focusIn" />

                <DispatchKeyEvent keys="[DOWN]" shiftKey="true" waitTarget="list1" waitEvent="changing"/>

                <RunCode code="application.list1.dataProvider.addItemAt('A',0)" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>

                <AssertPropertyValue target = "list1" propertyName="selectedIndices" value="[2,3,4,5,6,7,8,9]" />

            </body>
        </TestCase>

        <TestCase testID="List_mouseClick_property_arrayCollection__selectedIndex_dup0" keywords="[List, property,selectedIndex]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createNullDupAC()" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="selectedItem" value="a" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="height" value="100" waitEvent="updateComplete" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="4" />
 		<DispatchMouseClickEvent target="list1" localX="10"  localY="10" shiftKey="true" waitEvent="change"  />
 		<SetProperty target="list1" propertyName="height" value="150" waitEvent="updateComplete" waitTarget="list1"/>
		<CompareBitmap numColorVariances="5" maxColorVariance="10" url="../properties/baselines/$testID.png" target="list1" />
            </body>
        </TestCase>
        <TestCase testID="List_mouseClick_property_arrayCollection__selectedIndex_dup1" keywords="[List, property,selectedIndex]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createNullDupAC()" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="selectedItem" value="A" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="height" value="100" waitEvent="updateComplete" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="1" />
                <DispatchMouseClickEvent target="list1" localX="10"  localY="10" ctrlKey="true" waitEvent="change"  />
                <SetProperty target="list1" propertyName="height" value="150" waitEvent="updateComplete" waitTarget="list1"/>
		<CompareBitmap numColorVariances="5" maxColorVariance="10" url="../properties/baselines/$testID.png" target="list1" />
            </body>
        </TestCase>
        <TestCase testID="List_mouseClick_property_arrayCollection__selectedIndex_dup2" keywords="[List, property,selectedIndex]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createNullDupAC()" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="selectedIndex" value="0" waitEvent="valueCommit" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="height" value="200" waitEvent="updateComplete" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedItem" valueExpression="value=null" />
                <DispatchMouseClickEvent target="list1" localX="10"  localY="100" ctrlKey="true" waitEvent="change"  />
		<SetProperty target="list1" propertyName="height" value="150" waitEvent="updateComplete" waitTarget="list1"/>
		<CompareBitmap numColorVariances="5" maxColorVariance="10" url="../properties/baselines/$testID.png" target="list1" />
            </body>
        </TestCase>
        <TestCase testID="List_mouseClick_property_arrayCollection__selectedIndex_dup_addItem0" keywords="[List, property,selectedIndex]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createNullDupAC()" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="selectedItem" value="a" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="height" value="100" waitEvent="updateComplete" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="4" />
                <DispatchMouseClickEvent target="list1" localX="10"  localY="10"  shiftKey="true" waitEvent="change"  />
		<SetProperty target="list1" propertyName="height" value="150" waitEvent="updateComplete" waitTarget="list1"/>
                <RunCode code="application.list1.dataProvider.addItemAt('a',0)" />
                <SetProperty target="list1" propertyName="width" value="50" waitEvent="updateComplete" waitTarget="list1"/>
                <CompareBitmap numColorVariances="5" maxColorVariance="10" url="../properties/baselines/$testID.png" target="list1" />
            </body>
        </TestCase>
        <TestCase testID="List_mouseClick_property_arrayCollection__selectedIndex_dup_addItem1" keywords="[List, property,selectedIndex]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createNullDupAC()" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="selectedItem" value="Z" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="height" value="100" waitEvent="updateComplete" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedIndex" value="31" />
                <DispatchMouseClickEvent target="list1" localX="10"  localY="10" shiftKey="true" waitEvent="change"  />
                <RunCode code="application.list1.dataProvider.addItem('Z')" />
                <SetProperty target="list1" propertyName="width" value="50" waitEvent="updateComplete" waitTarget="list1"/>
                <CompareBitmap numColorVariances="5" maxColorVariance="10" url="../properties/baselines/$testID.png" target="list1" />
            </body>
        </TestCase>
        <TestCase testID="List_mouseClick_property_arrayCollection__selectedIndex_dup_addItem2" keywords="[List, property,selectedIndex]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createNullDupAC()" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="selectedIndex" value="0" waitEvent="valueCommit" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="height" value="100" waitEvent="updateComplete" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedItem" valueExpression="value=null" />
                <DispatchMouseClickEvent target="list1" localX="5"  localY="10" shiftKey="true"   />
                <RunCode code="application.list1.dataProvider.addItemAt('A',0)" />
                <SetProperty target="list1" propertyName="width" value="50" waitEvent="updateComplete" waitTarget="list1"/>
                <CompareBitmap numColorVariances="5" maxColorVariance="10" url="../properties/baselines/$testID.png" target="list1" />

            </body>
        </TestCase>

        <TestCase testID="List_mouseClick_property_selectedIndex_simple_array_swap_layout" keywords="[List, property, selectedIndex, array]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />

                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="requireSelection" value="true" />

            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['1','2','3'])" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>

                <SetProperty target="list1" propertyName="selectedIndex"  value="0"  />
                <AssertPropertyValue target = "list1.dataProvider" propertyName="length" value="3" />
                <AssertMethodValue   method="value=application.list1.dataProvider.getItemAt(0)" value="1" />
                <DispatchMouseClickEvent target="list1" localX="10"  localY="10"    />
                <DispatchMouseClickEvent target="list1" localX="100"  localY="10" shiftKey="true" />
                <SetProperty    target="list1" propertyName="layout"  valueExpression="value=new HorizontalLayout()"   waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="width" value="200" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="height" value="60" waitEvent="updateComplete" waitTarget="list1"/>
                <CompareBitmap numColorVariances="5" maxColorVariance="10" url="../properties/baselines/$testID.png" target="list1" />
            </body>
        </TestCase>

        <TestCase testID="List_mouseClick_property_selectedIndex_label_array" keywords="[List, property, selectedIndex, array]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="requireSelection" value="true" />
             </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.LabelRenderer);"  />
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(application.labelArr)" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>

                <DispatchMouseClickEvent target="list1" localX="10"  localY="10"   />
                <DispatchMouseClickEvent target="list1" localX="50"  localY="10" ctrlKey="true"   />

                <SetProperty target="list1" propertyName="width" value="100" waitEvent="updateComplete" waitTarget="list1"/>
                <CompareBitmap numColorVariances="5" url="../properties/baselines/$testID.png" target="list1" ignoreMaxColorVariance="true"/>

            </body>
        </TestCase>
        <TestCase testID="List_mouseClick_property_selectedIndex_label_array_mouseMove" keywords="[List, property, selectedIndex, array]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="requireSelection" value="true" />

            </setup>
            <body>
                <RunCode code="application.list1.itemRenderer=new ClassFactory(comps.LabelRenderer);"  />
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(application.labelArr)" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="width"  value="300" waitEvent="updateComplete" />
                <DispatchMouseClickEvent target="list1" localX="20"  localY="3"  />
		<DispatchMouseClickEvent target="list1" localX="100"  localY="10" shiftKey="true"  />
                <SetProperty target="list1" propertyName="width" value="50" waitEvent="updateComplete" waitTarget="list1"/>
                <CompareBitmap url="../properties/baselines/$testID.png" target="list1" numColorVariances="5" ignoreMaxColorVariance="true"/>
            </body>
        </TestCase>


        <TestCase testID="List_mouseClick_property_content_mix_array_itemRendererFunction" keywords="[List, property, dataProvider, itemRendererFunction]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="false" />
                <SetProperty target="list1" propertyName="requireSelection" value="true" />

            </setup>
            <body>
                <SetProperty target="list1" propertyName="width"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="height"  value="300" waitEvent="updateComplete" />
                <RunCode code="application.list1.itemRendererFunction=application.myItemRendererFunction"  />
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(application.mixArr)" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty target="list1" propertyName="selectedIndex"  value="1" waitEvent="valueCommit"/>
                <DispatchMouseClickEvent target="list1" localX="100"  localY="10" shiftKey="true" waitEvent="change"  />
                <SetProperty target="list1" propertyName="width" value="100" waitEvent="updateComplete" waitTarget="list1"/>
                <CompareBitmap numColorVariances="5" maxColorVariance="10" url="../properties/baselines/$testID.png" target="list1" />
            </body>
        </TestCase>

        <TestCase testID="List_mouseClick_property_graphics_elements_layout" keywords="[List, property, elements, layout, bug15885]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection([])"  />
                <RunCode code="application.list1.itemRendererFunction=application.useDefaultComplexItemRenderer"  />
                <SetProperty target="list1" propertyName="width"  value="300" waitEvent="updateComplete" />
                <SetProperty target="list1" propertyName="allowMultipleSelection" value="true" />
                <SetProperty target="list1" propertyName="requireSelection" value="true" />
            </setup>
            <body>
                <RunCode code="application.list1.dataProvider.addItem(new comps.EllipseBasic)" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <RunCode code="application.addRectAt(application.list1,0,0xFF0000);"  waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
                <SetProperty    target="list1" propertyName="layout"  valueExpression="value=new HorizontalLayout()" waitEvent="updateComplete" waitTarget="list1.dataGroup"/>
				<DispatchMouseClickEvent target="list1" localX="10"  localY="10" shiftKey="true"  />
                <SetProperty target="list1" propertyName="width" value="100" waitEvent="updateComplete" waitTarget="list1"/>
                <CompareBitmap numColorVariances="10" ignoreMaxColorVariance="true" url="../properties/baselines/$testID.png" target="list1" />
            </body>
        </TestCase>

        <TestCase testID="List_mouseClick_ctrlKey_deselect" keywords="[List, property,selectedIndex]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createNullDupAC()" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="selectedIndex" value="0" waitEvent="valueCommit" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedItem" valueExpression="value=null" />
                <DispatchMouseClickEvent target="list1" localX="10"  localY="10" ctrlKey="true" waitEvent="change"  />
		<AssertPropertyValue target = "list1" propertyName="selectedIndex" value="-1" />
            </body>
        </TestCase>
       <TestCase testID="List_mouseClick_ctrlKey_deselect4" keywords="[List, property,selectedIndex]" description="">
            <setup>
                <ResetComponent target="list1" className="spark.components.List" waitEvent="updateComplete" />
            </setup>
            <body>
                <SetProperty target="list1" propertyName="dataProvider" valueExpression="value=application.createNullDupAC()" waitEvent="updateComplete" waitTarget="list1"/>
                <SetProperty target="list1" propertyName="selectedIndex" value="4" waitEvent="valueCommit" waitTarget="list1"/>
                <AssertPropertyValue target = "list1" propertyName="selectedItem" value="a" />
                <DispatchMouseClickEvent target="list1" localX="10"  localY="108" ctrlKey="true" waitEvent="change"  />
		<AssertPropertyValue target = "list1" propertyName="selectedIndex" value="-1" />
            </body>
        </TestCase>
     </testCases>
</UnitTester>
