<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<UnitTester testDir="gumbo/components/SkinnableContainer/methods/"  xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"  xmlns:m="http://ns.adobe.com/mxml/2009" xmlns="*" testSWF="FxContainerBasic.mxml">

    <!-- this set of lines form a template that must be in each unit test -->

    <fx:Script>
        <![CDATA[
        public static function init(o:DisplayObject):void
        {
        }
        ]]>
    </fx:Script>

    <fx:Metadata>
        <![CDATA[
            [Mixin]
        ]]>
    </fx:Metadata>
    <!-- end of set of lines that must be in each unit test -->
    <fx:Script>
    <![CDATA[
        import comps.*;
        import spark.layouts.*;
        import spark.components.SkinnableContainer;
        import mx.graphics.*;
        import mx.controls.Label;
        import spark.core.NavigationUnit;
    ]]>
    </fx:Script>
    <testCases>

<!-- addItem method -->


    <TestCase testID="FxContainer_method_addItem_subgroups" keywords="[FxContainer, method, addItem]" description="add subgroups to a FxContainer">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
        </setup>
        <body>
            <RunCode code="application.createSubgroup(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
            <RunCode code="application.fc.getElementAt(0).width = 50" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
            <RunCode code="application.createSubgroup(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
            <RunCode code="application.fc.getElementAt(1).width = 60" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>

            <AssertMethodValue method="value=application.fc.getElementAt(0).width" value="50" />
            <AssertMethodValue method="value=application.fc.getElementAt(1).width" value="60" />
            <AssertPropertyValue target="fc" propertyName="numElements" value="2" />
        </body>
    </TestCase>



<!-- addItemAt method -->


    <TestCase testID="FxContainer_method_addItemAt_graphic_0" keywords="[FxContainer, method, addItemAt]" description="add single item to start of a FxContainer">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addCustomRect(application.fc, 10, 10, 0xFF0000, 0, 0);" waitTarget="fc" waitEvent="updateComplete" />
            <RunCode code="application.addCustomRect(application.fc, 20, 20, 0x00FF00, 0, 0);" waitTarget="fc" waitEvent="updateComplete" />
        </setup>
        <body>
            <RunCode code="value=application.addEllipseAt(application.fc, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />

            <AssertMethodValue   method="value=application.fc.getElementAt(0).width" value="40" />
            <AssertMethodValue   method="value=application.fc.getElementAt(1).width" value="10" />
            <AssertMethodValue   method="value=application.fc.getElementAt(2).width" value="20" />

            <AssertPropertyValue target="fc" propertyName="numElements" value="3" />
        </body>
    </TestCase>

    <TestCase testID="FxContainer_method_addItemAt_graphic_1" keywords="[FxContainer, method, addItemAt]" description="add single item to middle of a FxContainer">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addCustomRect(application.fc, 10, 10, 0xFF0000, 0, 0);" waitTarget="fc" waitEvent="updateComplete" />
            <RunCode code="application.addCustomRect(application.fc, 20, 20, 0x00FF00, 0, 0);" waitTarget="fc" waitEvent="updateComplete" />
        </setup>
        <body>
            <RunCode code="value=application.addEllipseAt(application.fc, 1)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />

            <AssertMethodValue   method="value=application.fc.getElementAt(0).width" value="10" />
            <AssertMethodValue   method="value=application.fc.getElementAt(1).width" value="40" />
            <AssertMethodValue   method="value=application.fc.getElementAt(2).width" value="20" />

            <AssertPropertyValue target="fc" propertyName="numElements" value="3" />
        </body>
    </TestCase>

    <TestCase testID="FxContainer_method_addItemAt_graphic_2" keywords="[FxContainer, method, addItemAt]" description="add single item to end of a FxContainer">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addCustomRect(application.fc, 10, 10, 0xFF0000, 0, 0);" waitTarget="fc" waitEvent="updateComplete" />
            <RunCode code="application.addCustomRect(application.fc, 20, 20, 0x00FF00, 0, 0);" waitTarget="fc" waitEvent="updateComplete" />
        </setup>
        <body>
            <RunCode code="value=application.addEllipseAt(application.fc, 2)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />

            <AssertMethodValue   method="value=application.fc.getElementAt(0).width" value="10" />
            <AssertMethodValue   method="value=application.fc.getElementAt(1).width" value="20" />
            <AssertMethodValue   method="value=application.fc.getElementAt(2).width" value="40" />

            <AssertPropertyValue target="fc" propertyName="numElements" value="3" />
        </body>
    </TestCase>

    <TestCase testID="FxContainer_method_addItemAt_subgroups_0" keywords="[FxContainer, method, addItemAt]" description="add subgroup to start of a FxContainer">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addCustomRect(application.fc, 10, 10, 0xFF00FF, 0, 0);" waitTarget="fc" waitEvent="updateComplete" />
            <RunCode code="application.addCustomRect(application.fc, 20, 20, 0xFF0000, 0, 0);" waitTarget="fc" waitEvent="updateComplete" />
        </setup>
        <body>
            <RunCode code="application.createSubgroupAt(application.fc, 33, 0);" waitTarget="fc" waitEvent="updateComplete" />

            <AssertMethodValue   method="value=application.fc.getElementAt(0).width" value="33" />
            <AssertMethodValue   method="value=application.fc.getElementAt(1).width" value="10" />
            <AssertMethodValue   method="value=application.fc.getElementAt(2).width" value="20" />
            <AssertPropertyValue target="fc" propertyName="numElements" value="3" />
        </body>
    </TestCase>

    <TestCase testID="FxContainer_method_addItemAt_subgroups_middle" keywords="[FxContainer, method, addItemAt]" description="add subgroup to middle of a FxContainer">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addCustomRect(application.fc, 10, 10, 0xFF00FF, 0, 0);" waitTarget="fc" waitEvent="updateComplete" />
            <RunCode code="application.addCustomRect(application.fc, 20, 20, 0xFF0000, 0, 0);" waitTarget="fc" waitEvent="updateComplete" />
        </setup>
        <body>
            <RunCode code="application.createSubgroupAt(application.fc, 33, 1);" waitTarget="fc" waitEvent="updateComplete" />

            <AssertMethodValue   method="value=application.fc.getElementAt(0).width" value="10" />
            <AssertMethodValue   method="value=application.fc.getElementAt(1).width" value="33" />
            <AssertMethodValue   method="value=application.fc.getElementAt(2).width" value="20" />
            <AssertPropertyValue target="fc" propertyName="numElements" value="3" />
        </body>
    </TestCase>

    <TestCase testID="FxContainer_method_addItemAt_subgroups_end" keywords="[FxContainer, method, addItemAt]" description="add subgroup to end of a mix content FxContainer">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addCustomRect(application.fc, 10, 10, 0xFF00FF, 0, 0);" waitTarget="fc" waitEvent="updateComplete" />
            <RunCode code="application.addCustomRect(application.fc, 20, 20, 0xFF0000, 0, 0);" waitTarget="fc" waitEvent="updateComplete" />
        </setup>
        <body>
            <RunCode code="application.createSubgroupAt(application.fc, 33, 2);" waitTarget="fc" waitEvent="updateComplete" />

            <AssertMethodValue   method="value=application.fc.getElementAt(0).width" value="10" />
            <AssertMethodValue   method="value=application.fc.getElementAt(1).width" value="20" />
            <AssertMethodValue   method="value=application.fc.getElementAt(2).width" value="33" />
            <AssertPropertyValue target="fc" propertyName="numElements" value="3" />
        </body>
    </TestCase>



<!-- getItemAt graphics -->

     <TestCase testID="FxContainer_method_getItemAt_graphics_0" keywords="[FxContainer, method, getItemAt]" description="get graphic item at start of a FxContainer">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addStretchRect(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
            <RunCode code="application.addRect(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
            <RunCode code="application.addLine(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
        </setup>
        <body>
            <AssertMethodValue   method="value=application.fc.getElementAt(0).top" value="0" />
        </body>
    </TestCase>

    <TestCase testID="FxContainer_method_getItemAt_graphics_2" keywords="[FxContainer, method, getItemAt]" description="get graphic item at end of a FxContainer">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addStretchRect(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
            <RunCode code="application.addRect(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
            <RunCode code="application.addLine(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
        </setup>
        <body>
            <AssertMethodValue   method="value=application.fc.getElementAt(2).xFrom" value="10" />
        </body>
    </TestCase>

<!-- getItemAt subgroups -->

    <TestCase testID="FxContainer_method_getItemAt_subgroups_empty" keywords="[FxContainer, method, getItemAt]" description="get subgroup items that are empty">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.createSubgroup(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
            <RunCode code="application.createSubgroup(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
            <RunCode code="application.fc.getElementAt(0).width = 11" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
            <RunCode code="application.fc.getElementAt(1).width = 22" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
        </setup>
        <body>
            <AssertMethodValue   method="value=application.fc.getElementAt(0).width" value="11" />
            <AssertMethodValue   method="value=application.fc.getElementAt(1).width" value="22" />
        </body>
    </TestCase>

<!-- getItemIndex method -->


    <TestCase testID="FxContainer_method_getItemIndex_graphics" keywords="[FxContainer, method, getItemIndex]" description="get index of graphic items">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addStretchRect(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
            <RunCode code="application.addRect(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
            <RunCode code="application.addLine(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
        </setup>
        <body>
            <AssertMethodValue   method="value=application.fc.getElementIndex(application.fc.getElementAt(0))" value="0" />
            <AssertMethodValue   method="value=application.fc.getElementIndex(application.fc.getElementAt(1))" value="1" />
            <AssertMethodValue   method="value=application.fc.getElementIndex(application.fc.getElementAt(2))" value="2" />
        </body>
    </TestCase>


<!-- removeAllElements -->

    <TestCase testID="FxContainer_method_removeAllElements_0" keywords="[FxContainer, method, removeAllElements]" description="remove all elements from a SkinnableContainer with 0 elements">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.fc.removeAllElements()" />
        </setup>
        <body>
            <AssertPropertyValue target="fc" propertyName="numElements" value="0" />
        </body>
    </TestCase>

    <TestCase testID="FxContainer_method_removeAllElements_1" keywords="[FxContainer, method, removeAllElements]" description="remove all elements from a SkinnableContainer with 1 element">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addCustomRect(application.fc, 100, 100, 0xFF0000)" waitEvent="updateComplete" waitTarget="fc"  />
            <RunCode code="application.fc.removeAllElements()" waitEvent="updateComplete" waitTarget="fc"  />
        </setup>
        <body>
            <AssertPropertyValue target="fc" propertyName="numElements" value="0" />
        </body>
    </TestCase>

    <TestCase testID="FxContainer_method_removeAllElements_3" keywords="[FxContainer, method, removeAllElements]" description="remove all elements from a SkinnableContainer with 3 elements">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addCustomRect(application.fc, 100, 100, 0xFF0000)" waitEvent="updateComplete" waitTarget="fc"  />
            <RunCode code="application.addCustomRect(application.fc, 100, 100, 0x00FF00)" waitEvent="updateComplete" waitTarget="fc"  />
            <RunCode code="application.addCustomRect(application.fc, 100, 100, 0x0000FF)" waitEvent="updateComplete" waitTarget="fc"  />
            <RunCode code="application.fc.removeAllElements()" waitEvent="updateComplete" waitTarget="fc"  />
        </setup>
        <body>
            <AssertPropertyValue target="fc" propertyName="numElements" value="0" />
        </body>
    </TestCase>


<!-- removeItem graphics -->

    <TestCase testID="FxContainer_method_removeItem_graphics_1" keywords="[FxContainer, method, removeItem]" description="remove graphic item at middle of FxContainer">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addStretchRect(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
            <RunCode code="application.addRect(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
            <RunCode code="application.addLine(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
        </setup>
        <body>
            <RunCode code="application.fc.removeElement(application.fc.getElementAt(1))" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>

            <AssertMethodValue   method="value=application.fc.getElementAt(0).top" value="0" />
            <AssertMethodValue   method="value=application.fc.getElementAt(1).xFrom" value="10" />
            <AssertPropertyValue target="fc" propertyName="numElements" value="2" />
        </body>
    </TestCase>

<!-- removeItem subgroups -->

    <TestCase testID="FxContainer_method_removeItem_subgroups_empty" keywords="[FxContainer, method, removeItem]" description="remove empty subgroup">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.createSubgroup(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
        </setup>
        <body>
            <RunCode code="application.fc.removeElement(application.fc.getElementAt(0))" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
            <AssertPropertyValue target="fc" propertyName="numElements" value="0" />
        </body>
    </TestCase>

 <!-- removeItemAt graphics -->

    <TestCase testID="FxContainer_method_removeItemAt_graphics_1" keywords="[FxContainer, method, removeItemAt]" description="remove graphic item from middle of FxContainer">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addStretchRect(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
            <RunCode code="application.addRect(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
            <RunCode code="application.addLine(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
        </setup>
        <body>
            <RunCode code="application.fc.removeElementAt(1)" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>

            <AssertMethodValue   method="value=application.fc.getElementAt(0).top" value="0" />
            <AssertMethodValue   method="value=application.fc.getElementAt(1).xFrom" value="10" />
            <AssertPropertyValue target="fc" propertyName="numElements" value="2" />
        </body>
    </TestCase>


<!-- removeItemAt subgroups -->

    <TestCase testID="FxContainer_method_removeItemAt_subgroups_empty" keywords="[FxContainer, method, removeItemAt]" description="remove empty subgroup item from start of FxContainer">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.createSubgroup(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
        </setup>
        <body>
            <RunCode code="application.fc.removeElementAt(0)" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
            <AssertPropertyValue target="fc" propertyName="numElements" value="0" />
        </body>
    </TestCase>

    <TestCase testID="FxContainer_method_removeItemAt_subgroups_not_empty" keywords="[FxContainer, method, removeItemAt]" description="remove non-empty subgroup item from start of FxContainer">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.createSubgroup(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
            <RunCode code="application.addRect(application.fc)"  waitEvent="updateComplete" waitTarget="fc.contentGroup"/>

        </setup>
        <body>
            <RunCode code="application.fc.removeElementAt(0)" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
            <AssertPropertyValue target="fc" propertyName="numElements" value="1" />
        </body>
    </TestCase>

    <TestCase testID="FxContainer_method_removeItemAt_subgroups_nested_empty" keywords="[FxContainer, method, removeItemAt]" description="remove nested subgroup item from start of FxContainer">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.createSubgroup(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />
            <RunCode code="application.createSubgroup(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>

        </setup>
        <body>
            <RunCode code="application.fc.removeElementAt(0)" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
            <AssertPropertyValue target="fc" propertyName="numElements" value="1" />
        </body>
    </TestCase>

<!-- setItemIndex method -->
    <TestCase testID="FxContainer_method_setItemIndex_component" keywords="[FxContainer, method, setItemIndex]" description="">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
			<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.fc.addElement(new comps.EllipseBasic)"  waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
            <RunCode code="application.fc.addElement(new comps.FancyPanelComp)"  waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
         </setup>
        <body>

            <RunCode code="application.fc.setElementIndex(application.fc.getElementAt(0),1)" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
            <CompareBitmap url="../methods/baselines/$testID.png" target="fc" numColorVariances="25" maxColorVariance="1" />
        </body>
    </TestCase>
    <TestCase testID="FxContainer_method_setItemIndex_component_graphics_0_1" keywords="[FxContainer, method, setItemIndex]" description="">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
			<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addCustomRect(application.fc, 30, 30, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.fc.addElement(new comps.EllipseBasic)"  waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
            <RunCode code="application.fc.addElement(new comps.FancyPanelComp)"  waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
         </setup>
        <body>

            <RunCode code="application.fc.setElementIndex(application.fc.getElementAt(0),1)" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
            <CompareBitmap url="../methods/baselines/$testID.png" target="fc" numColorVariances="25" maxColorVariance="1" />
        </body>
    </TestCase>
    <TestCase testID="FxContainer_method_setItemIndex_component_graphics_2_0" keywords="[FxContainer, method, setItemIndex]" description="">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
			<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addCustomRect(application.fc, 30, 30, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.fc.addElement(new comps.EllipseBasic)"  waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
            <RunCode code="application.fc.addElement(new comps.FancyPanelComp)"  waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
         </setup>
        <body>

            <RunCode code="application.fc.setElementIndex(application.fc.getElementAt(2),0)" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
            <CompareBitmap url="../methods/baselines/$testID.png" target="fc" numColorVariances="25" maxColorVariance="1" />
        </body>
    </TestCase>
<!-- swapItems - graphics -->

    <TestCase testID="FxContainer_method_swapItems_graphics_0_1" keywords="[FxContainer, method, swapItems]" description="swap graphic items at 0 and 1">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
			<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addCustomRect(application.fc, 10, 10, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.addCustomRect(application.fc, 20, 20, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.addCustomRect(application.fc, 30, 30, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />

            <RunCode code="application.fc.swapElements(application.fc.getElementAt(0),application.fc.getElementAt(1))" />
            <SetProperty target = "fc" propertyName="width" value="100" waitEvent="updateComplete"/>

        </setup>
        <body>
            <AssertMethodValue   method="value=application.fc.getElementAt(0).width" value="20" />
            <AssertMethodValue   method="value=application.fc.getElementAt(1).width" value="10" />
            <AssertMethodValue   method="value=application.fc.getElementAt(2).width" value="30" />
        </body>
    </TestCase>


    <TestCase testID="FxContainer_method_swapItems_graphics_0_2" keywords="[FxContainer, method, swapItems]" description="swap graphic items at 0 and 2">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
			<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addCustomRect(application.fc, 10, 10, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.addCustomRect(application.fc, 20, 20, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.addCustomRect(application.fc, 30, 30, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />

            <RunCode code="application.fc.swapElements(application.fc.getElementAt(0),application.fc.getElementAt(2))" />
            <SetProperty target = "fc" propertyName="width" value="100" waitEvent="updateComplete"/>
        </setup>
        <body>
            <AssertMethodValue   method="value=application.fc.getElementAt(0).width" value="30" />
            <AssertMethodValue   method="value=application.fc.getElementAt(1).width" value="20" />
            <AssertMethodValue   method="value=application.fc.getElementAt(2).width" value="10" />
        </body>
    </TestCase>

    <TestCase testID="FxContainer_method_swapItems_graphics_1_0" keywords="[FxContainer, method, swapItems]" description="swap graphic items at 1 and 0">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
			<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addCustomRect(application.fc, 10, 10, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.addCustomRect(application.fc, 20, 20, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.addCustomRect(application.fc, 30, 30, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />

            <RunCode code="application.fc.swapElements(application.fc.getElementAt(1),application.fc.getElementAt(0))" />
            <SetProperty target = "fc" propertyName="width" value="100" waitEvent="updateComplete"/>
        </setup>
        <body>
            <AssertMethodValue   method="value=application.fc.getElementAt(0).width" value="20" />
            <AssertMethodValue   method="value=application.fc.getElementAt(1).width" value="10" />
            <AssertMethodValue   method="value=application.fc.getElementAt(2).width" value="30" />
        </body>
    </TestCase>

    <TestCase testID="FxContainer_method_swapItems_graphics_2_0" keywords="[FxContainer, method, swapItems]" description="swap graphic items at 2 and 0">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
			<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addCustomRect(application.fc, 10, 10, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.addCustomRect(application.fc, 20, 20, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.addCustomRect(application.fc, 30, 30, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />

            <RunCode code="application.fc.swapElements(application.fc.getElementAt(2),application.fc.getElementAt(0))"/>
            <SetProperty target = "fc" propertyName="width" value="100" waitEvent="updateComplete"/>
        </setup>
        <body>
            <AssertMethodValue   method="value=application.fc.getElementAt(0).width" value="30" />
            <AssertMethodValue   method="value=application.fc.getElementAt(1).width" value="20" />
            <AssertMethodValue   method="value=application.fc.getElementAt(2).width" value="10" />
        </body>
    </TestCase>

    <TestCase testID="FxContainer_method_swapItems_same_item" keywords="[FxContainer, method, swapItems]" description="swap same data item">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
			<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addCustomRect(application.fc, 10, 10, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.addCustomRect(application.fc, 20, 20, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.addCustomRect(application.fc, 30, 30, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />

            <RunCode code="application.fc.swapElements(application.fc.getElementAt(0),application.fc.getElementAt(0))" />
            <RunCode code="application.fc.swapElements(application.fc.getElementAt(1),application.fc.getElementAt(1))" />
            <RunCode code="application.fc.swapElements(application.fc.getElementAt(2),application.fc.getElementAt(2))" />
        </setup>
        <body>
            <AssertMethodValue   method="value=application.fc.getElementAt(0).width" value="10" />
            <AssertMethodValue   method="value=application.fc.getElementAt(1).width" value="20" />
            <AssertMethodValue   method="value=application.fc.getElementAt(2).width" value="30" />
        </body>
    </TestCase>

 <!-- swapItems - subgroups  -->

    <TestCase testID="FxContainer_method_swapItems_subgroup_subgroup_empty" keywords="[FxContainer, method, swapItems]" description="swap empty subgroups">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.createSubgroup(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
            <RunCode code="application.createSubgroup(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
            <RunCode code="application.fc.getElementAt(0).width = 80" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
            <RunCode code="application.fc.getElementAt(1).width = 90" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>

        </setup>
        <body>
            <RunCode code="application.fc.swapElements(application.fc.getElementAt(0),application.fc.getElementAt(1))" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
            <AssertMethodValue   method="value=application.fc.getElementAt(0).width" value="90" />
            <AssertMethodValue   method="value=application.fc.getElementAt(1).width" value="80" />
        </body>
    </TestCase>


<!-- swapItemsAt method -->

    <TestCase testID="FxContainer_method_swapItemsAt_graphics_0_1" keywords="[FxContainer, method, swapItemsAt]" description="swap graphic items at 0 and 1">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
			<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addCustomRect(application.fc, 10, 10, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc" />
            <RunCode code="application.addCustomRect(application.fc, 20, 20, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc" />
            <RunCode code="application.addCustomRect(application.fc, 30, 30, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc" />

            <RunCode code="application.fc.swapElementsAt(0,1)" />
            <SetProperty target = "fc" propertyName="width" value="100" waitEvent="updateComplete"/>
        </setup>
        <body>
            <AssertMethodValue   method="value=application.fc.getElementAt(0).width" value="20" />
            <AssertMethodValue   method="value=application.fc.getElementAt(1).width" value="10" />
            <AssertMethodValue   method="value=application.fc.getElementAt(2).width" value="30" />
        </body>
    </TestCase>


    <TestCase testID="FxContainer_method_swapItemsAt_graphics_0_2" keywords="[FxContainer, method, swapItemsAt]" description="swap graphic items at 0 and 2">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
			<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addCustomRect(application.fc, 10, 10, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.addCustomRect(application.fc, 20, 20, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.addCustomRect(application.fc, 30, 30, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />

            <RunCode code="application.fc.swapElementsAt(0,2)" />
            <SetProperty target = "fc" propertyName="width" value="100" waitEvent="updateComplete"/>
        </setup>
        <body>
            <AssertMethodValue   method="value=application.fc.getElementAt(0).width" value="30" />
            <AssertMethodValue   method="value=application.fc.getElementAt(1).width" value="20" />
            <AssertMethodValue   method="value=application.fc.getElementAt(2).width" value="10" />
        </body>
    </TestCase>

    <TestCase testID="FxContainer_method_swapItemsAt_graphics_1_0" keywords="[FxContainer, method, swapItemsAt]" description="swap graphic items at 1 and 0">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
			<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addCustomRect(application.fc, 10, 10, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.addCustomRect(application.fc, 20, 20, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.addCustomRect(application.fc, 30, 30, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />

            <RunCode code="application.fc.swapElementsAt(1,0)" />
            <SetProperty target = "fc" propertyName="width" value="100" waitEvent="updateComplete"/>
        </setup>
        <body>
            <AssertMethodValue   method="value=application.fc.getElementAt(0).width" value="20" />
            <AssertMethodValue   method="value=application.fc.getElementAt(1).width" value="10" />
            <AssertMethodValue   method="value=application.fc.getElementAt(2).width" value="30" />
        </body>
    </TestCase>

    <TestCase testID="FxContainer_method_swapItemsAt_graphics_2_0" keywords="[FxContainer, method, swapItemsAt]" description="swap graphic items at 2 and 0">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
			<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addCustomRect(application.fc, 10, 10, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.addCustomRect(application.fc, 20, 20, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.addCustomRect(application.fc, 30, 30, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />

            <RunCode code="application.fc.swapElementsAt(2,0)" />
            <SetProperty target = "fc" propertyName="width" value="100" waitEvent="updateComplete"/>
        </setup>
        <body>
            <AssertMethodValue   method="value=application.fc.getElementAt(0).width" value="30" />
            <AssertMethodValue   method="value=application.fc.getElementAt(1).width" value="20" />
            <AssertMethodValue   method="value=application.fc.getElementAt(2).width" value="10" />
        </body>
    </TestCase>

    <TestCase testID="FxContainer_method_swapItemsAt_same_item" keywords="[FxContainer, method, swapItemsAt]" description="swap same data item">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
			<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.addCustomRect(application.fc, 10, 10, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.addCustomRect(application.fc, 20, 20, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.addCustomRect(application.fc, 30, 30, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />

            <RunCode code="application.fc.swapElementsAt(0, 0)" />
            <RunCode code="application.fc.swapElementsAt(1, 1)" />
            <RunCode code="application.fc.swapElementsAt(2, 2)" />
        </setup>
        <body>
            <AssertMethodValue   method="value=application.fc.getElementAt(0).width" value="10" />
            <AssertMethodValue   method="value=application.fc.getElementAt(1).width" value="20" />
            <AssertMethodValue   method="value=application.fc.getElementAt(2).width" value="30" />
        </body>
    </TestCase>

<!-- swapItemsAt - graphics -->

    <TestCase testID="FxContainer_method_swapItemsAt_subgroups_data" keywords="[FxContainer, method, swapItemsAt]" description="swap subgroups and data">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitTarget="fc" waitEvent="updateComplete" />
            <RunCode code="application.addCustomRect(application.fc, 10, 10, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.addCustomRect(application.fc, 20, 20, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
        </setup>
        <body>

            <RunCode code="application.createSubgroup(application.fc);" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.createSubgroup(application.fc);" waitEvent="updateComplete" waitTarget="fc.contentGroup" />

            <RunCode code="application.addCustomRect(application.fc, 30, 30, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup" />
            <RunCode code="application.addCustomRect(application.fc, 40, 40, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc.contentGroup"  />

            <AssertPropertyValue target="fc" propertyName="numElements" value="6" />

            <RunCode code="application.fc.swapElementsAt(0, 1)" />
            <RunCode code="application.fc.swapElementsAt(0, 2)" />
            <RunCode code="application.fc.swapElementsAt(0, 3)" />
            <SetProperty target = "fc" propertyName="width" value="100" waitEvent="updateComplete"/>
            <AssertPropertyValue target="fc" propertyName="numElements" value="6" />
            <AssertMethodValue method="value=application.fc.getElementAt(1).width" value="10" />
            <AssertMethodValue method="value=application.fc.getElementAt(2).width" value="20" />

        </body>
    </TestCase>

<!-- swapItemsAt - subgroups  -->

    <TestCase testID="FxContainer_method_swapItemsAt_subgroup_subgroup_empty" keywords="[FxContainer, method, swapItemsAt]" description="swap empty subgroups">
        <setup>
            <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
            <RunCode code="application.createSubgroup(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
            <RunCode code="application.createSubgroup(application.fc)" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
            <RunCode code="application.fc.getElementAt(0).width = 80" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>
            <RunCode code="application.fc.getElementAt(1).width = 90" waitEvent="updateComplete" waitTarget="fc.contentGroup"/>

        </setup>
        <body>
            <RunCode code="application.fc.swapElementsAt(0,1)" />
            <SetProperty target = "fc" propertyName="width" value="100" waitEvent="updateComplete"/>
            <AssertMethodValue   method="value=application.fc.getElementAt(0).width" value="90" />
            <AssertMethodValue   method="value=application.fc.getElementAt(1).width" value="80" />
        </body>
    </TestCase>
 <!-- getHorizontalScrollPositionDelta -->
        <TestCase testID="FxContainer_method_getHorizontalScrollPositionDelta" keywords="[FxContainer, method, getHorizontalScrollPositionDelta]" description="">
            <setup>
                <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
                <SetProperty target = "fc" propertyName="width" value="100" waitEvent="updateComplete"/>
                <SetProperty target = "fc.contentGroup" propertyName="clipAndEnableScrolling" value="true" />
            </setup>
            <body>
                <RunCode code="application.fc.addElement(new comps.ScrollerGroupComp)" waitEvent="updateComplete" waitTarget="fc"/>
                <SetProperty target = "fc.contentGroup" propertyName="horizontalScrollPosition" value="50" />
                <AssertMethodValue   method="value=application.fc.contentGroup.getHorizontalScrollPositionDelta(spark.core.NavigationUnit.PAGE_RIGHT)" value="100" />
            </body>
        </TestCase>
<!-- getVerticalScrollPositionDelta -->
        <TestCase testID="FxContainer_method_getVerticalScrollPositionDelta" keywords="[FxContainer, method, getVerticalScrollPositionDelta]" description="">
            <setup>
                <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
                <SetProperty target = "fc" propertyName="height" value="50" waitEvent="updateComplete"/>
                <SetProperty target = "fc.contentGroup" propertyName="clipAndEnableScrolling" value="true" />
            </setup>
            <body>
                <RunCode code="application.fc.addElement(new comps.ScrollerGroupComp)" waitEvent="updateComplete" waitTarget="fc"/>
                <SetProperty target = "fc.contentGroup" propertyName="verticalScrollPosition" value="10" />
                <AssertMethodValue   method="value=application.fc.contentGroup.getVerticalScrollPositionDelta(spark.core.NavigationUnit.HOME)" value="-10" />
            </body>
        </TestCase>
       <TestCase testID="FxContainer_method_getVerticalScrollPositionDelta_END" keywords="[FxContainer, method, getVerticalScrollPositionDelta]" description="">
            <setup>
                <ResetComponent target="fc" className="spark.components.SkinnableContainer" waitEvent="updateComplete" waitTarget="fc" />
		<SetProperty target = "fc" propertyName="layout" valueExpression="value=new VerticalLayout()" />
                <SetProperty target = "fc" propertyName="height" value="50" waitEvent="updateComplete"/>
                <SetProperty target = "fc.contentGroup" propertyName="clipAndEnableScrolling" value="true" />
            </setup>
            <body>
                <RunCode code="application.fc.addElement(new comps.ScrollerGroupComp)" waitEvent="updateComplete" waitTarget="fc"/>
                <RunCode code="application.addCustomRect(application.fc, 30, 30, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc" />
                <RunCode code="application.addCustomRect(application.fc, 40, 40, 0xFF0000, 0, 0)" waitEvent="updateComplete" waitTarget="fc"  />

                <SetProperty target = "fc.contentGroup" propertyName="verticalScrollPosition" value="20" />
                <AssertMethodValue   method="value=application.fc.contentGroup.getVerticalScrollPositionDelta(spark.core.NavigationUnit.END)" value="112" />
            </body>
        </TestCase>
  </testCases>


</UnitTester>
