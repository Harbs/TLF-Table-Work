<s:Application width="200" height="300" backgroundColor="0xFFFFFF"
xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark" >
    <s:layout>
        <s:VerticalLayout/>
    </s:layout>

<fx:Script>
<![CDATA[

    import mx.events.StateChangeEvent;

    // Any test case could start out in any state, depending on how the
    // previous test failed.  Therefore, we cannot switch to a state and
    // then wait, since we may already be in that state.
    public function doManualReset():void{
        if(currentState == "defaultState"){
            dispatchEvent(new Event("manualResetComplete"));
        }else{
            addEventListener("currentStateChange", handleCurrentStateChange);
            currentState = "defaultState";
        }
    }

    // This is the listener, set above.
    private function handleCurrentStateChange(e:StateChangeEvent):void{
        dispatchEvent(new Event("manualResetComplete"));
    }


]]>
</fx:Script>

    <fx:Style source="assets/myStyles.css" />

<s:states>
    <!-- Base default state -->
    <mx:State name="defaultState" />

    <!-- Test states -->
    <mx:State name="state1" />
    <mx:State name="state2" />
</s:states>

<s:SkinnableContainer id="fc" layout="{new VerticalLayout}">
<!-- This button will only be present in defaultState -->
<s:Button id="btn01" includeIn="defaultState" />

<!-- This button will only be present in state1 -->
<s:Button id="btn02" includeIn="state1" label.state1="state1 label"/>

<!-- This button will only be present in state1 and state2. -->
<s:Button id="btn03" includeIn="state1,state2" label="state1,state2"/>

<!-- This button will only be present in defaultState and state2. -->
<s:Button id="btn04" excludeFrom="state1" label="excludeFrom state1"/>

<!-- This button's label will be "defaultState label" in defaultState, and "state1 label" in state1.-->
<s:Button id="btn05" label="defaultState label" label.state1="state1 label" />

<!-- This button's label will be "state1 label" in state1, and "state2 label" in state2. There will be no label in defaultState. -->
<s:Button id="btn06" label.state1="state1 label" label.state2="state2 label" />

</s:SkinnableContainer>

<s:SkinnableContainer id="fc1" includeIn="state1,state2" layout="{new VerticalLayout}">
    <s:Rect width="30" height="30">
        <s:fill>
            <mx:SolidColor color="0x0000FF" />
        </s:fill>
    </s:Rect>
    <s:Rect width="30" height="25" includeIn="state1">
        <s:fill>
            <mx:SolidColor color="0xFF00FF" />
        </s:fill>
    </s:Rect>
</s:SkinnableContainer>

</s:Application>
