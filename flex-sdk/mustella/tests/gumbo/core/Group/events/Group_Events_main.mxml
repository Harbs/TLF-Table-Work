<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<UnitTester testDir="gumbo/core/Group/events/"  xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"  xmlns:m="http://ns.adobe.com/mxml/2009" xmlns="*" testSWF="GroupBasic.mxml">

	<!-- this set of lines form a template that must be in each unit test -->

	<fx:Script>
		<![CDATA[
		public static function init(o:DisplayObject):void
		{
		}			
		]]>
	</fx:Script>
	
	<fx:Metadata>
		<![CDATA[
			[Mixin]
		]]>
	</fx:Metadata>	
	
	<!-- end of set of lines that must be in each unit test -->

	<fx:Script>
		<![CDATA[

			import mx.graphics.*;
			import spark.components.Button;
			import mx.controls.Button;
			import spark.events.ElementExistenceEvent;
			
		]]>
	</fx:Script>

	<testCases>

<!-- elementAdd event -->
		
	<!-- addItem method -->
	
        <TestCase testID="Group_event_elementAdd_addItem_empty" keywords="[Group, event, elementAdd, addItem]" description="call additem on empty group and verify event is raised">
            <setup>
                <ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" waitTarget="group1" />
            </setup>
            <body>
				<RunCode code="application.addRect(application.group1)" />
                <AssertEvent target="group1" eventName="elementAdd" eventClass="spark.events::ElementExistenceEvent" numExpectedEvents="1" />
				<AssertEventPropertyValue propertyName="element" valueExpression="value='[object Rect]'" />

				<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="15" />				
				<AssertPropertyValue target="group1" propertyName="numElements" value="1" />
            </body>
        </TestCase>
		
        <TestCase testID="Group_event_elementAdd_addItem_nonempty" keywords="[Group, event, elementAdd, addItem]" description="call additem on group with one element and verify event is raised">
            <setup>
                <ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
            </setup>
            <body>
				<RunCode code="application.addRect(application.group1)" />
                <AssertEvent target="group1" eventName="elementAdd" eventClass="spark.events::ElementExistenceEvent" numExpectedEvents="1" />
				<AssertEventPropertyValue propertyName="element" valueExpression="value='[object Rect]'" />

				<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="15" />	
				<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="15" />				
				<AssertPropertyValue target="group1" propertyName="numElements" value="2" />
            </body>
        </TestCase>
		
        <TestCase testID="Group_event_elementAdd_addItem_nonempty_array" keywords="[Group, event, elementAdd, addItem]" description="call additem on group with multiple elements and verify event is raised">
            <setup>
                <ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
            </setup>
            <body>
				<RunCode code="application.addStretchRect(application.group1)" />
                <AssertEvent target="group1" eventName="elementAdd" eventClass="spark.events::ElementExistenceEvent" numExpectedEvents="1" />
				<AssertEventPropertyValue propertyName="element" valueExpression="value='[object Rect]'" />

				<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="15" />	
				<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="15" />	
				<AssertMethodValue method="value=application.group1.getElementAt(2).width" value="15" />	
				<AssertMethodValue method="value=application.group1.getElementAt(3).top" value="0" />				
				<AssertPropertyValue target="group1" propertyName="numElements" value="4" />
            </body>
        </TestCase>
				
        <TestCase testID="Group_event_elementAdd_addItem_subgroup" keywords="[Group, event, elementAdd, addItem]" description="call additem with a subgroup and verify event is raised">
            <setup>
                <ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" waitTarget="group1" />
            </setup>
            <body>
				<RunCode code="application.createSubgroup(application.group1)" />
                <AssertEvent target="group1" eventName="elementAdd" eventClass="spark.events::ElementExistenceEvent" numExpectedEvents="1" />
				
				<AssertPropertyValue target="group1" propertyName="numElements" value="1" />
            </body>
        </TestCase>
						
      
		<TestCase testID="Group_event_add_halo" keywords="[Group, event, add]" description="check halo component fires an add (svn 9113)">
			<setup>
				<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="application.testingAddEventOutput = '';" />
				<RunCode code="application.testingAddEventButton = application.createButton('halo'); "/>
				<RunCode code="application.testingAddEventButton.addEventListener('add', function():void{application.testingAddEventOutput='fired';});" />
				<RunCode code="application.group1.addElement(application.testingAddEventButton);" waitTarget="group1" waitEvent="updateComplete" />
			</setup>
			<body>
				<AssertMethodValue method="value=application.testingAddEventOutput" valueExpression="value='fired'" />
			</body>
 		</TestCase>
		
		<TestCase testID="Group_event_add_spark" keywords="[Group, event, add]" description="check spark component fires an add (svn 9113)">
			<setup>
				<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="application.testingAddEventOutput = '';" />
				<RunCode code="application.testingAddEventButton = application.createFxButton('spark'); "/>
				<RunCode code="application.testingAddEventButton.addEventListener('add', function():void{application.testingAddEventOutput='fired';});" />
				<RunCode code="application.group1.addElement(application.testingAddEventButton);" waitTarget="group1" waitEvent="updateComplete" />
			</setup>
			<body>
				<AssertMethodValue method="value=application.testingAddEventOutput" valueExpression="value='fired'" />
			</body>
 		</TestCase>
 		
		<TestCase testID="Group_event_remove_halo" keywords="[Group, event, remove]" description="check halo component fires a remove (svn 9113)">
			<setup>
				<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="application.testingAddEventOutput = '';" />
				<RunCode code="application.testingAddEventButton = application.createButton('halo'); "/>
				<RunCode code="application.testingAddEventButton.addEventListener('remove', function():void{application.testingAddEventOutput='fired';});" />
				<RunCode code="application.group1.addElement(application.testingAddEventButton);" waitTarget="group1" waitEvent="updateComplete" />
				<RunCode code="application.group1.removeElementAt(0);" waitTarget="group1" waitEvent="updateComplete" />
			</setup>
			<body>
				<AssertMethodValue method="value=application.testingAddEventOutput" valueExpression="value='fired'" />
			</body>
 		</TestCase>
		 		
		<TestCase testID="Group_event_remove_spark" keywords="[Group, event, remove]" description="check spark component fires a remove (svn 9113)">
			<setup>
				<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="application.testingAddEventOutput = '';" />
				<RunCode code="application.testingAddEventButton = application.createFxButton('spark'); "/>
				<RunCode code="application.testingAddEventButton.addEventListener('remove', function():void{application.testingAddEventOutput='fired';});" />
				<RunCode code="application.group1.addElement(application.testingAddEventButton);" waitTarget="group1" waitEvent="updateComplete" />
				<RunCode code="application.group1.removeElementAt(0);" waitTarget="group1" waitEvent="updateComplete" />
			</setup>
			<body>
				<AssertMethodValue method="value=application.testingAddEventOutput" valueExpression="value='fired'" />
			</body>
		</TestCase>
		 		
	<!-- addItemAt method -->
		
		<TestCase testID="Group_event_elementAdd_addItemAt_empty" keywords="[Group, event, elementAdd, addItemAt]" description="call addItemAt and verify event is raised">
            <setup>
                <ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" waitTarget="group1" />
            </setup>
            <body>
				<RunCode code="application.addEllipseAt(application.group1, 0)" />
                <AssertEvent target="group1" eventName="elementAdd" eventClass="spark.events::ElementExistenceEvent" numExpectedEvents="1" />
				<AssertEventPropertyValue propertyName="element" valueExpression="value='[object Ellipse]'" />
								
				<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="40" />				
				<AssertPropertyValue target="group1" propertyName="numElements" value="1" />
            </body>
        </TestCase>
		
		<TestCase testID="Group_event_elementAdd_addItemAt_nonempty" keywords="[Group, event, elementAdd, addItemAt]" description="call additemAt on group with one element and verify event is raised">
            <setup>
                <ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
            </setup>
            <body>
				<RunCode code="application.addEllipseAt(application.group1, 0)" />
                <AssertEvent target="group1" eventName="elementAdd" eventClass="spark.events::ElementExistenceEvent" numExpectedEvents="1" />
				<AssertEventPropertyValue propertyName="element" valueExpression="value='[object Ellipse]'" />

				<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="40" />	
				<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="15" />				
				<AssertPropertyValue target="group1" propertyName="numElements" value="2" />
            </body>
        </TestCase>

        <TestCase testID="Group_event_elementAdd_addItemAt_nonempty_array" keywords="[Group, event, elementAdd, addItemAt]" description="call additemAt on group with multiple elements and verify event is raised">
            <setup>
                <ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
            </setup>
            <body>
				<RunCode code="application.addEllipseAt(application.group1, 0)" />
                <AssertEvent target="group1" eventName="elementAdd" eventClass="spark.events::ElementExistenceEvent" numExpectedEvents="1" />
				<AssertEventPropertyValue propertyName="element" valueExpression="value='[object Ellipse]'" />

				<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="40" />	
				<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="15" />	
				<AssertMethodValue method="value=application.group1.getElementAt(2).width" value="15" />	
				<AssertMethodValue method="value=application.group1.getElementAt(3).width" value="15" />				
				<AssertPropertyValue target="group1" propertyName="numElements" value="4" />
            </body>
        </TestCase>
						
        <TestCase testID="Group_event_elementAdd_addItemAt_subgroup" keywords="[Group, event, elementAdd, addItemAt]" description="call additemAt with a subgroup and verify event is raised">
            <setup>
                <ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" waitTarget="group1" />
            </setup>
            <body>
				<RunCode code="application.createSubgroupAt(application.group1, 55, 0)" />
                <AssertEvent target="group1" eventName="elementAdd" eventClass="spark.events::ElementExistenceEvent" numExpectedEvents="1" />
				
				<AssertPropertyValue target="group1" propertyName="numElements" value="1" />
            </body>
        </TestCase>
		
<!-- elementRemove event -->
		
	<!-- removeItem method -->	
		
        <TestCase testID="Group_event_elementRemove_removeItem_single" keywords="[Group, event, elementRemove, removeItem]" description="call removeItem and verify event is raised">
            <setup>
                <ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
            </setup>
            <body>
				<RunCode code="application.group1.removeElement(application.group1.getElementAt(0))" />
                <AssertEvent target="group1" eventName="elementRemove" eventClass="spark.events::ElementExistenceEvent" numExpectedEvents="1" />
				<AssertEventPropertyValue propertyName="element" valueExpression="value='[object Rect]'" />
				
				<AssertPropertyValue target="group1" propertyName="numElements" value="0" />
            </body>
        </TestCase>
		
        <TestCase testID="Group_event_elementRemove_removeItem_array" keywords="[Group, event, elementRemove, removeItem]" description="call removeItem on group with multiple elements and verify event is raised">
            <setup>
                <ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
            </setup>
            <body>
				<RunCode code="application.group1.removeElement(application.group1.getElementAt(0))" />
                <AssertEvent target="group1" eventName="elementRemove" eventClass="spark.events::ElementExistenceEvent" numExpectedEvents="1" />
				<AssertEventPropertyValue propertyName="element" valueExpression="value='[object Rect]'" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="15" />	
				<AssertPropertyValue target="group1" propertyName="numElements" value="1" />
            </body>
        </TestCase>
						
        <TestCase testID="Group_event_elementRemove_removeItem_subgroup" keywords="[Group, event, elementRemove, removeItem]" description="call removeItem on a subgroup and verify event is raised">
            <setup>
                <ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" waitTarget="group1" />
            </setup>
            <body>
				<RunCode code="application.createSubgroup(application.group1)" waitTarget="group1" waitEvent="updateComplete" />
				<RunCode code="application.group1.removeElement(application.group1.getElementAt(0))" />

                <AssertEvent target="group1" eventName="elementRemove" eventClass="spark.events::ElementExistenceEvent" numExpectedEvents="1" />

				<AssertPropertyValue target="group1" propertyName="numElements" value="0" />
            </body>
        </TestCase>	
		
		
	<!-- removeItemAt method -->	
		
				
        <TestCase testID="Group_event_elementRemove_removeItemAt_single" keywords="[Group, event, elementRemove, removeItemAt]" description="call removeItemAt and verify event is raised">
            <setup>
                <ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
            </setup>
            <body>
				<RunCode code="application.group1.removeElementAt(0)" />
                <AssertEvent target="group1" eventName="elementRemove" eventClass="spark.events::ElementExistenceEvent" numExpectedEvents="1" />
				<AssertEventPropertyValue propertyName="element" valueExpression="value='[object Rect]'" />
				
				<AssertPropertyValue target="group1" propertyName="numElements" value="0" />
            </body>
        </TestCase>
		
        <TestCase testID="Group_event_elementRemove_removeItemAt_array" keywords="[Group, event, elementRemove, removeItemAt]" description="call removeItemAt on group with multiple elements and verify event is raised">
            <setup>
                <ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="application.addStretchRect(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
            </setup>
            <body>
				<RunCode code="application.group1.removeElementAt(0)" />
                <AssertEvent target="group1" eventName="elementRemove" eventClass="spark.events::ElementExistenceEvent" numExpectedEvents="1" />
				<AssertEventPropertyValue propertyName="element" valueExpression="value='[object Rect]'" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="15" />	
				<AssertPropertyValue target="group1" propertyName="numElements" value="1" />
            </body>
        </TestCase>
						
        <TestCase testID="Group_event_elementRemove_removeItemAt_subgroup" keywords="[Group, event, elementRemove, removeItemAt]" description="call removeItemAt on a subgroup and verify event is raised">
            <setup>
                <ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" waitTarget="group1" />
            </setup>
            <body>
				<RunCode code="application.createSubgroup(application.group1)" waitTarget="group1" waitEvent="updateComplete" />
				<RunCode code="application.group1.removeElementAt(0)" />

                <AssertEvent target="group1" eventName="elementRemove" eventClass="spark.events::ElementExistenceEvent" numExpectedEvents="1" />

				<AssertPropertyValue target="group1" propertyName="numElements" value="0" />
            </body>
        </TestCase>	
			

		
		
	</testCases>
</UnitTester>