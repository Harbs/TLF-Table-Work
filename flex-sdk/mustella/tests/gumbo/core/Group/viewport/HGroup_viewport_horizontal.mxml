<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<UnitTester xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"  xmlns:m="http://ns.adobe.com/mxml/2009" xmlns="*" testDir="gumbo/core/Group/viewport/" testSWF="HGroupBasic.mxml">
  <!-- this set of lines form a template that must be in each unit test -->
  <fx:Script>
    <![CDATA[
	public static function init(o:DisplayObject):void { }
	]]>
  </fx:Script>
  <fx:Metadata>
    <![CDATA[
	[Mixin]
	]]>
  </fx:Metadata>
  <!-- end of set of lines that must be in each unit test -->
  <fx:Script>
    <![CDATA[
	
	  import spark.layouts.*;
      import mx.controls.Label;
      import comps.*;
	  import spark.components.HGroup;
	  import mx.graphics.*;
	  import spark.core.NavigationUnit;
	  
	]]>
  </fx:Script>
  <testCases>
  
<!-- 

- - - - - - - - - - - - 
Group Viewport Testing
- - - - - - - - - - - - 

The viewport tests have been split into different files for easy of use.

 - Tests that apply to general viewport functionality and not specific to a specific layout are in Group_viewport_main.mxml
 - Tests that are specific to VerticalLayout are in Group_viewport_vertical.mxml
 - Tests that are specific to HorizontalLayout are in Group_viewport_horizontal.mxml
 
 - VerticalLayout tests are duplicated into VGroup_viewport_vertical.mxml
     (A VGroup class will be used instead of creating a Group and assigning it a layout)
 - HorizontalLayout tests are duplicated into HGroup_viewport_horizontal.mxml
     (A HGroup class will be used instead of creating a Group and assigning it a layout)
 
 - NOTE: A subset of these tests will be duplicated to the DataGroup component.  
   If you modify tests in one component, the tests should also be updated in the other.

-->  

<!-- misc / regressions -->

	<TestCase testID="HGroup_viewport_HL_changeLayoutRTE" keywords="[Group, viewport, vgroup]" description="assert error when trying to change a HGroup's layout (SDK-19769)">
		<setup>
			<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.assertGroupError('layout = new TileLayout()', application.group1)" value="You are not allowed to change the layout for this class.  It is read-only."  />
		</body>
	</TestCase>

<!-- padding -->

		<TestCase testID="HGroup_viewport_HL_padding" keywords="[HGroup, viewport, padding]" description="check that padding passes through to the layout">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
				<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="paddingTop"  value="6" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="paddingBottom"  value="7" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="paddingLeft"  value="8" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="paddingRight"  value="9" waitTarget="group1"  waitEvent="updateComplete" />
				<RunCode code="application.addCustomRect(application.group1, 1, 100, 0x000011)" waitTarget="group1" waitEvent="updateComplete"  />
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.layout.paddingTop" value="6" />
				<AssertMethodValue method="value=application.group1.layout.paddingBottom" value="7" />
				<AssertMethodValue method="value=application.group1.layout.paddingLeft" value="8" />
				<AssertMethodValue method="value=application.group1.layout.paddingRight" value="9" />
			</body>
		</TestCase>	

<!-- verticalAlign property -->

		<TestCase testID="HGroup_viewport_HL_verticalAlign" keywords="[VGroup, viewport, verticalAlign]" description="check verticalAlign gets proxied">
			<body>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="verticalAlign"  value="contentJustify" waitTarget="group1" waitEvent="updateComplete"  />
				<AssertPropertyValue target="group1" propertyName="verticalAlign" value="contentJustify" />
				<AssertMethodValue method="value=application.group1.layout.verticalAlign" value="contentJustify" />
			</body>
		</TestCase>	

<!-- gap property 

+ check default
+ check positive, negative, zero gaps
+ check gap with variableColumnWidth = true and false
+ check gaps off screen are working
+ change height of items and ensure gap doesnt change

-->

		<TestCase testID="HGroup_viewport_HL_gap_default" keywords="[Group, viewport, gap]" description="check the default value of gap">
			<body>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<AssertMethodValue method="value=application.group1.gap" value="6" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_gap_5_columnWidthVariable" keywords="[Group, viewport, gap]" description="visual check that a positive gap works properly">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="gap"  value="5" waitEvent="updateComplete" waitTarget="group1" />
								
				<RunCode code="application.addCustomRect(application.group1, 1,   100, 0x000011)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 5,   100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 10,  100, 0x000055)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20,  100, 0x000077)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 100, 100, 0x000099)" waitTarget="group1" waitEvent="updateComplete"  />
			</setup>
			<body>
				<AssertMethodValue method="value=(application.group1).variableColumnWidth" value="true" />
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_gap_5_columnWidthVariable.png" target="group1" timeout="2000" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_gap_5_columnWidthFixed" keywords="[Group, viewport, gap]" description="visual check that a positive gap works with a fixed column width">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				
				<SetProperty target="group1" propertyName="gap"  value="5" waitTarget="group1" waitEvent="updateComplete"  />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitTarget="group1" waitEvent="updateComplete"  />
				
				<RunCode code="application.addCustomRect(application.group1, 1,   100, 0x000011)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 5,   100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 10,  100, 0x000055)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20,  100, 0x000077)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 100, 100, 0x000099)" waitTarget="group1" waitEvent="updateComplete"  />
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.variableColumnWidth" value="false" />
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_gap_5_columnWidthFixed.png" target="group1" timeout="2000" />
			</body>
		</TestCase>
			
		<TestCase testID="HGroup_viewport_HL_gap_5_offScreen" keywords="[Group, viewport, gap]" description="visual check that gaps still work when scrolling the viewport">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				
				<SetProperty target="group1" propertyName="gap"  value="5" waitTarget="group1" waitEvent="updateComplete"  />
				
				<RunCode code="application.addCustomRect(application.group1, 20, 100,  0x000011)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20, 100,  0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20, 100,  0x000055)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20, 100,  0x000077)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 100, 100, 0x000099)" waitTarget="group1" waitEvent="updateComplete"  />
				<SetProperty target="group1" propertyName="horizontalScrollPosition"  value="50" />
				<AssertEvent target="group1" eventName="indexInViewChanged" eventClass="flash.events::Event" />
			</setup>
			<body>
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_gap_5_offScreen.png" target="" timeout="2000" />
			</body>
		</TestCase>

		<TestCase testID="HGroup_viewport_HL_gap_5_change_item_widths" keywords="[Group, viewport, gap]" description="visual check that gaps still work when resizing items">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				
				<SetProperty target="group1" propertyName="gap"  value="5" waitTarget="group1" waitEvent="updateComplete"  />
				
				<RunCode code="application.addCustomRect(application.group1, 100,  50, 0x000011)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 100,  50, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 100,  50, 0x000055)" waitTarget="group1" waitEvent="updateComplete"  />
			</setup>
			<body>
				<RunCode code="application.group1.getElementAt(0).width = 2" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.group1.getElementAt(1).width = 2" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.group1.getElementAt(2).width = 2" waitTarget="group1" waitEvent="updateComplete"  />								
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_gap_5_change_item_widths.png" target="group1" timeout="2000" />
			</body>
		</TestCase>
		
<!-- columnCount property -->

<!--

+ check default value
+ test data binding
+ set a group's dimensions, and then
	 + push/pull items into view with gap
	 + change variableColumnWidth 
	 + push/pull with columnWidth
	 + change item widths to pull an item in
	 + change item widths to push an item out
	 + remove items
	 + add items
-->

	<TestCase testID="HGroup_viewport_HL_dataBinding" keywords="[Group, viewport, columnCount]" description="check data binding of columnCount, firstIndexInView, lastIndexInView">
		<setup>
			<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
			<RunCode code="value=application.group1.addElement(new HorizontalLayoutDataBinding())" waitEvent="updateComplete" waitTarget="group1" />
			
			<AssertMethodValue method="value=application.group1.getElementAt(0).label_firstIndexInView.text" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).label_lastIndexInView.text" value="1" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).label_columnCount.text" value="2" />

			<RunCode code="value=application.group1.getElementAt(0).innerGroup.horizontalScrollPosition = 50" />
			<RunCode code="value=application.group1.getElementAt(0).innerGroup.getElementAt(1).width = 1" />
			<Pause timeout="200" />
			
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.getElementAt(0).label_firstIndexInView.text" value="1" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).label_lastIndexInView.text" value="3" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).label_columnCount.text" value="3" />
		</body>
	</TestCase>	



		<TestCase testID="HGroup_viewport_HL_columnCount_default" keywords="[Group, viewport, columnCount]" description="check the default value of columnCount">
			<body>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<AssertMethodValue method="value=application.group1.columnCount" value="0" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_columnCount_all_visible" keywords="[Group, viewport, columnCount]" description="all items visible in the viewport">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<RunCode code="application.addCustomRect(application.group1, 20, 100, 0x000011)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.columnCount" value="2" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_columnCount_some_visible" keywords="[Group, viewport, columnCount]" description="only two items are in the viewport">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<RunCode code="application.addCustomRect(application.group1, 20, 100, 0x000011)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.columnCount" value="2" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_columnCount_pixel_edge" keywords="[Group, viewport, columnCount]" description="show only one pixel of an item and have it counted">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="53" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<RunCode code="application.addCustomRect(application.group1, 20, 100, 0x000011)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.columnCount" value="3" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_columnCount_columnWidthFixed" keywords="[Group, viewport, columnCount]" description="check that default columnWidth causes correct columnCount">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="60" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				
				<SetProperty target="group1" propertyName="gap"  value="0" waitTarget="group1" waitEvent="updateComplete"  />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitTarget="group1" waitEvent="updateComplete"  />
				
				<RunCode code="application.addCustomRect(application.group1, 1,   100, 0x000011)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 5,   100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 10,  100, 0x000055)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20,  100, 0x000077)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 100, 100, 0x000099)" waitTarget="group1" waitEvent="updateComplete"  />
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.variableColumnWidth" value="false" />
				<AssertMethodValue method="value=application.group1.columnCount" value="5" />
			</body>
		</TestCase>
		
		<TestCase testID="HGroup_viewport_HL_columnCount_columnWidthFixed_50_push" keywords="[Group, viewport, columnCount]" description="check that columnCount correct when column width increased">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="60" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				
				<RunCode code="application.addCustomRect(application.group1, 1,   100, 0x000011)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 5,   100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 10,  100, 0x000055)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20,  100, 0x000077)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 100, 100, 0x000099)" waitTarget="group1" waitEvent="updateComplete"  />
				
				<AssertMethodValue method="value=application.group1.columnCount" value="4" />
				
				<SetProperty target="group1" propertyName="columnWidth" value="50" waitTarget="group1" waitEvent="updateComplete"  />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitTarget="group1" waitEvent="indexInViewChanged"  />
				
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.variableColumnWidth" value="false" />
				<AssertMethodValue method="value=application.group1.columnWidth" value="50" />
				<AssertMethodValue method="value=application.group1.columnCount" value="2" />
			</body>
		</TestCase>			
		
		<TestCase testID="HGroup_viewport_HL_columnCount_columnWidthFixed_50_pull" keywords="[Group, viewport, columnCount]" description="check that columnCount correct when column width decreased">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="60" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				
				<RunCode code="application.addCustomRect(application.group1, 1,   100, 0x000011)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 5,   100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 10,  100, 0x000055)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20,  100, 0x000077)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 100, 100, 0x000099)" waitTarget="group1" waitEvent="updateComplete"  />
				
				<AssertMethodValue method="value=application.group1.columnCount" value="4" />
				
				<SetProperty target="group1" propertyName="columnWidth" value="5" waitTarget="group1" waitEvent="updateComplete"  />
				
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitTarget="group1" waitEvent="indexInViewChanged"  />
				
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.variableColumnWidth" value="false" />
				<AssertMethodValue method="value=application.group1.columnWidth" value="5" />
				<AssertMethodValue method="value=application.group1.columnCount" value="5" />
			</body>
		</TestCase>	
				
		<TestCase testID="HGroup_viewport_HL_columnCount_change_item_height_pull" keywords="[Group, viewport, columnCount]" description="check that decreasing an item's width causes columnCount to update correctly">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				
				<RunCode code="application.addCustomRect(application.group1, 100,  100, 0x000011)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 5,    100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 6,    100, 0x000055)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 7,    100, 0x000077)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 100,  100, 0x000099)" waitTarget="group1" waitEvent="updateComplete"  />
				
				<AssertMethodValue method="value=application.group1.columnCount" value="1" />
				
				<RunCode code="application.group1.getElementAt(0).width = 5" waitTarget="group1" waitEvent="indexInViewChanged"  />		
				<RunCode code="application.group1.getElementAt(4).width = 5" waitTarget="group1" waitEvent="updateComplete"  />								
				
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.columnCount" value="5" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_columnCount_change_item_height_push" keywords="[Group, viewport, columnCount]" description="check that increasing an item's width causes columnCount to update correctly">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				
				<RunCode code="application.addCustomRect(application.group1, 4,  100, 0x000011)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 5,  100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 6,  100, 0x000055)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 7,  100, 0x000077)" waitTarget="group1" waitEvent="updateComplete"  />
				
				<AssertMethodValue method="value=application.group1.columnCount" value="4" />
				
				<RunCode code="application.group1.getElementAt(0).width = 100" waitTarget="group1" waitEvent="indexInViewChanged"  />								
				
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.columnCount" value="1" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_columnCount_change_gap_push" keywords="[Group, viewport, columnCount]" description="check that increasing gap causes columnCount to update correctly">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				
				<RunCode code="application.addCustomRect(application.group1, 4,  100, 0x000011)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 5,  100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 6,  100, 0x000055)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 7,  100, 0x000077)" waitTarget="group1" waitEvent="updateComplete"  />
				
				<AssertMethodValue method="value=application.group1.columnCount" value="4" />
				
				<SetProperty target="group1" propertyName="gap"  value="30" waitTarget="group1" waitEvent="indexInViewChanged"  />
				
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.columnCount" value="2" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_columnCount_change_gap_pull" keywords="[Group, viewport, columnCount]" description="check that decreasing gap causes columnCount to update correctly">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				
				<SetProperty target="group1" propertyName="gap"  value="30" waitTarget="group1" waitEvent="updateComplete"  />
				
				<RunCode code="application.addCustomRect(application.group1, 4,  100, 0x000011)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 5,  100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 6,  100, 0x000055)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 7,  100, 0x000077)" waitTarget="group1" waitEvent="updateComplete"  />
				
				<AssertMethodValue method="value=application.group1.columnCount" value="2" />
				
				<SetProperty target="group1" propertyName="gap"  value="0" waitTarget="group1" waitEvent="indexInViewChanged"  />
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.columnCount" value="4" />
			</body>
		</TestCase>			
				
		<TestCase testID="HGroup_viewport_HL_columnCount_removeItems_offscreen" keywords="[Group, viewport, columnCount]" description="check that removing items off screen doesnt change columnCount">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
								
				<RunCode code="application.addCustomRect(application.group1, 1,   100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 5,   100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 10,  100, 0x000055)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20,  100, 0x000077)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 100, 100, 0x000077)" waitTarget="group1" waitEvent="updateComplete"  />
				
				<AssertMethodValue method="value=application.group1.columnCount" value="4" />
				
				<RunCode code="application.group1.removeElementAt(4)" waitTarget="group1" waitEvent="updateComplete"  />
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.columnCount" value="4" />
			</body>
		</TestCase>			

		<TestCase testID="HGroup_viewport_HL_columnCount_removeItems_onscreen" keywords="[Group, viewport, columnCount]" description="check that removing items on screen changes columnCount">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
								
				<RunCode code="application.addCustomRect(application.group1, 1,   100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 5,   100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 10,  100, 0x000055)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20,  100, 0x000077)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 100, 100, 0x000077)" waitTarget="group1" waitEvent="updateComplete"  />
				
				<AssertMethodValue method="value=application.group1.columnCount" value="4" />
				
				<RunCode code="application.group1.removeElementAt(0)" waitTarget="group1" waitEvent="indexInViewChanged"  />
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.columnCount" value="3" />
			</body>
		</TestCase>									
				
		<TestCase testID="HGroup_viewport_HL_columnCount_addItems_onscreen" keywords="[Group, viewport, columnCount]" description="check that adding items on screen changes columnCount">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
								
				<RunCode code="application.addCustomRect(application.group1, 1, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 5, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				
				<AssertMethodValue method="value=application.group1.columnCount" value="2" />
				
				<RunCode code="application.addCustomRect(application.group1, 10,  100, 0x000033)" waitTarget="group1" waitEvent="indexInViewChanged"  />
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.columnCount" value="3" />
			</body>
		</TestCase>									
			
		<TestCase testID="HGroup_viewport_HL_columnCount_addItems_offscreen" keywords="[Group, viewport, columnCount]" description="check that adding items off screen doesnt change columnCount">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
								
				<RunCode code="application.addCustomRect(application.group1, 25,   100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 25,   100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				
				<AssertMethodValue method="value=application.group1.columnCount" value="2" />
				
				<RunCode code="application.addCustomRect(application.group1, 10,  100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.columnCount" value="2" />
			</body>
		</TestCase>	
		

<!-- variableColumnWidth property -->

<!--

+ Add items of different widths
+ Change item widths at runtime  
	+ with false
	+ with true
	+ flip false to true
+ change width of the group
+ set columnWidth with variableColumnWidth true - ensure columnWidth ignored
+ set columnWidth with variableColumnWidth false - ensure columnWidth envored 
+ swap items into view (with true/false)
+ swap items in view (with true/false)
+ check children position and dimension are correct when this is false/true

-->

		<TestCase testID="HGroup_viewport_HL_variableColumnWidth_different_height_items_small" keywords="[Group, viewport, variableColumnWidth]" description="check that items of different widths are shown properly">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				
				<RunCode code="application.addCustomRect(application.group1, 1, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 2, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 4, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 8, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />	
				<RunCode code="application.addCustomRect(application.group1, 16, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />	
				<RunCode code="application.addCustomRect(application.group1, 32, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />				

			</setup>
			<body>
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_variableColumnWidth_different_width_items_small.png" target="group1" timeout="2000" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_variableColumnWidth_different_height_width" keywords="[Group, viewport, variableColumnWidth]" description="check that items of different widths are shown properly">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				
				<RunCode code="application.addCustomRect(application.group1, 10, 10, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20, 20, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 5, 30, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 1, 40, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />	

			</setup>
			<body>
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_variableColumnWidth_different_height_width.png" target="group1" timeout="2000" />
			</body>
		</TestCase>	
				
		<TestCase testID="HGroup_viewport_HL_variableColumnWidth_columnWidth_true" keywords="[Group, viewport, variableColumnWidth]" description="set columnWidth and ensure its ignored">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				
				<SetProperty target="group1" propertyName="columnWidth" value="50" waitTarget="group1" waitEvent="updateComplete"  />
				
				<RunCode code="application.addCustomRect(application.group1, 10, 10, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20, 20, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 5, 30, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 1, 40, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />	

			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.columnWidth" value="50" />
				<AssertMethodValue method="value=application.group1.variableColumnWidth" value="true" />
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_variableColumnWidth_columnWidth.png" target="group1" timeout="2000" />
			</body>
		</TestCase>			
				
		<TestCase testID="HGroup_viewport_HL_variableColumnWidth_columnWidth_false" keywords="[Group, viewport, variableColumnWidth]" description="set columnWidth and ensure its enforced">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				
				<SetProperty target="group1" propertyName="columnWidth" value="50" waitTarget="group1" waitEvent="updateComplete"  />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitTarget="group1" waitEvent="updateComplete"  />
				
				<RunCode code="application.addCustomRect(application.group1, 10, 10, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20, 20, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 5, 30, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 1, 40, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />	

			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.columnWidth" value="50" />
				<AssertMethodValue method="value=application.group1.variableColumnWidth" value="false" />
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_variableColumnWidth_columnWidth_false.png" target="group1" timeout="2000" />
			</body>
		</TestCase>
				
		<TestCase testID="HGroup_viewport_HL_variableColumnWidth_change_item_widths_smaller" keywords="[Group, viewport, variableColumnWidth]" description="make item widths smaller with variableColumnWidth true">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
								
				<RunCode code="application.addCustomRect(application.group1, 10, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 10, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 10, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 10, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />	
				
				<RunCode code="application.group1.getElementAt(0).width = 1" waitTarget="group1" waitEvent="updateComplete"  />	
				<RunCode code="application.group1.getElementAt(1).width = 2" waitTarget="group1" waitEvent="updateComplete"  />	
				<RunCode code="application.group1.getElementAt(2).width = 3" waitTarget="group1" waitEvent="updateComplete"  />	
				<RunCode code="application.group1.getElementAt(3).width = 4" waitTarget="group1" waitEvent="updateComplete"  />									
		
			</setup>
			<body>
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_variableColumnWidth_change_item_widths_smaller.png" target="group1" timeout="2000" />
			</body>
		</TestCase>
				
		<TestCase testID="HGroup_viewport_HL_variableColumnWidth_change_item_widths_larger" keywords="[Group, viewport, variableColumnWidth]" description="make item widths larger with variableColumnWidth true">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="150" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
								
				<RunCode code="application.addCustomRect(application.group1, 10, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 10, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 10, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 10, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />	
				
				<RunCode code="application.group1.getElementAt(1).width = 20" waitTarget="group1" waitEvent="updateComplete"  />	
				<RunCode code="application.group1.getElementAt(2).width = 30" waitTarget="group1" waitEvent="updateComplete"  />	
				<RunCode code="application.group1.getElementAt(3).width = 40" waitTarget="group1" waitEvent="updateComplete"  />									
		
			</setup>
			<body>
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_variableColumnWidth_change_item_widths_larger.png" target="group1" timeout="2000" />
			</body>
		</TestCase>

		<TestCase testID="HGroup_viewport_HL_variableColumnWidth_change_item_widths_constant" keywords="[Group, viewport, variableColumnWidth]" description="make item widths all same width with variableColumnWidth true">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="150" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				
				<RunCode code="application.addCustomRect(application.group1, 1, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 2, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 3, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 4, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />	
				
				<RunCode code="application.group1.getElementAt(0).width = 20" waitTarget="group1" waitEvent="updateComplete"  />	
				<RunCode code="application.group1.getElementAt(1).width = 20" waitTarget="group1" waitEvent="updateComplete"  />	
				<RunCode code="application.group1.getElementAt(2).width = 20" waitTarget="group1" waitEvent="updateComplete"  />	
				<RunCode code="application.group1.getElementAt(3).width = 20" waitTarget="group1" waitEvent="updateComplete"  />	
				
			</setup>
			<body>
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_variableColumnWidth_change_item_widths_constant.png" target="group1" timeout="2000" />
			</body>
		</TestCase>
		
		<TestCase testID="HGroup_viewport_HL_variableColumnWidth_false_change_item_widths" keywords="[Group, viewport, variableColumnWidth]" description="changing item widths shouldn't visually change with vrh set to false">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="150" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" />
				
				<RunCode code="application.addCustomRect(application.group1, 10, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20, 100, 0x000055)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 30, 100, 0x000077)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 40, 100, 0x000099)" waitTarget="group1" waitEvent="updateComplete"  />	
				
				<RunCode code="application.group1.getElementAt(0).width = 30" waitTarget="group1" waitEvent="updateComplete"  />	
				<RunCode code="application.group1.getElementAt(1).width = 40" waitTarget="group1" waitEvent="updateComplete"  />	
				<RunCode code="application.group1.getElementAt(2).width = 50" waitTarget="group1" waitEvent="updateComplete"  />	
				<RunCode code="application.group1.getElementAt(3).width = 60" waitTarget="group1" waitEvent="updateComplete"  />	
				
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.variableColumnWidth" value="false" />
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_variableColumnWidth_false_change_item_widths.png" target="group1" timeout="2000" />
			</body>
		</TestCase>
		
		<TestCase testID="HGroup_viewport_HL_variableColumnWidth_flip" keywords="[Group, viewport, variableColumnWidth]" description="flip the variableColumnWidth to true after changing the item widths">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="150" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" />
				
				<RunCode code="application.addCustomRect(application.group1, 10, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 30, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 40, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />	
				
				<RunCode code="application.group1.getElementAt(0).width = 40" waitTarget="group1" waitEvent="updateComplete"  />	
				<RunCode code="application.group1.getElementAt(1).width = 30" waitTarget="group1" waitEvent="updateComplete"  />	
				<RunCode code="application.group1.getElementAt(2).width = 20" waitTarget="group1" waitEvent="updateComplete"  />	
				<RunCode code="application.group1.getElementAt(3).width = 10" waitTarget="group1" waitEvent="updateComplete"  />	
				<SetProperty target="group1" propertyName="variableColumnWidth" value="true;" waitTarget="group1" waitEvent="updateComplete" />
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.variableColumnWidth" value="true" />
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_variableColumnWidth_flip.png" target="group1" timeout="2000" />
			</body>
		</TestCase>
	
		<TestCase testID="HGroup_viewport_HL_variableColumnWidth_change_group_width" keywords="[Group, viewport, variableColumnWidth]" description="change the Group's width">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="150" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				
				<RunCode code="application.addCustomRect(application.group1, 10, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 30, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 40, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />	
				
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.variableColumnWidth" value="true" />
				<AssertPropertyValue target="group1" propertyName="width" value="100" />
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_variableColumnWidth_change_group_width.png" target="group1" timeout="2000" />
			</body>
		</TestCase>

		<TestCase testID="HGroup_viewport_HL_variableColumnWidth_swapItems_in_view" keywords="[Group, viewport, variableColumnWidth]" description="swap items in view, ensure that variable width respected">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				
				<SetProperty target="group1" propertyName="gap"  value="1" waitTarget="group1" waitEvent="updateComplete"  />
				
				<RunCode code="application.addCustomRect(application.group1, 5, 100, 0x000011)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 10, 100, 0x000022)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 30, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 2, 100, 0x000044)" waitTarget="group1" waitEvent="updateComplete"  />	
				
				<RunCode code="application.group1.swapElementsAt(0, 3)" waitTarget="group1" waitEvent="updateComplete"  />	
				<RunCode code="application.group1.swapElementsAt(1, 3)" waitTarget="group1" waitEvent="updateComplete"  />
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.variableColumnWidth" value="true" />
				<AssertPropertyValue target="group1" propertyName="width" value="50" />
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_variableColumnWidth_swapItems_in_view.png" target="group1" timeout="2000" />
			</body>
		</TestCase>
				
		<TestCase testID="HGroup_viewport_HL_variableColumnWidth_false_swapItems_in_view" keywords="[Group, viewport, variableColumnWidth]" description="swap items in view, ensure that fixed height respected">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				
				<SetProperty target="group1" propertyName="gap"  value="1" waitTarget="group1" waitEvent="updateComplete"  />
				<SetProperty target="group1" propertyName="columnWidth" value="10" waitTarget="group1" waitEvent="updateComplete"  />
				
				<RunCode code="application.addCustomRect(application.group1, 5, 100, 0x000011)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 10, 100, 0x000022)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 30, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 2, 100, 0x000044)" waitTarget="group1" waitEvent="updateComplete"  />	
				
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitTarget="group1" waitEvent="updateComplete"  />
				
				<RunCode code="application.group1.swapElementsAt(0, 3)" waitTarget="group1" waitEvent="updateComplete"  />	
				<RunCode code="application.group1.swapElementsAt(1, 3)" waitTarget="group1" waitEvent="updateComplete"  />
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.variableColumnWidth" value="false" />
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_variableColumnWidth_false_swapItems_in_view.png" target="group1" timeout="2000" />
			</body>
		</TestCase>

		<TestCase testID="HGroup_viewport_HL_variableColumnWidth_swapItems_into_view" keywords="[Group, viewport, variableColumnWidth]" description="swap items into view, ensure that variable height respected">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				
				<SetProperty target="group1" propertyName="gap"  value="1" waitTarget="group1" waitEvent="updateComplete"  />
				
				<RunCode code="application.addCustomRect(application.group1, 5, 100, 0x000011)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 20, 100, 0x000022)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 30, 100, 0x000033)" waitTarget="group1" waitEvent="updateComplete"  />
				<RunCode code="application.addCustomRect(application.group1, 2, 100, 0x000044)" waitTarget="group1" waitEvent="updateComplete"  />	
				
				<RunCode code="application.group1.swapElementsAt(2, 3)" waitTarget="group1" waitEvent="updateComplete"  />	
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.variableColumnWidth" value="true" />
				<AssertPropertyValue target="group1" propertyName="width" value="50" />
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_variableColumnWidth_swapItems_into_view.png" target="group1" timeout="2000" />
			</body>
		</TestCase>
							
		<TestCase testID="HGroup_viewport_HL_variableColumnWidth_false_swapItems_into_view" keywords="[Group, viewport, variableColumnWidth]" description="swap items into view, ensure that fixed height respected">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="72" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
								
				<RunCode code="value=application.addCustomRect(application.group1, 20,  120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 25,  120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 100, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 35,  120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />

				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				
			</setup>
			<body>
				<RunCode code="application.group1.swapElementsAt(3,2)" waitEvent="updateComplete" waitTarget="group1"/>
				<AssertMethodValue method="value=application.group1.variableColumnWidth" value="false" />
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_variableColumnWidth_false_swapItems_into_view.png" target="group1" timeout="2000" />
			</body>
		</TestCase>
		
		<TestCase testID="HGroup_viewport_HL_variableColumnWidth_true_child_position" keywords="[Group, viewport, variableColumnWidth]" description="assert position and size of children when vrh true">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="72" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
								
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 100, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 35, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />

			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="20" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(1).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="25" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).x" value="26" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(2).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).width" value="100" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).x" value="57" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(3).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).width" value="35" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).x" value="163" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).y" value="0" />
			
				<AssertMethodValue method="value=application.group1.variableColumnWidth" value="true" />
			</body>
		</TestCase>
		
		<TestCase testID="HGroup_viewport_HL_variableColumnWidth_false_child_position" keywords="[Group, viewport, variableColumnWidth]" description="assert position and size of children when vrh false">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="72" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
				
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
								
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 100, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 35, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />

			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="20" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(1).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="20" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).x" value="26" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(2).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).width" value="20" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).x" value="52" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(3).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).width" value="20" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).x" value="78" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).y" value="0" />
			
				<AssertMethodValue method="value=application.group1.variableColumnWidth" value="false" />
				
			</body>
		</TestCase>
									
		<TestCase testID="HGroup_viewport_HL_variableColumnWidth_flip_child_position" keywords="[Group, viewport, variableColumnWidth]" description="assert position and size of children when vrh false then true">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="72" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
				
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
								
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120  ,0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120  ,0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 100, 120 ,0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 35, 120  ,0x333333)" waitEvent="updateComplete" waitTarget="group1" />

			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="20" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(1).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="20" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).x" value="26" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(2).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).width" value="20" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).x" value="52" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(3).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).width" value="20" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).x" value="78" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).y" value="0" />
			
				<AssertMethodValue method="value=application.group1.variableColumnWidth" value="false" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="true" waitEvent="updateComplete" waitTarget="group1" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="20" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(1).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="25" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).x" value="26" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(2).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).width" value="100" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).x" value="57" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(3).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).width" value="35" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).x" value="163" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).y" value="0" />
			
				<AssertMethodValue method="value=application.group1.variableColumnWidth" value="true" />
			</body>
		</TestCase>		
				

<!-- columnWidth property -->				

<!--

-Note: must have variableColumnWidth set to false

+ Set to positive values
+ Set to zero
+ Change height of a Group and ensure columnWidth isn't changed
+ Check the default columnWidth is used when columnWidth not set
+ Change the gap and ensure columnWidth doesn't change
+ set items to invisible
+ scale/rotate a group
- scale/rotate an item


-->
					
		<TestCase testID="HGroup_viewport_HL_columnWidth_default" keywords="[Group, viewport, columnWidth]" description="visual check of default column width">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 15, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 35, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
			</setup>
			<body>		
				<AssertMethodValue method="value=application.group1.columnWidth" value="20" />
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_columnWidth_default.png" target="group1" timeout="2000" />			
			</body>
		</TestCase>				
		
		<TestCase testID="HGroup_viewport_HL_columnWidth_zero" keywords="[Group, viewport, columnWidth]" description="zero should show nothing">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120,  0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120,  0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 100, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 35, 120,  0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
				<SetProperty target="group1" propertyName="columnWidth" value="0" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="gap"  value="0" waitEvent="updateComplete" waitTarget="group1" />
				
			</setup>
			<body>
			
				<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(1).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).x" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(2).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).width" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).x" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(3).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).width" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).x" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).y" value="0" />
			
				<AssertPropertyValue target="group1" propertyName="width" value="50" />
				<AssertPropertyValue target="group1" propertyName="height" value="50" />
				
				<AssertMethodValue method="value=application.group1.columnWidth" value="0" />
				<AssertMethodValue method="value=application.group1.variableColumnWidth" value="false" />
				
			</body>
		</TestCase>		
				
		<TestCase testID="HGroup_viewport_HL_columnWidth_zero_gap" keywords="[Group, viewport, columnWidth]" description="zero should show nothing, gap should change y values">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120  ,0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120  ,0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 100, 120 ,0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 35, 120  ,0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
				<SetProperty target="group1" propertyName="columnWidth" value="0" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="gap"  value="1" waitEvent="updateComplete" waitTarget="group1" />
				
			</setup>
			<body>
			
				<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(1).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).x" value="1" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(2).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).width" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).x" value="2" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(3).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).width" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).x" value="3" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).y" value="0" />
			
				<AssertPropertyValue target="group1" propertyName="width" value="50" />
				<AssertPropertyValue target="group1" propertyName="height" value="50" />
				
				<AssertMethodValue method="value=application.group1.columnWidth" value="0" />
				<AssertMethodValue method="value=application.group1.variableColumnWidth" value="false" />
				
			</body>
		</TestCase>					
			
		<TestCase testID="HGroup_viewport_HL_columnWidth_change_group_height" keywords="[Group, viewport, columnWidth]" description="changing group height shouldnt change columnWidth">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 100, 120 ,0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 35, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
				<SetProperty target="group1" propertyName="columnWidth" value="5" waitEvent="updateComplete" waitTarget="group1" />
				
			</setup>
			<body>		
				<AssertMethodValue method="value=application.group1.columnWidth" value="5" />
				
				<SetProperty target="group1" propertyName="height"  value="25" waitTarget="group1"  waitEvent="updateComplete" />	
				<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />	
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />				
			
				<AssertPropertyValue target="group1" propertyName="width" value="50" />
				<AssertPropertyValue target="group1" propertyName="height" value="50" />
			
				<AssertMethodValue method="value=application.group1.columnWidth" value="5" />
				
			</body>
		</TestCase>					
		
		<TestCase testID="HGroup_viewport_HL_columnWidth_1" keywords="[Group, viewport, columnWidth]" description="check 1 pixel column width">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="columnWidth" value="1" waitEvent="updateComplete" waitTarget="group1" />
								
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 15, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 35, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
			</setup>
			<body>		
				
				<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="1" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(1).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="1" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).x" value="7" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(2).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).width" value="1" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).x" value="14" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(3).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).width" value="1" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).x" value="21" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).y" value="0" />
			
				<AssertMethodValue method="value=application.group1.columnWidth" value="1" />
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_columnWidth_1.png" target="group1" timeout="2000" />			
			</body>
		</TestCase>					
			
		<TestCase testID="HGroup_viewport_HL_columnWidth_100" keywords="[Group, viewport, columnWidth]" description="check 100 pixel column width">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="312" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="columnWidth" value="100" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 15, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				
			</setup>
			<body>		
				
				<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="100" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(1).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="100" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).x" value="106" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(2).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).width" value="100" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).x" value="212" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.columnWidth" value="100" />
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_columnWidth_100.png" target="group1" timeout="2000" />			
			</body>
		</TestCase>					
							
		<TestCase testID="HGroup_viewport_HL_columnWidth_change_item_width" keywords="[Group, viewport, columnWidth]" description="changing item width should have no effect">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="312" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="columnWidth" value="100" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 15, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				
				<AssertMethodValue method="value=application.group1.columnWidth" value="100" />
			</setup>
			<body>		
				
				<RunCode code="value=application.group1.getElementAt(0).width = 1" waitEvent="updateComplete" waitTarget="group1" />
 				<RunCode code="value=application.group1.getElementAt(1).width = 1" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.group1.getElementAt(2).width = 1" waitEvent="updateComplete" waitTarget="group1" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="100" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(1).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="100" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).x" value="106" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(2).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).width" value="100" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).x" value="212" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.columnWidth" value="100" />
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_columnWidth_change_item_width.png" target="group1" timeout="2000" />			
			</body>
		</TestCase>					
							
		<TestCase testID="HGroup_viewport_HL_columnWidth_scale_rotate_group" keywords="[Group, viewport, columnWidth]" description="scaling and rotating a group shouldn't change the positions and dimensions of items">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="columnWidth" value="1" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 15, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 35, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
				<SetProperty target="group1" propertyName="scaleX"  value="2" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="scaleY"  value="2" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="rotation"  value="45" waitTarget="group1"  waitEvent="updateComplete" />
			</setup>
			<body>		
				
				<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="1" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(1).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="1" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).x" value="7" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(2).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).width" value="1" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).x" value="14" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(3).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).width" value="1" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).x" value="21" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).y" value="0" />
			
				<AssertMethodValue method="value=application.group1.columnWidth" value="1" />
				<AssertPropertyValue target="group1" propertyName="scaleX" value="2" />
				<AssertPropertyValue target="group1" propertyName="scaleY" value="2" />
				<AssertPropertyValue target="group1" propertyName="rotation" value="45" />
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_columnWidth_scale_rotate_group.png" target="" timeout="2000" />			
			</body>
		</TestCase>		
		
		<TestCase testID="HGroup_viewport_HL_columnWidth_scale_item" keywords="[Group, viewport, columnWidth]" description="scaling and rotating an item">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="columnWidth" value="1" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 15, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 35, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.group1.getElementAt(1).scaleY = 10" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.group1.getElementAt(3).scaleY = 10" waitEvent="updateComplete" waitTarget="group1" />
				
				
			</setup>
			<body>		

				<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="1" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(1).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="1" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).x" value="7" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(2).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).width" value="1" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).x" value="14" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(3).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).width" value="1" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).x" value="21" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).y" value="0" />
			
				<AssertMethodValue method="value=application.group1.columnWidth" value="1" />
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_columnWidth_scale_item.png" target="group1" timeout="2000" />			
			</body>
		</TestCase>				
				
		<TestCase testID="HGroup_viewport_HL_columnWidth_invisible_item" keywords="[Group, viewport, columnWidth]" description="make some items invisible">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="gap"  value="1" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="columnWidth" value="10" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 15, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 35, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.group1.getElementAt(1).visible = false" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.group1.getElementAt(3).visible = false" waitEvent="updateComplete" waitTarget="group1" />
					
			</setup>
			<body>		
				
				<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="10" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
				<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(1).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="10" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).x" value="11" />
				<AssertMethodValue method="value=application.group1.getElementAt(1).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(2).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).width" value="10" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).x" value="22" />
				<AssertMethodValue method="value=application.group1.getElementAt(2).y" value="0" />
				
				<AssertMethodValue method="value=application.group1.getElementAt(3).height" value="120" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).width" value="10" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).x" value="33" />
				<AssertMethodValue method="value=application.group1.getElementAt(3).y" value="0" />
			
				<AssertMethodValue method="value=application.group1.columnWidth" value="10" />
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_columnWidth_invisible_item.png" target="group1" timeout="2000" />			
			</body>
		</TestCase>					
				
<!-- fractionOfElementInView() method and firstInView/lastInView properties -->
<!--

fractionOfElementInView() method

+ check an item out of view returns 0.0
+ check a null/undefined item returns 0.0
+ check an item in view returns 1.0
+ check an item partially in view returns a fraction
+ check an invisible item in view returns 1.0
+ check invalid index returns 0.0
+ check item with includeInLayout set to false returns 0.0
+ Should return nonzero when passed valid firstIndexInView
+ Should return nonzero when passed valid lastIndexInView
+ Should return zero when passed invalid firstIndexInView/lastIndexInView
+ move viewport and check that fractionOfElementInView() updates properly
+ push/pull gap ensure fractionOfElementInView() updates correctly
+ push/pull columnWidth ensure fractionOfElementInView() updates correctly
+ remove items at run time
+ rotation shouldn't affect fractionOfElementInView()

firstIndexInView/lastIndexInView property specific

+ Test data binding (see columnCount)
+ test first/last item completely in view
+ test first/last item partially in view
+ test first/last item in view having visible set to false
+ test setting columnWidth to zero check first/lastIndexInView still correct
+ check returns -1 when no items in view

-->
		
		<TestCase testID="HGroup_viewport_HL_inView_invalid_index" keywords="[Group, viewport, fractionOfElementInView]" description="check invalid index returns 0.0">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />	
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />	
			</setup>
			<body>
				<AssertMethodValue method="value=(application.group1).firstIndexInView" value="-1" />
				<AssertMethodValue method="value=(application.group1).lastIndexInView" value="-1" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView((application.group1).firstIndexInView)" value="0.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView((application.group1).lastIndexInView)" value="0.0" />
				
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(0)" value="0.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(-1)" value="0.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(30)" value="0.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(3.1415)" value="0.0" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_inView_firstIndex_fixed" keywords="[Group, viewport, fractionOfElementInView]" description="check firstIndexInView and lastIndexInView returns greater than 0">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="columnWidth" value="14" waitEvent="updateComplete" waitTarget="group1" />

				<RunCode code="value=application.addCustomRect(application.group1, 14, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 14, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 100, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
			</setup>
			<body>		
			
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(application.group1.firstIndexInView)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(application.group1.lastIndexInView)" value="0.714286" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="0.714286" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="0.0" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_inView_firstIndex_variable" keywords="[Group, viewport, fractionOfElementInView]" description="check firstIndexInView and lastIndexInView returns greater than 0">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />

				<RunCode code="value=application.addCustomRect(application.group1, 14, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 14, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 100, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
			</setup>
			<body>		
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(application.group1.firstIndexInView)" value="1" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(application.group1.lastIndexInView)" value="0.1" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="0.1" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="0.0" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_inView_invisible_onscreen" keywords="[Group, viewport, fractionOfElementInView]" description="check an invisible item in view returns 1.0">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />	
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />

				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.group1.getElementAt(0).visible = false" waitEvent="updateComplete" waitTarget="group1" />
			</setup>
			<body>		
				<AssertMethodValue method="value=(application.group1).firstIndexInView" value="0" />
				<AssertMethodValue method="value=(application.group1).lastIndexInView" value="0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(0)" value="1.0" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_inView_invisible_offscreen" keywords="[Group, viewport, fractionOfElementInView]" description="check an invisible item in view returns 0.0 when offscreen">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />	
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />

				<RunCode code="value=application.addCustomRect(application.group1, 50, 100, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 50, 100, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.group1.getElementAt(1).visible = false" waitEvent="updateComplete" waitTarget="group1" />
			</setup>
			<body>		
				<AssertMethodValue method="value=(application.group1).firstIndexInView" value="0" />
				<AssertMethodValue method="value=(application.group1).lastIndexInView" value="0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(1)" value="0.0" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_inView_includeInLayout" keywords="[Group, viewport, fractionOfElementInView]" description="check item with includeInLayout set to false returns 0.0">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />	
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />

				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.group1.getElementAt(0).includeInLayout = false" />
				<Pause timeout="200" />
			</setup>
			<body>		
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(0)" value="0.0" />
			</body>
		</TestCase>		
			
		<TestCase testID="HGroup_viewport_HL_inView_rows_fixed" keywords="[Group, viewport, fractionOfElementInView]" description="check an item out of view returns 0.0 with fixed column width">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="columnWidth" value="14" waitEvent="updateComplete" waitTarget="group1" />

				<RunCode code="value=application.addCustomRect(application.group1, 14, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 14, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 100, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.firstIndexInView" value="0" />
				<AssertMethodValue method="value=application.group1.lastIndexInView" value="2" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="0.714286" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="0.0" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_inView_rows_variable" keywords="[Group, viewport, fractionOfElementInView]" description="check an item out of view returns 0.0 with variable column width">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />

				<RunCode code="value=application.addCustomRect(application.group1, 14, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 14, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 100, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
			</setup>
			<body>		
				<AssertMethodValue method="value=application.group1.firstIndexInView" value="0" />
				<AssertMethodValue method="value=application.group1.lastIndexInView" value="2" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="0.1" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="0.0" />
			</body>
		</TestCase>	

		<TestCase testID="HGroup_viewport_HL_inView_columnWidth_0" keywords="[Group, viewport, fractionOfElementInView]" description="check items show as inview when columnWidth is zero (fixed)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="columnWidth" value="0" waitEvent="updateComplete" waitTarget="group1" />

				<RunCode code="value=application.addCustomRect(application.group1, 14, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 14, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 100, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
			</setup>
			<body>		
				<AssertMethodValue method="value=application.group1.firstIndexInView" value="0" />
				<AssertMethodValue method="value=application.group1.lastIndexInView" value="3" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="1.0" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_inView_change_viewport_variable" keywords="[Group, viewport, fractionOfElementInView]" description="move viewport in variable column width and check that fractionOfElementInView() updates properly">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />

				<RunCode code="value=application.addCustomRect(application.group1, 14, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 14, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 50, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 4, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
				<SetProperty target="group1" propertyName="verticalScrollPosition"  value="50"  />
				<SetProperty target="group1" propertyName="horizontalScrollPosition"  value="50"  />
				<AssertEvent target="group1" eventName="indexInViewChanged" eventClass="flash.events::Event" />
				
			</setup>
			<body>		
				<AssertMethodValue method="value=application.group1.firstIndexInView" value="2" />
				<AssertMethodValue method="value=application.group1.lastIndexInView" value="3" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="0.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="0.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="0.8" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="1.0" />
			</body>
		</TestCase>	

		<TestCase testID="HGroup_viewport_HL_inView_change_viewport_fixed" keywords="[Group, viewport, fractionOfElementInView]" description="move viewport in fixed column width and check that fractionOfElementInView() updates properly">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="columnWidth" value="50" waitEvent="updateComplete" waitTarget="group1" />

				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
				<SetProperty target="group1" propertyName="verticalScrollPosition"  value="50"  />
				<SetProperty target="group1" propertyName="horizontalScrollPosition"  value="50"  />
				<AssertEvent target="group1" eventName="indexInViewChanged" eventClass="flash.events::Event" />
				
			</setup>
			<body>		
				<AssertMethodValue method="value=application.group1.firstIndexInView" value="1" />
				<AssertMethodValue method="value=application.group1.lastIndexInView" value="1" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="0.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="0.88" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="0.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="0.0" />
			</body>
		</TestCase>	

		<TestCase testID="HGroup_viewport_HL_inView_change_gap_push" keywords="[Group, viewport, fractionOfElementInView]" description="increase gap and check that fractionOfElementInView() updates properly">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />

				<RunCode code="value=application.addCustomRect(application.group1, 14, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 14, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 50, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 4, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="0.2" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="0.0" />
				
				<SetProperty target="group1" propertyName="gap"  value="25" waitEvent="updateComplete" waitTarget="group1" />
				
			</setup>
			<body>		
				<AssertMethodValue method="value=application.group1.firstIndexInView" value="0" />
				<AssertMethodValue method="value=application.group1.lastIndexInView" value="1" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="0.785714" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="0.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="0.0" />
			</body>
		</TestCase>					
						
		<TestCase testID="HGroup_viewport_HL_inView_change_gap_pull" keywords="[Group, viewport, fractionOfElementInView]" description="decrease gap and check that fractionOfElementInView() updates properly">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="gap"  value="25" waitEvent="updateComplete" waitTarget="group1" />

				<RunCode code="value=application.addCustomRect(application.group1, 14, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 14, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 50, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 4, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="0.785714" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="0.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="0.0" />
				
				<SetProperty target="group1" propertyName="gap"  value="0" waitEvent="updateComplete" waitTarget="group1" />
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.firstIndexInView" value="0" />
				<AssertMethodValue method="value=application.group1.lastIndexInView" value="2" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="0.44" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="0.0" />
			</body>
		</TestCase>	

		<TestCase testID="HGroup_viewport_HL_inView_change_columnWidth_push" keywords="[Group, viewport, fractionOfElementInView]" description="increase columnWidth and check that fractionOfElementInView() updates properly">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="columnWidth" value="14" waitEvent="updateComplete" waitTarget="group1" />

				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="0.714286" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="0.0" />
				
				<SetProperty target="group1" propertyName="columnWidth" value="20" waitEvent="updateComplete" waitTarget="group1" />

			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.firstIndexInView" value="0" />
				<AssertMethodValue method="value=application.group1.lastIndexInView" value="1" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="0.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="0.0" />
			</body>
		</TestCase>	

		<TestCase testID="HGroup_viewport_HL_inView_change_columnWidth_pull" keywords="[Group, viewport, fractionOfElementInView]" description="decrease columnWidth and check that fractionOfElementInView() updates properly">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="columnWidth" value="14" waitEvent="updateComplete" waitTarget="group1" />

				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
				<AssertMethodValue method="value=application.group1.firstIndexInView" value="0" />
				<AssertMethodValue method="value=application.group1.lastIndexInView" value="2" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="0.714286" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="0.0" />
				
				<SetProperty target="group1" propertyName="columnWidth" value="1" waitEvent="updateComplete" waitTarget="group1" />

			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.firstIndexInView" value="0" />
				<AssertMethodValue method="value=application.group1.lastIndexInView" value="3" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="1.0" />
			</body>
		</TestCase>	

		<TestCase testID="HGroup_viewport_HL_inView_scrollPastBottom_fixed" keywords="[Group, viewport, fractionOfElementInView]" description="change scroll position beyond bottom of the content (fixed columns)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="columnWidth" value="10" waitEvent="updateComplete" waitTarget="group1" />

				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.group1.horizontalScrollPosition = 37" />
				<AssertEvent target="group1" eventName="indexInViewChanged" eventClass="flash.events::Event" />
				
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.firstIndexInView" value="2" />
				<AssertMethodValue method="value=application.group1.lastIndexInView" value="3" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="0.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="0.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="0.5" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="1.0" />
			</body>
		</TestCase>	

		<TestCase testID="HGroup_viewport_HL_inView_scrollPastBottom_variable" keywords="[Group, viewport, fractionOfElementInView]" description="change scroll position beyond bottom of the content (variable columns))">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />

				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.group1.horizontalScrollPosition = 37" />
				<AssertEvent target="group1" eventName="indexInViewChanged" eventClass="flash.events::Event" />
				
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.firstIndexInView" value="2" />
				<AssertMethodValue method="value=application.group1.lastIndexInView" value="3" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="0.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="0.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="0.5" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="1.0" />
			</body>
		</TestCase>	
			
		<TestCase testID="HGroup_viewport_HL_inView_scrollPastWidth_fixed" keywords="[Group, viewport, fractionOfElementInView]" description="moving scroll position vertically shouldn't change inView values for this horizontal layout">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="columnWidth" value="10" waitEvent="updateComplete" waitTarget="group1" />

				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.group1.verticalScrollPosition = 120" />
				
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.firstIndexInView" value="0" />
				<AssertMethodValue method="value=application.group1.lastIndexInView" value="3" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="0.2" />
			</body>
		</TestCase>	

		<TestCase testID="HGroup_viewport_HL_inView_scrollPastWidth_variable" keywords="[Group, viewport, fractionOfElementInView]" description="moving scroll position vertically shouldn't change inView values for this horizontal layout (variable columns)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />

				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.group1.verticalScrollPosition = 120" />
				
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.firstIndexInView" value="0" />
				<AssertMethodValue method="value=application.group1.lastIndexInView" value="3" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="0.2" />
			</body>
		</TestCase>	
						
		<TestCase testID="HGroup_viewport_HL_inView_rotation_fixed" keywords="[Group, viewport, fractionOfElementInView]" description="rotation shouldn't affect inView results (fixed columns)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="rotation"  value="45" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="columnWidth" value="10" waitEvent="updateComplete" waitTarget="group1" />

				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 1, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.group1.horizontalScrollPosition = 37" />
				<AssertEvent target="group1" eventName="indexInViewChanged" eventClass="flash.events::Event" />
				
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.firstIndexInView" value="2" />
				<AssertMethodValue method="value=application.group1.lastIndexInView" value="3" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="0.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="0.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="0.5" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="1.0" />
			</body>
		</TestCase>	

		<TestCase testID="HGroup_viewport_HL_inView_rotation_variable" keywords="[Group, viewport, fractionOfElementInView]" description="rotation shouldn't affect inView results (variable columns)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="rotation"  value="45" waitTarget="group1"  waitEvent="updateComplete" />

				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.group1.horizontalScrollPosition = 37" />
				<AssertEvent target="group1" eventName="indexInViewChanged" eventClass="flash.events::Event" />
				
			</setup>
			<body>
				<AssertMethodValue method="value=application.group1.firstIndexInView" value="2" />
				<AssertMethodValue method="value=application.group1.lastIndexInView" value="3" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="0.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="0.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="0.5" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="1.0" />
			</body>
		</TestCase>							

		<TestCase testID="HGroup_viewport_HL_inView_removeItem_fixed" keywords="[Group, viewport, fractionOfElementInView]" description="remove item in view (fixed columns)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="columnWidth" value="10" waitEvent="updateComplete" waitTarget="group1" />

				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />

			</setup>
			<body>
			
				<RunCode code="value=application.group1.removeElementAt(0)" waitEvent="updateComplete" waitTarget="group1" />

				<AssertMethodValue method="value=application.group1.firstIndexInView" value="0" />
				<AssertMethodValue method="value=application.group1.lastIndexInView" value="2" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="0.0" />
			</body>
		</TestCase>	

		<TestCase testID="HGroup_viewport_HL_inView_removeItem_variable" keywords="[Group, viewport, fractionOfElementInView]" description="remove item in view (variable columns)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />

				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />

			</setup>
			<body>
			
				<RunCode code="value=application.group1.removeElementAt(0)" waitEvent="updateComplete" waitTarget="group1" />

				<AssertMethodValue method="value=application.group1.firstIndexInView" value="0" />
				<AssertMethodValue method="value=application.group1.lastIndexInView" value="2" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="0.0" />
			</body>
		</TestCase>	

		<TestCase testID="HGroup_viewport_HL_inView_removeItem_outofview_fixed" keywords="[Group, viewport, fractionOfElementInView]" description="remove item out of view (fixed columns)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="columnWidth" value="30" waitEvent="updateComplete" waitTarget="group1" />

				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />

			</setup>
			<body>
			
				<RunCode code="value=application.group1.removeElementAt(3)" waitEvent="updateComplete" waitTarget="group1" />

				<AssertMethodValue method="value=application.group1.firstIndexInView" value="0" />
				<AssertMethodValue method="value=application.group1.lastIndexInView" value="1" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="0.466667" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="0.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="0.0" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_inView_removeItem_outofview_variable" keywords="[Group, viewport, fractionOfElementInView]" description="remove item out of view (variable columns)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />

				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0x999999)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0x333333)" waitEvent="updateComplete" waitTarget="group1" />

			</setup>
			<body>
			
				<RunCode code="value=application.group1.removeElementAt(3)" waitEvent="updateComplete" waitTarget="group1" />

				<AssertMethodValue method="value=application.group1.firstIndexInView" value="0" />
				<AssertMethodValue method="value=application.group1.lastIndexInView" value="1" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="1.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="0.0" />
				<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(3)" value="0.0" />
			</body>
		</TestCase>
		


<!-- requestedColumnCount property

+ Set to 0, check nothing in view (fixed/variable)
+ set to 1, check 1 item in view, viewport size of first item (fixed/variable)
+ set to 3, check 3 item in view, viewport size of first three items (fixed/variable)
+ Check -1 (default) shows all rows when height not specified
+ Set requestedColumnCount, ensure columnCount matches
+ Set height of group, set requestedColumnCount and ensure it is ignored
+ Set requestedColumnCount and columnWidth check group height is correct
+ Check requestedColumnCount works with variableColumnWidth true and false
+ scroll down and check viewport size doesnt change and is first column width

-->

		<TestCase testID="HGroup_viewport_HL_requestedColumnCount_default" keywords="[Group, viewport, requestedColumnCount]" description="check default is -1">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
			</setup>
			<body>		
				<AssertMethodValue method="value=(application.group1).requestedColumnCount" value="-1" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_requestedColumnCount_0_fixed" keywords="[Group, viewport, requestedColumnCount]" description="check nothing is in view (fixed)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="columnWidth" value="20" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=(application.group1).requestedColumnCount = 0" waitEvent="updateComplete" waitTarget="group1" />

				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
			</setup>
			<body>		
				<AssertMethodValue method="value=(application.group1).requestedColumnCount" value="0" />
				<AssertMethodValue method="value=application.group1.columnCount" value="0" />
				<AssertMethodValue method="value=(application.group1).firstIndexInView" value="-1" />
				<AssertMethodValue method="value=(application.group1).lastIndexInView" value="-1" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(0)" value="0.0" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_requestedColumnCount_0_variable" keywords="[Group, viewport, requestedColumnCount]" description="check nothing is in view (variable)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<RunCode code="value=(application.group1).requestedColumnCount = 0" waitEvent="updateComplete" waitTarget="group1" />

				<RunCode code="value=application.addCustomRect(application.group1, 20, 120  ,0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
			</setup>
			<body>		
				<AssertMethodValue method="value=(application.group1).requestedColumnCount" value="0" />
				<AssertMethodValue method="value=application.group1.columnCount" value="0" />
				<AssertMethodValue method="value=(application.group1).firstIndexInView" value="-1" />
				<AssertMethodValue method="value=(application.group1).lastIndexInView" value="-1" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(0)" value="0.0" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_requestedColumnCount_1_fixed" keywords="[Group, viewport, requestedColumnCount]" description="check one item in view (fixed)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=(application.group1).requestedColumnCount = 1" waitEvent="updateComplete" waitTarget="group1" />

				<RunCode code="value=application.addCustomRect(application.group1, 50, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
			</setup>
			<body>		
				<AssertMethodValue method="value=(application.group1).requestedColumnCount" value="1" />
				<AssertMethodValue method="value=application.group1.columnCount" value="1" />
				<AssertMethodValue method="value=(application.group1).firstIndexInView" value="0" />
				<AssertMethodValue method="value=(application.group1).lastIndexInView" value="0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(0)" value="1.0" />
				<AssertPropertyValue target="group1" propertyName="width" value="50" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_requestedColumnCount_1_variable" keywords="[Group, viewport, requestedColumnCount]" description="check one item in view (variable)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<RunCode code="value=(application.group1).requestedColumnCount = 1" waitEvent="updateComplete" waitTarget="group1" />

				<RunCode code="value=application.addCustomRect(application.group1, 50, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
			</setup>
			<body>		
				<AssertMethodValue method="value=(application.group1).requestedColumnCount" value="1" />			
				<AssertMethodValue method="value=application.group1.columnCount" value="1" />
				<AssertMethodValue method="value=(application.group1).firstIndexInView" value="0" />
				<AssertMethodValue method="value=(application.group1).lastIndexInView" value="0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(0)" value="1.0" />
				<AssertPropertyValue target="group1" propertyName="width" value="50" />
			</body>
		</TestCase>			
	
		<TestCase testID="HGroup_viewport_HL_requestedColumnCount_3_fixed" keywords="[Group, viewport, requestedColumnCount]" description="check three items in view (fixed)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=(application.group1).requestedColumnCount = 3" waitEvent="updateComplete" waitTarget="group1" />

				<RunCode code="value=application.addCustomRect(application.group1, 50,  120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 100, 120, 0xAAAAAA)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 150, 120, 0x888888)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 200, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
			</setup>
			<body>		
				<AssertMethodValue method="value=(application.group1).requestedColumnCount" value="3" />			
				<AssertMethodValue method="value=application.group1.columnCount" value="3" />
				<AssertMethodValue method="value=(application.group1).firstIndexInView" value="0" />
				<AssertMethodValue method="value=(application.group1).lastIndexInView" value="2" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(1)" value="1.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(2)" value="1.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(3)" value="0.0" />
				<AssertPropertyValue target="group1" propertyName="width" value="162" />
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_requestedColumnCount_3_fixed.png" target="group1" timeout="2000" />
			</body>
		</TestCase>	
	
		<TestCase testID="HGroup_viewport_HL_requestedColumnCount_3_variable" keywords="[Group, viewport, requestedColumnCount]" description="check three items in view (variable)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<RunCode code="value=(application.group1).requestedColumnCount = 3" waitEvent="updateComplete" waitTarget="group1" />

				<RunCode code="value=application.addCustomRect(application.group1, 50, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 100, 120, 0xAAAAAA)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 150, 120, 0x888888)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 200, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
			</setup>
			<body>		
				<AssertMethodValue method="value=(application.group1).requestedColumnCount" value="3" />			
				<AssertMethodValue method="value=application.group1.columnCount" value="3" />
				<AssertMethodValue method="value=(application.group1).firstIndexInView" value="0" />
				<AssertMethodValue method="value=(application.group1).lastIndexInView" value="2" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(1)" value="1.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(2)" value="1.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(3)" value="0.0" />
				<AssertPropertyValue target="group1" propertyName="width" value="312" />
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_requestedColumnCount_3_variable.png" target="group1" timeout="2000" />
			</body>
		</TestCase>	
			
		<TestCase testID="HGroup_viewport_HL_requestedColumnCount_height_specified_fixed" keywords="[Group, viewport, requestedColumnCount]" description="check that requestedColumnCount ignored (fixed)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width" value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height" value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="columnWidth" value="50" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=(application.group1).requestedColumnCount = 4" waitEvent="updateComplete" waitTarget="group1" />

				<RunCode code="value=application.addCustomRect(application.group1, 50, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 100, 120, 0xAAAAAA)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 150, 120, 0x888888)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 200, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
			</setup>
			<body>		
				<AssertMethodValue method="value=(application.group1).requestedColumnCount" value="4" />			
				<AssertMethodValue method="value=application.group1.columnCount" value="1" />
				<AssertMethodValue method="value=(application.group1).firstIndexInView" value="0" />
				<AssertMethodValue method="value=(application.group1).lastIndexInView" value="0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(1)" value="0.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(2)" value="0.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(3)" value="0.0" />
				<AssertPropertyValue target="group1" propertyName="width" value="50" />
			</body>
		</TestCase>	
				
		<TestCase testID="HGroup_viewport_HL_requestedColumnCount_height_specified_variable" keywords="[Group, viewport, requestedColumnCount]" description="check that requestedColumnCount ignored (variable)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width" value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height" value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<RunCode code="value=(application.group1).requestedColumnCount = 4" waitEvent="updateComplete" waitTarget="group1" />
			
				<RunCode code="value=application.addCustomRect(application.group1, 50, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 100, 120, 0xAAAAAA)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 150, 120, 0x888888)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 200, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
			</setup>
			<body>		
				<AssertMethodValue method="value=(application.group1).requestedColumnCount" value="4" />			
				<AssertMethodValue method="value=application.group1.columnCount" value="1" />
				<AssertMethodValue method="value=(application.group1).firstIndexInView" value="0" />
				<AssertMethodValue method="value=(application.group1).lastIndexInView" value="0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(1)" value="0.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(2)" value="0.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(3)" value="0.0" />
				<AssertPropertyValue target="group1" propertyName="width" value="50" />
			</body>
		</TestCase>			
			
		<TestCase testID="HGroup_viewport_HL_requestedColumnCount_minus1_fixed" keywords="[Group, viewport, requestedColumnCount]" description="check all items in view (fixed)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />

				<RunCode code="value=application.addCustomRect(application.group1, 50, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 100, 120, 0xAAAAAA)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 150, 120, 0x888888)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 200, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
			</setup>
			<body>		
				<AssertMethodValue method="value=(application.group1).requestedColumnCount" value="-1" />
				<AssertMethodValue method="value=application.group1.columnCount" value="4" />
				<AssertMethodValue method="value=(application.group1).firstIndexInView" value="0" />
				<AssertMethodValue method="value=(application.group1).lastIndexInView" value="3" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(1)" value="1.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(2)" value="1.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(3)" value="1.0" />
				<AssertPropertyValue target="group1" propertyName="width" value="218" />
			</body>
		</TestCase>	
		
		<TestCase testID="HGroup_viewport_HL_requestedColumnCount_minus1_variable" keywords="[Group, viewport, requestedColumnCount]" description="check all items in view (variable)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />

				<RunCode code="value=application.addCustomRect(application.group1, 50, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 100, 120, 0xAAAAAA)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 150, 120, 0x888888)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 200, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
			</setup>
			<body>		
				<AssertMethodValue method="value=(application.group1).requestedColumnCount" value="-1" />
				<AssertMethodValue method="value=application.group1.columnCount" value="4" />
				<AssertMethodValue method="value=(application.group1).firstIndexInView" value="0" />
				<AssertMethodValue method="value=(application.group1).lastIndexInView" value="3" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(0)" value="1.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(1)" value="1.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(2)" value="1.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(3)" value="1.0" />
				<AssertPropertyValue target="group1" propertyName="width" value="518" />
			</body>
		</TestCase>	
							
		<TestCase testID="HGroup_viewport_HL_requestedColumnCount_changeViewport_fixed" keywords="[Group, viewport, requestedColumnCount]" description="scroll down and visually check viewport contents (fixed)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=(application.group1).requestedColumnCount = 3" waitEvent="updateComplete" waitTarget="group1" />

				<RunCode code="value=application.addCustomRect(application.group1, 50, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 100, 120, 0xAAAAAA)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 150, 120, 0x888888)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 200, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				
				<SetProperty target="group1" propertyName="horizontalScrollPosition"  value="56" />
				<AssertEvent target="group1" eventName="indexInViewChanged" eventClass="flash.events::Event" />
				
			</setup>
			<body>		
				<AssertMethodValue method="value=(application.group1).requestedColumnCount" value="3" />			
				<AssertMethodValue method="value=application.group1.columnCount" value="3" />
				<AssertMethodValue method="value=(application.group1).firstIndexInView" value="1" />
				<AssertMethodValue method="value=(application.group1).lastIndexInView" value="3" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(0)" value="0.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(1)" value="1.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(2)" value="1.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(3)" value="1.0" />
				<AssertPropertyValue target="group1" propertyName="width" value="162" />
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_requestedColumnCount_changeViewport_fixed.png" target="" timeout="2000" />
			</body>
		</TestCase>			
		
		<TestCase testID="HGroup_viewport_HL_requestedColumnCount_changeViewport_variable" keywords="[Group, viewport, requestedColumnCount]" description="scroll down and visually check viewport contents (variable)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<RunCode code="value=(application.group1).requestedColumnCount = 3" waitEvent="updateComplete" waitTarget="group1" />

				<RunCode code="value=application.addCustomRect(application.group1, 50, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 100, 120, 0xAAAAAA)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 150, 120, 0x888888)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 200, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				
				<SetProperty target="group1" propertyName="horizontalScrollPosition"  value="56" />
				<AssertEvent target="group1" eventName="indexInViewChanged" eventClass="flash.events::Event" />
				
			</setup>
			<body>		
				<AssertMethodValue method="value=(application.group1).requestedColumnCount" value="3" />			
				<AssertMethodValue method="value=application.group1.columnCount" value="3" />
				<AssertMethodValue method="value=(application.group1).firstIndexInView" value="1" />
				<AssertMethodValue method="value=(application.group1).lastIndexInView" value="3" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(0)" value="0.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(1)" value="1.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(2)" value="1.0" />
				<AssertMethodValue method="value=(application.group1.layout).fractionOfElementInView(3)" value="0.25" />
				<AssertPropertyValue target="group1" propertyName="width" value="312" />
				<CompareBitmap url="../viewport/baselines/hgroup/hgroup_viewport_requestedColumnCount_changeViewport_variable.png" target="" timeout="2000" />
			</body>
		</TestCase>	
		
				
<!--  horizontalScrollPositionDelta() method

+ Check that passing in the NavigationUnit constants: UP, DOWN, PAGE_UP, PAGE_DOWN, HOME, END, returns correctly (fixed/variable)
+ Check these return zero when viewport smaller than content area
+ scroll to HOME/END and check that first/last item positioned against the top/bottom of the viewport (fixed/variable)
+ try items larger than viewport and see if scrolling works

-->

		<TestCase testID="HGroup_viewport_HL_horizontalScrollPositionDelta_largeContent_variable" keywords="[Group, viewport]" description="check key values with items larger than viewport (variable)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="gap"  value="5" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0xAAAAAA)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 50, 120, 0x888888)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 200, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
								
			</setup>
			<body>		
				<AssertMethodValue method="value=application.group1.contentWidth" value="320" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.HOME)" value="0" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.END)" value="220" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_RIGHT)" value="105" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.RIGHT)" value="100" />	
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_LEFT)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.LEFT)" value="0" />
							
				<SetProperty target="group1" propertyName="horizontalScrollPosition" value="50" />		
				
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.HOME)" value="-50" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.END)" value="170" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_RIGHT)" value="55" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.RIGHT)" value="100" />	
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_LEFT)" value="-50" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.LEFT)" value="-25" />			
				
				<SetProperty target="group1" propertyName="horizontalScrollPosition" valueExpression="value=50 + application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.END)" />
				<AssertEvent target="group1" eventName="indexInViewChanged" eventClass="flash.events::Event" />
				
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.HOME)" value="-220" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.END)" value="0" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_RIGHT)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.RIGHT)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_LEFT)" value="-15" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.LEFT)" value="-100" />
			</body>
		</TestCase>	

		<TestCase testID="HGroup_viewport_HL_horizontalScrollPositionDelta_largeContent_fixed" keywords="[Group, viewport]" description="check key values with items larger than viewport (fixed)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="columnWidth" value="50" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="gap"  value="5" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0xAAAAAA)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 50, 120, 0x888888)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 200, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
								
			</setup>
			<body>		
				<AssertMethodValue method="value=application.group1.contentWidth" value="270" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.HOME)" value="0" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.END)" value="170" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_RIGHT)" value="55" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.RIGHT)" value="5" />	
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_LEFT)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.LEFT)" value="0" />
							
				<SetProperty target="group1" propertyName="horizontalScrollPosition" value="50" />		
				
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.HOME)" value="-50" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.END)" value="120" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_RIGHT)" value="60" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.RIGHT)" value="10" />	
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_LEFT)" value="-50" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.LEFT)" value="-50" />			
				
				<SetProperty target="group1" propertyName="horizontalScrollPosition" valueExpression="value=50 + application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.END)" />
				<AssertEvent target="group1" eventName="indexInViewChanged" eventClass="flash.events::Event" />
				
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.HOME)" value="-170" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.END)" value="0" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_RIGHT)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.RIGHT)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_LEFT)" value="-55" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.LEFT)" value="-5" />
			</body>
		</TestCase>	
				
		<TestCase testID="HGroup_viewport_HL_horizontalScrollPositionDelta_smallContent_variable" keywords="[Group, viewport]" description="check key values with content smaller than viewport (variable)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="gap"  value="0" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120, 0xAAAAAA)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120, 0x888888)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
								
			</setup>
			<body>		
				<AssertMethodValue method="value=application.group1.contentWidth" value="100" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.HOME)" value="0" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.END)" value="0" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_RIGHT)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.RIGHT)" value="0" />	
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_LEFT)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.LEFT)" value="0" />
							
				<SetProperty target="group1" propertyName="horizontalScrollPosition" value="50" />		
				<AssertEvent target="group1" eventName="indexInViewChanged" eventClass="flash.events::Event" />
				
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.HOME)" value="-50" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.END)" value="-50" />	
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_RIGHT)" value="-50" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.RIGHT)" value="-50" />	
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_LEFT)" value="-50" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.LEFT)" value="-50" />			
				
			</body>
		</TestCase>	
					
		<TestCase testID="HGroup_viewport_HL_horizontalScrollPositionDelta_smallContent_fixed" keywords="[Group, viewport]" description="check key values with content smaller than viewport (fixed)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="gap"  value="0" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 20, 120, 0xAAAAAA)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 50, 120, 0x888888)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 200, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
								
			</setup>
			<body>		
				<AssertMethodValue method="value=application.group1.contentWidth" value="100" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.HOME)" value="0" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.END)" value="0" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_RIGHT)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.RIGHT)" value="0" />	
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_LEFT)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.LEFT)" value="0" />
							
				<SetProperty target="group1" propertyName="horizontalScrollPosition" value="50" />	
				<AssertEvent target="group1" eventName="indexInViewChanged" eventClass="flash.events::Event" />	
				
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.HOME)" value="-50" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.END)" value="-50" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_RIGHT)" value="-50" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.RIGHT)" value="-50" />	
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_LEFT)" value="-50" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.LEFT)" value="-50" />			
				
			</body>
		</TestCase>	
										
		<TestCase testID="HGroup_viewport_HL_horizontalScrollPositionDelta_largeItem_variable" keywords="[Group, viewport]" description="check key values with a huge item (variable)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="gap"  value="0" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120, 0xAAAAAA)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 2000, 120, 0x888888)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
								
			</setup>
			<body>		
				<AssertMethodValue method="value=application.group1.contentWidth" value="2075" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.HOME)" value="0" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.END)" value="1975" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_RIGHT)" value="50" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.RIGHT)" value="100" />	
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_LEFT)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.LEFT)" value="0" />
				
				<SetProperty target="group1" propertyName="horizontalScrollPosition" value="50" />	
				<AssertEvent target="group1" eventName="indexInViewChanged" eventClass="flash.events::Event" />	
				
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.HOME)" value="-50" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.END)" value="1925" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_RIGHT)" value="100" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.RIGHT)" value="100" />	
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_LEFT)" value="-50" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.LEFT)" value="-25" />			
				
			</body>
		</TestCase>	

		<TestCase testID="HGroup_viewport_HL_horizontalScrollPositionDelta_largeItem_fixed" keywords="[Group, viewport]" description="check key values with a huge item (variable)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="columnWidth" value="300" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="gap"  value="0" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120, 0xAAAAAA)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 25, 120, 0x888888)" waitEvent="updateComplete" waitTarget="group1" />
								
			</setup>
			<body>		
				<AssertMethodValue method="value=application.group1.contentWidth" value="900" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.HOME)" value="0" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.END)" value="800" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_RIGHT)" value="100" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.RIGHT)" value="100" />	
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_LEFT)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.LEFT)" value="0" />
				
				<SetProperty target="group1" propertyName="horizontalScrollPosition" value="250" />	
				<AssertEvent target="group1" eventName="indexInViewChanged" eventClass="flash.events::Event" />	
				
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.HOME)" value="-250" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.END)" value="550" />		
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_RIGHT)" value="50" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.RIGHT)" value="100" />	
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_LEFT)" value="-50" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.LEFT)" value="-100" />			
				
			</body>
		</TestCase>	

		
		<TestCase testID="HGroup_viewport_HL_horizontalScrollPositionDelta_UP_DOWN" keywords="[Group, viewport]" description="ensure UP/DOWN, PAGE_UP/PAGE_DOWN return 0">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="gap"  value="0" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.addCustomRect(application.group1, 100, 100, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 100, 100, 0xAAAAAA)" waitEvent="updateComplete" waitTarget="group1" />

			</setup>
			<body>			
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_UP)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_DOWN)" value="0" />	
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.UP)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.DOWN)" value="0" />
			</body>
		</TestCase>		
			
			
<!--  verticalScrollPositionDelta() method

+ Check that passing in the NavigationUnit constants: UP, DOWN, PAGE_UP, PAGE_DOWN, HOME, END, returns correctly (fixed/variable)
+ Check these return zero when content area smaller than viewport
+ scroll to HOME/END and check that first/last item positioned against the top/bottom of the viewport (fixed/variable)
+ try items larger than viewport and see if scrolling works

-->		

		<TestCase testID="HGroup_viewport_HL_verticalScrollPositionDelta_largeContent_fixed" keywords="[Group, viewport]" description="scroll right with items larger than viewport (fixed)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width" value="300" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height" value="200" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="columnWidth" value="30" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="gap"  value="5" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.addCustomRect(application.group1, 80, 800, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 60, 600, 0xAAAAAA)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 40, 400, 0x888888)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 20, 200, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 100, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				
			</setup>
			<body>		
				<AssertMethodValue method="value=application.group1.contentHeight" value="800" />		
				<AssertMethodValue method="value=application.group1.contentWidth" value="170" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.HOME)" value="0" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.END)" value="600" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_DOWN)" value="200" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_UP)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.DOWN)" value="1" />	
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.UP)" value="0" />
							
				<SetProperty target="group1" propertyName="verticalScrollPosition" value="200" />		
				
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.HOME)" value="-200" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.END)" value="400" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_DOWN)" value="200" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.DOWN)" value="1" />	
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_UP)" value="-200" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.UP)" value="-1" />			
				
				<SetProperty target="group1" propertyName="verticalScrollPosition" valueExpression="value=600" />
				
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.HOME)" value="-600" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.END)" value="0" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_DOWN)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.DOWN)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_UP)" value="-200" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.UP)" value="-1" />
			</body>
		</TestCase>	

		<TestCase testID="HGroup_viewport_HL_verticalScrollPositionDelta_largeContent_variable" keywords="[Group, viewport]" description="scroll right with items larger than viewport (variable)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width" value="300" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height" value="200" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="gap"  value="5" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.addCustomRect(application.group1, 80, 800, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 60, 600, 0xAAAAAA)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 40, 400, 0x888888)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 20, 200, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 100, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				
			</setup>
			<body>		
				<AssertMethodValue method="value=application.group1.contentHeight" value="800" />		
				<AssertMethodValue method="value=application.group1.contentWidth" value="230" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.HOME)" value="0" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.END)" value="600" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_DOWN)" value="200" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_UP)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.DOWN)" value="1" />	
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.UP)" value="0" />
							
				<SetProperty target="group1" propertyName="verticalScrollPosition" value="200" />		
				
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.HOME)" value="-200" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.END)" value="400" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_DOWN)" value="200" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.DOWN)" value="1" />	
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_UP)" value="-200" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.UP)" value="-1" />			
				
				<SetProperty target="group1" propertyName="verticalScrollPosition" valueExpression="value=600" />
				
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.HOME)" value="-600" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.END)" value="0" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_DOWN)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.DOWN)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_UP)" value="-200" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.UP)" value="-1" />
			</body>
		</TestCase>	

		<TestCase testID="HGroup_viewport_HL_verticalScrollPositionDelta_smallContent_fixed" keywords="[Group, viewport]" description="scroll right with content smaller than viewport (fixed) (slightly garbage case)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="variableColumnWidth" value="false" waitEvent="updateComplete" waitTarget="group1" />
				<SetProperty target="group1" propertyName="gap"  value="0" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.addCustomRect(application.group1, 20, 45, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 20, 40, 0xAAAAAA)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 50, 35, 0x888888)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 20, 30, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 25, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
								
			</setup>
			<body>		
				<AssertMethodValue method="value=application.group1.contentHeight" value="45" />	
				<AssertMethodValue method="value=application.group1.contentWidth" value="100" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.HOME)" value="0" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.END)" value="0" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_DOWN)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.DOWN)" value="0" />	
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_UP)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.UP)" value="0" />
							
				<SetProperty target="group1" propertyName="verticalScrollPosition" value="25" />		
				
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.HOME)" value="-25" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.END)" value="-30" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_DOWN)" value="-30" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.DOWN)" value="-30" />	
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_UP)" value="-30" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.UP)" value="-30" />			
				
			</body>
		</TestCase>			
		
		<TestCase testID="HGroup_viewport_HL_verticalScrollPositionDelta_smallContent_variable" keywords="[Group, viewport]" description="scroll right with content smaller than viewport (variable) (slightly garbage case)">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="gap"  value="0" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.addCustomRect(application.group1, 20, 45, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 20, 40, 0xAAAAAA)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 50, 35, 0x888888)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 20, 30, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 10, 25, 0x666666)" waitEvent="updateComplete" waitTarget="group1" />
								
			</setup>
			<body>		
				<AssertMethodValue method="value=application.group1.contentHeight" value="45" />	
				<AssertMethodValue method="value=application.group1.contentWidth" value="120" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.HOME)" value="0" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.END)" value="0" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_DOWN)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.DOWN)" value="0" />	
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_UP)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.UP)" value="0" />
							
				<SetProperty target="group1" propertyName="verticalScrollPosition" value="25" />		
				
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.HOME)" value="-25" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.END)" value="-30" />		
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_DOWN)" value="-30" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.DOWN)" value="-30" />	
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_UP)" value="-30" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.UP)" value="-30" />			
				
			</body>
		</TestCase>				

		<TestCase testID="HGroup_viewport_HL_verticalScrollPositionDelta_LEFT_RIGHT" keywords="[Group, viewport]" description="ensure LEFT/RIGHT, PAGE_LEFT/PAGE_RIGHT return 0">
			<setup>
				<ResetComponent target="group1" className="spark.components.HGroup" waitTarget="group1" waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
				<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
				<SetProperty target="group1" propertyName="gap"  value="0" waitEvent="updateComplete" waitTarget="group1" />
				
				<RunCode code="value=application.addCustomRect(application.group1, 100, 100, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
				<RunCode code="value=application.addCustomRect(application.group1, 100, 100, 0xAAAAAA)" waitEvent="updateComplete" waitTarget="group1" />

			</setup>
			<body>			
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_LEFT)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_RIGHT)" value="0" />	
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.LEFT)" value="0" />
				<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.RIGHT)" value="0" />
			</body>
		</TestCase>		

																																	
  </testCases>
</UnitTester>