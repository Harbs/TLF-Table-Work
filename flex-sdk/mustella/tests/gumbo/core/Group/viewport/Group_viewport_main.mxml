<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<UnitTester xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"  xmlns:m="http://ns.adobe.com/mxml/2009" xmlns="*" testDir="gumbo/core/Group/viewport/" testSWF="GroupBasic.mxml">
  <!-- this set of lines form a template that must be in each unit test -->
  <fx:Script>
    <![CDATA[
	public static function init(o:DisplayObject):void { }
	]]>
  </fx:Script>
  <fx:Metadata>
    <![CDATA[
	[Mixin]
	]]>
  </fx:Metadata>
  <!-- end of set of lines that must be in each unit test -->
  <fx:Script>
    <![CDATA[
	
	  import spark.layouts.*;
      import mx.controls.Label;
      import comps.*;
	  import spark.components.Group;
	  import mx.graphics.*;
	  import spark.core.NavigationUnit;
	  
	]]>
  </fx:Script>
  <testCases>
 
<!-- 

- - - - - - - - - - - - 
Group Viewport Testing
- - - - - - - - - - - - 

The viewport tests have been split into different files for easy of use.

 - Tests that apply to general viewport functionality and not specific to a specific layout are in Group_viewport_main.mxml
 - Tests that are specific to VerticalLayout are in Group_viewport_vertical.mxml
 - Tests that are specific to HorizontalLayout are in Group_viewport_horizontal.mxml
 
 - VerticalLayout tests are duplicated into VGroup_viewport_vertical.mxml
     (A VGroup class will be used instead of creating a Group and assigning it a layout)
 - HorizontalLayout tests are duplicated into HGroup_viewport_horizontal.mxml
     (A HGroup class will be used instead of creating a Group and assigning it a layout)
 
 - NOTE: A subset of these tests will be duplicated to the DataGroup component.  
   If you modify tests in one component, the tests should also be updated in the other.

-->  

	
<!-- test data binding -->

	<TestCase testID="Group_viewport_dataBinding" keywords="[Group, viewport, binding]" description="test data binding of the viewport properties on Group">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<RunCode code="value=application.group1.addElement(new GroupDataBinding())" waitEvent="updateComplete" waitTarget="group1" />
			
			<AssertMethodValue method="value=application.group1.getElementAt(0).dependentLabel1.text" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).dependentLabel2.text" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).dependentLabel3.text" value="150" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).dependentLabel4.text" value="140" />
			
			<RunCode code="value=application.group1.getElementAt(0).innerGroup.horizontalScrollPosition = 10" />
			<RunCode code="value=application.group1.getElementAt(0).innerGroup.verticalScrollPosition = 20" />
			<RunCode code="value=application.group1.getElementAt(0).innerGroup.removeElementAt(1)" />
			<Pause timeout="200" />
			
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.getElementAt(0).dependentLabel1.text" value="10" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).dependentLabel2.text" value="20" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).dependentLabel3.text" value="50" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).dependentLabel4.text" value="40" />
			
		</body>
	</TestCase>	
	
<!-- clipContent property

+ check default value is false
+ create group with large content and check that content is clipped to group dimensions
+ create group with content smaller than group size and check that behaviour is identical with clipping on and off
+ change clipContent value at runtime and ensure screen is updated properly
+ check that the fractionOfElementInView() method always returns 1 when clipContent false
+ check that the firstIndexInView property always returns 0 when clipContent false
+ check that the lastIndexInView property always returns the last item when clipContent false
+ check that the getHorizontalScrollPositionDelta()/getVerticalScrollPositionDelta() methods always return 0 when clipContent false
+ check that changing scroll position values has no visual effect with clipContent set to false
+ check that changing scroll position values are retained after changing clipContent value
+ check that clipContent value is retained when assigned before creating a layout object
+ check that rotating and scaling a group works with clipContent

-->

	<TestCase testID="Group_viewport_clipContent_default" keywords="[Group, viewport, clipContent, default]" description="check default value">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="clipAndEnableScrolling" valueExpression="value=false" />
		</body>
	</TestCase>
	
	<TestCase testID="Group_viewport_clipContent_largeContent_true" keywords="[Group, viewport, clipContent]" description="check that clipping works on large content">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<RunCode code="value=application.addCustomRect(application.group1, 200, 200, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="clipAndEnableScrolling" valueExpression="value=true" />	
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="200" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="200" />
			
			<CompareBitmap url="../viewport/baselines/group_viewport_clipContent_largeContent_true.png" target="" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="Group_viewport_clipContent_largeContent_false" keywords="[Group, viewport, clipContent]" description="check that clipping works on large content">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 200, 200, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="200" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="200" />
			
			<CompareBitmap url="../viewport/baselines/group_viewport_clipContent_largeContent_false.png" target="" timeout="2000" />
		</body>
	</TestCase>

	<TestCase testID="Group_viewport_clipContent_smallContent_true" keywords="[Group, viewport, clipContent]" description="check that clipping no effect on small content">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<RunCode code="value=application.addCustomRect(application.group1, 50, 50, 0x000088)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="clipAndEnableScrolling" valueExpression="value=true" />	
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="50" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="50" />
			
			<CompareBitmap url="../viewport/baselines/group_viewport_clipContent_smallContent_true.png" target="" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="Group_viewport_clipContent_smallContent_false" keywords="[Group, viewport, clipContent]" description="check that clipping no effect on small content">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 50, 50, 0x000088)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="50" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="50" />
			
			<CompareBitmap url="../viewport/baselines/group_viewport_clipContent_smallContent_false.png" target="" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="Group_viewport_clipContent_change_true" keywords="[Group, viewport, clipContent]" description="change clipContent to true">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 200, 200, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
			<Pause timeout="100" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="200" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="200" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="200" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="200" />
			
			<CompareBitmap url="../viewport/baselines/group_viewport_clipContent_change_true.png" target="" timeout="2000" />
		</body>
	</TestCase>

	<TestCase testID="Group_viewport_clipContent_change_false" keywords="[Group, viewport, clipContent]" description="change clipContent to false">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 200, 200, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="false" />
			<Pause timeout="100" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="200" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="200" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="200" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="200" />
			
			<CompareBitmap url="../viewport/baselines/group_viewport_clipContent_change_false.png" target="" timeout="2000" />
		</body>
	</TestCase>
	
	<TestCase testID="Group_viewport_clipContent_inView_vertical" keywords="[Group, viewport, clipContent]" description="in view should always return 1 (vertical)">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 50, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 50, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 100, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="1" />
			<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="1" />
			<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="1" />
			<AssertMethodValue method="value=application.group1.layout.firstIndexInView" value="0" />
			<AssertMethodValue method="value=application.group1.layout.lastIndexInView" value="2" />
		</body>
	</TestCase>
	
	<TestCase testID="Group_viewport_clipContent_inView_horizontal" keywords="[Group, viewport, clipContent]" description="in view should always return 1 (horizontal)">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new HorizontalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 50, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 50, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 100, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(0)" value="1" />
			<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(1)" value="1" />
			<AssertMethodValue method="value=application.group1.layout.fractionOfElementInView(2)" value="1" />
			<AssertMethodValue method="value=application.group1.layout.firstIndexInView" value="0" />
			<AssertMethodValue method="value=application.group1.layout.lastIndexInView" value="2" />
		</body>
	</TestCase>	

	<TestCase testID="Group_viewport_clipContent_deltaMethods_vertical" keywords="[Group, viewport, clipContent]" description="delta methods should return 0 (vertical)">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 100, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 100, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 100, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.UP)" value="0" />
			<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.DOWN)" value="0" />
			<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_UP)" value="0" />
			<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_DOWN)" value="0" />
			<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.HOME)" value="0" />
			<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.END)" value="0" />
			
			<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.RIGHT)" value="0" />
			<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.LEFT)" value="0" />
			<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_LEFT)" value="0" />
			<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_RIGHT)" value="0" />
			<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.HOME)" value="0" />
			<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.END)" value="0" />			
		</body>
	</TestCase>	

	<TestCase testID="Group_viewport_clipContent_deltaMethods_horizontal" keywords="[Group, viewport, clipContent]" description="delta methods should return 0 (horizontal)">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 100, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 100, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 100, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.UP)" value="0" />
			<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.DOWN)" value="0" />
			<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_UP)" value="0" />
			<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.PAGE_DOWN)" value="0" />
			<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.HOME)" value="0" />
			<AssertMethodValue method="value=application.group1.layout.getVerticalScrollPositionDelta(NavigationUnit.END)" value="0" />
			
			<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.RIGHT)" value="0" />
			<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.LEFT)" value="0" />
			<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_LEFT)" value="0" />
			<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.PAGE_RIGHT)" value="0" />
			<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.HOME)" value="0" />
			<AssertMethodValue method="value=application.group1.layout.getHorizontalScrollPositionDelta(NavigationUnit.END)" value="0" />			
		</body>
	</TestCase>		
	
	<TestCase testID="Group_viewport_clipContent_scrollPosition" keywords="[Group, viewport, clipContent]" description="changing scroll position shouldn't visually change">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 50, 0x000011)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 100, 0x000066)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 50, 0x0000AA)" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="horizontalScrollPosition" value="10" />
			<SetProperty target="group1" propertyName="verticalScrollPosition"   value="100" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.horizontalScrollPosition" value="10" />
			<AssertMethodValue method="value=application.group1.verticalScrollPosition" value="100" />
			
			<CompareBitmap url="../viewport/baselines/group_viewport_clipContent_scrollPosition.png" target="" timeout="2000" />		
		</body>
	</TestCase>		
	
	<TestCase testID="Group_viewport_clipContent_scrollPosition_change" keywords="[Group, viewport, clipContent]" description="changing clipContent shouldn't change scrollPosition">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 50, 0x000011)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 100, 0x000066)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 50, 0x0000AA)" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="horizontalScrollPosition" value="10"  />
			<SetProperty target="group1" propertyName="verticalScrollPosition"   value="100" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
			<Pause timeout="100" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.horizontalScrollPosition" value="10" />
			<AssertMethodValue method="value=application.group1.verticalScrollPosition" value="100" />
			
			<CompareBitmap url="../viewport/baselines/group_viewport_clipContent_scrollPosition_change.png" target="" timeout="2000" />		
		</body>
	</TestCase>				
	
	<TestCase testID="Group_viewport_clipContent_null_layout" keywords="[Group, viewport, clipContent]" description="check clipContent value retained after creating layout">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
			<Pause timeout="50" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="clipAndEnableScrolling" value="true" />
		</body>
	</TestCase>
	
	<TestCase testID="Group_viewport_clipContent_rotate" keywords="[Group, viewport, clipContent]" description="clipContent should play well with rotate">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="rotation"  value="-45" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 50, 0x000011)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 100, 0x000066)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 50, 0x0000AA)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<CompareBitmap url="../viewport/baselines/group_viewport_clipContent_rotate.png" target="" timeout="2000" numColorVariances="6" ignoreMaxColorVariance="true" />		
		</body>
	</TestCase>				
			
	
<!-- contentHeight / contentWidth properties

+ Test data binding
+ Adjust size of a group's content to be smaller and assert the content size changes appropriately (on VerticalLayout, HorizontalLayout, BasicLayout)
+ Use a Resize effect to change the size of a Group item, verify that content size is adjusted
+ Use a Move effect to change the position of a Group item, verify that content size is adjusted
+ Add items to a specific position in a group and check that width/height, contentWidth/contentHeight are set properly
+ Set default, positive, negative, and zero gaps on the layout (Vertical and Horizontal)
+ Create group that has items such that content size is larger than 8192x8192
+ Check that an empty group has contentWidth/contentHeight equal to width/height
+ Set width on a group and ensure that adding content changes contentWidth/contentHeight and does not affect width/height
+ Check content width/height using VerticalLayout
+ Check content width/height using HorizontalLayout
+ Check content width/height using BasicLayout

-->


<!-- check move/resize effects update content size properly -->

	<TestCase testID="Group_viewport_contentSize_moveEffect_in" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size decrease after Move effect">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<RunCode code="value=application.addCustomRect(application.group1, 20, 20, 0x000044, 0, 20)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 30, 30, 0x000088, 5, 5)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 10, 10, 0x0000EE, 50, 50)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="60" />	
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="60" />

			<RunCode code="value=application.playMoveEffect(application.group1.getElementAt(2), 0, 0);" waitEvent="effectEnd" waitTarget="moveEffect" />
			<Pause timeout="100" />
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="35" />			
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="40" />
		</body>
	</TestCase>

	<TestCase testID="Group_viewport_contentSize_moveEffect_out" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size increase after Move effect">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<RunCode code="value=application.addCustomRect(application.group1, 20, 20, 0x000044, 0, 20)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 30, 30, 0x000088, 5, 5)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 10, 10, 0x0000EE, 0, 0)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="35" />	
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="40" />

			<RunCode code="value=application.playMoveEffect(application.group1.getElementAt(2), 50, 50);" waitEvent="effectEnd" waitTarget="moveEffect" />
			<Pause timeout="100" />
			
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="60" />			
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="60" />
		</body>
	</TestCase>

	<TestCase testID="Group_viewport_contentSize_resizeEffect_in" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size decrease after Resize effect">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<RunCode code="value=application.addCustomRect(application.group1, 20, 20, 0x000044, 0, 20)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 30, 30, 0x000088, 5, 5)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 50, 50, 0x0000EE, 10, 10)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="60" />	
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="60" />

			<RunCode code="value=application.playResizeEffect(application.group1.getElementAt(2), 10, 10);" waitEvent="effectEnd" waitTarget="resizeEffect" />
			<Pause timeout="100" />
			
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="35" />			
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="40" />
		</body>
	</TestCase>
	
	<TestCase testID="Group_viewport_contentSize_resizeEffect_out" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size increase after Resize effect">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<RunCode code="value=application.addCustomRect(application.group1, 20, 20, 0x000044, 0, 20)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 30, 30, 0x000088, 5, 5)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 50, 50, 0x0000EE, 10, 10)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="60" />	
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="60" />

			<RunCode code="value=application.playResizeEffect(application.group1.getElementAt(2), 60, 70);" waitEvent="effectEnd" waitTarget="resizeEffect" />
			<Pause timeout="100" />
			
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="70" />			
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="80" />
		</body>
	</TestCase>	

<!-- really large content -->

	<TestCase testID="Group_viewport_contentSize_very_large_vertical" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size on very large groups">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 50000, 50000, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 50000, 50000, 0x000088)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="50000" />	
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="100006" />
		</body>
	</TestCase>	

	<TestCase testID="Group_viewport_contentSize_very_large_horizontal" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size on very large groups">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new HorizontalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 50000, 50000, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 50000, 50000, 0x000088)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="100006" />	
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="50000" />
		</body>
	</TestCase>	
	
	<TestCase testID="Group_viewport_contentSize_very_large_basic" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size on very large groups">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<RunCode code="value=application.addCustomRect(application.group1, 50000, 50000, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="50000" />	
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="50000" />
		</body>
	</TestCase>		
<!-- change item size -->

	<TestCase testID="Group_viewport_contentSize_change_dimensions_vertical" keywords="[Group, viewport, contentWidth, contentHeight]" description="change item size and check content size">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="width" value="50" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="50" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />			
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="46" />
			<RunCode code="value=application.group1.getElementAt(1).height = 10" waitEvent="updateComplete" waitTarget="group1" />		
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="36" />
		</body>
	</TestCase>

	<TestCase testID="Group_viewport_contentSize_change_dimensions_horizontal" keywords="[Group, viewport, contentWidth, contentHeight]" description="change item size and check content size">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="width" value="50" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="50" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new HorizontalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />			
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="206" />
			<RunCode code="value=application.group1.getElementAt(1).width = 50" waitEvent="updateComplete" waitTarget="group1" />		
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="156" />
		</body>
	</TestCase>

	<TestCase testID="Group_viewport_contentSize_change_dimensions_basic" keywords="[Group, viewport, contentWidth, contentHeight]" description="change item size and check content size">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="width" value="50" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="50" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 100, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />		
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="100" />
			<RunCode code="value=application.group1.getElementAt(0).width = 50" waitEvent="updateComplete" waitTarget="group1" />		
			<RunCode code="value=application.group1.getElementAt(0).height = 50" waitEvent="updateComplete" waitTarget="group1" />		
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="50" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="50" />
		</body>
	</TestCase>	
		
<!-- graphic content with the default gap -->

	<TestCase testID="Group_viewport_contentSize_set_dimensions_smaller" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size when content smaller that height">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="width" value="50" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="50" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="20" />
			<AssertPropertyValue target="group1" propertyName="height" value="50" />
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="100" />
			<AssertPropertyValue target="group1" propertyName="width" value="50" />
		</body>
	</TestCase>
	
	
	<TestCase testID="Group_viewport_contentSize_set_dimensions_larger" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size when content smaller than viewport">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="width" value="500" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="500" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="20" />
			<AssertPropertyValue target="group1" propertyName="height" value="500" />
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="100" />
			<AssertPropertyValue target="group1" propertyName="width" value="500" />
		</body>
	</TestCase>
	
	<TestCase testID="Group_viewport_contentSize_vertical_1" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size with vertical layout (1 item)">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="20" />
			<AssertPropertyValue target="group1" propertyName="height" value="20" />
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="100" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
		</body>
	</TestCase>
		
	<TestCase testID="Group_viewport_contentSize_vertical_5" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size with vertical layout (5 items)">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="100" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="124" />
			<AssertPropertyValue target="group1" propertyName="height" value="124" />
		</body>
	</TestCase>
	
	<TestCase testID="Group_viewport_contentSize_horizontal_1" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size with horizontal layout (1 item)">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new HorizontalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="100" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="20" />
			<AssertPropertyValue target="group1" propertyName="height" value="20" />
		</body>
	</TestCase>
	
	<TestCase testID="Group_viewport_contentSize_horizontal_5" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size with horizontal layout (5 items)">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new HorizontalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="524" />
			<AssertPropertyValue target="group1" propertyName="width" value="524" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="20" />
			<AssertPropertyValue target="group1" propertyName="height" value="20" />
		</body>
	</TestCase>	
	
<!-- setting a custom gap of 0 -->

	<TestCase testID="Group_viewport_contentSize_vertical_1_gap_0" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size with zero gap (vertical)">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.group1.layout.gap = 0" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="20" />
			<AssertPropertyValue target="group1" propertyName="height" value="20" />
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="100" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
		</body>
	</TestCase>
		
	<TestCase testID="Group_viewport_contentSize_vertical_5_gap_0" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size with zero gap (vertical)">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.group1.layout.gap = 0" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="100" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="100" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
		</body>
	</TestCase>
	
	<TestCase testID="Group_viewport_contentSize_horizontal_1_gap_0" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size with zero gap (horizontal)">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new HorizontalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.group1.layout.gap = 0" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="100" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="20" />
			<AssertPropertyValue target="group1" propertyName="height" value="20" />
		</body>
	</TestCase>
	
	<TestCase testID="Group_viewport_contentSize_horizontal_5_gap_0" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size with zero gap (horizontal)">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new HorizontalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.group1.layout.gap = 0" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="500" />
			<AssertPropertyValue target="group1" propertyName="width" value="500" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="20" />
			<AssertPropertyValue target="group1" propertyName="height" value="20" />
		</body>
	</TestCase>	

<!-- check setting a positive gap -->

	<TestCase testID="Group_viewport_contentSize_vertical_1_gap_100" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size with large gap (vertical)">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.group1.layout.gap = 100" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="20" />
			<AssertPropertyValue target="group1" propertyName="height" value="20" />
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="100" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
		</body>
	</TestCase>
		
	<TestCase testID="Group_viewport_contentSize_vertical_5_gap_100" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size with large gap (vertical)">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.group1.layout.gap = 100" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="100" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="500" />
			<AssertPropertyValue target="group1" propertyName="height" value="500" />
		</body>
	</TestCase>
	
	<TestCase testID="Group_viewport_contentSize_horizontal_1_gap_100" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size with large gap (horizontal)">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new HorizontalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.group1.layout.gap = 100" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="100" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="20" />
			<AssertPropertyValue target="group1" propertyName="height" value="20" />
		</body>
	</TestCase>
	
	<TestCase testID="Group_viewport_contentSize_horizontal_5_gap_100" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size with large gap (horizontal)">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new HorizontalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.group1.layout.gap = 100" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="900" />
			<AssertPropertyValue target="group1" propertyName="width" value="900" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="20" />
			<AssertPropertyValue target="group1" propertyName="height" value="20" />
		</body>
	</TestCase>	
	
<!-- check setting a negative gap -->

	<TestCase testID="Group_viewport_contentSize_vertical_1_gap_minus10" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size with negative gap (vertical)">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.group1.layout.gap = -10" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="20" />
			<AssertPropertyValue target="group1" propertyName="height" value="20" />
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="100" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
		</body>
	</TestCase>
		
	<TestCase testID="Group_viewport_contentSize_vertical_5_gap_minus10" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size with negative gap (vertical)">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.group1.layout.gap = -10" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="100" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="60" />
			<AssertPropertyValue target="group1" propertyName="height" value="60" />
		</body>
	</TestCase>
	
	<TestCase testID="Group_viewport_contentSize_horizontal_1_gap_minus10" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size with negative gap (horizontal)">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new HorizontalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.group1.layout.gap = -10" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="100" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="20" />
			<AssertPropertyValue target="group1" propertyName="height" value="20" />
		</body>
	</TestCase>
	
	<TestCase testID="Group_viewport_contentSize_horizontal_5_gap_minus10" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size with negative gap (horizontal)">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new HorizontalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.group1.layout.gap = -10" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 20, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="460" />
			<AssertPropertyValue target="group1" propertyName="width" value="460" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="20" />
			<AssertPropertyValue target="group1" propertyName="height" value="20" />
		</body>
	</TestCase>	
	
<!-- check that adding random rects mesasures properly -->
	
	<TestCase testID="Group_viewport_contentSize_basic_layout_square_origin" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size on basic layout at origin">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<RunCode code="value=application.addCustomRect(application.group1, 20, 20, 0x000044, 0, 0)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 20, 20, 0x000044, 40, 10)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 20, 20, 0x000044, 10, 40)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="60" />
			<AssertPropertyValue target="group1" propertyName="width" value="60" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="60" />
			<AssertPropertyValue target="group1" propertyName="height" value="60" />
		</body>
	</TestCase>	
	
	<TestCase testID="Group_viewport_contentSize_basic_layout_square" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size on basic layout at origin">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<RunCode code="value=application.addCustomRect(application.group1, 20, 20, 0x000044, 50, 50)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 20, 20, 0x000044, 100, 25)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 20, 20, 0x000044, 25, 75)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="120" />
			<AssertPropertyValue target="group1" propertyName="width" value="120" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="95" />
			<AssertPropertyValue target="group1" propertyName="height" value="95" />
		</body>
	</TestCase>	
		
	<TestCase testID="Group_viewport_contentSize_basic_layout_wide" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size on a wide basic layout">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<RunCode code="value=application.addCustomRect(application.group1, 20, 20, 0x000044, 0, 0)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 20, 20, 0x000044, 5000, 0)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 20, 20, 0x000044, 25, 75)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="5020" />
			<AssertPropertyValue target="group1" propertyName="width" value="5020" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="95" />
			<AssertPropertyValue target="group1" propertyName="height" value="95" />
		</body>
	</TestCase>	
	
	<TestCase testID="Group_viewport_contentSize_basic_layout_tall" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size on a tall basic layout">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<RunCode code="value=application.addCustomRect(application.group1, 20, 20, 0x000044, 0, 0)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 20, 20, 0x000044, 0, 5000)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 20, 20, 0x000044, 25, 75)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="45" />
			<AssertPropertyValue target="group1" propertyName="width" value="45" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="5020" />
			<AssertPropertyValue target="group1" propertyName="height" value="5020" />
		</body>
	</TestCase>		
		
	
<!-- check that a mix of elements measures properly -->

	<TestCase testID="Group_viewport_contentSize_subgroups" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size works with subgroups">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new HorizontalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.createSubgroup(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.createSubgroup(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.group1.getElementAt(0).width = 100" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.group1.getElementAt(1).width = 100" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.group1.getElementAt(0).height = 100" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.group1.getElementAt(1).height = 100" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="206" />
			<AssertPropertyValue target="group1" propertyName="width" value="206" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="100" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
		</body>
	</TestCase>	
		
	<TestCase testID="Group_viewport_contentSize_overlap" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size works with overlapping items">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			
			<RunCode code="value=application.addCustomRect(application.group1, 100,100, 0x000044, 50,50)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100,100, 0x000044, 100,100)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="200" />
			<AssertPropertyValue target="group1" propertyName="width" value="200" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="200" />
			<AssertPropertyValue target="group1" propertyName="height" value="200" />
		</body>
	</TestCase>
	
	<TestCase testID="Group_viewport_contentSize_overlap_origin" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size works with overlapping items">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<RunCode code="value=application.addCustomRect(application.group1, 100,100, 0x000044, 0,0)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100,100, 0x000044, 50,50)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="150" />
			<AssertPropertyValue target="group1" propertyName="width" value="150" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="150" />
			<AssertPropertyValue target="group1" propertyName="height" value="150" />
		</body>
	</TestCase>	
	
	<TestCase testID="Group_viewport_contentSize_overlap_shifted" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size works with overlapping items">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="x"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 100,100, 0x000044, 50,50)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100,100, 0x000044, 100,100)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="200" />
			<AssertPropertyValue target="group1" propertyName="width" value="200" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="200" />
			<AssertPropertyValue target="group1" propertyName="height" value="200" />
		</body>
	</TestCase>	
	
	<TestCase testID="Group_viewport_contentSize_mix_overlap" keywords="[Group, viewport, contentWidth, contentHeight]" description="check content size works with overlapping items">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<RunCode code="value=application.createSubgroup(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.group1.getElementAt(0).x = 50" />
			<RunCode code="value=application.group1.getElementAt(0).y = 50" />
			<RunCode code="value=application.group1.getElementAt(0).width = 100" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.group1.getElementAt(0).height = 100" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100,100, 0x000044, 100,100)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="200" />
			<AssertPropertyValue target="group1" propertyName="width" value="200" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="200" />
			<AssertPropertyValue target="group1" propertyName="height" value="200" />
		</body>
	</TestCase>

	<TestCase testID="Group_viewport_contentSize_empty" keywords="[Group, viewport, contentWidth, contentHeight]" description="check that an empty group has contentWidth equal to width">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" valueExpression="value=application.group1.width" />
			<AssertPropertyValue target="group1" propertyName="contentWidth" valueExpression="value=application.group1.height" />
		</body>
	</TestCase>


<!-- verticalScrollPosition, horizontalScrollPosition properties 
 
+ Test data binding
+ Set various positive and negative scroll positions
+ Swap the layout property on the fly
+ Set layout to null/undefined
+ Swap items that are not visible into view
+ Swap items that are visible out of view
+ Swap items that are both visible
+ Use a group with a content size smaller, equal, larger than visual size
+ Check that scroll position can be set on a group containing visually constrained items
+ Check that scroll position works when resizeMode is set to Scale
+ Check that the position/dimensions of a group and its items doesn't change when changing the scrollPosition
+ Check that a rotated group can still scroll properly
+ Check that viewport can be moved on a group with content size larger than 8192x8192
+ Check that vsp,hsp are retained when assigned before creating a layout

-->


<!-- test default values of scroll position -->

	<TestCase testID="Group_viewport_scrollPosition_gradient_default" keywords="[Group, viewport, scrollPosition]" description="default scroll position values">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="horizontalScrollPosition" value="0" />
			<AssertPropertyValue target="group1" propertyName="verticalScrollPosition" value="0" />
		</body>
	</TestCase>	

<!-- set layout after setting horizontalScrollPosition/verticalScrollPosition -->

	<TestCase testID="Group_viewport_scrollPosition_before_layout" keywords="[DataGroup, viewport, scrollPosition]" description="check that setting a scroll position before setting a layout is retained">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.addElement(application.getGroupWithScrollPositionThenLayout(110, 110, true))" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.getElementAt(0).verticalScrollPosition" value="110" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).horizontalScrollPosition" value="110" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).clipAndEnableScrolling" value="true" />
		</body>
	</TestCase>	


<!-- null layout  -->

	<TestCase testID="Group_viewport_scrollPosition_null_layout" keywords="[Group, viewport, scrollPosition]" description="check null layout doesn't RTE">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=null" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 50, 0x113322)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="100" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="50" />
						
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="0" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="0" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<CompareBitmap url="../viewport/baselines/group_viewport_scrollPosition_null_layout.png" target="" timeout="2000" />
		</body>
	</TestCase>	

<!-- rotation -->

	<TestCase testID="Group_viewport_scrollPosition_rotated_vertical" keywords="[Group, viewport, scrollPosition]" description="check can scroll on rotated groups">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 50, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100,100, 0x004400)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 50, 0xFF0000)" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="rotation" value="45" />
			<Pause timeout="100" />
			<SetProperty target="group1" propertyName="verticalScrollPosition" value="110" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="100" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="50" />
			
			<AssertMethodValue method="value=application.group1.getElementAt(1).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(1).y" value="56" />			
			<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="100" />			
			<AssertMethodValue method="value=application.group1.getElementAt(1).height" value="100" />
			
			<AssertMethodValue method="value=application.group1.getElementAt(2).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(2).y" value="162" />			
			<AssertMethodValue method="value=application.group1.getElementAt(2).width" value="100" />			
			<AssertMethodValue method="value=application.group1.getElementAt(2).height" value="50" />		
											
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="100" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="212" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="verticalScrollPosition" value="110" />
			<CompareBitmap url="../viewport/baselines/group_viewport_scrollPosition_rotated_vertical.png" target="" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="Group_viewport_scrollPosition_rotated_horizontal" keywords="[Group, viewport, scrollPosition]" description="check can scroll on rotated groups">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new HorizontalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 50, 100, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100,100, 0x004400)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 50, 100, 0xFF0000)" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="rotation" value="45" />
			<Pause timeout="200" />
			<SetProperty target="group1" propertyName="horizontalScrollPosition" value="110" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="50" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="100" />
			
			<AssertMethodValue method="value=application.group1.getElementAt(1).x" value="56" />
			<AssertMethodValue method="value=application.group1.getElementAt(1).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="100" />			
			<AssertMethodValue method="value=application.group1.getElementAt(1).height" value="100" />
			
			<AssertMethodValue method="value=application.group1.getElementAt(2).x" value="162" />
			<AssertMethodValue method="value=application.group1.getElementAt(2).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(2).width" value="50" />			
			<AssertMethodValue method="value=application.group1.getElementAt(2).height" value="100" />		
											
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="212" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="100" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="horizontalScrollPosition" value="110" />
			<CompareBitmap url="../viewport/baselines/group_viewport_scrollPosition_rotated_horizontal.png" target="" timeout="2000" />
		</body>
	</TestCase>		
	
	<TestCase testID="Group_viewport_scrollPosition_rotated_basic" keywords="[Group, viewport, scrollPosition]" description="check can scroll on rotated groups">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 50, 50, 0x000044, 0, 0)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100,100, 0x004400, 50, 50)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 50, 50, 0xFF0000, 150, 150)" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="rotation" value="45" />
			<Pause timeout="100" />
			<SetProperty target="group1" propertyName="verticalScrollPosition" value="100" />
			<SetProperty target="group1" propertyName="horizontalScrollPosition" value="100" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="50" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="50" />
			
			<AssertMethodValue method="value=application.group1.getElementAt(1).x" value="50" />
			<AssertMethodValue method="value=application.group1.getElementAt(1).y" value="50" />			
			<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="100" />			
			<AssertMethodValue method="value=application.group1.getElementAt(1).height" value="100" />
			
			<AssertMethodValue method="value=application.group1.getElementAt(2).x" value="150" />
			<AssertMethodValue method="value=application.group1.getElementAt(2).y" value="150" />			
			<AssertMethodValue method="value=application.group1.getElementAt(2).width" value="50" />			
			<AssertMethodValue method="value=application.group1.getElementAt(2).height" value="50" />		
											
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="200" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="200" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="verticalScrollPosition" value="100" />
			<AssertPropertyValue target="group1" propertyName="horizontalScrollPosition" value="100" />
			<CompareBitmap url="../viewport/baselines/group_viewport_scrollPosition_rotated_basic.png" target="" timeout="2000" />
		</body>
	</TestCase>		
		
<!-- scroll on large content -->

	<TestCase testID="Group_viewport_scrollPosition_largeContent_vertical" keywords="[Group, viewport, scrollPosition]" description="visually check scroll position works in different positions">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 50, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100,10000, 0x004400)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 100, 50, 0xFF0000)" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="verticalScrollPosition"  value="10000" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="100" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="50" />
			
			<AssertMethodValue method="value=application.group1.getElementAt(1).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(1).y" value="56" />			
			<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="100" />			
			<AssertMethodValue method="value=application.group1.getElementAt(1).height" value="10000" />
			
			<AssertMethodValue method="value=application.group1.getElementAt(2).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(2).y" value="10062" />			
			<AssertMethodValue method="value=application.group1.getElementAt(2).width" value="100" />			
			<AssertMethodValue method="value=application.group1.getElementAt(2).height" value="50" />		
											
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="100" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="10112" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="verticalScrollPosition" value="10000" />
			<CompareBitmap url="../viewport/baselines/group_viewport_scrollPosition_largeContent_vertical.png" target="" timeout="2000" />
		</body>
	</TestCase>	

	<TestCase testID="Group_viewport_scrollPosition_largeContent_horizontal" keywords="[Group, viewport, scrollPosition]" description="visually check scroll position works in different positions">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new HorizontalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 50, 100, 0x000044)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 10000,100, 0x004400)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 50, 100, 0xFF0000)" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="horizontalScrollPosition"  value="10000" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="50" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="100" />
			
			<AssertMethodValue method="value=application.group1.getElementAt(1).x" value="56" />
			<AssertMethodValue method="value=application.group1.getElementAt(1).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="10000" />			
			<AssertMethodValue method="value=application.group1.getElementAt(1).height" value="100" />
			
			<AssertMethodValue method="value=application.group1.getElementAt(2).x" value="10062" />
			<AssertMethodValue method="value=application.group1.getElementAt(2).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(2).width" value="50" />			
			<AssertMethodValue method="value=application.group1.getElementAt(2).height" value="100" />		
											
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="10112" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="100" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="horizontalScrollPosition" value="10000" />
			<CompareBitmap url="../viewport/baselines/group_viewport_scrollPosition_largeContent_horizontal.png" target="" timeout="2000" />
		</body>
	</TestCase>	

	<TestCase testID="Group_viewport_scrollPosition_largeContent_basic" keywords="[Group, viewport, scrollPosition]" description="visually check scroll position works in different positions">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 50, 50, 0x000044, 0, 0)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 10000, 10000, 0x004400, 50, 50)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 50, 50, 0xFF0000, 10050, 10050)" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="horizontalScrollPosition"  value="10000" />
			<SetProperty target="group1" propertyName="verticalScrollPosition"  value="10000" />
			
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="50" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="50" />
			
			<AssertMethodValue method="value=application.group1.getElementAt(1).x" value="50" />
			<AssertMethodValue method="value=application.group1.getElementAt(1).y" value="50" />			
			<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="10000" />			
			<AssertMethodValue method="value=application.group1.getElementAt(1).height" value="10000" />
			
			<AssertMethodValue method="value=application.group1.getElementAt(2).x" value="10050" />
			<AssertMethodValue method="value=application.group1.getElementAt(2).y" value="10050" />			
			<AssertMethodValue method="value=application.group1.getElementAt(2).width" value="50" />			
			<AssertMethodValue method="value=application.group1.getElementAt(2).height" value="50" />		
			
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="10100" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="10100" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="verticalScrollPosition" value="10000" />
			<AssertPropertyValue target="group1" propertyName="horizontalScrollPosition" value="10000" />
			<CompareBitmap url="../viewport/baselines/group_viewport_scrollPosition_largeContent_basic.png" target="" timeout="2000" />
		</body>
	</TestCase>	
	
<!-- test various viewport positions including edges -->
	
	<TestCase testID="Group_viewport_scrollPosition_gradient_minus50_minus50" keywords="[Group, viewport, scrollPosition]" description="visually check scroll position works in different positions">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="value=application.group1.addElement(new comps.RadialGradientRect)" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="horizontalScrollPosition"  value="-50" />
			<SetProperty target="group1" propertyName="verticalScrollPosition"  value="-50" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="500" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="500" />	
											
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="500" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="500" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="horizontalScrollPosition" value="-50" />
			<AssertPropertyValue target="group1" propertyName="verticalScrollPosition" value="-50" />
			<CompareBitmap url="../viewport/baselines/$testID.png" target="" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="Group_viewport_scrollPosition_gradient_0_0" keywords="[Group, viewport, scrollPosition]" description="visually check scroll position works in different positions">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="value=application.group1.addElement(new comps.RadialGradientRect)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="500" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="500" />	
					
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="500" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="500" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="horizontalScrollPosition" value="0" />
			<AssertPropertyValue target="group1" propertyName="verticalScrollPosition" value="0" />
			<CompareBitmap url="../viewport/baselines/$testID.png" target="" timeout="2000" />
		</body>
	</TestCase>		

	<TestCase testID="Group_viewport_scrollPosition_gradient_450_minus50" keywords="[Group, viewport, scrollPosition]" description="visually check scroll position works in different positions">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="value=application.group1.addElement(new comps.RadialGradientRect)" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="horizontalScrollPosition"  value="450"  />
			<SetProperty target="group1" propertyName="verticalScrollPosition"  value="-50"  />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="500" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="500" />	
							
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="500" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="500" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="horizontalScrollPosition" value="450" />
			<AssertPropertyValue target="group1" propertyName="verticalScrollPosition" value="-50" />
			<CompareBitmap url="../viewport/baselines/$testID.png" target="" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="Group_viewport_scrollPosition_gradient_minus50_450" keywords="[Group, viewport, scrollPosition]" description="visually check scroll position works in different positions">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="value=application.group1.addElement(new comps.RadialGradientRect)" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="horizontalScrollPosition"  value="-50"  />
			<SetProperty target="group1" propertyName="verticalScrollPosition"  value="450"  />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="500" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="500" />	
							
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="500" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="500" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="horizontalScrollPosition" value="-50" />
			<AssertPropertyValue target="group1" propertyName="verticalScrollPosition" value="450" />
			<CompareBitmap url="../viewport/baselines/$testID.png" target="" timeout="2000" />
		</body>
	</TestCase>	
			
	<TestCase testID="Group_viewport_scrollPosition_gradient_450_450" keywords="[Group, viewport, scrollPosition]" description="visually check scroll position works in different positions">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="value=application.group1.addElement(new comps.RadialGradientRect)" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="horizontalScrollPosition"  value="450"  />
			<SetProperty target="group1" propertyName="verticalScrollPosition"  value="450"  />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="500" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="500" />	
							
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="500" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="500" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="horizontalScrollPosition" value="450" />
			<AssertPropertyValue target="group1" propertyName="verticalScrollPosition" value="450" />
			<CompareBitmap url="../viewport/baselines/$testID.png" target="" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="Group_viewport_scrollPosition_gradient_200_200" keywords="[Group, viewport, scrollPosition]" description="visually check scroll position works in different positions">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="value=application.group1.addElement(new comps.RadialGradientRect)" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="horizontalScrollPosition"  value="200"  />
			<SetProperty target="group1" propertyName="verticalScrollPosition"  value="200" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="500" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="500" />	
							
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="500" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="500" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="horizontalScrollPosition" value="200" />
			<AssertPropertyValue target="group1" propertyName="verticalScrollPosition" value="200" />
			<CompareBitmap url="../viewport/baselines/$testID.png" target="" timeout="2000" />
		</body>
	</TestCase>			

	<TestCase testID="Group_viewport_scrollPosition_gradient_minus50_200" keywords="[Group, viewport, scrollPosition]" description="visually check scroll position works in different positions">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="value=application.group1.addElement(new comps.RadialGradientRect)" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="horizontalScrollPosition"  value="-50" />
			<SetProperty target="group1" propertyName="verticalScrollPosition"  value="200"  />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="500" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="500" />	
							
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="500" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="500" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="horizontalScrollPosition" value="-50" />
			<AssertPropertyValue target="group1" propertyName="verticalScrollPosition" value="200" />
			<CompareBitmap url="../viewport/baselines/$testID.png" target="" timeout="2000" />
		</body>
	</TestCase>		
	
	<TestCase testID="Group_viewport_scrollPosition_gradient_200_minus50" keywords="[Group, viewport, scrollPosition]" description="visually check scroll position works in different positions">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="value=application.group1.addElement(new comps.RadialGradientRect)" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="horizontalScrollPosition"  value="200"  />
			<SetProperty target="group1" propertyName="verticalScrollPosition"  value="-50" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="500" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="500" />	
							
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="500" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="500" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="horizontalScrollPosition" value="200" />
			<AssertPropertyValue target="group1" propertyName="verticalScrollPosition" value="-50" />
			<CompareBitmap url="../viewport/baselines/$testID.png" target="" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="Group_viewport_scrollPosition_gradient_450_200" keywords="[Group, viewport, scrollPosition]" description="visually check scroll position works in different positions">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="value=application.group1.addElement(new comps.RadialGradientRect)" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="horizontalScrollPosition"  value="450"  />
			<SetProperty target="group1" propertyName="verticalScrollPosition"  value="200"  />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="500" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="500" />	
							
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="500" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="500" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="horizontalScrollPosition" value="450" />
			<AssertPropertyValue target="group1" propertyName="verticalScrollPosition" value="200" />
			<CompareBitmap url="../viewport/baselines/$testID.png" target="" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="Group_viewport_scrollPosition_gradient_200_450" keywords="[Group, viewport, scrollPosition]" description="visually check scroll position works in different positions">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="value=application.group1.addElement(new comps.RadialGradientRect)" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="horizontalScrollPosition"  value="200"  />
			<SetProperty target="group1" propertyName="verticalScrollPosition"  value="450" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="500" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="500" />	
							
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="500" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="500" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="horizontalScrollPosition" value="200" />
			<AssertPropertyValue target="group1" propertyName="verticalScrollPosition" value="450" />
			<CompareBitmap url="../viewport/baselines/$testID.png" target="" timeout="2000" />
		</body>
	</TestCase>	
	
<!-- a group with constrained elements -->

	<TestCase testID="Group_viewport_scrollPosition_constraint" keywords="[Group, viewport, scrollPosition]" description="check that viewport can be set on a group with constrained elements">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="value=application.addStretchRect(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="verticalScrollPosition"  value="-50" />
			<SetProperty target="group1" propertyName="horizontalScrollPosition"  value="-50"  />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="100" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="100" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="horizontalScrollPosition" value="-50" />
			<AssertPropertyValue target="group1" propertyName="verticalScrollPosition" value="-50" />
			<CompareBitmap url="../viewport/baselines/group_viewport_scrollPosition_constraint.png" target="" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="Group_viewport_scrollPosition_verticalLayout" keywords="[Group, viewport, scrollPosition]" description="check scroll position on vertical layout">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="verticalScrollPosition"  value="-50" />
			<SetProperty target="group1" propertyName="horizontalScrollPosition"  value="-50" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="15" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="horizontalScrollPosition" value="-50" />
			<AssertPropertyValue target="group1" propertyName="verticalScrollPosition" value="-50" />
			<CompareBitmap url="../viewport/baselines/group_viewport_scrollPosition_verticalLayout.png" target="" timeout="2000" />
		</body>
	</TestCase>	

	<TestCase testID="Group_viewport_scrollPosition_horizontalLayout" keywords="[Group, viewport, scrollPosition]" description="check scroll position on horizontal layout">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new HorizontalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="verticalScrollPosition"  value="-50"  />
			<SetProperty target="group1" propertyName="horizontalScrollPosition"  value="-50"  />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="36" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="horizontalScrollPosition" value="-50" />
			<AssertPropertyValue target="group1" propertyName="verticalScrollPosition" value="-50" />
			<CompareBitmap url="../viewport/baselines/group_viewport_scrollPosition_horizontalLayout.png" target="" timeout="2000" />
		</body>
	</TestCase>	

	<TestCase testID="Group_viewport_scrollPosition_smaller_content" keywords="[Group, viewport, scrollPosition]" description="scroll on content smaller than viewport">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 50,50,0x0000FF,0,0)" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="verticalScrollPosition"  value="-5"  />
			<SetProperty target="group1" propertyName="horizontalScrollPosition"  value="-5"  />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="50" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="50" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="horizontalScrollPosition" value="-5" />
			<AssertPropertyValue target="group1" propertyName="verticalScrollPosition" value="-5" />
			<CompareBitmap url="../viewport/baselines/group_viewport_scrollPosition_smaller_content.png" target="" timeout="2000" />
		</body>
	</TestCase>

<!-- swap items in and out of view -->

	<TestCase testID="Group_viewport_scrollPosition_swapItems_in_view" keywords="[Group, viewport, scrollPosition]" description="swap items that are in view">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0x999999)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0x666666)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0x333333)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<RunCode code="application.group1.swapElementsAt(0,2)" waitEvent="updateComplete" waitTarget="group1"/>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="120" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="118" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<CompareBitmap url="../viewport/baselines/group_viewport_scrollPosition_swapItems_in_view.png" target="" timeout="2000" />
		</body>
	</TestCase>
	
	<TestCase testID="Group_viewport_scrollPosition_swapItems_into_view" keywords="[Group, viewport, scrollPosition]" description="swap an item into view">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0x999999)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0x666666)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0x333333)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<RunCode code="application.group1.swapElementsAt(3,1)" waitEvent="updateComplete" waitTarget="group1"/>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="120" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="118" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<CompareBitmap url="../viewport/baselines/group_viewport_scrollPosition_swapItems_into_view.png" target="" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="Group_viewport_scrollPosition_swapItems_out_of_view" keywords="[Group, viewport, scrollPosition]" description="swap an item out of view">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0x999999)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0x666666)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0x333333)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0x000000)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<RunCode code="application.group1.swapElementsAt(3,4)" waitEvent="updateComplete" waitTarget="group1"/>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="120" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="149" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<CompareBitmap url="../viewport/baselines/group_viewport_scrollPosition_swapItems_out_of_view.png" target="" timeout="2000" />
		</body>
	</TestCase>	
		
<!-- change layout on the fly -->

	<TestCase testID="Group_viewport_contentSize_swap_layout" keywords="[Group, viewport, contentWidth, contentHeight]" description="swap layout">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 25,25 ,0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 25,25 ,0x999999)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 25,25 ,0x666666)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 25,25 ,0x333333)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new HorizontalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="118" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="25" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<CompareBitmap url="../viewport/baselines/group_viewport_contentSize_swap_layout.png" target="" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="Group_viewport_scrollPosition_swap_layout" keywords="[Group, viewport, scrollPosition]" description="swapping layout should reset scroll position">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 94, 44, 0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 94, 44, 0xE3E3E3)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 94, 44, 0x001100)" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="verticalScrollPosition" value="50" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="94" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="44" />
			
			<AssertMethodValue method="value=application.group1.getElementAt(1).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(1).y" value="50" />			
			<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="94" />			
			<AssertMethodValue method="value=application.group1.getElementAt(1).height" value="44" />
			
			<AssertMethodValue method="value=application.group1.getElementAt(2).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(2).y" value="100" />			
			<AssertMethodValue method="value=application.group1.getElementAt(2).width" value="94" />			
			<AssertMethodValue method="value=application.group1.getElementAt(2).height" value="44" />
			
			<AssertPropertyValue target="group1" propertyName="verticalScrollPosition" value="50" />
			<AssertPropertyValue target="group1" propertyName="horizontalScrollPosition" value="0" />
			
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new HorizontalLayout()" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="verticalScrollPosition" value="0" />
			
			<AssertMethodValue method="value=application.group1.getElementAt(0).x" value="0" />
			<AssertMethodValue method="value=application.group1.getElementAt(0).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).width" value="94" />			
			<AssertMethodValue method="value=application.group1.getElementAt(0).height" value="44" />
			
			<AssertMethodValue method="value=application.group1.getElementAt(1).x" value="100" />
			<AssertMethodValue method="value=application.group1.getElementAt(1).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(1).width" value="94" />			
			<AssertMethodValue method="value=application.group1.getElementAt(1).height" value="44" />
			
			<AssertMethodValue method="value=application.group1.getElementAt(2).x" value="200" />
			<AssertMethodValue method="value=application.group1.getElementAt(2).y" value="0" />			
			<AssertMethodValue method="value=application.group1.getElementAt(2).width" value="94" />			
			<AssertMethodValue method="value=application.group1.getElementAt(2).height" value="44" />
			
			<AssertPropertyValue target="group1" propertyName="verticalScrollPosition" value="0" />
			<AssertPropertyValue target="group1" propertyName="horizontalScrollPosition" value="0" />			
			
			<CompareBitmap url="../viewport/baselines/group_viewport_scrollPosition_swap_layout.png" target="" timeout="2000" />
		</body>
	</TestCase>		
	
<!-- check resize by scale plays nicely with viewport -->

	<TestCase testID="Group_viewport_scrollPosition_resizeByScale" keywords="[Group, viewport, scrollPosition]" description="change scroll position with resize by scale">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="resizeMode"  value="scale" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="value=application.group1.addElement(new comps.VectorGraphic)" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="horizontalScrollPosition"  value="50"  />
			<SetProperty target="group1" propertyName="verticalScrollPosition"  value="50" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="100" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="100" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
			<AssertPropertyValue target="group1" propertyName="horizontalScrollPosition" value="50" />
			<AssertPropertyValue target="group1" propertyName="verticalScrollPosition" value="50" />
			<CompareBitmap url="../viewport/baselines/group_viewport_scrollPosition_resizeByScale.png" target="" timeout="2000" />
		</body>
	</TestCase>	
	
<!-- setContentSize()  method

+ set contentSize to zero in group with items
+ set contentSize to zero in empty group
+ set contentSize to positive values in group with items
+ set contentSize to positive values in empty group

-->

	<TestCase testID="Group_viewport_setContentSize_zero_empty" keywords="[Group, viewport, setContentSize]" description="set the content size of an empty group to zero">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<RunCode code="application.group1.setContentSize(0,0)" />
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="0" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="0" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
		</body>
	</TestCase>	
	
	<TestCase testID="Group_viewport_setContentSize_zero" keywords="[Group, viewport, setContentSize]" description="set the content size of a group to zero">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0x999999)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0x666666)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0x333333)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0x000000)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<RunCode code="application.group1.setContentSize(0,0)" />
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="0" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="0" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
		</body>
	</TestCase>	
	
	<TestCase testID="Group_viewport_setContentSize_positive_empty" keywords="[Group, viewport, setContentSize]" description="set the content size of an empty group to positive">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<RunCode code="application.group1.setContentSize(50,50)" />
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="50" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="50" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
		</body>
	</TestCase>		
	
	<TestCase testID="Group_viewport_setContentSize_positive" keywords="[Group, viewport, setContentSize]" description="set the content size of a group to positive">
		<setup>
			<ResetComponent target="group1" className="spark.components.Group" waitEvent="updateComplete" />
<SetProperty target="group1" propertyName="clipAndEnableScrolling"  value="true"  />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0xCCCCCC)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0x999999)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0x666666)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0x333333)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="value=application.addCustomRect(application.group1, 120,25 ,0x000000)" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<RunCode code="application.group1.setContentSize(50,50)" />
			<AssertPropertyValue target="group1" propertyName="contentWidth" value="50" />
			<AssertPropertyValue target="group1" propertyName="width" value="100" />
			<AssertPropertyValue target="group1" propertyName="contentHeight" value="50" />
			<AssertPropertyValue target="group1" propertyName="height" value="100" />
		</body>
	</TestCase>	
			
			
  </testCases>
</UnitTester>
