<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<UnitTester testDir="gumbo/core/DataGroup/properties/" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"  xmlns:m="http://ns.adobe.com/mxml/2009" xmlns="*" testSWF="DataGroupBasic.mxml">

  <!-- this set of lines form a template that must be in each unit test -->
  <fx:Script>
    <![CDATA[
	public static function init(o:DisplayObject):void { }
	]]>
  </fx:Script>
  <fx:Metadata>
    <![CDATA[
	[Mixin]
	]]>
  </fx:Metadata>
  <!-- end of set of lines that must be in each unit test -->
  <fx:Script>
    <![CDATA[
	
	  import spark.layouts.*;
      import mx.controls.Label;
      import comps.*;
      import mx.core.ClassFactory;
	  import mx.collections.ArrayCollection;
	  import spark.primitives.*;
	  import spark.filters.*;
	  import spark.skins.spark.*;
	  import spark.components.Button;
	  import spark.components.DataGroup;
	  import spark.components.TextInput;
	  import spark.core.MaskType;
	  
	  public var someArrayCollection:ReuseArrayCollection = new ReuseArrayCollection();    	
    	
	 
	]]>
  </fx:Script>
  
  <testCases>


<!-- autoLayout property

+ check that the default value is true
+ set to false and move an object up/down in a HorizontalLayout, check object moves
+ set to false and move an object left/right in a VerticalLayout, check object moves
+ check default moving an object in HorizontalLayout/VerticalLayout should not have any effect
+ change height of an object in VerticalLayout with variableRowHeight set to false, check size changes
+ change width of an object in HorizontalLayout with variableColumnWidth set to false, check size changes
+ check that setting autoLayout to false works with clipContent on
+ check that changing to true snaps items back into proper layout

-->

    <TestCase testID="DataGroup_property_autoLayout_default" keywords="[DataGroup, property, autoLayout]" description="check default is true">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
    	</setup>
    	<body>
	        <AssertPropertyValue target="group1" propertyName="autoLayout" value="true" />
		</body>
    </TestCase>

    <TestCase testID="DataGroup_property_autoLayout_position_vertical" keywords="[DataGroup, property, autoLayout]" description="check position changes">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 100, 25, 0x110000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 100, 25, 0x880000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 100, 25, 0xFF0000);" waitTarget="group1" waitEvent="updateComplete" />
        	<SetProperty 	target="group1" propertyName="autoLayout" value="false" />
			<Pause timeout="50" />
	   	</setup>
    	<body>
			<RunCode code="application.group1.dataProvider.getItemAt(1).y = 40;" />
			<Pause timeout="50" />
	        <AssertPropertyValue target="group1" propertyName="autoLayout" value="false" />
			<CompareBitmap url="../properties/baselines/datagroup_property_autoLayout_position_vertical.png" target="" timeout="2000" />
		</body>
    </TestCase>


    <TestCase testID="DataGroup_property_autoLayout_position_horizontal" keywords="[DataGroup, property, autoLayout]" description="check position changes">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new HorizontalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 25, 100, 0x110000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 25, 100, 0x880000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 25, 100, 0xFF0000);" waitTarget="group1" waitEvent="updateComplete" />
        	<SetProperty target="group1" propertyName="autoLayout" value="false" />
			<Pause timeout="100" />
	   	</setup>
    	<body>
			<RunCode code="application.group1.dataProvider.getItemAt(1).x = 40;" />
			<Pause timeout="50" />
	        <AssertPropertyValue target="group1" propertyName="autoLayout" value="false" />
			<CompareBitmap url="../properties/baselines/datagroup_property_autoLayout_position_horizontal.png" target="" timeout="2000" />
		</body>
    </TestCase>
	
    <TestCase testID="DataGroup_property_autoLayout_no_movement_vertical" keywords="[DataGroup, property, autoLayout]" description="check position doesn't change with autoLayout default">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 100, 25, 0x110000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 100, 25, 0x880000);" waitTarget="group1" waitEvent="updateComplete" />
	   	</setup>
    	<body>
			<RunCode code="application.group1.dataProvider.getItemAt(1).y = 40;" />
			<Pause timeout="100" />
			<RunCode code="application.addCustomRect(application.group1, 100, 25, 0xFF0000);" waitTarget="group1" waitEvent="updateComplete" />			
			<CompareBitmap url="../properties/baselines/datagroup_property_autoLayout_no_movement_vertical.png" target="group1" timeout="2000" />
		</body>
    </TestCase>
		
    <TestCase testID="DataGroup_property_autoLayout_no_movement_horizontal" keywords="[DataGroup, property, autoLayout]" description="check position doesn't change">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new HorizontalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 25, 100, 0x110000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 25, 100, 0x880000);" waitTarget="group1" waitEvent="updateComplete" />
	   	</setup>
    	<body>
			<RunCode code="application.group1.dataProvider.getItemAt(1).x = 40;" />
			<Pause timeout="100" />
			<RunCode code="application.addCustomRect(application.group1, 25, 100, 0xFF0000);" waitTarget="group1" waitEvent="updateComplete" />
			<CompareBitmap url="../properties/baselines/datagroup_property_autoLayout_no_movement_horizontal.png" target="group1" timeout="2000" />
		</body>
    </TestCase>

    <TestCase testID="DataGroup_property_autoLayout_size_vertical" keywords="[DataGroup, property, autoLayout]" description="check size changes">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.variableRowHeight = false;" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.rowHeight = 10;" waitTarget="group1" waitEvent="updateComplete" />
			        
			<RunCode code="application.addCustomRect(application.group1, 100, 50, 0x110000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 100, 50, 0x880000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 100, 50, 0xFF0000);" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="autoLayout" value="false" />
			<Pause timeout="100" />
	   	</setup>
    	<body>
			<RunCode code="application.group1.dataProvider.getItemAt(1).height = 15;" />
			<Pause timeout="50" />
			<CompareBitmap url="../properties/baselines/datagroup_property_autoLayout_size_vertical.png" target="group1" timeout="2000" />
		</body>
    </TestCase>
	
    <TestCase testID="DataGroup_property_autoLayout_size_horizontal" keywords="[DataGroup, property, autoLayout]" description="check size changes">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new HorizontalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.variableColumnWidth = false;" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.columnWidth = 10;" waitTarget="group1" waitEvent="updateComplete" />

			<RunCode code="application.addCustomRect(application.group1, 50, 100, 0x110000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 50, 100, 0x880000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 50, 100, 0xFF0000);" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="autoLayout" value="false" />
			<Pause timeout="100" />
	   	</setup>
    	<body>
			<RunCode code="application.group1.dataProvider.getItemAt(1).width = 15;" />
			<Pause timeout="50" />
			<CompareBitmap url="../properties/baselines/datagroup_property_autoLayout_size_horizontal.png" target="group1" timeout="2000" />
		</body>
    </TestCase>			

    <TestCase testID="DataGroup_property_autoLayout_clipContent" keywords="[DataGroup, property, autoLayout]" description="check clipContent works with autoLayout">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
		        
			<RunCode code="application.addCustomRect(application.group1, 100, 25, 0x110000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 100, 25, 0x880000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 100, 25, 0xFF0000);" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="autoLayout" value="false" />
			<Pause timeout="100" />
			
			<RunCode code="application.group1.dataProvider.getItemAt(1).x = 20;" />
			<Pause timeout="50" />
	   	</setup>
    	<body>
			<CompareBitmap url="../properties/baselines/datagroup_property_autoLayout_clipContent.png" target="" timeout="2000" />
		</body>
    </TestCase>					
	
    <TestCase testID="DataGroup_property_autoLayout_switchTo_true" keywords="[DataGroup, property, autoLayout]" description="check equal heights">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.variableRowHeight = false;" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.rowHeight = 10;" waitTarget="group1" waitEvent="updateComplete" />
			        
			<RunCode code="application.addCustomRect(application.group1, 100, 50, 0x110000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 100, 50, 0x880000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 100, 50, 0xFF0000);" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="autoLayout" value="false" />
			<Pause timeout="100" />
			
			<RunCode code="application.group1.dataProvider.getItemAt(1).height = 20;" />
			<Pause timeout="50" />
			
			<SetProperty target="group1" propertyName="autoLayout" value="true" waitTarget="group1" waitEvent="updateComplete" />
	   	</setup>
    	<body>
			<CompareBitmap url="../properties/baselines/datagroup_property_autoLayout_switchTo_true.png" target="group1" timeout="2000" />
		</body>
    </TestCase>				
			  

<!-- filters property -->

    <TestCase testID="DataGroup_property_filters_data" keywords="[DataGroup, property, filters]" description="check shadow filter on data items">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="layout"  valueExpression="value=new VerticalLayout()" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['test','data'])" waitTarget="group1"  waitEvent="updateComplete" />
      </setup>
      <body>
        <RunCode code="application.addShadowFilter(application.group1);" />
		<!-- no event sent, need to pause -->
		<Pause timeout="200" />
		<AssertMethodValue method="value=(application.group1.filters[0] is DropShadowFilter)" valueExpression="value=true" />
        <CompareBitmap url="../properties/baselines/datagroup_property_filters_data.png" target="group1" timeout="2000" />
      </body>
    </TestCase>
	
	<TestCase testID="DataGroup_property_filters_graphics" keywords="[DataGroup, property, filters]" description="check shadow filter on graphics items">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="layout"  valueExpression="value= new VerticalLayout()" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection()" waitTarget="group1"  waitEvent="updateComplete" />
        <RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
		<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
      </setup>
      <body>
        <RunCode code="application.addShadowFilter(application.group1);" />
		<!-- no event sent, need to pause -->
		<Pause timeout="200" />
		<AssertMethodValue method="value=(application.group1.filters[0] is DropShadowFilter)" valueExpression="value=true" />
        <CompareBitmap url="../properties/baselines/datagroup_property_filters_graphics.png" target="group1" timeout="2000" />
      </body>
    </TestCase>
	
	<TestCase testID="DataGroup_property_filters_mix" keywords="[DataGroup, property, filters]" description="check shadow filter on mixed items">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="layout"  valueExpression="value=new VerticalLayout()" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['test','data'])" waitTarget="group1"  waitEvent="updateComplete" />
        <RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
      </setup>
      <body>
        <RunCode code="application.addShadowFilter(application.group1);" />
		<!-- no event sent, need to pause -->
		<Pause timeout="200" />
		<AssertMethodValue method="value=(application.group1.filters[0] is DropShadowFilter)" valueExpression="value=true" />
        <CompareBitmap url="../properties/baselines/datagroup_property_filters_mix.png" target="group1" timeout="2000" />
      </body>
    </TestCase>
  
    <TestCase testID="DataGroup_property_filters_change" keywords="[DataGroup, property, filters]" description="change the filters on a group">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="layout"  valueExpression="value=new VerticalLayout()" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['test','data'])" waitTarget="group1"  waitEvent="updateComplete" />
      </setup>
      <body>
        <RunCode code="application.addShadowFilter(application.group1);" />
		<!-- no event sent, need to pause -->
		<Pause timeout="200" />
        <RunCode code="application.addBlurFilter(application.group1);" />
		<!-- no event sent, need to pause -->
		<Pause timeout="200" />
		<AssertMethodValue method="value=(application.group1.filters[0] is DropShadowFilter)" valueExpression="value=true" />
		<AssertMethodValue method="value=(application.group1.filters[1] is BlurFilter)" valueExpression="value=true" />
        <CompareBitmap url="../properties/baselines/datagroup_property_filters_change.png" target="group1" timeout="2000" />
      </body>
    </TestCase>


<!-- dataProvider property -->

<!-- Adding tests for SDK-18046 - null items now supported in DataGroup -->

    <TestCase testID="DataGroup_property_dataProvider_null_items" keywords="[DataGroup, property, dataProvider, null]" description="ensure DataGroup can hold null items using itemRenderer">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
		<RunCode code="application.group1.itemRenderer=new ClassFactory(comps.NullItemRenderer)" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection([null, 'string', null, 3.1415, null])}" waitTarget="group1" waitEvent="updateComplete" />
		<WaitForLayoutManager />
      </setup>
      <body>
        <AssertMethodValue method="value=application.group1.dataProvider.length" value="5" />
		<CompareBitmap url="../properties/baselines/datagroup_property_dataProvider_null_items.png" target="group1" timeout="2000" />
      </body>
    </TestCase>
	
    <TestCase testID="DataGroup_property_dataProvider_null_items_function" keywords="[DataGroup, property, dataProvider, null]" description="ensure DataGroup can hold null items using itemRendererFunction">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.nullItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />		
		<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection([null, 'string', null, 3.1415, null])}" waitTarget="group1" waitEvent="updateComplete" />
		<WaitForLayoutManager />
      </setup>
      <body>
        <AssertMethodValue method="value=application.group1.dataProvider.length" value="5" />
		<CompareBitmap url="../properties/baselines/datagroup_property_dataProvider_null_items_function.png" target="group1" timeout="2000" />
      </body>
    </TestCase>	
	
    <TestCase testID="DataGroup_property_content_empty_array" keywords="[DataGroup, property, dataProvider, array]" description="set content to empty array">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection([])}" waitTarget="group1" waitEvent="updateComplete" />
      </setup>
      <body>
        <AssertPropertyValue 	target="group1" propertyName="dataProvider" value="[]" />
        <AssertMethodValue method="value=application.group1.dataProvider.length" value="0" />
      </body>
    </TestCase>
	
    <TestCase testID="DataGroup_property_content_single_element_array" keywords="[DataGroup, property, dataProvider, array]" description="set content to single element">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['hello world'])}" />
      </setup>
      <body>
        <AssertPropertyValue 	target="group1" propertyName="dataProvider" value="['hello world']" />
        <AssertMethodValue method="value=application.group1.dataProvider.length" value="1" />
        <AssertMethodValue 		method="value=application.group1.dataProvider.getItemAt(0)" value="hello world" />
      </body>
    </TestCase>
	
    <TestCase testID="DataGroup_property_content_two_element_array" keywords="[DataGroup, property, dataProvider, array]" description="set content property to array">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
		
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['hello','world'])}" />
      </setup>
      <body>
        <AssertPropertyValue 	target="group1" propertyName="dataProvider" value="['hello','world']" />
        <AssertMethodValue method="value=application.group1.dataProvider.length" value="2" />
        <AssertMethodValue 		method="value=application.group1.dataProvider.getItemAt(0)" value="hello" />
        <AssertMethodValue 		method="value=application.group1.dataProvider.getItemAt(1)" value="world" />
      </body>
    </TestCase>
	
    <TestCase testID="DataGroup_property_content_big_array_strings" keywords="[DataGroup, property, dataProvider, array]" description="set content property to larger array">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(application.abcArr)" waitEvent="updateComplete" waitTarget="group1" />
      </setup>
      <body>
        <AssertPropertyValue target = "group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection(application.abcArr)" />
        <AssertMethodValue method="value=application.group1.dataProvider.length" value="28" />
        <AssertMethodValue   method="value=application.group1.dataProvider.getItemAt(0)" value=" " />
        <AssertMethodValue   method="value=application.group1.dataProvider.getItemAt(27)" value="Z" />
      </body>
    </TestCase>
	
    <TestCase testID="DataGroup_property_content_big_array_ints" keywords="[DataGroup, property, dataProvider, array]" description="set content property to integer array">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection([0,1,2,3,4,5,6,7,8,9,10])}" waitEvent="updateComplete" waitTarget="group1" />
      </setup>
      <body>
        <AssertMethodValue method="value=application.group1.dataProvider.length" value="11" />
        <AssertMethodValue   method="value=application.group1.dataProvider.getItemAt(0)" value="0" />
        <AssertMethodValue   method="value=application.group1.dataProvider.getItemAt(10)" value="10" />
      </body>
    </TestCase>
		
    <TestCase testID="DataGroup_property_content_graphic_element" keywords="[DataGroup, property, dataProvider, graphic]" description="set content to graphic element">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
      </setup>
      <body>
        <RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
        <AssertMethodValue method="value=application.group1.dataProvider.length" value="1" />
        <AssertMethodValue   method="value=application.group1.dataProvider.getItemAt(0).x" value="10" />
        <AssertMethodValue   method="value=application.group1.dataProvider.getItemAt(0).y" value="15" />
      </body>
    </TestCase>
	
    <TestCase testID="DataGroup_property_content_graphic_elements" keywords="[DataGroup, property, dataProvider, graphic]" description="set content to multiple graphic element">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
      </setup>
      <body>
        <RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
        <RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
        <AssertMethodValue   method="value=application.group1.dataProvider.length" value="2" />
        <AssertMethodValue   method="value=application.group1.dataProvider.getItemAt(0).x" value="10" />
        <AssertMethodValue   method="value=application.group1.dataProvider.getItemAt(0).y" value="15" />
        <AssertMethodValue   method="value=application.group1.dataProvider.getItemAt(1).x" value="30" />
        <AssertMethodValue   method="value=application.group1.dataProvider.getItemAt(1).y" value="40" />
      </body>
    </TestCase>
	
	<TestCase testID="DataGroup_property_data_graphic" keywords="[DataGroup, property, data]" description="pass graphic data to itemrenderer">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.group1.itemRenderer=new ClassFactory(comps.IconRenderer)" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty    target="group1" propertyName="layout"  valueExpression="value=new VerticalLayout()" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty 	target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(application.smallGraphicArray)" waitTarget="group1"  waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.graphicArray[0].label" value="1" />
			<CompareBitmap url="../properties/baselines/datagroup_property_data_graphic.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_data_mix" keywords="[DataGroup, property, data]" description="pass mix data to itemRenderer">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.group1.itemRenderer=new ClassFactory(comps.DataGroupRenderer)" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty    target="group1" propertyName="layout"  valueExpression="value=new VerticalLayout" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty 	target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(application.smallGraphicArray)" waitTarget="group1"  waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.graphicArray[0].label" value="1" />
			<CompareBitmap url="../properties/baselines/datagroup_property_data_mix.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	
<!-- itemRenderer - data -->

	<TestCase testID="DataGroup_property_itemRenderer_data" keywords="[DataGroup, property, data]" description="pass data to itemRenderer">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.group1.itemRenderer=new ClassFactory(comps.LabelRenderer)" waitTarget="group1" waitEvent="updateComplete"  />
			<SetProperty target="group1" propertyName="layout"  valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection(application.dataArray)" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			
			<AssertMethodValue method="value=application.dataArray[0]" value="10" />
			<CompareBitmap url="../properties/baselines/datagroup_property_itemRenderer_data.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_itemRenderer_data_color" keywords="[DataGroup, property, data]" description="pass color data to itemRenderer">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.group1.itemRenderer=new ClassFactory(comps.ColorLabelRenderer)" waitTarget="group1" waitEvent="updateComplete"  />
			<SetProperty target="group1" propertyName="layout"  valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection(application.mixArr)" waitTarget="group1"  waitEvent="updateComplete" />
		</setup>
		<body>
			
			<AssertMethodValue method="value=application.mixArr[0].label" value="Green string" />
			<CompareBitmap url="../properties/baselines/datagroup_property_itemRenderer_data_color.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	

	<TestCase testID="DataGroup_property_itemRenderer_data_skin" keywords="[DataGroup, property, data]" description="pass data to a skin itemRenderer">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.group1.itemRenderer=new ClassFactory(comps.DataGroupRendererSkin)"  waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="layout"  valueExpression="value=new VerticalLayout()"  waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection(application.dataArray)" waitTarget="group1"  waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.dataArray[0]" value="10" />
			<CompareBitmap url="../properties/baselines/datagroup_property_itemRenderer_data_skin.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	

<!-- itemRenderer - graphic -->
	
	<TestCase testID="DataGroup_property_itemRenderer_graphic" keywords="[DataGroup, property, itemRenderer]" description="pass graphic data to item renderer">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        	<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.itemRenderer=new ClassFactory(comps.DataGroupDefaultItemRendererComplex)"  waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			
			<RunCode code="application.addRect(application.group1);" waitTarget="group1" waitEvent="updateComplete"  />
			<RunCode code="application.addLine(application.group1);" waitTarget="group1" waitEvent="updateComplete"  />
			<RunCode code="application.addRect(application.group1);" waitTarget="group1" waitEvent="updateComplete"  />
						
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.dataProvider.length" value="3" />
			<CompareBitmap url="../properties/baselines/datagroup_property_itemRenderer_graphic.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
	
	
<!-- itemRendererFunction -->

	<TestCase testID="DataGroup_property_itemRendererFunction" keywords="[DataGroup, property, dataProvider, itemRendererFunction]" description="check itemRendererFunction renders each item type appropriately">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.itemRendererFunction=application.myItemRendererFunction"  waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(application.mixArr)" waitEvent="updateComplete" waitTarget="group1" />	
			<SetProperty target="group1" propertyName="height" value="152" waitTarget="group1"  waitEvent="updateComplete" />
		</setup>
		<body>
			<CompareBitmap url="../properties/baselines/datagroup_property_itemRendererFunction.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_itemRendererFunction_sendingNulls" keywords="[DataGroup, property, dataProvider, itemRendererFunction]" description="send null for DisplayObjects">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.itemRendererFunction=application.dataGroupItemRendererFunctionSendingNulls"  waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['hello', new mx.controls.Button(), 'world'])" waitEvent="updateComplete" waitTarget="group1" />	
		</setup>
		<body>
			<CompareBitmap url="../properties/baselines/dataGroup_property_itemRendererFunction_sendingNulls.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
		
	<TestCase testID="DataGroup_property_itemRendererFunction_fallThrough" keywords="[DataGroup, property, dataProvider, itemRendererFunction]" description="send null for DisplayObjects">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="itemRenderer" valueExpression="value=new ClassFactory(spark.skins.spark.DefaultItemRenderer);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.itemRendererFunction=application.dataGroupItemRendererFunctionSendingNulls"  waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['hello', new mx.controls.Button(), 'world'])" waitEvent="updateComplete" waitTarget="group1" />	
		</setup>
		<body>
			<CompareBitmap url="../properties/baselines/dataGroup_property_itemRendererFunction_fallThrough.png" target="group1" timeout="2000" />
		</body>
	</TestCase>		

<!-- layout property -->

	<!-- vertical -->

 	<TestCase testID="DataGroup_property_layout_vertical_data" keywords="[DataGroup, property, layout]" description="provide data to vertical layout">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        	<SetProperty target="group1" propertyName="itemRenderer" valueExpression="value= new ClassFactory(DataGroupDefaultItemRenderer)" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty    target="group1" propertyName="layout"  valueExpression="value=new VerticalLayout()"  waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['AAA','BBB','CCC'])}" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="width" value="31" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<CompareBitmap url="../properties/baselines/datagroup_property_layout_vertical_data.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
	
 	<TestCase testID="DataGroup_property_layout_vertical_mix" keywords="[DataGroup, property, layout]" description="provide data and graphics to vertical layout">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="height"  value="276" waitTarget="group1"  waitEvent="updateComplete" />
	        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty  target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['AAA'])}" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<RunCode code="application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1"  />
			<AssertMethodValue method="value=application.group1.dataProvider.addItem('BBB')" valueExpression="value=null" />
			<RunCode code="application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1"  />
			<CompareBitmap url="../properties/baselines/datagroup_property_layout_vertical_mix.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
	
	
	<!-- horizontal -->

 	<TestCase testID="DataGroup_property_layout_horizontal_data" keywords="[DataGroup, property, layout]" description="data in horizontal layout">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        	<SetProperty target="group1" propertyName="itemRenderer" valueExpression="value= new ClassFactory(DataGroupDefaultItemRenderer)" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new HorizontalLayout()"  waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['AAA','BBB','CCC'])}" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="width" value="103" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<CompareBitmap url="../properties/baselines/datagroup_property_layout_horizontal_data.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
	
 	<TestCase testID="DataGroup_property_layout_horizontal_mix" keywords="[DataGroup, property, layout]" description="mix items in horizontal layout">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="width" value="219" waitTarget="group1"  waitEvent="updateComplete" />
        	<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout"  valueExpression="value=new HorizontalLayout()" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['AAA'])}" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<RunCode code="application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1"  />
			<AssertMethodValue method="value=application.group1.dataProvider.addItem('BBB')" valueExpression="value=null" />
			<RunCode code="application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1"  />
			<CompareBitmap url="../properties/baselines/datagroup_property_layout_horizontal_mix.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
		
	<TestCase testID="DataGroup_property_layout_switch" keywords="[DataGroup, property, layout]" description="test switching layouts">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        	<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty    target="group1" propertyName="layout"  valueExpression="value=new VerticalLayout()" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['AAA'])}" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1"  />
			<AssertMethodValue method="value=application.group1.dataProvider.addItem('BBB')" valueExpression="value=null" />
			<RunCode code="application.addRect(application.group1)" waitEvent="updateComplete" waitTarget="group1"  />
		</setup>
		<body>  
			<SetProperty    target="group1" propertyName="layout"  valueExpression="value=new HorizontalLayout()" waitEvent="updateComplete" waitTarget="group1" />
			<CompareBitmap url="../properties/baselines/datagroup_property_layout_switch.png" target="group1" timeout="2000" />			
		</body>
	</TestCase>
	
	

<!-- masking -->

    <TestCase testID="DataGroup_property_mask_alpha_change" keywords="[DataGroup, property, mask, alpha]" description="check that an alpha mask can be changed to clip mask">
      <setup>
		<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['cut_off_string1','cut_off_string2'])" waitTarget="group1"  waitEvent="updateComplete" />
		<RunCode code="application.applyGradientMask(application.group1)" waitTarget="group1" waitEvent="updateComplete"  />
		<SetProperty target="group1" propertyName="maskType" value="alpha" waitTarget="group1" waitEvent="updateComplete" />
      </setup>
      <body>
		<AssertPropertyValue target="group1" propertyName="maskType" value="alpha" />
		<SetProperty target="group1" propertyName="maskType" value="clip" waitTarget="group1" waitEvent="updateComplete" />
		<AssertPropertyValue target="group1" propertyName="maskType" value="clip" />
		<CompareBitmap url="../properties/baselines/datagroup_property_mask_alpha_change.png" target="group1" timeout="2000" />
      </body>
    </TestCase>
  
    <TestCase testID="DataGroup_property_mask_alpha_data" keywords="[DataGroup, property, mask, alpha]" description="check that an alpha mask can be applied to group with data elements">
      <setup>
		<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['cut_off_string','cut_off_string2'])" waitTarget="group1" waitEvent="updateComplete" />
		<RunCode code="application.applyGradientMask(application.group1)" waitTarget="group1" waitEvent="updateComplete"  />
		<SetProperty target="group1" propertyName="maskType" value="alpha" waitTarget="group1" waitEvent="updateComplete" />
      </setup>
      <body>
		<AssertPropertyValue target="group1" propertyName="maskType" value="alpha" />
		<CompareBitmap url="../properties/baselines/datagroup_property_mask_alpha_data.png" target="group1" timeout="2000" />
		
		<SetProperty target="group1" propertyName="maskType" value="clip" waitTarget="group1" waitEvent="updateComplete" />
		<AssertPropertyValue target="group1" propertyName="maskType" value="clip" />
      </body>
    </TestCase>
	
  	<TestCase testID="DataGroup_property_mask_alpha_mix" keywords="[DataGroup, property, mask, alpha]" description="check that an alpha mask can be applied to group with mix elements">
      <setup>
		<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['cut_off_string'])" waitTarget="group1" waitEvent="updateComplete" />
		<RunCode code="application.addCustomRect(application.group1, 50, 50, 0xFF00FF, 0, 0)" waitTarget="group1" waitEvent="updateComplete"  />
		<RunCode code="application.applyGradientMask(application.group1)" waitTarget="group1" waitEvent="updateComplete"  />
		<SetProperty target="group1" propertyName="maskType" value="alpha" waitTarget="group1" waitEvent="updateComplete" />
      </setup>
      <body>
		<AssertPropertyValue target="group1" propertyName="maskType" value="alpha" />
		<CompareBitmap url="../properties/baselines/datagroup_property_mask_alpha_mix.png" target="group1" timeout="2000" />
      </body>
    </TestCase>
  
  	<TestCase testID="DataGroup_property_content_mask" keywords="[DataGroup, property, dataProvider]" description="add a mask to an item of the group">
      <setup>
		<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['GROUP1 CONTENT'])" waitTarget="group1"  waitEvent="updateComplete" />

		<RunCode code="application.createSubgroup(application.group1)" waitTarget="group1" waitEvent="updateComplete" />
		<RunCode code="application.group1.dataProvider.getItemAt(1).layout = new VerticalLayout()" />
		<RunCode code="application.group1.dataProvider.getItemAt(1).itemRendererFunction = application.dataGroupItemRendererFunction" />
		<RunCode code="application.group1.dataProvider.getItemAt(1).dataProvider = new ArrayCollection()" />
			
		<RunCode code="application.group1.dataProvider.getItemAt(1).dataProvider.addItem('1234567890')" />
		<RunCode code="application.group1.dataProvider.getItemAt(1).dataProvider.addItem('0123456789')" />
		<Pause timeout="200" />

		<RunCode code="application.applyMask(application.group1.dataProvider.getItemAt(1))" />
		<Pause timeout="100" />
      </setup>
      <body>

		<CompareBitmap url="../properties/baselines/datagroup_property_content_mask.png" target="group1" timeout="2000" />
      </body>
    </TestCase>

  	<TestCase testID="DataGroup_property_maskType_default" keywords="[DataGroup, property, maskType]" description="check default maskType of a DataGroup">
      <setup>
		<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
      </setup>
      <body>
		<AssertPropertyValue target="group1" propertyName="maskType" valueExpression="value=MaskType.CLIP" />
      </body>
    </TestCase>
	
	<TestCase testID="DataGroup_property_mask_data" keywords="[DataGroup, property, mask]" description="mask over data elements">
      <setup>
		<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection(['XXXXXXXX','YYYYYYYY','ZZZZZZZZ'])" waitEvent="updateComplete" waitTarget="group1" />
      </setup>
      <body>
		<RunCode code="application.applyMask(application.group1)" waitTarget="group1" waitEvent="updateComplete" />	  	
		<AssertMethodValue method="value=application.group1.mask.width" value="50" />
		<AssertPropertyValue target="group1" propertyName="maskType" valueExpression="value=MaskType.CLIP" />
		<CompareBitmap url="../properties/baselines/datagroup_property_mask_data.png" target="group1" timeout="2000" />
      </body>
    </TestCase>
		
	<TestCase testID="DataGroup_property_mask_mix" keywords="[DataGroup, property, mask]" description="mask over a mix of data and graphic elements">
      <setup>
		<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection(['XXXXXXXX'])" waitTarget="group1" waitEvent="updateComplete" />
		<RunCode code="application.addCustomRect(application.group1, 15, 30, 0x123456, 0, 0)" waitTarget="group1" waitEvent="updateComplete" />
      </setup>
      <body>
		<RunCode code="application.applyMask(application.group1)" waitTarget="group1" waitEvent="updateComplete" />	  	
		<AssertMethodValue method="value=application.group1.mask.width" value="50" />
		<AssertPropertyValue target="group1" propertyName="maskType" valueExpression="value=MaskType.CLIP" />
		<CompareBitmap url="../properties/baselines/datagroup_property_mask_mix.png" target="group1" timeout="2000" />
      </body>
    </TestCase>	
	
<!-- numItems property -->
	
    <TestCase testID="DataGroup_property_numItems_empty" keywords="[DataGroup, property, numItems, empty]" description="check numItems in an empty group">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
      </setup>
      <body>
        <AssertMethodValue method="value=application.group1.dataProvider.length" value="0" />
      </body>
    </TestCase>
    <TestCase testID="DataGroup_property_numItems_one_element" keywords="[DataGroup, property, numItems, one]" description="check numItems of group with one item">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection(['string'])" waitEvent="updateComplete" waitTarget="group1" />
      </setup>
      <body>
        <AssertMethodValue method="value=application.group1.dataProvider.length" value="1" />
      </body>
    </TestCase>
    <TestCase testID="DataGroup_property_numItems_many_elements" keywords="[DataGroup, property, numItems, many]" description="check numItems of group with multiple items">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection([0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.0])}" waitEvent="updateComplete" waitTarget="group1" />
      </setup>
      <body>
        <AssertMethodValue method="value=application.group1.dataProvider.length" value="20" />
      </body>
    </TestCase>
	
<!-- numElements property -->

    <TestCase testID="DataGroup_property_numElements_empty" keywords="[DataGroup, property, numElements, empty]" description="group with no items">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
      </setup>
      <body>
        <AssertPropertyValue target="group1" propertyName="numElements" value="0" />
      </body>
    </TestCase>
	
    <TestCase testID="DataGroup_property_numElements_one_element" keywords="[DataGroup, property, numElements, one]" description="group with one item">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection(['string'])" waitEvent="updateComplete" waitTarget="group1" />
      </setup>
      <body>
        <AssertPropertyValue target="group1" propertyName="numElements" value="1" />
      </body>
    </TestCase>
	
    <TestCase testID="DataGroup_property_numElements_many_elements" keywords="[DataGroup, property, numElements, many]" description="group with multiple items">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection([0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.0])}" waitEvent="updateComplete" waitTarget="group1" />
      </setup>
      <body>
        <AssertPropertyValue target="group1" propertyName="numElements" value="20" />
      </body>
    </TestCase>
	
<!-- rotation property 

	- data elements at 0, 45, -315, 360, -360, 3600045, -3600415
	- graphic elements 0, 45, -315, 360, -360, 3600045, -3600415
	- mix of data and graphic elements at 0, 45, -315, 360, -360, 3600045, -3600415
-->

<!-- rotation - data -->

	<TestCase testID="DataGroup_property_rotation_data_0" keywords="[DataGroup, property,rotation]" description="rotate group of data by 0 degrees">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['text,','more text',3.141592,'last text'])}" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="numElements" value="4" />
			<AssertPropertyValue target="group1" propertyName="rotation" value="0" />
			<CompareBitmap url="../properties/baselines/datagroup_property_rotation_data_0.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_rotation_data_45" keywords="[DataGroup, property, rotation]" description="rotate group of data by 45 degrees">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['text,','more text',3.141592,'last text'])}" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			
		</setup>
		<body>
			<SetProperty target="group1" propertyName="rotation" value="45" waitEvent="updateComplete" waitTarget="group1" />
			<AssertPropertyValue target="group1" propertyName="numElements" value="4" /> 
			<AssertPropertyValue target="group1" propertyName="rotation" value="45" />
			
			<CompareBitmap url="../properties/baselines/datagroup_property_rotation_data_45.png" target="" timeout="2000" />
	
		</body>
	</TestCase>

	<TestCase testID="DataGroup_property_rotation_data_minus315" keywords="[DataGroup, property, rotation]" description="rotate group of data by -315 degrees">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['text,','more text',3.141592,'last text'])}" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />	
			
		</setup>
		<body>
			<SetProperty target="group1" propertyName="rotation" value="-315" waitEvent="updateComplete" waitTarget="group1" />
			<AssertPropertyValue target="group1" propertyName="numElements" value="4" /> 
			<AssertPropertyValue target="group1" propertyName="rotation" value="45" />
			
			<CompareBitmap url="../properties/baselines/datagroup_property_rotation_data_45.png" target="" timeout="2000" />
	
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_rotation_data_360" keywords="[DataGroup, property, rotation]" description="rotate group of data by 360 degrees">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['text,','more text',3.141592,'last text'])}" waitTarget="group1" waitEvent="updateComplete" />
						
		</setup>
		<body>
			<SetProperty target="group1" propertyName="rotation" value="360" waitEvent="updateComplete" waitTarget="group1" />
			<AssertPropertyValue target="group1" propertyName="numElements" value="4" /> 
			
			<AssertMethodValue method="value=(application.group1.rotation.toFixed(1)) * -1" valueExpression="value=0" />
			<CompareBitmap url="../properties/baselines/datagroup_property_rotation_data_0.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_rotation_data_minus360" keywords="[DataGroup, property, rotation]" description="rotate group of data by -360 degrees">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['text,','more text',3.141592,'last text'])}" waitTarget="group1" waitEvent="updateComplete" />
						
		</setup>
		<body>
			<SetProperty target="group1" propertyName="rotation" value="-360" waitEvent="updateComplete" waitTarget="group1" />
			<AssertPropertyValue target="group1" propertyName="numElements" value="4" /> 
			<AssertMethodValue method="value=(application.group1.rotation.toFixed(1)) * -1" valueExpression="value=0" />
			
			<CompareBitmap url="../properties/baselines/datagroup_property_rotation_data_0.png" target="group1" timeout="2000" />
	
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_rotation_data_3600045" keywords="[DataGroup, property, rotation]" description="rotate group of data by large amount of degrees">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['text,','more text',3.141592,'last text'])}" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			
		</setup>
		<body>
			<SetProperty target="group1" propertyName="rotation" value="3600045" waitEvent="updateComplete" waitTarget="group1" />
			<AssertPropertyValue target="group1" propertyName="numElements" value="4" /> 
			<AssertPropertyValue target="group1" propertyName="rotation" value="45" />
			
			<CompareBitmap url="../properties/baselines/datagroup_property_rotation_data_45.png" target="" timeout="2000" />
	
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_rotation_data_minus3600315" keywords="[DataGroup, property, rotation]" description="rotate group of data by large amount of negative degrees">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['text,','more text',3.141592,'last text'])}" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			
		</setup>
		<body>
			<SetProperty target="group1" propertyName="rotation" value="-3600315" waitEvent="updateComplete" waitTarget="group1" />
			<AssertPropertyValue target="group1" propertyName="numElements" value="4" /> 
			<AssertPropertyValue target="group1" propertyName="rotation" value="45" />
			
			<CompareBitmap url="../properties/baselines/datagroup_property_rotation_data_45.png" target="" timeout="2000" />
	
		</body>
	</TestCase>	 

<!-- rotation - graphic -->

	<TestCase testID="DataGroup_property_rotation_graphic_0" keywords="[DataGroup, property,rotation]" description="rotate group of graphics by 0 degrees">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		</setup>
		<body>
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />
			<AssertPropertyValue target="group1" propertyName="numElements" value="3" />
			<AssertPropertyValue target="group1" propertyName="rotation" value="0" />
			<CompareBitmap url="../properties/baselines/datagroup_property_rotation_graphic_0.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_rotation_graphic_45" keywords="[DataGroup, property,rotation]" description="rotate group of graphics by 45 degrees">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
       		<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		</setup>
		<body>
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="rotation" value="45" waitTarget="group1" waitEvent="updateComplete" />
			<AssertPropertyValue target="group1" propertyName="numElements" value="3" />
			<AssertPropertyValue target="group1" propertyName="rotation" value="45" />
			<CompareBitmap url="../properties/baselines/datagroup_property_rotation_graphic_45.png" target="" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_rotation_graphic_minus315" keywords="[DataGroup, property,rotation]" description="rotate group of graphics by -315 degrees">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		</setup>
		<body>
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="rotation" value="-315" waitTarget="group1" waitEvent="updateComplete" />
			<AssertPropertyValue target="group1" propertyName="numElements" value="3" />
			<AssertPropertyValue target="group1" propertyName="rotation" value="45" />
			<CompareBitmap url="../properties/baselines/datagroup_property_rotation_graphic_45.png" target="" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_rotation_graphic_360" keywords="[DataGroup, property,rotation]" description="rotate group of graphics by 360 degrees">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		</setup>
		<body>
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />
			
			<AssertMethodValue method="value=(application.group1.rotation.toFixed(1)) * -1" valueExpression="value=0" />
			<AssertPropertyValue target="group1" propertyName="numElements" value="3" />
			<CompareBitmap url="../properties/baselines/datagroup_property_rotation_graphic_0.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
		
	<TestCase testID="DataGroup_property_rotation_graphic_minus360" keywords="[DataGroup, property,rotation]" description="rotate group of graphics by -360 degrees">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		</setup>
		<body>
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="rotation" value="-360" waitTarget="group1" waitEvent="updateComplete" />
			<AssertPropertyValue target="group1" propertyName="numElements" value="3" />
			<AssertMethodValue method="value=(application.group1.rotation.toFixed(1)) * -1" valueExpression="value=0" />
			<CompareBitmap url="../properties/baselines/datagroup_property_rotation_graphic_0.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_rotation_graphic_3600045" keywords="[DataGroup, property,rotation]" description="rotate group of graphics by large amount of degrees">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		</setup>
		<body>
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="rotation" value="3600045" waitTarget="group1" waitEvent="updateComplete" />
			<AssertPropertyValue target="group1" propertyName="numElements" value="3" />
			<AssertPropertyValue target="group1" propertyName="rotation" value="45" />
			<CompareBitmap url="../properties/baselines/datagroup_property_rotation_graphic_45.png" target="" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_rotation_graphic_minus3600315" keywords="[DataGroup, property,rotation]" description="rotate group of graphics by large amount of negative degrees">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		</setup>
		<body>
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="rotation" value="-3600315" waitTarget="group1" waitEvent="updateComplete" />
			<AssertPropertyValue target="group1" propertyName="numElements" value="3" />
			<AssertPropertyValue target="group1" propertyName="rotation" value="45" />
			<CompareBitmap url="../properties/baselines/datagroup_property_rotation_graphic_45.png" target="" timeout="2000" />
		</body>
	</TestCase> 

<!-- rotation - mix -->

	<TestCase testID="DataGroup_property_rotation_mix_0" keywords="[DataGroup, property,rotation]" description="rotate group of mixed items by 0 degrees">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['test','more',3.14159, 'last'])}" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />
			
			<AssertPropertyValue target="group1" propertyName="numElements" value="7" />
			<AssertPropertyValue target="group1" propertyName="rotation" value="0" />
			<CompareBitmap url="../properties/baselines/datagroup_property_rotation_mix_0.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_rotation_mix_45" keywords="[DataGroup, property,rotation]" description="rotate group of mixed items by 45 degrees">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['test','more',3.14159, 'last'])}" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="rotation" value="45" waitEvent="updateComplete" waitTarget="group1" />
			<AssertPropertyValue target="group1" propertyName="numElements" value="7" />
			<AssertPropertyValue target="group1" propertyName="rotation" value="45" />
			<CompareBitmap url="../properties/baselines/datagroup_property_rotation_mix_45.png" target="" timeout="2000" />
		</body>
	</TestCase>
		
	<TestCase testID="DataGroup_property_rotation_mix_minus315" keywords="[DataGroup, property,rotation]" description="rotate group of mixed items by -315 degrees">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['test','more',3.14159, 'last'])}" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="rotation" value="-315" waitEvent="updateComplete" waitTarget="group1" />
			<AssertPropertyValue target="group1" propertyName="numElements" value="7" />
			<AssertPropertyValue target="group1" propertyName="rotation" value="45" />
			<CompareBitmap url="../properties/baselines/datagroup_property_rotation_mix_45.png" target="" timeout="2000" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_rotation_mix_360" keywords="[DataGroup, property,rotation]" description="rotate group of mixed items by 360 degrees">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['test','more',3.14159, 'last'])}" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="rotation" value="360" waitEvent="updateComplete" waitTarget="group1" />
			<AssertPropertyValue target="group1" propertyName="numElements" value="7" />
			<AssertMethodValue method="value=(application.group1.rotation.toFixed(1)) * -1" valueExpression="value=0" />
			<CompareBitmap url="../properties/baselines/datagroup_property_rotation_mix_0.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_rotation_mix_minus360" keywords="[DataGroup, property,rotation]" description="rotate group of mixed items by -360 degrees">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['test','more',3.14159, 'last'])}" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="rotation" value="-360" waitEvent="updateComplete" waitTarget="group1" />
			<AssertPropertyValue target="group1" propertyName="numElements" value="7" />
			<AssertMethodValue method="value=(application.group1.rotation.toFixed(1)) * -1" valueExpression="value=0" />
			<CompareBitmap url="../properties/baselines/datagroup_property_rotation_mix_0.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_rotation_mix_3600045" keywords="[DataGroup, property,rotation]" description="rotate group of mixed items by large amount of degrees">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['test','more',3.14159, 'last'])}" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="rotation" value="3600045" waitEvent="updateComplete" waitTarget="group1" />
			<AssertPropertyValue target="group1" propertyName="numElements" value="7" />
			<AssertPropertyValue target="group1" propertyName="rotation" value="45" />
			<CompareBitmap url="../properties/baselines/datagroup_property_rotation_mix_45.png" target="" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_rotation_mix_minus3600315" keywords="[DataGroup, property,rotation]" description="rotate group of mixed items by large amount of negative degrees">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['test','more',3.14159, 'last'])}" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="rotation" value="-3600315" waitEvent="updateComplete" waitTarget="group1" />
			<AssertPropertyValue target="group1" propertyName="numElements" value="7" />
			<AssertPropertyValue target="group1" propertyName="rotation" value="45" />
			<CompareBitmap url="../properties/baselines/datagroup_property_rotation_mix_45.png" target="" timeout="2000" />
		</body>
	</TestCase>	
	
	
	

<!-- scaleX, scaleY properties -->
<!-- 
	- data elements at 0, 0.5, 1, 2
	- graphic elements at 0, 0.5, 1, 2
	- mix elements at 0, 0.5, 1, 2
	- negative values: garbage in/garbage out
-->
		

<!-- scaleX - data -->
				
	<TestCase testID="DataGroup_property_scaleX_data_default" keywords="[DataGroup, property,scaleX]" description="check default scaleX value">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['test','more',3.14159, 'last'])}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width" value="100" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="1" />
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleX_data_default.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_scaleX_data_0" keywords="[DataGroup, property,scaleX]" description="check scaling group with data items width to 0">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['test','more',3.14159, 'last'])}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width" value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="scaleX" value="0" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="0" />
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_scaleX_data_0decimal5" keywords="[DataGroup, property,scaleX]" description="check scaling group with data items width to 0.5">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['test','more',3.14159, 'last'])}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width" value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="scaleX" value="0.5" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="0.5" />
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleX_data_0decimal5.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_scaleX_data_2" keywords="[DataGroup, property,scaleX]" description="check scaling group with data items width to 2">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['test','more',3.14159, 'last'])}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width" value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="scaleX" value="2" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="2" />
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleX_data_2.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
		
<!-- scaleX - graphics -->
				
	<TestCase testID="DataGroup_property_scaleX_graphics_0" keywords="[DataGroup, property,scaleX, graphics]" description="check scaling group with graphic items width to 0">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
       		<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />

			<SetProperty target="group1" propertyName="scaleX" value="0" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="0" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_scaleX_graphics_0decimal5" keywords="[DataGroup, property,scaleX]" description="scale group with graphic content by 0.5">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
       		<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />

			<SetProperty target="group1" propertyName="scaleX" value="0.5" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="0.5" />	
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleX_graphics_0decimal5.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	

	<TestCase testID="DataGroup_property_scaleX_graphics_1" keywords="[DataGroup, property,scaleX]" description="check scaling group with graphic items width to 1">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />

		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="1" />	
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleX_graphics_1.png" target="" timeout="2000" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_scaleX_graphics_2" keywords="[DataGroup, property,scaleX]" description="scale group with graphic content by 2">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />
		
			<SetProperty target="group1" propertyName="scaleX" value="2" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="2" />		
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleX_graphics_2.png" target="group1" timeout="2000" />
		</body>
	</TestCase>


<!-- scaleX - mix -->

	<TestCase testID="DataGroup_property_scaleX_mix_0" keywords="[DataGroup, property,scaleX]" description="check scaling group with mixed items width to 0">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['abc', 3.14159, 'xyz'])}" waitTarget="group1" waitEvent="updateComplete" />
		
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />

			<SetProperty target="group1" propertyName="scaleX" value="0" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="0" />	
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_scaleX_mix_0decimal5" keywords="[DataGroup, property,scaleX]" description="scale group with mixed content by 0.5">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        	<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        	<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['abc', 3.14159, 'xyz'])}" waitTarget="group1" waitEvent="updateComplete" />
					
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />

			<SetProperty target="group1" propertyName="scaleX" value="0.5" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="0.5" />	
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleX_mix_0decimal5.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
		
	<TestCase testID="DataGroup_property_scaleX_mix_1" keywords="[DataGroup, property,scaleX]" description="check scaling group with mixed items width to 1">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['abc', 3.14159, 'xyz'])}" waitTarget="group1" waitEvent="updateComplete" />
					
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />

		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="1" />		
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleX_mix_1.png" target="" timeout="2000" />
		</body>
	</TestCase>		
	
	<TestCase testID="DataGroup_property_scaleX_mix_2" keywords="[DataGroup, property,scaleX]" description="scale group with mixed content by 2">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="width"  value="50" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['abc', 3.14159, 'xyz'])}" waitTarget="group1" waitEvent="updateComplete" />
		
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />

			<SetProperty target="group1" propertyName="scaleX" value="2" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="2" />
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleX_mix_2.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
	
	
	
<!-- scaleXY - data -->
		
	<TestCase testID="DataGroup_property_scaleXY_data_0_0" keywords="[DataGroup, property,scaleXY]" description="scale data group to zero in both directions">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
       	 	<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        	<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="160" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="160" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['abc', 3.14159, 'xyz'])}" waitTarget="group1" waitEvent="updateComplete" />
		
			<SetProperty target="group1" propertyName="scaleX" value="0" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="scaleY" value="0" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="0" />
			<AssertPropertyValue target="group1" propertyName="scaleY" value="0" />		
		</body>
	</TestCase>

	<TestCase testID="DataGroup_property_scaleXY_data_1_1" keywords="[DataGroup, property,scaleXY]" description="normal scale of a data group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        	<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        	<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="160" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="160" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['abc', 3.14159, 'xyz'])}" waitTarget="group1" waitEvent="updateComplete" />
		
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="1" />
			<AssertPropertyValue target="group1" propertyName="scaleY" value="1" />		
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleXY_data_1_1.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_scaleXY_data_decimal5_decimal5" keywords="[DataGroup, property,scaleXY]" description="uniform scale data group by half">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        	<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        	<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="160" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="160" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['abc', 3.14159, 'xyz'])}" waitTarget="group1" waitEvent="updateComplete" />
		
			<SetProperty target="group1" propertyName="scaleX" value="0.5" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="scaleY" value="0.5" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="0.5" />
			<AssertPropertyValue target="group1" propertyName="scaleY" value="0.5" />	
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleXY_data_decimal5_decimal5.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_scaleXY_data_decimal5_2" keywords="[DataGroup, property,scaleXY]" description="non-uniform scaling of a data group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
    	    <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="160" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="160" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['abc', 3.14159, 'xyz'])}" waitTarget="group1" waitEvent="updateComplete" />
		
			<SetProperty target="group1" propertyName="scaleX" value="0.5" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="scaleY" value="2" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="0.5" />
			<AssertPropertyValue target="group1" propertyName="scaleY" value="2" />		
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleXY_data_decimal5_2.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_scaleXY_data_2_decimal5" keywords="[DataGroup, property,scaleXY]" description="non-uniform scaling of a data group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        	<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        	<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="160" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="160" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['abc', 3.14159, 'xyz'])}" waitTarget="group1" waitEvent="updateComplete" />
		
			<SetProperty target="group1" propertyName="scaleX" value="2" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="scaleY" value="0.5" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="2" />
			<AssertPropertyValue target="group1" propertyName="scaleY" value="0.5" />
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleXY_data_2_decimal5.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_scaleXY_data_2_2" keywords="[DataGroup, property,scaleXY]" description="uniform scaling of data group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
       	 	<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        	<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="160" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="160" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['abc', 3.14159, 'xyz'])}" waitTarget="group1" waitEvent="updateComplete" />
		
			<SetProperty target="group1" propertyName="scaleX" value="2" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="scaleY" value="2" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="2" />
			<AssertPropertyValue target="group1" propertyName="scaleY" value="2" />		
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleXY_data_2_2.png" target="group1" timeout="2000" />
		</body>
	</TestCase>

<!-- scaleXY - graphics -->
	
	<TestCase testID="DataGroup_property_scaleXY_graphics_0_0" keywords="[DataGroup, property,scaleXY]" description="scale group to zero width and height">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        	<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="scaleX" value="0" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="scaleY" value="0" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="0" />
			<AssertPropertyValue target="group1" propertyName="scaleY" value="0" />	
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_scaleXY_graphics_1_1" keywords="[DataGroup, property,scaleXY]" description="normal scale of graphics group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
       		<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="1" />
			<AssertPropertyValue target="group1" propertyName="scaleY" value="1" />		
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleXY_graphics_1_1.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_scaleXY_graphics_decimal5_decimal5" keywords="[DataGroup, property,scaleXY]" description="uniform scaling of graphic item group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        	<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="scaleX" value="0.5" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="scaleY" value="0.5" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="0.5" />
			<AssertPropertyValue target="group1" propertyName="scaleY" value="0.5" />	
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleXY_graphics_decimal5_decimal5.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_scaleXY_graphics_decimal5_2" keywords="[DataGroup, property,scaleXY]" description="non-uniform scaling of graphic item group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        	<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="scaleX" value="0.5" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="scaleY" value="2" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="0.5" />
			<AssertPropertyValue target="group1" propertyName="scaleY" value="2" />		
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleXY_graphics_decimal5_2.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_scaleXY_graphics_2_decimal5" keywords="[DataGroup, property,scaleXY]" description="non-uniform scaling of graphic item group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
					
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="scaleX" value="2" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="scaleY" value="0.5" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="2" />
			<AssertPropertyValue target="group1" propertyName="scaleY" value="0.5" />	
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleXY_graphics_2_decimal5.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_scaleXY_graphics_2_2" keywords="[DataGroup, property,scaleXY]" description="uniform scaling of graphic item group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
		
			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="scaleX" value="2" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="scaleY" value="2" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="2" />
			<AssertPropertyValue target="group1" propertyName="scaleY" value="2" />		
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleXY_graphics_2_2.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
	
<!-- scaleXY - mix -->
	
	<TestCase testID="DataGroup_property_scaleXY_mix_0_0" keywords="[DataGroup, property,scaleXY]" description="uniform scaling of mixed item group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['abc', 3.14159])}" waitTarget="group1" waitEvent="updateComplete" />
		
			<RunCode code="application.addEllipseAt(application.group1, 1);" waitEvent="updateComplete" waitTarget="group1" />

			<SetProperty target="group1" propertyName="scaleX" value="0" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="scaleY" value="0" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="0" />
			<AssertPropertyValue target="group1" propertyName="scaleY" value="0" />		
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_scaleXY_mix_decimal5_decimal5" keywords="[DataGroup, property,scaleXY]" description="uniform scaling of mixed item group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['abc', 3.14159])}" waitTarget="group1" waitEvent="updateComplete" />
		
			<RunCode code="application.addEllipseAt(application.group1, 1);" waitEvent="updateComplete" waitTarget="group1" />

			<SetProperty target="group1" propertyName="scaleX" value="0.5" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="scaleY" value="0.5" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="0.5" />
			<AssertPropertyValue target="group1" propertyName="scaleY" value="0.5" />	
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleXY_mix_decimal5_decimal5.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_scaleXY_mix_1_1" keywords="[DataGroup, property,scaleXY]" description="uniform scaling of mixed item group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['abc', 3.14159])}" waitTarget="group1" waitEvent="updateComplete" />
		
			<RunCode code="application.addEllipseAt(application.group1, 1);" waitEvent="updateComplete" waitTarget="group1" />

		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="1" />
			<AssertPropertyValue target="group1" propertyName="scaleY" value="1" />	
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleXY_mix_1_1.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_scaleXY_mix_decimal5_2" keywords="[DataGroup, property,scaleXY]" description="non-uniform scaling of mixed item group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['abc', 3.14159])}" waitTarget="group1" waitEvent="updateComplete" />
		
			<RunCode code="application.addEllipseAt(application.group1, 1);" waitEvent="updateComplete" waitTarget="group1" />

			<SetProperty target="group1" propertyName="scaleX" value="0.5" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="scaleY" value="2" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="0.5" />
			<AssertPropertyValue target="group1" propertyName="scaleY" value="2" />	
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleXY_mix_decimal5_2.png" target="group1" timeout="2000" />
		</body>
	</TestCase>

	<TestCase testID="DataGroup_property_scaleXY_mix_2_decimal5" keywords="[DataGroup, property,scaleXY]" description="non-uniform scaling of mixed item group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['abc', 3.14159])}" waitTarget="group1" waitEvent="updateComplete" />
		
			<RunCode code="application.addEllipseAt(application.group1, 1);" waitEvent="updateComplete" waitTarget="group1" />

			<SetProperty target="group1" propertyName="scaleX" value="2" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="scaleY" value="0.5" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="2" />
			<AssertPropertyValue target="group1" propertyName="scaleY" value="0.5" />	
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleXY_mix_2_decimal5.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_scaleXY_mix_2_2" keywords="[DataGroup, property,scaleXY]" description="uniform scaling of mixed item group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['abc', 3.14159])}" waitTarget="group1" waitEvent="updateComplete" />
		
			<RunCode code="application.addEllipseAt(application.group1, 1);" waitEvent="updateComplete" waitTarget="group1" />

			<SetProperty target="group1" propertyName="scaleX" value="2" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="scaleY" value="2" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleX" value="2" />
			<AssertPropertyValue target="group1" propertyName="scaleY" value="2" />		
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleXY_mix_2_2.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	
	
	
	
<!-- scaleY - data -->
	
	<TestCase testID="DataGroup_property_scaleY_data_0" keywords="[DataGroup, property,scaleY]" description="check scale Y of 0 for data items">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['test','more',3.14159, 'last'])}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="scaleY" value="0" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleY" value="0" />
		</body>
	</TestCase>

	<TestCase testID="DataGroup_property_scaleY_data_1" keywords="[DataGroup, property,scaleY]" description="default case">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['test','more',3.14159, 'last'])}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="100" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleY" value="1" />
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleY_data_1.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	

	<TestCase testID="DataGroup_property_scaleY_data_0decimal5" keywords="[DataGroup, property,scaleY]" description="check scaleY of 0.5 for data items">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['test','more',3.14159, 'last'])}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="scaleY" value="0.5" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleY" value="0.5" />
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleY_data_0decimal5.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_scaleY_data_2" keywords="[DataGroup, property,scaleY]" description="check scaleY of 2 for data items">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['test','more',3.14159, 'last'])}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="scaleY" value="2" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleY" value="2" />
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleY_data_2.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	
<!-- scaleY - graphics -->
	
	<TestCase testID="DataGroup_property_scaleY_graphics_0" keywords="[DataGroup, property,scaleY]" description="check scale Y of 0 for graphic items">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
					
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="scaleY" value="0" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleY" value="0" />
		</body>
	</TestCase>	
		
	<TestCase testID="DataGroup_property_scaleY_graphics_0decimal5" keywords="[DataGroup, property,scaleY]" description="check scale Y of 0.5 for graphic items">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
					
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="scaleY" value="0.5" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleY" value="0.5" />
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleY_graphics_0decimal5.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
		
	<TestCase testID="DataGroup_property_scaleY_graphics_1" keywords="[DataGroup, property,scaleY]" description="check default scaleY">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
					
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleY" value="1" />
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleY_graphics_1.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_scaleY_graphics_2" keywords="[DataGroup, property,scaleY]" description="check scale Y of 2 for graphic items">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
					
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="scaleY" value="2" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleY" value="2" />
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleY_graphics_2.png" target="group1" timeout="2000" />
		</body>
	</TestCase>

<!-- scaleY - mix -->

	<TestCase testID="DataGroup_property_scaleY_mix_0" keywords="[DataGroup, property,scaleX]" description="check scale Y of 0 for mixed items">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
					
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['abc', 3.1415])}" waitTarget="group1" waitEvent="updateComplete" />
		
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1"  />

			<SetProperty target="group1" propertyName="scaleY" value="0" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleY" value="0" />	
		</body>
	</TestCase>

	<TestCase testID="DataGroup_property_scaleY_mix_0decimal5" keywords="[DataGroup, property,scaleX]" description="check scale Y of 0.5 for mixed items">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
					
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['abc', 3.1415])}" waitTarget="group1" waitEvent="updateComplete" />
		
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1"  />

			<SetProperty target="group1" propertyName="scaleY" value="0.5" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleY" value="0.5" />
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleY_mix_0decimal5.png" target="group1" timeout="2000" />
		</body>
	</TestCase>

	<TestCase testID="DataGroup_property_scaleY_mix_1" keywords="[DataGroup, property,scaleX]" description="default">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
					
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['abc', 3.1415])}" waitTarget="group1" waitEvent="updateComplete" />
		
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1"  />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleY" value="1" />		
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleY_mix_1.png" target="group1" timeout="2000" />
		</body>
	</TestCase>

	<TestCase testID="DataGroup_property_scaleY_mix_2" keywords="[DataGroup, property,scaleX]" description="check scale Y of 2 for mixed items">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="x"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
					
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['abc', 3.1415])}" waitTarget="group1" waitEvent="updateComplete" />
		
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1"  />

			<SetProperty target="group1" propertyName="scaleY" value="2" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="scaleY" value="2" />	
			<CompareBitmap url="../properties/baselines/datagroup_property_scaleY_mix_2.png" target="group1" timeout="2000" />
		</body>
	</TestCase>

<!-- transform property -->	
				
	<TestCase testID="DataGroup_property_transform_skew_mix" keywords="[DataGroup, property,transform]" description="skew a mixed item group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
				
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />

			<RunCode code="application.group1.dataProvider.addItem('data element');" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1"  />
			
			<RunCode code="application.skewGroup(application.group1);"  />
			<Pause timeout="50" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.transform.matrix.c" value="1" />
			<CompareBitmap url="../properties/baselines/datagroup_property_transform_skew_mix.png" target="" timeout="2000" numColorVariances="5" maxColorVariance="20" />
		</body>
	</TestCase>

	<TestCase testID="DataGroup_property_transform_skew_data" keywords="[DataGroup, property,transform]" description="skew a data item group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
						
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['data element',3.141592,'test'])}" waitTarget="group1"  waitEvent="updateComplete" />

			<RunCode code="application.skewGroup(application.group1);"  />
			<Pause timeout="50" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.transform.matrix.c" value="1" />
			<CompareBitmap url="../properties/baselines/datagroup_property_transform_skew_data.png" target="" timeout="2000" numColorVariances="5" maxColorVariance="20" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_transform_skew_graphics" keywords="[DataGroup, property,transform]" description="skew a graphic item group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        	<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="100" waitTarget="group1" waitEvent="updateComplete" />

			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addEllipseAt(application.group1,2);" waitEvent="updateComplete" waitTarget="group1"  />

			<RunCode code="application.skewGroup(application.group1);"  />
			<Pause timeout="50" />
			
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.transform.matrix.c" value="1" />
			<CompareBitmap url="../properties/baselines/datagroup_property_transform_skew_graphics.png" target="" timeout="2000" numColorVariances="5" maxColorVariance="20" />
		</body>
	</TestCase>

	
	<TestCase testID="DataGroup_property_transform_color_mix" keywords="[DataGroup, property,transform]" description="color transform a mixed item group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
										
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />

			<RunCode code="application.group1.dataProvider.addItem('data element');" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1"  />
			
			<RunCode code="application.colorTransform(application.group1);"  />
			<Pause timeout="50" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.transform.colorTransform.redOffset" value="100" />
			<AssertMethodValue method="value=application.group1.transform.colorTransform.blueOffset" value="100" />
			<CompareBitmap url="../properties/baselines/datagroup_property_transform_color_mix.png" target="group1" timeout="2000" numColorVariances="5" maxColorVariance="20" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_transform_color_data" keywords="[DataGroup, property,transform]" description="color transform a data item group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        	<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        	<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
	
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['test data',3.14159,'data element'])}" waitTarget="group1"  waitEvent="updateComplete" />

			<RunCode code="application.colorTransform(application.group1);"  />
			<Pause timeout="50" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.transform.colorTransform.redOffset" value="100" />
			<AssertMethodValue method="value=application.group1.transform.colorTransform.blueOffset" value="100" />
			<CompareBitmap url="../properties/baselines/datagroup_property_transform_color_data.png" target="group1" timeout="2000" numColorVariances="5" maxColorVariance="20" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_transform_color_graphics" keywords="[DataGroup, property,transform]" description="color transform a graphics item group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
				
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />

			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addEllipseAt(application.group1,2);" waitEvent="updateComplete" waitTarget="group1"  />
			
			<RunCode code="application.colorTransform(application.group1);"  />
			<Pause timeout="50" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.transform.colorTransform.redOffset" value="100" />
			<AssertMethodValue method="value=application.group1.transform.colorTransform.blueOffset" value="100" />
			<CompareBitmap url="../properties/baselines/datagroup_property_transform_color_graphics.png" target="group1" timeout="2000" numColorVariances="5" maxColorVariance="20" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_transform_rotate_data" keywords="[DataGroup, property,transform]" description="rotate transform a data item group">
		<setup>

			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
       	 	<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
       	 	<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['test','more',3.14159,'last'])}" waitEvent="updateComplete" waitTarget="group1" />

			<RunCode code="application.rotateTransform(application.group1, -45);"  />
			<Pause timeout="50" />
		</setup>
		<body>
			<CompareBitmap url="../properties/baselines/datagroup_property_transform_rotate_data.png" target="" timeout="2000" numColorVariances="5" maxColorVariance="20" />		
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_transform_rotate_graphics" keywords="[DataGroup, property,transform]" description="rotate transform a graphics item group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        	<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        	<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />
			
			<RunCode code="application.rotateTransform(application.group1, -45);"  />
			<Pause timeout="50" />
		</setup>
		<body>
			<CompareBitmap url="../properties/baselines/datagroup_property_transform_rotate_graphics.png" target="" timeout="2000" numColorVariances="5" maxColorVariance="20" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_transform_rotate_mix" keywords="[DataGroup, property,transform]" description="rotate transform a mixed item group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['test','more'])}" waitEvent="updateComplete" waitTarget="group1" />
			
			<RunCode code="application.addLine(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addRect(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addEllipseAt(application.group1, 2);" waitEvent="updateComplete" waitTarget="group1" />
			
			<RunCode code="application.rotateTransform(application.group1, -45);"  />
			<Pause timeout="50" />
		</setup>
		<body>
			<CompareBitmap url="../properties/baselines/datagroup_property_transform_rotate_mix.png" target="" timeout="2000" numColorVariances="5" maxColorVariance="20" />
		</body>
	</TestCase>
	
  	<TestCase testID="DataGroup_property_transform_direct" keywords="[DataGroup, property,transform]" description="check that you can set the transform property directly">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />

			<RunCode code="application.group1.dataProvider.addItem('data element');" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addCustomRect(application.group1, 15, 30, 0x123456, 0, 0);" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.group1.dataProvider.addItem(3.141592);" waitEvent="updateComplete" waitTarget="group1"  />
			
			<RunCode code="application.skewGroupViaTransform(application.group1);"  />
			<Pause timeout="50" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.transform.matrix.c" value="1" />
			<CompareBitmap url="../properties/baselines/datagroup_property_transform_direct.png" target="" timeout="2000" numColorVariances="5" maxColorVariance="20" />
		</body>
	</TestCase>
	
<!-- transformX, transformY properties -->

	<TestCase testID="DataGroup_property_transformXY_default" keywords="[DataGroup, property,transformX,transformY]" description="check default transformX and transformY properties">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="transformX" value="0" />
			<AssertPropertyValue target="group1" propertyName="transformY" value="0" />
		</body>
	</TestCase>	

	<TestCase testID="DataGroup_property_transformXY_origin" keywords="[DataGroup, property,transform]" description="set transform position to the origin of a DataGroup">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width" value="200" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="200" waitEvent="updateComplete" />
			
			<RunCode code="application.createSubgroup(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).x = 100" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).y = 100" />
			<Pause timeout="100" />
			
			<RunCode code="application.addCustomRect(application.group1.dataProvider.getItemAt(0), 50, 50, 0xFF0000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).rotation = 45;" waitTarget="group1" waitEvent="updateComplete" />
			
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).rotation" value="45" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).transformX" value="0" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).transformY" value="0" />								
			<CompareBitmap url="../properties/baselines/datagroup_property_transformXY_origin.png" target="" timeout="2000" />		
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_transformXY_middle" keywords="[DataGroup, property,transform]" description="set transform position to the center of a DataGroup">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width" value="200" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="200" waitEvent="updateComplete" />
			
			<RunCode code="application.createSubgroup(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).x = 100" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).y = 100" />
			<Pause timeout="100" />
			
			<RunCode code="application.addCustomRect(application.group1.dataProvider.getItemAt(0), 50, 50, 0xFF0000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).transformX = 25;" /><!-- waitTarget="group1" waitEvent="updateComplete"  -->
			<RunCode code="application.group1.dataProvider.getItemAt(0).transformY = 25;"  /><!-- waitTarget="group1" waitEvent="updateComplete" -->
			<RunCode code="application.group1.dataProvider.getItemAt(0).rotation = 45;"  /><!-- waitTarget="group1" waitEvent="updateComplete" -->
			<Pause timeout="200" />
		</setup>
		<body>		
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).rotation" value="45" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).transformX" value="25" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).transformY" value="25" />			
			<CompareBitmap url="../properties/baselines/datagroup_property_transformXY_middle.png" target="" timeout="2000" />		
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_transformXY_corner" keywords="[DataGroup, property,transform]" description="set transform position to the bottom right corner of a DataGroup">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width" value="200" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="200" waitEvent="updateComplete" />
			
			<RunCode code="application.createSubgroup(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).x = 100" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).y = 100" />
			<Pause timeout="100" />
			
			<RunCode code="application.addCustomRect(application.group1.dataProvider.getItemAt(0), 50, 50, 0xFF0000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).transformX = 50;" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).transformY = 50;" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).rotation = 45;" />
			<Pause timeout="50" />
			
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).rotation" value="45" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).transformX" value="50" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).transformY" value="50" />		
			<CompareBitmap url="../properties/baselines/datagroup_property_transformXY_corner.png" target="" timeout="2000" />		
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_transformXY_negative" keywords="[DataGroup, property,transform]" description="set transform position to a negative position relative to the DataGroup">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width" value="200" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="200" waitEvent="updateComplete" />
			
			<RunCode code="application.createSubgroup(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).x = 100" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).y = 100" />
			<Pause timeout="100" />
			
			<RunCode code="application.addCustomRect(application.group1.dataProvider.getItemAt(0), 50, 50, 0xFF0000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).transformX = -100;" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).transformY = -100;" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).rotation = 45;" />
			<Pause timeout="50" />
			
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).rotation" value="45" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).transformX" value="-100" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).transformY" value="-100" />		
			<CompareBitmap url="../properties/baselines/datagroup_property_transformXY_negative.png" target="" timeout="2000" numColorVariances="6" ignoreMaxColorVariance="true"/>		
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_transformXY_extend" keywords="[DataGroup, property,transform]" description="set transform position to a position farther than datagroup bounds">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width" value="200" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="200" waitEvent="updateComplete" />
			
			<RunCode code="application.createSubgroup(application.group1);" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).x = 100" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).y = 100" />
			<Pause timeout="100" />
			
			<RunCode code="application.addCustomRect(application.group1.dataProvider.getItemAt(0), 50, 50, 0xFF0000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).transformX = 100;" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).transformY = 100;" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).rotation = 45;" />
			<Pause timeout="50" />
			
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).rotation" value="45" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).transformX" value="100" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).transformY" value="100" />			
			<CompareBitmap url="../properties/baselines/datagroup_property_transformXY_extend.png" target="" timeout="2000" />		
		</body>
	</TestCase>	
	
<!-- width / height properties

	+ should size to content if no width/height defined
	
	-->

	<TestCase testID="DataGroup_property_width_height" keywords="[DataGroup, property, width, height]" description="check width/height is correct when it must size to its items">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        	<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 60, 60, 0xFF0000, 0, 0);" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addCustomRect(application.group1, 60, 60, 0xFF0000, 100, 10);" waitEvent="updateComplete" waitTarget="group1"  />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="width" value="160" />	
			<AssertPropertyValue target="group1" propertyName="height" value="70" />	
		</body>
	</TestCase>
	
	
<!-- x,y properties -->

	<TestCase testID="DataGroup_property_xy_0_0" keywords="[DataGroup, property,scaleX]" description="check x,y at origin">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        	<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width" value="1" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="1" waitTarget="group1" waitEvent="updateComplete" />
		
			<RunCode code="application.addCustomRect(application.group1, 1, 1, 0xFF0000);" waitEvent="updateComplete" waitTarget="group1"  />

		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="width" value="1" />	
			<AssertPropertyValue target="group1" propertyName="height" value="1" />	
			<AssertPropertyValue target="group1" propertyName="x" value="0" />	
			<AssertPropertyValue target="group1" propertyName="y" value="0" />	
			
			<AssertPixelValue value="0xFF0000" x="0" y="0" target="" />
			<AssertPixelValue value="0xFFFFFF" x="1" y="0" target="" />
			<AssertPixelValue value="0xFFFFFF" x="0" y="1" target="" />
			<AssertPixelValue value="0xFFFFFF" x="1" y="1" target="" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_xy_100_100" keywords="[DataGroup, property,scaleX]" description="setting x,y to other than zero shouldnt do anything since not basic layout">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        	<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width" value="1"  waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="1" waitTarget="group1" waitEvent="updateComplete" />
		
			<RunCode code="application.addCustomRect(application.group1, 1, 1, 0xFF0000);" waitEvent="updateComplete" waitTarget="group1"  />

			<SetProperty target="group1" propertyName="x" value="100" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="y" value="100" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="width" value="1" />	
			<AssertPropertyValue target="group1" propertyName="height" value="1" />	
			<AssertPropertyValue target="group1" propertyName="x" value="0" />	
			<AssertPropertyValue target="group1" propertyName="y" value="0" />	
			
			<AssertPixelValue value="0xFF0000" x="0" y="0" target="" />
			<AssertPixelValue value="0xFFFFFF" x="1" y="0" target="" />
			<AssertPixelValue value="0xFFFFFF" x="0" y="1" target="" />
			<AssertPixelValue value="0xFFFFFF" x="1" y="1" target="" />
			
		</body>
	</TestCase>
	
	
	<TestCase testID="DataGroup_property_xy_rotate" keywords="[DataGroup, property,scaleX]" description="check x,y doesnt change on rotate">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="rotation" value="-45" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertPropertyValue target="group1" propertyName="x" value="0" />	
			<AssertPropertyValue target="group1" propertyName="y" value="0" />
		</body>
	</TestCase>
	
	
	<TestCase testID="DataGroup_property_xy_scaleX" keywords="[DataGroup, property,scaleX]" description="check x,y doesnt change on scale">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
	
			<RunCode code="application.createSubgroup(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).x = 100" /><Pause timeout="100" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).y = 100" /><Pause timeout="100" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).scaleX = 2" /><Pause timeout="100" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).x" value="100" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).y" value="100" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_xy_scaleY" keywords="[DataGroup, property,scaleX]" description="check x,y doesnt change on scale">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
	
			<RunCode code="application.createSubgroup(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).x = 100" /><Pause timeout="100" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).y = 100" /><Pause timeout="100" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).scaleY = 2" /><Pause timeout="100" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).x" value="100" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).y" value="100" />
		</body>
	</TestCase>	

	<TestCase testID="DataGroup_property_xy_scaleXY" keywords="[DataGroup, property,scaleX]" description="check x,y doesnt change on scale">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
	
			<RunCode code="application.createSubgroup(application.group1)" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).x = 100" /><Pause timeout="100" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).y = 100" /><Pause timeout="100" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).scaleX = 2" /><Pause timeout="100" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).scaleY = 2" /><Pause timeout="100" />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).x" value="100" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).y" value="100" />
		</body>
	</TestCase>
	
	
 	<TestCase testID="DataGroup_property_content_ArrayCollection_change" keywords="[DataGroup, property, dataProvider]" description="switch content between ArrayCollections and confirm result">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />	
			<RunCode code="application.setContentToArrayCollection(application.group1, application.mixArr);" waitTarget="group1" waitEvent="updateComplete"  />
			<RunCode code="application.setContentToArrayCollection(application.group1, application.abcArr);" waitTarget="group1" waitEvent="updateComplete"  />
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.dataProvider.length" value="28" />
		</body>
	</TestCase>
	
 	<TestCase testID="DataGroup_property_layout_get" keywords="[DataGroup, property, layout]" description="check that layout defaults to basic layout">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
		</setup>
		<body>
			<AssertMethodValue target="group1" method="value=application.group1.layout.toString()" valueExpression="value='[object BasicLayout]'" />
		</body>
	</TestCase>

<!-- 

duplicate items

+ check duplicate items work when
	+ itemRenderer is defined
	+ itemRendererFumction is defined
	+ adding duplicate items
	+ removing a duplicate item
	
-->

    <TestCase testID="DataGroup_property_duplicates_itemRenderer" keywords="[DataGroup, property, content, duplicate]" description="duplicates using itemRenderer">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.itemRenderer=new ClassFactory(comps.DataGroupDefaultItemRenderer)" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection(['aaa','aaa','aaa','aaa'])" waitTarget="group1" waitEvent="updateComplete" />
	   	</setup>
    	<body>
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0)" value="aaa" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(1)" value="aaa" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(2)" value="aaa" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(3)" value="aaa" />	
			<CompareBitmap url="../properties/baselines/datagroup_property_duplicates_itemRenderer.png" target="group1" timeout="2000" />
		</body>
    </TestCase>
	
    <TestCase testID="DataGroup_property_duplicates_itemRendererFunction" keywords="[DataGroup, property, content, duplicate]" description="duplicates using an itemRendererFunction">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
	        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection(['aaa','aaa','aaa','aaa'])" waitTarget="group1" waitEvent="updateComplete" />
	   	</setup>
    	<body>
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0)" value="aaa" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(1)" value="aaa" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(2)" value="aaa" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(3)" value="aaa" />	
			<CompareBitmap url="../properties/baselines/datagroup_property_duplicates_itemRendererFunction.png" target="group1" timeout="2000" />
		</body>
    </TestCase>
	
    <TestCase testID="DataGroup_property_duplicates_adding" keywords="[DataGroup, property, content, duplicate]" description="add duplicate items">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="width"  value="28" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
	        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection(['aaa','aaa','bbb','bbb'])" waitTarget="group1" waitEvent="updateComplete" />
	   	</setup>
    	<body>
			<RunCode code="application.group1.dataProvider.addItemAt('bbb', 0);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.dataProvider.addItemAt('aaa', 4);" waitTarget="group1" waitEvent="updateComplete" />
		
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0)" value="bbb" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(1)" value="aaa" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(2)" value="aaa" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(3)" value="bbb" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(4)" value="aaa" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(5)" value="bbb" />	
			<CompareBitmap url="../properties/baselines/datagroup_property_duplicates_adding.png" target="group1" timeout="2000" />
		</body>
    </TestCase>
	
    <TestCase testID="DataGroup_property_duplicates_removing" keywords="[DataGroup, property, content, duplicate]" description="remove duplicate items">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="width"  value="28" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
	        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection(['bbb','aaa','aaa','bbb','aaa','bbb'])" waitTarget="group1" waitEvent="updateComplete" />
	   	</setup>
    	<body>
			<RunCode code="application.group1.dataProvider.removeItemAt(0);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.dataProvider.removeItemAt(0);" waitTarget="group1" waitEvent="updateComplete" />
		
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0)" value="aaa" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(1)" value="bbb" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(2)" value="aaa" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(3)" value="bbb" />
			<CompareBitmap url="../properties/baselines/datagroup_property_duplicates_removing.png" target="group1" timeout="2000" />
		</body>
    </TestCase>	
	
    <TestCase testID="DataGroup_property_dataProvider_reuse" keywords="[DataGroup, property, content, duplicate]" description="reuse a dataprovider (SDK-19680)">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			
			<RunCode code="application.createSubgroup(application.group1)" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.createSubgroup(application.group1)" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).dataProvider = someArrayCollection" waitTarget="group1" waitEvent="updateComplete" />
	   	</setup>
    	<body>
			<RunCode code="application.group1.dataProvider.removeItemAt(0)" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.dataProvider.getItemAt(0).dataProvider = someArrayCollection" waitTarget="group1" waitEvent="updateComplete" />
			
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).dataProvider.getItemAt(0).width" value="50" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).dataProvider.getItemAt(1).width" value="60" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).dataProvider.getItemAt(2).width" value="70" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).dataProvider.getItemAt(3).width" value="80" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0).dataProvider.getItemAt(4).width" value="90" />												
		</body>
    </TestCase>		
	
	
<!-- some sanity checks with layer property -->

	
	<TestCase testID="DataGroup_property_layer_basic" keywords="[DataGroup, property, layer]" description="check that you can set layer on visual items">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new LayerGraphicsArray();" waitTarget="group1" waitEvent="updateComplete" />
			
			<AssertMethodValue method="application.group1.dataProvider.getItemAt(0).depth = 2;" />
			<AssertMethodValue method="application.group1.dataProvider.getItemAt(1).depth = 1;" />
			<AssertMethodValue method="application.group1.dataProvider.getItemAt(2).depth = 1;" />
			<AssertMethodValue method="application.group1.dataProvider.getItemAt(3).depth = 0;" />
			<AssertMethodValue method="application.group1.dataProvider.getItemAt(4).depth = -1;" />		
			<Pause timeout="50" />
	   	</setup>
    	<body>
			<AssertPropertyValue target="group1" propertyName="width" value="140" />
			<CompareBitmap url="../properties/baselines/dataGroup_property_layer_basic.png" target="group1" timeout="2000" />
		</body>
    </TestCase>
	
	<TestCase testID="DataGroup_property_layer_itemRenderer" keywords="[DataGroup, property, layer]" description="layer shouldn't have an effect here when item renderer involved">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new LayerGraphicsArray();" waitTarget="group1" waitEvent="updateComplete" />
			
			<AssertMethodValue method="application.group1.dataProvider.getItemAt(0).depth = 2;" />
			<AssertMethodValue method="application.group1.dataProvider.getItemAt(1).depth = 1;" />
			<AssertMethodValue method="application.group1.dataProvider.getItemAt(2).depth = 1;" />
			<AssertMethodValue method="application.group1.dataProvider.getItemAt(3).depth = 0;" />
			<AssertMethodValue method="application.group1.dataProvider.getItemAt(4).depth = -1;" />		
			<Pause timeout="50" />
	   	</setup>
    	<body>
			<AssertPropertyValue target="group1" propertyName="width" value="140" />
			<CompareBitmap url="../properties/baselines/dataGroup_property_layer_itemRenderer.png" target="group1" timeout="2000" />
		</body>
    </TestCase>	
	
	<TestCase testID="DataGroup_property_layer_getElement" keywords="[DataGroup, property, layer]" description="check that setting layer through the layout element works when itemRenderer involved">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new LayerGraphicsArray();" waitTarget="group1" waitEvent="updateComplete" />
			
			<AssertMethodValue method="application.group1.getElementAt(0).depth = 1;" />
			<AssertMethodValue method="application.group1.getElementAt(2).depth = 0;" />
			<AssertMethodValue method="application.group1.getElementAt(4).depth = -1;" />
			<Pause timeout="50" />
	   	</setup>
    	<body>
			<AssertPropertyValue target="group1" propertyName="width" value="140" />
			<CompareBitmap url="../properties/baselines/dataGroup_property_layer_getElement.png" target="group1" timeout="2000" />
		</body>
    </TestCase>		
	
	<TestCase testID="DataGroup_property_dataProvider_zeroItem" keywords="[DataGroup, property, layer]" description="make sure all forms of zero are displayed (SDK-20745)">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="itemRenderer" valueExpression="value=new ClassFactory(spark.skins.spark.DefaultItemRenderer)" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />			
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection([Number(0), int(0), String(0), 'zero']);" waitTarget="group1" waitEvent="updateComplete" />

	   	</setup>
    	<body>
			<CompareBitmap url="../properties/baselines/dataGroup_property_dataProvider_zeroItem.png" target="group1" timeout="2000" />
		</body>
    </TestCase>		
		
	<TestCase testID="DataGroup_property_itemRendererFunction_haloPanel" keywords="[DataGroup, property, itemRendererFunction]" description="ensure halo panel can be used in a complex item renderer (SDK-20727)">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />	
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection([new GroupButtonsComp()]);" waitTarget="group1" waitEvent="updateComplete" />
	   	</setup>
    	<body>
			<CompareBitmap url="../properties/baselines/dataGroup_property_itemRendererFunction_haloPanel.png" target="group1" />
		</body>
    </TestCase>	
	
	<TestCase testID="DataGroup_property_dataProvider_graphicElement" keywords="[DataGroup, property, dataProvider]" description="ensure graphic elements can be wrapped in a complex item renderer without RTE (SDK-20734)">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.aligningItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />	
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection([new BasicRect()]);" waitTarget="group1" waitEvent="updateComplete" />
	   	</setup>
    	<body>
			<CompareBitmap url="../properties/baselines/dataGroup_property_dataProvider_graphicElement.png" target="group1" />
		</body>
    </TestCase>		
	
	

	<TestCase testID="DataGroup_property_enabled_default" keywords="[DataGroup, property, enabled]" description="check group enabled by default">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="width" value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.testingEnabledOutput = '';" />
			<RunCode code="application.group1.addEventListener('click', application.handleClickEvent);" />
			<RunCode code="application.addCustomRect(application.group1, 50, 50, 0xFF0000);" waitTarget="group1" waitEvent="updateComplete" />
	   	</setup>
		<body>
			<DispatchMouseEvent target="group1" localX="25" localY="25" type="click" />
			<AssertMethodValue method="value=application.testingEnabledOutput" valueExpression="value='[click]'" />
			<DispatchMouseEvent target="group1" localX="49" localY="49" type="click" />	
			<AssertMethodValue method="value=application.testingEnabledOutput" valueExpression="value='[click][click]'" />
			<AssertMethodValue method="value=application.group1.enabled" valueExpression="value=true" />
			<AssertMethodValue method="value=application.group1.mouseEnabled" valueExpression="value=true" />
			<AssertMethodValue method="value=application.group1.mouseChildren" valueExpression="value=true" />
		</body>
    </TestCase>
			
	<TestCase testID="DataGroup_property_enabled_false" keywords="[DataGroup, property, enabled]" description="check disabled group can't be clicked on (SDK-20988)">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="width" value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="enabled" value="false" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.aligningItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.testingEnabledOutput = '';" />
			<RunCode code="application.group1.addEventListener('click', application.handleClickEvent);" />
			<RunCode code="application.addCustomRect(application.group1, 50, 50, 0xFF0000);" waitTarget="group1" waitEvent="updateComplete" />
	   	</setup>
		<body>
			<DispatchMouseEvent target="group1" localX="25" localY="25" type="mouseDown" />
			<DispatchMouseEvent target="group1" localX="25" localY="25" type="mouseUp" />			
			<AssertMethodValue method="value=application.testingEnabledOutput" valueExpression="value=''" />
			<DispatchMouseEvent target="group1" localX="75" localY="75" type="mouseDown" />
			<DispatchMouseEvent target="group1" localX="75" localY="75" type="mouseUp" />
			<AssertMethodValue method="value=application.testingEnabledOutput" valueExpression="value=''" />
			<AssertMethodValue method="value=application.group1.enabled" valueExpression="value=false" />
			<AssertMethodValue method="value=application.group1.mouseEnabled" valueExpression="value=false" />	
			<AssertMethodValue method="value=application.group1.mouseChildren" valueExpression="value=false" />	
		</body>
    </TestCase>	

	<TestCase testID="DataGroup_property_enabled_mouseEnabled" keywords="[DataGroup, property, enabled]" description="check group disabled when mouseEnabled/mouseChildren true">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="width" value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="mouseEnabled" value="true" />
			<SetProperty target="group1" propertyName="mouseChildren" value="true" />
			<SetProperty target="group1" propertyName="enabled" value="false" waitTarget="group1"  waitEvent="updateComplete" />			
			<RunCode code="application.testingEnabledOutput = '';" />
			<RunCode code="application.group1.addEventListener('click', application.handleClickEvent);" />			
			<RunCode code="application.addCustomRect(application.group1, 50, 50, 0xFF0000);" waitTarget="group1" waitEvent="updateComplete" />
	   	</setup>
		<body>
			<DispatchMouseEvent target="group1" localX="25" localY="25" type="mouseDown" />
			<DispatchMouseEvent target="group1" localX="25" localY="25" type="mouseUp" />		
			<AssertMethodValue method="value=application.testingEnabledOutput" valueExpression="value=''" />
			<DispatchMouseEvent target="group1" localX="75" localY="75" type="mouseDown" />
			<DispatchMouseEvent target="group1" localX="75" localY="75" type="mouseUp" />		
			<AssertMethodValue method="value=application.testingEnabledOutput" valueExpression="value=''" />
			<DispatchMouseEvent target="group1" localX="99" localY="99" type="mouseDown" />
			<DispatchMouseEvent target="group1" localX="99" localY="99" type="mouseUp" />		
			<AssertMethodValue method="value=application.testingEnabledOutput" valueExpression="value=''" />
			<AssertMethodValue method="value=application.group1.enabled" valueExpression="value=false" />
			<AssertMethodValue method="value=application.group1.mouseEnabled" valueExpression="value=false" />	
			<AssertMethodValue method="value=application.group1.mouseChildren" valueExpression="value=false" />	
		</body>
    </TestCase>					
	
	<TestCase testID="DataGroup_property_hitArea" keywords="[DataGroup, property, hitArea]" description="check hitArea is size of full group (SDK-20554)">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="width" value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height" value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 50, 50, 0xFF0000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.addEventListener('click', function():void{});" waitTarget="group1" waitEvent="updateComplete" />
	   	</setup>
		<body>
			<DispatchMouseEvent target="group1" localX="0" localY="0" type="click" waitEvent="click" waitTarget="group1" />
			<DispatchMouseEvent target="group1" localX="25" localY="25" type="click" waitEvent="click" waitTarget="group1" />	
			<DispatchMouseEvent target="group1" localX="75" localY="75" type="click" waitEvent="click" waitTarget="group1" />	
			<DispatchMouseEvent target="group1" localX="99" localY="99" type="click" waitEvent="click" waitTarget="group1" />	
		</body>
    </TestCase>	
	
	<TestCase testID="DataGroup_SDK22156" keywords="[DataGroup]" description="check text doesnt get clipped in non-virtual case">
		<!-- bugs>
			<Bug bugID="SDK-22156" />
		</bugs-->
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.group1.dataProvider = application.richEditableTextCollection" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="layout" value="{new VerticalLayout()}" waitTarget="group1"  waitEvent="updateComplete" />
			<AssertMethodValue method="application.group1.layout.requestedRowCount=5" waitTarget="group1" waitEvent="updateComplete" />
			
			<RunCode code="application.group1.verticalScrollPosition += 80" waitTarget="group1" waitEvent="propertyChange" />
	   	</setup>
		<body>
			<CompareBitmap url="../properties/baselines/datagroup_SDK22156.png" target="" numColorVariances="4" maxColorVariance="20" />
		</body>
    </TestCase>	
	
    <TestCase testID="DataGroup_property_itemIndex_binding" keywords="[DataGroup, property, itemIndex]" description="check that itemIndex is bindable">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRenderer" valueExpression="value=new ClassFactory(ItemIndexRendererBinding)" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection([0, 1, 2, 3]);" waitTarget="group1" waitEvent="updateComplete" />	
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />		
			<RunCode code="application.group1.dataProvider.removeItemAt(0);" waitTarget="group1" waitEvent="updateComplete" />
	   	</setup>
    	<body>
			<CompareBitmap url="../properties/baselines/DataGroup_property_itemIndex_binding.png" target="group1" />
		</body>
    </TestCase>
	
    <TestCase testID="DataGroup_property_itemIndex_setData" keywords="[DataGroup, property, itemIndex]" description="check that overriding set data works">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRenderer" valueExpression="value=new ClassFactory(ItemIndexRendererSetData)" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection([0, 1, 2, 3]);" waitTarget="group1" waitEvent="updateComplete" />	
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />		
			<RunCode code="application.group1.dataProvider.removeItemAt(0);" waitTarget="group1" waitEvent="updateComplete" />
	   	</setup>
    	<body>
			<CompareBitmap url="../properties/baselines/DataGroup_property_itemIndex_setData.png" target="group1" />
		</body>
    </TestCase>
		
	<TestCase testID="DataGroup_Properties_baselinePosition" keywords="[DataGroup,Properties, baselinePosition]" description="Test baselinePosition on DataGroup">
            <!-- bugs>
                <Bug bugID="SDK-23462" />
            </bugs-->
		<setup>
		    <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
		    <SetProperty propertyName="dataProvider" target="group1" valueExpression="value=application.richEditableTextCollection" waitEvent="updateComplete" waitTarget="group1" />
		</setup>
		<body>			
		    <AssertMethodValue method="value=Math.round(application.group1.baselinePosition)" value="12" />
		</body>
	</TestCase>
      
    <TestCase testID="DataGroup_Properties_getCurrentRendererState" keywords="[DataGroup,Properties, getCurrentRendererState]" description="regression test for SDK-29061">
        <!-- bugs>
            <Bug bugID="SDK-29061" />
        </bugs-->
        <setup>
            <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
            <SetProperty propertyName="width" target="group1" value="300" waitEvent="updateComplete" waitTarget="group1" />
            <SetProperty target="group1" propertyName="itemRenderer" valueExpression="value=new ClassFactory(comps.GetCurrentRendererStateItemRenderer)" waitTarget="group1" waitEvent="updateComplete" />
            <SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection([{value:0}, {value:1}, {value:2}, {value:3}]);" waitTarget="group1" waitEvent="updateComplete" />	
            <SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />		
        </setup>
        <body>
            <DispatchMouseClickEvent target="group1.getElementAt(0).rb1" localX="5" localY="8" waitEvent="click" />
            <DispatchMouseClickEvent target="group1.getElementAt(1).rb2" localX="5" localY="8" waitEvent="click" />
            <DispatchMouseClickEvent target="group1.getElementAt(2).rb3" localX="5" localY="8" waitEvent="click" />
            <CompareBitmap url="../properties/baselines/DataGroup_Properties_getCurrentRendererState.png" target="group1" />
        </body>
    </TestCase>
      
	
  </testCases>
</UnitTester>
