<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<UnitTester testDir="gumbo/core/DataGroup/properties/" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"  xmlns:m="http://ns.adobe.com/mxml/2009" xmlns="*" testSWF="DataGroupBasic.mxml">

  <!-- this set of lines form a template that must be in each unit test -->
  <fx:Script>
    <![CDATA[
	public static function init(o:DisplayObject):void { }
	]]>
  </fx:Script>
  <fx:Metadata>
    <![CDATA[
	[Mixin]
	]]>
  </fx:Metadata>
  <!-- end of set of lines that must be in each unit test -->
  <fx:Script>
    <![CDATA[
	
	  import spark.layouts.*;
      import mx.controls.Label;
      import comps.*;
      import mx.core.ClassFactory;
	  import mx.collections.ArrayCollection;
	  import spark.primitives.*;
	  import spark.filters.*;
	  import spark.core.MaskType;
	  
	  import spark.skins.spark.*;
	  import spark.components.Group;
	  
	  public function createTypicalGroup(width:int, height:int):Group {
	    var typicalGroup:Group = new Group();
		typicalGroup.width = width;
		typicalGroup.height = height;
		return typicalGroup;
	  }
	 
	]]>
  </fx:Script>
  <testCases>

<!-- 

========================

	DataGroup Virtualization Testing - Properties
	
	The tests in this file are a subset of the DataGroup_Properties_main.mxml tests with useVirtualLayout turned on. 
	The test names are the same except _virtual is appended to each test name.
	Each test should have the identical output as the equivalent non-virtual test.
	
	(See the DataGroup/virtual folder for further comments on the DataGroup virtualization tests)
	
	Note: These tests point to the same bitmaps as the non-virtualized test file
	
========================
	
-->

<!-- autoLayout property

+ check that the default value is true
+ set to false and move an object up/down in a HorizontalLayout, check object moves
+ set to false and move an object left/right in a VerticalLayout, check object moves
+ check default moving an object in HorizontalLayout/VerticalLayout should not have any effect
+ change height of an object in VerticalLayout with variableRowHeight set to false, check size changes
+ change width of an object in HorizontalLayout with variableColumnWidth set to false, check size changes
+ check that setting autoLayout to false works with clipContent on
+ check that changing to true snaps items back into proper layout

-->

    <TestCase testID="DataGroup_property_autoLayout_default_virtual" keywords="[DataGroup, property, autoLayout]" description="check default is true">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
    	</setup>
    	<body>
	        <AssertPropertyValue target="group1" propertyName="autoLayout" value="true" />
		</body>
    </TestCase>
	
    <TestCase testID="DataGroup_property_autoLayout_no_movement_vertical_virtual" keywords="[DataGroup, property, autoLayout]" description="check position doesn't change with autoLayout default">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="typicalItem" value="{createTypicalGroup(100, 25)}" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />		
			<RunCode code="application.addCustomRect(application.group1, 100, 25, 0x110000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 100, 25, 0x880000);" waitTarget="group1" waitEvent="updateComplete" />
	   	</setup>
    	<body>
			<RunCode code="application.group1.dataProvider.getItemAt(1).y = 40;" />
			<Pause timeout="100" />
			<RunCode code="application.addCustomRect(application.group1, 100, 25, 0xFF0000);" waitTarget="group1" waitEvent="updateComplete" />		
				
			<CompareBitmap url="../properties/baselines/datagroup_property_autoLayout_no_movement_vertical_virtual.png" target="group1" timeout="2000" />
		</body>
    </TestCase>
		
    <TestCase testID="DataGroup_property_autoLayout_no_movement_horizontal_virtual" keywords="[DataGroup, property, autoLayout]" description="check position doesn't change">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="typicalItem" value="{createTypicalGroup(25, 100)}" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new HorizontalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			<RunCode code="application.addCustomRect(application.group1, 25, 100, 0x110000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 25, 100, 0x880000);" waitTarget="group1" waitEvent="updateComplete" />
	   	</setup>
    	<body>
			<RunCode code="application.group1.dataProvider.getItemAt(1).x = 40;" />
			<Pause timeout="100" />
			<RunCode code="application.addCustomRect(application.group1, 25, 100, 0xFF0000);" waitTarget="group1" waitEvent="updateComplete" />
			<CompareBitmap url="../properties/baselines/datagroup_property_autoLayout_no_movement_horizontal_virtual.png" target="group1" timeout="2000" />
		</body>
    </TestCase>

    <TestCase testID="DataGroup_property_autoLayout_clipContent_virtual" keywords="[DataGroup, property, autoLayout]" description="check clipContent works with autoLayout">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="clipAndEnableScrolling" value="true" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="typicalItem" value="{createTypicalGroup(100, 25)}" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
		        
			<RunCode code="application.addCustomRect(application.group1, 100, 25, 0x110000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 100, 25, 0x880000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 100, 25, 0xFF0000);" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="autoLayout" value="false" />
			<Pause timeout="100" />
			
			<RunCode code="application.group1.dataProvider.getItemAt(1).x = 20;" />
			<Pause timeout="50" />
			
	   	</setup>
    	<body>
			<CompareBitmap url="../properties/baselines/datagroup_property_autoLayout_clipContent_virtual.png" target="" timeout="2000" />
		</body>
    </TestCase>
	
    <TestCase testID="DataGroup_property_autoLayout_switchTo_true_virtual" keywords="[DataGroup, property, autoLayout]" description="check equal heights">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.variableRowHeight = false;" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.rowHeight = 10;" waitTarget="group1" waitEvent="updateComplete" />
			        
			<RunCode code="application.addCustomRect(application.group1, 100, 50, 0x110000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 100, 50, 0x880000);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.addCustomRect(application.group1, 100, 50, 0xFF0000);" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="autoLayout" value="false" />
			<Pause timeout="100" />
			
			<RunCode code="application.group1.dataProvider.getItemAt(1).height = 20;" />
			<Pause timeout="50" />
			
			<SetProperty target="group1" propertyName="autoLayout" value="true" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="typicalItem" value="{createTypicalGroup(100, 50)}" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
	   	</setup>
    	<body>
			<CompareBitmap url="../properties/baselines/datagroup_property_autoLayout_switchTo_true_virtual.png" target="group1" timeout="2000" />
		</body>
    </TestCase>				
			  

<!-- filters property -->

    <TestCase testID="DataGroup_property_filters_data_virtual" keywords="[DataGroup, property, filters]" description="check shadow filter on data items">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="layout"  valueExpression="value=new VerticalLayout()" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['test','data'])" waitTarget="group1"  waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="typicalItem" value="XXXX" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
      </setup>
      <body>
        <RunCode code="application.addShadowFilter(application.group1);" />
		<!-- no event sent, need to pause -->
		<Pause timeout="200" />
		<AssertMethodValue method="value=(application.group1.filters[0] is DropShadowFilter)" valueExpression="value=true" />
        <CompareBitmap url="../properties/baselines/datagroup_property_filters_data_virtual.png" target="group1" timeout="2000" />
      </body>
    </TestCase>
	
	<TestCase testID="DataGroup_property_filters_graphics_virtual" keywords="[DataGroup, property, filters]" description="check shadow filter on graphics items">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="layout"  valueExpression="value= new VerticalLayout()" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection()" waitTarget="group1"  waitEvent="updateComplete" />
        <RunCode code="application.addCustomRect(application.group1, 15, 30, 0x123456, 30, 40);" waitEvent="updateComplete" waitTarget="group1" />
		<RunCode code="application.addCustomRect(application.group1, 15, 30, 0x123456, 30, 40);" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="typicalItem" value="{createTypicalGroup(30, 30)}" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
      </setup>
      <body>
        <RunCode code="application.addShadowFilter(application.group1);" />
		<!-- no event sent, need to pause -->
		<Pause timeout="200" />
		<AssertMethodValue method="value=(application.group1.filters[0] is DropShadowFilter)" valueExpression="value=true" />
        <CompareBitmap url="../properties/baselines/datagroup_property_filters_graphics_virtual.png" target="group1" timeout="2000" />
      </body>
    </TestCase>
	
	<TestCase testID="DataGroup_property_filters_mix_virtual" keywords="[DataGroup, property, filters]" description="check shadow filter on mixed items">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="height"  value="200" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="layout"  valueExpression="value=new VerticalLayout()" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['test','data'])" waitTarget="group1"  waitEvent="updateComplete" />
        <RunCode code="application.addCustomRect(application.group1, 15, 30, 0x123456, 30, 40);" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="typicalItem" value="XXXX" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
      </setup>
      <body>
        <RunCode code="application.addShadowFilter(application.group1);" />
		<!-- no event sent, need to pause -->
		<Pause timeout="200" />
		<AssertMethodValue method="value=(application.group1.filters[0] is DropShadowFilter)" valueExpression="value=true" />
        <CompareBitmap url="../properties/baselines/datagroup_property_filters_mix_virtual.png" target="group1" timeout="2000" />
      </body>
    </TestCase>
  
    <TestCase testID="DataGroup_property_filters_change_virtual" keywords="[DataGroup, property, filters]" description="change the filters on a group">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="layout"  valueExpression="value=new VerticalLayout()" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['test','data'])" waitTarget="group1"  waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="typicalItem" value="XXXX" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
      </setup>
      <body>
        <RunCode code="application.addShadowFilter(application.group1);" />
		<!-- no event sent, need to pause -->
		<Pause timeout="200" />
        <RunCode code="application.addBlurFilter(application.group1);" />
		<!-- no event sent, need to pause -->
		<Pause timeout="200" />
		<AssertMethodValue method="value=(application.group1.filters[0] is DropShadowFilter)" valueExpression="value=true" />
		<AssertMethodValue method="value=(application.group1.filters[1] is BlurFilter)" valueExpression="value=true" />
        <CompareBitmap url="../properties/baselines/datagroup_property_filters_change_virtual.png" target="group1" timeout="2000" />
      </body>
    </TestCase>


<!-- dataProvider property -->

<!-- Adding tests for SDK-18046 - null items now supported in DataGroup -->

    <TestCase testID="DataGroup_property_dataProvider_null_items_virtual" keywords="[DataGroup, property, dataProvider, null]" description="ensure DataGroup can hold null items using itemRenderer">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
		<RunCode code="application.group1.itemRenderer=new ClassFactory(comps.NullItemRenderer)" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection([null, 'string', null, 3.1415, null])}" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="width" value="300" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="height" value="274" waitEvent="updateComplete" />
			
		<SetProperty target="group1" propertyName="typicalItem" value="string" waitTarget="group1"  waitEvent="updateComplete" />
		<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
		<WaitForLayoutManager />	
      </setup>
      <body>
        <AssertMethodValue method="value=application.group1.dataProvider.length" value="5" />
		<CompareBitmap url="../properties/baselines/datagroup_property_dataProvider_null_items_virtual.png" target="group1" timeout="2000" />
      </body>
    </TestCase>
	
    <TestCase testID="DataGroup_property_dataProvider_null_items_function_virtual" keywords="[DataGroup, property, dataProvider, null]" description="ensure DataGroup can hold null items using itemRendererFunction">
      <setup>
        <ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.nullItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />		
		<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection([null, 'string', null, 3.1415, null])}" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="width" value="300" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="height" value="274" waitEvent="updateComplete" />	
		
		<SetProperty target="group1" propertyName="typicalItem" value="XXXX" waitTarget="group1"  waitEvent="updateComplete" />
		<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
		<WaitForLayoutManager />	
		
      </setup>
      <body>
        <AssertMethodValue method="value=application.group1.dataProvider.length" value="5" />
		<CompareBitmap url="../properties/baselines/datagroup_property_dataProvider_null_items_function_virtual.png" target="group1" timeout="2000" />
      </body>
    </TestCase>	
	
	<TestCase testID="DataGroup_property_data_graphic_virtual" keywords="[DataGroup, property, data]" description="pass graphic data to itemrenderer">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.group1.itemRenderer=new ClassFactory(comps.IconRenderer)" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty    target="group1" propertyName="layout"  valueExpression="value=new VerticalLayout()" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty 	target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(application.smallGraphicArray)" waitTarget="group1"  waitEvent="updateComplete" />
			
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
		</setup>
		<body>
			<AssertMethodValue method="value=application.graphicArray[0].label" value="1" />
			<CompareBitmap url="../properties/baselines/datagroup_property_data_graphic_virtual.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_data_mix_virtual" keywords="[DataGroup, property, data]" description="pass mix data to itemRenderer">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.group1.itemRenderer=new ClassFactory(comps.DataGroupRenderer)" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty    target="group1" propertyName="layout"  valueExpression="value=new VerticalLayout" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty 	target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(application.smallGraphicArray)" waitTarget="group1"  waitEvent="updateComplete" />
			
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
		</setup>
		<body>
			<AssertMethodValue method="value=application.graphicArray[0].label" value="1" />
			<CompareBitmap url="../properties/baselines/datagroup_property_data_mix_virtual.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	
<!-- itemRenderer - data -->

	<TestCase testID="DataGroup_property_itemRenderer_data_virtual" keywords="[DataGroup, property, data]" description="pass data to itemRenderer">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.group1.itemRenderer=new ClassFactory(comps.LabelRenderer)" waitTarget="group1" waitEvent="updateComplete"  />
			<SetProperty target="group1" propertyName="layout"  valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection(application.dataArray)" waitTarget="group1" waitEvent="updateComplete" />
			
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
		</setup>
		<body>
			
			<AssertMethodValue method="value=application.dataArray[0]" value="10" />
			<CompareBitmap url="../properties/baselines/datagroup_property_itemRenderer_data_virtual.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	
	<TestCase testID="DataGroup_property_itemRenderer_data_color_virtual" keywords="[DataGroup, property, data]" description="pass color data to itemRenderer">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.group1.itemRenderer=new ClassFactory(comps.ColorLabelRenderer)" waitTarget="group1" waitEvent="updateComplete"  />
			<SetProperty target="group1" propertyName="layout"  valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="93" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection(application.mixArr)" waitTarget="group1"  waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="typicalItem" value="{{type: 'text', label: 'This is a string'}}" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
		</setup>
		<body>
			
			<AssertMethodValue method="value=application.mixArr[0].label" value="Green string" />
			<CompareBitmap url="../properties/baselines/datagroup_property_itemRenderer_data_color_virtual.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	

	<TestCase testID="DataGroup_property_itemRenderer_data_skin_virtual" keywords="[DataGroup, property, data]" description="pass data to a skin itemRenderer">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.group1.itemRenderer=new ClassFactory(comps.DataGroupRendererSkin)"  waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="layout"  valueExpression="value=new VerticalLayout()"  waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection(application.dataArray)" waitTarget="group1"  waitEvent="updateComplete" />
		
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
		</setup>
		<body>
			<AssertMethodValue method="value=application.dataArray[0]" value="10" />
			<CompareBitmap url="../properties/baselines/datagroup_property_itemRenderer_data_skin_virtual.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	
<!-- itemRendererFunction -->

	<TestCase testID="DataGroup_property_itemRendererFunction_virtual" keywords="[DataGroup, property, dataProvider, itemRendererFunction]" description="check itemRendererFunction renders each item type appropriately">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.itemRendererFunction=application.myItemRendererFunction"  waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(application.mixArr)" waitEvent="updateComplete" waitTarget="group1" />	
			<SetProperty target="group1" propertyName="width"  value="93" waitEvent="updateComplete" />	
			
			<SetProperty target="group1" propertyName="height" value="152" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="typicalItem" value="{{type: 'text', label: 'This is a string'}}" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
		</setup>
		<body>
			<CompareBitmap url="../properties/baselines/datagroup_property_itemRendererFunction_virtual.png" target="group1" timeout="2000" />
		</body>
	</TestCase>	
	

<!-- layout property -->

	<!-- vertical -->

 	<TestCase testID="DataGroup_property_layout_vertical_data_virtual" keywords="[DataGroup, property, layout]" description="provide data to vertical layout">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        	<SetProperty target="group1" propertyName="itemRenderer" valueExpression="value= new ClassFactory(DataGroupDefaultItemRenderer)" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty    target="group1" propertyName="layout"  valueExpression="value=new VerticalLayout()"  waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['AAA','BBB','CCC'])}" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="width" value="31" waitEvent="updateComplete" waitTarget="group1" />
			
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
		</setup>
		<body>
			<CompareBitmap url="../properties/baselines/datagroup_property_layout_vertical_data_virtual.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
	
 	<TestCase testID="DataGroup_property_layout_vertical_mix_virtual" keywords="[DataGroup, property, layout]" description="provide data and graphics to vertical layout">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="height"  value="276" waitTarget="group1"  waitEvent="updateComplete" />
	        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty  target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['AAA'])}" waitEvent="updateComplete" waitTarget="group1" />
			
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
		</setup>
		<body>
			<RunCode code="application.addCustomRect(application.group1, 15, 30, 0x123456, 30, 40)" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addCustomRect(application.group1, 15, 30, 0x123456, 30, 40)" waitEvent="updateComplete" waitTarget="group1"  />
			<AssertMethodValue method="value=application.group1.dataProvider.addItem('BBB')" valueExpression="value=null" />
			<RunCode code="application.addCustomRect(application.group1, 15, 30, 0x123456, 30, 40)" waitEvent="updateComplete" waitTarget="group1"  />
			<AssertPropertyValue target="group1" propertyName="height" value="276" />
			<CompareBitmap url="../properties/baselines/datagroup_property_layout_vertical_mix_virtual.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
	
	
	<!-- horizontal -->

 	<TestCase testID="DataGroup_property_layout_horizontal_data_virtual" keywords="[DataGroup, property, layout]" description="data in horizontal layout">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        	<SetProperty target="group1" propertyName="itemRenderer" valueExpression="value= new ClassFactory(DataGroupDefaultItemRenderer)" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new HorizontalLayout()"  waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['AAA','BBB','CCC'])}" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="width" value="103" waitEvent="updateComplete" waitTarget="group1" />
						
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
		</setup>
		<body>
			<CompareBitmap url="../properties/baselines/datagroup_property_layout_horizontal_data_virtual.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
	
 	<TestCase testID="DataGroup_property_layout_horizontal_mix_virtual" keywords="[DataGroup, property, layout]" description="mix items in horizontal layout">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="width" value="219" waitTarget="group1"  waitEvent="updateComplete" />
        	<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout"  valueExpression="value=new HorizontalLayout()" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['AAA'])}" waitEvent="updateComplete" waitTarget="group1" />
			
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
		</setup>
		<body>
			<RunCode code="application.addCustomRect(application.group1, 15, 30, 0x123456, 30, 40)" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addCustomRect(application.group1, 15, 30, 0x123456, 30, 40)" waitEvent="updateComplete" waitTarget="group1"  />
			<AssertMethodValue method="value=application.group1.dataProvider.addItem('BBB')" valueExpression="value=null" />
			<RunCode code="application.addCustomRect(application.group1, 15, 30, 0x123456, 30, 40)" waitEvent="updateComplete" waitTarget="group1"  />
			<CompareBitmap url="../properties/baselines/datagroup_property_layout_horizontal_mix_virtual.png" target="group1" timeout="2000" />
		</body>
	</TestCase>
		
	<TestCase testID="DataGroup_property_layout_switch_virtual" keywords="[DataGroup, property, layout]" description="test switching layouts">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        	<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty    target="group1" propertyName="layout"  valueExpression="value=new VerticalLayout()" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['AAA'])}" waitEvent="updateComplete" waitTarget="group1" />
			<RunCode code="application.addCustomRect(application.group1, 15, 30, 0x123456, 30, 40)" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addCustomRect(application.group1, 15, 30, 0x123456, 30, 40)" waitEvent="updateComplete" waitTarget="group1"  />
			<AssertMethodValue method="value=application.group1.dataProvider.addItem('BBB')" valueExpression="value=null" />
			<RunCode code="application.addCustomRect(application.group1, 15, 30, 0x123456, 30, 40)" waitEvent="updateComplete" waitTarget="group1"  />
			
			<SetProperty target="group1" propertyName="typicalItem" value="XXXX" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
		</setup>
		<body>  
			<SetProperty    target="group1" propertyName="layout"  valueExpression="value=new HorizontalLayout()" waitEvent="updateComplete" waitTarget="group1" />
			<CompareBitmap url="../properties/baselines/datagroup_property_layout_switch_virtual.png" target="group1" timeout="2000" />			
		</body>
	</TestCase>
	
	

<!-- masking -->

    <TestCase testID="DataGroup_property_mask_alpha_change_virtual" keywords="[DataGroup, property, mask, alpha]" description="check that an alpha mask can be changed to clip mask">
      <setup>
		<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['cut_off_string1','cut_off_string2'])" waitTarget="group1"  waitEvent="updateComplete" />
		<RunCode code="application.applyGradientMask(application.group1)" waitTarget="group1" waitEvent="updateComplete"  />
		<SetProperty target="group1" propertyName="maskType" value="alpha" waitTarget="group1" waitEvent="updateComplete" />
			
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
      </setup>
      <body>
		<AssertPropertyValue target="group1" propertyName="maskType" value="alpha" />
		<SetProperty target="group1" propertyName="maskType" value="clip" waitTarget="group1" waitEvent="updateComplete" />
		<AssertPropertyValue target="group1" propertyName="maskType" value="clip" />
		<CompareBitmap url="../properties/baselines/datagroup_property_mask_alpha_change_virtual.png" target="group1" timeout="2000" />
      </body>
    </TestCase>
  

  	<TestCase testID="DataGroup_property_content_mask_virtual" keywords="[DataGroup, property, dataProvider]" description="add a mask to an item of the group">
      <setup>
		<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
		<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="dataProvider"  valueExpression="value=new ArrayCollection(['GROUP1 CONTENT'])" waitTarget="group1"  waitEvent="updateComplete" />

		<RunCode code="application.createSubgroup(application.group1)" waitTarget="group1" waitEvent="updateComplete" />
		<RunCode code="application.group1.dataProvider.getItemAt(1).layout = new VerticalLayout()" />
		<RunCode code="application.group1.dataProvider.getItemAt(1).itemRendererFunction = application.dataGroupItemRendererFunction" />
		<RunCode code="application.group1.dataProvider.getItemAt(1).dataProvider = new ArrayCollection()" />
			
		<RunCode code="application.group1.dataProvider.getItemAt(1).dataProvider.addItem('1234567890')" />
		<RunCode code="application.group1.dataProvider.getItemAt(1).dataProvider.addItem('0123456789')" />
		<Pause timeout="200" />

		<RunCode code="application.applyMask(application.group1.dataProvider.getItemAt(1))" />
		<Pause timeout="100" />
			
			<SetProperty target="group1" propertyName="typicalItem" value="XXXX" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
      </setup>
      <body>

		<CompareBitmap url="../properties/baselines/datagroup_property_content_mask_virtual.png" target="group1" timeout="2000" />
      </body>
    </TestCase>

  	<TestCase testID="DataGroup_property_maskType_default_virtual" keywords="[DataGroup, property, maskType]" description="check default maskType of a DataGroup">
      <setup>
		<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
      </setup>
      <body>
		<AssertPropertyValue target="group1" propertyName="maskType" valueExpression="value=MaskType.CLIP" />
      </body>
    </TestCase>
	
	<TestCase testID="DataGroup_property_mask_data_virtual" keywords="[DataGroup, property, mask]" description="mask over data elements">
      <setup>
		<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection(['XXXXXXXX','YYYYYYYY','ZZZZZZZZ'])" waitEvent="updateComplete" waitTarget="group1" />
			
			<SetProperty target="group1" propertyName="typicalItem" value="XXXX" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
      </setup>
      <body>
		<RunCode code="application.applyMask(application.group1)" waitTarget="group1" waitEvent="updateComplete" />	  	
		<AssertMethodValue method="value=application.group1.mask.width" value="50" />
		<AssertPropertyValue target="group1" propertyName="maskType" valueExpression="value=MaskType.CLIP" />
		<CompareBitmap url="../properties/baselines/datagroup_property_mask_data_virtual.png" target="group1" timeout="2000" />
      </body>
    </TestCase>
		
	<TestCase testID="DataGroup_property_mask_mix_virtual" keywords="[DataGroup, property, mask]" description="mask over a mix of data and graphic elements">
      <setup>
		<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
		<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection(['XXXXXXXX'])" waitTarget="group1" waitEvent="updateComplete" />
		<RunCode code="application.addCustomRect(application.group1, 15, 30, 0x123456, 0, 0)" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="typicalItem" value="XXXX" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
      </setup>
      <body>
		<RunCode code="application.applyMask(application.group1)" waitTarget="group1" waitEvent="updateComplete" />	  	
		<AssertMethodValue method="value=application.group1.mask.width" value="50" />
		<AssertPropertyValue target="group1" propertyName="maskType" valueExpression="value=MaskType.CLIP" />
		<CompareBitmap url="../properties/baselines/datagroup_property_mask_mix_virtual.png" target="group1" timeout="2000" />
      </body>
    </TestCase>	
	
<!-- transform property -->	
				
	<TestCase testID="DataGroup_property_transform_skew_mix_virtual" keywords="[DataGroup, property,transform]" description="skew a mixed item group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
				
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />

			<RunCode code="application.group1.dataProvider.addItem('data element');" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addCustomRect(application.group1, 15, 30, 0x123456, 30, 40);" waitEvent="updateComplete" waitTarget="group1"  />
			
			<RunCode code="application.skewGroup(application.group1);"  />
			<Pause timeout="50" />
			
			<SetProperty target="group1" propertyName="typicalItem" value="XXXX" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.transform.matrix.c" value="1" />
			<CompareBitmap url="../properties/baselines/datagroup_property_transform_skew_mix_virtual.png" target="" timeout="2000" numColorVariances="5" maxColorVariance="20" />
		</body>
	</TestCase>

	<TestCase testID="DataGroup_property_transform_skew_data_virtual" keywords="[DataGroup, property,transform]" description="skew a data item group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
						
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['data element',3.141592,'test'])}" waitTarget="group1"  waitEvent="updateComplete" />

			<RunCode code="application.skewGroup(application.group1);"  />
			<Pause timeout="50" />
			
			<SetProperty target="group1" propertyName="typicalItem" value="XXXX" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.transform.matrix.c" value="1" />
			<CompareBitmap url="../properties/baselines/datagroup_property_transform_skew_data_virtual.png" target="" timeout="2000" numColorVariances="5" maxColorVariance="20" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_transform_color_mix_virtual" keywords="[DataGroup, property,transform]" description="color transform a mixed item group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
										
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />

			<RunCode code="application.group1.dataProvider.addItem('data element');" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addCustomRect(application.group1, 15, 30, 0x123456, 30, 40);" waitEvent="updateComplete" waitTarget="group1"  />
			
			<RunCode code="application.colorTransform(application.group1);"  />
			<Pause timeout="50" />
			
			<SetProperty target="group1" propertyName="typicalItem" value="XXXX" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.transform.colorTransform.redOffset" value="100" />
			<AssertMethodValue method="value=application.group1.transform.colorTransform.blueOffset" value="100" />
			<CompareBitmap url="../properties/baselines/datagroup_property_transform_color_mix_virtual.png" target="group1" timeout="2000" numColorVariances="5" maxColorVariance="20" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_transform_color_data_virtual" keywords="[DataGroup, property,transform]" description="color transform a data item group">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        	<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        	<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
	
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['test data',3.14159,'data element'])}" waitTarget="group1"  waitEvent="updateComplete" />

			<RunCode code="application.colorTransform(application.group1);"  />
			<Pause timeout="50" />
			
			<SetProperty target="group1" propertyName="typicalItem" value="XXXX" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.transform.colorTransform.redOffset" value="100" />
			<AssertMethodValue method="value=application.group1.transform.colorTransform.blueOffset" value="100" />
			<CompareBitmap url="../properties/baselines/datagroup_property_transform_color_data_virtual.png" target="group1" timeout="2000" numColorVariances="5" maxColorVariance="20" />
		</body>
	</TestCase>
	
	<TestCase testID="DataGroup_property_transform_rotate_data_virtual" keywords="[DataGroup, property,transform]" description="rotate transform a data item group">
		<setup>

			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
       	 	<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
       	 	<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection(['test','more',3.14159,'last'])}" waitEvent="updateComplete" waitTarget="group1" />

			<RunCode code="application.rotateTransform(application.group1, -45);"  />
			<Pause timeout="50" />
			
			<SetProperty target="group1" propertyName="typicalItem" value="XXXX" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
		</setup>
		<body>
			<CompareBitmap url="../properties/baselines/datagroup_property_transform_rotate_data_virtual.png" target="" timeout="2000" numColorVariances="5" maxColorVariance="20" />		
		</body>
	</TestCase>
	
  	<TestCase testID="DataGroup_property_transform_direct_virtual" keywords="[DataGroup, property,transform]" description="check that you can set the transform property directly">
		<setup>
			<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
        <SetProperty target="group1" propertyName="dataProvider" value="{new ArrayCollection()}" waitTarget="group1" waitEvent="updateComplete" />

			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="typicalItem" value="XXXX" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	

			<RunCode code="application.group1.dataProvider.addItem('data element');" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.addCustomRect(application.group1, 15, 30, 0x123456, 0, 0);" waitEvent="updateComplete" waitTarget="group1"  />
			<RunCode code="application.group1.dataProvider.addItem(3.141592);" waitEvent="updateComplete" waitTarget="group1"  />
			
			<RunCode code="application.skewGroupViaTransform(application.group1);"  />
			<Pause timeout="50" />
			
		</setup>
		<body>
			<AssertMethodValue method="value=application.group1.transform.matrix.c" value="1" />
			<CompareBitmap url="../properties/baselines/datagroup_property_transform_direct_virtual.png" target="" timeout="2000" numColorVariances="5" maxColorVariance="20" />
		</body>
	</TestCase>
	

<!-- 

duplicate items

+ check duplicate items work when
	+ itemRenderer is defined
	+ itemRendererFumction is defined
	+ adding duplicate items
	+ removing a duplicate item
	
-->

    <TestCase testID="DataGroup_property_duplicates_itemRenderer_virtual" keywords="[DataGroup, property, content, duplicate]" description="duplicates using itemRenderer">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.itemRenderer=new ClassFactory(comps.DataGroupDefaultItemRenderer)" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection(['aaa','aaa','aaa','aaa'])" waitTarget="group1" waitEvent="updateComplete" />
			
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
	   	</setup>
    	<body>
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0)" value="aaa" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(1)" value="aaa" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(2)" value="aaa" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(3)" value="aaa" />	
			<CompareBitmap url="../properties/baselines/datagroup_property_duplicates_itemRenderer_virtual.png" target="group1" timeout="2000" />
		</body>
    </TestCase>
	
    <TestCase testID="DataGroup_property_duplicates_itemRendererFunction_virtual" keywords="[DataGroup, property, content, duplicate]" description="duplicates using an itemRendererFunction">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
	        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection(['aaa','aaa','aaa','aaa'])" waitTarget="group1" waitEvent="updateComplete" />
			
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
	   	</setup>
    	<body>
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0)" value="aaa" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(1)" value="aaa" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(2)" value="aaa" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(3)" value="aaa" />	
			<CompareBitmap url="../properties/baselines/datagroup_property_duplicates_itemRendererFunction_virtual.png" target="group1" timeout="2000" />
		</body>
    </TestCase>
	
    <TestCase testID="DataGroup_property_duplicates_adding_virtual" keywords="[DataGroup, property, content, duplicate]" description="add duplicate items">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="width"  value="28" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
	        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection(['aaa','aaa','bbb','bbb'])" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="typicalItem" value="XXX" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
	   	</setup>
    	<body>
			<RunCode code="application.group1.dataProvider.addItemAt('bbb', 0);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.dataProvider.addItemAt('aaa', 4);" waitTarget="group1" waitEvent="updateComplete" />
		
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0)" value="bbb" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(1)" value="aaa" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(2)" value="aaa" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(3)" value="bbb" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(4)" value="aaa" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(5)" value="bbb" />	
			<CompareBitmap url="../properties/baselines/datagroup_property_duplicates_adding_virtual.png" target="group1" timeout="2000" />
		</body>
    </TestCase>
	
    <TestCase testID="DataGroup_property_duplicates_removing_virtual" keywords="[DataGroup, property, content, duplicate]" description="remove duplicate item">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="width"  value="28" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
	        <SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection(['bbb','aaa','aaa','bbb','aaa','bbb'])" waitTarget="group1" waitEvent="updateComplete" />
			
			<SetProperty target="group1" propertyName="typicalItem" value="XXXX" waitTarget="group1"  waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />	
			
	   	</setup>
    	<body>
			<RunCode code="application.group1.dataProvider.removeItemAt(0);" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.dataProvider.removeItemAt(0);" waitTarget="group1" waitEvent="updateComplete" />
		
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(0)" value="aaa" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(1)" value="bbb" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(2)" value="aaa" />
			<AssertMethodValue method="value=application.group1.dataProvider.getItemAt(3)" value="bbb" />
			<CompareBitmap url="../properties/baselines/datagroup_property_duplicates_removing_virtual.png" target="group1" timeout="2000" />
		</body>
    </TestCase>	
	
	<TestCase testID="DataGroup_property_dataProvider_zeroItem_virtual" keywords="[DataGroup, property, layer]" description="make sure all forms of zero are displayed (SDK-20745)">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="width"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="height"  value="100" waitTarget="group1"  waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="itemRenderer" valueExpression="value=new ClassFactory(spark.skins.spark.DefaultItemRenderer)" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />			
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />				
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection([Number(0), int(0), String(0), 'zero']);" waitTarget="group1" waitEvent="updateComplete" />

	   	</setup>
    	<body>
			<CompareBitmap url="../properties/baselines/dataGroup_property_dataProvider_zeroItem_virtual.png" target="group1" timeout="2000" />
		</body>
    </TestCase>	
	
	<TestCase testID="DataGroup_property_itemRendererFunction_haloPanel_virtual" keywords="[DataGroup, property, itemRendererFunction]" description="ensure halo panel can be used in a complex item renderer (SDK-20727)">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.dataGroupItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />	
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />			
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />					
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection([new GroupButtonsComp()]);" waitTarget="group1" waitEvent="updateComplete" />
	   	</setup>
    	<body>
			<CompareBitmap url="../properties/baselines/dataGroup_property_itemRendererFunction_haloPanel_virtual.png" target="group1" />
		</body>
    </TestCase>	
	
	<TestCase testID="DataGroup_property_dataProvider_graphicElement_virtual" keywords="[DataGroup, property, dataProvider]" description="ensure graphic elements can be wrapped in a complex item renderer without RTE (SDK-20734)">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRendererFunction" valueExpression="value=application.aligningItemRendererFunction" waitTarget="group1" waitEvent="updateComplete" />	
			<SetProperty target="group1" propertyName="layout" valueExpression="value=new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />			
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />				
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection([new BasicRect()]);" waitTarget="group1" waitEvent="updateComplete" />
	   	</setup>
    	<body>
			<CompareBitmap url="../properties/baselines/dataGroup_property_dataProvider_graphicElement_virtual.png" target="group1" />
		</body>
    </TestCase>						
	
	
    <TestCase testID="DataGroup_property_itemIndex_binding_virtual" keywords="[DataGroup, property, itemIndex]" description="check that itemIndex is bindable">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRenderer" valueExpression="value=new ClassFactory(ItemIndexRendererBinding)" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection([0, 1, 2, 3]);" waitTarget="group1" waitEvent="updateComplete" />	
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />	
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />					
			<RunCode code="application.group1.dataProvider.removeItemAt(0);" waitTarget="group1" waitEvent="updateComplete" />
	   	</setup>
    	<body>
			<CompareBitmap url="../properties/baselines/DataGroup_property_itemIndex_binding_virtual.png" target="group1" />
		</body>
    </TestCase>
	
    <TestCase testID="DataGroup_property_itemIndex_setData_virtual" keywords="[DataGroup, property, itemIndex]" description="check that overriding set data works">
    	<setup>
        	<ResetComponent target="group1" className="spark.components.DataGroup" waitEvent="updateComplete" waitTarget="group1" />
			<SetProperty target="group1" propertyName="itemRenderer" valueExpression="value=new ClassFactory(ItemIndexRendererSetData)" waitTarget="group1" waitEvent="updateComplete" />
			<SetProperty target="group1" propertyName="dataProvider" valueExpression="value=new ArrayCollection([0, 1, 2, 3]);" waitTarget="group1" waitEvent="updateComplete" />	
			<SetProperty target="group1" propertyName="layout" valueExpression="value= new VerticalLayout()" waitTarget="group1" waitEvent="updateComplete" />
			<RunCode code="application.group1.layout.useVirtualLayout = true" waitTarget="group1" waitEvent="updateComplete" />						
			<RunCode code="application.group1.dataProvider.removeItemAt(0);" waitTarget="group1" waitEvent="updateComplete" />
	   	</setup>
    	<body>
			<CompareBitmap url="../properties/baselines/DataGroup_property_itemIndex_setData_virtual.png" target="group1" />
		</body>
    </TestCase>
	
  </testCases>
</UnitTester>
