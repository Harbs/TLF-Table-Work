<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<c:TransitionTemplate xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:c="comps.*"
					   width="500" height="300" initialize="onInit()">
	<fx:Script>
		<![CDATA[
			import flash.display.BitmapData;
			import flash.geom.Rectangle;
			
			import mx.core.IUIComponent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			
			import spark.utils.BitmapUtil;
			
			private var bmData:BitmapData;
			private var bounds:Rectangle;
			
			protected function onInit():void
			{
				this.valueFunction = getChange;
				this.initTrans = initMove;
				this.returnTrans = returnMove;
			}
			
			protected function getChange() : Number {
				var point:Number = getPixel();
				//I don't know why it thinks that the first pixel is at 0 right off the bat...
				if(!this.monitor.isReturn && this.monitor.initialValues.length <= 3 && point == 0){
					point = 400;
				}else if(this.monitor.isReturn && this.monitor.returnValues.length <= 3 && point == 400){
					point = 0;
				}
				return point;
			}
			
			private function getPixel() : Number {
				for(var x:int = 0; x < 400; x++){
					if(bmData.getPixel(x,25) == 0x00FFFF){
						return x;
					}
				}
				return 400;
			}
			
			override public function effectUpdate(event:EffectEvent):void {
				bounds = new Rectangle();
				bmData = BitmapUtil.getSnapshot(IUIComponent(target), bounds, true);
				super.effectUpdate(event);
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:Transition id="initMove" fromState="One" toState="Two" autoReverse="true">
			<s:Parallel>
				<s:Scale target="{target}" duration="1000"  
						effectStart="effectStart(event)"
						effectEnd="effectEnd(event)"
						effectUpdate="effectUpdate(event)"
						effectStop="effectStop(event)"
						effectRepeat="effectRepeat(event)"
						/>
				<s:Wipe target="{target}" duration="1000" direction="left"
						  effectStart="effectStart(event)"
						  effectEnd="effectEnd(event)"
						  effectUpdate="effectUpdate(event)"
						  effectStop="effectStop(event)"
						  effectRepeat="effectRepeat(event)"
						  />
			</s:Parallel>
		</s:Transition>
		<s:Transition id="returnMove" fromState="Two" toState="One" autoReverse="true">
			<s:Parallel>
				<s:Scale target="{target}" duration="2000"
						effectStart="effectStart(event)"
						effectEnd="effectEnd(event)"
						effectUpdate="effectUpdate(event)"
						effectStop="effectStop(event)"
						effectRepeat="effectRepeat(event)"
						/>
				<s:Wipe target="{target}" duration="2000" direction="right"
						  effectStart="effectStart(event)"
						  effectEnd="effectEnd(event)"
						  effectUpdate="effectUpdate(event)"
						  effectStop="effectStop(event)"
						  effectRepeat="effectRepeat(event)"
						  />
			</s:Parallel>
		</s:Transition>
	</fx:Declarations>
	<c:states>
		<s:State name="One"/>
		<s:State name="Two"/>		
	</c:states>
	<s:Group id="target" y="50" x="50" scaleY.One="2" scaleY.Two="1">
		<s:Rect id="rect" width="400" height="50">
			<s:fill.One>
				<s:SolidColor color="#0000FF"/>
			</s:fill.One>
			<s:fill.Two>
				<s:SolidColor color="#00FFFF"/>
			</s:fill.Two>
		</s:Rect>
	</s:Group>
</c:TransitionTemplate>
