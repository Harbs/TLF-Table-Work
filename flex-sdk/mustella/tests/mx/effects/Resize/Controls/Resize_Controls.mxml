<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<UnitTester 
    testDir="mx/effects/Resize/Controls/"  
    testSWF="Resize_Main.mxml" 
    xmlns:mx="http://www.adobe.com/2006/mxml" 
    xmlns="*">
    
    <!-- this set of lines form a template that must be in each unit test -->
    <mx:Script>
        <![CDATA[
        import Controls.*;
        
        public static function init(o:DisplayObject):void
        {
        }
        ]]>
    </mx:Script>
    <mx:Metadata>
        <![CDATA[
        [Mixin]
        ]]>
    </mx:Metadata>
    <!-- end of set of lines that must be in each unit test -->
    <testCases>
        <TestCase testID="Effects_Resize_Controls_Button_FromTo" keywords="[Effects, Resize, Controls, Button]" description="Resize a Button control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixButton();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 114, 294, 106, 157, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="294" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="157" />
                <AssertPixelValue target="uiComponent" x="116" y="74" value="0xF3F3F3" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_Button_By" keywords="[Effects, Resize, Controls, Button]" description="Resize a Button control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixButton();" />
                <SetProperty target="uiComponent" propertyName="width" value="114" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="106" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 180, 51, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="294" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="157" />
                <AssertPixelValue target="uiComponent" x="0" y="117" value="7500917" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_CheckBox_FromTo" keywords="[Effects, Resize, Controls, CheckBox]" description="Resize a CheckBox control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixCheckBox();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 75, 235, 65, 109, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="235" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="109" />
                <AssertPixelValue target="uiComponent" x="10" y="50" value="3686216" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_CheckBox_By" keywords="[Effects, Resize, Controls, CheckBox]" description="Resize a CheckBox control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixCheckBox();" />
                <SetProperty target="uiComponent" propertyName="width" value="75" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="65" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 160, 44, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="235" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="109" />
                <AssertPixelValue target="uiComponent" x="23" y="50" value="0x85999D" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_ColorPicker_FromTo" keywords="[Effects, Resize, Controls, ColorPicker]" description="Resize a ColorPicker control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixColorPicker();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 68, 235, 125, 221, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="235" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="221" />
                <AssertPixelValue target="uiComponent" x="229" y="217" value="5592662" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_ColorPicker_By" keywords="[Effects, Resize, Controls, ColorPicker]" description="Resize a ColorPicker control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixColorPicker();" />
                <SetProperty target="uiComponent" propertyName="width" value="68" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="125" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 167, 96, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="235" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="221" />
                <AssertPixelValue target="uiComponent" x="229" y="217" value="5592662" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_ComboBox_FromTo" keywords="[Effects, Resize, Controls, ComboBox]" description="Resize a ComboBox control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixComboBox();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 75, 155, 68, 131, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="155" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="131" />
                <AssertPixelValue target="uiComponent" x="0" y="100" value="7369332" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_ComboBox_By" keywords="[Effects, Resize, Controls, ComboBox]" description="Resize a ComboBox control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixComboBox();" />
                <SetProperty target="uiComponent" propertyName="width" value="75" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="68" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 80, 63, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="155" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="131" />
                <AssertPixelValue target="uiComponent" x="10" y="63" value="0x36565E" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_DataGrid_FromTo" keywords="[Effects, Resize, Controls, DataGrid]" description="Resize a DataGrid control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixDataGrid();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 68, 240, 64, 107, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="240" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="107" />
                <AssertPixelValue target="uiComponent" x="10" y="32" value="0xCAD2D3" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_DataGrid_By" keywords="[Effects, Resize, Controls, DataGrid]" description="Resize a DataGrid control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixDataGrid();" />
                <SetProperty target="uiComponent" propertyName="width" value="68" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="64" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 172, 43, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="240" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="107" />
                <AssertPixelValue target="uiComponent" x="223" y="88" value="7303282" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_DateChooser_FromTo" keywords="[Effects, Resize, Controls, DateChooser]" description="Resize a DateChooser control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixDateChooser();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 129, 251, 87, 155, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="251" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="155" />
                <AssertPixelValue target="uiComponent" x="14" y="14" value="6513507" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_DateChooser_By" keywords="[Effects, Resize, Controls, DateChooser]" description="Resize a DateChooser control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixDateChooser();" />
                <SetProperty target="uiComponent" propertyName="width" value="129" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="87" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 122, 68, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="251" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="155" />
                <AssertPixelValue target="uiComponent" x="86" y="13" value="0xE9EBF0" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_DateField_FromTo" keywords="[Effects, Resize, Controls, DateField]" description="Resize a DateField control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixDateField();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 107, 266, 76, 193, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="266" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="193" />
                <AssertPixelValue target="uiComponent" x="262" y="93" value="8948878" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_DateField_By" keywords="[Effects, Resize, Controls, DateField]" description="Resize a DateField control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixDateField();" />
                <SetProperty target="uiComponent" propertyName="width" value="107" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="76" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 159, 117, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="266" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="193" />
                <AssertPixelValue target="uiComponent" x="261" y="95" value="8159105" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_HorizontalList_FromTo" keywords="[Effects, Resize, Controls, HorizontalList]" description="Resize a HorizontalList control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixHorizontalList();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 133, 227, 122, 168, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="227" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="168" />
                <AssertPixelValue target="uiComponent" x="6" y="11" value="734012" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_HorizontalList_By" keywords="[Effects, Resize, Controls, HorizontalList]" description="Resize a HorizontalList control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixHorizontalList();" />
                <SetProperty target="uiComponent" propertyName="width" value="133" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="122" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 94, 46, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="227" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="168" />
                <AssertPixelValue target="uiComponent" x="6" y="10" value="0x667F85" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_HRule_FromTo" keywords="[Effects, Resize, Controls, HRule]" description="Resize a HRule control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixHRule();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 149, 284, 139, 238, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="284" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="238" />
                <AssertPixelValue target="uiComponent" x="0" y="117" value="255" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_HRule_By" keywords="[Effects, Resize, Controls, HRule]" description="Resize a HRule control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixHRule();" />
                <SetProperty target="uiComponent" propertyName="width" value="149" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="139" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 135, 99, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="284" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="238" />
                <AssertPixelValue target="uiComponent" x="0" y="117" value="255" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_HScrollBar_FromTo" keywords="[Effects, Resize, Controls, HScrollBar]" description="Resize a HScrollBar control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixHScrollBar();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 116, 347, 102, 166, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="347" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="166" />
                <AssertPixelValue target="uiComponent" x="292" y="75" value="7106160" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_HScrollBar_By" keywords="[Effects, Resize, Controls, HScrollBar]" description="Resize a HScrollBar control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixHScrollBar();" />
                <SetProperty target="uiComponent" propertyName="width" value="116" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="102" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 231, 64, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="347" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="166" />
                <AssertPixelValue target="uiComponent" x="276" y="75" value="7237746" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_HSlider_FromTo" keywords="[Effects, Resize, Controls, HSlider]" description="Resize a HSlider control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixHSlider();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 67, 206, 145, 256, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="206" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="256" />
                <AssertPixelValue target="uiComponent" x="200" y="130" value="5461847" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_HSlider_By" keywords="[Effects, Resize, Controls, HSlider]" description="Resize a HSlider control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixHSlider();" />
                <SetProperty target="uiComponent" propertyName="width" value="67" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="145" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 139, 111, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="206" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="256" />
                <AssertPixelValue target="uiComponent" x="159" y="131" value="0x808787" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_Image_FromTo" keywords="[Effects, Resize, Controls, Image]" description="Resize a Image control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixImage();" />
                <SetProperty target="uiComponent" propertyName="source" value="../../../../../Assets/Images/bwrect.jpg" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 131, 246, 89, 205, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="246" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="205" />
                <AssertPixelValue target="uiComponent" x="64" y="117" value="0xFFFFFF" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_Image_By" keywords="[Effects, Resize, Controls, Image]" description="Resize a Image control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixImage();" />
                <SetProperty target="uiComponent" propertyName="source" value="../../../../../Assets/Images/bwrect.jpg" />
                <SetProperty target="uiComponent" propertyName="width" value="131" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="89" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 115, 116, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="246" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="205" />
                <AssertPixelValue target="uiComponent" x="126" y="102" value="0xFFFFFF" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_Label_FromTo" keywords="[Effects, Resize, Controls, Label]" description="Resize a Label control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixLabel();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 60, 118, 118, 146, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="118" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="146" />
                <AssertPixelValue target="uiComponent" x="9" y="9" value="0x85999D" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_Label_By" keywords="[Effects, Resize, Controls, Label]" description="Resize a Label control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixLabel();" />
                <SetProperty target="uiComponent" propertyName="width" value="60" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="118" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 58, 28, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="118" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="146" />
                <AssertPixelValue target="uiComponent" x="43" y="8" value="0xC2CCCE" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_LinkButton_FromTo" keywords="[Effects, Resize, Controls, LinkButton]" description="Resize a LinkButton control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixLinkButton();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 61, 177, 123, 175, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="177" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="175" />
                <AssertPixelValue target="uiComponent" x="52" y="85" value="0xB333C" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_LinkButton_By" keywords="[Effects, Resize, Controls, LinkButton]" description="Resize a LinkButton control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixLinkButton();" />
                <SetProperty target="uiComponent" propertyName="width" value="61" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="123" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 116, 52, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="177" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="175" />
                <AssertPixelValue target="uiComponent" x="45" y="83" value="0xFFFFFF" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_List_FromTo" keywords="[Effects, Resize, Controls, List]" description="Resize a List control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixList();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 60, 231, 82, 220, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="231" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="220" />
                <AssertPixelValue target="uiComponent" x="19" y="54" value="0x7FCEFF" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_List_By" keywords="[Effects, Resize, Controls, List]" description="Resize a List control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixList();" />
                <SetProperty target="uiComponent" propertyName="width" value="60" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="82" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 171, 138, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="231" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="220" />
                <AssertPixelValue target="uiComponent" x="6" y="9" value="0x758C91" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_NumericStepper_FromTo" keywords="[Effects, Resize, Controls, NumericStepper]" description="Resize a NumericStepper control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixNumericStepper();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 102, 204, 132, 207, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="204" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="207" />
                <AssertPixelValue target="uiComponent" x="185" y="192" value="6382436" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_NumericStepper_By" keywords="[Effects, Resize, Controls, NumericStepper]" description="Resize a NumericStepper control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixNumericStepper();" />
                <SetProperty target="uiComponent" propertyName="width" value="102" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="132" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 102, 75, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="204" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="207" />
                <AssertPixelValue target="uiComponent" x="185" y="170" value="7040366" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_PopUpButton_FromTo" keywords="[Effects, Resize, Controls, PopUpButton]" description="Resize a PopUpButton control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixPopUpButton();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 91, 252, 94, 157, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="252" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="157" />
                <AssertPixelValue target="uiComponent" x="0" y="135" value="6777194" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_PopUpButton_By" keywords="[Effects, Resize, Controls, PopUpButton]" description="Resize a PopUpButton control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixPopUpButton();" />
                <SetProperty target="uiComponent" propertyName="width" value="91" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="94" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 161, 63, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="252" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="157" />
                <AssertPixelValue target="uiComponent" x="242" y="79" value="3881787" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_ProgressBar_FromTo" keywords="[Effects, Resize, Controls, ProgressBar]" description="Resize a ProgressBar control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixProgressBar();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 116, 289, 110, 208, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="289" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="208" />
                <AssertPixelValue target="uiComponent" x="0" y="34" value="8948620" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_ProgressBar_By" keywords="[Effects, Resize, Controls, ProgressBar]" description="Resize a ProgressBar control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixProgressBar();" />
                <SetProperty target="uiComponent" propertyName="width" value="116" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="110" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 173, 98, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="289" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="208" />
                <AssertPixelValue target="uiComponent" x="0" y="41" value="9079950" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_RadioButton_FromTo" keywords="[Effects, Resize, Controls, RadioButton]" description="Resize a RadioButton control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixRadioButton();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 68, 90, 82, 202, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="90" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="202" />
                <AssertPixelValue target="uiComponent" x="57" y="100" value="0xFFFFFF" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_RadioButton_By" keywords="[Effects, Resize, Controls, RadioButton]" description="Resize a RadioButton control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixRadioButton();" />
                <SetProperty target="uiComponent" propertyName="width" value="68" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="82" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 22, 120, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="90" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="202" />
                <AssertPixelValue target="uiComponent" x="3" y="106" value="7303795" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_RichTextEditor_FromTo" keywords="[Effects, Resize, Controls, RichTextEditor]" description="Resize a RichTextEditor control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixRichTextEditor();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 133, 282, 120, 162, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="282" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="162" />
                <AssertPixelValue target="uiComponent" x="51" y="114" value="0x7ECD" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_RichTextEditor_By" keywords="[Effects, Resize, Controls, RichTextEditor]" description="Resize a RichTextEditor control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixRichTextEditor();" />
                <SetProperty target="uiComponent" propertyName="width" value="133" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="120" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 149, 42, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="282" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="162" />
                <AssertPixelValue target="uiComponent" x="54" y="120" value="0xF3F3F3" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_Text_FromTo" keywords="[Effects, Resize, Controls, Text]" description="Resize a Text control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixText();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 133, 308, 132, 170, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="308" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="170" />
                <AssertPixelValue target="uiComponent" x="8" y="10" value="0x48666C" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_Text_By" keywords="[Effects, Resize, Controls, Text]" description="Resize a Text control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixText();" />
                <SetProperty target="uiComponent" propertyName="width" value="133" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="132" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 175, 38, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="308" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="170" />
                <AssertPixelValue target="uiComponent" x="9" y="11" value="0xFFFFFF" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_TextArea_FromTo" keywords="[Effects, Resize, Controls, TextArea]" description="Resize a TextArea control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixTextArea();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 105, 148, 76, 127, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="148" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="127" />
                <AssertPixelValue target="uiComponent" x="141" y="10" value="0x818181" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_TextArea_By" keywords="[Effects, Resize, Controls, TextArea]" description="Resize a TextArea control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixTextArea();" />
                <SetProperty target="uiComponent" propertyName="width" value="105" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="76" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 43, 51, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="148" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="127" />
                <AssertPixelValue target="uiComponent" x="9" y="39" value="0xFFFFFF" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_TextInput_FromTo" keywords="[Effects, Resize, Controls, TextInput]" description="Resize a TextInput control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixTextInput();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 95, 238, 75, 135, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="238" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="135" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_TextInput_By" keywords="[Effects, Resize, Controls, TextInput]" description="Resize a TextInput control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixTextInput();" />
                <SetProperty target="uiComponent" propertyName="width" value="95" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="75" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 143, 60, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="238" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="135" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_Tree_FromTo" keywords="[Effects, Resize, Controls, Tree]" description="Resize a Tree control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixTree();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 134, 340, 147, 209, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="340" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="209" />
                <AssertPixelValue target="uiComponent" x="40" y="14" value="0x577278" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_Tree_By" keywords="[Effects, Resize, Controls, Tree]" description="Resize a Tree control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixTree();" />
                <SetProperty target="uiComponent" propertyName="width" value="134" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="147" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 206, 62, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="340" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="209" />
                <AssertPixelValue target="uiComponent" x="49" y="54" value="0x7FCEFF" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_VideoDisplay_FromTo" keywords="[Effects, Resize, Controls, VideoDisplay]" description="Resize a VideoDisplay control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixVideoDisplay();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 107, 203, 58, 121, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="203" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="121" />
                <AssertPixelValue target="uiComponent" x="3" y="3" value="0" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_VideoDisplay_By" keywords="[Effects, Resize, Controls, VideoDisplay]" description="Resize a VideoDisplay control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixVideoDisplay();" />
                <SetProperty target="uiComponent" propertyName="width" value="107" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="58" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 96, 63, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="203" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="121" />
                <AssertPixelValue target="uiComponent" x="3" y="3" value="0" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_VRule_FromTo" keywords="[Effects, Resize, Controls, VRule]" description="Resize a VRule control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixVRule();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 124, 175, 57, 136, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="175" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="136" />
                <AssertPixelValue target="uiComponent" x="85" y="0" value="65280" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_VRule_By" keywords="[Effects, Resize, Controls, VRule]" description="Resize a VRule control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixVRule();" />
                <SetProperty target="uiComponent" propertyName="width" value="124" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="57" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 51, 79, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="175" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="136" />
                <AssertPixelValue target="uiComponent" x="85" y="0" value="65280" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_VScrollBar_FromTo" keywords="[Effects, Resize, Controls, VScrollBar]" description="Resize a VScrollBar control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixVScrollBar();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 148, 362, 101, 215, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="362" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="215" />
                <AssertPixelValue target="uiComponent" x="173" y="116" value="8027005" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_VScrollBar_By" keywords="[Effects, Resize, Controls, VScrollBar]" description="Resize a VScrollBar control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixVScrollBar();" />
                <SetProperty target="uiComponent" propertyName="width" value="148" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="101" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 214, 114, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="362" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="215" />
                <AssertPixelValue target="uiComponent" x="173" y="122" value="7895676" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_VSlider_FromTo" keywords="[Effects, Resize, Controls, VSlider]" description="Resize a VSlider control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixVSlider();" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_FromTo(application.uiComponent, 121, 237, 109, 176, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="237" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="176" />
                <AssertPixelValue target="uiComponent" x="119" y="40" value="5922655" />
            </body>
        </TestCase>
        <TestCase testID="Effects_Resize_Controls_VSlider_By" keywords="[Effects, Resize, Controls, VSlider]" description="Resize a VSlider control.">
            <setup>
                <RunCode code="application.uiComponent = new TrixVSlider();" />
                <SetProperty target="uiComponent" propertyName="width" value="121" expectError="False" />
                <SetProperty target="uiComponent" propertyName="height" value="109" expectError="False" />
                <ResetComponent target="testPanel" className="Containers.TrixPanel" waitEvent="updateComplete" waitTarget="testPanel" />
                <RunCode code="application.testPanel.addChild(application.uiComponent)" waitEvent="updateComplete" waitTarget="testPanel" />
            </setup>
            <body>
                <RunCode code="application.ApplyEffect_By(application.uiComponent, 116, 67, 250);" waitEvent="effectEnd" waitTarget="testEffect" />
                <AssertPropertyValue target="uiComponent" propertyName="width" value="237" />
                <AssertPropertyValue target="uiComponent" propertyName="height" value="176" />
                <AssertPixelValue target="uiComponent" x="121" y="6" value="8488839" />
            </body>
        </TestCase>
    </testCases>
</UnitTester>
