<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<UnitTester testDir="mx/styles/AdvancedStyleClient/Styles/"  
			xmlns:mx="http://www.adobe.com/2006/mxml" 
			xmlns:s="library://ns.adobe.com/flex/mx" xmlns="*" 
			testSWF="ADV_styleManager_loadClassStyle_main.mxml">
	
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;		
			import assets.styleTest.ADVStyleTestConstants;
			import assets.styleTest.ADVStyleTestEvent;
			
			public static function init(o:DisplayObject):void
			{
				
			}
			
			
		]]>
	</mx:Script>
	
	<mx:Metadata>
		<![CDATA[
		[Mixin]
		]]>
	</mx:Metadata>
	
	<testCases>
		<!--testcases style for initial value-->
		<TestCase testID="ADV_styleManager_loadClassStyle_test1" 
				  description="testcases style for initial value" 
				  keywords="[AdvancedStyleClient, StyleManager]">
			<setup>
				<ResetComponent target="label" className="spark.components.Label" waitEvent="updateComplete" />
			</setup>
			<body>
				<!--Verify style set by using local Class Selector using class value. -->
				<AssertMethodValue method="value=application.currentStyleTest.getStyle('teststyle_1_string_noinh')" value="cssString" />
				<AssertMethodValue method="value=application.currentStyleTest.getStyle('teststyle_3_uint_inh')" valueExpression="value=34" />
				<AssertMethodValue method="value=application.currentStyleTest.getStyle('teststyle_5_format_length_noinh')" 
								   valueExpression="value=50" />
				
				<!--Verify those un-setting styles using default value.-->
				<AssertMethodValue method="value=application.currentStyleTest.getStyle('teststyle_2_number_noinh')" 
								   valueExpression="value=undefined"/>
				<AssertMethodValue method="value=application.currentStyleTest.getStyle('teststyle_6_format_time_noinh')" 
								   valueExpression="value= 5000" />
				<AssertMethodValue method="value=application.currentStyleTest.getStyle('teststyle_15_state_string_noinh')" 
								   value="defaultStateString"/>
			</body>
		</TestCase>
		
		<!--testcases for unloading Class Selector style CSS declaration using styleManager  API-->
		<TestCase testID="ADV_styleManager_loadClassStyle_test2" 
				  description="testcases for unloading Class Selector style CSS declaration using styleManager  API" 
				  keywords="[AdvancedStyleClient, StyleManager, unload style CSS declaration, class selector]">
			<setup>
				<RunCode code="application.loadStyle()" waitEvent="testStylesLoadComplete" />
				<RunCode code="application.unloadStyle()"  />
				<Pause timeout="{ADVStyleTestConstants.pauseTime}" />
			</setup>
			<body>
				<!--Verify those styles compound with local style and loaded at runtime style using local css value after unloading. -->
				<AssertMethodValue method="value=application.unloadStyleTest.getStyle('teststyle_1_string_noinh')" value="cssString" />
				
				<!--Verify style set by using local Class Selector using class value after unloading. -->
				<AssertMethodValue method="value=application.unloadStyleTest.getStyle('teststyle_3_uint_inh')" valueExpression="value=34" />
				<AssertMethodValue method="value=application.unloadStyleTest.getStyle('teststyle_5_format_length_noinh')" 
								   valueExpression="value=50" />
				
				<!--Verify style not set by using local Class Selector using default value after unloading. -->
				<AssertMethodValue method="value=application.unloadStyleTest.getStyle('teststyle_2_number_noinh')" 
								   valueExpression="value=undefined"/>
				<AssertMethodValue method="value=application.unloadStyleTest.getStyle('teststyle_6_format_time_noinh')" 
								   valueExpression="value=5000"/>
				<AssertMethodValue method="value=application.unloadStyleTest.getStyle('teststyle_15_state_string_noinh')"
								   value="defaultStateString"/>
			</body>
		</TestCase>
		
		<!--testcases for loading Class Selector style CSS declaration using styleManager  API-->		
		<TestCase testID="ADV_styleManager_loadClassStyle_test3" 
				  description="testcases for loading Class Selector style CSS declaration using styleManager  API" 
				  keywords="[AdvancedStyleClient, StyleManager, load style CSS declaration, class selector]">
			<setup>
				<RunCode code="application.loadStyle()" waitEvent="testStylesLoadComplete" />
			</setup>
			<body>
				<!--the next 6 Assert test loading a same name Class Selector style CSS declaration using styleManager  API-->
				
				<!--Verify those styles compound with local style and loaded at runtime style using loaded css value. -->
				<AssertMethodValue method="value=application.loadSameClassStyleTest.getStyle('teststyle_1_string_noinh')" value="extString" />
				
				<!--Verify those styles loaded at runtime using loaded css value. -->
				<AssertMethodValue method="value=application.loadSameClassStyleTest.getStyle('teststyle_2_number_noinh')" 
								   valueExpression="value=777777"/>
				<AssertMethodValue method="value=application.loadSameClassStyleTest.getStyle('teststyle_6_format_time_noinh')" 
								   valueExpression="value=2012"/>
				
				<!--Verify those local Class Selector style using local value. -->
				<AssertMethodValue method="value=application.loadSameClassStyleTest.getStyle('teststyle_3_uint_inh')" 
								   valueExpression="value=34" />
				<AssertMethodValue method="value=application.loadSameClassStyleTest.getStyle('teststyle_5_format_length_noinh')" 
								   valueExpression="value=50" />
				
				<!--Verify those un-setting styles using default value.-->
				<AssertMethodValue method="value=application.loadSameClassStyleTest.getStyle('teststyle_15_state_string_noinh')" 
								   value="defaultStateString"/>
				
				
				<!--the next 6 Assert test loading a different name Class Selector style CSS declaration using styleManager  API-->
				
				<!--Verify those styles compound with local style and loaded at runtime style using loaded css value. -->
				<AssertMethodValue method="value=application.loadDiferClassStyleTest.getStyle('teststyle_1_string_noinh')" value="cjString" />
				
				<!--Verify those styles loaded at runtime using loaded css value. -->
				<AssertMethodValue method="value=application.loadDiferClassStyleTest.getStyle('teststyle_2_number_noinh')" 
								   valueExpression="value=55555"/>
				<AssertMethodValue method="value=application.loadDiferClassStyleTest.getStyle('teststyle_6_format_time_noinh')" 
								   valueExpression="value=2013"/>
				
				<!--Verify those un-setting by loaded css styles using default value.-->
				<AssertMethodValue method="value=application.loadDiferClassStyleTest.getStyle('teststyle_3_uint_inh')" 
								   valueExpression="value=undefined" />
				<AssertMethodValue method="value=application.loadDiferClassStyleTest.getStyle('teststyle_5_format_length_noinh')" 
								   valueExpression="value=30" />
				<AssertMethodValue method="value=application.loadDiferClassStyleTest.getStyle('teststyle_15_state_string_noinh')" 
								   value="defaultStateString"/>
			</body>
			<cleanup>
				<RunCode code="application.unloadStyle()"  />
				<Pause timeout="{ADVStyleTestConstants.pauseTime}" />
			</cleanup>
		</TestCase>
	</testCases>
</UnitTester>