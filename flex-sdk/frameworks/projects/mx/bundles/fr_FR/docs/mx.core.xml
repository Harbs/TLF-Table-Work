<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.core"><apiName>mx.core</apiName><apiDetail/><apiClassifier id="mx.core:LayoutContainer"><apiName>LayoutContainer</apiName><shortdesc>
  Flex définit un conteneur par défaut ou un conteneur d’application, permettant d’ajouter du contenu au module ou à l’application sans définir explicitement un autre conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="property" name="y"/><Exclude kind="property" name="x"/><Exclude kind="property" name="toolTip"/><Exclude kind="property" name="tabIndex"/><Exclude kind="property" name="label"/><Exclude kind="property" name="icon"/><Exclude kind="property" name="direction"/><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure supérieure et la zone de contenu. 
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure inférieure et la zone de contenu.  
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants, verticalement. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est 6.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants dans le sens horizontal. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="String">
<description>
  Alignement vertical des enfants du conteneur. Valeurs possibles : <codeph>"top"</codeph>, <codeph>"middle"</codeph> et <codeph>"bottom"</codeph>. La valeur par défaut est <codeph>"top"</codeph>, mais certains conteneurs, dont ButtonBar, ControlBar, LinkBar et ToggleButtonBar, ont des valeurs par défaut différentes.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="String">
<description>
  Alignement horizontal des enfants du conteneur. Valeurs possibles : <codeph>"left"</codeph>, <codeph>"center"</codeph> et <codeph>"right"</codeph>. La valeur par défaut est <codeph>"left"</codeph>, mais certains conteneurs, dont ButtonBar et ToggleButtonBar, ont des valeurs par défaut différentes.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Application&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Application
    <strong>Properties</strong>
    layout="vertical|horizontal|absolute"
    xmlns:<i>No default</i>="<i>No default</i>"
 
    <strong>Styles</strong> 
    horizontalAlign="center|left|right"
    horizontalGap="8"
    paddingBottom="0"
    paddingTop="0"
    verticalAlign="top|bottom|middle"
    verticalGap="6"
  
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.containers.utilityClasses:IConstraintLayout</apiBaseInterface><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Flex définit un conteneur par défaut ou un conteneur d’application, permettant d’ajouter du contenu au module ou à l’application sans définir explicitement un autre conteneur. Flex crée ce conteneur à partir de <codeph>&lt;mx:Application></codeph>, la première balise dans un fichier MXML d’application ou de <codeph>&lt;mx:Module></codeph>, la première balise dans un fichier MXML de module. Bien qu’il semble commode d’utiliser le conteneur Application ou Module comme seul conteneur dans l’application, dans la plupart des cas vous définissez explicitement au moins un conteneur supplémentaire avant d’ajouter les commandes à l’application ou au module. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links><apiConstructor id="mx.core:LayoutContainer:LayoutContainer"><apiName>LayoutContainer</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.core:LayoutContainer:protected:boxLayoutClass"><apiName>boxLayoutClass</apiName><shortdesc>
      Sous-classe mx.containers.utilityClasses.Layout effectuant la présentation.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      Sous-classe mx.containers.utilityClasses.Layout effectuant la présentation.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutContainer:protected:canvasLayoutClass"><apiName>canvasLayoutClass</apiName><shortdesc>
      Sous-classe mx.containers.utilityClasses.Layout effectuant la présentation.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      Sous-classe mx.containers.utilityClasses.Layout effectuant la présentation.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutContainer:constraintColumns:get"><apiName>constraintColumns</apiName><shortdesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintColumns">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintColumns">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutContainer:constraintRows:get"><apiName>constraintRows</apiName><shortdesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintRows">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintRows">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutContainer:layout:get"><apiName>layout</apiName><shortdesc>
      Spécifie le mécanisme de présentation utilisé pour cette application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="layoutChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"vertical"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le mécanisme de présentation utilisé pour cette application. Les applications peuvent utiliser un positionnement <codeph>"vertical"</codeph>, <codeph>"horizontal"</codeph> ou <codeph>"absolute"</codeph>. Le positionnement vertical place les composants enfant verticalement, du haut de l’application vers le bas, dans l’ordre spécifié. Le positionnement horizontal place les composants enfant horizontalement, de la gauche de l’application vers la droite, dans l’ordre spécifié. Le positionnement absolu ne réalise pas de mise en forme automatique et vous oblige à définir explicitement la position de chaque composant enfant. 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:Repeater"><apiName>Repeater</apiName><shortdesc>
  La classe Repeater est l’objet d’exécution qui correspond à la balise &amp;lt;mx:Repeater&amp;gt;.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The &lt;Repeater&gt; class has the following properties:</p>
 
  <pre>
  &lt;mx:Repeater
    <strong>Properties</strong>
    id="<i>No default</i>"
    childDescriptors="<i>No default</i>"
    count="<i>No default</i>"
    dataProvider="<i>No default</i>"
    recycleChildren="false|true"
    startingIndex="0"
 
    <strong>Events</strong>
    repeat="<i>No default</i>"
    repeatEnd="<i>No default</i>"
    repeatStart="<i>No default</i>"
  &gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IRepeater</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe Repeater est l’objet d’exécution qui correspond à la balise <codeph>&lt;mx:Repeater></codeph>. Elle crée plusieurs occurrences de ses sous-composants en fonction de son composant dataProvider. Les composants répétés peuvent correspondre à tout type standard ou personnalisé de commandes ou de conteneurs.
 
  <p>La balise <codeph>&lt;mx:Repeater></codeph> peut être utilisée partout où une balise de commande ou de conteneur est autorisée, à l’exception de la balise de conteneur <codeph>&lt;mx:Application></codeph>. Pour répéter un composant d’interface utilisateur, placez sa balise dans la balise <codeph>&lt;mx:Repeater></codeph>. Vous pouvez utiliser plusieurs balises <codeph>&lt;mx:Repeater></codeph> dans un document MXML. Vous pouvez également imbriquer des balises <codeph>&lt;mx:Repeater></codeph>.</p>
 
  <p>Vous ne pouvez pas utiliser la balise <codeph>&lt;mx:Repeater></codeph> pour les objets qui n’étendent pas la classe UIComponent.</p>
 
  </apiDesc><example conref="RepeaterExample.mxml"><swfblock conref="examples/RepeaterExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.core.xml#Container"><linktext>mx.core.Container</linktext></link><link href="" invalidHref="mx.core.UIComponent.xml"><linktext>mx.core.UIComponent</linktext></link><link href="" invalidHref="mx.core.UIComponentDescriptor.xml"><linktext>mx.core.UIComponentDescriptor</linktext></link><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links><adobeApiEvent id="mx.core:Repeater_mx.events.FlexEvent.REPEAT_START_repeatStart"><apiName>repeatStart</apiName><shortdesc>
  Distribué lorsque Flex commence le traitement de la propriété dataProvider et commence la création des sous-composants spécifiés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.REPEAT_START</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque Flex commence le traitement de la propriété <codeph>dataProvider</codeph> et commence la création des sous-composants spécifiés. Cet événement est déclenché même si la propriété <codeph>dataProvider</codeph> est vide ou <codeph>null</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Repeater_mx.events.FlexEvent.REPEAT_END_repeatEnd"><apiName>repeatEnd</apiName><shortdesc>
  Distribué après la création de tous les sous-composants d’une opération de répétition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.REPEAT_END</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après la création de tous les sous-composants d’une opération de répétition. Cet événement est déclenché même si la propriété <codeph>dataProvider</codeph> est vide ou <codeph>null</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Repeater_mx.events.FlexEvent.REPEAT_repeat"><apiName>repeat</apiName><shortdesc>
  Distribué chaque fois qu’un élément est traité et que les propriétés currentIndex et currentItem sont actualisées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.REPEAT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué chaque fois qu’un élément est traité et que les propriétés <codeph>currentIndex</codeph> et <codeph>currentItem</codeph> sont actualisées.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:Repeater:Repeater"><apiName>Repeater</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:Repeater:executeChildBindings"><apiName>executeChildBindings</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Repeater:initializeRepeater"><apiName>initializeRepeater</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>container</apiItemName><apiType value="mx.core:IContainer"/></apiParam><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="mx.core:Repeater:childDescriptors"><apiName>childDescriptors</apiName><shortdesc>
      Tableau d’objets UIComponentDescriptor pour les enfants de cet objet Repeater.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau d’objets UIComponentDescriptor pour les enfants de cet objet Repeater.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Repeater:container:get"><apiName>container</apiName><shortdesc>
      Conteneur qui contient cet objet Repeater.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:IContainer"/></apiValueDef><apiDesc>
      Conteneur qui contient cet objet Repeater.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Repeater:count:get"><apiName>count</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="countChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
     </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:Repeater:currentIndex:get"><apiName>currentIndex</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="nextRepeaterItem"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
     </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:Repeater:currentItem:get"><apiName>currentItem</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="nextRepeaterItem"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
     </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:Repeater:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="collectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
     </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:Repeater:recycleChildren:get"><apiName>recycleChildren</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:Repeater:startingIndex:get"><apiName>startingIndex</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="startingIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
     </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.core:Application"><apiName>Application</apiName><shortdesc>
  Flex définit un conteneur par défaut ou un conteneur d’application, permettant d’ajouter du contenu à l’application sans définir explicitement un autre conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="property" name="y"/><Exclude kind="property" name="x"/><Exclude kind="property" name="toolTip"/><Exclude kind="property" name="tabIndex"/><Exclude kind="property" name="label"/><Exclude kind="property" name="icon"/><Exclude kind="property" name="direction"/><Alternative owner="mx.core:Application" replacement="spark.components.Application" since="4.0">
	</Alternative><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure supérieure de l’application et sa zone de contenu. 
   </description>
<default>24
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure inférieure de l’application et sa zone de contenu.  
   </description>
<default>24
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="backgroundGradientColors" owner="mx.core:Application" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Spécifie les couleurs utilisées pour la teinte du dégradé de remplissage d’arrière-plan de l’application. Il est conseillé de le définir sur un tableau de deux valeurs uint spécifiant les couleurs RVB. Les éléments 0 et 1 indiquent les valeurs de début et de fin d’un dégradé de couleurs. Pour un arrière-plan de couleur unie, définissez la même valeur de couleur pour les éléments 0 et 1. La valeur <codeph>undefined</codeph> signifie que le dégradé d’arrière-plan est généré en fonction de la propriété <codeph>backgroundColor</codeph>.
   </description>
<default>undefined 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="backgroundGradientAlphas" owner="mx.core:Application" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Spécifie les valeurs de transparence alpha utilisées pour le dégradé de remplissage d’arrière-plan de l’application. Définissez cette propriété sur un tableau contenant deux nombres. Les éléments 0 et 1 spécifient les valeurs de début et de fin d’un dégradé alpha. 
   </description>
<default>[ 1.0, 1.0 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="yes" name="modalTransparencyDuration" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  Durée, en millisecondes, de l’effet de transparence modale lu lorsqu’une fenêtre modale s’ouvre ou se ferme.
 
  </description>
<default>100
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="modalTransparencyColor" owner="mx.core:Application" playerVersion="Flash9" type="uint">
<description>
  Couleur du calque d’incrustation modal. Ce style est utilisé conjointement avec le style <codeph>modalTransparency</codeph> pour déterminer la coloration appliquée à l’application lorsqu’une fenêtre modale s’ouvre.
 
  </description>
<default>#DDDDDD
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="modalTransparencyBlur" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  Flou appliqué à l’application lorsqu’une fenêtre modale s’ouvre. L’effet de flou adoucit les détails d’une image. 
  
  </description>
<default>3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.filters.BlurFilter.xml"><linktext>flash.filters.BlurFilter</linktext></link></related-links></style><style inherit="yes" name="modalTransparency" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  La modalité des composants lancés par la classe PopUpManager est simulée en créant une grande incrustation translucide sous le composant. En raison de la manière dont les objets translucides apparaissent, les objets qui se trouvent sous l’incrustation peuvent apparaître légèrement estompés. La transparence réelle peut être définie en modifiant la valeur <codeph>modalTransparency</codeph> et en lui attribuant une valeur comprise entre 0.0 (transparence totale) et 1.0 (opacité totale). Vous pouvez également définir la couleur de l’incrustation, en modifiant le style <codeph>modalTransparencyColor</codeph>.
 
  </description>
<default>0.5
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;mx:Application&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;mx:Application
    <strong>Properties</strong>
    application="<i>No default</i>"
    controlBar="null"
    frameRate="24"
    historyManagementEnabled="true|false"
    layout="vertical|horizontal|absolute"
    pageTitle"<i>No default</i>"
    preloader="<i>No default</i>"
    resetHistory="false|true"
    scriptRecursionLimit="1000"
    scriptTimeLimit="60"
    usePreloader="true|false"
    viewSourceURL=""
    xmlns:<i>No default</i>="<i>No default</i>"
 
    <strong>Styles</strong> 
    backgroundGradientAlphas="[ 1.0, 1.0 ]"
    backgroundGradientColors="undefined"
    horizontalAlign="center|left|right"
    horizontalGap="8"
    modalTransparency="0.5"
    modalTransparencyBlur="3"
    modalTransparencyColor="#DDDDDD"
    modalTransparencyDuration="100"
    paddingBottom="24"
    paddingTop="24"
    verticalAlign="top|bottom|middle"
    verticalGap="6"
  
    <strong>Events</strong>
    applicationComplete="<i>No default</i>"
    error="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:LayoutContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Flex définit un conteneur par défaut ou un conteneur d’application, permettant d’ajouter du contenu à l’application sans définir explicitement un autre conteneur. Flex crée ce conteneur à partir de la balise <codeph>&lt;mx:Application></codeph>, la première balise dans une application MXML. Bien qu’il semble commode d’utiliser le conteneur Application comme seul conteneur dans l’application, dans la plupart des cas vous définissez explicitement au moins un conteneur supplémentaire avant d’ajouter les commandes à l’application. 
   <p>Les applications prennent en charge un style ordinaire prédéfini qui définit un arrière-plan blanc, un alignement à gauche et supprime toutes les marges. Pour utiliser ce style, effectuez les opérations suivantes :</p>
   <pre>
    &lt;mx:Application styleName="plain" />
  </pre>
   <p>Cela revient à définir les attributs de style suivants :</p>
   <pre>
    backgroundColor="0xFFFFFF"
    horizontalAlign="left"
    paddingLeft="0"
    paddingTop="0"
    paddingBottom="0"
    paddingRight="0"
  </pre>
 
  </apiDesc><example conref="SimpleApplicationExample.mxml"><swfblock conref="examples/SimpleApplicationExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.managers.CursorManager.xml"><linktext>mx.managers.CursorManager</linktext></link><link href="" invalidHref="mx.managers.LayoutManager.xml"><linktext>mx.managers.LayoutManager</linktext></link><link href="" invalidHref="mx.managers.SystemManager.xml"><linktext>mx.managers.SystemManager</linktext></link><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links><adobeApiEvent id="mx.core:Application_flash.events.ErrorEvent.ERROR_error"><apiName>error</apiName><shortdesc>
  Distribué lorsqu’un appel HTTPService échoue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ErrorEvent.ERROR</apiEventType><adobeApiEventClassifier>flash.events.ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un appel HTTPService échoue.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Application_mx.events.FlexEvent.APPLICATION_COMPLETE_applicationComplete"><apiName>applicationComplete</apiName><shortdesc>
  Distribué après l’initialisation de l’application, traité par le gestionnaire LayoutManager et lié à la liste d’affichage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.APPLICATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après l’initialisation de l’application, traité par le gestionnaire LayoutManager et lié à la liste d’affichage.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:Application:Application"><apiName>Application</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:Application:addToCreationQueue"><apiName>addToCreationQueue</apiName><shortdesc>
      Ajout d’un conteneur à la file d’attente de création de l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiType value="Object"/><apiDesc>ID du conteneur à ajouter à la file d’attente ou pointeur vers le conteneur lui-même.
           </apiDesc></apiParam><apiParam><apiItemName>preferredIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>(Facultatif) Entier positif qui détermine la position du conteneur dans la file d’attente par rapport aux autres conteneurs actuellement dans la file d’attente.
           </apiDesc></apiParam><apiParam><apiItemName>callbackFunc</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Ce paramètre est ignoré.
           </apiDesc></apiParam><apiParam><apiItemName>parent</apiItemName><apiType value="mx.core:IFlexDisplayObject"/><apiData>null</apiData><apiDesc>Ce paramètre est ignoré.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute un conteneur à la file d’attente de création de l’application.
           <p>Ce mécanisme permet d’instancier et de tracer le contenu d’un conteneur de manière ordonnée. La propriété <codeph>creationPolicy</codeph> du conteneur doit être définie sur <codeph>"none"</codeph> avant d’appeler cette fonction.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:Application:controlBar"><apiName>controlBar</apiName><shortdesc>
      Composant ApplicationControlBar pour cette application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:IUIComponent"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Composant ApplicationControlBar pour cette application. 
           </apiDesc></apiValueDetail><related-links><link href="mx.containers.xml#ApplicationControlBar"><linktext>mx.containers.ApplicationControlBar</linktext></link></related-links></apiValue><apiValue id="mx.core:Application:frameRate"><apiName>frameRate</apiName><shortdesc>
        Spécifie la cadence d’images de l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>24
      
      </apiDefaultValue></apiValueDef><apiDesc>
        Spécifie la cadence d’images de l’application.
        <p>Remarque : cette propriété ne peut pas être définie par le code ActionScript. Elle doit être définie dans le code MXML.</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:historyManagementEnabled"><apiName>historyManagementEnabled</apiName><shortdesc>
      Si la valeur est false, le gestionnaire d’historique est désactivé. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>false</codeph>, le gestionnaire d’historique est désactivé. La définition sur false est recommandée lors de l’utilisation du gestionnaire BrowserManager.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:pageTitle"><apiName>pageTitle</apiName><shortdesc>
        Spécifie une chaîne qui apparaît dans la barre de titre du navigateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
        Spécifie une chaîne qui s’affiche dans la barre de titre du navigateur. Cette propriété fournit la même fonctionnalité que la balise HTML <codeph>&lt;title></codeph>.
             <p>Remarque : cette propriété ne peut pas être définie par le code ActionScript. Elle doit être définie dans le code MXML. La valeur définie dans le code MXML est conçue pour une utilisation avec un outil d’actualisation des modèles HTML fournis avec SDK.</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:preloaderChromeColor"><apiName>preloaderChromeColor</apiName><shortdesc>
        Spécifie la couleur de base utilisée par le composant de préchargement par défaut. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="uint"/></apiValueDef><apiDesc>
        Spécifie la couleur de base utilisée par le composant de préchargement par défaut. Cette propriété a le même effet que le style <codeph>chromeColor</codeph> utilisé par les habillages Spark. En règle générale cette propriété doit être définie sur la même valeur que le style <codeph>chromeColor</codeph> utilisé par l’application.
        
        <p>Remarque : cette propriété ne peut pas être définie par le code ActionScript. Elle doit être définie dans le code MXML.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:preloader"><apiName>preloader</apiName><shortdesc>
      Le conteneur d’application prend en charge un preloader d’application qui utilise une barre de progression de téléchargement pour indiquer l’avancement du téléchargement et de l’initialisation du fichier SWF d’une application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      Le conteneur d’application prend en charge un preloader d’application qui utilise une barre de progression de téléchargement pour indiquer l’avancement du téléchargement et de l’initialisation du fichier SWF d’une application. Par défaut, le preloader d’application est activé. Le preloader contrôle le nombre d’octets téléchargés et met à jour la barre de progression en permanence. 
           <p>Utilisez cette propriété pour indiquer le chemin d’accès d’un composant qui définit un indicateur de progression personnalisé. Pour créer un indicateur de progression personnalisé, vous créez généralement une sous-classe de la classe DownloadProgressBar ou de la classe flash.display.Sprite qui implémente l’interface mx.preloaders.IPreloaderDisplay. </p>
           <p><b>Remarque :</b> cette propriété ne peut pas être définie par du code ActionScript. Elle doit être définie par du code MXML.</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.preloaders.DownloadProgressBar.xml"><linktext>mx.preloaders.DownloadProgressBar</linktext></link><link href="" invalidHref="flash.display.Sprite.xml"><linktext>flash.display.Sprite</linktext></link><link href="" invalidHref="mx.preloaders.IPreloaderDisplay.xml"><linktext>mx.preloaders.IPreloaderDisplay</linktext></link></related-links></apiValue><apiValue id="mx.core:Application:resetHistory"><apiName>resetHistory</apiName><shortdesc>
      Si la valeur est true, l’état d’historique de l’application est restauré vers son état initial à chaque nouveau chargement de l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, l’état d’historique de l’application est restauré vers son état initial à chaque nouveau chargement de l’application. Les applications sont rechargées lorsque l’une des actions suivantes se produit :
      <ul>
        <li>L’utilisateur clique sur le bouton Actualiser du navigateur.</li>
        <li>L’utilisateur accède à une autre page Web, puis clique sur le bouton Précédent du navigateur pour revenir à l’application Flex.</li>
        <li>L’utilisateur charge une application Flex à partir du menu Favoris ou Signets du navigateur.</li>
      </ul>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:scriptRecursionLimit"><apiName>scriptRecursionLimit</apiName><shortdesc>
        Spécifie la profondeur maximale de la pile d’appels de Flash Player ou AIR avant l’arrêt du lecteur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/><apiDefaultValue>1000
      
      </apiDefaultValue></apiValueDef><apiDesc>
        Spécifie la profondeur maximale de la pile d’appels Flash Player ou AIR avant l’arrêt du lecteur. Il s’agit essentiellement de la limite de débordement de pile.
        <p>Remarque : cette propriété ne peut pas être définie par le code ActionScript. Elle doit être définie dans le code MXML.</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:scriptTimeLimit"><apiName>scriptTimeLimit</apiName><shortdesc>
        Spécifie la durée maximale (en secondes) pendant laquelle un gestionnaire d’événements ActionScript peut s’exécuter avant que Flash Player ou AIR ne suppose qu’il est arrêté, et l’annule.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>60
      
      </apiDefaultValue></apiValueDef><apiDesc>
        Spécifie la durée maximale d’exécution d’un gestionnaire d’événement ActionScript, en secondes, au bout de laquelle Flash Player ou AIR suppose qu’il est bloqué et abandonne l’opération. La valeur maximale autorisée est 60 secondes.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:usePreloader"><apiName>usePreloader</apiName><shortdesc>
        Si la valeur est true, provoque l’affichage du fichier de préchargement de l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
        Si la valeur est <codeph>true</codeph>, spécifie l’affichage du préchargement de l’application.
        <p>Remarque : cette propriété ne peut pas être définie par le code ActionScript. Elle doit être définie dans le code MXML.</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:application:get"><apiName>application</apiName><shortdesc>
      Référence à l’application de plus haut niveau.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Object"/><apiDeprecated replacement="FlexGlobals.topLevelApplication" sinceVersion="4.0"/></apiValueDef><apiDesc>
      Référence à l’application de plus haut niveau.
           <p>En général, il peut exister une hiérarchie d’objets d’application, car une application peut utiliser un contrôle SWFLoader pour charger dynamiquement une autre application. La propriété <codeph>parentApplication</codeph> d’un composant UIComponent peut être utilisée pour accéder à la sous-application de résidence du composant UIComponent et pour remonter la hiérarchie jusqu’à l’application de plus haut niveau.</p>
      
      <p>Cette propriété est déconseillée depuis Flex 4. Notez que cette propriété renvoie toujours des applications de type mx.core.Application et mx.core.WindowedApplication comme dans les versions précédentes. A partir de Flex 4, elle renvoie également des applications de type spark.components.Application ou spark.components.WindowedApplication. </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:parameters:get"><apiName>parameters</apiName><shortdesc>
      La propriété parameters renvoie un objet contenant des paires nom-valeur représentant les paramètres fournis à cette application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      La propriété parameters renvoie un objet contenant des paires nom-valeur représentant les paramètres fournis à cette application.
           <p>L’utilisation d’une boucle for-in permet d’extraire tous les noms et toutes les valeurs de l’objet parameters.</p>
           <p>Il existe deux sources de paramètres : la chaîne de requête de l’URL de l’application et la valeur du paramètre HTML FlashVars (qui affecte uniquement l’application principale).</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:url:get"><apiName>url</apiName><shortdesc>
      URL à partir de laquelle le fichier SWF de l’application a été chargé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      URL à partir de laquelle le fichier SWF de l’application a été chargé.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:viewSourceURL:get"><apiName>viewSourceURL</apiName><shortdesc>
      URL à laquelle la source de l’application peut être affichée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      URL à laquelle la source de l’application peut être affichée. Le fait de définir cette propriété provoque l’insertion d’un élément de menu « Afficher la source » dans le menu contextuel par défaut de l’application. La sélection de l’élément de menu ouvre l’URL <codeph>viewSourceURL</codeph> dans une nouvelle fenêtre.
           <p>La propriété <codeph>viewSourceURL</codeph> doit être définie à l’aide de MXML et non à l’aide d’ActionScript, comme le montre l’exemple suivant :</p>
           <pre>
        &lt;mx:Application viewSourceURL="http://path/to/source">
          ...
        &lt;/mx:Application></pre>
           
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ContainerLayout"><apiName>ContainerLayout</apiName><shortdesc>
  La classe ContainerLayout définit les valeurs de constante pour la propriété de mise en forme des classes conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ContainerLayout définit les valeurs de constante pour la propriété <codeph>layout</codeph> des classes conteneur.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.containers.xml#Panel/layout"><linktext>mx.containers.Panel.layout</linktext></link><link href="mx.core.xml#Application/layout"><linktext>mx.core.Application.layout</linktext></link></related-links><apiValue id="mx.core:ContainerLayout:ABSOLUTE"><apiName>ABSOLUTE</apiName><shortdesc>
	  Utilisez la présentation absolue pour le contenu de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>absolute</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Utilisez la présentation absolue pour le contenu de ce conteneur. Vous êtes responsable de la spécification explicite de la position de chaque enfant. 
	 
	  <p>La manière la plus simple consiste à spécifier les propriétés <codeph>x</codeph>, <codeph>y</codeph>, <codeph>width</codeph> et <codeph>height</codeph> de chaque enfant.</p>
	 
	  <p>Les propriétés <codeph>width</codeph> et <codeph>height</codeph> peuvent être spécifiées en tant que valeur de pourcentage dans le code MXML (dans ActionScript, vous devez définir les propriétés <codeph>percentWidth</codeph> et <codeph>percentHeight</codeph>).</p>
	 
	  <p>Si vous ne spécifiez pas la propriété <codeph>width</codeph> ou <codeph>percentWidth</codeph> pour un enfant, sa propriété <codeph>measuredWidth</codeph> déterminée automatiquement par sa méthode <codeph>measure()</codeph> est utilisée. Cela s’applique également à sa hauteur.</p>
	 
	  <p>Un autre moyen de présentation consiste à utiliser les styles d’ancrage <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right </codeph>, <codeph>bottom</codeph>, <codeph>horizontalCenter</codeph> et <codeph>verticalCenter</codeph> sur les enfants pour les ancrer sur les côtés ou le centre d’un conteneur.</p>
	 
	  <p>Lorsque vous utilisez la présentation absolue, les styles <codeph>paddingLeft</codeph>, <codeph>paddingTop</codeph>, <codeph>paddingRight</codeph>, <codeph>paddingBottom</codeph>, <codeph>horizontalGap</codeph>, <codeph>verticalGap</codeph>, <codeph>horizontalAlign</codeph> et <codeph>verticalAlign</codeph> du conteneur sont ignorés.</p> 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerLayout:HORIZONTAL"><apiName>HORIZONTAL</apiName><shortdesc>
	  Utilisez la mise en forme horizontale pour le contenu de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontal</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Utilisez la mise en forme horizontale pour le contenu de ce conteneur. Le conteneur place automatiquement ses enfants sur une seule ligne.
	 
	  <p>Si vous ne spécifiez pas la propriété <codeph>width</codeph> ou <codeph>percentWidth</codeph> pour un enfant, sa propriété <codeph>measuredWidth</codeph> déterminée automatiquement par sa méthode <codeph>measure()</codeph> est utilisée. Cela s’applique également à sa hauteur.</p>
	 
	  <p>Vous pouvez contrôler l’espacement entre les enfants avec le style <codeph>horizontalGap</codeph> et leur alignement avec le style <codeph>verticalAlign</codeph>. Les styles <codeph>paddingLeft</codeph>, <codeph>paddingTop</codeph>, <codeph>paddingRight</codeph> et <codeph>paddingBottom</codeph> contrôlent l’espace entre la bordure du conteneur et les enfants.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerLayout:VERTICAL"><apiName>VERTICAL</apiName><shortdesc>
	  Utilisez la mise en forme verticale pour le contenu de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>vertical</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Utilisez la mise en forme verticale pour le contenu de ce conteneur. Le conteneur place automatiquement ses enfants dans une seule colonne.
	 
	  <p>Si vous ne spécifiez pas la propriété <codeph>width</codeph> ou <codeph>percentWidth</codeph> pour un enfant, sa propriété <codeph>measuredWidth</codeph> déterminée automatiquement par sa méthode <codeph>measure()</codeph> est utilisée. Cela s’applique également à sa hauteur.</p>
	 
	  <p>Vous pouvez contrôler l’espacement entre les enfants avec le style <codeph>verticalGap</codeph> et leur alignement avec le style <codeph>horizontalAlign</codeph>. Les styles <codeph>paddingLeft</codeph>, <codeph>paddingTop</codeph>, <codeph>paddingRight</codeph> et <codeph>paddingBottom</codeph> contrôlent l’espace entre la bordure du conteneur et les enfants.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:Container"><apiName>Container</apiName><shortdesc>
  La classe Container est une classe de base abstraite pour les composants qui contrôle les caractéristiques de présentation des composants enfant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Color" inherit="yes" name="symbolColor" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur d’un symbole de composant. Les exemples incluent la coche d’un composant CheckBox ou la flèche d’un bouton ScrollBar.
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure supérieure du conteneur et le haut de sa zone de contenu. 
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure inférieure du conteneur et le bas de sa zone de contenu. 
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalScrollBarStyleName" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Nom du style de la barre de défilement verticale.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalScrollBarStyleName" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Nom du style de la barre de défilement horizontale.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur de l’anneau de focus lorsque le composant détient le focus.
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="disabledOverlayAlpha" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Valeur alpha pour l’incrustation placée au-dessus du conteneur lorsqu’il est désactivé. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.core:Container" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  Rayon des angles des composants. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est 0. La valeur par défaut du contrôle ApplicationControlBar est 5.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur de la zone de contenu du composant. 
   
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Valeur alpha de l’arrière-plan du contenu pour ce composant. 
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAttachment" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Si une image d’arrière-plan est spécifiée, ce style spécifie si elle est figée dans la fenêtre (<codeph>"fixed"</codeph>) ou défile avec le contenu (<codeph>"scroll"</codeph>).
 
  </description>
<default>"scroll"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur d’accentuation utilisée par les habillages des composants. L’habillage de bouton par défaut utilise cette couleur pour teinter l’arrière-plan. La mise en surbrillance du rail du curseur utilise cette couleur.  
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur (en pixels).
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.core:Container" playerVersion="Flash10" type="Class">
<description>
  Classe implémentant l’occurrence IUITextField qui permet à ce composant de rendre le texte.
 
  <p>Elle peut être définie sur la classe mx.core.UITextField (pour utiliser la classe TextField classique intégrée à Flash Player) ou la classe mx.core.UIFTETextField (pour utiliser Text Layout Framework, qui permet d’améliorer le rendu du texte et d’obtenir notamment une mise en forme bidirectionnelle).</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut de la plupart des composants est <codeph>"left"</codeph>. Pour le composant FormItem, la valeur par défaut est <codeph>"right"</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Cette propriété n’est reconnue que lorsque la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.core:Container" playerVersion="Flash10" type="String">
<description>
  Paramètres régionaux du texte affiché par ce composant. 
 
  <p>FTE et TLF utilisent ces paramètres régionaux pour mapper des caractères Unicode à des glyphes de police et rechercher des polices de rechange. </p>
 
  <p>Remarque : ce style s’applique uniquement lorsqu’un composant MX spécifie UIFTETextField comme classe <codeph>textFieldClass</codeph>.</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.core:Container" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est supporté uniquement pour les polices incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en gras. Les valeurs reconnues sont <codeph>normal</codeph> et <codeph>bold</codeph>. La valeur par défaut du contrôle Button est <codeph>bold</codeph>. La valeur par défaut de tous les autres contrôles est <codeph>normal</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. Dans le thème Halo, la valeur par défaut est 10 pour tous les contrôles sauf ColorPicker. Pour le contrôle ColorPicker avec thème Halo, la valeur par défaut est 11. Dans le thème Spark, la valeur par défaut est 12 pour tous les contrôles sauf ColorPicker. Pour le contrôle ColorPicker avec thème Spark, la valeur par défaut est 11.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée. La police par défaut du thème Halo est <codeph>"Verdana"</codeph>. La police par défaut du thème Spark est <codeph>"Arial"</codeph>. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>, ce qui active l’anti-aliasing avancé de la police. Définissez la propriété sur <codeph>"normal"</codeph> pour désactiver l’anti-aliasing avancé.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’intégralité du texte d’un sous-contrôle TextField : vous ne pouvez pas l’appliquer à certains caractères seulement et non à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.core:Container" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.core:Container" playerVersion="Flash10" type="String">
<description>
  Direction du texte affiché par le composant. 
 
  <p>Les valeurs autorisées sont <codeph>"ltr"</codeph> pour les textes rédigés de gauche à droite, comme dans les scripts de style latin et <codeph>"rtl"</codeph> pour les textes rédigés de droite à gauche, comme l’arabe ou l’hébreu. </p>
 
  <p>FTE et TLF utilisent cette valeur dans leur algorithme de mise en forme de texte bidirectionnel, lequel mappe l’ordre des caractères Unicode sur ordre des glyphes. </p>
 
  <p>Remarque : ce style s’applique uniquement lorsqu’un composant MX composant spécifie UIFTETextField comme classe <codeph>textFieldClass</codeph>.</p>
 
  <p>La <codeph>direction</codeph> a également une incidence sur l’alignement du texte dans les limites du TLFTextField. Elle n’a pas, cependant, d’incidence sur le positionnement de TLFTextField au sein du composant. </p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.core:Container" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant, y compris l’étiquette du composant. La valeur par défaut du thème Halo est <codeph>0x0B333C</codeph>. La valeur par défaut du thème Spark est <codeph>0x000000</codeph>. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure droite du composant et le bord droit de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button dans le thème Halo est 10 et dans le thème Spark est 6. </p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure gauche du composant et le bord gauche de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button dans le thème Halo est 10 et dans le thème Spark est 6. </p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  <p>La valeur par défaut d’un contrôle Tree est 2.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  Couleur d’arrière-plan d’un composant. Les deux propriétés <codeph>backgroundColor</codeph> et <codeph>backgroundImage</codeph> peuvent être définies. Certains composants n’ont pas d’arrière-plan. Le contrôle DataGrid ignore ce style. La valeur par défaut est <codeph>undefined</codeph>, ce qui signifie qu’elle n’est pas définie. Si ce style et le style de la propriété <codeph>backgroundImage</codeph> sont <codeph>undefined</codeph>, le composant est doté d’un arrière-plan transparent.
 
  <p>Pour le conteneur Application, ce style indique la couleur d’arrière-plan lors du chargement de l’application et un dégradé d’arrière-plan lors de son exécution. Flex calcule le motif de dégradé entre une couleur légèrement plus sombre que la couleur spécifiée et une couleur légèrement plus claire que la couleur spécifiée.</p>
 
  <p>Les habillages par défaut de la plupart des contrôles Flex sont partiellement transparents. Par conséquent, la couleur d’arrière-plan d’un conteneur déteint partiellement sur les contrôles qui se trouvent dans ce conteneur. Vous pouvez éviter cette situation en définissant les valeurs Alpha de la propriété <codeph>fillAlphas</codeph> du contrôle sur 1, comme le montre l’exemple suivant :
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.core:Container" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  Niveau Alpha de la couleur définie par la propriété <codeph>backgroundColor</codeph>, de l’image ou fichier SWF défini par le style <codeph>backgroundImage</codeph>. Les valeurs possibles vont de 0.0 à 1.0. Pour la plupart des contrôles, la valeur par défaut est 1.0, mais pour les contrôles ToolTip, la valeur par défaut est de 0.95 et pour les contrôles Alert, elle est de 0.9.
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Distance de l’ombre portée. Si la propriété est définie sur une valeur négative, l’ombre apparaît au-dessus du composant.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="String">
<description>
  Direction de l’ombre portée. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"center"</codeph> et <codeph>"right"</codeph>.
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropShadowColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’ombre portée.
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Propriété booléenne qui indique si le composant comporte une ombre portée visible. La valeur par défaut est <codeph>false</codeph>.
 
  <p><b>Remarque :</b> pour que les ombres portées apparaissent sur des conteneurs, définissez la propriété <codeph>contentBackgroundColor</codeph>. Sinon, l’ombre s’affiche derrière le conteneur, car l’arrière-plan par défaut d’un conteneur est transparent.</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  Propriété booléenne qui indique si le composant comporte une ombre portée visible. Ce style est utilisé avec <codeph>borderStyle="solid"</codeph>. La valeur par défaut est <codeph>false</codeph>.
 
  <p><b>Remarque :</b> pour que les ombres portées apparaissent sur des conteneurs, définissez les propriétés <codeph>backgroundColor</codeph> ou <codeph>backgroundImage</codeph>. Sinon, l’ombre s’affiche derrière le conteneur, car l’arrière-plan par défaut d’un conteneur est transparent.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Visibilité de la bordure.
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Epaisseur du cadre de sélection. Utilisé uniquement lorsque la propriété <codeph>borderStyle</codeph> est définie sur <codeph>"solid"</codeph>.
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Style du cadre de sélection. Les valeurs possibles sont <codeph>"none"</codeph>, <codeph>"solid"</codeph>, <codeph>"inset"</codeph> et <codeph>"outset"</codeph>. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>"inset"</codeph>. La valeur par défaut de la plupart des conteneurs est <codeph>"none"</codeph>. Les valeurs <codeph>"inset"</codeph> et <codeph>"outset"</codeph> sont valides uniquement avec le thème Halo.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSkin" owner="mx.core:Container" playerVersion="Flash9" type="Class">
<description>
  Classe d’habillage de bordure du composant. La valeur par défaut de tous les composants qui ne spécifient pas explicitement leur propre valeur par défaut est <codeph>mx.skins.halo.HaloBorder</codeph> pour le thème Halo et <codeph>mx.skins.spark.BorderSkin</codeph> pour le thème Spark. La valeur par défaut du conteneur Panel est <codeph>mx.skins.halo.PanelSkin</codeph> pour le thème Halo et <codeph>mx.skins.spark.BorderSkin</codeph> pour le thème Spark. Pour déterminer la valeur par défaut d’un composant, voir le fichier default.css.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSides" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="String">
<description>
  Côtés du cadre de sélection. Chaîne délimitée par des espaces qui indique quels côtés de la bordure afficher. La chaîne peut contenir les valeurs <codeph>"left"</codeph>, <codeph>"top"</codeph>, <codeph>"right"</codeph> et <codeph>"bottom"</codeph> dans n’importe quel ordre. La valeur par défaut est <codeph>"left top right bottom"</codeph>, ce qui permet de montrer les quatre côtés. Ce style est uniquement utilisé lorsque la propriété borderStyle est <codeph>"solid"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  Couleur de la bordure. La valeur par défaut dépend de la classe du composant ; si elle n’est pas remplacée pour la classe, la valeur par défaut est <codeph>0xB7BABC</codeph> pour le thème Halo et <codeph>0x696969</codeph> pour le thème Spark. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Alpha de la bordure.
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSize" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="String">
<description>
  Met à l’échelle l’image spécifiée par la propriété <codeph>backgroundImage</codeph> sur différentes tailles de pourcentage. Une valeur de <codeph>"100%"</codeph> étire l’image afin de remplir l’intégralité du composant. Pour spécifier un pourcentage, vous devez inclure le symbole de pourcentage (%). La valeur par défaut du conteneur Application est <codeph>100%</codeph>. La valeur par défaut de tous les autres conteneurs est <codeph>auto</codeph>, ce qui permet de conserver la taille d’origine de l’image.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="Object">
<description>
  Image d’arrière-plan d’un composant. Il peut s’agir d’une URL absolue ou relative ou d’une classe. Vous pouvez définir la propriété <codeph>backgroundColor</codeph> ou <codeph>backgroundImage</codeph>. L’image d’arrière-plan s’affiche par dessus la couleur d’arrière-plan. La valeur par défaut est <codeph>undefined</codeph>, c’est-à-dire « non définie ». Si ce style et le style de la propriété <codeph>backgroundColor</codeph> ne sont pas définis, le composant est doté d’un arrière-plan transparent.
 
  <p>Les habillages par défaut de la plupart des contrôles Flex sont partiellement transparents. Par conséquent, l’image d’arrière-plan d’un conteneur déteint partiellement sur les contrôles qui se trouvent dans ce conteneur. Vous pouvez éviter cette situation en définissant les valeurs Alpha de la propriété <codeph>fillAlphas</codeph> du contrôle sur 1, comme le montre l’exemple suivant :
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="backgroundDisabledColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur d’arrière-plan du composant lorsqu’il est désactivé. La valeur par défaut globale est <codeph>undefined</codeph>. La valeur par défaut des contrôles List est <codeph>0xDDDDDD</codeph> (gris clair). Si un conteneur est désactivé, l’arrière-plan est estompé et le degré d’estompe est contrôlé par le style <codeph>disabledOverlayAlpha</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="barColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Détermine la couleur d’un contrôle ProgressBar. Un contrôle ProgressBar est rempli d’un dégradé vertical entre cette couleur et une couleur plus vive qui en découle. Ce style n’a aucun effet sur d’autres composants, mais il peut être défini sur un conteneur pour contrôler l’apparence de toutes les barres de progression trouvées à l’intérieur. La valeur par défaut est <codeph>undefined</codeph>, ce qui signifie qu’elle n’est pas définie. Dans ce cas, la propriété de style <codeph>themeColor</codeph> est utilisée.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  Flex Framework containers inherit the following attributes from the Container
  class:</p>
 
  <pre>
  &lt;mx:<i>tagname</i>
    <strong>Properties</strong>
    autoLayout="true|false"
    clipContent="true|false"
    creationIndex="undefined"
    creationPolicy="auto|all|queued|none"
    defaultButton="<i>No default</i>"
    horizontalLineScrollSize="5"
    horizontalPageScrollSize="0"
    horizontalScrollBar="null"
    horizontalScrollPolicy="auto|on|off"
    horizontalScrollPosition="0"
    icon="undefined"
    label=""
    verticalLineScrollSize="5"
    verticalPageScrollSize="0"
    verticalScrollBar="null"
    verticalScrollPolicy="auto|on|off"
    verticalScrollPosition="0"
 
    <strong>Styles</strong>
    backgroundAlpha="1.0"
    backgroundAttachment="scroll"
    backgroundColor="undefined"
    backgroundDisabledColor="undefined"
    backgroundImage="undefined"
    backgroundSize="auto" 
    <i>    For the Application container only,</i> backgroundSize="100%"
    barColor="undefined"
    borderColor="0xAAB3B3"
    borderSides="left top right bottom"
    borderSkin="mx.skins.halo.HaloBorder"
    borderStyle="inset"
    borderThickness="1"
    color="0x0B333C"
    cornerRadius="0"
    disabledColor="0xAAB3B3"
    disbledOverlayAlpha="undefined"
    dropShadowColor="0x000000"
    dropShadowEnabled="false"
    fontAntiAliasType="advanced"
    fontfamily="Verdana"
    fontGridFitType="pixel"
    fontSharpness="0""
    fontSize="10"
    fontStyle="normal"
    fontThickness="0"
    fontWeight="normal"
    horizontalScrollBarStyleName="undefined"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    shadowDirection="center"
    shadowDistance="2"
    textAlign="left"
    textDecoration="none|underline"
    textIndent="0"
    verticalScrollBarStyleName="undefined"
 
    <strong>Events</strong>
    childAdd="<i>No default</i>"
    childIndexChange="<i>No default</i>"
    childRemove="<i>No default</i>"
    dataChange="<i>No default</i>"
    scroll="<i>No default</i>"
    &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/mx:<i>tagname</i>&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IContainer</apiBaseInterface><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerContainer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseInterface>mx.core:IRawChildrenContainer</apiBaseInterface><apiBaseInterface>mx.core:IChildList</apiBaseInterface><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseInterface>mx.core:INavigatorContent</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe Container est une classe de base abstraite pour les composants qui contrôle les caractéristiques de présentation des composants enfant. Dans une application, vous ne créez pas d’occurrences de la classe Container. Au lieu de cela, vous créez une occurrence de l’une des sous-classes de la classe Container (un objet Canvas ou HBox, par exemple).
 
  <p>La classe Container contient la logique de défilement, de découpage et d’instanciation dynamique. Elle contient des méthodes pour l’ajout et la suppression d’enfants. Il contient également la méthode <codeph>getChildAt()</codeph> et la logique permettant de tracer l’arrière-plan et les bordures des conteneurs.</p>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:Container_mx.events.ScrollEvent.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
  Distribué lorsque l’utilisateur fait défiler le conteneur manuellement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ScrollEvent.SCROLL</apiEventType><adobeApiEventClassifier>mx.events.ScrollEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur fait défiler le conteneur manuellement.
 
  <p>L’événement est distribué lorsque la position de défilement est modifiée en utilisant soit le bouton de la souris (par exemple en cliquant sur le bouton « Bas » de la barre de défilement), soit le clavier (par exemple, en pressant la flèche vers le bas). Toutefois, cet événement n’est pas distribué si la position de défilement est modifiée par programmation (par exemple, par définition de la valeur de la propriété <codeph>horizontalScrollPosition</codeph>). L’événement <codeph>viewChanged</codeph> est diffusé chaque fois que la position de défilement est modifiée, manuellement ou par programmation.</p>
 
  <p>Lorsque cet événement est distribué, la barre de défilement a été actualisée sur la nouvelle position, mais les objets enfant du conteneur n’ont pas été déplacés pour refléter la nouvelle position de défilement.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Container_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Distribué lorsque la propriété data change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>data</codeph> change.
 
  <p>Lorsqu’un conteneur est utilisé pour rendre un objet List ou d’autres composants, la propriété <codeph>data</codeph> est utilisée pour transmettre au conteneur les données à afficher.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Container_mx.events.ChildExistenceChangedEvent.CHILD_REMOVE_childRemove"><apiName>childRemove</apiName><shortdesc>
  Distribué avant la suppression d’un enfant de conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ChildExistenceChangedEvent.CHILD_REMOVE</apiEventType><adobeApiEventClassifier>mx.events.ChildExistenceChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué avant la suppression d’un enfant de conteneur.
 
  <p>Cet événement est diffusé lors de l’appel de l’une des méthodes suivantes : <codeph>removeChild()</codeph>, <codeph>removeChildAt()</codeph> ou <codeph>removeAllChildren()</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Container_mx.events.IndexChangedEvent.CHILD_INDEX_CHANGE_childIndexChange"><apiName>childIndexChange</apiName><shortdesc>
  Distribué après la modification de la position d’index (parmi les enfants du conteneur) d’un enfant de conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.IndexChangedEvent.CHILD_INDEX_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.IndexChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après la modification de la position d’index (parmi les enfants du conteneur) d’un enfant de conteneur. Cet événement est diffusé uniquement pour l’enfant spécifié comme argument de la méthode <codeph>setChildIndex()</codeph>. Il n’est diffusé pour aucun autre enfant dont la position d’index change en raison de l’appel de la méthode <codeph>setChildIndex()</codeph>.
 
  <p>La position d’index de l’enfant est modifiée lorsque la méthode <codeph>setChildIndex()</codeph> est appelée.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Container_mx.events.ChildExistenceChangedEvent.CHILD_ADD_childAdd"><apiName>childAdd</apiName><shortdesc>
  Distribué après l’ajout d’un enfant à un conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ChildExistenceChangedEvent.CHILD_ADD</apiEventType><adobeApiEventClassifier>mx.events.ChildExistenceChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après l’ajout d’un enfant à un conteneur.
 
  <p>L’événement childAdd est distribué lors de l’appel de la méthode <codeph>addChild()</codeph> ou <codeph>addChildAt()</codeph>. Lors de la première création d’un conteneur, la méthode <codeph>addChild()</codeph> est automatiquement appelée pour chaque composant enfant déclaré dans le fichier MXML. La méthode <codeph>addChildAt()</codeph> est appelée automatiquement chaque fois qu’un objet Repeater ajoute ou supprime des objets enfant. Le développeur de l’application peut également appeler ces méthodes manuellement pour ajouter de nouveaux enfants.</p>
 
  <p>Lorsque cet événement est envoyé, l’objet enfant a été initialisé, mais sa largeur et sa hauteur n’ont pas encore été calculées et il n’a pas été tracé à l’écran. Si vous souhaitez recevoir une notification lorsque l’enfant est entièrement initialisé et rendu, enregistrez-vous en tant qu’écouteur pour l’événement <codeph>creationComplete</codeph> de l’enfant.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:Container:Container"><apiName>Container</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:Container:addChildAt"><apiName>addChildAt</apiName><shortdesc>
      Ajoute un objet DisplayObject enfant à ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Enfant ajouté comme un objet de type DisplayObject. La valeur renvoyée est généralement projetée sur un objet UIComponent ou le type du composant ajouté.
     
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Objet DisplayObject à ajouter en tant qu’enfant de ce conteneur. Il doit implémenter l’interface IUIComponent.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Position d’index à laquelle ajouter l’enfant.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute un objet DisplayObject enfant à ce conteneur. L’enfant est placé à la position d’index spécifiée.
     
      <p><b>Remarque : </b>lorsque l’argument <codeph>child</codeph> de la méthode est spécifié de type DisplayObject, l’argument doit implémenter l’interface IUIComponent pour être ajouté en tant qu’enfant d’un conteneur. Tous les composants Flex implémentent cette interface.</p>
     
      <p>Les enfants sont superposés de l’arrière à l’avant. En d’autres termes, si les enfants se chevauchent, celui portant la position d’index 0 est le plus éloigné et celui portant la position d’index <codeph>numChildren - 1</codeph> est le plus rapproché. Cela signifie que les nouveaux enfants ajoutés sont superposés aux enfants existants.</p>
     
      <p>Lorsque vous ajoutez un nouvel enfant à une position d’index déjà occupée par un enfant ancien, il ne remplace pas l’enfant ancien. Au lieu de cela, l’enfant ancien et ceux figurant après se décalent et voient leur position d’index incrémentée d’une unité. Par exemple, supposons qu’un conteneur contient les enfants (A, B, C) et que vous ajoutez D à la position d’index 1. Le conteneur contiendra (A, D, B, C). Si vous souhaitez remplacer un enfant ancien, vous devez d’abord le supprimer avant d’ajouter le nouveau.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.IUIComponent.xml"><linktext>mx.core.IUIComponent</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:addChild"><apiName>addChild</apiName><shortdesc>
      Ajoute un objet DisplayObject enfant à ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Enfant ajouté comme un objet de type DisplayObject. La valeur renvoyée est généralement projetée sur un objet UIComponent ou le type du composant ajouté.
     
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Objet DisplayObject à ajouter en tant qu’enfant de ce conteneur. Il doit implémenter l’interface IUIComponent.
     
      </apiDesc></apiParam><apiTipTexts><apiTipText>Ajoute un objet enfant à ce conteneur.
      
      </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
      Ajoute un objet DisplayObject enfant à ce conteneur. L’enfant est ajouté après les autres enfants existants, de sorte que le premier enfant ajouté a la position d’index 0, le prochain a la position d’index 1 et ainsi de suite.
     
      <p><b>Remarque : </b>lorsque l’argument <codeph>child</codeph> de la méthode est spécifié de type DisplayObject, l’argument doit implémenter l’interface IUIComponent pour être ajouté en tant qu’enfant d’un conteneur. Tous les composants Flex implémentent cette interface.</p>
     
      <p>Les enfants sont superposés de l’arrière à l’avant. En d’autres termes, si les enfants se chevauchent, celui portant la position d’index 0 est le plus éloigné et celui portant la position d’index <codeph>numChildren - 1</codeph> est le plus rapproché. Cela signifie que les nouveaux enfants ajoutés sont superposés aux enfants existants.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.IUIComponent.xml"><linktext>mx.core.IUIComponent</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:addElement"><apiName>addElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:protected:attachOverlay"><apiName>attachOverlay</apiName><shortdesc>
      Utilisée en interne par l’effet Fondre pour ajouter l’incrustation au chrome d’un conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Utilisée en interne par l’effet Fondre pour ajouter l’incrustation au chrome d’un conteneur. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:contentToGlobal"><apiName>contentToGlobal</apiName><shortdesc conref="mx.core.UIComponent#contentToGlobal()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#contentToGlobal()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:contentToLocal"><apiName>contentToLocal</apiName><shortdesc conref="mx.core.UIComponent#contentToLocal()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#contentToLocal()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:protected:createBorder"><apiName>createBorder</apiName><shortdesc>
      Crée l’habillage de la bordure du conteneur s’il est nécessaire et n’existe pas encore. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Crée l’habillage de la bordure du conteneur s’il est nécessaire et n’existe pas encore. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:createComponentFromDescriptor"><apiName>createComponentFromDescriptor</apiName><shortdesc>
      A partir d’un seul descripteur UIComponentDescriptor, créez le composant correspondant et ajoutez le composant en tant qu’enfant de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Composant créé.
     
      </apiDesc><apiType value="mx.core:IFlexDisplayObject"/></apiReturn><apiParam><apiItemName>descriptor</apiItemName><apiType value="mx.core:ComponentDescriptor"/><apiDesc>Le descripteur UIComponentDescriptor pour le composant à créer. Cet argument est soit un objet UIComponentDescriptor, soit la position d’index de l’un des enfants du conteneur (entier compris entre 0 et n-1, où n est le nombre total d’enfants de ce conteneur). 
     
      </apiDesc></apiParam><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc>Si la valeur est <codeph>false</codeph>, créez ce composant, mais aucun de ses enfants. Si la valeur est <codeph>true</codeph>, après la création du composant, Flex appelle la méthode <codeph>createComponentsFromDescriptors()</codeph> pour créer un ou plusieurs de ses enfants, en fonction de la valeur de la propriété <codeph>creationPolicy</codeph> du composant.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      A partir d’un seul descripteur UIComponentDescriptor, créez le composant correspondant et ajoutez le composant en tant qu’enfant de ce conteneur.
      
      <p>Cette méthode instancie le nouvel objet, mais ne l’ajoute pas à la liste d’affichage. L’objet ne s’affiche donc pas sur l’écran par défaut. Pour ajouter le nouvel objet à la liste d’affichage, appelez la méthode <codeph>validateNow()</codeph> sur le conteneur après l’appel de la méthode <codeph>createComponentFromDescriptor()</codeph>, comme l’illustre l’exemple suivant :
      <pre>
      myVBox.createComponentFromDescriptor(myVBox.childDescriptors[0],false);
      myVBox.validateNow();
      </pre>
      </p>
      
      <p>Vous pouvez également appeler la méthode <codeph>createComponentsFromDescriptors()</codeph> sur le conteneur pour créer tous les composants à la fois. Il n’est pas nécessaire d’appeler la méthode <codeph>validateNow()</codeph> après l’appel de la méthode <codeph>createComponentsFromDescriptors()</codeph>.</p>
      
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.UIComponentDescriptor.xml"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:createComponentsFromDescriptors"><apiName>createComponentsFromDescriptors</apiName><shortdesc>
      Effectuez une itération sur le tableau de descripteurs childDescriptors et appelez la méthode createComponentFromDescriptor() pour chacun d’entre eux.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, créer les composants de manière récursive.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Effectuez une itération sur le tableau de descripteurs <codeph>childDescriptors</codeph> et appelez la méthode <codeph>createComponentFromDescriptor()</codeph> pour chacun d’entre eux.
      
      <p>Si la valeur de la propriété <codeph>creationPolicy</codeph> du conteneur est <codeph>ContainerCreationPolicy.ALL</codeph>, alors cette méthode est appelée automatiquement lors de la séquence d’initialisation.</p>
      
      <p>Si la valeur de la propriété <codeph>creationPolicy</codeph> est <codeph>ContainerCreationPolicy.AUTO</codeph>, cette méthode est appelée automatiquement lorsque les enfants du conteneur sont sur le point de devenir visibles.</p>
      
      <p>Si la valeur de la propriété <codeph>creationPolicy</codeph> du conteneur est <codeph>ContainerCreationPolicy.NONE</codeph>, il est conseillé d’appeler cette fonction lorsque vous souhaitez créer les enfants de ce conteneur.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:createDeferredContent"><apiName>createDeferredContent</apiName><shortdesc>
      Exécute une action équivalente à l’appel de la méthode createComponentsFromDescriptors(true) pour les conteneurs qui implémentent l’interface IDeferredContentOwner afin de prendre en charge l’instanciation différée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Exécute une action équivalente à l’appel de la méthode <codeph>createComponentsFromDescriptors(true)</codeph> pour les conteneurs qui implémentent l’interface IDeferredContentOwner afin de prendre en charge l’instanciation différée. 
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#Container/createComponentsFromDescriptors()"><linktext>createComponentsFromDescriptors()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:executeBindings"><apiName>executeBindings</apiName><shortdesc>
      Exécute tous les liaisons de données sur ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>Si la valeur est false, ne s’exécutent le panneau Liaisons sur ce conteneur. </codeph> Si la valeur est <codeph>true</codeph>, exécuter également les liaisons sur les descendants de ce conteneur, ses enfants, petits-enfants, arrière-petits-enfants, et ainsi de suite.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Exécute tous les liaisons de données sur ce conteneur. Flex appelle cette méthode automatiquement après la création d’un conteneur pour provoquer l’exécution des liaisons de données ayant des destinations en son sein. Solution au problème de conteneur/liaisons MXML (177074) : remplacer la méthode Container.executeBindings() pour préférer descriptor.document à parentDocument dans l’appel de la méthode BindingManager.executeBindings(). Cette opération doit toujours fournir le comportement correct pour les occurrences créées par descripteur et fournit le comportement d’origine pour les occurrences créées de manière procédurale (le bogue peut se produire, ou non, dans le dernier cas). Une correction plus approfondie, garantissant un comportement correct en présence de scénarios non DI et de scénarios à composants réapparentés, est prévue pour Updater 1.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:executeChildBindings"><apiName>executeChildBindings</apiName><shortdesc>
      Exécute les liaisons dans les objets UIComponent enfant de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc>Si la valeur est <codeph>false</codeph>, seuls les liaisons des enfants immédiats de cet objet Container sont exécutés. Si la valeur est <codeph>true</codeph>, exécuter également les liaisons sur les descendants de ce conteneur, ses petits-enfants, arrière-petits-enfants, et ainsi de suite.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Exécute les liaisons dans les objets UIComponent enfant de ce conteneur. Flex appelle cette méthode automatiquement après la création d’un conteneur.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:getChildAt"><apiName>getChildAt</apiName><shortdesc>
      Récupère le n-ième objet de composant enfant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Référence à l’enfant comme un objet de type DisplayObject. La valeur renvoyée est généralement projetée sur un composant UIComponent ou sur le type d’un contrôle Flex spécifique, tel qu’un composant ComboBox ou TextArea. 
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Nombre compris entre 0 et (numChildren - 1).
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Récupère le <i>n</i>ième objet de composant enfant.
     
      <p>Les enfants renvoyés par cette méthode incluent les enfants déclarées dans le code MXML et les enfants ajoutés à l’aide de la méthode <codeph>addChild()</codeph> ou <codeph>addChildAt()</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:getChildByName"><apiName>getChildByName</apiName><shortdesc>
      Renvoie l’enfant dont la propriété name est la chaîne spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Objet DisplayObject représentant l’enfant comme un objet de type DisplayObject. La valeur renvoyée est généralement projetée sur un composant UIComponent ou sur le type d’un contrôle Flex spécifique, tel qu’un composant ComboBox ou TextArea. Transmet une erreur d’exécution si l’enfant portant le nom spécifié n’existe pas.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>Identifiant de l’enfant.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie l’enfant dont la propriété <codeph>name</codeph> est la chaîne spécifiée.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:getChildIndex"><apiName>getChildIndex</apiName><shortdesc>
      Récupère la position d’index à base zéro d’un enfant spécifique. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nombre compris entre 0 et (numChildren - 1).
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Référence à l’enfant correspondant à la position d’index à obtenir.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Récupère la position d’index basée sur zéro d’un enfant spécifique. 
     
      <p>Le premier enfant du conteneur (par exemple la première balise enfant figurant dans la déclaration MXML) a la position d’index 0, le deuxième enfant a la position d’index 1, et ainsi de suite. Les positions d’index des enfants d’un conteneur déterminent l’ordre dans lequel ils sont présentés. Par exemple, dans une VBox l’enfant ayant la position d’index 0 est situé en haut, l’enfant ayant la position d’index 1 est situé en dessous, etc.</p>
     
      <p>Si vous ajoutez un enfant en appelant la méthode <codeph>addChild()</codeph>, la position d’index du nouvel enfant est égale à la plus grande position d’index parmi les enfants existants plus un. Vous pouvez insérer un enfant à une position d’index spécifiée à l’aide de la méthode <codeph>addChildAt()</codeph>. Dans ce cas, les indices de l’enfant à cette position d’index et ceux des enfants ayant des indices supérieurs sont tous augmentés de 1, afin que tous les indices appartiennent à la plage comprise entre 0 et <codeph>(numChildren - 1)</codeph>.</p>
     
      <p>Si vous supprimez un enfant en appelant la méthode <codeph>removeChild()</codeph> ou <codeph>removeChildAt()</codeph>, alors les indices des enfants restants sont ajustés afin que tous les indices appartiennent à la plage comprise entre 0 et <codeph>(numChildren - 1)</codeph>.</p>
     
      <p>Si <codeph>myView.getChildIndex(myChild)</codeph> renvoie 5, alors <codeph>myView.getChildAt(5)</codeph> renvoie myChild.</p>
     
      <p>La position d’index d’un enfant peut être modifiée par l’appel de la méthode <codeph>setChildIndex()</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:getChildren"><apiName>getChildren</apiName><shortdesc>
      Renvoie un tableau d’objets DisplayObject composé des enfants de contenu du conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau d’objets DisplayObject composé des enfants de contenu du conteneur.
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie un tableau d’objets DisplayObject composé des enfants de contenu du conteneur. Ce tableau n’inclut <b>pas</b> les objets DisplayObject qui implémentent les éléments d’affichage du conteneur, telles que sa bordure et l’image d’arrière-plan.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#Container/rawChildren"><linktext>rawChildren</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:globalToContent"><apiName>globalToContent</apiName><shortdesc conref="mx.core.UIComponent#globalToContent()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#globalToContent()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:protected:layoutChrome"><apiName>layoutChrome</apiName><shortdesc>
      Répond aux changements de taille en définissant les positions et les tailles des bordures de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Indique la largeur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> du composant.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Indique la hauteur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> du composant.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Répond aux changements de taille en définissant les positions et les tailles des bordures de ce conteneur. Il s’agit d’une méthode avancée que vous pouvez remplacer lorsque vous créez une sous-classe de la classe Container.
     
      <p>Flex appelle la méthode <codeph>layoutChrome()</codeph> lorsque le conteneur est ajouté à un conteneur parent par le biais de la méthode <codeph>addChild()</codeph> et lorsque la méthode <codeph>invalidateDisplayList()</codeph> du conteneur est appelée.</p>
     
      <p>La méthode <codeph>Container.layoutChrome()</codeph> est appelée quelle que soit la valeur de la propriété <codeph>autoLayout</codeph>.</p>
     
      <p>La méthode <codeph>Container.layoutChrome()</codeph> définit la position et la taille de la bordure du conteneur de la classe Container. Dans chaque sous-classe de la classe Container, la méthode <codeph>layoutChrome()</codeph> de la sous-classe doit appeler la méthode <codeph>super.layoutChrome()</codeph>, afin de positionner correctement la bordure.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:localToContent"><apiName>localToContent</apiName><shortdesc conref="mx.core.UIComponent#localToContent()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#localToContent()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeAllChildren"><apiName>removeAllChildren</apiName><shortdesc>
      Supprime tous les enfants de la liste d’enfants de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Supprime tous les enfants de la liste d’enfants de ce conteneur.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:removeChildAt"><apiName>removeChildAt</apiName><shortdesc>
      Supprime un objet DisplayObject enfant de la liste d’enfants de ce conteneur à la position d’index spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Enfant supprimé comme un objet de type DisplayObject. La valeur renvoyée est généralement projetée sur un objet UIComponent ou le type du composant supprimé.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index enfant de l’objet DisplayObject à supprimer.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime un objet DisplayObject enfant de la liste d’enfants de ce conteneur à la position d’index spécifiée. La propriété <codeph>parent</codeph> de l’enfant supprimé est définie sur null. L’enfant persiste sauf s’il est explicitement détruit. Si vous l’ajoutez à un autre conteneur, il conserve son dernier état connu.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeChild"><apiName>removeChild</apiName><shortdesc>
      Supprime un objet DisplayObject enfant de la liste d’enfants de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Enfant supprimé comme un objet de type DisplayObject. La valeur renvoyée est généralement projetée sur un objet UIComponent ou le type du composant supprimé.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Objet DisplayObject à supprimer.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime un objet DisplayObject enfant de la liste d’enfants de ce conteneur. La propriété <codeph>parent</codeph> de l’enfant supprimé est définie sur null. L’enfant persiste sauf s’il est explicitement détruit. Si vous l’ajoutez à un autre conteneur, il conserve son dernier état connu.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:removeElement"><apiName>removeElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:protected:scrollChildren"><apiName>scrollChildren</apiName><shortdesc>
      Positionne la zone de contenu du conteneur par rapport à la zone visible, en fonction des propriétés horizontalScrollPosition et verticalScrollPosition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Positionne la zone de contenu du conteneur par rapport à la zone visible, en fonction des propriétés horizontalScrollPosition et verticalScrollPosition. Le contenu qui n’apparaît pas dans la zone affichable est découpé. Cette méthode doit être remplacée par les sous-classes dont le chrome peut défiler dans la zone de contenu.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:setChildIndex"><apiName>setChildIndex</apiName><shortdesc>
      Définit la position d’index d’un enfant particulier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Référence à l’enfant correspondant à la position d’index à définir.
     
      </apiDesc></apiParam><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiDesc>Nombre indiquant la nouvelle position d’index. Doit correspondre à un entier compris entre 0 et (numChildren - 1).
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit la position d’index d’un enfant particulier. Voir la méthode <codeph>getChildIndex()</codeph> pour une description de la position d’index de l’enfant.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:swapElements"><apiName>swapElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Répond aux changements de taille en définissant les positions et les tailles des enfants de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Indique la largeur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> du composant.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Indique la hauteur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> du composant.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Répond aux changements de taille en définissant les positions et les tailles des enfants de ce conteneur.
     
      <p>Pour plus d’informations sur la méthode <codeph>updateDisplayList()</codeph>, voir la méthode <codeph>UIComponent.updateDisplayList()</codeph>.</p>
     
      <p>La méthode <codeph>Container.updateDisplayList()</codeph> définit la position et la taille de la bordure du conteneur de la classe Container. Dans chaque sous-classe de la classe Container, la méthode <codeph>updateDisplayList()</codeph> de la sous-classe doit appeler la méthode <codeph>super.updateDisplayList()</codeph>, afin de positionner correctement la bordure.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.UIComponent.xml"><linktext>mx.core.UIComponent</linktext></link></related-links></apiOperation><apiValue id="mx.core:Container:protected:actualCreationPolicy"><apiName>actualCreationPolicy</apiName><shortdesc>
      Stratégie de création de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      Stratégie de création de ce conteneur. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:autoLayout:get"><apiName>autoLayout</apiName><shortdesc>
      Si la valeur est true, la mesure et la présentation sont effectuées lorsque la position ou la taille de l’enfant est modifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, la mesure et la présentation sont effectuées lorsque la position ou la taille de l’enfant est modifiée. <codeph>Si la valeur est false, mesure et la mise en page sont lieu qu’une seule fois, lorsque les enfants sont ajoutés ou supprimés dans le conteneur. </codeph>
     
      <p>Lorsque vous utilisez l’effet Move, la présentation autour du composant en mouvement n’est pas réajusté pour correspondre à l’animation de l’effet Move. La définition de la propriété <codeph>autoLayout</codeph> d’un conteneur sur <codeph>true</codeph> n’a aucun effet sur ce comportement. </p>
     
      <p>L’effet Zoom ne fonctionne pas si la propriété <codeph>autoLayout</codeph> est définie sur <codeph>false</codeph>.</p>
     
      <p>La propriété <codeph>autoLayout</codeph> ne s’applique pas aux conteneurs Accordion ou ViewStack.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      Renvoie un objet EdgeMetrics qui comporte quatre propriétés : left, top, right et bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
      Renvoie un objet EdgeMetrics qui comporte quatre propriétés : <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> et <codeph>bottom</codeph>. La valeur de chaque propriété est égale à l’épaisseur d’un côté de la bordure, exprimée en pixels.
     
      <p>Contrairement à <codeph>viewMetrics</codeph>, cette propriété n’est pas remplacée par les sous-classes de la classe Container.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:childDescriptors:get"><apiName>childDescriptors</apiName><shortdesc>
      Tableau d’objets UIComponentDescriptor produits par le compilateur MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau d’objets UIComponentDescriptor produits par le compilateur MXML.
     
      <p>Chaque objet UIComponentDescriptor contient les informations spécifiées dans une balise MXML enfant de la balise MXML du conteneur. L’ordre des objets UIComponentDescriptor du tableau est identique à l’ordre des balises enfant. Lors de l’initialisation, les descripteurs enfant sont utilisés pour créer les objets UIComponent enfant et objets Repeater du conteneur, et pour leur donner les valeurs de propriété initiales, les gestionnaires d’événements, les effets, etc. qui ont été spécifiés dans le code MXML.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.UIComponentDescriptor.xml"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiValue><apiValue id="mx.core:Container:clipContent:get"><apiName>clipContent</apiName><shortdesc>
      Spécifie l’application d’un masque de découpage ou non, si les positions et/ou les tailles des enfants de ce conteneur dépassent les limites du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie l’application d’un masque de découpage ou non, si les positions et/ou les tailles des enfants de ce conteneur dépassent les limites du conteneur. Si la valeur est <codeph>false</codeph>, les enfants de ce conteneur restent visibles lorsqu’ils sont déplacés ou redimensionnés en dehors du cadre de ce conteneur. Si la valeur est <codeph>true</codeph>, les enfants de ce conteneur sont écrêtés. 
     
      <p>Si la propriété <codeph>clipContent</codeph> a la valeur <codeph>false</codeph>, le défilement est désactivé pour ce conteneur et les barres de défilement ne sont pas affichées Si la propriété <codeph>clipContent</codeph> a la valeur true, les barres de défilement s’affichent habituellement dès lors que les enfants du conteneur s’étendent au-delà du bord du conteneur. Pour un contrôle supérieur de l’aspect des barres de défilement, voir <codeph>horizontalScrollPolicy</codeph> et <codeph>verticalScrollPolicy</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:contentMouseX:get"><apiName>contentMouseX</apiName><shortdesc conref="mx.core.UIComponent#contentMouseX">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#contentMouseX">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:contentMouseY:get"><apiName>contentMouseY</apiName><shortdesc conref="mx.core.UIComponent#contentMouseY">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#contentMouseY">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:creatingContentPane:get"><apiName>creatingContentPane</apiName><shortdesc>
      Les conteneurs utilisent un volet de contenu interne pour contrôler le défilement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Les conteneurs utilisent un volet de contenu interne pour contrôler le défilement. La propriété <codeph>creatingContentPane</codeph> a la valeur <codeph>true</codeph> lorsque le conteneur crée le panneau de contenu. Certains événements peuvent donc être ignorés ou bloqués.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:creationIndex:get"><apiName>creationIndex</apiName><shortdesc>
      Spécifie l’ordre pour instancier et tracer les enfants du conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue><apiDeprecated><apiDesc>Déconseillé</apiDesc></apiDeprecated></apiValueDef><apiDesc>
      Spécifie l’ordre pour instancier et tracer les enfants du conteneur.
     
      <p>Cette propriété peut être utilisée uniquement lorsque la propriété <codeph>creationPolicy</codeph> est définie sur <codeph>ContainerCreationPolicy.QUEUED</codeph>. Dans le cas contraire, elle est ignorée.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:creationPolicy:get"><apiName>creationPolicy</apiName><shortdesc>
      Stratégie de création d’enfant de ce conteneur MX.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ContainerCreationPolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Stratégie de création d’enfant de ce conteneur MX. Les valeurs ActionScript peuvent être <codeph>ContainerCreationPolicy.AUTO</codeph>, <codeph>ContainerCreationPolicy.ALL</codeph> ou <codeph>ContainerCreationPolicy.NONE</codeph>. Les valeurs MXML peuvent être <codeph>auto</codeph>, <codeph>all</codeph> ou <codeph>none</codeph>.
     
      <p>Si aucune propriété <codeph>creationPolicy</codeph> n’est spécifiée pour un conteneur, il hérite de la stratégie <codeph>creationPolicy</codeph> de son parent. Si aucune propriété <codeph>creationPolicy</codeph> n’est spécifiée pour l’application, la valeur par défaut est <codeph>ContainerCreationPolicy.AUTO</codeph>.</p>
     
      <p>La propriété <codeph>creationPolicy</codeph> avec la valeur <codeph>ContainerCreationPolicy.AUTO</codeph> signifie que le conteneur retarde la création de certains ou de tous les descendants en attendant leur nécessité, un processus nommé <i>instanciation différée</i>. Cette stratégie présente le meilleur temps de démarrage en raison du nombre réduit de composants UIComponent créés initialement. Toutefois, cela implique des délais d’attente lorsqu’un utilisateur accède à d’autres parties de l’application pour la première fois. Les conteneurs de navigateur, tels que Accordion, TabNavigator et ViewStack implémentent la stratégie <codeph>ContainerCreationPolicy.AUTO</codeph> en créant immédiatement tous leurs enfants, mais en attendant pour créer les descendants successifs d’un enfant qu’il devienne l’enfant sélectionné du conteneur de navigateur.</p>
     
      <p>La propriété <codeph>creationPolicy</codeph> avec la valeur <codeph>ContainerCreationPolicy.ALL</codeph> signifie que les conteneurs de navigateur créent immédiatement des descendants successifs pour chaque enfant, plutôt que d’attendre que l’enfant soit sélectionné. Pour les conteneurs à vue unique tel qu’un conteneur VBox, il n’existe aucune différence entre les stratégies <codeph>ContainerCreationPolicy.AUTO</codeph> et <codeph>ContainerCreationPolicy.ALL</codeph>.</p>
     
      <p>La propriété <codeph>creationPolicy</codeph> avec la valeur <codeph>ContainerCreationPolicy.NONE</codeph> signifie que le conteneur ne crée aucun de ses enfants. Dans ce cas, l’auteur du code MXML est chargé de la création des enfants en appelant la méthode <codeph>createComponentsFromDescriptors()</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:data:get"><apiName>data</apiName><shortdesc>
      La propriété data vous permet de transmettre une valeur au composant lorsque vous l’utilisez dans un rendu d’élément ou un éditeur d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      La propriété <codeph>data</codeph> vous permet de transmettre une valeur au composant lorsque vous l’utilisez dans un rendu d’élément ou un éditeur d’élément. Vous utilisez généralement la liaison des données pour lier un champ de la propriété <codeph>data</codeph> à une propriété de ce composant.
     
      <p>Vous ne pouvez pas définir cette propriété dans MXML.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.core:Container:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      Contrôle Button désigné comme bouton par défaut pour le conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexDisplayObject"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Contrôle Button désigné comme bouton par défaut pour le conteneur. Lorsque les contrôles du conteneur ont le focus, l’activation de la touche Entrée revient à cliquer sur ce contrôle Button.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:deferredContentCreated:get"><apiName>deferredContentCreated</apiName><shortdesc>
      Equivalent de processedDescriptors pour IDeferredContentOwner 
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Equivalent de processedDescriptors pour IDeferredContentOwner 
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.xml#UIComponent/processedDescriptors"><linktext>UIComponent.processedDescriptors</linktext></link></related-links></apiValue><apiValue id="mx.core:Container:horizontalLineScrollSize:get"><apiName>horizontalLineScrollSize</apiName><shortdesc>
      Nombre de pixels à déplacer lorsque la flèche de gauche ou de droite est cliquée dans la barre de défilement horizontale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="horizontalLineScrollSizeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>5
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de pixels à déplacer lorsque la flèche de gauche ou de droite est activée dans la barre de défilement horizontale.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:horizontalPageScrollSize:get"><apiName>horizontalPageScrollSize</apiName><shortdesc>
      Nombre de pixels à déplacer lorsque la piste est cliquée dans la barre de défilement horizontale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="horizontalPageScrollSizeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de pixels à déplacer lorsque la piste est cliquée dans la barre de défilement horizontale. La valeur 0 signifie que la taille de page est calculée pour correspondre au plein écran.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:horizontalScrollBar:get"><apiName>horizontalScrollBar</apiName><shortdesc>
      Barre de défilement horizontale utilisée dans ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.scrollClasses:ScrollBar</apiValueClassifier></apiValueDef><apiDesc>
      Barre de défilement horizontale utilisée dans ce conteneur. Cette propriété a la valeur null si aucune barre de défilement horizontale n’est actuellement affichée. En général, vous n’accédez pas directement à cette propriété. La manipulation des propriétés <codeph>horizontalScrollPolicy</codeph> et <codeph>horizontalScrollPosition</codeph> permet un contrôle suffisant de la barre de défilement.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc>
      Spécifie si la barre de défilement horizontale est toujours présente, toujours absente ou automatiquement ajoutée en cas de besoin.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="horizontalScrollPolicyChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie si la barre de défilement horizontale est toujours présente, toujours absente ou automatiquement ajoutée en cas de besoin. Les valeurs ActionScript peuvent être <codeph>ScrollPolicy.ON</codeph>, <codeph>ScrollPolicy.OFF</codeph> et <codeph>ScrollPolicy.AUTO</codeph>. Les valeurs MXML peuvent être <codeph>"on"</codeph>, <codeph>"off"</codeph> et <codeph>"auto"</codeph>.
     
      <p>La définition de cette propriété sur <codeph>ScrollPolicy.OFF</codeph> empêche également la propriété <codeph>horizontalScrollPosition</codeph> d’avoir un effet.</p>
     
      <p>Remarque : cette propriété ne s’applique pas au conteneur ControlBar.</p>
     
      <p>Si la propriété <codeph>horizontalScrollPolicy</codeph> a la valeur <codeph>ScrollPolicy.AUTO</codeph>, la barre de défilement horizontale s’affiche lorsque toutes les conditions suivantes sont vérifiées :</p>
      <ul>
        <li>L’un des enfants du conteneur s’étend au-delà du bord gauche ou droit du conteneur.</li>
        <li>La propriété <codeph>clipContent</codeph> a la valeur <codeph>true</codeph>.</li>
        <li>La largeur et la hauteur du conteneur sont suffisamment grandes pour accueillir une barre de défilement.</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
      Position actuelle de la barre de défilement horizontale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="viewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Position actuelle de la barre de défilement horizontale. Cette valeur est égale à la distance en pixels entre le bord gauche de la surface défilante et la partie la plus à gauche de la surface actuellement visible.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:icon:get"><apiName>icon</apiName><shortdesc>
      Classe de l’icône affichée par certains conteneurs de navigateur pour représenter cet objet Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="iconChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Classe de l’icône affichée par certains conteneurs de navigateur pour représenter cet objet Container.
     
      <p>Par exemple, si ce conteneur est un enfant d’un élément TabNavigator, cette icône s’affiche dans l’onglet correspondant. Si ce conteneur est un enfant d’un composant Accordion, cette icône s’affiche dans l’en-tête correspondant.</p>
     
      <p>Pour incorporer l’icône dans le fichier SWF, utilisez la directive de compilateur MXML @Embed().</p>
     
      <pre>
        icon="@Embed('filepath')"
      </pre>
     
      <p>L’image peut être un fichier JPEG, GIF, PNG, SVG ou SWF.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:label:get"><apiName>label</apiName><shortdesc>
      Texte affiché par certains conteneurs de navigateur pour représenter ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Texte affiché par certains conteneurs de navigateur pour représenter cet objet Container.
     
      <p>Par exemple, si ce conteneur est un enfant d’un élément TabNavigator, cette chaîne s’affiche dans l’onglet correspondant. Si ce conteneur est un enfant d’un composant Accordion, cette chaîne s’affiche dans l’en-tête correspondant.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:maxHorizontalScrollPosition:get"><apiName>maxHorizontalScrollPosition</apiName><shortdesc>
      Plus grande valeur possible de la propriété horizontalScrollPosition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Plus grande valeur possible de la propriété <codeph>horizontalScrollPosition</codeph>. La valeur par défaut est 0 si la barre de défilement horizontale n’est pas présente.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:maxVerticalScrollPosition:get"><apiName>maxVerticalScrollPosition</apiName><shortdesc>
      Plus grande valeur possible de la propriété verticalScrollPosition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Plus grande valeur possible de la propriété <codeph>verticalScrollPosition</codeph>. La valeur par défaut est 0 si la barre de défilement verticale n’est pas présente.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:numChildren:get"><apiName>numChildren</apiName><shortdesc>
      Nombre de composants enfant dans ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Nombre de composants enfant dans ce conteneur.
     
      <p>Le nombre d’enfants est initialement égal au nombre d’enfants déclarés dans la code MXML. Lors de l’exécution, de nouveaux enfants peuvent être ajoutés par l’appel des méthodes <codeph>addChild()</codeph> ou <codeph>addChildAt()</codeph> et les enfants existants peuvent être supprimés par l’appel des méthodes <codeph>removeChild()</codeph>, <codeph>removeChildAt()</codeph> ou <codeph>removeAllChildren()</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:numElements:get"><apiName>numElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:Container:rawChildren:get"><apiName>rawChildren</apiName><shortdesc>
      Un conteneur contient généralement des composants enfant qui peuvent être énumérés à l’aide de la méthode Container.getChildAt() et de la propriété Container.numChildren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:IChildList"/></apiValueDef><apiDesc>
      Un conteneur contient généralement des composants enfant qui peuvent être énumérés à l’aide de la méthode <codeph>Container.getChildAt()</codeph> et de la propriété <codeph>Container.numChildren</codeph>. De plus, le conteneur peut contenir des éléments de style et des habillages, tels que la bordure et l’arrière-plan. Flash Player et AIR ne font aucune distinction entre les composants enfant et les habillages. Elles sont toutes accessibles à l’aide de la méthode <codeph>getChildAt()</codeph> et de la propriété <codeph>numChildren</codeph> du lecteur. Toutefois, la classe Container remplace la méthode <codeph>getChildAt()</codeph> et la propriété <codeph>numChildren</codeph> (ainsi que plusieurs autres méthodes) pour créer l’illusion que les enfants du conteneur sont les seuls composants enfant.
     
      <p>Si vous devez accéder à tous les enfants du conteneur (les enfants de contenu et les habillages), utilisez les méthodes et propriétés sur la propriété <codeph>rawChildren</codeph> plutôt que les méthodes habituelles de la classe Container. Par exemple, utilisez la méthode <codeph>Container.rawChildren.getChildAt())</codeph>. Toutefois, si un conteneur crée un objet Sprite ContentPane pour ses enfants, la valeur de la propriété <codeph>rawChildren</codeph> ne compte que l’élément ContentPane, pas les enfants du conteneur. Il n’est pas toujours possible de déterminer le moment où un conteneur va disposer d’un élément ContentPane.</p>
     
      <p><b>Remarque :</b> si vous appelez la méthode <codeph>addChild</codeph> ou <codeph>addChildAt</codeph> de l’objet <codeph>rawChildren</codeph>, définissez la valeur <codeph>tabFocusEnabled = false</codeph> sur le composant ajouté. Cela empêche les utilisateurs d’accéder par tabulation au composant uniquement visuel ajouté.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalLineScrollSize:get"><apiName>verticalLineScrollSize</apiName><shortdesc>
      Nombre de pixels à faire défiler lorsque la flèche vers le haut ou vers le bas est cliquée dans la barre de défilement verticale, ou lorsque vous faites défiler à l’aide de la molette de la souris. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="verticalLineScrollSizeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>5
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de pixels à faire défiler lorsque la flèche vers le haut ou vers le bas est activée dans la barre de défilement verticale, ou lorsque vous faites défiler à l’aide de la molette de la souris. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalPageScrollSize:get"><apiName>verticalPageScrollSize</apiName><shortdesc>
      Nombre de pixels à faire défiler lorsque la piste est cliquée dans la barre de défilement verticale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="verticalPageScrollSizeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de pixels à faire défiler lorsque la piste est cliquée dans la barre de défilement verticale. La valeur 0 signifie que la taille de page est calculée pour correspondre au plein écran.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalScrollBar:get"><apiName>verticalScrollBar</apiName><shortdesc>
      Barre de défilement verticale utilisée dans ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.scrollClasses:ScrollBar</apiValueClassifier></apiValueDef><apiDesc>
      Barre de défilement verticale utilisée dans ce conteneur. Cette propriété est nulle si aucune barre de défilement verticale n’est actuellement affichée. En général, vous n’accédez pas directement à cette propriété. La manipulation des propriétés <codeph>verticalScrollPolicy</codeph> et <codeph>verticalScrollPosition</codeph> permet un contrôle suffisant de la barre de défilement.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc>
      Spécifie si la barre de défilement verticale est toujours présente, toujours absente ou automatiquement ajoutée en cas de besoin.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="verticalScrollPolicyChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie si la barre de défilement verticale est toujours présente, toujours absente ou automatiquement ajoutée en cas de besoin. Les valeurs possibles sont <codeph>ScrollPolicy.ON</codeph>, <codeph>ScrollPolicy.OFF</codeph> et <codeph>ScrollPolicy.AUTO</codeph>. Les valeurs MXML peuvent être <codeph>"on"</codeph>, <codeph>"off"</codeph> et <codeph>"auto"</codeph>.
     
      <p>La définition de cette propriété sur <codeph>ScrollPolicy.OFF</codeph> empêche également la propriété <codeph>verticalScrollPosition</codeph> d’avoir un effet.</p>
     
      <p>Remarque : cette propriété ne s’applique pas au conteneur ControlBar.</p>
     
      <p>Si la propriété <codeph>verticalScrollPolicy</codeph> a la valeur <codeph>ScrollPolicy.AUTO</codeph>, la barre de défilement verticale s’affiche lorsque toutes les conditions suivantes sont vérifiées :</p>
      <ul>
        <li>L’un des enfants du conteneur s’étend au-delà du bord supérieur ou inférieur du conteneur.</li>
        <li>La propriété <codeph>clipContent</codeph> a la valeur <codeph>true</codeph>.</li>
        <li>La largeur et la hauteur du conteneur sont suffisamment grandes pour accueillir une barre de défilement.</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc>
      Position actuelle de la barre de défilement verticale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="viewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Position actuelle de la barre de défilement verticale. Cette valeur est égale à la distance en pixels entre le bord supérieur de la surface défilante et la partie située tout en haut de la surface actuellement visible.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:viewMetricsAndPadding:get"><apiName>viewMetricsAndPadding</apiName><shortdesc>
      Retourne un objet qui comporte quatre propriétés : left, top, right et bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
      Renvoie un objet qui comporte quatre propriétés : <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> et <codeph>bottom</codeph>. La valeur de chaque propriété est égale à l’épaisseur du chrome (éléments visuels) autour du bord du conteneur, plus l’épaisseur des marges de l’objet.
     
      <p>Le chrome comprend l’épaisseur de la bordure. Si la propriété <codeph>horizontalScrollPolicy</codeph> ou <codeph>verticalScrollPolicy</codeph> a la valeur <codeph>ScrollPolicy.ON</codeph>, le chrome comprend également l’épaisseur de la barre de défilement correspondante. Si la stratégie de défilement est <codeph>ScrollPolicy.AUTO</codeph>, la mesure du chrome n’inclut pas l’épaisseur de la barre de défilement, même si une barre de défilement est affichée.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:viewMetrics:get"><apiName>viewMetrics</apiName><shortdesc>
      Retourne un objet qui comporte quatre propriétés : left, top, right et bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
      Renvoie un objet qui comporte quatre propriétés : <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> et <codeph>bottom</codeph>. La valeur de chaque propriété est égale à l’épaisseur du chrome (éléments visuels) autour du bord du conteneur.  
     
      <p>Le chrome comprend l’épaisseur de la bordure. Si la propriété <codeph>horizontalScrollPolicy</codeph> ou <codeph>verticalScrollPolicy</codeph> a la valeur <codeph>ScrollPolicy.ON</codeph>, le chrome comprend également l’épaisseur de la barre de défilement correspondante. Si la stratégie de défilement est <codeph>ScrollPolicy.AUTO</codeph>, la mesure du chrome n’inclut pas l’épaisseur de la barre de défilement, même si une barre de défilement est affichée.</p>
     
      <p>Les sous-classes de la classe Container doivent remplacer cette méthode, de sorte à inclure le chrome supplémentaire à prendre en compte lors du positionnement des enfants du conteneur. Par exemple, la propriété <codeph>viewMetrics</codeph> de la classe Panel doit renvoyer un objet dont la propriété <codeph>top</codeph> inclut l’épaisseur de la barre de titre du conteneur Panel.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ScrollControlBase"><apiName>ScrollControlBase</apiName><shortdesc>
  La classe ScrollControlBase est la classe de base des commandes avec des barres de défilement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="verticalScrollBarStyleName" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Nom du style de la barre de défilement verticale. Ceci facilite le contrôle de l’apparence de la barre de défilement. 
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur d’un symbole de composant. Les exemples incluent la coche d’un composant CheckBox ou la flèche d’un bouton ScrollBar.
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalScrollBarStyleName" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Nom du style de la barre de défilement horizontale. Ceci facilite le contrôle de l’apparence de la barre de défilement. 
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur de l’anneau de focus lorsque le composant détient le focus.
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Rayon des angles des composants.
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur de la zone de contenu du composant. 
   
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Valeur alpha de l’arrière-plan du contenu à ce composant. 
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur principale d’un composant.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur d’accentuation utilisée par les habillages des composants. L’habillage de bouton par défaut utilise cette couleur pour teinter l’arrière-plan. La mise en surbrillance du rail du curseur utilise cette couleur.  
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur (en pixels).
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.core:ScrollControlBase" playerVersion="Flash10" type="Class">
<description>
  Classe implémentant l’occurrence IUITextField qui permet à ce composant de rendre le texte.
 
  <p>Elle peut être définie sur la classe mx.core.UITextField (pour utiliser la classe TextField classique intégrée à Flash Player) ou la classe mx.core.UIFTETextField (pour utiliser Text Layout Framework, qui permet d’améliorer le rendu du texte et d’obtenir notamment une mise en forme bidirectionnelle).</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut de la plupart des composants est <codeph>"left"</codeph>. Pour le composant FormItem, la valeur par défaut est <codeph>"right"</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Cette propriété n’est reconnue que lorsque la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.core:ScrollControlBase" playerVersion="Flash10" type="String">
<description>
  Paramètres régionaux du texte affiché par ce composant. 
 
  <p>FTE et TLF utilisent ces paramètres régionaux pour mapper des caractères Unicode à des glyphes de police et rechercher des polices de rechange. </p>
 
  <p>Remarque : ce style s’applique uniquement lorsqu’un composant MX spécifie UIFTETextField comme classe <codeph>textFieldClass</codeph>.</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est supporté uniquement pour les polices incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en gras. Les valeurs reconnues sont <codeph>normal</codeph> et <codeph>bold</codeph>. La valeur par défaut du contrôle Button est <codeph>bold</codeph>. La valeur par défaut de tous les autres contrôles est <codeph>normal</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. Dans le thème Halo, la valeur par défaut est 10 pour tous les contrôles sauf ColorPicker. Pour le contrôle ColorPicker avec thème Halo, la valeur par défaut est 11. Dans le thème Spark, la valeur par défaut est 12 pour tous les contrôles sauf ColorPicker. Pour le contrôle ColorPicker avec thème Spark, la valeur par défaut est 11.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée. La police par défaut du thème Halo est <codeph>"Verdana"</codeph>. La police par défaut du thème Spark est <codeph>"Arial"</codeph>. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>, ce qui active l’anti-aliasing avancé de la police. Définissez la propriété sur <codeph>"normal"</codeph> pour désactiver l’anti-aliasing avancé.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’intégralité du texte d’un sous-contrôle TextField : vous ne pouvez pas l’appliquer à certains caractères seulement et non à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.core:ScrollControlBase" playerVersion="Flash10" type="String">
<description>
  Direction du texte affiché par le composant. 
 
  <p>Les valeurs autorisées sont <codeph>"ltr"</codeph> pour les textes rédigés de gauche à droite, comme dans les scripts de style latin et <codeph>"rtl"</codeph> pour les textes rédigés de droite à gauche, comme l’arabe ou l’hébreu. </p>
 
  <p>FTE et TLF utilisent cette valeur dans leur algorithme de mise en forme de texte bidirectionnel, lequel mappe l’ordre des caractères Unicode sur ordre des glyphes. </p>
 
  <p>Remarque : ce style s’applique uniquement lorsqu’un composant MX composant spécifie UIFTETextField comme classe <codeph>textFieldClass</codeph>.</p>
 
  <p>La <codeph>direction</codeph> a également une incidence sur l’alignement du texte dans les limites du TLFTextField. Elle n’a pas, cependant, d’incidence sur le positionnement de TLFTextField au sein du composant. </p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant, y compris l’étiquette du composant. La valeur par défaut du thème Halo est <codeph>0x0B333C</codeph>. La valeur par défaut du thème Spark est <codeph>0x000000</codeph>. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
 
  <p>La valeur par défaut est 2.</p>
  <p>La valeur par défaut du contrôle ComboBox est 0.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Indique quels coins du rectangle de focus doivent être arrondis. Cette valeur est une chaîne séparée par des espaces pouvant contenir toute combinaison de <codeph>"tl"</codeph>, <codeph>"tr"</codeph>, <codeph>"bl"</codeph> et <codeph>"br"</codeph>. Par exemple, pour indiquer que les coins du côté droit doivent être arrondis, mais que les coins du côté gauche doivent être carrés, utilisez <codeph>"tr br"</codeph>. La propriété de style <codeph>cornerRadius</codeph> indique le rayon des coins arrondis. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée pour la classe, la valeur par défaut est <codeph>"tl tr bl br"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Indique la valeur de transparence Alpha de l’habillage du focus. La valeur par défaut du thème Halo est <codeph>0.4</codeph>. La valeur par défaut du thème est Spark <codeph>0.55</codeph>. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Distance de l’ombre portée. Si la propriété est définie sur une valeur négative, l’ombre apparaît au-dessus du composant.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="String">
<description>
  Direction de l’ombre portée. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"center"</codeph> et <codeph>"right"</codeph>.
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropShadowColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’ombre portée.
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Propriété booléenne qui indique si le composant comporte une ombre portée visible. La valeur par défaut est <codeph>false</codeph>.
 
  <p><b>Remarque :</b> pour que les ombres portées apparaissent sur des conteneurs, définissez la propriété <codeph>contentBackgroundColor</codeph>. Sinon, l’ombre s’affiche derrière le conteneur, car l’arrière-plan par défaut d’un conteneur est transparent.</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  Propriété booléenne qui indique si le composant comporte une ombre portée visible. Ce style est utilisé avec <codeph>borderStyle="solid"</codeph>. La valeur par défaut est <codeph>false</codeph>.
 
  <p><b>Remarque :</b> pour que les ombres portées apparaissent sur des conteneurs, définissez les propriétés <codeph>backgroundColor</codeph> ou <codeph>backgroundImage</codeph>. Sinon, l’ombre s’affiche derrière le conteneur, car l’arrière-plan par défaut d’un conteneur est transparent.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Visibilité de la bordure.
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Epaisseur du cadre de sélection. Utilisé uniquement lorsque la propriété <codeph>borderStyle</codeph> est définie sur <codeph>"solid"</codeph>.
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Style du cadre de sélection. Les valeurs possibles sont <codeph>"none"</codeph>, <codeph>"solid"</codeph>, <codeph>"inset"</codeph> et <codeph>"outset"</codeph>. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>"inset"</codeph>. La valeur par défaut de la plupart des conteneurs est <codeph>"none"</codeph>. Les valeurs <codeph>"inset"</codeph> et <codeph>"outset"</codeph> sont valides uniquement avec le thème Halo.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSkin" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Class">
<description>
  Classe d’habillage de bordure du composant. La valeur par défaut de tous les composants qui ne spécifient pas explicitement leur propre valeur par défaut est <codeph>mx.skins.halo.HaloBorder</codeph> pour le thème Halo et <codeph>mx.skins.spark.BorderSkin</codeph> pour le thème Spark. La valeur par défaut du conteneur Panel est <codeph>mx.skins.halo.PanelSkin</codeph> pour le thème Halo et <codeph>mx.skins.spark.BorderSkin</codeph> pour le thème Spark. Pour déterminer la valeur par défaut d’un composant, voir le fichier default.css.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSides" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="String">
<description>
  Côtés du cadre de sélection. Chaîne délimitée par des espaces qui indique quels côtés de la bordure afficher. La chaîne peut contenir les valeurs <codeph>"left"</codeph>, <codeph>"top"</codeph>, <codeph>"right"</codeph> et <codeph>"bottom"</codeph> dans n’importe quel ordre. La valeur par défaut est <codeph>"left top right bottom"</codeph>, ce qui permet de montrer les quatre côtés. Ce style est uniquement utilisé lorsque la propriété borderStyle est <codeph>"solid"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  Couleur de la bordure. La valeur par défaut dépend de la classe du composant ; si elle n’est pas remplacée pour la classe, la valeur par défaut est <codeph>0xB7BABC</codeph> pour le thème Halo et <codeph>0x696969</codeph> pour le thème Spark. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Alpha de la bordure.
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSize" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="String">
<description>
  Met à l’échelle l’image spécifiée par la propriété <codeph>backgroundImage</codeph> sur différentes tailles de pourcentage. Une valeur de <codeph>"100%"</codeph> étire l’image afin de remplir l’intégralité du composant. Pour spécifier un pourcentage, vous devez inclure le symbole de pourcentage (%). La valeur par défaut du conteneur Application est <codeph>100%</codeph>. La valeur par défaut de tous les autres conteneurs est <codeph>auto</codeph>, ce qui permet de conserver la taille d’origine de l’image.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Object">
<description>
  Image d’arrière-plan d’un composant. Il peut s’agir d’une URL absolue ou relative ou d’une classe. Vous pouvez définir la propriété <codeph>backgroundColor</codeph> ou <codeph>backgroundImage</codeph>. L’image d’arrière-plan s’affiche par dessus la couleur d’arrière-plan. La valeur par défaut est <codeph>undefined</codeph>, c’est-à-dire « non définie ». Si ce style et le style de la propriété <codeph>backgroundColor</codeph> ne sont pas définis, le composant est doté d’un arrière-plan transparent.
 
  <p>Les habillages par défaut de la plupart des contrôles Flex sont partiellement transparents. Par conséquent, l’image d’arrière-plan d’un conteneur déteint partiellement sur les contrôles qui se trouvent dans ce conteneur. Vous pouvez éviter cette situation en définissant les valeurs Alpha de la propriété <codeph>fillAlphas</codeph> du contrôle sur 1, comme le montre l’exemple suivant :
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="backgroundDisabledColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur d’arrière-plan du composant lorsqu’il est désactivé. La valeur par défaut globale est <codeph>undefined</codeph>. La valeur par défaut des contrôles List est <codeph>0xDDDDDD</codeph> (gris clair). Si un conteneur est désactivé, l’arrière-plan est estompé et le degré d’estompe est contrôlé par le style <codeph>disabledOverlayAlpha</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur d’arrière-plan d’un composant. Les deux propriétés <codeph>backgroundColor</codeph> et <codeph>backgroundImage</codeph> peuvent être définies. Certains composants n’ont pas d’arrière-plan. Le contrôle DataGrid ignore ce style. La valeur par défaut est <codeph>undefined</codeph>, ce qui signifie qu’elle n’est pas définie. Si ce style et le style de la propriété <codeph>backgroundImage</codeph> sont <codeph>undefined</codeph>, le composant est doté d’un arrière-plan transparent.
 
  <p>Pour le conteneur Application, ce style indique la couleur d’arrière-plan lors du chargement de l’application et un dégradé d’arrière-plan lors de son exécution. Flex calcule le motif de dégradé entre une couleur légèrement plus sombre que la couleur spécifiée et une couleur légèrement plus claire que la couleur spécifiée.</p>
 
  <p>Les habillages par défaut de la plupart des contrôles Flex sont partiellement transparents. Par conséquent, la couleur d’arrière-plan d’un conteneur déteint partiellement sur les contrôles qui se trouvent dans ce conteneur. Vous pouvez éviter cette situation en définissant les valeurs Alpha de la propriété <codeph>fillAlphas</codeph> du contrôle sur 1, comme le montre l’exemple suivant :
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Niveau Alpha de la couleur définie par la propriété <codeph>backgroundColor</codeph>, de l’image ou fichier SWF défini par le style <codeph>backgroundImage</codeph>. Les valeurs possibles vont de 0.0 à 1.0. Pour la plupart des contrôles, la valeur par défaut est 1.0, mais pour les contrôles ToolTip, la valeur par défaut est de 0.95 et pour les contrôles Alert, elle est de 0.9.
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;ScrollControlBase&gt;</code> tag inherits all the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:<i>tagname</i>
  <b>Properties</b>
  border="<i>object of border skin style</i>"
  horizontalScrollPolicy="off|on|auto"
  horizontalScrollPosition="0"
  liveScrolling="true|false"
  maxHorizontalScrollPosition="NaN"
  maxVerticalScrollPosition="NaN"
  scrollTipFunction="undefined"
  showScrollTips="false|true"
  verticalScrollPolicy="auto|off|on"
  verticalScrollPosition="0" 
  <b>Styles</b>
  backgroundAlpha="1.0"
  backgroundColor="undefined"
  backgroundImage="undefined"
  backgroundSize="auto"
  borderColor="0xAAB3B3"
  borderSides="left top right bottom"
  borderSkin="ClassReference('mx.skins.halo.HaloBorder')"
  borderStyle="inset"
  borderThickness="1"
  color="0x0B333C"
  cornerRadius="0"
  disabledColor="0xAAB3B3"
  dropShadowColor="0x000000"
  dropShadowEnabled="false"
  fontFamily="Verdana"
  fontSize="10"
  fontStyle="normal|italic"
  fontWeight="normal|bold"
  horizontalScrollBarStyleName=""
  leading="2"
  shadowDirection="center"
  shadowDistance="2"
  textAlign="<i>value; see detail.</i>"
  textDecoration="none|underline"
  textIndent="0"
  verticalScrollBarStyleName=""
 
  <b>Events</b>
  scroll="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Classe de base pour les vues/conteneurs qui prennent en charge le défilement.
  
  </apiTipText></apiTipTexts><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ScrollControlBase est la classe de base des commandes avec des barres de défilement. L’utilisateur interagit avec la barre de défilement ou le développeur accède aux méthodes et propriétés qui modifient la zone visible. La classe ScrollControlBase prend un seul objet enfant. Elle le positionne et le masque ou le redimensionne pour en afficher le contenu visible. Tous les éléments à faire défiler doivent être des enfants de cet objet de contenu.
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:ScrollControlBase_mx.events.ScrollEvent.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
  Distribué lorsque l’utilisateur fait défiler le contenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3269
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ScrollEvent.SCROLL</apiEventType><adobeApiEventClassifier>mx.events.ScrollEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur fait défiler le contenu.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:ScrollControlBase:ScrollControlBase"><apiName>ScrollControlBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ScrollControlBase:protected:createBorder"><apiName>createBorder</apiName><shortdesc>
      Crée la bordure de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Crée la bordure de ce composant. Normalement, la bordure est déterminée par les styles <codeph>borderStyle</codeph> et <codeph>borderSkin</codeph>. La propriété de la bordure doit être définie sur l’occurrence de la bordure.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      Crée des objets qui sont des enfants de cette classe ScrollControlBase. Dans ce cas, il s’agit de la bordure et du masque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Crée des objets qui sont des enfants de cette classe ScrollControlBase. Dans ce cas, il s’agit de la bordure et du masque. Flex appelle cette méthode lors de la création initiale de la classe ScrollControlBase. Si une sous-classe remplace cette méthode, la sous-classe doit appeler la méthode <codeph>super.createChildren()</codeph> afin d’exécuter la logique de la méthode <codeph>ScrollControlBase.createChildren()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:layoutChrome"><apiName>layoutChrome</apiName><shortdesc>
      Répond aux changements de taille en définissant les positions et les tailles des bordures de ce contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Indique la largeur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> du composant.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Indique la hauteur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> du composant.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Répond aux changements de taille en définissant les positions et les tailles des bordures de ce contrôle.
     
      <p>La méthode <codeph>ScrollControlBase.layoutChrome()</codeph> définit la position et la taille de la bordure du contrôle ScrollControlBase. Dans chaque sous-classe du contrôle ScrollControlBase, la méthode <codeph>layoutChrome()</codeph> de la sous-classe doit appeler la méthode <codeph>super.layoutChrome()</codeph>, afin de positionner correctement la bordure.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:mouseWheelHandler"><apiName>mouseWheelHandler</apiName><shortdesc>
      Gestionnaire de l’événement de défilement de la molette de souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>Objet événement.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gestionnaire de l’événement de défilement de la molette de souris.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:roomForScrollBar"><apiName>roomForScrollBar</apiName><shortdesc>
      Détermine si le composant comporte suffisamment d’espace pour afficher une barre de défilement donnée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Renvoie true si l’espace est suffisant pour une barre de défilement.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>bar</apiItemName><apiOperationClassifier>mx.controls.scrollClasses:ScrollBar</apiOperationClassifier><apiDesc>Barre de défilement
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Indique la largeur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> du composant.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Indique la hauteur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> du composant.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Détermine si le composant comporte suffisamment d’espace pour afficher une barre de défilement donnée.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:scrollHandler"><apiName>scrollHandler</apiName><shortdesc>
      Gestionnaire par défaut de l’événement de défilement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Objet événement.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gestionnaire par défaut de l’événement <codeph>scroll</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:setScrollBarProperties"><apiName>setScrollBarProperties</apiName><shortdesc>
      Implique l’affichage ou le masquage des barres de défilement par le contrôle ScrollControlBase en fonction des paramètres transmis.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>totalColumns</apiItemName><apiType value="int"/><apiDesc>Nombre d’unités horizontales à afficher.
     
      </apiDesc></apiParam><apiParam><apiItemName>visibleColumns</apiItemName><apiType value="int"/><apiDesc>Nombre d’unités horizontales pouvant être affichées simultanément.
     
      </apiDesc></apiParam><apiParam><apiItemName>totalRows</apiItemName><apiType value="int"/><apiDesc>Nombre d’unités verticales à afficher.
     
      </apiDesc></apiParam><apiParam><apiItemName>visibleRows</apiItemName><apiType value="int"/><apiDesc>Nombre d’unités verticales pouvant être affichées simultanément.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Implique l’affichage ou le masquage des barres de défilement par le contrôle ScrollControlBase en fonction des paramètres transmis. Si l’affichage d’un composant TextArea est limité à 100 pixels de largeur et 5 lignes de texte, mais que le texte à afficher comporte 200 pixels en largeur et 30 lignes de texte, alors la méthode <codeph>setScrollBarProperties()</codeph> est appelée en tant que méthode <codeph>setScrollBarProperties(200, 100, 30, 5)</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ScrollControlBase:protected:border"><apiName>border</apiName><shortdesc>
      Objet bordure.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="mx.core:IFlexDisplayObject"/></apiValueDef><apiDesc>
      Objet bordure.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:protected:horizontalScrollBar"><apiName>horizontalScrollBar</apiName><shortdesc>
      Barre de défilement horizontale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.controls.scrollClasses:ScrollBar</apiValueClassifier></apiValueDef><apiDesc>
      Barre de défilement horizontale. Cette propriété a la valeur null si aucune barre de défilement horizontale n’est actuellement affichée. En général, vous n’accédez pas directement à cette propriété. La manipulation des propriétés <codeph>horizontalScrollPolicy</codeph> et <codeph>horizontalScrollPosition</codeph> permet un contrôle suffisant de la barre de défilement.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:liveScrolling"><apiName>liveScrolling</apiName><shortdesc>
      Indicateur signalant si le défilement est simultané au déplacement du curseur de défilement ou si l’affichage n’est mis à jour que lorsque le curseur est relâché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur signalant si le défilement est simultané au déplacement du curseur de défilement ou si l’affichage n’est mis à jour que lorsque le curseur est relâché. La valeur par défaut est <codeph>true</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:protected:maskShape"><apiName>maskShape</apiName><shortdesc>
      Masque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.display:Shape"/></apiValueDef><apiDesc>
      Masque. Cette propriété peut être non définie si aucune barre de défilement n’est actuellement affichée ou encore dans les sous-classes disposant d’un mécanisme de masquage différent. Un masque définit la zone visible d’un objet affichable. Par conséquent, ce masque permet de dissimuler les parties du contenu qui ne sont pas actuellement affichables. En général, vous n’accédez pas directement à cette propriété. La manipulation des propriétés <codeph>horizontalScrollPolicy</codeph>, <codeph>verticalScrollPolicy</codeph>, <codeph>horizontalScrollPosition</codeph> et <codeph>verticalScrollPosition</codeph> permet un contrôle suffisant du masque.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:protected:scrollAreaChanged"><apiName>scrollAreaChanged</apiName><shortdesc>
      Indicateur signalant que la zone de défilement a changé en raison de l’apparition ou de la disparition des barres de défilement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur signalant que la zone de défilement a changé en raison de l’apparition ou de la disparition des barres de défilement. Utilisé par la plupart des méthodes de présentation pour réajuster à nouveau les propriétés de défilement.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:showScrollTips"><apiName>showScrollTips</apiName><shortdesc>
      Indicateur signalant si l’info-bulle correspondante doit apparaître près du curseur de défilement lorsqu’il est en cours de déplacement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur signalant si l’info-bulle correspondante doit apparaître près du curseur de défilement lorsqu’il est en cours de déplacement. La valeur par défaut est <codeph>false</codeph> pour désactiver l’info-bulle. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:protected:verticalScrollBar"><apiName>verticalScrollBar</apiName><shortdesc>
      Barre de défilement verticale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.controls.scrollClasses:ScrollBar</apiValueClassifier></apiValueDef><apiDesc>
      Barre de défilement verticale. Cette propriété est nulle si aucune barre de défilement verticale n’est actuellement affichée. En général, vous n’accédez pas directement à cette propriété. La manipulation des propriétés <codeph>verticalScrollPolicy</codeph> et <codeph>verticalScrollPosition</codeph> permet un contrôle suffisant de la barre de défilement.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      Renvoie un objet EdgeMetrics qui comporte quatre propriétés : left, top, right et bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
      Renvoie un objet EdgeMetrics qui comporte quatre propriétés : <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> et <codeph>bottom</codeph>. La valeur de chaque propriété est égale à l’épaisseur d’un côté de la bordure, exprimée en pixels.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc>
      Propriété indiquant si la barre de défilement horizontale est toujours activée, toujours désactivée ou si elle change automatiquement en fonction des paramètres transmis à la méthode setScrollBarProperties(). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="horizontalScrollPolicyChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.OFF
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Propriété indiquant si la barre de défilement horizontale est toujours activée, toujours désactivée ou si elle change automatiquement en fonction des paramètres transmis à la méthode <codeph>setScrollBarProperties()</codeph>. Les valeurs autorisées sont <codeph>ScrollPolicy.ON</codeph>, <codeph>ScrollPolicy.OFF</codeph> et <codeph>ScrollPolicy.AUTO</codeph>. Les valeurs MXML peuvent être <codeph>"on"</codeph>, <codeph>"off"</codeph> et <codeph>"auto"</codeph>.
     
      <p>La définition de cette propriété sur <codeph>ScrollPolicy.OFF</codeph> pour les sous-classes ListBase n’affecte pas la propriété <codeph>horizontalScrollPosition</codeph>. Vous pouvez toujours faire défiler le contenu par programmation.</p>
     
      <p>Notez que la stratégie peut affecter la taille mesurée du composant. Si la stratégie est <codeph>ScrollPolicy.AUTO</codeph>, la barre de défilement n’est pas mise à l’échelle dans la taille mesurée. Cela permet d’éviter un nouveau calcul de la présentation lorsque la barre de défilement s’affiche. Si vous savez que vous avez suffisamment de données pour afficher des barres de défilement, définissez la stratégie sur <codeph>ScrollPolicy.ON</codeph>. Dans le cas contraire, définissez éventuellement une largeur ou une hauteur explicite sur le composant pour l’affichage ultérieur de barres de défilement.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
      Décalage dans le contenu à partir du bord gauche.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="viewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Décalage dans le contenu à partir du bord gauche. Il peut s’agir d’un décalage en pixels dans certaines sous-classes, ou d’une autre unité comme le nombre de colonnes dans un composant DataGrid ou le nombre d’éléments dans un composant HorizontalList ou TileList. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:maxHorizontalScrollPosition:get"><apiName>maxHorizontalScrollPosition</apiName><shortdesc>
      Valeur maximale de la propriété horizontalScrollPosition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="maxHorizontalScrollPositionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Valeur maximale de la propriété <codeph>horizontalScrollPosition</codeph>. Notez qu’il ne s’agit pas de la largeur du contenu, car la propriété <codeph>maxHorizontalScrollPosition</codeph> contient la largeur du contenu moins celle de la zone affichable. 
     
      <p>Dans la plupart des composants, la valeur de la propriété <codeph>maxHorizontalScrollPosition</codeph> est calculée à partir des données et de la taille du composant et ne doit pas être définie par le code de l’application. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:maxVerticalScrollPosition:get"><apiName>maxVerticalScrollPosition</apiName><shortdesc>
      Valeur maximale de la propriété verticalScrollPosition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="maxVerticalScrollPositionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Valeur maximale de la propriété <codeph>verticalScrollPosition</codeph>. Notez qu’il ne s’agit pas de la hauteur du contenu, car la propriété <codeph>maxVerticalScrollPosition</codeph> contient la hauteur du contenu moins celle de la zone affichable. 
     
      <p>La valeur de la propriété <codeph>maxVerticalScrollPosition</codeph> est calculée à partir des données et de la taille du composant et ne doit pas être définie par le code de l’application.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:scrollTipFunction:get"><apiName>scrollTipFunction</apiName><shortdesc>
      Fonction qui calcule la chaîne à afficher en tant que composant ScrollTip.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="scrollTipFunctionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Fonction qui calcule la chaîne à afficher en tant que composant ScrollTip. Cette fonction est appelée si la propriété <codeph>showScrollTips</codeph> est définie sur <codeph>true</codeph> et si le curseur de défilement est en cours de déplacement. La fonction doit renvoyer une chaîne utilisée comme composant ScrollTip. Deux paramètres sont transmis à la fonction. Le premier indique la <codeph>direction</codeph> de la barre de défilement. Le deuxième correspond à sa valeur <codeph>scrollPosition</codeph>, comme l’illustre l’exemple suivant :
      
      <pre>
      function scrollTipFunction(direction:String, position:Number):String 
      {
        if (direction == "vertical") return myToolTips[position];
        else return "";
      }</pre>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc>
      Propriété indiquant si la barre de défilement verticale est toujours activée, toujours désactivée ou si elle change automatiquement en fonction des paramètres transmis à la méthode setScrollBarProperties(). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="verticalScrollPolicyChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Propriété indiquant si la barre de défilement verticale est toujours activée, toujours désactivée ou si elle change automatiquement en fonction des paramètres transmis à la méthode <codeph>setScrollBarProperties()</codeph>. Les valeurs autorisées sont <codeph>ScrollPolicy.ON</codeph>, <codeph>ScrollPolicy.OFF</codeph> et <codeph>ScrollPolicy.AUTO</codeph>. Les valeurs MXML peuvent être <codeph>"on"</codeph>, <codeph>"off"</codeph> et <codeph>"auto"</codeph>.
     
      <p>La définition de cette propriété sur <codeph>ScrollPolicy.OFF</codeph> pour les sous-classes ListBase n’affecte pas la propriété <codeph>verticalScrollPosition</codeph>. Vous pouvez toujours faire défiler le contenu par programmation.</p>
     
      <p>Notez que la stratégie peut affecter la taille mesurée du composant. Si la stratégie est <codeph>ScrollPolicy.AUTO</codeph>, la barre de défilement n’est pas mise à l’échelle dans la taille mesurée. Cela permet d’éviter un nouveau calcul de la présentation lorsque la barre de défilement s’affiche. Si vous savez que vous avez suffisamment de données pour afficher des barres de défilement, définissez la stratégie sur <codeph>ScrollPolicy.ON</codeph>. Dans le cas contraire, définissez éventuellement une largeur ou une hauteur explicite sur le composant pour l’affichage ultérieur de barres de défilement.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc>
      Décalage dans le contenu à partir du bord supérieur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="viewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Décalage dans le contenu à partir du bord supérieur. Il peut s’agir d’un décalage en pixels dans certaines sous-classes, ou d’une autre unité comme le nombre de lignes dans un composant List ou le nombre de cellules dans un composant TileList.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:viewMetrics:get"><apiName>viewMetrics</apiName><shortdesc>
      Objet EdgeMetrics prenant en compte les barres de défilement éventuellement visibles. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
      Objet EdgeMetrics prenant en compte les barres de défilement éventuellement visibles. 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>