<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.core"><apiName>mx.core</apiName><apiDetail/><apiClassifier id="mx.core:LayoutContainer"><apiName>LayoutContainer</apiName><shortdesc>
  Flex definiert einen Standard- oder Application-Container, mit dem Sie mit dem Hinzufügen von Inhalten zu Ihrem Modul oder Ihrer Anwendung beginnen können, ohne explizit einen anderen Container definieren zu müssen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="property" name="y"/><Exclude kind="property" name="x"/><Exclude kind="property" name="toolTip"/><Exclude kind="property" name="tabIndex"/><Exclude kind="property" name="label"/><Exclude kind="property" name="icon"/><Exclude kind="property" name="direction"/><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen der oberen Rahmenlinie des und seinem Inhaltsbereich. 
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen der unteren Rahmenlinie des und seinem Inhaltsbereich.  
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen untergeordneten Objekten in vertikaler Richtung. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für diese Klasse nicht außer Kraft gesetzt wird, ist er 6.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen den untergeordneten Elementen in horizontaler Richtung. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für diese Klasse nicht außer Kraft gesetzt wird, ist er 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="String">
<description>
  Vertikale Ausrichtung von untergeordneten Objekten im Container. Mögliche Werte sind <codeph>"top"</codeph>, <codeph>"middle"</codeph> und <codeph>"bottom"</codeph>. Der Standardwert ist <codeph>„top“</codeph>, aber manche Container wie ButtonBar, ControlBar, LinkBar und ToggleButtonBar haben andere Standardwerte.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="String">
<description>
  Horizontale Ausrichtung von untergeordneten Objekten im Container. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"center"</codeph> und <codeph>"right"</codeph>. Der Standardwert ist <codeph>„links“</codeph>, aber manche Container wie ButtonBar und ToggleButtonBar haben andere Standardwerte.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Application&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Application
    <strong>Properties</strong>
    layout="vertical|horizontal|absolute"
    xmlns:<i>No default</i>="<i>No default</i>"
 
    <strong>Styles</strong> 
    horizontalAlign="center|left|right"
    horizontalGap="8"
    paddingBottom="0"
    paddingTop="0"
    verticalAlign="top|bottom|middle"
    verticalGap="6"
  
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.containers.utilityClasses:IConstraintLayout</apiBaseInterface><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Flex definiert einen Standard- oder Application-Container, mit dem Sie mit dem Hinzufügen von Inhalten zu Ihrem Modul oder Ihrer Anwendung beginnen können, ohne explizit einen anderen Container definieren zu müssen. Flex erstellt diesen Container ausgehend vom <codeph>&lt;mx:Application></codeph>-Tag, dem ersten Tag in einer MXML-Anwendungsdatei, oder ausgehend vom <codeph>&lt;mx:Module></codeph>-Tag, dem ersten Tag in einer MXML-Moduldatei. Es könnte für Sie praktisch sein, den Application- oder Module-Container als einzigen Container in Ihrer Anwendung zu verwenden. In den meisten Fällen definieren Sie jedoch explizit mindestens einen weiteren Container, bevor Sie Ihrer Anwendung oder Ihrem Modul Steuerelemente hinzufügen.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links><apiConstructor id="mx.core:LayoutContainer:LayoutContainer"><apiName>LayoutContainer</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.core:LayoutContainer:protected:boxLayoutClass"><apiName>boxLayoutClass</apiName><shortdesc>
      Die mx.containers.utilityClasses.Layout-Unterklasse, die das Layout vornimmt
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      Die mx.containers.utilityClasses.Layout-Unterklasse, die das Layout vornimmt
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutContainer:protected:canvasLayoutClass"><apiName>canvasLayoutClass</apiName><shortdesc>
      Die mx.containers.utilityClasses.Layout-Unterklasse, die das Layout vornimmt
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      Die mx.containers.utilityClasses.Layout-Unterklasse, die das Layout vornimmt
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutContainer:constraintColumns:get"><apiName>constraintColumns</apiName><shortdesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintColumns">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintColumns">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutContainer:constraintRows:get"><apiName>constraintRows</apiName><shortdesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintRows">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintRows">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutContainer:layout:get"><apiName>layout</apiName><shortdesc>
      Legt den Layoutmechanismus für diese Anwendung fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="layoutChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"vertical"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Legt den Layoutmechanismus für diese Anwendung fest. Anwendungen können die Platzierung <codeph>"vertical"</codeph>, <codeph>"horizontal"</codeph> oder <codeph>"absolute"</codeph> verwenden. Mit der vertikalen Platzierung wird jede untergeordnete Komponenten vertikal vom oberen Rand der Anwendung bis zum unteren Rand in der festgelegten Reihenfolge angeordnet. Mit der horizontalen Platzierung wird jede untergeordnete Komponente horizontal vom linken Rand der Anwendung bis zum rechten Rand in der festgelegten Reihenfolge angeordnet. Bei der absoluten Platzierung wird kein automatisches Layout verwendet und Sie legen explizit den Standort jeder untergeordneten Komponente fest. 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:Repeater"><apiName>Repeater</apiName><shortdesc>
  Die Repeater-Klasse ist das Laufzeitobjekt, das dem &lt;mx:Repeater>-Tag entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The &lt;Repeater&gt; class has the following properties:</p>
 
  <pre>
  &lt;mx:Repeater
    <strong>Properties</strong>
    id="<i>No default</i>"
    childDescriptors="<i>No default</i>"
    count="<i>No default</i>"
    dataProvider="<i>No default</i>"
    recycleChildren="false|true"
    startingIndex="0"
 
    <strong>Events</strong>
    repeat="<i>No default</i>"
    repeatEnd="<i>No default</i>"
    repeatStart="<i>No default</i>"
  &gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IRepeater</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die Repeater-Klasse ist das Laufzeitobjekt, das dem <codeph>&lt;mx:Repeater></codeph>-Tag entspricht. Sie erstellt mehrere Instanzen ihrer Unterkomponenten auf der Basis ihrer dataProvider. Die wiederholten Komponenten können beliebige standardmäßige oder benutzerdefinierte Steuerelemente oder Container sein.
 
  <p>Sie können das <codeph>&lt;mx:Repeater></codeph>-Tag überall dort verwenden, wo ein Steuerelement- oder Container-Tag zulässig ist. Die einzige Ausnahme hierbei ist das Container-Tag <codeph>&lt;mx:Application></codeph>. Platzieren Sie zum Wiederholen einer Benutzeroberflächen-Komponente ihren Tag im <codeph>&lt;mx:Repeater></codeph>-Tag. Sie können in einem MXML-Dokument mehr als ein <codeph>&lt;mx:Repeater></codeph>-Tag verwenden. <codeph>&lt;mx:Repeater></codeph>-Tags können auch verschachtelt werden.</p>
 
  <p>Sie können das <codeph>&lt;mx:Repeater></codeph>-Tag nur für Objekte verwenden, die die UIComponent-Klasse erweitern.</p>
 
  </apiDesc><example conref="RepeaterExample.mxml"><swfblock conref="examples/RepeaterExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.core.xml#Container"><linktext>mx.core.Container</linktext></link><link href="" invalidHref="mx.core.UIComponent.xml"><linktext>mx.core.UIComponent</linktext></link><link href="" invalidHref="mx.core.UIComponentDescriptor.xml"><linktext>mx.core.UIComponentDescriptor</linktext></link><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links><adobeApiEvent id="mx.core:Repeater_mx.events.FlexEvent.REPEAT_START_repeatStart"><apiName>repeatStart</apiName><shortdesc>
  Wird ausgelöst, wenn Flex mit der Verarbeitung der dataProvider-Eigenschaft und der Erstellung der angegebenen Unterkomponenten beginnt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.REPEAT_START</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn Flex mit der Verarbeitung der <codeph>dataProvider</codeph>-Eigenschaft und der Erstellung der angegebenen Unterkomponenten beginnt. Dieses Ereignis wird selbst dann ausgelöst, wenn die <codeph>dataProvider</codeph>-Eigenschaft leer oder <codeph>null</codeph> ist.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Repeater_mx.events.FlexEvent.REPEAT_END_repeatEnd"><apiName>repeatEnd</apiName><shortdesc>
  Wird ausgelöst, nachdem alle Unterkomponenten eines Repeaters erstellt sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.REPEAT_END</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem alle Unterkomponenten eines Repeaters erstellt sind. Dieses Ereignis wird selbst dann ausgelöst, wenn die <codeph>dataProvider</codeph>-Eigenschaft leer oder <codeph>null</codeph> ist.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Repeater_mx.events.FlexEvent.REPEAT_repeat"><apiName>repeat</apiName><shortdesc>
  Wird immer dann ausgelöst, wenn ein Element verarbeitet wird und die currentIndex- und die currentItem-Eigenschaft aktualisiert werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.REPEAT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird immer dann ausgelöst, wenn ein Element verarbeitet wird und die <codeph>currentIndex</codeph>- und die <codeph>currentItem</codeph>-Eigenschaft aktualisiert werden.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:Repeater:Repeater"><apiName>Repeater</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:Repeater:executeChildBindings"><apiName>executeChildBindings</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Repeater:initializeRepeater"><apiName>initializeRepeater</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>container</apiItemName><apiType value="mx.core:IContainer"/></apiParam><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="mx.core:Repeater:childDescriptors"><apiName>childDescriptors</apiName><shortdesc>
      Ein Array von UIComponentDescriptor-Objekten für die untergeordneten Elemente dieses Repeaters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      Ein Array von UIComponentDescriptor-Objekten für die untergeordneten Elemente dieses Repeaters.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Repeater:container:get"><apiName>container</apiName><shortdesc>
      Der Container, der diesen Repeater enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:IContainer"/></apiValueDef><apiDesc>
      Der Container, der diesen Repeater enthält.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Repeater:count:get"><apiName>count</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="countChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
     </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:Repeater:currentIndex:get"><apiName>currentIndex</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="nextRepeaterItem"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
     </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:Repeater:currentItem:get"><apiName>currentItem</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="nextRepeaterItem"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
     </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:Repeater:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="collectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
     </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:Repeater:recycleChildren:get"><apiName>recycleChildren</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:Repeater:startingIndex:get"><apiName>startingIndex</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="startingIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
     </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.core:Application"><apiName>Application</apiName><shortdesc>
  Flex definiert einen Standard- oder Application-Container, mit dem Sie mit dem Hinzufügen von Inhalten zu Ihrer Anwendung beginnen können, ohne explizit einen anderen Container definieren zu müssen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="property" name="y"/><Exclude kind="property" name="x"/><Exclude kind="property" name="toolTip"/><Exclude kind="property" name="tabIndex"/><Exclude kind="property" name="label"/><Exclude kind="property" name="icon"/><Exclude kind="property" name="direction"/><Alternative owner="mx.core:Application" replacement="spark.components.Application" since="4.0">
	</Alternative><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der oberen Rahmenlinie der Anwendung und ihrem Inhaltsbereich. 
   </description>
<default>24
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der unteren Rahmenlinie der Anwendung und ihrem Inhaltsbereich.  
   </description>
<default>24
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="backgroundGradientColors" owner="mx.core:Application" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Legt die Farben fest, die für den Farbverlauf des Hintergrunds der Anwendung verwendet werden. Sie müssen diesen Wert auf ein Array aus zwei oder vier uint-Werten festlegen, die RGB-Farben definieren. Die Elemente 0 und 1 legen den Start- und Endwert für einen Farbverlauf fest. Stellen Sie für einen einfarbigen Hintergrund denselben Farbwert für die Elemente 0 und 1 ein. Der Wert <codeph>undefined</codeph> bedeutet, dass der Farbverlauf für den Hintergrund basierend auf der <codeph>backgroundColor</codeph>-Eigenschaft generiert wird.
   </description>
<default>undefined 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="backgroundGradientAlphas" owner="mx.core:Application" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Legt die Alphatransparenzwerte fest, die für den Farbverlauf des Hintergrunds der Anwendung verwendet werden. Hier müssen Sie ein Array von zwei Zahlen einstellen. Die Elemente 0 und 1 legen den Start- und Endwert für einen Alphatransparenzverlauf fest. 
   </description>
<default>[ 1.0, 1.0 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="yes" name="modalTransparencyDuration" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  In Millisekunden angegebene Dauer des modalen Transparenzeffekts, der ausgelöst wird, wenn ein modales Fenster geöffnet oder geschlossen wird.
 
  </description>
<default>100
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="modalTransparencyColor" owner="mx.core:Application" playerVersion="Flash9" type="uint">
<description>
  Farbe der modalen Überlagerungsebene. Dieser Stil wird in Verbindung mit dem <codeph>modalTransparency</codeph>-Stil verwendet, um die Farbgebung zu bestimmen, die für die Anwendung angewendet werden soll, wenn ein modales Fenster offen ist.
 
  </description>
<default>#DDDDDD
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="modalTransparencyBlur" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  Der Weichzeichnungseffekt, der auf die Anwendung angewendet wird, wenn ein modales Fenster offen ist. Ein Blur-Effekt bewirkt ein Weichzeichnen der Details eines Bilds. 
  
  </description>
<default>3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.filters.BlurFilter.xml"><linktext>flash.filters.BlurFilter</linktext></link></related-links></style><style inherit="yes" name="modalTransparency" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  Die Modalität von Komponenten, die vom PopUp Manager aufgerufen werden, wird simuliert, indem eine große, durchscheinende Überlagerung unter die Komponente gelegt wird. Aufgrund der Art, wie durchscheinende Objekte gerendert werden, ist möglicherweise eine leichte Dämpfung der Objekte unter der Überlagerung zu erkennen. Die effektive Transparenz kann eingestellt werden, indem Sie den <codeph>modalTransparency</codeph>-Wert von 0.0 (voll transparent) auf 1.0 (vollständig undurchsichtig) einstellen. Sie können auch die Farbe der Überlagerung einstellen, indem Sie den <codeph>modalTransparencyColor</codeph>-Stil ändern.
 
  </description>
<default>0.5
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;mx:Application&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;mx:Application
    <strong>Properties</strong>
    application="<i>No default</i>"
    controlBar="null"
    frameRate="24"
    historyManagementEnabled="true|false"
    layout="vertical|horizontal|absolute"
    pageTitle"<i>No default</i>"
    preloader="<i>No default</i>"
    resetHistory="false|true"
    scriptRecursionLimit="1000"
    scriptTimeLimit="60"
    usePreloader="true|false"
    viewSourceURL=""
    xmlns:<i>No default</i>="<i>No default</i>"
 
    <strong>Styles</strong> 
    backgroundGradientAlphas="[ 1.0, 1.0 ]"
    backgroundGradientColors="undefined"
    horizontalAlign="center|left|right"
    horizontalGap="8"
    modalTransparency="0.5"
    modalTransparencyBlur="3"
    modalTransparencyColor="#DDDDDD"
    modalTransparencyDuration="100"
    paddingBottom="24"
    paddingTop="24"
    verticalAlign="top|bottom|middle"
    verticalGap="6"
  
    <strong>Events</strong>
    applicationComplete="<i>No default</i>"
    error="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:LayoutContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Flex definiert einen Standard- oder Application-Container, mit dem Sie mit dem Hinzufügen von Inhalten zu Ihrer Anwendung beginnen können, ohne explizit einen anderen Container definieren zu müssen. Flex erstellt diesen Container aus dem <codeph>&lt;mx:Application></codeph>-Tag, dem ersten Tag in einer MXML-Anwendungsdatei. Es könnte für Sie praktisch sein, den Application-Container als einzigen Container in Ihrer Anwendung zu verwenden. In den meisten Fällen definieren Sie jedoch explizit mindestens einen weiteren Container, bevor Sie Ihrer Anwendung Steuerelemente hinzufügen.
   <p>Anwendungen unterstützen einen vordefinierten einfachen Stil, bei dem ein weißer Hintergrund, eine Ausrichtung links und keine Ränder eingestellt sind. Gehen Sie zum Verwenden dieses Stils wie folgt vor:</p>
   <pre>
    &lt;mx:Application styleName="plain" />
  </pre>
   <p>Dies entspricht dem Einstellen folgender Stilattribute:</p>
   <pre>
    backgroundColor="0xFFFFFF"
    horizontalAlign="left"
    paddingLeft="0"
    paddingTop="0"
    paddingBottom="0"
    paddingRight="0"
  </pre>
 
  </apiDesc><example conref="SimpleApplicationExample.mxml"><swfblock conref="examples/SimpleApplicationExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.managers.CursorManager.xml"><linktext>mx.managers.CursorManager</linktext></link><link href="" invalidHref="mx.managers.LayoutManager.xml"><linktext>mx.managers.LayoutManager</linktext></link><link href="" invalidHref="mx.managers.SystemManager.xml"><linktext>mx.managers.SystemManager</linktext></link><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links><adobeApiEvent id="mx.core:Application_flash.events.ErrorEvent.ERROR_error"><apiName>error</apiName><shortdesc>
  Wird ausgelöst, wenn ein HTTPService-Aufruf fehlschlägt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ErrorEvent.ERROR</apiEventType><adobeApiEventClassifier>flash.events.ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn ein HTTPService-Aufruf fehlschlägt.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Application_mx.events.FlexEvent.APPLICATION_COMPLETE_applicationComplete"><apiName>applicationComplete</apiName><shortdesc>
  Wird ausgelöst, nachdem die Anwendung initialisiert und vom LayoutManager verarbeitet sowie der Anzeigeliste zugeordnet wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.APPLICATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem die Anwendung initialisiert und vom LayoutManager verarbeitet sowie der Anzeigeliste zugeordnet wurde.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:Application:Application"><apiName>Application</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:Application:addToCreationQueue"><apiName>addToCreationQueue</apiName><shortdesc>
      Fügt der Erstellungswarteschlange der Anwendung einen Container hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiType value="Object"/><apiDesc>Die ID des Containers, der der Warteschlange hinzugefügt werden soll, oder eine Zeiger auf den Container selbst
           </apiDesc></apiParam><apiParam><apiItemName>preferredIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>(Optional) Eine positive Ganzzahl, die die Position des Containers in der Warteschlange relativ zu den anderen, derzeit in der Warteschlange vorhandenen Containern, bestimmt
           </apiDesc></apiParam><apiParam><apiItemName>callbackFunc</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Dieser Parameter wird ignoriert.
           </apiDesc></apiParam><apiParam><apiItemName>parent</apiItemName><apiType value="mx.core:IFlexDisplayObject"/><apiData>null</apiData><apiDesc>Dieser Parameter wird ignoriert.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt der Erstellungswarteschlange der Anwendung einen Container hinzu.
           <p>Verwenden Sie diesen Mechanismus zum geordneten Instanziieren und Zeichnen der Inhalte eines Containers. Für diesen Container muss vor dem Aufruf dieser Funktion die <codeph>creationPolicy</codeph>-Eigenschaft auf <codeph>"none"</codeph> gesetzt werden.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:Application:controlBar"><apiName>controlBar</apiName><shortdesc>
      Die ApplicationControlBar für diese Anwendung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:IUIComponent"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die ApplicationControlBar für diese Anwendung. 
           </apiDesc></apiValueDetail><related-links><link href="mx.containers.xml#ApplicationControlBar"><linktext>mx.containers.ApplicationControlBar</linktext></link></related-links></apiValue><apiValue id="mx.core:Application:frameRate"><apiName>frameRate</apiName><shortdesc>
        Gibt die Bildrate der Anwendung an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>24
      
      </apiDefaultValue></apiValueDef><apiDesc>
        Gibt die Bildrate der Anwendung an.
        <p>Hinweis: Diese Eigenschaft kann nicht mit ActionScript-Code eingestellt werden; sie muss in MXML-Code eingestellt werden.</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:historyManagementEnabled"><apiName>historyManagementEnabled</apiName><shortdesc>
      Ist der Wert „false“, wird der Verlaufsmanager deaktiviert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ist der Wert <codeph>false</codeph>, wird der Verlaufsmanager deaktiviert. Bei Verwendung des BrowserManager wird empfohlen, den Wert „false“ einzustellen.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:pageTitle"><apiName>pageTitle</apiName><shortdesc>
        Legt einen String fest, der in der Titelleiste des Browsers angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
        Gibt einen String an, der in der Titelleiste des Browsers angezeigt wird. Diese Eigenschaft stellt dieselben Funktionen bereit wie das HTML-Tag <codeph>&lt;title></codeph>.
             <p>Hinweis: Diese Eigenschaft kann nicht mithilfe von ActionScript-Code festgelegt werden. Sie muss in MXML-Code festgelegt werden. Der in MXML-Code eingestellte Code ist für die Verwendung mit einem Werkzeug konzipiert, das die mit SDK verfügbaren HTML-Vorlagen aktualisiert.</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:preloaderChromeColor"><apiName>preloaderChromeColor</apiName><shortdesc>
        Gibt die für die standardmäßige Preloader-Komponente verwendete Basisfarbe an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="uint"/></apiValueDef><apiDesc>
        Gibt die für die standardmäßige Preloader-Komponente verwendete Basisfarbe an. Diese Eigenschaft hat denselben Effekt wie der von den Spark-Skins verwendete <codeph>chromeColor</codeph>-Stil. Normalerweise muss diese Eigenschaft auf den Wert des von der Anwendung verwendeten <codeph>chromeColor</codeph>-Stils eingestellt werden.
        
        <p>Hinweis: Diese Eigenschaft kann nicht mit ActionScript-Code eingestellt werden; sie muss in MXML-Code eingestellt werden.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:preloader"><apiName>preloader</apiName><shortdesc>
      Der Anwendungscontainer unterstützt einen Anwendungs-Preloader, der anhand einer Anzeige den Download- und Initialisierungsfortschritt der SWF-Anwendungsdatei angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      Der Anwendungscontainer unterstützt einen Anwendungs-Preloader, der anhand einer Anzeige den Download- und Initialisierungsfortschritt der SWF-Anwendungsdatei angibt. Standardmäßig ist der Anwendungs-Preloader aktiviert. Der Preloader verfolgt, wie viele Byte heruntergeladen wurden und aktualisiert die Fortschrittanzeige laufend. 
           <p>Verwenden Sie diese Eigenschaft, um den Pfad einer Komponente anzugeben, die eine benutzerdefinierte Fortschrittanzeige definiert. Zum Erstellen einer benutzerdefinierten Fortschrittanzeige erstellen Sie normalerweise eine Unterklasse der Klasse „DownloadProgressBar“ oder eine Unterklasse der Klasse „flash.display.Sprite“, die die Schnittstelle „mx.preloaders.IPreloaderDisplay“ implementiert. </p>
           <p><b>Hinweis:</b> Diese Eigenschaft kann nicht mithilfe von ActionScript-Code festgelegt werden. Sie muss in MXML-Code festgelegt werden. </p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.preloaders.DownloadProgressBar.xml"><linktext>mx.preloaders.DownloadProgressBar</linktext></link><link href="" invalidHref="flash.display.Sprite.xml"><linktext>flash.display.Sprite</linktext></link><link href="" invalidHref="mx.preloaders.IPreloaderDisplay.xml"><linktext>mx.preloaders.IPreloaderDisplay</linktext></link></related-links></apiValue><apiValue id="mx.core:Application:resetHistory"><apiName>resetHistory</apiName><shortdesc>
      Wenn „true“ wird der Verlaufsstatus der Anwendung bei jedem erneuten Laden der Anwendung auf den ursprünglichen Status zurückgesetzt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn <codeph>true</codeph> wird der Verlaufsstatus der Anwendung bei jedem erneuten Laden der Anwendung auf den ursprünglichen Status zurückgesetzt. Anwendungen werden neu geladen, wenn eines der folgenden Ereignisse eintritt:
      <ul>
        <li>Der Benutzer klickt auf die Aktualisierungsschaltfläche des Browsers.</li>
        <li>Der Benutzer navigiert zu einer anderen Webseite und klickt dann auf die Zurück-Schaltfläche, um zur Flex-Anwendung zurückzukehren.</li>
        <li>Der Benutzer lädt eine Flex-Anwendung aus dem Favoriten- bzw. Lesezeichenmenü des Browsers.</li>
      </ul>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:scriptRecursionLimit"><apiName>scriptRecursionLimit</apiName><shortdesc>
        Gibt die maximale Tiefe von Flash Player- oder AIR-Call-Stack an, bevor der Player angehalten wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/><apiDefaultValue>1000
      
      </apiDefaultValue></apiValueDef><apiDesc>
        Gibt die maximale Tiefe des Flash Player- oder AIR-Aufrufstapels an, bevor der Player angehalten wird. Dies ist im Wesentlichen die Stapelüberlaufsgrenze.
        <p>Hinweis: Diese Eigenschaft kann nicht mit ActionScript-Code eingestellt werden; sie muss in MXML-Code eingestellt werden.</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:scriptTimeLimit"><apiName>scriptTimeLimit</apiName><shortdesc>
        Gibt die maximale Dauer in Sekunden an, während der eine ActionScript-Ereignisprozedur ausgeführt werden kann, bevor Flash Player oder AIR davon ausgehen, dass sie nicht mehr reagiert und sie abbricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>60
      
      </apiDefaultValue></apiValueDef><apiDesc>
        Gibt die maximale Dauer in Sekunden an, die eine ActionScript-Ereignisprozedur ausgeführt werden kann, bevor Flash Player oder AIR annimmt, dass die Anwendung abgestürzt ist und sie abgebrochen wird. Der maximal zulässige Wert, den Sie einstellen können, beträgt 60 Sekunden.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:usePreloader"><apiName>usePreloader</apiName><shortdesc>
        Mit „true“ wird angegeben, dass der Anwendungs-Preloader angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
        Legt, wenn <codeph>true</codeph>, fest, dass der Anwendung-Preloader angezeigt wird.
        <p>Hinweis: Diese Eigenschaft kann nicht mit ActionScript-Code eingestellt werden; sie muss in MXML-Code eingestellt werden.</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:application:get"><apiName>application</apiName><shortdesc>
      Ein Verweis auf die Anwendung der obersten Ebene.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Object"/><apiDeprecated replacement="FlexGlobals.topLevelApplication" sinceVersion="4.0"/></apiValueDef><apiDesc>
      Ein Verweis auf die Anwendung der obersten Ebene.
           <p>Im Allgemeinen kann eine Hierarchie von Application-Objekten vorhanden sein, da eine Anwendung ein SWFLoader-Steuerelement zum dynamischen Laden einer anderen Anwendung verwenden kann. Die <codeph>parentApplication</codeph>-Eigenschaft einer UIComponent kann für den Zugriff auf die untergeordnete Anwendung verwendet werden, in welcher sich die UIComponent befindet, und sie kann in der Hierarchie nach oben gehen, bis die Anwendung der höchsten Ebene erreicht ist.</p>
      
      <p>Diese Eigenschaft ist seit Flex4 veraltet. Hinweis: Diese Eigenschaft gibt wie in früheren Versionen weiterhin Anwendungen vom Typ mx.core.Application und mx.core.WindowedApplication zurück. Ab Flex 4 werden außerdem Anwendungen vom Typ type spark.components.Application bzw. spark.components.WindowedApplication zurückgegeben.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:parameters:get"><apiName>parameters</apiName><shortdesc>
      Die parameters-Eigenschaft gibt ein Objekt zurück, das Name/Wert-Paare enthält, die die für diese Anwendung bereitgestellten Parameter repräsentieren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Die parameters-Eigenschaft gibt ein Objekt zurück, das Name/Wert-Paare enthält, die die für diese Anwendung bereitgestellten Parameter repräsentieren.
           <p>Sie können eine for-in-Schleife verwenden, um alle Namen und Werte aus dem parameters-Objekt zu extrahieren.</p>
           <p>Es sind zwei Parameterquellen verfügbar: der Abfragestring der Anwendungs-URL und der Wert des FlashVars-HTML-Parameters (dies betrifft nur die Hauptanwendung).</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:url:get"><apiName>url</apiName><shortdesc>
      Der URL-Speicherort, von dem die SWF-Datei der Anwendung geladen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Der URL-Speicherort, von dem die SWF-Datei der Anwendung geladen wurde.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:viewSourceURL:get"><apiName>viewSourceURL</apiName><shortdesc>
      URL-Speicherort, über den die Anwendungsquelle angezeigt werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      URL-Speicherort, über den die Anwendungsquelle angezeigt werden kann. Durch Einstellen dieser Eigenschaft wird das Menüelement „View Source“ in das Standardkontextmenü der Anwendung eingefügt. Durch Auswählen dieses Menüelements wird die <codeph>viewSourceURL</codeph> in einem neuen Fenster geöffnet.
           <p>Sie müssen die <codeph>viewSourceURL</codeph>-Eigenschaft mithilfe von MXML, und nicht von ActionScript, einstellen, wie in folgendem Beispiel zu sehen:</p>
           <pre>
        &lt;mx:Application viewSourceURL="http://path/to/source">
          ...
        &lt;/mx:Application></pre>
           
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ContainerLayout"><apiName>ContainerLayout</apiName><shortdesc>
  Die ContainerLayout-Klasse definiert die konstanten Werte für die „layout“-Eigenschaft von Container-Klassen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ContainerLayout-Klasse definiert die konstanten Werte für die <codeph>layout</codeph>-Eigenschaft von Containerklassen.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.containers.xml#Panel/layout"><linktext>mx.containers.Panel.layout</linktext></link><link href="mx.core.xml#Application/layout"><linktext>mx.core.Application.layout</linktext></link></related-links><apiValue id="mx.core:ContainerLayout:ABSOLUTE"><apiName>ABSOLUTE</apiName><shortdesc>
	  Verwenden Sie das absolute Layout für die Inhalte dieses Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>absolute</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Verwenden Sie das absolute Layout für die Inhalte dieses Containers. Sie müssen die Position jedes untergeordneten Objekts selbst explizit angeben.
	 
	  <p>Der einfachste Weg hierfür besteht darin, Werte für <codeph>x</codeph>, <codeph>y</codeph>, <codeph>width</codeph> und <codeph>height</codeph> für jedes untergeordnete Objekt anzugeben.</p>
	 
	  <p>Die Werte für <codeph>width</codeph> und <codeph>height</codeph> können in MXML als Prozentsatz angegeben werden. (In ActionScript müssen Sie die Eigenschaften <codeph>percentWidth</codeph> und <codeph>percentHeight</codeph> einstellen.)</p>
	 
	  <p>Wenn Sie <codeph>width</codeph> oder <codeph>percentWidth</codeph> für ein untergeordnetes Objekt nicht einstellen, wird die durch seine <codeph>measure()</codeph>-Methode automatisch bestimmte <codeph>measuredWidth</codeph> verwendet. Dasselbe gilt für die Höhe.</p>
	 
	  <p>Als Alternativmethode für das Layout können Sie die Ankerstile <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right </codeph>, <codeph>bottom</codeph>, <codeph>horizontalCenter</codeph> und <codeph>verticalCenter</codeph> für untergeordnete Objekte verwenden, um sie seitlich oder in der Mitte des Containers zu verankern.</p>
	 
	  <p>Wenn Sie das absolute Layout verwenden, werden die Stile <codeph>paddingLeft</codeph>, <codeph>paddingTop</codeph>, <codeph>paddingRight</codeph>, <codeph>paddingBottom</codeph>, <codeph>horizontalGap</codeph>, <codeph>verticalGap</codeph>, <codeph>horizontalAlign</codeph> und <codeph>verticalAlign</codeph> des Containers ignoriert.</p> 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerLayout:HORIZONTAL"><apiName>HORIZONTAL</apiName><shortdesc>
	  Verwenden Sie das horizontale Layout für die Inhalte dieses Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontal</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Verwenden Sie das horizontale Layout für die Inhalte dieses Containers. Der Container platziert seine untergeordneten Objekte automatisch in nur einer Zeile.
	 
	  <p>Wenn Sie <codeph>width</codeph> oder <codeph>percentWidth</codeph> für ein untergeordnetes Objekt nicht einstellen, wird die durch seine <codeph>measure()</codeph>-Methode automatisch bestimmte <codeph>measuredWidth</codeph> verwendet. Dasselbe gilt für die Höhe.</p>
	 
	  <p>Sie können den Abstand zwischen den untergeordneten Objekten mit dem Stil <codeph>horizontalGap</codeph> und die Ausrichtung der untergeordneten Objekte mit dem Stil <codeph>verticalAlign</codeph> steuern. Die Stile <codeph>paddingLeft</codeph>, <codeph>paddingTop</codeph>, <codeph>paddingRight</codeph> und <codeph>paddingBottom</codeph> steuern den Abstand zwischen dem Rahmen des Containers und den untergeordneten Objekten.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerLayout:VERTICAL"><apiName>VERTICAL</apiName><shortdesc>
	  Verwenden Sie das vertikale Layout für die Inhalte dieses Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>vertical</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Verwenden Sie das vertikale Layout für die Inhalte dieses Containers. Der Container platziert seine untergeordneten Objekte automatisch in nur einer Spalte.
	 
	  <p>Wenn Sie <codeph>width</codeph> oder <codeph>percentWidth</codeph> für ein untergeordnetes Objekt nicht einstellen, wird die durch seine <codeph>measure()</codeph>-Methode automatisch bestimmte <codeph>measuredWidth</codeph> verwendet. Dasselbe gilt für die Höhe.</p>
	 
	  <p>Sie können den Abstand zwischen den untergeordneten Objekten mit dem Stil <codeph>verticalGap</codeph> und die Ausrichtung der untergeordneten Objekte mit dem Stil <codeph>horizontalAlign</codeph> steuern. Die Stile <codeph>paddingLeft</codeph>, <codeph>paddingTop</codeph>, <codeph>paddingRight</codeph> und <codeph>paddingBottom</codeph> steuern den Abstand zwischen dem Rahmen des Containers und den untergeordneten Objekten.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:Container"><apiName>Container</apiName><shortdesc>
  Die Container-Klasse ist eine abstrakte Basisklasse für Komponenten, die die Layoutmerkmale von untergeordneten Komponenten steuert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Color" inherit="yes" name="symbolColor" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Farbe eines beliebigen Symbols einer Komponente. Beispiele sind etwa das Häkchen eines Kontrollkästchens oder der Pfeil auf der Schaltfläche einer Bildlaufleiste.
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der oberen Rahmenlinie des Containers und dem oberen Rand seines Inhaltsbereichs.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der unteren Rahmenlinie des Containers und dem unteren Rand seines Inhaltsbereichs.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalScrollBarStyleName" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Der Name des Stils der vertikalen Bildlaufleiste.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalScrollBarStyleName" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Der Name des Stils der horizontalen Bildlaufleiste.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Farbe des Fokusrings, wenn sich die Komponente im Fokus befindet
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="disabledOverlayAlpha" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Der Alphawert für die Überlagerung, der bei Deaktivierung auf dem Container platziert wird.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.core:Container" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  Radius von Komponentenecken. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für diese Klasse nicht außer Kraft gesetzt wird, ist er 0. Der Standardwert für ApplicationControlBar ist 5.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Farbe des Inhaltsbereichs der Komponente.
   
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Alpha des Inhaltshintergrunds für diese Komponente.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAttachment" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Wenn ein Hintergrundbild angegeben ist, gibt dieser Stil an, ob es bezüglich des Viewports fest (<codeph>"fixed"</codeph>) ist, oder sich mit dem Inhalt im Bildlauf bewegt (<codeph>"scroll"</codeph>).
 
  </description>
<default>"scroll"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Von Komponentenskins verwendete Akzentfarbe. Die standardmäßige Schaltflächenskin verwendet diese Farbe als Hintergrundfarbton. Glanzfarben für Schiebereglerleisten verwenden diese Farbe. 
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Offset der ersten Textzeile von der linken Seite des Containers in Pixeln.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.core:Container" playerVersion="Flash10" type="Class">
<description>
  Die Klasse, die IUITextField implementiert, das von dieser Komponente für die Darstellung von Text verwendet wird.
 
  <p>Sie kann auf die mx.core.UITextField-Klasse (zur Verwendung der in Flash Player integrierten klassischen TextField-Klasse) oder die mx.core.UIFTETextField-Klasse (zur Verwendung des Text Layout Frameworks, um verbesserte Textdarstellungen, einschließlich bidirektionalem Layout, zu erhalten) eingestellt werden.</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird. Mögliche Werte sind <codeph>"none"</codeph> und <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Ausrichtung von Text in einem Container. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"right"</codeph> oder <codeph>"center"</codeph>.
 
  <p>Der Standardwert für die meisten Steuerelemente ist <codeph>„left“</codeph>. Für die FormItem-Komponente ist der Standardwert <codeph>„right“</codeph>. Für die Button-, LinkButton- und AccordionHeader-Komponenten ist der Standardwert <codeph>„center“</codeph>, und diese Eigenschaft wird nur erkannt, wenn die <codeph>labelPlacement</codeph>-Eigenschaft auf <codeph>„left“</codeph> oder <codeph>„right“</codeph> eingestellt ist. Wenn <codeph>labelPlacement</codeph> auf <codeph>"top"</codeph> oder <codeph>"bottom"</codeph> gesetzt wird, werden der Text und eventuell vorhandene Symbole zentriert.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.core:Container" playerVersion="Flash10" type="String">
<description>
  Das Gebietsschema des von dieser Komponente angezeigten Texts.
 
  <p>FTE und TLF verwenden dieses Gebietsschema für die Zuordnung von Unicode-Schriftarten zu Schriftartglyphen und für die Suche nach Ausweichschriftarten.</p>
 
  <p>Hinweis: Dieser Stil gilt nur, wenn eine MX-Komponente UIFTETextField als ihre <codeph>textFieldClass</codeph> festlegt.</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Die Anzahl der zusätzlichen Pixel, die zwischen den Zeichen angezeigt werden. Durch einen positiven Wert wird der Zeichenabstand über den normalen Abstand hinaus vergrößert und durch einen negativen Wert verkleinert.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.core:Container" playerVersion="Flash9" type="Boolean">
<description>
  Ein boolescher Wert, der angibt, ob Kerning aktiviert (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>) ist. Kerning reduziert den Abstand zwischen bestimmten Zeichenpaaren, um die Lesbarkeit zu verbessern, und sollte nur verwendet werden, wenn dies wirklich nötig ist, etwa bei Titeln mit großer Schrift. Kerning wird nur für eingebettete Schriftarten unterstützt. Bestimmte Schriftarten wie Verdana und Schriftarten mit fester Breite wie Courier New unterstützen Kerning nicht
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird. Gültige Werte sind <codeph>normal</codeph> und <codeph>bold</codeph>. Der Standardwert für die Button-Steuerelemente ist <codeph>bold</codeph>. Der Standardwert für alle anderen Steuerelemente ist <codeph>normal</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Legt die <codeph>thickness</codeph>-Eigenschaft von internen TextFields-Elementen fest, die Text in Flex-Steuerelementen darstellen. Diese Eigenschaft gibt die Stärke der Glyphenkanten an. Die möglichen Werte sind Zahlen von -200 bis 200. 
  
  <p>Diese Eigenschaft kommt nur zur Anwendung, wenn Sie eine eingebettete Schriftart verwenden und die <codeph>fontAntiAliasType</codeph>-Eigenschaft auf <codeph>„advanced“</codeph> eingestellt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkung auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird. Gültige Werte sind <codeph>"normal"</codeph> und <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Die Höhe des Texts in Pixeln. Beim Halo-Design lautet der Standardwert für alle Steuerelemente mit Ausnahme des ColorPicker-Steuerelements 10. Für das ColorPicker-Steuerelement des Halo-Designs lautet der Standardwert 11. Beim Spark-Design lautet der Standardwert für alle Steuerelemente mit Ausnahme des ColorPicker-Steuerelements 12. Für das ColorPicker-Steuerelement des Spark-Designs lautet der Standardwert 11.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Legt die Eigenschaft <codeph>sharpness</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Diese Eigenschaft gibt die Schärfe der Glyphenkanten an. Die möglichen Werte sind Zahlen von -400 bis 400. 
  
  <p>Diese Eigenschaft kommt nur zur Anwendung, wenn Sie eine eingebettete Schriftart verwenden und die <codeph>fontAntiAliasType</codeph>-Eigenschaft auf <codeph>„advanced“</codeph> eingestellt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Legt die Eigenschaft <codeph>gridFitType</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Die möglichen Werte sind <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) und <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Diese Eigenschaft kommt nur zur Anwendung, wenn Sie eine eingebettete Schriftart verwenden und die <codeph>fontAntiAliasType</codeph>-Eigenschaft auf <codeph>„advanced“</codeph> eingestellt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Der Name der zu verwendenden Schriftart. Anders als in einer vollständigen CSS-Implementierung werden durch Kommas getrennte Listen nicht unterstützt. Sie können den Namen einer beliebigen Schriftartfamilie verwenden. Wenn Sie eine generische Schriftartbezeichnung wählen, wird diese in eine entsprechende Geräteschriftart konvertiert. Die Standardschriftart für das Halo-Design ist <codeph>"Verdana"</codeph>. Die Standardschriftart für das Spark-Design ist <codeph>"Arial"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Legt die Eigenschaft <codeph>antiAliasType</codeph> von internen Textfeldern fest. Die möglichen Werte sind <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) und <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>Der Standardwert ist <codeph>„advanced“</codeph>, wodurch ein Anti-Aliasing für die Schriftart aktiviert wird. Auf <codeph>„normal“</codeph> eingestellt, um das erweiterte Anti-Aliasing zu deaktivieren.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
  
  <p>Dieser Stil wird auf alle Texte in einem TextField-Substeuerelement angewendet. Es ist nicht möglich, ihn selektiv auf einzelne Zeichen anzuwenden.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.core:Container" playerVersion="Flash9" type="uint">
<description>
  Farbe des Texts in der Komponente, wenn deaktiviert.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.core:Container" playerVersion="Flash10" type="String">
<description>
  Die Laufrichtung des von dieser Komponente angezeigten Texts.
 
  <p>Zulässige Werte sind <codeph>"ltr"</codeph> für den von links nach rechts verlaufenden Text lateinischer Schriften und <codeph>"rtl"</codeph> für den von rechts nach links laufenden Text z. B. des Arabischen oder Hebräischen.</p>
 
  <p>FTE und TLF verwenden diesen Wert in ihrem bidirektionalen Textlayoutalgorithmus, der die Unicode-Zeichenfolge der Glyphenfolge zuordnet.</p>
 
  <p>Hinweis: Dieser Stil gilt nur, wenn eine MX-Komponente UIFTETextField als ihre <codeph>textFieldClass</codeph> festlegt.</p>
 
  <p>Die <codeph>direction</codeph> wirkt sich auch auf die Ausrichtung des Texts an den Grenzen des TLFTextField aus. Sie beeinflusst jedoch nicht die Platzierung des TLFTextField innerhalb der Komponente.</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.core:Container" playerVersion="Flash9" type="uint">
<description>
  Farbe des Texts in der Komponente, einschließlich der Komponentenbeschriftung. Der Standardwert für das Halo-Design ist <codeph>0x0B333C</codeph>. Der Standardwert für das Spark-Design ist <codeph>0x000000</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der rechten Rahmenlinie der Komponente und dem rechten Rand ihres Inhaltsbereichs.
  <p>Der Standardwert ist 0.</p>
  <p>Der Standardwert für ein Schaltflächensteuerelement im Halo-Design beträgt 10 und im Spark-Design 6.</p>
  <p>Der Standardwert für das ComboBox-Steuerelement ist 5.</p>
  <p>Der Standardwert für den Form-Container ist 16.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der linken Rahmenlinie der Komponente und dem linken Rand ihres Inhaltsbereichs.
  <p>Der Standardwert ist 0.</p>
  <p>Der Standardwert für ein Schaltflächensteuerelement im Halo-Design beträgt 10 und im Spark-Design 6.</p>
  <p>Der Standardwert für das ComboBox-Steuerelement ist 5.</p>
  <p>Der Standardwert für den Form-Container ist 16.</p>
  <p>Der Standardwert für das Tree-Steuerelement ist 2.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  Die Hintergrundfarbe einer Komponente. Sie können <codeph>backgroundColor</codeph> und <codeph>backgroundImage</codeph> oder beides gleichzeitig festlegen. Manche Komponenten haben keinen Hintergrund. Das DataGrid-Steuerelement ignoriert diesen Stil. Der Standardwert ist <codeph>undefined</codeph>. Das heißt, dass er nicht eingestellt ist. Wenn dieser Stil und der <codeph>backgroundImage</codeph>-Stil <codeph>undefined</codeph> sind, hat die Komponente einen transparenten Hintergrund.
 
  <p>Beim Application-Container definiert dieser Stil die Hintergrundfarbe während des Ladens der Anwendung und den Farbverlauf des Hintergrunds bei laufender Anwendung. Flex berechnet das Verlaufsmuster zwischen einer etwas dunkleren und einer etwas helleren als der festgelegten Farbe.</p>
 
  <p>Die Standardskins für die meisten Flex-Steuerelemente sind teilweise transparent. Als Folge davon scheint die Hintergrundfarbe eines Containers teilweise auf die Steuerelemente im Container durch. Das kann vermieden werden, indem die Alphawerte der <codeph>fillAlphas</codeph>-Eigenschaft des Steuerelements auf 1 gesetzt werden, wie es im nachfolgenden Beispiel zu sehen ist:
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.core:Container" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  Die Alphaebene der Farbe wird durch die <codeph>backgroundColor</codeph>-Eigenschaft festgelegt, die des Bilds oder der SWF-Datei durch den <codeph>backgroundImage</codeph>-Stil. Gültige Werte sind 0,0 bis 1,0. Bei den meisten Steuerelementen ist der Standardwert 1,0, aber bei den Quickinfo-Steuerelementen beträgt er 0,95 und bei den Alert-Steuerelementen 0,9.
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Abstand des Schlagschattens. Wenn für eine Eigenschaft ein negativer Wert eingestellt ist, erscheint über der Komponente ein Schatten.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="String">
<description>
  Richtung des Schlagschattens. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"center"</codeph> und <codeph>"right"</codeph>.
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropShadowColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Farbe des Schlagschattens.
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Boolesche Eigenschaft, die festlegt, ob die Komponente über einen sichtbaren Schlagschatten verfügt. Der Standardwert ist <codeph>false</codeph>.
 
  <p><b>Hinweis:</b> Um Schlagschatten für Container anzuzeigen, legen Sie die <codeph>contentBackgroundColor</codeph>-Eigenschaft fest. Andernfalls wird der Schatten hinter dem Container angezeigt, weil der Standardhintergrund eines Containers transparent ist.</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  Boolesche Eigenschaft, die festlegt, ob die Komponente über einen sichtbaren Schlagschatten verfügt. Dieser Stil wird mit <codeph>borderStyle="solid"</codeph> verwendet. Der Standardwert ist <codeph>false</codeph>.
 
  <p><b>Hinweis:</b> Um Schlagschatten für Container anzuzeigen, legen Sie die Eigenschaften <codeph>backgroundColor</codeph> oder <codeph>backgroundImage</codeph> fest. Andernfalls wird der Schatten hinter dem Container angezeigt, weil der Standardhintergrund eines Containers transparent ist.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Sichtbarkeit des Rahmens.
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Stärke des Begrenzungsrahmens. Wird nur verwendet, wenn <codeph>borderStyle</codeph> auf <codeph>"solid"</codeph> gesetzt ist.
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Stil des Begrenzungsrahmens. Mögliche Werte sind <codeph>"none"</codeph>, <codeph>"solid"</codeph>, <codeph>"inset"</codeph> und <codeph>"outset"</codeph>. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für diese Klasse nicht außer Kraft gesetzt wird, ist er <codeph>"inset"</codeph>. Der Standardwert für die meisten Container ist <codeph>"none"</codeph>. Die <codeph>"inset"</codeph>- und <codeph>"outset"</codeph>-Werte sind nur beim Halo-Thema gültig.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSkin" owner="mx.core:Container" playerVersion="Flash9" type="Class">
<description>
  Klasse für die Rahmenskin einer Komponente. Der Standardwert aller Komponenten, die den Standardwert nicht selbst explizit festlegen, lautet für das Halo-Design <codeph>mx.skins.halo.HaloBorder</codeph> und für das Spark-Design <codeph>mx.skins.spark.BorderSkin</codeph>. Der Panel-Container hat für das Halo-Design einen Standardwert von <codeph>mx.skins.halo.PanelSkin</codeph> und für das Spark-Design von <codeph>mx.skins.spark.BorderSkin</codeph>. Um den Standardwert für eine Komponente festzustellen, sehen Sie in der Standard-CSS-Datei nach.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSides" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="String">
<description>
  Seiten des Begrenzungsrahmens. Ein String mit Leerzeichen als Trennzeichen, der festlegt, welche Seiten des Rahmens angezeigt werden sollen. Der String kann <codeph>"left"</codeph>, <codeph>"top"</codeph>, <codeph>"right"</codeph> und <codeph>"bottom"</codeph> in beliebiger Reihenfolge enthalten. Der Standardwert ist <codeph>"left top right bottom"</codeph>, wodurch alle vier Seiten angezeigt werden. Dieser Stil wird nur verwendet, wenn borderStyle <codeph>"solid"</codeph> ist.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  Farbe des Rahmens. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für diese Klasse nicht überschrieben wird, lautet er für das Halo-Design <codeph>0xB7BABC</codeph> und für das Spark-Design <codeph>0x696969</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Alpha des Rahmens.
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSize" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="String">
<description>
  Skaliert das von <codeph>backgroundImage</codeph> festgelegte Bild auf verschiedene prozentuale Größen. Ein Wert von <codeph>"100%"</codeph> streckt das Bild über die gesamte Komponente. Um einen Prozentwert festzulegen, müssen Sie das Prozentzeichen (%) angeben. Der Standardwert des Application-Containers ist <codeph>100%</codeph>. Der Standardwert für alle anderen Container ist <codeph>auto</codeph>, wodurch die Originalgröße des Bilds beibehalten wird.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="Object">
<description>
  Das Hintergrundbild einer Komponente. Es kann eine absolute oder relative URL oder Klasse sein. Sie können entweder <codeph>backgroundColor</codeph> oder <codeph>backgroundImage</codeph> festlegen. Das Hintergrundbild wird über der Hintergrundfarbe angezeigt. Der Standardwert ist <codeph>undefined</codeph>, also 
„nicht festgesetzt“. Wenn dieser Stil und der <codeph>backgroundColor</codeph>-Stil nicht definiert sind, hat die Komponente einen transparenten Hintergrund.
 
  <p>Die Standardskins für die meisten Flex-Steuerelemente sind teilweise transparent. Als Folge davon scheint das Hintergrundbild eines Containers teilweise auf die Steuerelemente im Container durch. Das kann vermieden werden, indem die Alphawerte der <codeph>fillAlphas</codeph>-Eigenschaft des Steuerelements auf 1 gesetzt werden, wie es im nachfolgenden Beispiel zu sehen ist:
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="backgroundDisabledColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Hintergrundfarbe der Komponente, wenn sie deaktiviert ist. Der globale Standardwert ist <codeph>undefined</codeph>. Der Standardwert für List-Steuerelemente ist <codeph>0xDDDDDD</codeph> (hellgrau). Ist ein Container deaktiviert, erscheint der Hintergrund abgeblendet; der Abblendungsgrad wird durch den <codeph>disabledOverlayAlpha</codeph>-Stil bestimmt.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="barColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Bestimmt die Farbe einer Fortschrittsleiste. Eine Fortschrittsleiste ist mit einem vertikalen Verlauf zwischen dieser und einer aus ihr berechneten helleren Farbe gefüllt. Dieser Stil hat keine Auswirkungen auf andere Komponenten, kann aber für einen Container festgelegt werden, um das Aussehen aller darin enthaltenen Fortschrittsleisten zu steuern. Der Standardwert ist <codeph>undefined</codeph>. Das heißt, dass er nicht eingestellt ist. In diesem Fall wird die <codeph>themeColor</codeph>-Stileigenschaft verwendet.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  Flex Framework containers inherit the following attributes from the Container
  class:</p>
 
  <pre>
  &lt;mx:<i>tagname</i>
    <strong>Properties</strong>
    autoLayout="true|false"
    clipContent="true|false"
    creationIndex="undefined"
    creationPolicy="auto|all|queued|none"
    defaultButton="<i>No default</i>"
    horizontalLineScrollSize="5"
    horizontalPageScrollSize="0"
    horizontalScrollBar="null"
    horizontalScrollPolicy="auto|on|off"
    horizontalScrollPosition="0"
    icon="undefined"
    label=""
    verticalLineScrollSize="5"
    verticalPageScrollSize="0"
    verticalScrollBar="null"
    verticalScrollPolicy="auto|on|off"
    verticalScrollPosition="0"
 
    <strong>Styles</strong>
    backgroundAlpha="1.0"
    backgroundAttachment="scroll"
    backgroundColor="undefined"
    backgroundDisabledColor="undefined"
    backgroundImage="undefined"
    backgroundSize="auto" 
    <i>    For the Application container only,</i> backgroundSize="100%"
    barColor="undefined"
    borderColor="0xAAB3B3"
    borderSides="left top right bottom"
    borderSkin="mx.skins.halo.HaloBorder"
    borderStyle="inset"
    borderThickness="1"
    color="0x0B333C"
    cornerRadius="0"
    disabledColor="0xAAB3B3"
    disbledOverlayAlpha="undefined"
    dropShadowColor="0x000000"
    dropShadowEnabled="false"
    fontAntiAliasType="advanced"
    fontfamily="Verdana"
    fontGridFitType="pixel"
    fontSharpness="0""
    fontSize="10"
    fontStyle="normal"
    fontThickness="0"
    fontWeight="normal"
    horizontalScrollBarStyleName="undefined"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    shadowDirection="center"
    shadowDistance="2"
    textAlign="left"
    textDecoration="none|underline"
    textIndent="0"
    verticalScrollBarStyleName="undefined"
 
    <strong>Events</strong>
    childAdd="<i>No default</i>"
    childIndexChange="<i>No default</i>"
    childRemove="<i>No default</i>"
    dataChange="<i>No default</i>"
    scroll="<i>No default</i>"
    &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/mx:<i>tagname</i>&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IContainer</apiBaseInterface><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerContainer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseInterface>mx.core:IRawChildrenContainer</apiBaseInterface><apiBaseInterface>mx.core:IChildList</apiBaseInterface><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseInterface>mx.core:INavigatorContent</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die Container-Klasse ist eine abstrakte Basisklasse für Komponenten, die die Layoutmerkmale von untergeordneten Komponenten steuert. Sie erstellen in einer Anwendung keine Instanz von Container. Stattdessen erstellen Sie eine Instanz einer der Unterklassen von Container, wie Canvas oder HBox.
 
  <p>Die Container-Klasse enthält die Logik für Bildlauf, Beschneidung und dynamische Instanziierung. Sie enthält Methoden zum Hinzufügen und Entfernen von untergeordneten Elementen. Sie enthält auch die <codeph>getChildAt()</codeph>-Methode und die Logik für das Zeichnen des Hintergrunds und der Rahmenlinien des Containers.</p>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:Container_mx.events.ScrollEvent.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
  Wird ausgelöst, wenn der Benutzer am Container einen manuellen Bildlauf durchführt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ScrollEvent.SCROLL</apiEventType><adobeApiEventClassifier>mx.events.ScrollEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Benutzer am Container einen manuellen Bildlauf durchführt.
 
  <p>Das Ereignis wird ausgelöst, wenn die Bildlaufposition mit der Maus (z. B. durch Klicken auf die Schaltfläche „Abwärts“ in der Bildlaufleiste) oder mit der Tastatur (z. B. durch Drücken der Nach-unten-Taste) geändert wird. Dieses Ereignis wird hingegen nicht ausgelöst, wenn die Bildlaufposition programmgesteuert geändert wird (z. B. durch Einstellen des Werts der <codeph>horizontalScrollPosition</codeph>-Eigenschaft). Das <codeph>viewChanged</codeph>-Ereignis findet bei jeder Änderung der Bildlaufposition statt, unabhängig davon, ob dies manuell oder programmgesteuert geschieht.</p>
 
  <p>Zu dem Zeitpunkt, an dem dieses Ereignis ausgelöst wird, wurde die Bildlaufleiste bereits auf die neue Position aktualisiert, aber die untergeordneten Elemente des Containers wurden noch nicht entsprechend der neuen Bildlaufposition verschoben.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Container_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Wird ausgelöst, wenn sich die Data-Eigenschaft verändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich die <codeph>data</codeph>-Eigenschaft verändert
 
  <p>Wenn ein Container in einer Liste oder in anderen Komponenten als Renderer verwendet wird, wird die <codeph>data</codeph>-Eigenschaft dazu verwendet, die anzuzeigenden Daten an den Container zu übergeben.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Container_mx.events.ChildExistenceChangedEvent.CHILD_REMOVE_childRemove"><apiName>childRemove</apiName><shortdesc>
  Wird ausgelöst, bevor ein untergeordnetes Element eines Containers entfernt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ChildExistenceChangedEvent.CHILD_REMOVE</apiEventType><adobeApiEventClassifier>mx.events.ChildExistenceChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, bevor ein untergeordnetes Element eines Containers entfernt wird.
 
  <p>Dieses Ereignis wird ausgelöst, wenn eine der folgenden Methoden aufgerufen wird: <codeph>removeChild()</codeph>, <codeph>removeChildAt()</codeph> oder <codeph>removeAllChildren()</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Container_mx.events.IndexChangedEvent.CHILD_INDEX_CHANGE_childIndexChange"><apiName>childIndexChange</apiName><shortdesc>
  Wird ausgelöst, nachdem sich die Indexposition eines untergeordneten Elements des Containers (im Index der untergeordneten Elemente des Containers) geändert hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.IndexChangedEvent.CHILD_INDEX_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.IndexChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem sich die Indexposition eines untergeordneten Elements des Containers (im Index der untergeordneten Elemente des Containers) geändert hat. Dieses Ereignis wird ausschließlich für das als Argument für die <codeph>setChildIndex()</codeph>-Methode angegebene untergeordnete Element ausgelöst. Es wird für kein anderes untergeordnetes Element, dessen Indexposition sich als Nebeneffekt des Aufrufs der <codeph>setChildIndex()</codeph>-Methode ändert, ausgelöst.
 
  <p>Die Indexposition des untergeordneten Elements wird bei Aufruf der <codeph>setChildIndex()</codeph>-Methode geändert.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Container_mx.events.ChildExistenceChangedEvent.CHILD_ADD_childAdd"><apiName>childAdd</apiName><shortdesc>
  Wird ausgelöst, nachdem ein untergeordnetes Element einem Container hinzugefügt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ChildExistenceChangedEvent.CHILD_ADD</apiEventType><adobeApiEventClassifier>mx.events.ChildExistenceChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem ein untergeordnetes Element einem Container hinzugefügt wurde.
 
  <p>Das childAdd-Ereignis wird bei Aufruf der <codeph>addChild()</codeph>- oder der <codeph>addChildAt()</codeph>-Methode ausgelöst. Wenn ein Container zum ersten Mal erstellt wird, wird die <codeph>addChild()</codeph>-Methode automatisch für jede in der MXML-Datei deklarierte untergeordnete Komponente aufgerufen. Die <codeph>addChildAt()</codeph>-Methode wird immer dann automatisch aufgerufen, wenn ein Repeater-Objekt untergeordnete Objekte hinzufügt oder entfernt. Der Anwendungsentwickler kann diese Methoden zum Hinzufügen neuer untergeordneter Objekte auch manuell aufrufen.</p>
 
  <p>Zu dem Zeitpunkt, an dem dieses Ereignis gesendet wird, ist das untergeordnete Objekt bereits initialisiert, aber seine Breite und Höhe wurde noch nicht berechnet, und das untergeordnete Objekt ist noch nicht am Bildschirm zu sehen. Wenn Sie eine Benachrichtigung erhalten möchten, wenn das untergeordnete Objekt vollständig initialisiert und gerendert ist, registrieren Sie sich als Listener für das <codeph>creationComplete</codeph>-Ereignis des untergeordneten Objekts.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:Container:Container"><apiName>Container</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:Container:addChildAt"><apiName>addChildAt</apiName><shortdesc>
      Fügt diesem Container ein untergeordnetes DisplayObject hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Das hinzugefügte untergeordnete Objekt als ein Objekt des Typs DisplayObject. Normalerweise wird der Rückgabewert in UIComponent oder in den Typ der hinzugefügten Komponente konvertiert.
     
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Das DisplayObject, das als untergeordnetes Objekt dieses Containers hinzugefügt werden soll. Es muss die IUIComponent-Schnittstelle implementieren.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition, an der das untergeordnete Objekt hinzugefügt werden soll.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt diesem Container ein untergeordnetes DisplayObject hinzu. Das untergeordnete Objekt wird an der angegebenen Indexposition eingefügt.
     
      <p><b>Hinweis: </b>Wenn für das <codeph>child</codeph>-Argument für die Methode der Typ DisplayObject angegeben ist, muss das Argument die IUIComponent-Schnittstelle implementieren, damit es als untergeordnetes Objekt eines Containers hinzugefügt werden kann. Alle Flex-Komponenten implementieren diese Schnittstelle.</p>
     
      <p>Untergeordnete Objekte werden von hinten nach vorne angeordnet. In anderen Worten: Wenn sich untergeordnete Objekte überlagern, wird dasjenige mit der Indexposition 0 als hinterstes und dasjenige mit der Indexposition <codeph>numChildren - 1</codeph> als vorderstes Objekt angezeigt. Dies bedeutet, dass neu hinzugefügte untergeordnete Objekte immer vor den vorhandenen untergeordneten Objekten angeordnet werden.</p>
     
      <p>Wenn Sie ein neues untergeordnetes Objekt an einer bereits von einem vorhandenen untergeordneten Objekt belegten Indexposition einfügen, wird das bereits vorhandene Objekt nicht ersetzt. Stattdessen macht das bereits vorhandene untergeordnete Objekt (und alle Objekte danach) Platz und erhält eine um 1 erhöhte Indexposition. Beispiel: Angenommen, ein Container enthält die untergeordneten Objekte (A, B, C), und Sie fügen D an der Indexposition 1 ein. Der Container enthält danach die untergeordneten Objekte (A, D, B, C). Zum Ersetzen eines bereits vorhandenen untergeordneten Objekts müssen Sie dieses zunächst entfernen, bevor Sie das neue hinzufügen.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.IUIComponent.xml"><linktext>mx.core.IUIComponent</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:addChild"><apiName>addChild</apiName><shortdesc>
      Fügt diesem Container ein untergeordnetes DisplayObject hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Das hinzugefügte untergeordnete Objekt als ein Objekt des Typs DisplayObject. Normalerweise wird der Rückgabewert in UIComponent oder in den Typ der hinzugefügten Komponente konvertiert.
     
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Das DisplayObject, das als untergeordnetes Objekt dieses Containers hinzugefügt werden soll. Es muss die IUIComponent-Schnittstelle implementieren.
     
      </apiDesc></apiParam><apiTipTexts><apiTipText>Fügt diesem Container ein untergeordnetes Objekt hinzu.
      
      </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
      Fügt diesem Container ein untergeordnetes DisplayObject hinzu. Das untergeordnete Objekt wird nach anderen vorhandenen untergeordneten Objekten hinzugefügt, sodass das erste hinzugefügte untergeordnete Objekt die Indexposition 0, das nächste die Indexposition 1 usw. hat.
     
      <p><b>Hinweis: </b>Wenn für das <codeph>child</codeph>-Argument für die Methode der Typ DisplayObject angegeben ist, muss das Argument die IUIComponent-Schnittstelle implementieren, damit es als untergeordnetes Objekt eines Containers hinzugefügt werden kann. Alle Flex-Komponenten implementieren diese Schnittstelle.</p>
     
      <p>Untergeordnete Objekte werden von hinten nach vorne angeordnet. In anderen Worten: Wenn sich untergeordnete Objekte überlagern, wird dasjenige mit der Indexposition 0 als hinterstes und dasjenige mit der Indexposition <codeph>numChildren - 1</codeph> als vorderstes Objekt angezeigt. Dies bedeutet, dass neu hinzugefügte untergeordnete Objekte immer vor den vorhandenen untergeordneten Objekten angeordnet werden.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.IUIComponent.xml"><linktext>mx.core.IUIComponent</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:addElement"><apiName>addElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:protected:attachOverlay"><apiName>attachOverlay</apiName><shortdesc>
      Wird intern durch den Dissolve-Effekt zum Hinzufügen der Überlagerung zum Chrom eines Containers verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Wird intern durch den Dissolve-Effekt zum Hinzufügen der Überlagerung zum Chrom eines Containers verwendet. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:contentToGlobal"><apiName>contentToGlobal</apiName><shortdesc conref="mx.core.UIComponent#contentToGlobal()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#contentToGlobal()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:contentToLocal"><apiName>contentToLocal</apiName><shortdesc conref="mx.core.UIComponent#contentToLocal()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#contentToLocal()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:protected:createBorder"><apiName>createBorder</apiName><shortdesc>
      Erstellt die Rahmenskin des Containers, wenn diese benötigt wird und nicht bereits vorhanden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Erstellt die Rahmenskin des Containers, wenn diese benötigt wird und nicht bereits vorhanden ist.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:createComponentFromDescriptor"><apiName>createComponentFromDescriptor</apiName><shortdesc>
      Erstellt anhand eines einzelnen UIComponentDescriptor die entsprechende Komponente und fügt die Komponente als untergeordnetes Element dieses Containers hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die erstellte Komponente.
     
      </apiDesc><apiType value="mx.core:IFlexDisplayObject"/></apiReturn><apiParam><apiItemName>descriptor</apiItemName><apiType value="mx.core:ComponentDescriptor"/><apiDesc>Der UIComponentDescriptor für die zu erstellende Komponente. Dieses Argument ist entweder ein UIComponentDescriptor-Objekt oder die Indexposition eines der untergeordneten Elemente des Containers (eine Ganzzahl zwischen 0 und n-1, wobei „n“ für die Gesamtzahl der untergeordneten Objekte dieses Containers steht).
     
      </apiDesc></apiParam><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc>Wenn <codeph>false</codeph>, wird diese Komponente erstellt, jedoch keines ihrer untergeordneten Elemente. Wenn <codeph>true</codeph>, ruft Flex nach Erstellung der Komponente die <codeph>createComponentsFromDescriptors()</codeph>-Methode zum Erstellen aller oder eines Teils ihrer untergeordneten Elemente auf. Dies hängt vom Wert der <codeph>creationPolicy</codeph>-Eigenschaft der Komponente ab.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Erstellt anhand eines einzelnen UIComponentDescriptor die entsprechende Komponente und fügt die Komponente als untergeordnetes Element dieses Containers hinzu.
      
      <p>Diese Methode instanziiert das neue Objekt, fügt es jedoch nicht der Anzeigeliste hinzu, sodass das Objekt standardmäßig nicht am Bildschirm angezeigt wird. Zum Hinzufügen des neuen Objekts zur Anzeigeliste rufen Sie nach dem Aufruf der <codeph>createComponentFromDescriptor()</codeph>-Methode die <codeph>validateNow()</codeph>-Methode für den Container auf, wie im folgenden Beispiel dargestellt:
      <pre>
      myVBox.createComponentFromDescriptor(myVBox.childDescriptors[0],false);
      myVBox.validateNow();
      </pre>
      </p>
      
      <p>Alternativ dazu können Sie die <codeph>createComponentsFromDescriptors()</codeph>-Methode für den Container aufrufen und damit alle Komponenten in einem Durchgang erstellen. Nach dem Aufruf der <codeph>createComponentsFromDescriptors()</codeph>-Methode brauchen Sie die <codeph>validateNow()</codeph>-Methode nicht aufzurufen.</p>
      
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.UIComponentDescriptor.xml"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:createComponentsFromDescriptors"><apiName>createComponentsFromDescriptors</apiName><shortdesc>
      Durchläuft das Array von childDescriptors und ruft für jeden davon die createComponentFromDescriptor()-Methode auf.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn <codeph>true</codeph>, werden die Komponenten auf rekursive Weise erstellt.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Durchläuft das Array von <codeph>childDescriptors</codeph> und ruft für jeden davon die <codeph>createComponentFromDescriptor()</codeph>-Methode auf.
      
      <p>Ist der Wert der <codeph>creationPolicy</codeph>-Eigenschaft des Containers <codeph>ContainerCreationPolicy.ALL</codeph>, wird diese Methode während der Initialisierungssequenz automatisch aufgerufen.</p>
      
      <p>Ist der Wert der <codeph>creationPolicy</codeph>-Eigenschaft des Containers <codeph>ContainerCreationPolicy.AUTO</codeph>, wird diese Methode automatisch aufgerufen, wenn die untergeordneten Elemente des Containers in Kürze sichtbar werden.</p>
      
      <p>Wenn der Wert der <codeph>creationPolicy</codeph>-Eigenschaft des Containers <codeph>ContainerCreationPolicy.NONE</codeph> ist, müssen Sie diese Funktion aufrufen, wenn Sie diese untergeordneten Elemente des Containers erstellen möchten.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:createDeferredContent"><apiName>createDeferredContent</apiName><shortdesc>
      Führt den entsprechenden Aufruf der createComponentsFromDescriptors(true)-Methode für Container aus, die die IDeferredContentOwner-Schnittstelle implementieren, um die verzögerte Instanziierung zu unterstützen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Führt den entsprechenden Aufruf der <codeph>createComponentsFromDescriptors(true)</codeph>-Methode für Container aus, die die IDeferredContentOwner-Schnittstelle implementieren, um die verzögerte Instanziierung zu unterstützen.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#Container/createComponentsFromDescriptors()"><linktext>createComponentsFromDescriptors()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:executeBindings"><apiName>executeBindings</apiName><shortdesc>
      Führt alle Datenbindungen an diesem Container aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Wenn <codeph>false</codeph>, werden nur die Bindungen an diesem Container ausgeführt. Wenn <codeph>true</codeph>, werden auch die Bindungen an den untergeordneten Elementen des Containers und den darunter untergeordneten Elementen usw., also sämtlichen „Nachkommen“ des Containers, ausgeführt.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Führt alle Datenbindungen an diesem Container aus. Flex ruft diese Methode automatisch auf, sobald ein Container erstellt wurde, damit alle Datenbindungen mit Zielen in diesem Container ausgeführt werden. Umgehung des MXML-Container/Bindungsproblems (177074): Container.executeBindings() wird so überschrieben, dass beim Aufruf der BindingManager.executeBindings()-Methode descriptor.document vor parentDocument Vorrang hat. Dies sollte immer zum korrekten Verhalten für durch den Deskriptor erstellte Instanzen führen, und bietet das ursprüngliche Verhalten für prozedurgesteuert erstellte Instanzen. (Im zweiten Fall tritt der Fehler nicht immer auf.) Eine vollständigere Fehlerbehebung, die ein korrektes Verhalten in beiden Fällen (non-DI-Szenarien und Szenarien mit erneut untergeordneten Komponenten) ist für Update 1 geplant.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:executeChildBindings"><apiName>executeChildBindings</apiName><shortdesc>
      Führt die Bindungen in die untergeordneten UIComponent-Objekte dieses Containers aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc>Wenn <codeph>false</codeph>, werden nur die Bindungen an den dem Container unmittelbar untergeordneten Elementen ausgeführt. Wenn <codeph>true</codeph>, werden auch die Bindungen auch an den darunter untergeordneten Elementen usw., also sämtlichen „Nachkommen“ des Containers, ausgeführt.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Führt die Bindungen in die untergeordneten UIComponent-Objekte dieses Containers aus. Flex ruft diese Methode automatisch auf, sobald ein Container erstellt wurde.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:getChildAt"><apiName>getChildAt</apiName><shortdesc>
      Ruft das n-te untergeordnete Komponentenobjekt ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Verweis auf das untergeordnete Element als ein Objekt des Typs DisplayObject. Normalerweise wird der Rückgabewert in UIComponent oder den Typ eines spezifischen Flex-Steuerelements konvertiert, beispielsweise ComboBox oder TextArea.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Zahl zwischen 0 und (numChildren - 1).
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ruft das <i>n</i>-te untergeordnete Komponentenobjekt ab.
     
      <p>Die von dieser Methode zurückgegebenen untergeordneten Elemente umfassen untergeordnete Elemente, die in MXML deklariert sind und solche, die mithilfe der <codeph>addChild()</codeph>- oder der <codeph>addChildAt()</codeph>-Methode hinzugefügt werden.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:getChildByName"><apiName>getChildByName</apiName><shortdesc>
      Gibt das untergeordnete Element zurück, dessen name-Eigenschaft der angegebene String ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Das DisplayObject, das das untergeordnete Element als Objekt des Typs DisplayObject darstellt. Normalerweise wird der Rückgabewert in UIComponent oder den Typ eines spezifischen Flex-Steuerelements konvertiert, beispielsweise ComboBox oder TextArea. Gibt einen Laufzeitfehler aus, wenn das untergeordnete Element mit dem angegebenen Namen nicht vorhanden ist.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>Der Bezeichner des untergeordneten Elements.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt das untergeordnete Element zurück, dessen <codeph>name</codeph>-Eigenschaft der angegebene String ist.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:getChildIndex"><apiName>getChildIndex</apiName><shortdesc>
      Ruft die nullbasierte Indexposition eines bestimmten untergeordneten Elements ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Zahl zwischen 0 und (numChildren - 1).
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Verweis auf untergeordnetes Element, dessen Indexposition abgerufen werden soll.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ruft die nullbasierte Indexposition eines bestimmten untergeordneten Elements ab.
     
      <p>Das erste untergeordnete Element des Containers (d. h.: das erste Tag für ein untergeordnetes Element, das in einer MXML-Deklaration angezeigt wird) hat die Indexposition 0, das zweite untergeordnete Element die Indexposition 1 usw. Die Indexpositionen der untergeordneten Elemente eines Containers bestimmen die Reihenfolge, in welcher das Layout für sie erfolgt. Beispiel: In einer VBox befindet sich das untergeordnete Element mit der Indexposition 0 auf der obersten Ebene, das untergeordnete Objekt mit der Indexposition 1 befindet sich darunter usw.</p>
     
      <p>Wenn Sie ein untergeordnetes Objekt durch Aufruf der <codeph>addChild()</codeph>-Methode hinzufügen, ist die Indexposition des neuen untergeordneten Objekts gleich der höchsten Indexposition unter den vorhandenen untergeordneten Objekten plus 1. Sie können ein untergeordnetes Element mit der <codeph>addChildAt()</codeph>-Methode an der angegebenen Indexposition einfügen. In diesem Fall werden die Indexpositionen des ursprünglich an dieser Indexposition vorhandenen untergeordneten Elements und aller untergeordneten Elemente mit darüber liegenden Indexpositionen alle um 1 erhöht, sodass alle Indexpositionen in den Bereich zwischen 0 und <codeph>(numChildren - 1)</codeph> fallen.</p>
     
      <p>Wenn Sie ein untergeordnetes Element durch Aufruf der <codeph>removeChild()</codeph>- oder der <codeph>removeChildAt()</codeph>-Methode entfernen, werden die Indexpositionen der verbleibenden untergeordneten Elemente so angepasst, dass alle Indexpositionen in den Bereich zwischen 0 und <codeph>(numChildren - 1)</codeph> fallen.</p>
     
      <p>Gibt <codeph>myView.getChildIndex(myChild)</codeph> den Wert 5 zurück, gibt <codeph>myView.getChildAt(5)</codeph> das Objekt myChild zurück.</p>
     
      <p>Die Indexposition eines untergeordneten Elements kann durch Aufruf der <codeph>setChildIndex()</codeph>-Methode geändert werden.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:getChildren"><apiName>getChildren</apiName><shortdesc>
      Gibt ein Array von DisplayObject-Objekten zurück, das aus den untergeordneten Inhaltsobjekten des Containers besteht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Array von DisplayObject-Objekten, das aus den untergeordneten Inhaltsobjekten des Containers besteht.
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Gibt ein Array von DisplayObject-Objekten zurück, das aus den untergeordneten Inhaltsobjekten des Containers besteht. Dieses Array enthält <b>nicht</b> die DisplayObjects, die die Anzeigeelemente des Containers implementieren, wie etwa sein Rahmen oder Hintergrundbild.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#Container/rawChildren"><linktext>rawChildren</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:globalToContent"><apiName>globalToContent</apiName><shortdesc conref="mx.core.UIComponent#globalToContent()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#globalToContent()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:protected:layoutChrome"><apiName>layoutChrome</apiName><shortdesc>
      Reagiert auf Größenänderungen, indem die Positionen und Größen der Rahmenlinien dieses Containers festgelegt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Legt die Breite der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleX</codeph>-Eigenschaft der Komponente.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Legt die Höhe der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleY</codeph>-Eigenschaft der Komponente.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Reagiert auf Größenänderungen, indem die Positionen und Größen der Rahmenlinien dieses Containers festgelegt werden. Dies ist eine erweiterte Methode, die Sie bei der Erstellung einer Container-Unterklasse überschreiben können.
     
      <p>Flex ruft die <codeph>layoutChrome()</codeph>-Methode auf, wenn ein Container einem übergeordneten Container mit der <codeph>addChild()</codeph>-Methode hinzugefügt wird und die <codeph>invalidateDisplayList()</codeph>-Methode des Containers aufgerufen wird.</p>
     
      <p>Die <codeph>Container.layoutChrome()</codeph>-Methode wird unabhängig vom Wert der <codeph>autoLayout</codeph>-Eigenschaft aufgerufen.</p>
     
      <p>Die <codeph>Container.layoutChrome()</codeph>-Methode legt die Position und Größe des Rahmens des Containers fest. In jeder Unterklasse von Container muss die <codeph>layoutChrome()</codeph>-Methode die <codeph>super.layoutChrome()</codeph>-Methode aufrufen, damit der Rahmen korrekt platziert wird.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:localToContent"><apiName>localToContent</apiName><shortdesc conref="mx.core.UIComponent#localToContent()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#localToContent()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeAllChildren"><apiName>removeAllChildren</apiName><shortdesc>
      Entfernt alle untergeordneten Elemente von der Child-Liste dieses Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Entfernt alle untergeordneten Elemente von der Child-Liste dieses Containers.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:removeChildAt"><apiName>removeChildAt</apiName><shortdesc>
      Entfernt ein untergeordnetes DisplayObject von der angegebenen Indexposition der Child-Liste dieses Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Das entfernte untergeordnete Objekt als ein Objekt des Typs DisplayObject. Normalerweise wird der Rückgabewert in UIComponent oder in den Typ der entfernten Komponente konvertiert.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Child-Indexposition des zu entfernenden Anzeigeobjekts.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Entfernt ein untergeordnetes DisplayObject von der angegebenen Indexposition der Child-Liste dieses Containers. Die <codeph>parent</codeph>-Eigenschaft des entfernten untergeordneten Elements wird auf „null“ gesetzt. Das untergeordnete Element ist trotzdem noch vorhanden, es sei denn, es wird explizit gelöscht. Wenn Sie es einem anderen Container hinzufügen, behält es den zuletzt bekannten Status bei.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeChild"><apiName>removeChild</apiName><shortdesc>
      Entfernt ein untergeordnetes DisplayObject von der Child-Liste dieses Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Das entfernte untergeordnete Objekt als ein Objekt des Typs DisplayObject. Normalerweise wird der Rückgabewert in UIComponent oder in den Typ der entfernten Komponente konvertiert.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Das zu entfernende DisplayObject.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Entfernt ein untergeordnetes DisplayObject von der Child-Liste dieses Containers. Die <codeph>parent</codeph>-Eigenschaft des entfernten untergeordneten Elements wird auf „null“ gesetzt. Das untergeordnete Element ist trotzdem noch vorhanden, es sei denn, es wird explizit gelöscht. Wenn Sie es einem anderen Container hinzufügen, behält es den zuletzt bekannten Status bei.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:removeElement"><apiName>removeElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:protected:scrollChildren"><apiName>scrollChildren</apiName><shortdesc>
      Platziert den Inhaltsbereich des Containers relativ zum sichtbaren Bereich, basierend auf den Eigenschaften „horizontalScrollPosition“ und „verticalScrollPosition“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Platziert den Inhaltsbereich des Containers relativ zum sichtbaren Bereich, basierend auf den Eigenschaften „horizontalScrollPosition“ und „verticalScrollPosition“. Inhalt, der nicht im sichtbaren Bereich angezeigt wird, wird abgeschnitten. Diese Methode sollte durch Unterklassen mit bildlauffähigem Chrom im Inhaltsbereich überschrieben werden.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:setChildIndex"><apiName>setChildIndex</apiName><shortdesc>
      Legt die Indexposition eines bestimmten untergeordneten Elements fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Verweis auf untergeordnetes Element, dessen Indexposition gesetzt werden soll.
     
      </apiDesc></apiParam><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiDesc>Zahl, die die neue Indexposition anzeigt. Dies muss eine Ganzzahl zwischen 0 und (numChildren - 1) sein.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Legt die Indexposition eines bestimmten untergeordneten Elements fest. Ein Beschreibung der <codeph>getChildIndex()</codeph>-Methode des Index dieses untergeordneten Objekts.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:swapElements"><apiName>swapElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Reagiert auf Größenänderungen, indem die Positionen und Größen der untergeordneten Elemente dieses Containers festgelegt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Legt die Breite der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleX</codeph>-Eigenschaft der Komponente.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Legt die Höhe der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleY</codeph>-Eigenschaft der Komponente.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Reagiert auf Größenänderungen, indem die Positionen und Größen der untergeordneten Elemente dieses Containers festgelegt werden.
     
      <p>Im Abschnitt über die <codeph>UIComponent.updateDisplayList()</codeph>-Methode finden Sie weitere Hinweise zur <codeph>updateDisplayList()</codeph>-Methode.</p>
     
      <p>Die <codeph>Container.updateDisplayList()</codeph>-Methode legt die Position und Größe des Rahmens des Containers fest. In jeder Unterklasse von Container muss die <codeph>updateDisplayList()</codeph>-Methode die <codeph>super.updateDisplayList()</codeph>-Methode aufrufen, damit der Rahmen korrekt platziert wird.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.UIComponent.xml"><linktext>mx.core.UIComponent</linktext></link></related-links></apiOperation><apiValue id="mx.core:Container:protected:actualCreationPolicy"><apiName>actualCreationPolicy</apiName><shortdesc>
      Die Erstellungsrichtlinie dieses Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      Die Erstellungsrichtlinie dieses Containers. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:autoLayout:get"><apiName>autoLayout</apiName><shortdesc>
      Bei „true“ werden Maße und Layout erstellt, wenn die Position oder Größe eines untergeordneten Elements geändert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn <codeph>true</codeph>, werden Messung und Layout durchgeführt, wenn die Position oder die Größe eines untergeordneten Elements geändert wird. Bei <codeph>false</codeph> werden Maße und Layout nur einmal erstellt, wenn untergeordnete Elemente zum Container hinzugefügt bzw. daraus entfernt werden.
     
      <p>Bei Verwendung des Effekts „Verschieben“ wird das Layout um die verschobene Komponente nicht so angepasst, dass der Verschieben-Effekt animiert wird. Das Einstellen der <codeph>autoLayout</codeph>-Eigenschaft des Containers auf <codeph>true</codeph> wirkt sich auf dieses Verhalten nicht aus.</p>
     
      <p>Der Zoomeffekt funktioniert nicht, wenn die <codeph>autoLayout</codeph>-Eigenschaft auf <codeph>false</codeph> gesetzt ist.</p>
     
      <p>Die <codeph>autoLayout</codeph>-Eigenschaft gilt nicht für Accordion- oder ViewStack-Container.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      Gibt ein EdgeMetrics-Objekt zurück, das über vier Eigenschaften verfügt: „left“, „top“, „right“ und „bottom“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
      Gibt ein EdgeMetrics-Objekt zurück, das über vier Eigenschaften verfügt: <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> und <codeph>bottom</codeph>. Der Wert der Eigenschaften entspricht der Rahmenstärke an einer Seite des Rahmens in Pixeln.
     
      <p>Im Gegensatz zu <codeph>viewMetrics</codeph> wird diese Eigenschaft nicht von Container-Unterklassen überschrieben.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:childDescriptors:get"><apiName>childDescriptors</apiName><shortdesc>
      Array von UIComponentDescriptor-Objekten, die durch den MXML-Compiler erzeugt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Array von UIComponentDescriptor-Objekten, die durch den MXML-Compiler erzeugt werden.
     
      <p>Jedes UIComponentDescriptor-Objekt enthält die in einem dem MXML-Tag des Containers untergeordneten MXML-Tag angegebenen Informationen. Die Reihenfolge der UIComponentDescriptor-Objekte im Array ist dieselbe wie die Reihenfolge der untergeordneten Tags. Während der Initialisierung werden die untergeordneten Deskriptoren zum Erstellen der untergeordneten UIComponent-Objekte und der Repeater-Objekte des Containers verwendet. Darüber hinaus versehen sie sie mit den anfänglichen Eigenschaftswerten, Ereignisprozeduren, Effekten usw., die in MXML festgelegt wurden.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.UIComponentDescriptor.xml"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiValue><apiValue id="mx.core:Container:clipContent:get"><apiName>clipContent</apiName><shortdesc>
      Legt fest, ob eine Schnittmaske verwendet werden soll, wenn die Positionen und/oder Größen der untergeordneten Elemente des Containers über die Rahmenlinien dieses Containers hinausreichen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Legt fest, ob eine Schnittmaske verwendet werden soll, wenn die Positionen und/oder Größen der untergeordneten Elemente des Containers über die Rahmenlinien dieses Containers hinausreichen. Wenn <codeph>false</codeph>, bleiben die untergeordneten Elemente dieses Containers sichtbar, wenn sie so verschoben werden oder ihre Größe so verändert wird, dass sie über die Rahmenlinien dieses Containers hinausreichen. Wenn <codeph>true</codeph>, werden die untergeordneten Elemente dieses Containers beschnitten.
     
      <p>Ist <codeph>clipContent</codeph> auf <codeph>false</codeph> eingestellt, ist der Bildlauf für diesen Container deaktiviert und es werden keine Bildlaufleisten angezeigt. Ist <codeph>clipContent</codeph> auf „true“ eingestellt, werden normalerweise dann Bildlaufleisten angezeigt, wenn die untergeordneten Elemente des Containers über dessen Rahmenlinien hinausreichen. Informationen zu weiteren Steuerungsmöglichkeiten für die Anzeige von Bildlaufleisten finden Sie unter <codeph>horizontalScrollPolicy</codeph> und <codeph>verticalScrollPolicy</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:contentMouseX:get"><apiName>contentMouseX</apiName><shortdesc conref="mx.core.UIComponent#contentMouseX">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#contentMouseX">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:contentMouseY:get"><apiName>contentMouseY</apiName><shortdesc conref="mx.core.UIComponent#contentMouseY">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#contentMouseY">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:creatingContentPane:get"><apiName>creatingContentPane</apiName><shortdesc>
      Container verwenden einen internen Inhaltsbereich zum Steuern des Bildlaufs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Container verwenden einen internen Inhaltsbereich zum Steuern des Bildlaufs. Der Wert für <codeph>creatingContentPane</codeph> ist <codeph>true</codeph>, während der Container den Inhaltsbereich erstellt, sodass manche Ereignisse ignoriert oder blockiert werden können.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:creationIndex:get"><apiName>creationIndex</apiName><shortdesc>
      Gibt die Reihenfolge zum Instanziieren und Zeichnen der untergeordneten Elemente des Containers an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue><apiDeprecated><apiDesc>Veraltet</apiDesc></apiDeprecated></apiValueDef><apiDesc>
      Gibt die Reihenfolge zum Instanziieren und Zeichnen der untergeordneten Elemente des Containers an.
     
      <p>Diese Eigenschaft kann nur dann verwendet werden, wenn die <codeph>creationPolicy</codeph>-Eigenschaft auf <codeph>ContainerCreationPolicy.QUEUED</codeph> eingestellt ist. Andernfalls wird diese Eigenschaft ignoriert.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:creationPolicy:get"><apiName>creationPolicy</apiName><shortdesc>
      Die Erstellungsrichtlinie für untergeordnete Elemente dieses MX-Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ContainerCreationPolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Erstellungsrichtlinie für untergeordnete Elemente dieses MX-Containers. Mögliche ActionScript-Werte sind: <codeph>ContainerCreationPolicy.AUTO</codeph>, <codeph>ContainerCreationPolicy.ALL</codeph> oder <codeph>ContainerCreationPolicy.NONE</codeph>. Mögliche MXML-Werte sind: <codeph>auto</codeph>, <codeph>all</codeph> oder <codeph>none</codeph>.
     
      <p>Wenn für einen Container keine <codeph>creationPolicy</codeph> angegeben ist, erbt dieser Container die <codeph>creationPolicy</codeph> seines übergeordneten Containers. Wenn für die Anwendung keine <codeph>creationPolicy</codeph> angegeben ist, wird standardmäßig die Richtlinie <codeph>ContainerCreationPolicy.AUTO</codeph> verwendet.</p>
     
      <p><codeph>ContainerCreationPolicy.AUTO</codeph> als <codeph>creationPolicy</codeph> bedeutet, dass der Container die Erstellung mancher oder aller untergeordneten Elemente hinauszögert, bis sie benötigt werden, Dieser Prozess wird als <i>zurückgestellte Instanziierung</i> bezeichnet. Diese Richtlinie produziert die beste Startzeit, da zu Beginn weniger UIComponents erstellt werden. Es kommt jedoch dadurch zu Verzögerungen, wenn ein Benutzer erstmalig zu anderen Teilen der Anwendung navigiert. Navigator-Container wie Accordion, TabNavigator und ViewStack implementieren die <codeph>ContainerCreationPolicy.AUTO</codeph>-Richtlinie, indem sie alle ihre direkt untergeordneten Elemente sofort erstellen, die Erstellung von untergeordneten Elemente tieferer Ebenen jedoch aufschieben, bis das jeweilige übergeordnete Element zum ausgewählten untergeordneten Element des Navigatorcontainers wird.</p>
     
      <p><codeph>ContainerCreationPolicy.ALL</codeph> als <codeph>creationPolicy</codeph> bedeutet, dass die Navigatorcontainer die untergeordneten Elemente tieferer Ebenen sofort erstellen, anstatt die Erstellung aufzuschieben, bis das entsprechende untergeordnete Element ausgewählt wird. Für Container mit einer einzelnen Anzeige, wie VBox-Container, gibt es keinen Unterschied zwischen den Richtlinien <codeph>ContainerCreationPolicy.AUTO</codeph> und <codeph>ContainerCreationPolicy.ALL</codeph>.</p>
     
      <p><codeph>ContainerCreationPolicy.NONE</codeph> als <codeph>creationPolicy</codeph> bedeutet, dass der Container keines seiner untergeordneten Elemente erstellt. In diesem Fall liegt es in der Verantwortung des MXML-Autors, die untergeordneten Elemente durch Aufruf der <codeph>createComponentsFromDescriptors()</codeph>-Methode zu erstellen.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:data:get"><apiName>data</apiName><shortdesc>
      Die data-Eigenschaft erlaubt es Ihnen, einen Wert an die Komponente zu übergeben, wenn Sie diese in einem Elementrenderer oder -editor verwenden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Die <codeph>data</codeph>-Eigenschaft erlaubt es Ihnen, einen Wert an die Komponente zu übergeben, wenn Sie diese in einem Elementrenderer oder -editor verwenden. Normalerweise verwenden Sie Datenbindung, um ein Feld der <codeph>data</codeph>-Eigenschaft an eine Eigenschaft dieser Komponente zu binden.
     
      <p>Sie stellen diese Eigenschaft nicht in MXML ein.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer.</linktext></link></related-links></apiValue><apiValue id="mx.core:Container:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      Das Button-Steuerelement, das als Standardschaltfläche für den Container bestimmt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexDisplayObject"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Das Button-Steuerelement, das als Standardschaltfläche für den Container bestimmt ist. Wenn Steuerelementen im Container der Fokus zugewiesen ist, entspricht das Drücken der Eingabetaste dem Klicken auf das Button-Steuerelement.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:deferredContentCreated:get"><apiName>deferredContentCreated</apiName><shortdesc>
      IDeferredContentOwner-Äquivalent von processedDescriptors
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      IDeferredContentOwner-Äquivalent von processedDescriptors
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.xml#UIComponent/processedDescriptors"><linktext>UIComponent.processedDescriptors</linktext></link></related-links></apiValue><apiValue id="mx.core:Container:horizontalLineScrollSize:get"><apiName>horizontalLineScrollSize</apiName><shortdesc>
      Pixelanzahl für den Bildlauf nach links oder rechts bei Klicken auf die entsprechende Schaltfläche der Bildlaufleiste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="horizontalLineScrollSizeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>5
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Pixelanzahl für den Bildlauf nach links oder rechts bei Klicken auf die entsprechende Schaltfläche der Bildlaufleiste.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:horizontalPageScrollSize:get"><apiName>horizontalPageScrollSize</apiName><shortdesc>
      Pixelanzahl für den Bildlauf bei Klicken auf die Leiste in der horizontalen Bildlaufleiste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="horizontalPageScrollSizeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Pixelanzahl für den Bildlauf bei Klicken auf die Leiste in der horizontalen Bildlaufleiste. Ein Wert von 0 bedeutet, dass „Vollbild“ als Seitengröße berechnet wird.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:horizontalScrollBar:get"><apiName>horizontalScrollBar</apiName><shortdesc>
      Die in diesem Container verwendete horizontale Bildlaufleiste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.scrollClasses:ScrollBar</apiValueClassifier></apiValueDef><apiDesc>
      Die in diesem Container verwendete horizontale Bildlaufleiste. Diese Eigenschaft ist null, wenn derzeit keine horizontale Bildlaufleiste angezeigt wird. Normalerweise greifen Sie auf diese Eigenschaft nicht direkt zu. Die Manipulation der Eigenschaften <codeph>horizontalScrollPolicy</codeph> und <codeph>horizontalScrollPosition</codeph> sollte genügend Möglichkeiten für die Steuerung der Bildlaufleiste bieten.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc>
      Gibt an, ob die horizontale Bildlaufleiste immer vorhanden, nie vorhanden ist oder bei Bedarf automatisch eingeblendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="horizontalScrollPolicyChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, ob die horizontale Bildlaufleiste immer vorhanden, nie vorhanden ist oder bei Bedarf automatisch eingeblendet wird. Mögliche ActionScript-Werte sind: <codeph>ScrollPolicy.ON</codeph>, <codeph>ScrollPolicy.OFF</codeph> und <codeph>ScrollPolicy.AUTO</codeph>. Für MXML-Werte gibt es die Möglichkeiten <codeph>"on"</codeph>, <codeph>"off"</codeph> und <codeph>"auto"</codeph>.
     
      <p>Das Einstellen dieser Eigenschaft auf <codeph>ScrollPolicy.OFF</codeph> verhindert auch, dass sich die <codeph>horizontalScrollPosition</codeph>-Eigenschaft auswirkt.</p>
     
      <p>Hinweis: Diese Eigenschaft gilt nicht für den ControlBar-Container.</p>
     
      <p>Ist der Wert für <codeph>horizontalScrollPolicy</codeph> auf <codeph>ScrollPolicy.AUTO</codeph> eingestellt, wird die horizontale Bildlaufleiste eingeblendet, wenn die folgenden Voraussetzungen alle erfüllt sind:</p>
      <ul>
        <li>Eines der untergeordneten Elemente des Containers reicht über den linken oder rechten Rand des Containers hinaus.</li>
        <li>Die <codeph>clipContent</codeph>-Eigenschaft ist <codeph>true</codeph>.</li>
        <li>Der Container ist ausreichend breit und hoch, dass die Bildlaufleiste Platz hat.</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
      Die aktuelle Position der horizontalen Bildlaufleiste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="viewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die aktuelle Position der horizontalen Bildlaufleiste. Diese entspricht dem Abstand zwischen dem linken Rand der bildlauffähigen Oberfläche und dem Element, das sich am weitesten links auf der derzeit sichtbaren Fläche befindet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:icon:get"><apiName>icon</apiName><shortdesc>
      Die Klasse des von manchen Navigatorcontainern angezeigten Symbols zur Darstellung dieses Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="iconChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Klasse des von manchen Navigatorcontainern angezeigten Symbols zur Darstellung dieses Containers.
     
      <p>Beispiel: Wenn dieser Container ein untergeordnetes Element eines TabNavigator ist, wird dieses Symbol auf der entsprechenden Registerkarte angezeigt. Ist dieser Container ein untergeordnetes Element eines Accordion, wird dieses Symbol im entsprechenden Header angezeigt.</p>
     
      <p>Verwenden Sie zum Einbetten des Symbols in der SWF-Datei die @Embed()-Anweisung des MXML-Compilers:</p>
     
      <pre>
        icon="@Embed('filepath')"
      </pre>
     
      <p>Das Bild kann eine Datei in den Formaten JPEG, GIF, PNG, SVG oder SWF sein.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:label:get"><apiName>label</apiName><shortdesc>
      Der von manchen Navigatorcontainern angezeigte Text, der diesen Container repräsentieren soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der von manchen Navigatorcontainern angezeigte Text, der diesen Container repräsentieren soll.
     
      <p>Beispiel: Wenn dieser Container ein untergeordnetes Element eines TabNavigator ist, wird dieser String auf der entsprechenden Registerkarte angezeigt. Ist dieser Container ein untergeordnetes Element eines Accordion, wird dieser String im entsprechenden Header angezeigt.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:maxHorizontalScrollPosition:get"><apiName>maxHorizontalScrollPosition</apiName><shortdesc>
      Der größtmögliche Wert für die horizontalScrollPosition-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Der größtmögliche Wert für die <codeph>horizontalScrollPosition</codeph>-Eigenschaft. Die Standardeinstellung ist 0, wenn die horizontale Bildlaufleiste nicht vorhanden ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:maxVerticalScrollPosition:get"><apiName>maxVerticalScrollPosition</apiName><shortdesc>
      Der größtmögliche Wert für die verticalScrollPosition-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Der größtmögliche Wert für die <codeph>verticalScrollPosition</codeph>-Eigenschaft. Die Standardeinstellung ist 0, wenn die vertikale Bildlaufleiste nicht vorhanden ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:numChildren:get"><apiName>numChildren</apiName><shortdesc>
      Anzahl der untergeordneten Komponenten in diesem Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Anzahl der untergeordneten Komponenten in diesem Container.
     
      <p>Die Anzahl der untergeordneten Elemente ist zu Beginn gleich der der in MXML deklarierten untergeordneten Elemente. Während der Laufzeit können durch Aufruf von <codeph>addChild()</codeph> oder <codeph>addChildAt()</codeph> neue untergeordnete Elemente hinzugefügt sowie durch Aufruf von <codeph>removeChild()</codeph>, <codeph>removeChildAt()</codeph> oder <codeph>removeAllChildren()</codeph> vorhandene untergeordnete Elemente entfernt werden.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:numElements:get"><apiName>numElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:Container:rawChildren:get"><apiName>rawChildren</apiName><shortdesc>
      Ein Container enthält normalerweise untergeordnete Komponenten, die mit der Container.getChildAt()-Methode und der Container.numChildren-Eigenschaft aufgelistet werden können.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:IChildList"/></apiValueDef><apiDesc>
      Ein Container enthält normalerweise untergeordnete Komponenten, die mit der <codeph>Container.getChildAt()</codeph>-Methode und der <codeph>Container.numChildren</codeph>-Eigenschaft aufgelistet werden können. Darüber hinaus kann dieser Container Stilelemente und Skins enthalten, wie etwa den Rahmen und den Hintergrund. Flash Player und AIR unterscheiden beim Zeichnen nicht zwischen untergeordneten Komponenten und Skins. Mit der <codeph>getChildAt()</codeph>-Methode und der <codeph>numChildren</codeph>-Eigenschaft kann auf alle zugegriffen werden. Die Container-Klasse überschreibt jedoch die <codeph>getChildAt()</codeph>-Methode und die <codeph>numChildren</codeph>-Eigenschaft (und mehrere andere Methoden) und erweckt damit den Anschein, dass die untergeordneten Komponenten des Containers die einzigen untergeordneten Komponenten seien.
     
      <p>Wenn Sie auf alle untergeordneten Elemente des Containers (sowohl die untergeordneten Inhaltselemente als auch die Skins) zugreifen müssen, verwenden Sie die Methoden und Eigenschaften der <codeph>rawChildren</codeph>-Eigenschaft statt der regulären Container-Methoden. Beispiel: Verwenden Sie die <codeph>Container.rawChildren.getChildAt())</codeph>-Methode. Wenn jedoch ein Container ein ContentPane-Sprite-Objekt für seine untergeordneten Elemente erstellt, zählt die <codeph>rawChildren</codeph>-Eigenschaft nur das ContentPane-Objekt und nicht die untergeordneten Elemente des Containers. Es kann nicht immer bestimmt werden, wann ein Container ein ContentPane-Objekt hat.</p>
     
      <p><b>Hinweis:</b>Wenn Sie die <codeph>addChild</codeph>- oder <codeph>addChildAt</codeph>-Methode des <codeph>rawChildren</codeph>-Objekts aufrufen, stellen Sie für die von Ihnen hinzugefügte Komponente Folgendes ein: <codeph>tabFocusEnabled = false</codeph>. Damit verhindern Sie, dass Benutzer mit der Tabulatortaste zwischen von Ihnen hinzugefügten rein visuellen Komponenten wechseln können.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalLineScrollSize:get"><apiName>verticalLineScrollSize</apiName><shortdesc>
      Die Anzahl der Pixel beim Bildlauf, wenn Sie auf die Schaltfläche mit dem Pfeil nach oben oder unten in der vertikalen Bildlaufleiste klicken oder wenn Sie mit dem Mausrad einen Bildlauf durchführen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="verticalLineScrollSizeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>5
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Anzahl der Pixel beim Bildlauf, wenn Sie auf die Schaltfläche mit dem Pfeil nach oben oder unten in der vertikalen Bildlaufleiste klicken oder wenn Sie mit dem Mausrad einen Bildlauf durchführen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalPageScrollSize:get"><apiName>verticalPageScrollSize</apiName><shortdesc>
      Pixelanzahl für den Bildlauf bei Klicken auf die Leiste in der vertikalen Bildlaufleiste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="verticalPageScrollSizeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Pixelanzahl für den Bildlauf bei Klicken auf die Leiste in der vertikalen Bildlaufleiste. Ein Wert von 0 bedeutet, dass „Vollbild“ als Seitengröße berechnet wird.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalScrollBar:get"><apiName>verticalScrollBar</apiName><shortdesc>
      Die in diesem Container verwendete vertikale Bildlaufleiste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.scrollClasses:ScrollBar</apiValueClassifier></apiValueDef><apiDesc>
      Die in diesem Container verwendete vertikale Bildlaufleiste. Diese Eigenschaft ist null, wenn derzeit keine vertikale Bildlaufleiste angezeigt wird. Normalerweise greifen Sie auf diese Eigenschaft nicht direkt zu. Die Manipulation der Eigenschaften <codeph>verticalScrollPolicy</codeph> und <codeph>verticalScrollPosition</codeph> sollte genügend Möglichkeiten für die Steuerung der Bildlaufleiste bieten.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc>
      Gibt an, ob die vertikale Bildlaufleiste immer vorhanden, nie vorhanden ist oder bei Bedarf automatisch eingeblendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="verticalScrollPolicyChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, ob die vertikale Bildlaufleiste immer vorhanden, nie vorhanden ist oder bei Bedarf automatisch eingeblendet wird. Mögliche Werte sind <codeph>ScrollPolicy.ON</codeph>, <codeph>ScrollPolicy.OFF</codeph> und <codeph>ScrollPolicy.AUTO</codeph>. Für MXML-Werte gibt es die Möglichkeiten <codeph>"on"</codeph>, <codeph>"off"</codeph> und <codeph>"auto"</codeph>.
     
      <p>Das Einstellen dieser Eigenschaft auf <codeph>ScrollPolicy.OFF</codeph> verhindert auch, dass sich die <codeph>verticalScrollPosition</codeph>-Eigenschaft auswirkt.</p>
     
      <p>Hinweis: Diese Eigenschaft gilt nicht für den ControlBar-Container.</p>
     
      <p>Ist der Wert für <codeph>verticalScrollPolicy</codeph> auf <codeph>ScrollPolicy.AUTO</codeph> eingestellt, wird die vertikale Bildlaufleiste eingeblendet, wenn die folgenden Voraussetzungen alle erfüllt sind:</p>
      <ul>
        <li>Eines der untergeordneten Elemente des Containers reicht über den oberen oder unteren Rand des Containers hinaus.</li>
        <li>Die <codeph>clipContent</codeph>-Eigenschaft ist <codeph>true</codeph>.</li>
        <li>Der Container ist ausreichend breit und hoch, dass die Bildlaufleiste Platz hat.</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc>
      Die aktuelle Position der vertikalen Bildlaufleiste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="viewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die aktuelle Position der vertikalen Bildlaufleiste. Diese entspricht dem Abstand zwischen dem oberen Rand der bildlauffähigen Oberfläche und dem Element, das sich am weitesten oben auf der derzeit sichtbaren Fläche befindet.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:viewMetricsAndPadding:get"><apiName>viewMetricsAndPadding</apiName><shortdesc>
      Gibt ein Objekt zurück, das über vier Eigenschaften verfügt: „left“, „top“, „right“ und „bottom“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
      Gibt ein Objekt zurück, das über vier Eigenschaften verfügt: <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> und <codeph>bottom</codeph>. Der Wert jeder der Eigenschaften ist gleich der Stärke des Chroms (visuelle Elemente) um den Rand des Containers herum plus der Stärke der Ränder des Objekts.
     
      <p>Dieses Chrom enthält die Rahmenstärke. Wenn der Eigenschaftswert der <codeph>horizontalScrollPolicy</codeph> oder <codeph>verticalScrollPolicy</codeph> auf <codeph>ScrollPolicy.ON</codeph> eingestellt ist, enthält das Chrom auch die Stärke der entsprechenden Bildlaufleiste. Ist eine Bildlaufrichtlinie auf <codeph>ScrollPolicy.AUTO</codeph> eingestellt, umfassen die Abmessungen des Chroms nicht die Stärke der Bildlaufleiste, und zwar auch dann nicht, wenn die Bildlaufleiste angezeigt wird.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:viewMetrics:get"><apiName>viewMetrics</apiName><shortdesc>
      Gibt ein Objekt zurück, das über vier Eigenschaften verfügt: „left“, „top“, „right“ und „bottom“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
      Gibt ein Objekt zurück, das über vier Eigenschaften verfügt: <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> und <codeph>bottom</codeph>. Der Wert jeder Eigenschaft ist gleich der Stärke des Chroms (visuelle Elemente) um den Rand des Containers herum. 
     
      <p>Dieses Chrom enthält die Rahmenstärke. Wenn der Eigenschaftswert der <codeph>horizontalScrollPolicy</codeph> oder <codeph>verticalScrollPolicy</codeph> auf <codeph>ScrollPolicy.ON</codeph> eingestellt ist, enthält das Chrom auch die Stärke der entsprechenden Bildlaufleiste. Ist eine Bildlaufrichtlinie auf <codeph>ScrollPolicy.AUTO</codeph> eingestellt, umfassen die Abmessungen des Chroms nicht die Stärke der Bildlaufleiste, und zwar auch dann nicht, wenn die Bildlaufleiste angezeigt wird.</p>
     
      <p>Unterklassen von Container sollten diese Methode überschreiben, sodass sie andere, bei der Platzierung der untergeordneten Elemente des Containers zu berücksichtigende Chroms umfassen. Beispiel: Die <codeph>viewMetrics</codeph>-Eigenschaft für die Panel-Klasse sollte ein Objekt zurückgeben, dessen <codeph>top</codeph>-Eigenschaft die Stärke der Titelleiste des Panel-Containers enthält.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ScrollControlBase"><apiName>ScrollControlBase</apiName><shortdesc>
  Die ScrollControlBase-Klasse ist die Basisklasse für Steuerelemente mit Bildlaufleisten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="verticalScrollBarStyleName" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Stilname für vertikale Bildlaufleiste. Das Aussehen der Bildlaufleiste kann auf diese Weise besser gesteuert werden.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Farbe eines beliebigen Symbols einer Komponente. Beispiele sind etwa das Häkchen eines Kontrollkästchens oder der Pfeil auf der Schaltfläche einer Bildlaufleiste.
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalScrollBarStyleName" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Stilname für horizontale Bildlaufleiste. Das Aussehen der Bildlaufleiste kann auf diese Weise besser gesteuert werden.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Farbe des Fokusrings, wenn sich die Komponente im Fokus befindet
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Radius von Komponentenecken.
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Farbe des Inhaltsbereichs der Komponente.
   
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Alpha des Inhaltshintergrunds für diese Komponente.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Die Hauptfarbe für eine Komponente.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Von Komponentenskins verwendete Akzentfarbe. Die standardmäßige Schaltflächenskin verwendet diese Farbe als Hintergrundfarbton. Glanzfarben für Schiebereglerleisten verwenden diese Farbe. 
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Offset der ersten Textzeile von der linken Seite des Containers in Pixeln.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.core:ScrollControlBase" playerVersion="Flash10" type="Class">
<description>
  Die Klasse, die IUITextField implementiert, das von dieser Komponente für die Darstellung von Text verwendet wird.
 
  <p>Sie kann auf die mx.core.UITextField-Klasse (zur Verwendung der in Flash Player integrierten klassischen TextField-Klasse) oder die mx.core.UIFTETextField-Klasse (zur Verwendung des Text Layout Frameworks, um verbesserte Textdarstellungen, einschließlich bidirektionalem Layout, zu erhalten) eingestellt werden.</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird. Mögliche Werte sind <codeph>"none"</codeph> und <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Ausrichtung von Text in einem Container. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"right"</codeph> oder <codeph>"center"</codeph>.
 
  <p>Der Standardwert für die meisten Steuerelemente ist <codeph>„left“</codeph>. Für die FormItem-Komponente ist der Standardwert <codeph>„right“</codeph>. Für die Button-, LinkButton- und AccordionHeader-Komponenten ist der Standardwert <codeph>„center“</codeph>, und diese Eigenschaft wird nur erkannt, wenn die <codeph>labelPlacement</codeph>-Eigenschaft auf <codeph>„left“</codeph> oder <codeph>„right“</codeph> eingestellt ist. Wenn <codeph>labelPlacement</codeph> auf <codeph>"top"</codeph> oder <codeph>"bottom"</codeph> gesetzt wird, werden der Text und eventuell vorhandene Symbole zentriert.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.core:ScrollControlBase" playerVersion="Flash10" type="String">
<description>
  Das Gebietsschema des von dieser Komponente angezeigten Texts.
 
  <p>FTE und TLF verwenden dieses Gebietsschema für die Zuordnung von Unicode-Schriftarten zu Schriftartglyphen und für die Suche nach Ausweichschriftarten.</p>
 
  <p>Hinweis: Dieser Stil gilt nur, wenn eine MX-Komponente UIFTETextField als ihre <codeph>textFieldClass</codeph> festlegt.</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Die Anzahl der zusätzlichen Pixel, die zwischen den Zeichen angezeigt werden. Durch einen positiven Wert wird der Zeichenabstand über den normalen Abstand hinaus vergrößert und durch einen negativen Wert verkleinert.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Boolean">
<description>
  Ein boolescher Wert, der angibt, ob Kerning aktiviert (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>) ist. Kerning reduziert den Abstand zwischen bestimmten Zeichenpaaren, um die Lesbarkeit zu verbessern, und sollte nur verwendet werden, wenn dies wirklich nötig ist, etwa bei Titeln mit großer Schrift. Kerning wird nur für eingebettete Schriftarten unterstützt. Bestimmte Schriftarten wie Verdana und Schriftarten mit fester Breite wie Courier New unterstützen Kerning nicht
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird. Gültige Werte sind <codeph>normal</codeph> und <codeph>bold</codeph>. Der Standardwert für die Button-Steuerelemente ist <codeph>bold</codeph>. Der Standardwert für alle anderen Steuerelemente ist <codeph>normal</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Legt die <codeph>thickness</codeph>-Eigenschaft von internen TextFields-Elementen fest, die Text in Flex-Steuerelementen darstellen. Diese Eigenschaft gibt die Stärke der Glyphenkanten an. Die möglichen Werte sind Zahlen von -200 bis 200. 
  
  <p>Diese Eigenschaft kommt nur zur Anwendung, wenn Sie eine eingebettete Schriftart verwenden und die <codeph>fontAntiAliasType</codeph>-Eigenschaft auf <codeph>„advanced“</codeph> eingestellt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkung auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird. Gültige Werte sind <codeph>"normal"</codeph> und <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Die Höhe des Texts in Pixeln. Beim Halo-Design lautet der Standardwert für alle Steuerelemente mit Ausnahme des ColorPicker-Steuerelements 10. Für das ColorPicker-Steuerelement des Halo-Designs lautet der Standardwert 11. Beim Spark-Design lautet der Standardwert für alle Steuerelemente mit Ausnahme des ColorPicker-Steuerelements 12. Für das ColorPicker-Steuerelement des Spark-Designs lautet der Standardwert 11.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Legt die Eigenschaft <codeph>sharpness</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Diese Eigenschaft gibt die Schärfe der Glyphenkanten an. Die möglichen Werte sind Zahlen von -400 bis 400. 
  
  <p>Diese Eigenschaft kommt nur zur Anwendung, wenn Sie eine eingebettete Schriftart verwenden und die <codeph>fontAntiAliasType</codeph>-Eigenschaft auf <codeph>„advanced“</codeph> eingestellt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Legt die Eigenschaft <codeph>gridFitType</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Die möglichen Werte sind <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) und <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Diese Eigenschaft kommt nur zur Anwendung, wenn Sie eine eingebettete Schriftart verwenden und die <codeph>fontAntiAliasType</codeph>-Eigenschaft auf <codeph>„advanced“</codeph> eingestellt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Der Name der zu verwendenden Schriftart. Anders als in einer vollständigen CSS-Implementierung werden durch Kommas getrennte Listen nicht unterstützt. Sie können den Namen einer beliebigen Schriftartfamilie verwenden. Wenn Sie eine generische Schriftartbezeichnung wählen, wird diese in eine entsprechende Geräteschriftart konvertiert. Die Standardschriftart für das Halo-Design ist <codeph>"Verdana"</codeph>. Die Standardschriftart für das Spark-Design ist <codeph>"Arial"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Legt die Eigenschaft <codeph>antiAliasType</codeph> von internen Textfeldern fest. Die möglichen Werte sind <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) und <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>Der Standardwert ist <codeph>„advanced“</codeph>, wodurch ein Anti-Aliasing für die Schriftart aktiviert wird. Auf <codeph>„normal“</codeph> eingestellt, um das erweiterte Anti-Aliasing zu deaktivieren.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
  
  <p>Dieser Stil wird auf alle Texte in einem TextField-Substeuerelement angewendet. Es ist nicht möglich, ihn selektiv auf einzelne Zeichen anzuwenden.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="uint">
<description>
  Farbe des Texts in der Komponente, wenn deaktiviert.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.core:ScrollControlBase" playerVersion="Flash10" type="String">
<description>
  Die Laufrichtung des von dieser Komponente angezeigten Texts.
 
  <p>Zulässige Werte sind <codeph>"ltr"</codeph> für den von links nach rechts verlaufenden Text lateinischer Schriften und <codeph>"rtl"</codeph> für den von rechts nach links laufenden Text z. B. des Arabischen oder Hebräischen.</p>
 
  <p>FTE und TLF verwenden diesen Wert in ihrem bidirektionalen Textlayoutalgorithmus, der die Unicode-Zeichenfolge der Glyphenfolge zuordnet.</p>
 
  <p>Hinweis: Dieser Stil gilt nur, wenn eine MX-Komponente UIFTETextField als ihre <codeph>textFieldClass</codeph> festlegt.</p>
 
  <p>Die <codeph>direction</codeph> wirkt sich auch auf die Ausrichtung des Texts an den Grenzen des TLFTextField aus. Sie beeinflusst jedoch nicht die Platzierung des TLFTextField innerhalb der Komponente.</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="uint">
<description>
  Farbe des Texts in der Komponente, einschließlich der Komponentenbeschriftung. Der Standardwert für das Halo-Design ist <codeph>0x0B333C</codeph>. Der Standardwert für das Spark-Design ist <codeph>0x000000</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Zusätzlicher vertikaler Abstand zwischen Textzeilen.
 
  <p>Der Standardwert ist 2.</p>
  <p>Der Standardwert für das ComboBox-Steuerelement ist 0.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Legt fest, welche Ecken des Fokusrechtecks abgerundet werden sollen. Dieser Wert ist ein durch Leerschritte getrennter String, der folgende Werte in beliebigen Kombinationen enthalten kann: <codeph>„tl“</codeph>, <codeph>„tr“</codeph>, <codeph>„bl“</codeph> und <codeph>„br“</codeph>. Beispiel: Um festzulegen, dass die Ecken auf der rechten Seite gerundet werden sollen, die linken Ecken aber spitz bleiben, geben Sie <codeph>„tr br“</codeph> an. Die <codeph>cornerRadius</codeph>-Stileigenschaft legt den Radius der abgerundeten Ecken fest. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für die Klasse nicht überschrieben wird, ist der Standardwert <codeph>„tl tr bl br“</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Legt den Alphatransparenzwert der Fokus-Skin fest. Der Standardwert für das Halo-Design beträgt <codeph>0.4</codeph>. Der Standardwert für das Spark-Design beträgt <codeph>0.55</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Abstand des Schlagschattens. Wenn für eine Eigenschaft ein negativer Wert eingestellt ist, erscheint über der Komponente ein Schatten.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="String">
<description>
  Richtung des Schlagschattens. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"center"</codeph> und <codeph>"right"</codeph>.
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropShadowColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Farbe des Schlagschattens.
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Boolesche Eigenschaft, die festlegt, ob die Komponente über einen sichtbaren Schlagschatten verfügt. Der Standardwert ist <codeph>false</codeph>.
 
  <p><b>Hinweis:</b> Um Schlagschatten für Container anzuzeigen, legen Sie die <codeph>contentBackgroundColor</codeph>-Eigenschaft fest. Andernfalls wird der Schatten hinter dem Container angezeigt, weil der Standardhintergrund eines Containers transparent ist.</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  Boolesche Eigenschaft, die festlegt, ob die Komponente über einen sichtbaren Schlagschatten verfügt. Dieser Stil wird mit <codeph>borderStyle="solid"</codeph> verwendet. Der Standardwert ist <codeph>false</codeph>.
 
  <p><b>Hinweis:</b> Um Schlagschatten für Container anzuzeigen, legen Sie die Eigenschaften <codeph>backgroundColor</codeph> oder <codeph>backgroundImage</codeph> fest. Andernfalls wird der Schatten hinter dem Container angezeigt, weil der Standardhintergrund eines Containers transparent ist.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Sichtbarkeit des Rahmens.
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Stärke des Begrenzungsrahmens. Wird nur verwendet, wenn <codeph>borderStyle</codeph> auf <codeph>"solid"</codeph> gesetzt ist.
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Stil des Begrenzungsrahmens. Mögliche Werte sind <codeph>"none"</codeph>, <codeph>"solid"</codeph>, <codeph>"inset"</codeph> und <codeph>"outset"</codeph>. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für diese Klasse nicht außer Kraft gesetzt wird, ist er <codeph>"inset"</codeph>. Der Standardwert für die meisten Container ist <codeph>"none"</codeph>. Die <codeph>"inset"</codeph>- und <codeph>"outset"</codeph>-Werte sind nur beim Halo-Thema gültig.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSkin" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Class">
<description>
  Klasse für die Rahmenskin einer Komponente. Der Standardwert aller Komponenten, die den Standardwert nicht selbst explizit festlegen, lautet für das Halo-Design <codeph>mx.skins.halo.HaloBorder</codeph> und für das Spark-Design <codeph>mx.skins.spark.BorderSkin</codeph>. Der Panel-Container hat für das Halo-Design einen Standardwert von <codeph>mx.skins.halo.PanelSkin</codeph> und für das Spark-Design von <codeph>mx.skins.spark.BorderSkin</codeph>. Um den Standardwert für eine Komponente festzustellen, sehen Sie in der Standard-CSS-Datei nach.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSides" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="String">
<description>
  Seiten des Begrenzungsrahmens. Ein String mit Leerzeichen als Trennzeichen, der festlegt, welche Seiten des Rahmens angezeigt werden sollen. Der String kann <codeph>"left"</codeph>, <codeph>"top"</codeph>, <codeph>"right"</codeph> und <codeph>"bottom"</codeph> in beliebiger Reihenfolge enthalten. Der Standardwert ist <codeph>"left top right bottom"</codeph>, wodurch alle vier Seiten angezeigt werden. Dieser Stil wird nur verwendet, wenn borderStyle <codeph>"solid"</codeph> ist.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  Farbe des Rahmens. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für diese Klasse nicht überschrieben wird, lautet er für das Halo-Design <codeph>0xB7BABC</codeph> und für das Spark-Design <codeph>0x696969</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Alpha des Rahmens.
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSize" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="String">
<description>
  Skaliert das von <codeph>backgroundImage</codeph> festgelegte Bild auf verschiedene prozentuale Größen. Ein Wert von <codeph>"100%"</codeph> streckt das Bild über die gesamte Komponente. Um einen Prozentwert festzulegen, müssen Sie das Prozentzeichen (%) angeben. Der Standardwert des Application-Containers ist <codeph>100%</codeph>. Der Standardwert für alle anderen Container ist <codeph>auto</codeph>, wodurch die Originalgröße des Bilds beibehalten wird.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Object">
<description>
  Das Hintergrundbild einer Komponente. Es kann eine absolute oder relative URL oder Klasse sein. Sie können entweder <codeph>backgroundColor</codeph> oder <codeph>backgroundImage</codeph> festlegen. Das Hintergrundbild wird über der Hintergrundfarbe angezeigt. Der Standardwert ist <codeph>undefined</codeph>, also 
„nicht festgesetzt“. Wenn dieser Stil und der <codeph>backgroundColor</codeph>-Stil nicht definiert sind, hat die Komponente einen transparenten Hintergrund.
 
  <p>Die Standardskins für die meisten Flex-Steuerelemente sind teilweise transparent. Als Folge davon scheint das Hintergrundbild eines Containers teilweise auf die Steuerelemente im Container durch. Das kann vermieden werden, indem die Alphawerte der <codeph>fillAlphas</codeph>-Eigenschaft des Steuerelements auf 1 gesetzt werden, wie es im nachfolgenden Beispiel zu sehen ist:
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="backgroundDisabledColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Hintergrundfarbe der Komponente, wenn sie deaktiviert ist. Der globale Standardwert ist <codeph>undefined</codeph>. Der Standardwert für List-Steuerelemente ist <codeph>0xDDDDDD</codeph> (hellgrau). Ist ein Container deaktiviert, erscheint der Hintergrund abgeblendet; der Abblendungsgrad wird durch den <codeph>disabledOverlayAlpha</codeph>-Stil bestimmt.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Die Hintergrundfarbe einer Komponente. Sie können <codeph>backgroundColor</codeph> und <codeph>backgroundImage</codeph> oder beides gleichzeitig festlegen. Manche Komponenten haben keinen Hintergrund. Das DataGrid-Steuerelement ignoriert diesen Stil. Der Standardwert ist <codeph>undefined</codeph>. Das heißt, dass er nicht eingestellt ist. Wenn dieser Stil und der <codeph>backgroundImage</codeph>-Stil <codeph>undefined</codeph> sind, hat die Komponente einen transparenten Hintergrund.
 
  <p>Beim Application-Container definiert dieser Stil die Hintergrundfarbe während des Ladens der Anwendung und den Farbverlauf des Hintergrunds bei laufender Anwendung. Flex berechnet das Verlaufsmuster zwischen einer etwas dunkleren und einer etwas helleren als der festgelegten Farbe.</p>
 
  <p>Die Standardskins für die meisten Flex-Steuerelemente sind teilweise transparent. Als Folge davon scheint die Hintergrundfarbe eines Containers teilweise auf die Steuerelemente im Container durch. Das kann vermieden werden, indem die Alphawerte der <codeph>fillAlphas</codeph>-Eigenschaft des Steuerelements auf 1 gesetzt werden, wie es im nachfolgenden Beispiel zu sehen ist:
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Die Alphaebene der Farbe wird durch die <codeph>backgroundColor</codeph>-Eigenschaft festgelegt, die des Bilds oder der SWF-Datei durch den <codeph>backgroundImage</codeph>-Stil. Gültige Werte sind 0,0 bis 1,0. Bei den meisten Steuerelementen ist der Standardwert 1,0, aber bei den Quickinfo-Steuerelementen beträgt er 0,95 und bei den Alert-Steuerelementen 0,9.
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;ScrollControlBase&gt;</code> tag inherits all the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:<i>tagname</i>
  <b>Properties</b>
  border="<i>object of border skin style</i>"
  horizontalScrollPolicy="off|on|auto"
  horizontalScrollPosition="0"
  liveScrolling="true|false"
  maxHorizontalScrollPosition="NaN"
  maxVerticalScrollPosition="NaN"
  scrollTipFunction="undefined"
  showScrollTips="false|true"
  verticalScrollPolicy="auto|off|on"
  verticalScrollPosition="0" 
  <b>Styles</b>
  backgroundAlpha="1.0"
  backgroundColor="undefined"
  backgroundImage="undefined"
  backgroundSize="auto"
  borderColor="0xAAB3B3"
  borderSides="left top right bottom"
  borderSkin="ClassReference('mx.skins.halo.HaloBorder')"
  borderStyle="inset"
  borderThickness="1"
  color="0x0B333C"
  cornerRadius="0"
  disabledColor="0xAAB3B3"
  dropShadowColor="0x000000"
  dropShadowEnabled="false"
  fontFamily="Verdana"
  fontSize="10"
  fontStyle="normal|italic"
  fontWeight="normal|bold"
  horizontalScrollBarStyleName=""
  leading="2"
  shadowDirection="center"
  shadowDistance="2"
  textAlign="<i>value; see detail.</i>"
  textDecoration="none|underline"
  textIndent="0"
  verticalScrollBarStyleName=""
 
  <b>Events</b>
  scroll="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Basisklasse für Ansichten/Container, die Bildlauf unterstützen
  
  </apiTipText></apiTipTexts><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ScrollControlBase-Klasse ist die Basisklasse für Steuerelemente mit Bildlaufleisten. Der Benutzer interagiert mit der Bildlaufleiste, oder der Entwickler greift auf Methoden und Eigenschaften zu, die den sichtbaren Bereich ändern. ScrollControlBase nimmt ein einziges untergeordnetes Objekt und platziert und maskiert dieses Objekt oder verändert seine Größe, damit der sichtbare Inhalt angezeigt wird. Alle Elemente, bei denen ein Bildlauf durchgeführt wird, müssen diesem Inhaltsobjekt untergeordnete Objekte sein.
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:ScrollControlBase_mx.events.ScrollEvent.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
  Wird ausgelöst, wenn der Inhalt verschoben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3269
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ScrollEvent.SCROLL</apiEventType><adobeApiEventClassifier>mx.events.ScrollEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Inhalt verschoben wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:ScrollControlBase:ScrollControlBase"><apiName>ScrollControlBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ScrollControlBase:protected:createBorder"><apiName>createBorder</apiName><shortdesc>
      Erzeugt den Rahmen für diese Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Erzeugt den Rahmen für diese Komponente. Normalerweise wird der Rahmen durch <codeph>borderStyle</codeph> und den <codeph>borderSkin</codeph>-Stil bestimmt. Er muss die Rahmeneigenschaft auf die Instanz des Rahmens setzen.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      Erstellt Objekte, die untergeordnete Objekte von ScrollControlBase sind, in diesem Fall Rahmen und Maske.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Erstellt Objekte, die untergeordnete Objekte von ScrollControlBase sind, in diesem Fall Rahmen und Maske. Flex ruft diese Methode bei der ersten Erstellung von ScrollControlBase auf. Überschreibt eine Unterklasse diese Methode, muss die Unterklasse die <codeph>super.createChildren()</codeph>-Methode aufrufen, sodass die Logik in der <codeph>ScrollControlBase.createChildren()</codeph>-Methode ausgeführt wird.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:layoutChrome"><apiName>layoutChrome</apiName><shortdesc>
      Reagiert auf Größenänderungen durch Festlegen der Position und Größe des Rahmens dieses Steuerelements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Legt die Breite der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleX</codeph>-Eigenschaft der Komponente.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Legt die Höhe der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleY</codeph>-Eigenschaft der Komponente.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Reagiert auf Größenänderungen durch Festlegen der Position und Größe des Rahmens dieses Steuerelements.
     
      <p>Die <codeph>ScrollControlBase.layoutChrome()</codeph>-Methode legt die Position und Größe des Rahmens für ScrollControlBase fest. In jeder Unterklasse von ScrollControlBase muss die <codeph>layoutChrome()</codeph>-Methode die <codeph>super.layoutChrome()</codeph>-Methode aufrufen, damit der Rahmen korrekt platziert wird.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:mouseWheelHandler"><apiName>mouseWheelHandler</apiName><shortdesc>
      Ereignisprozedur für das Mausrad-Bildlaufereignis.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>Das Ereignisobjekt.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ereignisprozedur für das Mausrad-Bildlaufereignis.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:roomForScrollBar"><apiName>roomForScrollBar</apiName><shortdesc>
      Bestimmt, ob bei der jeweiligen Komponente genügend Platz für die Anzeige einer gegebenen Bildlaufleiste vorhanden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Gibt „true“ zurück, wenn genügend Platz für eine Bildlaufleiste vorhanden ist.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>bar</apiItemName><apiOperationClassifier>mx.controls.scrollClasses:ScrollBar</apiOperationClassifier><apiDesc>Bildlaufleiste
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Legt die Breite der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleX</codeph>-Eigenschaft der Komponente.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Legt die Höhe der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleY</codeph>-Eigenschaft der Komponente.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Bestimmt, ob bei der jeweiligen Komponente genügend Platz für die Anzeige einer gegebenen Bildlaufleiste vorhanden ist.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:scrollHandler"><apiName>scrollHandler</apiName><shortdesc>
      Standard-Ereignisprozedur für das Ereignis „scroll“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Das Ereignisobjekt.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Standard-Ereignisprozedur für das Ereignis <codeph>scroll</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:setScrollBarProperties"><apiName>setScrollBarProperties</apiName><shortdesc>
      Löst aus, dass ScrollControlBase Bildlaufleisten basierend auf den übergebenen Parametern ein- oder ausblendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>totalColumns</apiItemName><apiType value="int"/><apiDesc>Die Anzahl der horizontalen Einheiten, die angezeigt werden müssen.
     
      </apiDesc></apiParam><apiParam><apiItemName>visibleColumns</apiItemName><apiType value="int"/><apiDesc>Die Anzahl der horizontalen Einheiten, die zugleich angezeigt werden können.
     
      </apiDesc></apiParam><apiParam><apiItemName>totalRows</apiItemName><apiType value="int"/><apiDesc>Die Anzahl der vertikalen Einheiten, die angezeigt werden müssen.
     
      </apiDesc></apiParam><apiParam><apiItemName>visibleRows</apiItemName><apiType value="int"/><apiDesc>Die Anzahl der vertikalen Einheiten, die zugleich angezeigt werden können.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Löst aus, dass ScrollControlBase Bildlaufleisten basierend auf den übergebenen Parametern ein- oder ausblendet. Wenn ein Textbereich nur 100 horizontale Pixel und fünf Zeilen Text anzeigen kann, der tatsächlich anzuzeigende Text jedoch eine Breite von 200 Pixel und 30 Zeilen aufweist, wird die <codeph>setScrollBarProperties()</codeph>-Methode als <codeph>setScrollBarProperties(200, 100, 30, 5)</codeph> aufgerufen.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ScrollControlBase:protected:border"><apiName>border</apiName><shortdesc>
      Das Rahmenobjekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="mx.core:IFlexDisplayObject"/></apiValueDef><apiDesc>
      Das Rahmenobjekt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:protected:horizontalScrollBar"><apiName>horizontalScrollBar</apiName><shortdesc>
      Die horizontale Bildlaufleiste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.controls.scrollClasses:ScrollBar</apiValueClassifier></apiValueDef><apiDesc>
      Die horizontale Bildlaufleiste. Diese Eigenschaft ist null, wenn derzeit keine horizontale Bildlaufleiste angezeigt wird. Normalerweise greifen Sie auf diese Eigenschaft nicht direkt zu. Die Manipulation der Eigenschaften <codeph>horizontalScrollPolicy</codeph> und <codeph>horizontalScrollPosition</codeph> sollte genügend Möglichkeiten für die Steuerung der Bildlaufleiste bieten.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:liveScrolling"><apiName>liveScrolling</apiName><shortdesc>
      Ein Flag, das anzeigt, ob der Bildlauf aktiviert ist, wenn die Bildlaufminiatur bewegt wird, oder die Anzeige nicht aktualisiert wird, wenn die Miniatur losgelassen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein Flag, das anzeigt, ob der Bildlauf aktiviert ist, wenn die Bildlaufminiatur bewegt wird, oder die Anzeige nicht aktualisiert wird, wenn die Miniatur losgelassen wird. Der Standardwert ist <codeph>true</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:protected:maskShape"><apiName>maskShape</apiName><shortdesc>
      Die Maske.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.display:Shape"/></apiValueDef><apiDesc>
      Die Maske. Wenn aktuell keine Bildlaufleisten angezeigt werden, oder in manchen Unterklassen mit einem anderen Maskierungsmechanismus, kann diese Eigenschaft nicht definiert sein. Eine Maske definiert den sichtbaren Bereich eines anzeigbaren Objekts. Diese Maske wird demzufolge dazu verwendet, diejenigen Teile des Inhalts auszublenden, die derzeit nicht sichtbar sind. Normalerweise greifen Sie auf diese Eigenschaft nicht direkt zu. Die Manipulation der Eigenschaften <codeph>horizontalScrollPolicy</codeph>, <codeph>verticalScrollPolicy</codeph>, <codeph>horizontalScrollPosition</codeph> und <codeph>verticalScrollPosition</codeph> sollte genügend Möglichkeiten für die Steuerung der Maske bieten.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:protected:scrollAreaChanged"><apiName>scrollAreaChanged</apiName><shortdesc>
      Ein Flag, das anzeigt, dass der Bildlaufbereich sich aufgrund der Ein- und Ausblendung von Bildlaufleisten geändert hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein Flag, das anzeigt, dass der Bildlaufbereich sich aufgrund der Ein- und Ausblendung von Bildlaufleisten geändert hat. Wird von den meisten Layout-Methoden zum erneuten Anpassen der Bildlaufeigenschaften verwendet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:showScrollTips"><apiName>showScrollTips</apiName><shortdesc>
      Ein Flag, das anzeigt, ob neben der Bildlaufminiatur, wenn diese gezogen wird, eine QuickInfo angezeigt werden sollte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein Flag, das anzeigt, ob neben der Bildlaufminiatur, wenn diese gezogen wird, eine QuickInfo angezeigt werden sollte. Der Standardwert ist <codeph>false</codeph>, d. h. die QuickInfo ist deaktiviert.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:protected:verticalScrollBar"><apiName>verticalScrollBar</apiName><shortdesc>
      Die vertikale Bildlaufleiste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.controls.scrollClasses:ScrollBar</apiValueClassifier></apiValueDef><apiDesc>
      Die vertikale Bildlaufleiste. Diese Eigenschaft ist null, wenn derzeit keine vertikale Bildlaufleiste angezeigt wird. Normalerweise greifen Sie auf diese Eigenschaft nicht direkt zu. Die Manipulation der Eigenschaften <codeph>verticalScrollPolicy</codeph> und <codeph>verticalScrollPosition</codeph> sollte genügend Möglichkeiten für die Steuerung der Bildlaufleiste bieten.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      Gibt ein EdgeMetrics-Objekt zurück, das über vier Eigenschaften verfügt: „left“, „top“, „right“ und „bottom“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
      Gibt ein EdgeMetrics-Objekt zurück, das über vier Eigenschaften verfügt: <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> und <codeph>bottom</codeph>. Der Wert der Eigenschaften entspricht der Rahmenstärke an einer Seite des Rahmens in Pixeln.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc>
      Eine Eigenschaft, die anzeigt, ob die horizontale Bildlaufleiste immer aktiviert ist, immer deaktiviert ist oder sich entsprechend der an die setScrollBarProperties()-Methode übergebenen Parameter ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="horizontalScrollPolicyChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.OFF
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Eine Eigenschaft, die anzeigt, ob die horizontale Bildlaufleiste immer aktiviert ist, immer deaktiviert ist oder sich entsprechend der an die <codeph>setScrollBarProperties()</codeph>-Methode übergebenen Parameter ändert. Zulässige Werte sind <codeph>ScrollPolicy.ON</codeph>, <codeph>ScrollPolicy.OFF</codeph> und <codeph>ScrollPolicy.AUTO</codeph>. Für MXML-Werte gibt es die Möglichkeiten <codeph>"on"</codeph>, <codeph>"off"</codeph> und <codeph>"auto"</codeph>.
     
      <p>Wenn diese Eigenschaft für ListBase-Unterklassen auf <codeph>ScrollPolicy.OFF</codeph> gesetzt wird, wirkt sich dies nicht auf die <codeph>horizontalScrollPosition</codeph>-Eigenschaft aus. Sie können an den Inhalten trotzdem noch einen programmgesteuerten Bildlauf durchführen.</p>
     
      <p>Beachten Sie, dass die Richtlinie sich auf die abgemessene Größe der Komponente auswirken kann: Ist die Richtlinie <codeph>ScrollPolicy.AUTO</codeph>, wird die Bildlaufleiste in der abgemessenen Größe nicht berücksichtigt. Dies wird so gehandhabt, um zu verhindern, dass das Layout neu berechnet wird, wenn die Bildlaufleiste eingeblendet wird. Wenn Sie wissen, dass Sie genügend Daten für Bildlaufleisten haben, sollten Sie die Richtlinie auf <codeph>ScrollPolicy.ON</codeph> setzen. Wenn Sie nicht sicher sind, müssen Sie möglicherweise für die jeweilige Komponente ausdrücklich eine Breite oder Höhe einstellen, damit Bildlaufleisten später eingeblendet werden.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
      Der Offset von der linken Kante zum Inhalt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="viewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Offset von der linken Kante zum Inhalt. Dies kann in manchen Unterklassen ein Pixel-Offset oder eine andere messbare Angabe sein, wie etwa die Anzahl der Spalten in einem DataGrid oder die Anzahl von Elementen in einer HorizontalList oder TileList.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:maxHorizontalScrollPosition:get"><apiName>maxHorizontalScrollPosition</apiName><shortdesc>
      Der Höchstwert für die horizontalScrollPosition-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="maxHorizontalScrollPositionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Der Höchstwert für die <codeph>horizontalScrollPosition</codeph>-Eigenschaft. Beachten Sie, dass dies nicht die Breite für den Inhalt ist, da die <codeph>maxHorizontalScrollPosition</codeph>-Eigenschaft die Breite des Inhalts minus der Breite des anzeigbaren Bereichs enthält.
     
      <p>Bei den meisten Komponenten wird der Wert der <codeph>maxHorizontalScrollPosition</codeph>-Eigenschaft aus den Daten und der Größe der Komponente berechnet und darf nicht vom Anwendungscode festgelegt werden.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:maxVerticalScrollPosition:get"><apiName>maxVerticalScrollPosition</apiName><shortdesc>
      Der Höchstwert für die verticalScrollPosition-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="maxVerticalScrollPositionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Der Höchstwert für die <codeph>verticalScrollPosition</codeph>-Eigenschaft. Beachten Sie, dass dies nicht die Höhe für den Inhalt ist, da die <codeph>maxVerticalScrollPosition</codeph>-Eigenschaft die Höhe des Inhalts minus der Höhe des anzeigbaren Bereichs enthält.
     
      <p>Der Wert der <codeph>maxVerticalScrollPosition</codeph>-Eigenschaft wird aus den Daten und der Größe der Komponente berechnet und darf nicht vom Anwendungscode festgelegt werden.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:scrollTipFunction:get"><apiName>scrollTipFunction</apiName><shortdesc>
      Eine Funktion, die den als ScrollTip anzuzeigenden String berechnet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="scrollTipFunctionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Eine Funktion, die den als ScrollTip anzuzeigenden String berechnet. Diese Funktion wird aufgerufen, wenn die <codeph>showScrollTips</codeph>-Eigenschaft auf <codeph>true</codeph> gesetzt ist und die Bildlaufminiatur gezogen wird. Diese Funktion sollte einen String zurückgeben, der als ScrollTip verwendet wird. An die Funktion werden zwei Parameter übergeben. Der erste ist der Parameter <codeph>direction</codeph> für die Ausrichtung der Bildlaufleiste. Der zweite ist <codeph>scrollPosition</codeph> für die Position der Bildlaufleiste, wie im folgenden Beispiel zu sehen:
      
      <pre>
      function scrollTipFunction(direction:String, position:Number):String 
      {
        if (direction == "vertical") return myToolTips[position];
        else return "";
      }</pre>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc>
      Eine Eigenschaft, die anzeigt, ob die vertikale Bildlaufleiste immer aktiviert ist, immer deaktiviert ist oder sich entsprechend der an die setScrollBarProperties()-Methode übergebenen Parameter ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="verticalScrollPolicyChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Eine Eigenschaft, die anzeigt, ob die vertikale Bildlaufleiste immer aktiviert ist, immer deaktiviert ist oder sich entsprechend der an die <codeph>setScrollBarProperties()</codeph>-Methode übergebenen Parameter ändert. Zulässige Werte sind <codeph>ScrollPolicy.ON</codeph>, <codeph>ScrollPolicy.OFF</codeph> und <codeph>ScrollPolicy.AUTO</codeph>. Für MXML-Werte gibt es die Möglichkeiten <codeph>"on"</codeph>, <codeph>"off"</codeph> und <codeph>"auto"</codeph>.
     
      <p>Wenn diese Eigenschaft für ListBase-Unterklassen auf <codeph>ScrollPolicy.OFF</codeph> gesetzt wird, wirkt sich dies nicht auf die <codeph>verticalScrollPosition</codeph>-Eigenschaft aus. Sie können an den Inhalten trotzdem noch einen programmgesteuerten Bildlauf durchführen.</p>
     
      <p>Beachten Sie, dass die Richtlinie sich auf die abgemessene Größe der Komponente auswirken kann: Ist die Richtlinie <codeph>ScrollPolicy.AUTO</codeph>, wird die Bildlaufleiste in der abgemessenen Größe nicht berücksichtigt. Dies wird so gehandhabt, um zu verhindern, dass das Layout neu berechnet wird, wenn die Bildlaufleiste eingeblendet wird. Wenn Sie wissen, dass Sie genügend Daten für Bildlaufleisten haben, sollten Sie die Richtlinie auf <codeph>ScrollPolicy.ON</codeph> setzen. Wenn Sie nicht sicher sind, müssen Sie möglicherweise für die jeweilige Komponente ausdrücklich eine Breite oder Höhe einstellen, damit Bildlaufleisten später eingeblendet werden.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc>
      Der Offset von der oberen Kante zum Inhalt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="viewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Offset von der oberen Kante zum Inhalt. Dies kann in manchen Unterklassen ein Pixel-Offset oder eine andere messbare Angabe sein, wie etwa die Anzahl der Zeilen in einer Liste oder die Anzahl der Kacheln in einer TileList.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:viewMetrics:get"><apiName>viewMetrics</apiName><shortdesc>
      Ein EdgeMetrics-Objekt, das die Bildlaufleisten berücksichtigt, wenn diese sichtbar sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
      Ein EdgeMetrics-Objekt, das die Bildlaufleisten berücksichtigt, wenn diese sichtbar sind.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>