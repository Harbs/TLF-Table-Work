<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.core"><apiName>mx.core</apiName><apiDetail/><apiClassifier id="mx.core:LayoutContainer"><apiName>LayoutContainer</apiName><shortdesc>
  Flex ではデフォルトのコンテナ（Application コンテナ）が定義されるため、別のコンテナを明示的に定義することなく、モジュールまたはアプリケーションにコンテンツを追加することができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="property" name="y"/><Exclude kind="property" name="x"/><Exclude kind="property" name="toolTip"/><Exclude kind="property" name="tabIndex"/><Exclude kind="property" name="label"/><Exclude kind="property" name="icon"/><Exclude kind="property" name="direction"/><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="Number">
<description>
  上境界線とコンテンツ領域との間のピクセル数です。 
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="Number">
<description>
  下境界線とコンテンツ領域との間のピクセル数です。  
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="Number">
<description>
  子同士の垂直方向の間隔を示すピクセル数です。 デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合は 6 になります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="Number">
<description>
  子同士の水平方向の間隔を示すピクセル数です。デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合は 8 になります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="String">
<description>
  このコンテナに含まれる子の垂直方向の配置です。 指定できる値は、<codeph>"top"</codeph>、<codeph>"middle"</codeph> および <codeph>"bottom"</codeph> です。 デフォルト値は <codeph>"top"</codeph> ですが、ButtonBar、ControlBar、LinkBar、ToggleButtonBar のようにこれ以外のデフォルト値になるコンテナもあります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="String">
<description>
  このコンテナに含まれる子の水平方向の配置です。 有効な値は <codeph>"left"</codeph>、<codeph>"center"</codeph> および <codeph>"right"</codeph> です。 デフォルト値は <codeph>"left"</codeph> ですが、ButtonBar や ToggleButtonBar のようにこれ以外のデフォルト値になるコンテナもあります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Application&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Application
    <strong>Properties</strong>
    layout="vertical|horizontal|absolute"
    xmlns:<i>No default</i>="<i>No default</i>"
 
    <strong>Styles</strong> 
    horizontalAlign="center|left|right"
    horizontalGap="8"
    paddingBottom="0"
    paddingTop="0"
    verticalAlign="top|bottom|middle"
    verticalGap="6"
  
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.containers.utilityClasses:IConstraintLayout</apiBaseInterface><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Flex ではデフォルトのコンテナ（Application コンテナ）が定義されるため、別のコンテナを明示的に定義することなく、モジュールまたはアプリケーションにコンテンツを追加することができます。 このコンテナは、MXML アプリケーションファイルの最初のタグである <codeph>&lt;mx:Application></codeph> タグ、または MXML モジュールファイルの最初のタグである <codeph>&lt;mx:Module></codeph> タグから作成されます。 Application または Module コンテナを、アプリケーション内で使用する唯一のコンテナにした方が好都合のようにも思われますが、ほとんどの場合は、アプリケーションまたはモジュールにコントロールを追加する前に、少なくとももう 1 つのコンテナを明示的に定義することになります。
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links><apiConstructor id="mx.core:LayoutContainer:LayoutContainer"><apiName>LayoutContainer</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.core:LayoutContainer:protected:boxLayoutClass"><apiName>boxLayoutClass</apiName><shortdesc>
      レイアウトを行う mx.containers.utilityClasses.Layout サブクラスです。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      レイアウトを行う mx.containers.utilityClasses.Layout サブクラスです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutContainer:protected:canvasLayoutClass"><apiName>canvasLayoutClass</apiName><shortdesc>
      レイアウトを行う mx.containers.utilityClasses.Layout サブクラスです。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      レイアウトを行う mx.containers.utilityClasses.Layout サブクラスです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutContainer:constraintColumns:get"><apiName>constraintColumns</apiName><shortdesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintColumns">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintColumns">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutContainer:constraintRows:get"><apiName>constraintRows</apiName><shortdesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintRows">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintRows">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutContainer:layout:get"><apiName>layout</apiName><shortdesc>
      このアプリケーションに使用されるレイアウトメカニズムを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="layoutChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"vertical"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このアプリケーションに使用されるレイアウトメカニズムを指定します。 アプリケーションでは、<codeph>"vertical"</codeph>、<codeph>"horizontal"</codeph> または <codeph>"absolute"</codeph> の配置を使用できます。 vertical の配置では、アプリケーションの上部から下部へ垂直に、指定された順序で各子コンポーネントをレイアウトします。 horizontal の配置では、アプリケーションの左から右へ水平に、指定された順序で各子コンポーネントをレイアウトします。absolute の配置では、自動レイアウトは行われないので、各子コンポーネントの位置を明示的に定義する必要があります。 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:Repeater"><apiName>Repeater</apiName><shortdesc>
  Repeater クラスは &amp;lt;mx:Repeater&amp;gt; タグに対応するランタイムオブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The &lt;Repeater&gt; class has the following properties:</p>
 
  <pre>
  &lt;mx:Repeater
    <strong>Properties</strong>
    id="<i>No default</i>"
    childDescriptors="<i>No default</i>"
    count="<i>No default</i>"
    dataProvider="<i>No default</i>"
    recycleChildren="false|true"
    startingIndex="0"
 
    <strong>Events</strong>
    repeat="<i>No default</i>"
    repeatEnd="<i>No default</i>"
    repeatStart="<i>No default</i>"
  &gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IRepeater</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Repeater クラスは <codeph>&lt;mx:Repeater></codeph> タグに対応するランタイムオブジェクトです。 このクラスは、その dataProvider に基づいて、自分のサブコンポーネントの複数のインスタンスを作成します。 標準またはカスタムの任意のコントロールまたはコンテナを、コンポーネントとして繰り返し使用できます。
 
  <p><codeph>&lt;mx:Repeater></codeph> タグは、コントロールタグまたはコンテナタグを記述できる場所ならどこにでも使用できます（<codeph>&lt;mx:Application></codeph> コンテナタグを除く）。 ユーザーインターフェイスコンポーネントを繰り返し使用するには、タグを <codeph>&lt;mx:Repeater></codeph> タグの中に置きます。 MXML ドキュメントでは、複数の <codeph>&lt;mx:Repeater></codeph> タグを使用できます。 <codeph>&lt;mx:Repeater></codeph> タグをネストすることも可能です。</p>
 
  <p>UIComponent クラスを拡張していないオブジェクトに <codeph>&lt;mx:Repeater></codeph> タグを使用することはできません。</p>
 
  </apiDesc><example conref="RepeaterExample.mxml"><swfblock conref="examples/RepeaterExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.core.xml#Container"><linktext>mx.core.Container</linktext></link><link href="" invalidHref="mx.core.UIComponent.xml"><linktext>mx.core.UIComponent</linktext></link><link href="" invalidHref="mx.core.UIComponentDescriptor.xml"><linktext>mx.core.UIComponentDescriptor</linktext></link><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links><adobeApiEvent id="mx.core:Repeater_mx.events.FlexEvent.REPEAT_START_repeatStart"><apiName>repeatStart</apiName><shortdesc>
  Flex が dataProvider プロパティの処理を開始し、指定されたサブコンポーネントの作成を開始したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.REPEAT_START</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Flex が <codeph>dataProvider</codeph> プロパティの処理を開始し、指定されたサブコンポーネントの作成を開始したときに送出されます。 このイベントは、<codeph>dataProvider</codeph> プロパティが空または <codeph>null</codeph> の場合でもトリガーされます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Repeater_mx.events.FlexEvent.REPEAT_END_repeatEnd"><apiName>repeatEnd</apiName><shortdesc>
  Repeater のすべてのサブコンポーネントが作成された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.REPEAT_END</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Repeater のすべてのサブコンポーネントが作成された後に送出されます。 このイベントは、<codeph>dataProvider</codeph> プロパティが空または <codeph>null</codeph> の場合でもトリガーされます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Repeater_mx.events.FlexEvent.REPEAT_repeat"><apiName>repeat</apiName><shortdesc>
  アイテムが処理され、currentIndex および currentItem プロパティが更新されるたびに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.REPEAT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  アイテムが処理され、<codeph>currentIndex</codeph> および <codeph>currentItem</codeph> プロパティが更新されるたびに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:Repeater:Repeater"><apiName>Repeater</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:Repeater:executeChildBindings"><apiName>executeChildBindings</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Repeater:initializeRepeater"><apiName>initializeRepeater</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>container</apiItemName><apiType value="mx.core:IContainer"/></apiParam><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="mx.core:Repeater:childDescriptors"><apiName>childDescriptors</apiName><shortdesc>
      この Repeater の子に対する UIComponentDescriptor オブジェクトの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      この Repeater の子に対する UIComponentDescriptor オブジェクトの配列です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Repeater:container:get"><apiName>container</apiName><shortdesc>
      この Repeater を含むコンテナです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:IContainer"/></apiValueDef><apiDesc>
      この Repeater を含むコンテナです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Repeater:count:get"><apiName>count</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="countChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
     </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:Repeater:currentIndex:get"><apiName>currentIndex</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="nextRepeaterItem"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
     </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:Repeater:currentItem:get"><apiName>currentItem</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="nextRepeaterItem"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
     </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:Repeater:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="collectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
     </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:Repeater:recycleChildren:get"><apiName>recycleChildren</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:Repeater:startingIndex:get"><apiName>startingIndex</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="startingIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
     </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.core:Application"><apiName>Application</apiName><shortdesc>
  Flex ではデフォルトのコンテナ（Application コンテナ）が定義されるため、別のコンテナを明示的に定義することなく、アプリケーションにコンテンツを追加することができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="property" name="y"/><Exclude kind="property" name="x"/><Exclude kind="property" name="toolTip"/><Exclude kind="property" name="tabIndex"/><Exclude kind="property" name="label"/><Exclude kind="property" name="icon"/><Exclude kind="property" name="direction"/><Alternative owner="mx.core:Application" replacement="spark.components.Application" since="4.0">
	</Alternative><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  アプリケーションの上境界線からコンテンツ領域までのピクセル数です。 
   </description>
<default>24
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  アプリケーションの下境界線からコンテンツ領域までのピクセル数です。  
   </description>
<default>24
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="backgroundGradientColors" owner="mx.core:Application" playerVersion="Flash9" theme="halo" type="Array">
<description>
  アプリケーションの背景グラデーションの塗りの着色で使用する色を指定します。これは、RGB カラーを指定する 2 つの uint 値から成る配列に設定する必要があります。エレメント 0 および 1 は、カラーグラデーションの開始値と終了値を指定します。 単色の背景の場合は、エレメント 0 と 1 に同じカラー値を設定します。 値 <codeph>undefined</codeph> は、<codeph>backgroundColor</codeph> プロパティに基づいて背景グラデーションが生成されることを示します。
   </description>
<default>undefined 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="backgroundGradientAlphas" owner="mx.core:Application" playerVersion="Flash9" theme="halo" type="Array">
<description>
  アプリケーションの背景グラデーションの塗りで使用されるアルファ透明度値を指定します。 これは、2 つの数値から成る配列に設定する必要があります。エレメント 0 および 1 は、アルファグラデーションの開始値と終了値を表します。
   </description>
<default>[ 1.0, 1.0 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="yes" name="modalTransparencyDuration" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  モーダルウィンドウの開閉時に、モーダルの透明効果が再生される期間です（ミリ秒単位）。
 
  </description>
<default>100
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="modalTransparencyColor" owner="mx.core:Application" playerVersion="Flash9" type="uint">
<description>
  モーダルオーバーレイのレイヤーの色です。 このスタイルは、<codeph>modalTransparency</codeph> スタイルと共に、モーダルウィンドウを開いたときにアプリケーションに適用されるカラー化を決定するのに使用します。
 
  </description>
<default>#DDDDDD
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="modalTransparencyBlur" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  モーダルウィンドウが開いているとき、アプリケーションに適用されるぼかしです。 Blur エフェクトはイメージの細部をぼかします。 
  
  </description>
<default>3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.filters.BlurFilter.xml"><linktext>flash.filters.BlurFilter</linktext></link></related-links></style><style inherit="yes" name="modalTransparency" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  PopUp Manager によって起動されたコンポーネントのモーダル性は、コンポーネントの真下に大きな透明オーバーレイを作成することによってシミュレートされます。透明オブジェクトのレンダリング上の理由により、オーバーレイの下のオブジェクトが少し薄く表示されることがあります。 効果的な透明性を設定するには、<codeph>modalTransparency</codeph> の値を 0.0（完全に透明）から 1.0（完全に不透明）の範囲で調整します。 <codeph>modalTransparencyColor</codeph> スタイルを設定してオーバーレイの色を変更することもできます。
 
  </description>
<default>0.5
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;mx:Application&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;mx:Application
    <strong>Properties</strong>
    application="<i>No default</i>"
    controlBar="null"
    frameRate="24"
    historyManagementEnabled="true|false"
    layout="vertical|horizontal|absolute"
    pageTitle"<i>No default</i>"
    preloader="<i>No default</i>"
    resetHistory="false|true"
    scriptRecursionLimit="1000"
    scriptTimeLimit="60"
    usePreloader="true|false"
    viewSourceURL=""
    xmlns:<i>No default</i>="<i>No default</i>"
 
    <strong>Styles</strong> 
    backgroundGradientAlphas="[ 1.0, 1.0 ]"
    backgroundGradientColors="undefined"
    horizontalAlign="center|left|right"
    horizontalGap="8"
    modalTransparency="0.5"
    modalTransparencyBlur="3"
    modalTransparencyColor="#DDDDDD"
    modalTransparencyDuration="100"
    paddingBottom="24"
    paddingTop="24"
    verticalAlign="top|bottom|middle"
    verticalGap="6"
  
    <strong>Events</strong>
    applicationComplete="<i>No default</i>"
    error="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:LayoutContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Flex ではデフォルトのコンテナ（Application コンテナ）が定義されるため、別のコンテナを明示的に定義することなく、アプリケーションにコンテンツを追加することができます。 このコンテナは、MXML アプリケーションファイルの最初のタグである <codeph>&lt;mx:Application></codeph> タグから作成されます。 Application コンテナを、アプリケーション内で使用する唯一のコンテナにした方が好都合のようにも思われますが、ほとんどの場合は、アプリケーションにコントロールを追加する前に、少なくとももう 1 つのコンテナを明示的に定義することになります。
   <p>アプリケーションは、白い背景を設定し、左揃えを行い、すべての余白を削除するという、あらかじめ定義された plain スタイルをサポートします。このスタイルを使用するには、次の操作を行います。</p>
   <pre>
    &lt;mx:Application styleName="plain" />
  </pre>
   <p>これは、次のスタイル属性を設定するのと同じです。</p>
   <pre>
    backgroundColor="0xFFFFFF"
    horizontalAlign="left"
    paddingLeft="0"
    paddingTop="0"
    paddingBottom="0"
    paddingRight="0"
  </pre>
 
  </apiDesc><example conref="SimpleApplicationExample.mxml"><swfblock conref="examples/SimpleApplicationExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.managers.CursorManager.xml"><linktext>mx.managers.CursorManager</linktext></link><link href="" invalidHref="mx.managers.LayoutManager.xml"><linktext>mx.managers.LayoutManager</linktext></link><link href="" invalidHref="mx.managers.SystemManager.xml"><linktext>mx.managers.SystemManager</linktext></link><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links><adobeApiEvent id="mx.core:Application_flash.events.ErrorEvent.ERROR_error"><apiName>error</apiName><shortdesc>
  HTTPService 呼び出しが失敗したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ErrorEvent.ERROR</apiEventType><adobeApiEventClassifier>flash.events.ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  HTTPService 呼び出しが失敗したときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Application_mx.events.FlexEvent.APPLICATION_COMPLETE_applicationComplete"><apiName>applicationComplete</apiName><shortdesc>
  アプリケーションが初期化され、LayoutManager によって処理され、表示リストに追加された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.APPLICATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  アプリケーションが初期化され、LayoutManager によって処理され、表示リストに追加された後に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:Application:Application"><apiName>Application</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:Application:addToCreationQueue"><apiName>addToCreationQueue</apiName><shortdesc>
      Application の作成キューにコンテナを追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiType value="Object"/><apiDesc>キューに追加するコンテナの ID、またはコンテナ自体へのポインターです。
           </apiDesc></apiParam><apiParam><apiItemName>preferredIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>（オプション）キュー内でのコンテナの相対位置を決める正の整数です。
           </apiDesc></apiParam><apiParam><apiItemName>callbackFunc</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>このパラメーターは無視されます。
           </apiDesc></apiParam><apiParam><apiItemName>parent</apiItemName><apiType value="mx.core:IFlexDisplayObject"/><apiData>null</apiData><apiDesc>このパラメーターは無視されます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Application の作成キューにコンテナを追加します。
           <p>このメカニズムは、コンテナのコンテンツを特定の順序でインスタンス化して描画する場合に使用します。この関数が呼び出される前に、コンテナの <codeph>creationPolicy</codeph> プロパティが <codeph>"none"</codeph> に設定されている必要があります。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:Application:controlBar"><apiName>controlBar</apiName><shortdesc>
      このアプリケーションの ApplicationControlBar です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:IUIComponent"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このアプリケーションの ApplicationControlBar です。 
           </apiDesc></apiValueDetail><related-links><link href="mx.containers.xml#ApplicationControlBar"><linktext>mx.containers.ApplicationControlBar</linktext></link></related-links></apiValue><apiValue id="mx.core:Application:frameRate"><apiName>frameRate</apiName><shortdesc>
        アプリケーションのフレームレートを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>24
      
      </apiDefaultValue></apiValueDef><apiDesc>
        アプリケーションのフレームレートを指定します。
        <p>メモ：このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:historyManagementEnabled"><apiName>historyManagementEnabled</apiName><shortdesc>
      false の場合、History Manager は無効になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>false</codeph> の場合、History Manager は無効になります。 BrowserManager を使用する場合は、false に設定することをお勧めします。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:pageTitle"><apiName>pageTitle</apiName><shortdesc>
        ブラウザーのタイトルバーに表示されるストリングを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
        ブラウザーのタイトルバーに表示されるストリングを指定します。 このプロパティは、HTML の <codeph>&lt;title></codeph> タグと同じ機能を提供します。
             <p>メモ：このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。MXML コードに設定されている値は、SDK に用意されている HTML テンプレートを更新するツールで使用できるように設計されています。</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:preloaderChromeColor"><apiName>preloaderChromeColor</apiName><shortdesc>
        デフォルトのプリローダーコンポーネントで使用されるベースカラーを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="uint"/></apiValueDef><apiDesc>
        デフォルトのプリローダーコンポーネントで使用されるベースカラーを指定します。このプロパティの効果は、Spark スキンで使用される <codeph>chromeColor</codeph> スタイルと同じです。通常、このプロパティは、アプリケーションで使用される <codeph>chromeColor</codeph> スタイルと同じ値に設定する必要があります。
        
        <p>メモ：このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:preloader"><apiName>preloader</apiName><shortdesc>
      アプリケーションコンテナでは、アプリケーションの SWF ファイルのダウンロードおよび初期化の進捗が表示されるダウンロードプログレスバーを使用できるアプリケーションプリローダーがサポートされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      アプリケーションコンテナでは、アプリケーションの SWF ファイルのダウンロードおよび初期化の進捗が表示されるダウンロードプログレスバーを使用できるアプリケーションプリローダーがサポートされます。デフォルトでは、アプリケーションプリローダーが有効になります。プリローダーでは、ダウンロードされたバイト数が追跡され、プログレスバーが継続的に更新されます。 
           <p>このプロパティは、カスタムプログレスインジケーターを定義するコンポーネントのパスを指定するために使用します。カスタムプログレスインジケーターを作成するには、通常、DownloadProgressBar クラスのサブクラスを作成するか、mx.preloaders.IPreloaderDisplay インターフェイスを実装する flash.display.Sprite クラスのサブクラスを作成します。 </p>
           <p><b>メモ：</b>このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.preloaders.DownloadProgressBar.xml"><linktext>mx.preloaders.DownloadProgressBar</linktext></link><link href="" invalidHref="flash.display.Sprite.xml"><linktext>flash.display.Sprite</linktext></link><link href="" invalidHref="mx.preloaders.IPreloaderDisplay.xml"><linktext>mx.preloaders.IPreloaderDisplay</linktext></link></related-links></apiValue><apiValue id="mx.core:Application:resetHistory"><apiName>resetHistory</apiName><shortdesc>
      true の場合、アプリケーションがリロードされるたびに、アプリケーションの履歴状態が初期状態にリセットされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、アプリケーションがリロードされるたびに、アプリケーションの履歴状態が初期状態にリセットされます。 アプリケーションは、次のいずれかが発生するとリロードされます。
      <ul>
        <li>ユーザーがブラウザーの更新ボタンをクリックしたとき。</li>
        <li>ユーザーが別の Web ページに移動してから、ブラウザーの戻るボタンをクリックして Flex アプリケーションに戻ったとき。</li>
        <li>ユーザーがブラウザーのお気に入りメニューまたはブックマークメニューから Flex アプリケーションをロードしたとき。</li>
      </ul>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:scriptRecursionLimit"><apiName>scriptRecursionLimit</apiName><shortdesc>
        Flash Player または AIR のコールスタックの最大の深さを指定します。この深さに達すると、Flash Player または AIR は停止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/><apiDefaultValue>1000
      
      </apiDefaultValue></apiValueDef><apiDesc>
        Flash Player または AIR のコールスタックの最大の深さを指定します。この深さに達すると、Flash Player または AIR は停止します。 実質的なスタックオーバーフローの制限になります。
        <p>メモ：このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:scriptTimeLimit"><apiName>scriptTimeLimit</apiName><shortdesc>
        ActionScript イベントハンドラーの最大実行継続時間を秒で指定します。この時間を超えると、Flash Player または AIR はこのイベントハンドラーがハングアップしたと見なして、実行を中止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>60
      
      </apiDefaultValue></apiValueDef><apiDesc>
        ActionScript イベントハンドラーの最大実行継続時間を秒で指定します。この時間を超えると、Flash Player または AIR はこのイベントハンドラーがハングアップしたと見なして、実行を中止します。 設定できる最大許容値は 60 秒です。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:usePreloader"><apiName>usePreloader</apiName><shortdesc>
        true の場合、アプリケーションのプリローダーを表示することを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
        <codeph>true</codeph> の場合、アプリケーションのプリローダーを表示することを示します。
        <p>メモ：このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:application:get"><apiName>application</apiName><shortdesc>
      最上位のアプリケーションへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Object"/><apiDeprecated replacement="FlexGlobals.topLevelApplication" sinceVersion="4.0"/></apiValueDef><apiDesc>
      最上位のアプリケーションへの参照です。
           <p>通常、Application オブジェクトは階層を構成しています。これは、Application が SWFLoader コントロールを使用して、別の Application を動的にロードできるためです。 UIComponent の <codeph>parentApplication</codeph> プロパティを使用すると、この UIComponent が存在するサブアプリケーションにアクセスし、階層を上って最上位の Application にアクセスできます。</p>
      
      <p>このプロパティは、Flex4 から使用されなくなりました。このプロパティは、以前のバージョンと同じように、mx.core.Application タイプおよび mx.core.WindowedApplication タイプのアプリケーションを返します。 Flex 4 以降では、spark.components.Application タイプまたは spark.components.WindowedApplication タイプのアプリケーションも返されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:parameters:get"><apiName>parameters</apiName><shortdesc>
      parameters プロパティは、この Application に渡されるパラメーターを表す名前と値のペアを含む Object を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      parameters プロパティは、この Application に渡されるパラメーターを表す名前と値のペアを含む Object を返します。
           <p>for-in ループを使用すると、パラメーター Object からすべての名前と値を抽出できます。</p>
           <p>パラメーターは、Application の URL のクエリストリングと、FlashVars HTML パラメーターの値の 2 つから提供されます。HTML パラメーターはメイン Application にのみ影響します。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:url:get"><apiName>url</apiName><shortdesc>
      この Application の SWF ファイルがロードされた URL です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      この Application の SWF ファイルがロードされた URL です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:viewSourceURL:get"><apiName>viewSourceURL</apiName><shortdesc>
      アプリケーションのソースを参照できる URL です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      アプリケーションのソースを参照できる URL です。このプロパティを設定すると、「ソースの表示」メニューアイテムがアプリケーションのデフォルトのコンテキストメニューに挿入されます。 このメニューアイテムを選択すると、新しいウィンドウに <codeph>viewSourceURL</codeph> が開きます。
           <p>次の例に示すように、<codeph>viewSourceURL</codeph> プロパティは、ActionScript ではなく MXML を使用して設定する必要があります。</p>
           <pre>
        &lt;mx:Application viewSourceURL="http://path/to/source">
          ...
        &lt;/mx:Application></pre>
           
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ContainerLayout"><apiName>ContainerLayout</apiName><shortdesc>
  ContainerLayout クラスは、コンテナクラスの layout プロパティの定数値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ContainerLayout クラスは、コンテナクラスの <codeph>layout</codeph> プロパティの定数値を定義します。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.containers.xml#Panel/layout"><linktext>mx.containers.Panel.layout</linktext></link><link href="mx.core.xml#Application/layout"><linktext>mx.core.Application.layout</linktext></link></related-links><apiValue id="mx.core:ContainerLayout:ABSOLUTE"><apiName>ABSOLUTE</apiName><shortdesc>
	  このコンテナのコンテンツに対して絶対配置レイアウトを使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>absolute</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  このコンテナのコンテンツに対して絶対配置レイアウトを使用します。子ごとに位置を明示的に指定する必要があります。
	 
	  <p>これを最も簡単に行うには、子ごとに <codeph>x</codeph>、<codeph>y</codeph>、<codeph>width</codeph> および <codeph>height</codeph> を指定します。</p>
	 
	  <p>MXML では、<codeph>width</codeph> と <codeph>height</codeph> はパーセンテージ値として指定できます。 ActionScript では、<codeph>percentWidth</codeph> プロパティと <codeph>percentHeight</codeph> プロパティを設定する必要があります。</p>
	 
	  <p>子の <codeph>width</codeph> または <codeph>percentWidth</codeph> を指定しなかった場合は、<codeph>measuredWidth</codeph>（<codeph>measure()</codeph> メソッドによって自動的に決定される）が使用されます。 高さについても同様です。</p>
	 
	  <p>レイアウトを行うもう 1 つの方法として、アンカースタイル <codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph>、<codeph>bottom</codeph>、<codeph>horizontalCenter</codeph> および <codeph>verticalCenter</codeph> を使用して、子をコンテナの上下左右または中央に固定することができます。</p>
	 
	  <p>絶対配置レイアウトを使用する場合、コンテナの <codeph>paddingLeft</codeph>、<codeph>paddingTop</codeph>、<codeph>paddingRight</codeph>、<codeph>paddingBottom</codeph>、<codeph>horizontalGap</codeph>、<codeph>verticalGap</codeph>、<codeph>horizontalAlign</codeph> および <codeph>verticalAlign</codeph> スタイルは無視されます。</p> 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerLayout:HORIZONTAL"><apiName>HORIZONTAL</apiName><shortdesc>
	  このコンテナのコンテンツに対して水平レイアウトを使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontal</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  このコンテナのコンテンツに対して水平レイアウトを使用します。コンテナでは子が自動的に 1 行に配置されます。
	 
	  <p>子の <codeph>width</codeph> または <codeph>percentWidth</codeph> を指定しなかった場合は、<codeph>measuredWidth</codeph>（<codeph>measure()</codeph> メソッドによって自動的に決定される）が使用されます。 高さについても同様です。</p>
	 
	  <p>子と子の間の間隔は <codeph>horizontalGap</codeph> スタイルで、子の配置は <codeph>verticalAlign</codeph> スタイルで制御できます。 <codeph>paddingLeft</codeph>、<codeph>paddingTop</codeph>、<codeph>paddingRight</codeph> および <codeph>paddingBottom</codeph> スタイルにより、コンテナの境界線と子の間の間隔を制御します。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerLayout:VERTICAL"><apiName>VERTICAL</apiName><shortdesc>
	  このコンテナのコンテンツに対して垂直レイアウトを使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>vertical</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  このコンテナのコンテンツに対して垂直レイアウトを使用します。コンテナでは子が自動的に 1 列に配置されます。
	 
	  <p>子の <codeph>width</codeph> または <codeph>percentWidth</codeph> を指定しなかった場合は、<codeph>measuredWidth</codeph>（<codeph>measure()</codeph> メソッドによって自動的に決定される）が使用されます。 高さについても同様です。</p>
	 
	  <p>子と子の間の間隔は <codeph>verticalGap</codeph> スタイルで、子の配置は <codeph>horizontalAlign</codeph> スタイルで制御できます。 <codeph>paddingLeft</codeph>、<codeph>paddingTop</codeph>、<codeph>paddingRight</codeph> および <codeph>paddingBottom</codeph> スタイルにより、コンテナの境界線と子の間の間隔を制御します。</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:Container"><apiName>Container</apiName><shortdesc>
  Container クラスは、コンポーネントの抽象基本クラスであり、子コンポーネントのレイアウト特性を制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Color" inherit="yes" name="symbolColor" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="uint">
<description>
  コンポーネントのシンボルのカラーです。CheckBox のチェックマークや ScrollBar ボタンの矢印などがあります。
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  コンテナの上境界線と、コンテンツ領域の上部との間のピクセル数です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  コンテナの下境界線と、コンテンツ領域の下部との間のピクセル数です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalScrollBarStyleName" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  垂直スクロールバーのスタイルの名前です。
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalScrollBarStyleName" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  水平スクロールバーのスタイルの名前です。
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="uint">
<description>
  コンポーネントにフォーカスがある場合のフォーカス枠のカラーです。
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="disabledOverlayAlpha" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  無効になったコンテナの上に配置されるオーバーレイのアルファ値です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.core:Container" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  コンポーネントの角に付いている丸みの半径です。 デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合は 0 になります。ApplicationControlBar のデフォルト値は 5 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="uint">
<description>
  コンポーネントのコンテンツ領域のカラーです。
   
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントのコンテンツの背景のアルファです。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAttachment" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  背景イメージが指定されている場合、このスタイルによって、イメージがビューポートに対して固定（<codeph>"fixed"</codeph>）されているか、コンテンツと共にスクロールするか（<codeph>"scroll"</codeph>）を指定します。
 
  </description>
<default>"scroll"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="uint">
<description>
  コンポーネントのスキンで使用されるアクセントカラーです。デフォルトのボタンスキンでは、このカラーで背景が着色されます。スライダートラックのハイライトでは、このカラーが使用されます。 
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセット（ピクセル単位）です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.core:Container" playerVersion="Flash10" type="Class">
<description>
  IUITextField を実装するクラスです。このクラスはテキストをレンダリングするためにこのコンポーネントで使用されます。
 
  <p>mx.core.UITextField クラス（Flash Player に組み込まれている標準の TextField を使用する場合）または mx.core.UIFTETextField クラス（Text Layout Framework を使用して、双方向レイアウトなどの向上したテキストレンダリングを取得する場合）のいずれかに設定できます。</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 可能な値は、<codeph>"none"</codeph> および <codeph>"underline"</codeph> です。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  コンテナ内のテキストの整列。 可能な値は <codeph>"left"</codeph>、<codeph>"right"</codeph>、または <codeph>"center"</codeph> です。
 
  <p>ほとんどのコンポーネントのデフォルト値は <codeph>"left"</codeph> です。 FormItem コンポーネントの場合、デフォルト値は <codeph>"right"</codeph> です。 Button、LinkButton および AccordionHeader コンポーネントでは、デフォルト値は <codeph>"center"</codeph> です。このプロパティは <codeph>labelPlacement</codeph> プロパティが <codeph>"left"</codeph> または <codeph>"right"</codeph> に設定されている場合のみ認識されます。 <codeph>labelPlacement</codeph> が <codeph>"top"</codeph> または <codeph>"bottom"</codeph> に設定されている場合は、テキストおよびアイコンが中央に配置されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.core:Container" playerVersion="Flash10" type="String">
<description>
  このコンポーネントで表示されるテキストのロケールです。
 
  <p>FTE および TLF はこのロケールを使用して Unicode 文字をフォント字形にマッピングしたり、フォールバックフォントを検索したりします。</p>
 
  <p>メモ：このスタイルは、MX コンポーネントで、<codeph>textFieldClass</codeph> として UIFTETextField が指定されている場合にのみ適用されます。</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  各文字間に表示される追加のピクセル数。 正の値を指定すると文字間隔が通常より広くなり、負の値を指定すると文字間隔が通常より狭くなります。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.core:Container" playerVersion="Flash9" type="Boolean">
<description>
  カーニングが有効（<codeph>true</codeph>) か無効（<codeph>false</codeph>）かを示すブール値です。カーニングでは、読みやすくするために、特定の文字ペア間の間隔を調整します。ただし、カーニングは見出しを大きなフォントにする場合など、必要な場合に限って使用してください。 カーニングは、埋め込みフォントに対してのみサポートされています。Verdana や、Courier New などの等幅フォントなど、特定のフォントではカーニングはサポートされていません。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 有効な値は <codeph>normal</codeph> と <codeph>bold</codeph> です。 Button コントロールのデフォルト値は <codeph>bold</codeph> です。 他のすべてのコントロールのデフォルト値は <codeph>normal</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>thickness</codeph> プロパティを設定します。 このプロパティは字形のエッジの太さを指定します。 可能な値は -200 から 200 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込みフォントを使用していて、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルは、システムフォントには影響を与えません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"italic"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 Halo テーマ内では、ColorPicker コントロール以外のすべてのコントロールのデフォルト値は 10 です。Halo テーマ別 ColorPicker コントロールのデフォルトは 11 です。Spark テーマ内では、ColorPicker コントロール以外のすべてのコントロールのデフォルト値は 12 です。Spark テーマ別 ColorPicker コントロールのデフォルトは 11 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>sharpness</codeph> プロパティを設定します。 このプロパティは字形のエッジのシャープネスを指定します。 可能な値は -400 から 400 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込みフォントを使用していて、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>gridFitType</codeph> プロパティを設定します。 可能な値は、<codeph>"none"</codeph>（<codeph>flash.text.GridFitType.NONE</codeph>）、<codeph>"pixel"</codeph>（<codeph>flash.text.GridFitType.PIXEL</codeph>）、および <codeph>"subpixel"</codeph>（<codeph>flash.text.GridFitType.SUBPIXEL</codeph>）です。 
  
  <p>このプロパティが適用されるのは、埋め込みフォントを使用していて、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  使用するフォントの名前です。 完全な CSS 実装と異なり、カンマ区切りリストはサポートされません。 任意のフォントファミリ名を使用できます。 汎用フォント名を指定した場合、適切なデバイスフォントに置換されます。Halo テーマのデフォルトフォントは <codeph>"Verdana"</codeph> です。Spark テーマのデフォルトフォントは <codeph>"Arial"</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  内部 TextField の <codeph>antiAliasType</codeph> プロパティを設定します。 可能な値は、<codeph>"normal"</codeph>（<codeph>flash.text.AntiAliasType.NORMAL</codeph>）および <codeph>"advanced"</codeph>（<codeph>flash.text.AntiAliasType.ADVANCED</codeph>）です。 
  
  <p>デフォルト値は <codeph>"advanced"</codeph> であり、フォントについて高度なアンチエイリアスが有効になります。 <codeph>"normal"</codeph> に設定すると、高度なアンチエイリアスが無効になります。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
  
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.core:Container" playerVersion="Flash9" type="uint">
<description>
  コンポーネントが無効な場合のテキストの色です。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.core:Container" playerVersion="Flash10" type="String">
<description>
  このコンポーネントで表示されるテキストの方向です。
 
  <p>使用できる値は、ラテン文字などの左から右のテキスト用の <codeph>"ltr"</codeph> と、アラビア文字やヘブライ文字などの右から左のテキスト用の <codeph>"rtl"</codeph> です。</p>
 
  <p>FTE と TLF は双方向テキストレイアウトアルゴリズムでこの値を使用し、Unicode 文字の順序を字形の順序にマッピングします。</p>
 
  <p>メモ：このスタイルは、MX コンポーネントで、<codeph>textFieldClass</codeph> として UIFTETextField が指定されている場合にのみ適用されます。</p>
 
  <p><codeph>direction</codeph> は、TLFTextField の境界内のテキストの整列にも影響します。ただし、コンポーネント内の TLFTextField の配置には影響しません。</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.core:Container" playerVersion="Flash9" type="uint">
<description>
  コンポーネントのラベルを含めたコンポーネント内のテキストの色です。Halo テーマのデフォルト値は <codeph>0x0B333C</codeph> です。Spark テーマのデフォルト値は <codeph>0x000000</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  コンポーネントの右境界線からコンテンツ領域の右端までのピクセル数です。
  <p>デフォルト値は 0 です。</p>
  <p>Halo テーマの Button コントロールデフォルト値は 10 で、Spark テーマの場合は 6 です。</p>
  <p>ComboBox コントロールのデフォルト値は 5 です。</p>
  <p>Form コンテナのデフォルト値は 16 です。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  コンポーネントの左境界線からコンテンツ領域の左端までのピクセル数です。
  <p>デフォルト値は 0 です。</p>
  <p>Halo テーマの Button コントロールデフォルト値は 10 で、Spark テーマの場合は 6 です。</p>
  <p>ComboBox コントロールのデフォルト値は 5 です。</p>
  <p>Form コンテナのデフォルト値は 16 です。</p>
  <p>Tree コントロールのデフォルト値は 2 です。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  コンポーネントの背景色です。 <codeph>backgroundColor</codeph> と <codeph>backgroundImage</codeph> の両方を設定できます。 一部のコンポーネントには背景色がありません。 DataGrid コントロールでは、このスタイル設定は無視されます。 デフォルト値は <codeph>undefined</codeph> で、未定義であることを意味します。 このスタイルと <codeph>backgroundImage</codeph> スタイルの両方が <codeph>undefined</codeph> である場合、コンポーネントは透明な背景を持ちます。
 
  <p>Application コンテナの場合、このスタイルはアプリケーションのロード時の背景色と、アプリケーションの実行時の背景のグラデーションを指定します。 指定された色よりもわずかに濃い色とわずかに薄い色の間でグラデーションパターンが計算されます。</p>
 
  <p>ほとんどの Flex コントロールのデフォルトスキンは、部分的に透明です。 この結果、コンテナの背景色が、そのコンテナの中のコントロールに部分的ににじみ出るように表示されます。 コントロールの <codeph>fillAlphas</codeph> プロパティのアルファ値を 1 に設定することで、これを避けることができます。次に例を示します。
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.core:Container" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  <codeph>backgroundColor</codeph> プロパティで定義されている、<codeph>backgroundImage</codeph> スタイルで定義されているイメージまたは SWF ファイルの背景色のアルファレベルです。 有効な値の範囲は、0.0 ～ 1.0 です。ほとんどのコントロールではデフォルト値は 1.0 ですが、ToolTip コントロールの場合デフォルト値は 0.95 であり、Alert コントロールの場合デフォルト値は 0.9 です。
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="Number">
<description>
  ドロップシャドウの幅です。このプロパティを負の値に設定すると、シャドウはコンポーネントの上に表示されます。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="String">
<description>
  ドロップシャドウの方向です。 有効な値は <codeph>"left"</codeph>、<codeph>"center"</codeph> および <codeph>"right"</codeph> です。
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropShadowColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="uint">
<description>
  ドロップシャドウの色です。
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  コンポーネントのドロップシャドウの表示または非表示を指定するブール型プロパティです。 デフォルト値は <codeph>false</codeph> です。
 
  <p><b>メモ：</b>ドロップシャドウをコンテナに表示するには、<codeph>contentBackgroundColor</codeph> プロパティを設定します。 設定しない場合、コンテナのデフォルトの背景は透明なので、シャドウはコンテナの背後に表示されます。</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  コンポーネントのドロップシャドウの表示または非表示を指定するブール型プロパティです。 このスタイルは <codeph>borderStyle="solid"</codeph> と共に使用します。 デフォルト値は <codeph>false</codeph> です。
 
  <p><b>メモ：</b>ドロップシャドウをコンテナに表示するには、<codeph>backgroundColor</codeph> プロパティまたは <codeph>backgroundImage</codeph> プロパティを設定します。 設定しない場合、コンテナのデフォルトの背景は透明なので、シャドウはコンテナの背後に表示されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  境界線の可視性です。
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="Number">
<description>
  境界ボックスの境界線の幅です。 <codeph>borderStyle</codeph> が <codeph>"solid"</codeph> に設定されている場合にのみ使用されます。
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  境界ボックスのスタイルです。 有効な値は <codeph>"none"</codeph>、<codeph>"solid"</codeph>、<codeph>"inset"</codeph> および <codeph>"outset"</codeph> です。 デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合は、<codeph>"inset"</codeph> になります。 ほとんどの Container のデフォルト値は <codeph>"none"</codeph> です。halo テーマで使用できる値は <codeph>"inset"</codeph> と <codeph>"outset"</codeph> のみです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSkin" owner="mx.core:Container" playerVersion="Flash9" type="Class">
<description>
  コンポーネントの境界線のスキンクラスです。 Halo テーマに独自のデフォルトを明示的に設定していないすべてのコンポーネントのデフォルト値は、Halo テーマの場合は <codeph>mx.skins.halo.HaloBorder</codeph> になり、Spark テーマの場合は <codeph>mx.skins.spark.BorderSkin</codeph> になります。Panel コンテナには、Halo テーマのデフォルト値の <codeph>mx.skins.halo.PanelSkin</codeph> と Spark テーマのデフォルト値の <codeph>mx.skins.spark.BorderSkin</codeph> があります。コンポーネントのデフォルト値を確認するには、default.css ファイルを参照してください。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSides" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="String">
<description>
  境界ボックスの境界線のうち、どれが表示されるかを示します。表示する境界線をスペース区切りのストリングで指定します。 ストリングには、<codeph>"left"</codeph>、<codeph>"top"</codeph>、<codeph>"right"</codeph> および <codeph>"bottom"</codeph> を任意の順序で指定できます。 デフォルト値は <codeph>"left top right bottom"</codeph> です。この場合、4 辺すべてを表示します。 このスタイルは、borderStyle が <codeph>"solid"</codeph> の場合にのみ使用されます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  境界線の色です。 デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合、Halo テーマでは <codeph>0xB7BABC</codeph>、Spark テーマでは <codeph>0x696969</codeph> になります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="Number">
<description>
  境界線のアルファです。
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSize" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="String">
<description>
  <codeph>backgroundImage</codeph> で指定されているイメージを、元のサイズとは異なるサイズに拡大および縮小します。 <codeph>"100%"</codeph> に設定すると、コンポーネント全体に収まるサイズにイメージを伸縮します。 パーセント値で指定する場合は、パーセント記号（%）付きで指定する必要があります。 Application コンテナのデフォルトは <codeph>100%</codeph> です。 他のすべてのコンテナのデフォルト値は <codeph>auto</codeph> で、イメージの元のサイズが維持されます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="Object">
<description>
  コンポーネントの背景イメージです。 これには、絶対 URL、相対 URL、絶対クラス、または相対クラスを指定できます。 <codeph>backgroundColor</codeph> または <codeph>backgroundImage</codeph> のいずれかを設定できます。背景色の前面に背景イメージを表示します。 デフォルト値は <codeph>undefined</codeph> で、「未定義」であることを意味します。 このスタイルと <codeph>backgroundColor</codeph> スタイルの両方が undefined である場合、コンポーネントは透明な背景を持ちます。
 
  <p>ほとんどの Flex コントロールのデフォルトスキンは、部分的に透明です。 この結果、コンテナの背景イメージが、そのコンテナの中のコントロールに部分的ににじみ出るように表示されます。 コントロールの <codeph>fillAlphas</codeph> プロパティのアルファ値を 1 に設定することで、これを避けることができます。次に例を示します。
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="backgroundDisabledColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="uint">
<description>
  コンポーネントが無効になっている場合のコンポーネント背景色です。 グローバルデフォルト値は <codeph>undefined</codeph> です。 List コントロールのデフォルト値は、<codeph>0xDDDDDD</codeph>（明るい灰色）です。 コンテナが無効になっている場合は、背景がグレー表示されます。このグレー表示の度合いは、<codeph>disabledOverlayAlpha</codeph> スタイルで制御します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="barColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="uint">
<description>
  ProgressBar の色を特定します。ProgressBar は、この色とそれを基に計算されるより明るい色の垂直方向のグラデーションで塗りつぶされます。このスタイルは、他のコンポーネントに対して無効ですが、コンテナに対して設定することで、コンテナ内部にあるすべてのプログレスバーの外観を制御できます。 デフォルト値は <codeph>undefined</codeph> で、未定義であることを意味します。 この場合は、代わりに <codeph>themeColor</codeph> スタイルプロパティが使用されます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  Flex Framework containers inherit the following attributes from the Container
  class:</p>
 
  <pre>
  &lt;mx:<i>tagname</i>
    <strong>Properties</strong>
    autoLayout="true|false"
    clipContent="true|false"
    creationIndex="undefined"
    creationPolicy="auto|all|queued|none"
    defaultButton="<i>No default</i>"
    horizontalLineScrollSize="5"
    horizontalPageScrollSize="0"
    horizontalScrollBar="null"
    horizontalScrollPolicy="auto|on|off"
    horizontalScrollPosition="0"
    icon="undefined"
    label=""
    verticalLineScrollSize="5"
    verticalPageScrollSize="0"
    verticalScrollBar="null"
    verticalScrollPolicy="auto|on|off"
    verticalScrollPosition="0"
 
    <strong>Styles</strong>
    backgroundAlpha="1.0"
    backgroundAttachment="scroll"
    backgroundColor="undefined"
    backgroundDisabledColor="undefined"
    backgroundImage="undefined"
    backgroundSize="auto" 
    <i>    For the Application container only,</i> backgroundSize="100%"
    barColor="undefined"
    borderColor="0xAAB3B3"
    borderSides="left top right bottom"
    borderSkin="mx.skins.halo.HaloBorder"
    borderStyle="inset"
    borderThickness="1"
    color="0x0B333C"
    cornerRadius="0"
    disabledColor="0xAAB3B3"
    disbledOverlayAlpha="undefined"
    dropShadowColor="0x000000"
    dropShadowEnabled="false"
    fontAntiAliasType="advanced"
    fontfamily="Verdana"
    fontGridFitType="pixel"
    fontSharpness="0""
    fontSize="10"
    fontStyle="normal"
    fontThickness="0"
    fontWeight="normal"
    horizontalScrollBarStyleName="undefined"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    shadowDirection="center"
    shadowDistance="2"
    textAlign="left"
    textDecoration="none|underline"
    textIndent="0"
    verticalScrollBarStyleName="undefined"
 
    <strong>Events</strong>
    childAdd="<i>No default</i>"
    childIndexChange="<i>No default</i>"
    childRemove="<i>No default</i>"
    dataChange="<i>No default</i>"
    scroll="<i>No default</i>"
    &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/mx:<i>tagname</i>&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IContainer</apiBaseInterface><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerContainer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseInterface>mx.core:IRawChildrenContainer</apiBaseInterface><apiBaseInterface>mx.core:IChildList</apiBaseInterface><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseInterface>mx.core:INavigatorContent</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Container クラスは、コンポーネントの抽象基本クラスであり、子コンポーネントのレイアウト特性を制御します。 アプリケーションでは、Container のインスタンスを作成しません。代わりに、Container のいずれかのサブクラス（Canvas や HBox など）のインスタンスを作成します。
 
  <p>Container クラスには、スクロール、切り取り、およびダイナミックなインスタンス化のためのロジックが含まれています。また、子コンテナを追加および削除するためのメソッドが含まれています。 <codeph>getChildAt()</codeph> メソッド、およびコンテナの背景と境界線を描画するためのロジックも含まれています。</p>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:Container_mx.events.ScrollEvent.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
  ユーザーが手動でコンテナをスクロールしたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ScrollEvent.SCROLL</apiEventType><adobeApiEventClassifier>mx.events.ScrollEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーが手動でコンテナをスクロールしたときに送出されます。
 
  <p>このイベントは、マウス（スクロールバーの下向きボタンをクリックしたときなど）またはキーボード（下矢印キーを押したときなど）を使用してスクロール位置が変更されたときに送出されます。 ただし、このイベントは、スクロール位置がプログラムによって変更された場合は送出されません（<codeph>horizontalScrollPosition</codeph> プロパティ値を設定した場合など）。 <codeph>viewChanged</codeph> イベントは、手動によるかプログラムによるかを問わず、スクロール位置が変更されるたびに発行されます。</p>
 
  <p>このイベントが送出された時点では、スクロールバーは新しい位置に更新されていますが、コンテナの子オブジェクトは新しいスクロール位置を反映するようにシフトしていません。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Container_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  data プロパティが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>data</codeph> プロパティが変更されたときに送出されます。
 
  <p>コンテナが List または他のコンポーネントでレンダラーとして使用されている場合、表示するデータをコンテナに渡すために <codeph>data</codeph> プロパティが使用されます。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Container_mx.events.ChildExistenceChangedEvent.CHILD_REMOVE_childRemove"><apiName>childRemove</apiName><shortdesc>
  コンテナの子が削除される前に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ChildExistenceChangedEvent.CHILD_REMOVE</apiEventType><adobeApiEventClassifier>mx.events.ChildExistenceChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンテナの子が削除される前に送出されます。
 
  <p>このイベントは、<codeph>removeChild()</codeph>、<codeph>removeChildAt()</codeph> または <codeph>removeAllChildren()</codeph> メソッドが呼び出されたときに送出されます。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Container_mx.events.IndexChangedEvent.CHILD_INDEX_CHANGE_childIndexChange"><apiName>childIndexChange</apiName><shortdesc>
  コンテナのいずれかの子のインデックスが変更された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.IndexChangedEvent.CHILD_INDEX_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.IndexChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンテナのいずれかの子のインデックスが変更された後に送出されます。 このイベントは、<codeph>setChildIndex()</codeph> メソッドへの引数として指定された子についてのみ送出されます。<codeph>setChildIndex()</codeph> メソッドの呼び出しによる副次的な作用としてインデックスが変更されたそれ以外の子については送出されません。
 
  <p>子のインデックスは、<codeph>setChildIndex()</codeph> メソッドが呼び出されたときに変更されます。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Container_mx.events.ChildExistenceChangedEvent.CHILD_ADD_childAdd"><apiName>childAdd</apiName><shortdesc>
  コンテナに子が追加された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ChildExistenceChangedEvent.CHILD_ADD</apiEventType><adobeApiEventClassifier>mx.events.ChildExistenceChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンテナに子が追加された後に送出されます。
 
  <p>childAdd イベントは、<codeph>addChild()</codeph> または <codeph>addChildAt()</codeph> メソッドが呼び出されたときに送出されます。 コンテナが最初に作成されたとき、MXML ファイルで宣言されているそれぞれの子コンポーネントについて、<codeph>addChild()</codeph> メソッドが自動的に呼び出されます。 <codeph>addChildAt()</codeph> メソッドは、Repeater オブジェクトが子オブジェクトを追加または削除したときに自動的に呼び出されます。 アプリケーション開発者が、これらのメソッドを手動で呼び出して新しい子を追加することもできます。</p>
 
  <p>このイベントが送信された時点では、子オブジェクトは初期化されていますが、その幅と高さはまだ計算されておらず、子は画面に描画されていません。 子が完全に初期化されてレンダリングされたときに通知を受けるには、子の <codeph>creationComplete</codeph> イベントのリスナーとして登録します。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:Container:Container"><apiName>Container</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:Container:addChildAt"><apiName>addChildAt</apiName><shortdesc>
      このコンテナに子 DisplayObject を追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject 型のオブジェクトとして追加された子です。通常は戻り値を UIComponent、または追加されるコンポーネントの型にキャストします。
     
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>このコンテナの子として追加する DisplayObject です。IUIComponent インターフェイスを実装する必要があります。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>子を追加するインデックス位置です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコンテナに子 DisplayObject を追加します。子は、指定されたインデックス位置に追加されます。
     
      <p><b>メモ：</b>メソッドに対する <codeph>child</codeph> パラメーターは DisplayObject 型として指定されますが、このパラメーターがコンテナの子として追加されるためには、IUIComponent インターフェイスを実装する必要があります。 Flex コンポーネントはすべてこのインターフェイスを実装しています。</p>
     
      <p>子は、背面から前面に重ねられます。つまり、子が重なった場合、インデックス 0 の子が最も奥に、インデックス <codeph>numChildren - 1</codeph> の子が最前面に置かれます。このように、新しく追加される子は既存の子の上に重ねられます。</p>
     
      <p>他の子によってすでに占有されているインデックスに新しい子を追加する場合、古い子は置き換えられません。古い子とそれ以降のすべての子がスライドし、それぞれのインデックスが 1 ずつ増やされます。例えば、コンテナに子 (A, B, C) があり、D をインデックス 1 に追加するとします。この場合、コンテナの中は (A, D, B, C) になります。古い子を置き換えたい場合は、その子を削除した後に新しい子を追加する必要があります。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.IUIComponent.xml"><linktext>mx.core.IUIComponent</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:addChild"><apiName>addChild</apiName><shortdesc>
      このコンテナに子 DisplayObject を追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject 型のオブジェクトとして追加された子です。通常は戻り値を UIComponent、または追加されるコンポーネントの型にキャストします。
     
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>このコンテナの子として追加する DisplayObject です。IUIComponent インターフェイスを実装する必要があります。
     
      </apiDesc></apiParam><apiTipTexts><apiTipText>このコンテナに子オブジェクトを追加します。
      
      </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
      このコンテナに子 DisplayObject を追加します。子は、他の既存の子の後に追加されるため、追加される最初の子のインデックスは 0、次の子のインデックスは 1 になります。
     
      <p><b>メモ：</b>メソッドに対する <codeph>child</codeph> パラメーターは DisplayObject 型として指定されますが、このパラメーターがコンテナの子として追加されるためには、IUIComponent インターフェイスを実装する必要があります。 Flex コンポーネントはすべてこのインターフェイスを実装しています。</p>
     
      <p>子は、背面から前面に重ねられます。つまり、子が重なった場合、インデックス 0 の子が最も奥に、インデックス <codeph>numChildren - 1</codeph> の子が最前面に置かれます。このように、新しく追加される子は既存の子の上に重ねられます。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.IUIComponent.xml"><linktext>mx.core.IUIComponent</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:addElement"><apiName>addElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:protected:attachOverlay"><apiName>attachOverlay</apiName><shortdesc>
      Dissolve エフェクトでコンテナのクロムにオーバーレイを追加するときに内部的に使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Dissolve エフェクトでコンテナのクロムにオーバーレイを追加するときに内部的に使用されます。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:contentToGlobal"><apiName>contentToGlobal</apiName><shortdesc conref="mx.core.UIComponent#contentToGlobal()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#contentToGlobal()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:contentToLocal"><apiName>contentToLocal</apiName><shortdesc conref="mx.core.UIComponent#contentToLocal()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#contentToLocal()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:protected:createBorder"><apiName>createBorder</apiName><shortdesc>
      コンテナの境界線のスキンが存在しない場合、必要に応じてスキンを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      コンテナの境界線のスキンが存在しない場合、必要に応じてスキンを作成します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:createComponentFromDescriptor"><apiName>createComponentFromDescriptor</apiName><shortdesc>
      単一の UIComponentDescriptor を指定すると、対応するコンポーネントが作成され、このコンテナの子としてコンポーネントが追加されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>作成されたコンポーネントです。
     
      </apiDesc><apiType value="mx.core:IFlexDisplayObject"/></apiReturn><apiParam><apiItemName>descriptor</apiItemName><apiType value="mx.core:ComponentDescriptor"/><apiDesc>作成されるコンポーネントの UIComponentDescriptor です。この引数は、UIComponentDescriptor オブジェクトか、コンテナの子のインデックスである 0 ～ n-1 の整数（n はこのコンテナの子の総数）です。
     
      </apiDesc></apiParam><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc><codeph>false</codeph> の場合、このコンポーネントは作成されますが、子は作成されません。 <codeph>true</codeph> の場合、Flex はコンポーネントを作成した後、<codeph>createComponentsFromDescriptors()</codeph> メソッドを呼び出し、コンポーネントの <codeph>creationPolicy</codeph> プロパティ値に基づいて、すべての子または一部の子を作成します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      単一の UIComponentDescriptor を指定すると、対応するコンポーネントが作成され、このコンテナの子としてコンポーネントが追加されます。
      
      <p>このメソッドにより、新しいオブジェクトがインスタンス化されますが、表示リストには追加されないため、デフォルトではそのオブジェクトは画面に表示されません。新しいオブジェクトを表示リストに追加するには、次の例のように、コンテナの <codeph>validateNow()</codeph> メソッドの呼び出しを、<codeph>createComponentFromDescriptor()</codeph> メソッドの呼び出しの後に行います。
      <pre>
      myVBox.createComponentFromDescriptor(myVBox.childDescriptors[0],false);
      myVBox.validateNow();
      </pre>
      </p>
      
      <p>別の方法として、そのコンテナで <codeph>createComponentsFromDescriptors()</codeph> メソッドを呼び出してすべてのコンポーネントを一度に作成することもできます。この場合は、<codeph>validateNow()</codeph> メソッドの呼び出しを、<codeph>createComponentsFromDescriptors()</codeph> メソッドの呼び出しの後に行う必要はありません。</p>
      
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.UIComponentDescriptor.xml"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:createComponentsFromDescriptors"><apiName>createComponentsFromDescriptors</apiName><shortdesc>
      childDescriptors の配列を繰り返し処理し、配列の各要素に対して createComponentFromDescriptor() メソッドを呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc><codeph>true</codeph> の場合、再帰的にコンポーネントを作成します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>childDescriptors</codeph> の配列を繰り返し処理し、配列の各要素に対して <codeph>createComponentFromDescriptor()</codeph> メソッドを呼び出します。
      
      <p>コンテナの <codeph>creationPolicy</codeph> プロパティの値が <codeph>ContainerCreationPolicy.ALL</codeph> の場合、このメソッドは初期化シーケンスの間に自動的に呼び出されます。</p>
      
      <p>コンテナの <codeph>creationPolicy</codeph> の値が <codeph>ContainerCreationPolicy.AUTO</codeph> の場合、このメソッドは、コンテナの子が表示されるときに自動的に呼び出されます。</p>
      
      <p>コンテナの <codeph>creationPolicy</codeph> プロパティの値が <codeph>ContainerCreationPolicy.NONE</codeph> の場合、このコンテナの子を作成するときにこの関数を呼び出す必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:createDeferredContent"><apiName>createDeferredContent</apiName><shortdesc>
      遅延インスタンス化をサポートする IDeferredContentOwner インターフェイスが実装されたコンテナに対し、createComponentsFromDescriptors(true) メソッドを呼び出すのと同等のアクションを実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      遅延インスタンス化をサポートする IDeferredContentOwner インターフェイスが実装されたコンテナに対し、<codeph>createComponentsFromDescriptors(true)</codeph> メソッドを呼び出すのと同等のアクションを実行します。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#Container/createComponentsFromDescriptors()"><linktext>createComponentsFromDescriptors()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:executeBindings"><apiName>executeBindings</apiName><shortdesc>
      このコンテナのすべてのデータバインディングを実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>false</codeph> の場合は、このコンテナのバインディングのみ実行されます。<codeph>true</codeph> の場合は、このコンテナの子、孫、ひ孫などについてもバイディングが実行されます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコンテナのすべてのデータバインディングを実行します。Flex は、Container が作成されたらこのメソッドを自動的に呼び出し、その中にバインド先のあるデータバインディングをすべて実行します。MXML コンテナとバインディングの問題（177074）を回避するには、BindingManager.executeBindings() の呼び出しで、parentDocument ではなく descriptor.document を優先するように、Container.executeBindings() をオーバーライドします。こうすると、記述子によって作成されたインスタンスは常に正常に動作し、手続き上作成されたインスタンスも元の動作になるはずです。 ただし、後者の場合は、バグが発生することがあります。 アップデーター 1 では、非 DI およびリペアレントコンポーネントのシナリオでの正常な動作を保証する、より完成度の高い解決策の提供を予定しています。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:executeChildBindings"><apiName>executeChildBindings</apiName><shortdesc>
      この Container の子 UIComponent オブジェクトへのバインディングを実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc><codeph>false</codeph> の場合、この Container の直下の子についてのみバインディングが実行されます。 <codeph>true</codeph> の場合は、このコンテナの孫、ひ孫などについてもバイディングが実行されます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      この Container の子 UIComponent オブジェクトへのバインディングを実行します。 このメソッドは、Container が作成されたときに自動的に呼び出されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:getChildAt"><apiName>getChildAt</apiName><shortdesc>
      n 番目の子コンポーネントオブジェクトを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject 型のオブジェクトとしての子への参照です。通常は戻り値を UIComponent、または ComboBox や TextArea などの特定の Flex コントロールの型にキャストします。
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>0 ～ (numChildren - 1) までの数値です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <i>n</i> 番目の子コンポーネントオブジェクトを取得します。
     
      <p>このメソッドから返される子には、MXML で宣言された子、および <codeph>addChild()</codeph> または <codeph>addChildAt()</codeph> メソッドを使用して追加された子が含まれます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:getChildByName"><apiName>getChildByName</apiName><shortdesc>
      指定したストリングの name プロパティを持つ子を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject 型のオブジェクトとして子を表す DisplayObject です。通常は戻り値を UIComponent、または ComboBox や TextArea などの特定の Flex コントロールの型にキャストします。指定した名前の子が存在しない場合は、ランタイムエラーがスローされます。
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>子の識別子です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定したストリングの <codeph>name</codeph> プロパティを持つ子を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:getChildIndex"><apiName>getChildIndex</apiName><shortdesc>
      特定の子の 0 から始まるインデックスを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>0 ～ (numChildren - 1) の間の数値です。
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>インデックスを取得する子への参照です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      特定の子の 0 から始まるインデックスを取得します。
     
      <p>コンテナの最初の子（つまり、MXML 宣言で最初に現れる子タグ）のインデックスは 0、2 番目の子のインデックスは 1 になり、以降も同様に続きます。コンテナの子のインデックスにより、レイアウトされる順番が決まります。例えば、VBox ではインデックス 0 の子が一番上に、インデックス 1 の子がその下にレイアウトされます。</p>
     
      <p><codeph>addChild()</codeph> メソッドを呼び出すことによって子を追加すると、新しい子のインデックスは、既存の子の中で最大のインデックスに 1 を足した値に等しくなります。 <codeph>addChildAt()</codeph> メソッドを使用して、指定したインデックス位置に子を挿入できます。その場合、そのインデックス以降の位置にあった子はインデックスが 1 ずつ増やされ、すべてのインデックスが 0 ～ <codeph>(numChildren - 1)</codeph> の範囲に収まります。</p>
     
      <p><codeph>removeChild()</codeph> または <codeph>removeChildAt()</codeph> メソッドを呼び出して子を削除すると、残りの子のインデックスが 0 ～ <codeph>(numChildren - 1)</codeph> までになるように調整されます。</p>
     
      <p><codeph>myView.getChildIndex(myChild)</codeph> が 5 を返した場合、<codeph>myView.getChildAt(5)</codeph> は myChild を返します。</p>
     
      <p>子のインデックスは、<codeph>setChildIndex()</codeph> メソッドを呼び出すことによって変更できます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:getChildren"><apiName>getChildren</apiName><shortdesc>
      コンテナのコンテンツである子で構成された DisplayObject オブジェクトの配列を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>コンテナのコンテンツである子で構成された DisplayObject オブジェクトの配列です。
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      コンテナのコンテンツである子で構成された DisplayObject オブジェクトの配列を返します。この配列には、コンテナの境界線や背景イメージなど、コンテナの表示エレメントを実装する DisplayObject は<b>含まれません</b>。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#Container/rawChildren"><linktext>rawChildren</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:globalToContent"><apiName>globalToContent</apiName><shortdesc conref="mx.core.UIComponent#globalToContent()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#globalToContent()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:protected:layoutChrome"><apiName>layoutChrome</apiName><shortdesc>
      サイズ変更に応答して、このコンテナの境界線の位置およびサイズを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位によりコンポーネントの幅を指定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      サイズ変更に応答して、このコンテナの境界線の位置およびサイズを設定します。これは、Container のサブクラスを作成するときにオーバーライド可能な高度なメソッドです。
     
      <p>Flex が <codeph>layoutChrome()</codeph> メソッドを呼び出すのは、<codeph>addChild()</codeph> メソッドでコンテナが親コンテナに追加されたとき、およびコンテナの <codeph>invalidateDisplayList()</codeph> メソッドが呼び出されたときです。</p>
     
      <p><codeph>Container.layoutChrome()</codeph> メソッドは <codeph>autoLayout</codeph> プロパティの値に関係なく呼び出されます。</p>
     
      <p><codeph>Container.layoutChrome()</codeph> メソッドは、Container コンテナの境界線の位置とサイズを設定します。Container のすべてのサブクラスでは、境界線の位置を適切に設定するために、サブクラスの <codeph>layoutChrome()</codeph> メソッドで <codeph>super.layoutChrome()</codeph> メソッドを呼び出す必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:localToContent"><apiName>localToContent</apiName><shortdesc conref="mx.core.UIComponent#localToContent()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#localToContent()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeAllChildren"><apiName>removeAllChildren</apiName><shortdesc>
      このコンテナの子リストからすべての子を削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このコンテナの子リストからすべての子を削除します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:removeChildAt"><apiName>removeChildAt</apiName><shortdesc>
      このコンテナの子リストから、指定されたインデックス位置にある子 DisplayObject を削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject 型のオブジェクトとして削除された子です。通常は戻り値を UIComponent、または削除されるコンポーネントの型にキャストします。
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>削除する DisplayObject の子インデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコンテナの子リストから、指定されたインデックス位置にある子 DisplayObject を削除します。削除された子の <codeph>parent</codeph> プロパティは null に設定されます。削除された子は、明示的に破棄されない限り存在し続けます。その子を別のコンテナに追加した場合、その最後の状態が保持されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeChild"><apiName>removeChild</apiName><shortdesc>
      このコンテナの子リストから子 DisplayObject を削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject 型のオブジェクトとして削除された子です。通常は戻り値を UIComponent、または削除されるコンポーネントの型にキャストします。
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>削除する DisplayObject です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコンテナの子リストから子 DisplayObject を削除します。削除された子の <codeph>parent</codeph> プロパティは null に設定されます。削除された子は、明示的に破棄されない限り存在し続けます。その子を別のコンテナに追加した場合、その最後の状態が保持されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:removeElement"><apiName>removeElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:protected:scrollChildren"><apiName>scrollChildren</apiName><shortdesc>
      horizontalScrollPosition プロパティと verticalScrollPosition プロパティの値に基づいて、表示可能領域を基準とするコンテナのコンテンツ領域の相対的な位置を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      horizontalScrollPosition プロパティと verticalScrollPosition プロパティの値に基づいて、表示可能領域を基準とするコンテナのコンテンツ領域の相対的な位置を設定します。表示可能領域に表示されないコンテンツは切り詰められます。このメソッドは、スクロール可能なクロムをコンテンツ領域内に持つサブクラスでオーバーライドしてください。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:setChildIndex"><apiName>setChildIndex</apiName><shortdesc>
      特定の子のインデックスを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>インデックスを設定する子への参照です。
     
      </apiDesc></apiParam><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiDesc>新規インデックスを示す数値です。0 ～ (numChildren - 1) の整数であることが必要です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      特定の子のインデックスを設定します。子のインデックスの詳細については、<codeph>getChildIndex()</codeph> メソッドを参照してください。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:swapElements"><apiName>swapElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.core:Container:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      サイズ変更に反応して、このコンテナの子の位置およびサイズを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位によりコンポーネントの幅を指定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      サイズ変更に反応して、このコンテナの子の位置およびサイズを設定します。
     
      <p><codeph>UIComponent.updateDisplayList()</codeph> メソッドを参照して、<codeph>updateDisplayList()</codeph> メソッドの詳細を確認してください。</p>
     
      <p><codeph>Container.updateDisplayList()</codeph> メソッドは、Container コンテナの境界線の位置とサイズを設定します。境界線の位置が適切に決定されるためには、Container のすべてのサブクラスで、そのサブクラスの <codeph>updateDisplayList()</codeph> メソッドが <codeph>super.updateDisplayList()</codeph> メソッドを呼び出す必要があります。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.UIComponent.xml"><linktext>mx.core.UIComponent</linktext></link></related-links></apiOperation><apiValue id="mx.core:Container:protected:actualCreationPolicy"><apiName>actualCreationPolicy</apiName><shortdesc>
      このコンテナの作成ポリシーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      このコンテナの作成ポリシーです。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:autoLayout:get"><apiName>autoLayout</apiName><shortdesc>
      true の場合、子の位置またはサイズが変更されたときに測定とレイアウトが実行されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、子の位置またはサイズが変更されたときに測定とレイアウトが実行されます。 <codeph>false</codeph> の場合、測定とレイアウトは、子がコンテナに追加されたとき、またはコンテナから削除されたときに、一度だけ実行されます。
     
      <p>Move エフェクトを使用する場合、移動するコンポーネントの周囲のレイアウトは、Move エフェクトがアニメーション化するものに収まるように再調整されません。 コンテナの <codeph>autoLayout</codeph> プロパティを <codeph>true</codeph> に設定しても、この動作には影響しません。</p>
     
      <p><codeph>autoLayout</codeph> プロパティが <codeph>false</codeph> の場合、Zoom エフェクトは有効になりません。</p>
     
      <p><codeph>autoLayout</codeph> プロパティは、Accordion または ViewStack コンテナには適用されません。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      left、top、right、bottom の 4 つのプロパティを持つ EdgeMetrics オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
      <codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph> および <codeph>bottom</codeph> の 4 つのプロパティを持つ EdgeMetrics オブジェクトを返します。 各プロパティの値は、境界線の 1 辺の太さをピクセル単位で表したものです。
     
      <p><codeph>viewMetrics</codeph> とは異なり、このプロパティは Container のサブクラスによってオーバーライドされません。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:childDescriptors:get"><apiName>childDescriptors</apiName><shortdesc>
      MXML コンパイラーによって生成される UIComponentDescriptor オブジェクトの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      MXML コンパイラーによって生成される UIComponentDescriptor オブジェクトの配列です。
     
      <p>各 UIComponentDescriptor オブジェクトには、コンテナの MXML タグの、子 MXML タグの 1 つで指定される情報が含まれます。配列内での UIComponentDescriptor オブジェクトの順序は、子タグの順序と同一です。初期化時には、子の記述子を使用して、コンテナの子 UIComponent オブジェクトとその Repeater オブジェクトが作成され、これらに MXML で指定された初期プロパティ値やイベントハンドラー、エフェクトなどが設定されます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.UIComponentDescriptor.xml"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiValue><apiValue id="mx.core:Container:clipContent:get"><apiName>clipContent</apiName><shortdesc>
      このコンテナの子の位置やサイズが、このコンテナの境界線を超えるように変更された場合に、クリップマスクを適用するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコンテナの子の位置やサイズが、このコンテナの境界線を超えるように変更された場合に、クリップマスクを適用するかどうかを指定します。 <codeph>false</codeph> の場合、このコンテナの子は、移動やサイズ変更によってこのコンテナの外部に出た場合も、表示されたままになります。 <codeph>true</codeph> の場合、このコンテナの子は切り詰められます。
     
      <p><codeph>clipContent</codeph> が <codeph>false</codeph> の場合、このコンテナのスクロールが無効になり、スクロールバーが表示されません。 <codeph>clipContent</codeph> が true の場合、コンテナの子がコンテナの外部に拡張されると、通常はスクロールバーが表示されます。 スクロールバーの表示の制御については、<codeph>horizontalScrollPolicy</codeph> および <codeph>verticalScrollPolicy</codeph> を参照してください。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:contentMouseX:get"><apiName>contentMouseX</apiName><shortdesc conref="mx.core.UIComponent#contentMouseX">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#contentMouseX">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:contentMouseY:get"><apiName>contentMouseY</apiName><shortdesc conref="mx.core.UIComponent#contentMouseY">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#contentMouseY">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:creatingContentPane:get"><apiName>creatingContentPane</apiName><shortdesc>
      コンテナは、内部コンテンツペインを使用してスクロールを制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      コンテナは、内部コンテンツペインを使用してスクロールを制御します。 コンテナでコンテンツペインを作成している間は <codeph>creatingContentPane</codeph> が <codeph>true</codeph> になるため、いくつかのイベントを無視またはブロックできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:creationIndex:get"><apiName>creationIndex</apiName><shortdesc>
      コンテナの子をインスタンス化して描画する順序を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue><apiDeprecated><apiDesc>非推奨</apiDesc></apiDeprecated></apiValueDef><apiDesc>
      コンテナの子をインスタンス化して描画する順序を指定します。
     
      <p>このプロパティは、<codeph>creationPolicy</codeph> プロパティが <codeph>ContainerCreationPolicy.QUEUED</codeph> に設定されている場合にのみ有効です。 それ以外の場合は無視されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:creationPolicy:get"><apiName>creationPolicy</apiName><shortdesc>
      この MX コンテナの子作成ポリシーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ContainerCreationPolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      この MX コンテナの子作成ポリシーです。有効な ActionScript 値は、<codeph>ContainerCreationPolicy.AUTO</codeph>、<codeph>ContainerCreationPolicy.ALL</codeph> または <codeph>ContainerCreationPolicy.NONE</codeph> です。有効な MXML 値は、<codeph>auto</codeph>、<codeph>all</codeph> または <codeph>none</codeph> です。
     
      <p>コンテナに <codeph>creationPolicy</codeph> が指定されていない場合、そのコンテナは親の <codeph>creationPolicy</codeph> を継承します。 Application に <codeph>creationPolicy</codeph> が指定されていない場合、デフォルトは <codeph>ContainerCreationPolicy.AUTO</codeph> になります。</p>
     
      <p><codeph>creationPolicy</codeph> が <codeph>ContainerCreationPolicy.AUTO</codeph> の場合、必要になるまでコンテナの一部またはすべての下位要素の作成が遅延されます（<i>遅延インスタンス化</i>）。 このポリシーを使用した場合、最初に作成される UIComponent が少なくなるため、起動時間が最短になります。 ただし、ユーザーがアプリケーションの別の部分に初めて移動するとき、ナビゲーションの遅延が生じます。 Accordion、TabNavigator、ViewStack などのナビゲーターコンテナは、すべての子を直ちに作成することによって <codeph>ContainerCreationPolicy.AUTO</codeph> ポリシーを実装しますが、ある子がそのナビゲーターコンテナの選択された子になるまでは、その子の下位要素を作成しません。</p>
     
      <p><codeph>creationPolicy</codeph> が <codeph>ContainerCreationPolicy.ALL</codeph> である場合、ナビゲーターコンテナは、子が選択されるまで待たずに各子の下位要素を直ちに作成します。 VBox コンテナなどの単一ビューコンテナについては、<codeph>ContainerCreationPolicy.AUTO</codeph> ポリシーと <codeph>ContainerCreationPolicy.ALL</codeph> ポリシーに違いはありません。</p>
     
      <p><codeph>creationPolicy</codeph> が <codeph>ContainerCreationPolicy.NONE</codeph> である場合、コンテナは子を作成しません。 この場合は、MXML 作成者が、<codeph>createComponentsFromDescriptors()</codeph> メソッドを呼び出すことによって子を作成します。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:data:get"><apiName>data</apiName><shortdesc>
      アイテムレンダラーまたはアイテムエディターで data プロパティを使用すると、コンポーネントに値を渡すことができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      アイテムレンダラーまたはアイテムエディターで <codeph>data</codeph> プロパティを使用すると、コンポーネントに値を渡すことができます。 通常、データバインディングを使用して、<codeph>data</codeph> プロパティのフィールドをこのコンポーネントのプロパティにバインドします。
     
      <p>MXML でこのプロパティを設定することはありません。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.core:Container:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      コンテナのデフォルトボタンとして指定された Button コントロールです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexDisplayObject"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      コンテナのデフォルトボタンとして指定された Button コントロールです。 コンテナ内のコントロールにフォーカスがあるときは、Enter キーを押すことと、この Button コントロールをクリックすることが同義です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:deferredContentCreated:get"><apiName>deferredContentCreated</apiName><shortdesc>
      processedDescriptors に相当する IDeferredContentOwner のプロパティ
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      processedDescriptors に相当する IDeferredContentOwner のプロパティ
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.xml#UIComponent/processedDescriptors"><linktext>UIComponent.processedDescriptors</linktext></link></related-links></apiValue><apiValue id="mx.core:Container:horizontalLineScrollSize:get"><apiName>horizontalLineScrollSize</apiName><shortdesc>
      水平スクロールバーの左矢印ボタンまたは右矢印ボタンがクリックされたときに移動するピクセル数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="horizontalLineScrollSizeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>5
      
      </apiDefaultValue></apiValueDef><apiDesc>
      水平スクロールバーの左矢印ボタンまたは右矢印ボタンがクリックされたときに移動するピクセル数です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:horizontalPageScrollSize:get"><apiName>horizontalPageScrollSize</apiName><shortdesc>
      水平スクロールバーのトラックがクリックされたときに移動するピクセル数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="horizontalPageScrollSizeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      水平スクロールバーのトラックがクリックされたときに移動するピクセル数です。 値が 0 の場合は、全画面表示にするためのページサイズが計算されることを意味します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:horizontalScrollBar:get"><apiName>horizontalScrollBar</apiName><shortdesc>
      このコンテナで使用する水平スクロールバーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.scrollClasses:ScrollBar</apiValueClassifier></apiValueDef><apiDesc>
      このコンテナで使用する水平スクロールバーです。現在表示されている水平スクロールバーがない場合、このプロパティは null です。一般に、このプロパティに直接アクセスすることはありません。 <codeph>horizontalScrollPolicy</codeph> および <codeph>horizontalScrollPosition</codeph> プロパティを操作することで、このスクロールバーを適切に制御できます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc>
      水平スクロールバーが常に表示されるか、常に非表示か、または必要に応じて自動的に追加されるかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="horizontalScrollPolicyChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      水平スクロールバーが常に表示されるか、常に非表示か、または必要に応じて自動的に追加されるかを指定します。 有効な ActionScript 値は、<codeph>ScrollPolicy.ON</codeph>、<codeph>ScrollPolicy.OFF</codeph> および <codeph>ScrollPolicy.AUTO</codeph> です。 有効な MXML 値は、<codeph>"on"</codeph>、<codeph>"off"</codeph> および <codeph>"auto"</codeph> です。
     
      <p>このプロパティを <codeph>ScrollPolicy.OFF</codeph> に設定した場合も、<codeph>horizontalScrollPosition</codeph> プロパティが無効になります。</p>
     
      <p>メモ：このプロパティは ControlBar コンテナには適用されません。</p>
     
      <p><codeph>horizontalScrollPolicy</codeph> が <codeph>ScrollPolicy.AUTO</codeph> の場合、水平スクロールバーは、次のすべての条件が満たされるときに表示されます。</p>
      <ul>
        <li>コンテナの子の 1 つが、コンテナの左端または右端の外にはみ出している。</li>
        <li><codeph>clipContent</codeph> プロパティが <codeph>true</codeph> である。</li>
        <li>コンテナには、スクロールバーを表示するのに十分な幅および高さがある。</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
      水平スクロールバーの現在の位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="viewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      水平スクロールバーの現在の位置です。 これは、スクロールバーサーフェスの左端から、現在表示されているサーフェスの左端部分までの距離（ピクセル単位）と同じです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:icon:get"><apiName>icon</apiName><shortdesc>
      このコンテナを表すために、一部のナビゲーターコンテナによって表示されるアイコンのクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="iconChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコンテナを表すために、一部のナビゲーターコンテナによって表示されるアイコンのクラスです。
     
      <p>例えば、この Container が TabNavigator の子である場合、対応するタブにこのアイコンが表示されます。この Container が Accordion の子である場合、対応するヘッダーにこのアイコンが表示されます。</p>
     
      <p>SWF ファイルにアイコンを埋め込むには、次の @Embed() MXML コンパイラーディレクティブを使用します。</p>
     
      <pre>
        icon="@Embed('filepath')"
      </pre>
     
      <p>イメージには JPEG、GIF、PNG、SVG、または SWF ファイルを使用できます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:label:get"><apiName>label</apiName><shortdesc>
      このコンテナを表すために、一部のナビゲーターコンテナによって表示されるテキストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコンテナを表すために、一部のナビゲーターコンテナによって表示されるテキストです。
     
      <p>例えば、この Container が TabNavigator の子である場合、対応するタブにこのストリングが表示されます。この Container が Accordion の子である場合、対応するヘッダーにこのストリングが表示されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:maxHorizontalScrollPosition:get"><apiName>maxHorizontalScrollPosition</apiName><shortdesc>
      horizontalScrollPosition プロパティの有効な最大値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      <codeph>horizontalScrollPosition</codeph> プロパティの有効な最大値です。 水平スクロールバーが存在しない場合、デフォルトは 0 です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:maxVerticalScrollPosition:get"><apiName>maxVerticalScrollPosition</apiName><shortdesc>
      verticalScrollPosition プロパティの有効な最大値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      <codeph>verticalScrollPosition</codeph> プロパティの有効な最大値です。 垂直スクロールバーが存在しない場合、デフォルトは 0 です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:numChildren:get"><apiName>numChildren</apiName><shortdesc>
      このコンテナの子コンポーネントの数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      このコンテナの子コンポーネントの数です。
     
      <p>子の数は、最初は MXML で宣言された子の数に等しくなります。 実行時には、<codeph>addChild()</codeph> または <codeph>addChildAt()</codeph> の呼び出しによって新しい子が追加されたり、<codeph>removeChild()</codeph>、<codeph>removeChildAt()</codeph> または <codeph>removeAllChildren()</codeph> の呼び出しによって既存の子が削除される可能性があります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:numElements:get"><apiName>numElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:Container:rawChildren:get"><apiName>rawChildren</apiName><shortdesc>
      通常、コンテナには、Container.getChildAt() メソッドおよび Container.numChildren プロパティを使用して列挙できる子コンポーネントが含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:IChildList"/></apiValueDef><apiDesc>
      通常、コンテナには、<codeph>Container.getChildAt()</codeph> メソッドおよび <codeph>Container.numChildren</codeph> プロパティを使用して列挙できる子コンポーネントが含まれます。 さらに、コンテナには、境界線や背景などのスタイルエレメントおよびスキンが入ることがあります。 Flash Player と AIR では、描画される子コンポーネントとスキンに違いはありません。 子コンポーネントとスキンはすべて、Player の <codeph>getChildAt()</codeph> メソッドおよび <codeph>numChildren</codeph> プロパティを使用してアクセスできます。 ただし、Container クラスは <codeph>getChildAt()</codeph> メソッドおよび <codeph>numChildren</codeph> プロパティ（およびその他のいくつかのメソッド）をオーバーライドして、コンテナの子が唯一の子コンポーネントと見なされるような効果を作成します。
     
      <p>コンテナのすべての子（コンテンツである子とスキンの両方）にアクセスする必要がある場合は、通常の Container のメソッドの代わりに、<codeph>rawChildren</codeph> プロパティのメソッドとプロパティを使用します。 例えば、<codeph>Container.rawChildren.getChildAt())</codeph> メソッドを使用します。 ただし、コンテナが子の ContentPane Sprite オブジェクトを作成する場合、<codeph>rawChildren</codeph> プロパティ値は ContentPane だけをカウントし、コンテナの子はカウントしません。 コンテナがいつ ContentPane を持つのかを判断することが常に可能であるとは限りません。</p>
     
      <p><b>メモ：</b> <codeph>addChild</codeph> メソッドまたは <codeph>addChildAt</codeph> メソッドを <codeph>rawChildren</codeph> オブジェクトに対して呼び出す場合は、追加したコンポーネントで <codeph>tabFocusEnabled = false</codeph> を設定してください。 そうすると、ユーザーは追加された表示専用コンポーネントをタブで選択できなくなります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalLineScrollSize:get"><apiName>verticalLineScrollSize</apiName><shortdesc>
      垂直スクロールバーの上矢印ボタンまたは下矢印ボタンがクリックされるか、マウスホイールが使用されたときにスクロールするピクセル数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="verticalLineScrollSizeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>5
      
      </apiDefaultValue></apiValueDef><apiDesc>
      垂直スクロールバーの上矢印ボタンまたは下矢印ボタンがクリックされるか、マウスホイールが使用されたときにスクロールするピクセル数です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalPageScrollSize:get"><apiName>verticalPageScrollSize</apiName><shortdesc>
      垂直スクロールバーのトラックがクリックされたときにスクロールするピクセル数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="verticalPageScrollSizeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      垂直スクロールバーのトラックがクリックされたときにスクロールするピクセル数です。 値が 0 の場合は、全画面表示にするためのページサイズが計算されることを意味します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalScrollBar:get"><apiName>verticalScrollBar</apiName><shortdesc>
      このコンテナで使用する垂直スクロールバーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.scrollClasses:ScrollBar</apiValueClassifier></apiValueDef><apiDesc>
      このコンテナで使用する垂直スクロールバーです。現在表示されている垂直スクロールバーがない場合、このプロパティは null です。一般に、このプロパティに直接アクセスすることはありません。 <codeph>verticalScrollPolicy</codeph> および <codeph>verticalScrollPosition</codeph> プロパティを操作することで、このスクロールバーを適切に制御できます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc>
      垂直スクロールバーが常に表示されるか、常に非表示か、または必要に応じて自動的に追加されるかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="verticalScrollPolicyChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      垂直スクロールバーが常に表示されるか、常に非表示か、または必要に応じて自動的に追加されるかを指定します。 有効な値は <codeph>ScrollPolicy.ON</codeph>、<codeph>ScrollPolicy.OFF</codeph> および <codeph>ScrollPolicy.AUTO</codeph> です。 有効な MXML 値は、<codeph>"on"</codeph>、<codeph>"off"</codeph> および <codeph>"auto"</codeph> です。
     
      <p>このプロパティを <codeph>ScrollPolicy.OFF</codeph> に設定すると、<codeph>verticalScrollPosition</codeph> プロパティが無効になります。</p>
     
      <p>メモ：このプロパティは ControlBar コンテナには適用されません。</p>
     
      <p><codeph>verticalScrollPolicy</codeph> が <codeph>ScrollPolicy.AUTO</codeph> の場合、垂直スクロールバーは、次のすべての条件が満たされるときに表示されます。</p>
      <ul>
        <li>コンテナの子の 1 つが、コンテナの上端または下端の外にはみ出している。</li>
        <li><codeph>clipContent</codeph> プロパティが <codeph>true</codeph> である。</li>
        <li>コンテナには、スクロールバーを表示するのに十分な幅および高さがある。</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc>
      垂直スクロールバーの現在の位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="viewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      垂直スクロールバーの現在の位置です。 これは、スクロールバーサーフェスの上端から、現在表示されているサーフェスの上端部分までの距離（ピクセル単位）と同じです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:viewMetricsAndPadding:get"><apiName>viewMetricsAndPadding</apiName><shortdesc>
      left、top、right および bottom の 4 つのプロパティを持つオブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
      <codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph> および <codeph>bottom</codeph> の 4 つのプロパティを持つオブジェクトを返します。 各プロパティの値は、コンテナの端の周囲にあるクロム（ビジュアルエレメント）の幅にオブジェクトの余白の幅を加えた値と等しくなります。
     
      <p>クロムには境界線の幅が含まれます。 <codeph>horizontalScrollPolicy</codeph> または <codeph>verticalScrollPolicy</codeph> プロパティ値が <codeph>ScrollPolicy.ON</codeph> の場合、クロムには対応するスクロールバーの幅も含まれます。 スクロールポリシーが <codeph>ScrollPolicy.AUTO</codeph> の場合は、スクロールバーが表示されていても、クロムの測定にスクロールバーの幅は含まれません。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:viewMetrics:get"><apiName>viewMetrics</apiName><shortdesc>
      left、top、right および bottom の 4 つのプロパティを持つオブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
      <codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph> および <codeph>bottom</codeph> の 4 つのプロパティを持つオブジェクトを返します。 各プロパティの値は、コンテナの端の周囲にあるクロム（ビジュアルエレメント）の幅と等しくなります。 
     
      <p>クロムには境界線の幅が含まれます。 <codeph>horizontalScrollPolicy</codeph> または <codeph>verticalScrollPolicy</codeph> プロパティ値が <codeph>ScrollPolicy.ON</codeph> の場合、クロムには対応するスクロールバーの幅も含まれます。 スクロールポリシーが <codeph>ScrollPolicy.AUTO</codeph> の場合は、スクロールバーが表示されていても、クロムの測定にスクロールバーの幅は含まれません。</p>
     
      <p>Container のサブクラスでは、Container の子の位置を決める際に他のクロムが考慮されるように、このメソッドをオーバーライドしてください。 例えば、Panel クラスの <codeph>viewMetrics</codeph> プロパティは、Panel コンテナのタイトルバーの幅を <codeph>top</codeph> プロパティで示しているオブジェクトを返す必要があります。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ScrollControlBase"><apiName>ScrollControlBase</apiName><shortdesc>
  ScrollControlBase クラスは、スクロールバーを持つコントロールの基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="verticalScrollBarStyleName" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  垂直スクロールバーのスタイル名です。これにより、スクロールバーの外観をより詳細に制御できます。
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  コンポーネントのシンボルのカラーです。CheckBox のチェックマークや ScrollBar ボタンの矢印などがあります。
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalScrollBarStyleName" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  水平スクロールバーのスタイル名です。これにより、スクロールバーの外観をより詳細に制御できます。
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  コンポーネントにフォーカスがある場合のフォーカス枠のカラーです。
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Number">
<description>
  コンポーネントの角に付いている丸みの半径です。
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  コンポーネントのコンテンツ領域のカラーです。
   
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントのコンテンツの背景のアルファです。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  コンポーネントのメインカラーです。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  コンポーネントのスキンで使用されるアクセントカラーです。デフォルトのボタンスキンでは、このカラーで背景が着色されます。スライダートラックのハイライトでは、このカラーが使用されます。 
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセット（ピクセル単位）です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.core:ScrollControlBase" playerVersion="Flash10" type="Class">
<description>
  IUITextField を実装するクラスです。このクラスはテキストをレンダリングするためにこのコンポーネントで使用されます。
 
  <p>mx.core.UITextField クラス（Flash Player に組み込まれている標準の TextField を使用する場合）または mx.core.UIFTETextField クラス（Text Layout Framework を使用して、双方向レイアウトなどの向上したテキストレンダリングを取得する場合）のいずれかに設定できます。</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 可能な値は、<codeph>"none"</codeph> および <codeph>"underline"</codeph> です。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  コンテナ内のテキストの整列。 可能な値は <codeph>"left"</codeph>、<codeph>"right"</codeph>、または <codeph>"center"</codeph> です。
 
  <p>ほとんどのコンポーネントのデフォルト値は <codeph>"left"</codeph> です。 FormItem コンポーネントの場合、デフォルト値は <codeph>"right"</codeph> です。 Button、LinkButton および AccordionHeader コンポーネントでは、デフォルト値は <codeph>"center"</codeph> です。このプロパティは <codeph>labelPlacement</codeph> プロパティが <codeph>"left"</codeph> または <codeph>"right"</codeph> に設定されている場合のみ認識されます。 <codeph>labelPlacement</codeph> が <codeph>"top"</codeph> または <codeph>"bottom"</codeph> に設定されている場合は、テキストおよびアイコンが中央に配置されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.core:ScrollControlBase" playerVersion="Flash10" type="String">
<description>
  このコンポーネントで表示されるテキストのロケールです。
 
  <p>FTE および TLF はこのロケールを使用して Unicode 文字をフォント字形にマッピングしたり、フォールバックフォントを検索したりします。</p>
 
  <p>メモ：このスタイルは、MX コンポーネントで、<codeph>textFieldClass</codeph> として UIFTETextField が指定されている場合にのみ適用されます。</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  各文字間に表示される追加のピクセル数。 正の値を指定すると文字間隔が通常より広くなり、負の値を指定すると文字間隔が通常より狭くなります。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Boolean">
<description>
  カーニングが有効（<codeph>true</codeph>) か無効（<codeph>false</codeph>）かを示すブール値です。カーニングでは、読みやすくするために、特定の文字ペア間の間隔を調整します。ただし、カーニングは見出しを大きなフォントにする場合など、必要な場合に限って使用してください。 カーニングは、埋め込みフォントに対してのみサポートされています。Verdana や、Courier New などの等幅フォントなど、特定のフォントではカーニングはサポートされていません。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 有効な値は <codeph>normal</codeph> と <codeph>bold</codeph> です。 Button コントロールのデフォルト値は <codeph>bold</codeph> です。 他のすべてのコントロールのデフォルト値は <codeph>normal</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>thickness</codeph> プロパティを設定します。 このプロパティは字形のエッジの太さを指定します。 可能な値は -200 から 200 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込みフォントを使用していて、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルは、システムフォントには影響を与えません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"italic"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 Halo テーマ内では、ColorPicker コントロール以外のすべてのコントロールのデフォルト値は 10 です。Halo テーマ別 ColorPicker コントロールのデフォルトは 11 です。Spark テーマ内では、ColorPicker コントロール以外のすべてのコントロールのデフォルト値は 12 です。Spark テーマ別 ColorPicker コントロールのデフォルトは 11 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>sharpness</codeph> プロパティを設定します。 このプロパティは字形のエッジのシャープネスを指定します。 可能な値は -400 から 400 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込みフォントを使用していて、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>gridFitType</codeph> プロパティを設定します。 可能な値は、<codeph>"none"</codeph>（<codeph>flash.text.GridFitType.NONE</codeph>）、<codeph>"pixel"</codeph>（<codeph>flash.text.GridFitType.PIXEL</codeph>）、および <codeph>"subpixel"</codeph>（<codeph>flash.text.GridFitType.SUBPIXEL</codeph>）です。 
  
  <p>このプロパティが適用されるのは、埋め込みフォントを使用していて、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  使用するフォントの名前です。 完全な CSS 実装と異なり、カンマ区切りリストはサポートされません。 任意のフォントファミリ名を使用できます。 汎用フォント名を指定した場合、適切なデバイスフォントに置換されます。Halo テーマのデフォルトフォントは <codeph>"Verdana"</codeph> です。Spark テーマのデフォルトフォントは <codeph>"Arial"</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  内部 TextField の <codeph>antiAliasType</codeph> プロパティを設定します。 可能な値は、<codeph>"normal"</codeph>（<codeph>flash.text.AntiAliasType.NORMAL</codeph>）および <codeph>"advanced"</codeph>（<codeph>flash.text.AntiAliasType.ADVANCED</codeph>）です。 
  
  <p>デフォルト値は <codeph>"advanced"</codeph> であり、フォントについて高度なアンチエイリアスが有効になります。 <codeph>"normal"</codeph> に設定すると、高度なアンチエイリアスが無効になります。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
  
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="uint">
<description>
  コンポーネントが無効な場合のテキストの色です。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.core:ScrollControlBase" playerVersion="Flash10" type="String">
<description>
  このコンポーネントで表示されるテキストの方向です。
 
  <p>使用できる値は、ラテン文字などの左から右のテキスト用の <codeph>"ltr"</codeph> と、アラビア文字やヘブライ文字などの右から左のテキスト用の <codeph>"rtl"</codeph> です。</p>
 
  <p>FTE と TLF は双方向テキストレイアウトアルゴリズムでこの値を使用し、Unicode 文字の順序を字形の順序にマッピングします。</p>
 
  <p>メモ：このスタイルは、MX コンポーネントで、<codeph>textFieldClass</codeph> として UIFTETextField が指定されている場合にのみ適用されます。</p>
 
  <p><codeph>direction</codeph> は、TLFTextField の境界内のテキストの整列にも影響します。ただし、コンポーネント内の TLFTextField の配置には影響しません。</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="uint">
<description>
  コンポーネントのラベルを含めたコンポーネント内のテキストの色です。Halo テーマのデフォルト値は <codeph>0x0B333C</codeph> です。Spark テーマのデフォルト値は <codeph>0x000000</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  追加の行間を表します。
 
  <p>デフォルト値は 2 です。</p>
  <p>ComboBox コントロールのデフォルト値は 0 です。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  フォーカス矩形のどの角を丸くするかを指定します。 この値は、スペースで区切られた String です。<codeph>"tl"</codeph>、<codeph>"tr"</codeph>、<codeph>"bl"</codeph> および <codeph>"br"</codeph> の任意の組み合わせを含めることができます。 例えば、右の角を丸くし、左の角を直角にするように指定するには、<codeph>"tr br"</codeph> とします。 <codeph>cornerRadius</codeph> スタイルプロパティは、角の丸みの半径を指定します。 デフォルト値は、コンポーネントのクラスによって異なります。クラスでオーバーライドされていない場合、デフォルト値は <codeph>"tl tr bl br"</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  フォーカススキンのアルファ透明度値を指定します。Halo テーマのデフォルト値は <codeph>0.4</codeph> です。Spark テーマのデフォルト値は <codeph>0.55</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Number">
<description>
  ドロップシャドウの幅です。このプロパティを負の値に設定すると、シャドウはコンポーネントの上に表示されます。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="String">
<description>
  ドロップシャドウの方向です。 有効な値は <codeph>"left"</codeph>、<codeph>"center"</codeph> および <codeph>"right"</codeph> です。
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropShadowColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="uint">
<description>
  ドロップシャドウの色です。
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  コンポーネントのドロップシャドウの表示または非表示を指定するブール型プロパティです。 デフォルト値は <codeph>false</codeph> です。
 
  <p><b>メモ：</b>ドロップシャドウをコンテナに表示するには、<codeph>contentBackgroundColor</codeph> プロパティを設定します。 設定しない場合、コンテナのデフォルトの背景は透明なので、シャドウはコンテナの背後に表示されます。</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  コンポーネントのドロップシャドウの表示または非表示を指定するブール型プロパティです。 このスタイルは <codeph>borderStyle="solid"</codeph> と共に使用します。 デフォルト値は <codeph>false</codeph> です。
 
  <p><b>メモ：</b>ドロップシャドウをコンテナに表示するには、<codeph>backgroundColor</codeph> プロパティまたは <codeph>backgroundImage</codeph> プロパティを設定します。 設定しない場合、コンテナのデフォルトの背景は透明なので、シャドウはコンテナの背後に表示されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  境界線の可視性です。
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Number">
<description>
  境界ボックスの境界線の幅です。 <codeph>borderStyle</codeph> が <codeph>"solid"</codeph> に設定されている場合にのみ使用されます。
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  境界ボックスのスタイルです。 有効な値は <codeph>"none"</codeph>、<codeph>"solid"</codeph>、<codeph>"inset"</codeph> および <codeph>"outset"</codeph> です。 デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合は、<codeph>"inset"</codeph> になります。 ほとんどの Container のデフォルト値は <codeph>"none"</codeph> です。halo テーマで使用できる値は <codeph>"inset"</codeph> と <codeph>"outset"</codeph> のみです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSkin" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Class">
<description>
  コンポーネントの境界線のスキンクラスです。 Halo テーマに独自のデフォルトを明示的に設定していないすべてのコンポーネントのデフォルト値は、Halo テーマの場合は <codeph>mx.skins.halo.HaloBorder</codeph> になり、Spark テーマの場合は <codeph>mx.skins.spark.BorderSkin</codeph> になります。Panel コンテナには、Halo テーマのデフォルト値の <codeph>mx.skins.halo.PanelSkin</codeph> と Spark テーマのデフォルト値の <codeph>mx.skins.spark.BorderSkin</codeph> があります。コンポーネントのデフォルト値を確認するには、default.css ファイルを参照してください。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSides" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="String">
<description>
  境界ボックスの境界線のうち、どれが表示されるかを示します。表示する境界線をスペース区切りのストリングで指定します。 ストリングには、<codeph>"left"</codeph>、<codeph>"top"</codeph>、<codeph>"right"</codeph> および <codeph>"bottom"</codeph> を任意の順序で指定できます。 デフォルト値は <codeph>"left top right bottom"</codeph> です。この場合、4 辺すべてを表示します。 このスタイルは、borderStyle が <codeph>"solid"</codeph> の場合にのみ使用されます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  境界線の色です。 デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合、Halo テーマでは <codeph>0xB7BABC</codeph>、Spark テーマでは <codeph>0x696969</codeph> になります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  境界線のアルファです。
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSize" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="String">
<description>
  <codeph>backgroundImage</codeph> で指定されているイメージを、元のサイズとは異なるサイズに拡大および縮小します。 <codeph>"100%"</codeph> に設定すると、コンポーネント全体に収まるサイズにイメージを伸縮します。 パーセント値で指定する場合は、パーセント記号（%）付きで指定する必要があります。 Application コンテナのデフォルトは <codeph>100%</codeph> です。 他のすべてのコンテナのデフォルト値は <codeph>auto</codeph> で、イメージの元のサイズが維持されます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Object">
<description>
  コンポーネントの背景イメージです。 これには、絶対 URL、相対 URL、絶対クラス、または相対クラスを指定できます。 <codeph>backgroundColor</codeph> または <codeph>backgroundImage</codeph> のいずれかを設定できます。背景色の前面に背景イメージを表示します。 デフォルト値は <codeph>undefined</codeph> で、「未定義」であることを意味します。 このスタイルと <codeph>backgroundColor</codeph> スタイルの両方が undefined である場合、コンポーネントは透明な背景を持ちます。
 
  <p>ほとんどの Flex コントロールのデフォルトスキンは、部分的に透明です。 この結果、コンテナの背景イメージが、そのコンテナの中のコントロールに部分的ににじみ出るように表示されます。 コントロールの <codeph>fillAlphas</codeph> プロパティのアルファ値を 1 に設定することで、これを避けることができます。次に例を示します。
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="backgroundDisabledColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="uint">
<description>
  コンポーネントが無効になっている場合のコンポーネント背景色です。 グローバルデフォルト値は <codeph>undefined</codeph> です。 List コントロールのデフォルト値は、<codeph>0xDDDDDD</codeph>（明るい灰色）です。 コンテナが無効になっている場合は、背景がグレー表示されます。このグレー表示の度合いは、<codeph>disabledOverlayAlpha</codeph> スタイルで制御します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="uint">
<description>
  コンポーネントの背景色です。 <codeph>backgroundColor</codeph> と <codeph>backgroundImage</codeph> の両方を設定できます。 一部のコンポーネントには背景色がありません。 DataGrid コントロールでは、このスタイル設定は無視されます。 デフォルト値は <codeph>undefined</codeph> で、未定義であることを意味します。 このスタイルと <codeph>backgroundImage</codeph> スタイルの両方が <codeph>undefined</codeph> である場合、コンポーネントは透明な背景を持ちます。
 
  <p>Application コンテナの場合、このスタイルはアプリケーションのロード時の背景色と、アプリケーションの実行時の背景のグラデーションを指定します。 指定された色よりもわずかに濃い色とわずかに薄い色の間でグラデーションパターンが計算されます。</p>
 
  <p>ほとんどの Flex コントロールのデフォルトスキンは、部分的に透明です。 この結果、コンテナの背景色が、そのコンテナの中のコントロールに部分的ににじみ出るように表示されます。 コントロールの <codeph>fillAlphas</codeph> プロパティのアルファ値を 1 に設定することで、これを避けることができます。次に例を示します。
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Number">
<description>
  <codeph>backgroundColor</codeph> プロパティで定義されている、<codeph>backgroundImage</codeph> スタイルで定義されているイメージまたは SWF ファイルの背景色のアルファレベルです。 有効な値の範囲は、0.0 ～ 1.0 です。ほとんどのコントロールではデフォルト値は 1.0 ですが、ToolTip コントロールの場合デフォルト値は 0.95 であり、Alert コントロールの場合デフォルト値は 0.9 です。
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;ScrollControlBase&gt;</code> tag inherits all the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:<i>tagname</i>
  <b>Properties</b>
  border="<i>object of border skin style</i>"
  horizontalScrollPolicy="off|on|auto"
  horizontalScrollPosition="0"
  liveScrolling="true|false"
  maxHorizontalScrollPosition="NaN"
  maxVerticalScrollPosition="NaN"
  scrollTipFunction="undefined"
  showScrollTips="false|true"
  verticalScrollPolicy="auto|off|on"
  verticalScrollPosition="0" 
  <b>Styles</b>
  backgroundAlpha="1.0"
  backgroundColor="undefined"
  backgroundImage="undefined"
  backgroundSize="auto"
  borderColor="0xAAB3B3"
  borderSides="left top right bottom"
  borderSkin="ClassReference('mx.skins.halo.HaloBorder')"
  borderStyle="inset"
  borderThickness="1"
  color="0x0B333C"
  cornerRadius="0"
  disabledColor="0xAAB3B3"
  dropShadowColor="0x000000"
  dropShadowEnabled="false"
  fontFamily="Verdana"
  fontSize="10"
  fontStyle="normal|italic"
  fontWeight="normal|bold"
  horizontalScrollBarStyleName=""
  leading="2"
  shadowDirection="center"
  shadowDistance="2"
  textAlign="<i>value; see detail.</i>"
  textDecoration="none|underline"
  textIndent="0"
  verticalScrollBarStyleName=""
 
  <b>Events</b>
  scroll="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>スクロールをサポートするビューとコンテナの基本クラス
  
  </apiTipText></apiTipTexts><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  ScrollControlBase クラスは、スクロールバーを持つコントロールの基本クラスです。スクロールバーはユーザーが操作し、表示可能領域を変更するメソッドおよびプロパティには開発者がアクセスします。 ScrollControlBase が持つ子オブジェクトは 1 つのみで、そのオブジェクトを配置およびマスクするか、またはサイズ変更して、表示可能なコンテンツを表示します。スクロールするアイテムは、このコンテンツオブジェクトの子であることが必要です。
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:ScrollControlBase_mx.events.ScrollEvent.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
  コンテンツがスクロールされたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3269
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ScrollEvent.SCROLL</apiEventType><adobeApiEventClassifier>mx.events.ScrollEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンテンツがスクロールされたときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:ScrollControlBase:ScrollControlBase"><apiName>ScrollControlBase</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ScrollControlBase:protected:createBorder"><apiName>createBorder</apiName><shortdesc>
      このコンポーネントの境界線を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このコンポーネントの境界線を作成します。境界線は通常 <codeph>borderStyle</codeph> スタイルと <codeph>borderSkin</codeph> スタイルによって決まります。border プロパティを境界線のインスタンスに設定する必要があります。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      この ScrollControlBase の子であるオブジェクトを作成します。ここでは境界線とマスクです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      この ScrollControlBase の子であるオブジェクトを作成します。ここでは境界線とマスクです。このメソッドは、ScrollControlBase が最初に作成されたときに呼び出されます。サブクラスがこのメソッドをオーバーライドする場合は、サブクラスで <codeph>super.createChildren()</codeph> メソッドを呼び出して、<codeph>ScrollControlBase.createChildren()</codeph> メソッドのロジックを実行します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:layoutChrome"><apiName>layoutChrome</apiName><shortdesc>
      サイズ変更に応答して、このコントロールの境界線の位置およびサイズを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位によりコンポーネントの幅を指定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      サイズ変更に応答して、このコントロールの境界線の位置およびサイズを設定します。
     
      <p><codeph>ScrollControlBase.layoutChrome()</codeph> メソッドは、ScrollControlBase の境界線の位置とサイズを設定します。ScrollControlBase のすべてのサブクラスでは、境界線の位置を適切に設定するために、サブクラスの <codeph>layoutChrome()</codeph> メソッドで <codeph>super.layoutChrome()</codeph> メソッドを呼び出す必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:mouseWheelHandler"><apiName>mouseWheelHandler</apiName><shortdesc>
      マウスホイールスクロールイベントのイベントハンドラーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>イベントオブジェクト。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      マウスホイールスクロールイベントのイベントハンドラーです。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:roomForScrollBar"><apiName>roomForScrollBar</apiName><shortdesc>
      特定のスクロールバーを表示するための十分な領域がこのコンポーネントにあるかどうかを判断します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>スクロールバー用の十分な領域がある場合は true を返します。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>bar</apiItemName><apiOperationClassifier>mx.controls.scrollClasses:ScrollBar</apiOperationClassifier><apiDesc>スクロールバー
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位によりコンポーネントの幅を指定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      特定のスクロールバーを表示するための十分な領域がこのコンポーネントにあるかどうかを判断します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:scrollHandler"><apiName>scrollHandler</apiName><shortdesc>
      scroll イベントのデフォルトのイベントハンドラーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>イベントオブジェクト。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>scroll</codeph> イベントのデフォルトのイベントハンドラーです。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:setScrollBarProperties"><apiName>setScrollBarProperties</apiName><shortdesc>
      渡されたパラメーターに基づいて、スクロールバーを表示するよう、または非表示にするよう ScrollControlBase に指示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>totalColumns</apiItemName><apiType value="int"/><apiDesc>表示する必要のある水平単位の数です。
     
      </apiDesc></apiParam><apiParam><apiItemName>visibleColumns</apiItemName><apiType value="int"/><apiDesc>一度に表示できる水平単位の数です。
     
      </apiDesc></apiParam><apiParam><apiItemName>totalRows</apiItemName><apiType value="int"/><apiDesc>表示する必要のある垂直単位の数です。
     
      </apiDesc></apiParam><apiParam><apiItemName>visibleRows</apiItemName><apiType value="int"/><apiDesc>一度に表示できる垂直単位の数です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      渡されたパラメーターに基づいて、スクロールバーを表示するよう、または非表示にするよう ScrollControlBase に対して指示します。TextArea に 100 ピクセル幅で 5 行のテキストしか表示できないにもかかわらず、表示する実際のテキストが 200 ピクセル幅で 30 行の場合には、<codeph>setScrollBarProperties()</codeph> メソッドを <codeph>setScrollBarProperties(200, 100, 30, 5)</codeph> として呼び出します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ScrollControlBase:protected:border"><apiName>border</apiName><shortdesc>
      境界線オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="mx.core:IFlexDisplayObject"/></apiValueDef><apiDesc>
      境界線オブジェクトです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:protected:horizontalScrollBar"><apiName>horizontalScrollBar</apiName><shortdesc>
      水平スクロールバーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.controls.scrollClasses:ScrollBar</apiValueClassifier></apiValueDef><apiDesc>
      水平スクロールバーです。現在表示されている水平スクロールバーがない場合、このプロパティは null です。一般に、このプロパティに直接アクセスすることはありません。 <codeph>horizontalScrollPolicy</codeph> および <codeph>horizontalScrollPosition</codeph> プロパティを操作することで、このスクロールバーを適切に制御できます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:liveScrolling"><apiName>liveScrolling</apiName><shortdesc>
      サムの移動に合わせてスクロールするか、サムが離されるまで表示を更新しないかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      サムの移動に合わせてスクロールするか、サムが離されるまで表示を更新しないかを示すフラグです。 デフォルト値は <codeph>true</codeph> です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:protected:maskShape"><apiName>maskShape</apiName><shortdesc>
      マスクです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.display:Shape"/></apiValueDef><apiDesc>
      マスクです。スクロールバーが現在表示されていない場合や、別のマスクメカニズムを持つサブクラスでは、このプロパティが未定義になることがあります。マスクによって、表示可能オブジェクトの表示可能領域が定義されています。そのため、このマスクを使用して、コンテンツの現在表示可能ではない部分を非表示にします。一般に、このプロパティに直接アクセスすることはありません。 <codeph>horizontalScrollPolicy</codeph>、<codeph>verticalScrollPolicy</codeph>、<codeph>horizontalScrollPosition</codeph> および <codeph>verticalScrollPosition</codeph> プロパティを操作することで、このマスクを適切に制御できます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:protected:scrollAreaChanged"><apiName>scrollAreaChanged</apiName><shortdesc>
      スクロールバーの表示または非表示のため、スクロール領域が変更されたことを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
      スクロールバーの表示または非表示のため、スクロール領域が変更されたことを示すフラグです。スクロールプロパティを再調整するために、ほとんどのレイアウトメソッドによって使用されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:showScrollTips"><apiName>showScrollTips</apiName><shortdesc>
      スクロールサムをドラッグしたときに、その近くにツールヒントを表示するかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      スクロールサムをドラッグしたときに、その近くにツールヒントを表示するかどうかを示すフラグです。 デフォルト値は <codeph>false</codeph> であり、ツールヒントは表示されません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:protected:verticalScrollBar"><apiName>verticalScrollBar</apiName><shortdesc>
      垂直スクロールバーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.controls.scrollClasses:ScrollBar</apiValueClassifier></apiValueDef><apiDesc>
      垂直スクロールバーです。現在表示されている垂直スクロールバーがない場合、このプロパティは null です。一般に、このプロパティに直接アクセスすることはありません。 <codeph>verticalScrollPolicy</codeph> および <codeph>verticalScrollPosition</codeph> プロパティを操作することで、このスクロールバーを適切に制御できます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      left、top、right、bottom の 4 つのプロパティを持つ EdgeMetrics オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
      <codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph> および <codeph>bottom</codeph> の 4 つのプロパティを持つ EdgeMetrics オブジェクトを返します。 各プロパティの値は、境界線の 1 辺の太さをピクセル単位で表したものです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc>
      水平スクロールバーを常にオンにするか、常にオフにするか、または setScrollBarProperties() メソッドに渡されるパラメーターに基づいて自動的に変更するかを示すプロパティです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="horizontalScrollPolicyChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.OFF
      
      </apiDefaultValue></apiValueDef><apiDesc>
      水平スクロールバーを常にオンにするか、常にオフにするか、または <codeph>setScrollBarProperties()</codeph> メソッドに渡されるパラメーターに基づいて自動的に変更するかを示すプロパティです。 有効な値は <codeph>ScrollPolicy.ON</codeph>、<codeph>ScrollPolicy.OFF</codeph> および <codeph>ScrollPolicy.AUTO</codeph> です。 有効な MXML 値は、<codeph>"on"</codeph>、<codeph>"off"</codeph> および <codeph>"auto"</codeph> です。
     
      <p>ListBase サブクラスでこのプロパティを <codeph>ScrollPolicy.OFF</codeph> に設定しても、<codeph>horizontalScrollPosition</codeph> プロパティは影響を受けません。引き続き、コンテンツをプログラムでスクロールできます。</p>
     
      <p>このポリシーは、コンポーネントの測定サイズに影響を与える場合があります。ポリシーが <codeph>ScrollPolicy.AUTO</codeph> の場合、スクロールバーは測定サイズに反映されません。 この設定により、スクロールバーが表示されたときにレイアウトが再計算されなくなります。 スクロールバーに十分なデータが供給されることがわかっている場合は、このポリシーを <codeph>ScrollPolicy.ON</codeph> に設定してください。 それが不確かなときに、スクロールバーを後で表示できるように、コンポーネントの幅と高さを明示的に設定することが必要になります。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
      左端からコンテンツへのオフセットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="viewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      左端からコンテンツへのオフセットです。 これは、一部のサブクラスではピクセルのオフセットですが、DataGrid では列の数、HorizontalList または TileList ではアイテムの数など、他のメトリックも使用できます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:maxHorizontalScrollPosition:get"><apiName>maxHorizontalScrollPosition</apiName><shortdesc>
      horizontalScrollPosition プロパティの最大値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="maxHorizontalScrollPositionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      <codeph>horizontalScrollPosition</codeph> プロパティの最大値です。 <codeph>maxHorizontalScrollPosition</codeph> プロパティはコンテンツの幅から表示可能な領域の幅を引いたものです。したがって、これはコンテンツの幅ではありません。
     
      <p>ほとんどのコンポーネントで、<codeph>maxHorizontalScrollPosition</codeph> プロパティの値は、コンポーネントのデータおよびサイズから計算されます。アプリケーションコードで設定しないようにしてください。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:maxVerticalScrollPosition:get"><apiName>maxVerticalScrollPosition</apiName><shortdesc>
      verticalScrollPosition プロパティの最大値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="maxVerticalScrollPositionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      <codeph>verticalScrollPosition</codeph> プロパティの最大値です。 <codeph>maxVerticalScrollPosition</codeph> プロパティはコンテンツの高さから表示可能な領域の高さを引いたものです。したがって、これはコンテンツの高さではありません。
     
      <p><codeph>maxVerticalScrollPosition</codeph> プロパティの値は、コンポーネントのデータとサイズから計算されます。アプリケーションコードで設定しないでください。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:scrollTipFunction:get"><apiName>scrollTipFunction</apiName><shortdesc>
      ScrollTip として表示するストリングを計算する関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="scrollTipFunctionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      ScrollTip として表示するストリングを計算する関数です。 この関数は、<codeph>showScrollTips</codeph> プロパティに <codeph>true</codeph> が設定されているときに、スクロールサムがドラッグされた場合に呼び出されます。 この関数は、ScrollTip として使用されたストリングを返します。 この関数は 2 つのパラメーターを受け取ります。 第 1 パラメーターはスクロールバーの <codeph>direction</codeph> です。 第 2 パラメーターは <codeph>scrollPosition</codeph> です。次の例を参照してください。
      
      <pre>
      function scrollTipFunction(direction:String, position:Number):String 
      {
        if (direction == "vertical") return myToolTips[position];
        else return "";
      }</pre>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc>
      垂直スクロールバーを常にオンにするか、常にオフにするか、または setScrollBarProperties() メソッドに渡されるパラメーターに基づいて自動的に変更するかを示すプロパティです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="verticalScrollPolicyChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      垂直スクロールバーを常にオンにするか、常にオフにするか、または <codeph>setScrollBarProperties()</codeph> メソッドに渡されるパラメーターに基づいて自動的に変更するかを示すプロパティです。 有効な値は <codeph>ScrollPolicy.ON</codeph>、<codeph>ScrollPolicy.OFF</codeph> および <codeph>ScrollPolicy.AUTO</codeph> です。 有効な MXML 値は、<codeph>"on"</codeph>、<codeph>"off"</codeph> および <codeph>"auto"</codeph> です。
     
      <p>ListBase サブクラスでこのプロパティを <codeph>ScrollPolicy.OFF</codeph> に設定しても、<codeph>verticalScrollPosition</codeph> プロパティは影響を受けません。引き続き、コンテンツをプログラムでスクロールできます。</p>
     
      <p>このポリシーは、コンポーネントの測定サイズに影響を与える場合があります。ポリシーが <codeph>ScrollPolicy.AUTO</codeph> の場合、スクロールバーは測定サイズに反映されません。 この設定により、スクロールバーが表示されたときにレイアウトが再計算されなくなります。 スクロールバーに十分なデータが供給されることがわかっている場合は、このポリシーを <codeph>ScrollPolicy.ON</codeph> に設定してください。 それが不確かなときに、スクロールバーを後で表示できるように、コンポーネントの幅と高さを明示的に設定することが必要になります。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc>
      上端からコンテンツへのオフセットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="viewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      上端からコンテンツへのオフセットです。 これは、一部のサブクラスではピクセルのオフセットですが、List では行数、TileList リストではタイルの数など、他のメトリックも使用できます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:viewMetrics:get"><apiName>viewMetrics</apiName><shortdesc>
      スクロールバーを考慮する EdgeMetrics オブジェクト（可視の場合）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
      スクロールバーを考慮する EdgeMetrics オブジェクト（可視の場合）。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>