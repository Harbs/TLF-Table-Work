<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.components"><apiName>spark.components</apiName><apiDetail/><apiClassifier id="spark.components:ViewNavigator"><apiName>ViewNavigator</apiName><shortdesc>
  Die ViewNavigator-Komponente ist ein Container, der eine Sammlung von View-Objekten enthält, wobei nur die oberste Ansicht sichtbar und aktiv ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="landscapeAndOverlay" owner="spark.components:ViewNavigator" playerVersion="AIR2.5">
<description>
  Der verwendete Status, wenn der Navigator im Querformat ausgerichtet ist und die Navigatorsteuerlemente oben überlagert werden.
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="portraitAndOverlay" owner="spark.components:ViewNavigator" playerVersion="AIR2.5">
<description>
  Der verwendete Status, wenn der Navigator im Querformat ausgerichtet ist und die Navigatorsteuerelemente oben überlagert werden.
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="landscape" owner="spark.components:ViewNavigator" playerVersion="AIR2.5">
<description>
  Der verwendete Status, wenn der Navigator im Querformat ausgerichtet ist.
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="portrait" owner="spark.components:ViewNavigator" playerVersion="AIR2.5">
<description>
  Der verwendete Status, wenn der Navigator im Hochformat ausgerichtet ist.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="navigationStack"/><skinParts><SkinPart name="actionBar" owner="spark.components:ViewNavigator" playerVersion="AIR2.5" required="false" var_type="spark.components:ActionBar">
<description>
     Ein Skinteil, der die Aktionsleiste des Navigators definiert. 
     
     </description>

	<prolog><asCustoms><langversion>3.0
     </langversion><productversion>Flex 4.5
    </productversion></asCustoms></prolog><shortdesc>
     A skin part that defines the action bar of the navigator.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:ViewNavigator&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:ViewNavigator
   <strong>Properties</strong>
    actionContent="null"
    actionLayout="null"
    defaultPopTransition="SlideViewTransition"
    defaultPushTransition="SlideViewTransition"
    firstView="null"
    firstViewData="null"
    navigationContent="null"
    navigationLayout="null"
    poppedViewReturnedObject="null"
    title=""
    titleContent="null"
    titleLayout="null"
 
  &gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ViewNavigator-Komponente ist ein Container, der eine Sammlung von View-Objekten enthält, wobei nur die oberste Ansicht sichtbar und aktiv ist. Steuern Sie mithilfe des ViewNavigator-Containers die Navigation zwischen den Ansichten einer Mobilanwendung. Der ViewNavigatorApplication-Container erstellt automatisch einen einzelnen ViewNavigator-Container für die gesamte Anwendung.
  
  <p>Die Navigation in einer Mobilanwendung wird von einem Stapel von View-Objekten gesteuert. Das oberste View-Objekt im Stapel definiert die derzeit sichtbare Ansicht. Der ViewNavigator-Container verwaltet einen Stapel. Um die Ansichten zu ändern, verschieben Sie ein neues View-Objekt in den Stapel oder blenden Sie das derzeitige View-Objekt vom Stapel aus ein. Wenn das derzeitig sichtbare View-Objekt vom Stapel entfernt wird, wird das View-Objekt gelöscht und der Benutzer wird zur vorherigen Ansicht im Stapel zurückgeführt.</p>
   <p>Wenn eine Ansicht auf die oberste Ebene des Stapels geschoben wird, wird die <codeph>data</codeph>-Eigenschaft der alten Ansicht automatisch dauerhaft gespeichert. Sie wird wiederhergestellt, wenn die derzeitige Ansicht vom Stapel aus eingeblendet und die Ansicht dadurch reaktiviert wird. Wenn eine neue Ansicht durch das Schieben auf den Stapel aktiv wird, wird die Instanz der alten Ansicht gelöscht.</p>
 
  <p>ViewNavigator zeigt ein optionales ActionBar-Steuerelement an, das durch die aktive Ansicht definierte kontextbedingte Informationen anzeigt. Wenn sich die aktive Ansicht ändert, wird die Aktionsleiste automatisch aktualisiert.</p>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#View"><linktext>spark.components.View</linktext></link><link href="spark.components.xml#ActionBar"><linktext>spark.components.ActionBar</linktext></link><link href="spark.components.xml#TabbedViewNavigator"><linktext>spark.components.TabbedViewNavigator</linktext></link><link href="spark.transitions.xml#ViewTransitionBase"><linktext>spark.transitions.ViewTransitionBase</linktext></link></related-links><apiConstructor id="spark.components:ViewNavigator:ViewNavigator"><apiName>ViewNavigator</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:ViewNavigator:protected:createActionBarHideEffect"><apiName>createActionBarHideEffect</apiName><shortdesc>
      Erstellt den wiederzugebenden Effekt, wenn das ActionBar-Steuerelement ausgeblendet ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Ein wiederzugebender Effekt, wenn das ActionBar-Steuerelement ausgeblendet ist.
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn></apiOperationDef><apiDesc>
      Erstellt den wiederzugebenden Effekt, wenn das ActionBar-Steuerelement ausgeblendet ist. Der erzeugte Effekt für die Animierung der ActionBar und der derzeit im Inhaltsbereich des Navigators angezeigten Ansicht.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:protected:createActionBarShowEffect"><apiName>createActionBarShowEffect</apiName><shortdesc>
      Erstellt den wiederzugebenden Effekt, wenn das ActionBar-Steuerelement erscheint.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Ein wiederzugebender Effekt, wenn das ActionBar-Steuerelement erscheint.
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn></apiOperationDef><apiDesc>
      Erstellt den wiederzugebenden Effekt, wenn das ActionBar-Steuerelement erscheint. Der erzeugte Effekt für die Animierung der ActionBar und der derzeit im Inhaltsbereich des Navigators angezeigten Ansicht.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:hideActionBar"><apiName>hideActionBar</apiName><shortdesc>
      Blendet die Aktionsleiste aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>animate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Gibt an, ob ein hide-Effekt wiedergegeben werden soll, wenn die Aktionsleiste ausgeblendet ist.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Blendet die Aktionsleiste aus.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:popAll"><apiName>popAll</apiName><shortdesc>
      Entfernt alle Ansichten aus dem Navigatorstapel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>Der Ansichtsübergang, der beim Wechseln der Ansichten wiedergegeben wird.    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Entfernt alle Ansichten aus dem Navigatorstapel. Durch diese Methode ändert sich die Anzeige in einen leeren Bildschirm.  
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:popToFirstView"><apiName>popToFirstView</apiName><shortdesc>
      Entfernt alle Ansichten außer der untersten aus dem Navigationsstapel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>Der Ansichtsübergang, der beim Wechseln der Ansichten wiedergegeben wird.    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Entfernt alle Ansichten außer der untersten aus dem Navigationsstapel. Die untere Ansicht ist diejenige, die zuerst in den Stapel geschoben wurde.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:popView"><apiName>popView</apiName><shortdesc>
      Blendet die derzeitige Ansicht vom Navigationsstapel aus ein.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>Der Ansichtsübergang, der beim Wechseln der Ansichten wiedergegeben wird.    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Blendet die derzeitige Ansicht vom Navigationsstapel aus ein. Die derzeitige Ansicht wird durch die oberste Ansicht im Stapel dargestellt. Die vorherige Ansicht im Stapel wird zur derzeitigen Ansicht.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:pushView"><apiName>pushView</apiName><shortdesc>
      Verschiebt eine neue Ansicht auf die oberste Ebene des Navigationsstapels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewClass</apiItemName><apiType value="Class"/><apiDesc>Die Klasse, mit der die Ansicht erstellt wurde. Dieses Argument muss eine Klasse, die den View-Container erweitert, referenzieren.
      
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Das an die Ansicht zu übergebende Datenobjekt. Dieses Argument wird in die <codeph>data</codeph>-Eigenschaft der neuen Ansicht geschrieben.
      
      </apiDesc></apiParam><apiParam><apiItemName>context</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Ein beliebiges Objekt in der <codeph>ViewNavigator.context</codeph>-Eigenschaft. Wenn die neue Ansicht erstellt wurde, kann diese auf diese Eigenschaft verweisen und eine Aktion ausführen, die auf deren Wert beruht. In der Ansicht können Daten je nach Wert von <codeph>context</codeph> auf unterschiedliche Weise angezeigt werden.
      
      </apiDesc></apiParam><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>Der Ansichtsübergang, der beim Wechseln der Ansichten wiedergegeben wird.    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Verschiebt eine neue Ansicht auf die oberste Ebene des Navigationsstapels. Die auf den Stapel verschobene Ansicht wird zur derzeitigen Ansicht. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:replaceView"><apiName>replaceView</apiName><shortdesc>
      Ersetzt die oberste Ansicht des Navigationsstapels mit einer neuen Ansicht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewClass</apiItemName><apiType value="Class"/><apiDesc>Die Klasse, mit der die Ersatz-Ansicht erstellt wurde. Dieses Argument muss eine Klasse, die den View-Container erweitert, referenzieren.
      
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Das an die Ansicht zu übergebende Datenobjekt. Dieses Argument wird in die <codeph>data</codeph>-Eigenschaft der neuen Ansicht geschrieben.
      
      </apiDesc></apiParam><apiParam><apiItemName>context</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Ein beliebiges Objekt, mit dem der Kontext des Push-Vorgangs beschrieben wird. Wenn die neue Ansicht erstellt wird, kann sie diese Eigenschaft referenzieren.
      
      </apiDesc></apiParam><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>Der Ansichtsübergang, der beim Wechseln der Ansichten wiedergegeben wird.    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ersetzt die oberste Ansicht des Navigationsstapels mit einer neuen Ansicht. Die Ansicht, die die derzeitige Ansicht im Stapel ersetzt, wird zur derzeitigen Ansicht. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:showActionBar"><apiName>showActionBar</apiName><shortdesc>
      Blendet die Aktionsleiste ein.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>animate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Gibt an, ob ein show-Effekt wiedergegeben werden soll, wenn die Aktionsleiste erscheint.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Blendet die Aktionsleiste ein.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:ViewNavigator:actionContent:get"><apiName>actionContent</apiName><shortdesc conref="ActionBar#actionContent">
      Diese Eigenschaft überschreibt die actionContent-Eigenschaft in den ActionBar- und ViewNavigatorApplication-Komponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionContent">
      Diese Eigenschaft überschreibt die <codeph>actionContent</codeph>-Eigenschaft in den ActionBar- und ViewNavigatorApplication-Komponenten.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionContent"><linktext>ActionBar.actionContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:actionLayout:get"><apiName>actionLayout</apiName><shortdesc conref="ActionBar#actionContent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionContent">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:activeView:get"><apiName>activeView</apiName><shortdesc>
      Während eines Ansichtsübergangs referenziert diese Eigenschaft die Ansicht, zu der der Navigator übergeht. Die derzeit aktive Ansicht des Navigators.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="viewChangeComplete"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:View</apiValueClassifier></apiValueDef><apiDesc>
      <p>Während eines Ansichtsübergangs referenziert diese Eigenschaft die Ansicht, zu der der Navigator übergeht.</p>
           
      Die derzeit aktive Ansicht des Navigators. Es kann jeweils nur eine Ansicht aktiv sein.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:context:get"><apiName>context</apiName><shortdesc>
      Der String, der den Kontext beschreibt, in dem die aktuelle Ansicht erstellt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Der String, der den Kontext beschreibt, in dem die aktuelle Ansicht erstellt wurde. Diese Eigenschaft wird dem Wert des <codeph>context</codeph>-Parameters zugewiesen, der der <codeph>ViewNavigator.pushView()</codeph>-Methode übergeben wird.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:defaultPopTransition:get"><apiName>defaultPopTransition</apiName><shortdesc>
      Legt den Standardansichtsübergang für Pop-Navigationsvorgänge fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.transitions:ViewTransitionBase</apiValueClassifier><apiDefaultValue>SlideViewTransition
           </apiDefaultValue></apiValueDef><apiDesc>
      Legt den Standardansichtsübergang für Pop-Navigationsvorgänge fest.
           </apiDesc></apiValueDetail><related-links><link href="spark.transitions.xml#SlideViewTransition"><linktext>spark.transitions.SlideViewTransition</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:defaultPushTransition:get"><apiName>defaultPushTransition</apiName><shortdesc>
      Legt den Standardansichtsübergang für Push-Navigationsvorgänge fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.transitions:ViewTransitionBase</apiValueClassifier><apiDefaultValue>SlideViewTransition
           </apiDefaultValue></apiValueDef><apiDesc>
      Legt den Standardansichtsübergang für Push-Navigationsvorgänge fest.
           </apiDesc></apiValueDetail><related-links><link href="spark.transitions.xml#SlideViewTransition"><linktext>spark.transitions.SlideViewTransition</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:firstViewData:get"><apiName>firstViewData</apiName><shortdesc>
      Das an die Dateneigenschaft der ersten Ansicht zu übergebende Objekt, wenn der Navigator initialisiert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Das an die <codeph>data</codeph>-Eigenschaft der ersten Ansicht zu übergebende Objekt, wenn der Navigator initialisiert wird. Geben Sie die erste Ansicht mithilfe der <codeph>firstView</codeph>-Eigenschaft an.   
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ViewNavigator/firstView"><linktext>firstView</linktext></link><link href="spark.components.xml#View"><linktext>Ansicht</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:firstView:get"><apiName>firstView</apiName><shortdesc>
      Jede Ansicht in einer Anwendung entspricht einer View-Containerklasse, die in einer ActionScript- oder MXML-Datei definiert ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Jede Ansicht in einer Anwendung entspricht einer View-Containerklasse, die in einer ActionScript- oder MXML-Datei definiert ist. Diese Eigenschaft legt die Ansicht fest, mit der die erste Ansicht des Stapels initialisiert wird. Diese Eigenschaft muss eine Klasse, die den View-Container erweitert, referenzieren.
           <p>Geben Sie alle Daten an, die mithilfe der <codeph>firstViewData</codeph>-Eigenschaft an die erste Ansicht übergeben werden.</p>   
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ViewNavigator/firstViewData"><linktext>firstViewData</linktext></link><link href="spark.components.xml#View"><linktext>Ansicht</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:length:get"><apiName>length</apiName><shortdesc>
      Gibt die Anzahl der vom Navigator verwalteten Ansichten zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="lengthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Gibt die Anzahl der vom Navigator verwalteten Ansichten zurück.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:navigationContent:get"><apiName>navigationContent</apiName><shortdesc conref="ActionBar#navigationContent">
      Diese Eigenschaft überschreibt die navigationContent-Eigenschaft in den ActionBar- und ViewNavigatorApplication-Komponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationContent">
      Diese Eigenschaft überschreibt die <codeph>navigationContent</codeph>-Eigenschaft in den ActionBar- und ViewNavigatorApplication-Komponenten.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationContent"><linktext>ActionBar.navigationContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:navigationLayout:get"><apiName>navigationLayout</apiName><shortdesc conref="ActionBar#navigationLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:poppedViewReturnedObject:get"><apiName>poppedViewReturnedObject</apiName><shortdesc>
      Enthält das Objekt, das von der letzten Ansicht zurückgegeben wurde, die vom Navigationsstapel aus eingeblendet oder durch eine andere Ansicht ersetzt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components.supportClasses:ViewReturnObject</apiValueClassifier><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Enthält das Objekt, das von der letzten Ansicht zurückgegeben wurde, die vom Navigationsstapel aus eingeblendet oder durch eine andere Ansicht ersetzt wurde. Um einen Wert zurückzugeben, überschreibt die vom Stapel aus eingeblendete Ansicht ihre <codeph>createReturnObject()</codeph>-Methode.
           <p>Dieses Objekt ist nur verfügbar, wenn der Navigator gerade zwischen Ansichten als Reaktion auf einen Pop- oder Ersetzungsnavigationsvorgang wechselt. Dieses Objekt ist immer gültig, wenn die neue Ansicht das <codeph>add</codeph>-Ereignis erhält, und wird deaktiviert, wenn die Ansicht ein <codeph>viewActivate</codeph>-Ereignis erhält.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#View/createReturnObject()"><linktext>View.createReturnObject()</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:titleContent:get"><apiName>titleContent</apiName><shortdesc conref="ActionBar#titleContent">
      Diese Eigenschaft überschreibt die titleContent-Eigenschaft in den ActionBar- und ViewNavigatorApplication-Komponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleContent">
      Diese Eigenschaft überschreibt die <codeph>titleContent</codeph>-Eigenschaft in den ActionBar- und ViewNavigatorApplication-Komponenten.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>ActionBar.titleContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:titleLayout:get"><apiName>titleLayout</apiName><shortdesc conref="ActionBar#titleLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:title:get"><apiName>title</apiName><shortdesc conref="ActionBar#title">
      Diese Eigenschaft überschreibt die title-Eigenschaft in den ActionBar- und ViewNavigatorApplication-Komponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#title">
      Diese Eigenschaft überschreibt die <codeph>title</codeph>-Eigenschaft in den ActionBar- und ViewNavigatorApplication-Komponenten.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IconItemRenderer"><apiName>IconItemRenderer</apiName><shortdesc>
  Die IconItemRenderer-Klasse ist ein für mobile Geräte optimierter, leistungsstarker Elementrenderer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style inherit="no" name="messageStyleName" owner="spark.components:IconItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  Name der CSS-Stildeklaration, welche für die Stile für die Meldungskomponente anzuwenden ist.
 
  </description>
<default>iconItemRendererMessageStyle
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="iconDelay" owner="spark.components:IconItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Der Verzögerungswert, bevor versucht wird, die Symbolquelle zu laden, wenn sie nicht bereits zwischengespeichert wurde. 
 
  <p>Eine Verzögerung ist deshalb nützlich, weil Sie während der Ausführung von Bildläufen nicht unbedingt möchten, dass das Bild sofort geladen wird. Stattdessen sollten Sie eine bestimmte Verzögerungszeitspanne abwarten, um sicherzustellen, dass der Benutzer wirklich diesen Elementrenderer sehen möchte.</p>
 
  </description>
<default>500
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="spark.components:IconItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Anzahl von Pixeln zwischen untergeordneten Objekten in vertikaler Richtung. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für diese Klasse nicht außer Kraft gesetzt wird, ist er 6.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="spark.components:IconItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Anzahl der Pixel zwischen den untergeordneten Elementen in horizontaler Richtung. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für diese Klasse nicht außer Kraft gesetzt wird, ist er 8.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:IconItemRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:IconItemRenderer
   <strong>Properties</strong>
    decorator=""
    iconContentLoader="<i>See property description</i>"
    iconField="null"
    iconFillMode=""scale
    iconFunction="null"
    iconHeight="NaN"
    iconPlaceholder="null"
    iconScaleMode="stretch"
    iconWidth="NaN"
    label=""
    labelField="null"
    labelFunction="null"
    messageField="null"
    messageFunction="null"
 
   <strong>Common Styles</strong>
    horizontalGap="8"
    iconDelay="500"
    messageStyleName="iconItemRendererMessageStyle"
    verticalGap="6"
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.core:IGraphicElementContainer</apiBaseInterface><apiBaseInterface>spark.core:ISharedDisplayObject</apiBaseInterface><apiBaseClassifier>spark.components:LabelItemRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die IconItemRenderer-Klasse ist ein für mobile Geräte optimierter, leistungsstarker Elementrenderer. Er zeigt vier optionale Teile für jedes Element im listenbasierten Steuerelement an:  
   <ul>
    <li>Ein Symbol auf der linken Seite, das durch die <codeph>iconField</codeph>- oder <codeph>iconFunction</codeph>-Eigenschaft definiert ist.</li>
    <li>Eine einzeilige Textbeschriftung neben dem Symbol, die durch die <codeph>labelField</codeph>- oder <codeph>labelFunction</codeph>-Eigenschaft definiert ist.</li>
    <li>Eine mehrzeilige Meldung unter der Textbeschriftung, die durch die <codeph>messageField</codeph>- oder <codeph>messageFunction</codeph>-Eigenschaft definiert ist.</li>
    <li>Ein Dekoratorsymbol auf der rechten Seite, das durch die <codeph>decorator</codeph>-Eigenschaft definiert ist.</li>
  </ul>
   <p>Wenn Sie CSS-Stile auf die einzeilige Textbeschriftung, wie Schriftgröße und Farbe, anwenden wollen, legen Sie die Stile für die IconItemRenderer-Klasse fest. Wenn Sie Stile für die mehrzeilige Meldung festlegen wollen, verwenden Sie die <codeph>messageStyleNameM</codeph>-Stileigenschaft. Das folgende Beispiel legt die Textstile sowohl für die Texbeschriftung als auch die Meldung fest:</p>
   <pre>
     &lt;fx:Style>
         .myFontStyle { 
             fontSize: 15;
             color: #9933FF;
         }
  
     &lt;/fx:Style>
     
     &lt;s:List id="myList"
         width="100%" height="100%"
         labelField="firstName">
         &lt;s:itemRenderer>
             &lt;fx:Component>
                 &lt;s:IconItemRenderer messageStyleName="myFontStyle" fontSize="25"
                     labelField="firstName"
                     messageField="lastName" 
                     decorator="@Embed(source='assets/logo_small.jpg')"/>
             &lt;/fx:Component>
         &lt;/s:itemRenderer>
         &lt;s:ArrayCollection>
             &lt;fx:Object firstName="Dave" lastName="Duncam" company="Adobe" phone="413-555-1212"/>
             &lt;fx:Object firstName="Sally" lastName="Smith" company="Acme" phone="617-555-1491"/>
             &lt;fx:Object firstName="Jim" lastName="Jackson" company="Beta" phone="413-555-2345"/>
             &lt;fx:Object firstName="Mary" lastName="Moore" company="Gamma" phone="617-555-1899"/>
         &lt;/s:ArrayCollection>
     &lt;/s:List>
  </pre>
   </apiDesc><example conref="IconItemRendererExample.mxml"/></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.List.xml"><linktext>spark.components.List</linktext></link><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer.</linktext></link><link href="" invalidHref="spark.components.IItemRenderer.xml"><linktext>spark.components.IItemRenderer</linktext></link><link href="" invalidHref="spark.components.supportClasses.ItemRenderer.xml"><linktext>spark.components.supportClasses.ItemRenderer</linktext></link><link href="spark.components.xml#LabelItemRenderer"><linktext>spark.components.LabelItemRenderer</linktext></link></related-links><apiConstructor id="spark.components:IconItemRenderer:IconItemRenderer"><apiName>IconItemRenderer</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:IconItemRenderer:invalidateGraphicElementDisplayList"><apiName>invalidateGraphicElementDisplayList</apiName><shortdesc>
      Benachrichtigen Sie die Hostkomponente, dass ein Element geändert wurde und neu gezeichnet werden muss.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="spark.core:IGraphicElement"/><apiDesc>Das Element, das geändert wurde.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Benachrichtigen Sie die Hostkomponente, dass ein Element geändert wurde und neu gezeichnet werden muss. Der <codeph>IGraphicElementHost</codeph> muss die <codeph>validateDisplayList()</codeph>-Methode für das IGraphicElement aufrufen, damit es neu gezeichnet werden kann. Normalerweise überprüft der Host die Anzeigelisten der Elemente in der <codeph>validateDisplayList()</codeph>-Methode.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:IconItemRenderer:invalidateGraphicElementProperties"><apiName>invalidateGraphicElementProperties</apiName><shortdesc>
      Benachrichtigen Sie die Hostkomponente, dass ein Element geändert wurde und die Eigenschaften überprüft werden müssen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="spark.core:IGraphicElement"/><apiDesc>Das Element, das geändert wurde.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Benachrichtigen Sie die Hostkomponente, dass ein Element geändert wurde und die Eigenschaften überprüft werden müssen. Der <codeph>IGraphicElementHost</codeph> muss die <codeph>validateProperties()</codeph>-Methode für das IGraphicElement aufrufen, damit dessen Eigenschaften übernommen werden können. Normalerweise überprüft der Host die Eigenschaften der Elemente in der <codeph>validateProperties()</codeph>-Methode.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:IconItemRenderer:invalidateGraphicElementSharing"><apiName>invalidateGraphicElementSharing</apiName><shortdesc>
      Benachrichtigen Sie den Host, dass eine Elementebene geändert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="spark.core:IGraphicElement"/><apiDesc>Das Element, dessen Größe sich geändert hat.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Benachrichtigen Sie den Host, dass eine Elementebene geändert wurde. Der <codeph>IGraphicElementHost</codeph> muss die Sequenzen der grafischen Elemente mit gemeinsamen DisplayObjects bewerten und muss deshalb möglicherweise die DisplayObjects neu zuweisen und die Sequenzen neu zeichnen. Normalerweise führt der Host diesen Vorgang in der <codeph>validateProperties()</codeph>-Methode aus.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:IconItemRenderer:invalidateGraphicElementSize"><apiName>invalidateGraphicElementSize</apiName><shortdesc>
      Benachrichtigen Sie die Hostkomponente, dass sich die Größe eines Elements geändert hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="spark.core:IGraphicElement"/><apiDesc>Das Element, dessen Größe sich geändert hat.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Benachrichtigen Sie die Hostkomponente, dass sich die Größe eines Elements geändert hat. Der <codeph>IGraphicElementHost</codeph> muss die <codeph>validateSize()</codeph>-Methode für das IGraphicElement aufrufen, damit dessen Größe überprüft werden kann. Normalerweise überprüft der Host die Größe der Elemente in der <codeph>validateSize()</codeph>-Methode.
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:IconItemRenderer:protected:decoratorDisplay"><apiName>decoratorDisplay</apiName><shortdesc>
      Die Anzeigeobjektkomponente, mit der der Dekorator für diesen Elementrenderer angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="spark.primitives:BitmapImage"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Anzeigeobjektkomponente, mit der der Dekorator für diesen Elementrenderer angezeigt wird.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:protected:iconDisplay"><apiName>iconDisplay</apiName><shortdesc>
      Die Bitmapkomponente, mit der die Symboldaten des Elementrenderers angezeigt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="spark.primitives:BitmapImage"/></apiValueDef><apiDesc>
      Die Bitmapkomponente, mit der die Symboldaten des Elementrenderers angezeigt werden.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:protected:messageDisplay"><apiName>messageDisplay</apiName><shortdesc>
      Die Textkomponente, mit der die Meldungsdaten des Elementrenderers angezeigt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:StyleableTextField</apiValueClassifier></apiValueDef><apiDesc>
      Die Textkomponente, mit der die Meldungsdaten des Elementrenderers angezeigt werden.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:decorator:get"><apiName>decorator</apiName><shortdesc>
      Das Dekoratorsymbol, das rechts im Elementrenderer angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>"" 
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Das Dekoratorsymbol, das rechts im Elementrenderer angezeigt wird.
     
      <p>Das Dekoratorsymbol ignoriert den <codeph>verticalAlign</codeph>-Stil und ist immer senkrecht zentriert.</p>
           <p>Vom Dekoratorsymbol wird erwartet, dass es ein eingebettetes Element ist. Wenn externe Elemente verwendet werden, kann dadurch die Leistung beeinträchtigt werden.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconContentLoader:get"><apiName>iconContentLoader</apiName><shortdesc>
      Optionale benutzerdefinierte Bildladefunktion (z. B. Cache oder Warteschlange für Bild), die mit dem Client der Inhaltsladefunktion verknüpft werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.core:IContentLoader"/></apiValueDef><apiDesc>
      Optionale benutzerdefinierte Bildladefunktion (z. B. Cache oder Warteschlange für Bild), die mit dem Client der Inhaltsladefunktion verknüpft werden soll.
     
      <p>Der Standardwert ist ein auf dem IconItemRenderer definierter Zwischenspeicher für statischen Inhalt, der bis zu 100 Einträge zulässt.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconField:get"><apiName>iconField</apiName><shortdesc>
      Der Name des Felds im Datenelement, das als Symbol angezeigt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Name des Felds im Datenelement, das als Symbol angezeigt werden soll. Standardmäßig ist <codeph>iconField</codeph> <codeph>null</codeph> und der Elementrenderer zeigt kein Symbol an.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconFillMode:get"><apiName>iconFillMode</apiName><shortdesc conref="spark.primitives.BitmapImage#fillMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>mx.graphics.BitmapFillMode.SCALE&lt;/code>
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#fillMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.graphics.BitmapFillMode.xml"><linktext>mx.graphics.BitmapFillMode</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:iconFunction:get"><apiName>iconFunction</apiName><shortdesc>
      Eine vom Benutzer bereitgestellte Funktion, die für jedes Element zum Bestimmen seines Symbols ausgeführt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Eine vom Benutzer bereitgestellte Funktion, die für jedes Element zum Bestimmen seines Symbols ausgeführt werden soll. Die <codeph>iconFunction</codeph>-Eigenschaft überschreibt die <codeph>iconField</codeph>-Eigenschaft.
           <p>Sie können eine <codeph>iconFunction</codeph> verwenden, die die entsprechenden Felder findet und eine gültige URL oder ein gültiges Objekt zurückgibt, die als Symbol verwendet werden können.</p>
           <p>Die Symbolfunktion übernimmt ein einzelnes Argument, nämlich das Element im Datenprovider und gibt ein Objekt zurück, das an ein <codeph>spark.primitives.BitmapImage</codeph>-Objekt als die <codeph>source</codeph>-Eigenschaft übergeben wird. Die Symbolfunktion kann eine gültige URL zurückgeben, die auf ein Bild oder eine Klassendatei, die ein Bild darstellt, zeigt. Informationen zu anderen Objekttypen, die von der Symbolfunktion zurückgegeben werden können, finden Sie in der <codeph>BitmapImage</codeph>-Dokumentation.</p>
      <pre>
      myIconFunction(item:Object):Object</pre>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.xml#BitmapImage/source"><linktext>spark.primitives.BitmapImage.source</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:iconHeight:get"><apiName>iconHeight</apiName><shortdesc>
      Die Höhe des Symbols.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Höhe des Symbols. Wenn der Wert nicht festgelegt ist, wird die eigene Höhe des Bilds verwendet.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconPlaceholder:get"><apiName>iconPlaceholder</apiName><shortdesc>
      Das zu verwendende Symbolelement, wenn ein extern geladenes Element heruntergeladen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Das zu verwendende Symbolelement, wenn ein extern geladenes Element heruntergeladen wird.
     
      <p>Dieses Element muss ein eingebettetes Bild sein und darf kein extern geladenes Bild sein.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconScaleMode:get"><apiName>iconScaleMode</apiName><shortdesc conref="spark.primitives.BitmapImage#scaleMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>mx.graphics.BitmapScaleMode.STRETCH&lt;/code>
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#scaleMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.graphics.BitmapScaleMode.xml"><linktext>mx.graphics.BitmapScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:iconWidth:get"><apiName>iconWidth</apiName><shortdesc>
      Die Breite des Symbols.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Breite des Symbols. Wenn der Wert nicht festgelegt ist, wird die eigene Breite des Bilds verwendet.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:labelField:get"><apiName>labelField</apiName><shortdesc>
      Der Name des Felds im Datenproviderelement, das als Beschriftung angezeigt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Name des Felds im Datenproviderelement, das als Beschriftung angezeigt werden soll. Die <codeph>labelFunction</codeph>-Eigenschaft überschreibt diese Eigenschaft.
     
      <p>Wenn <codeph>labelFunction</codeph> = <codeph>labelField</codeph> = null, wird die <codeph>label</codeph>-Eigenschaft verwendet, die aus dem listenbasierten Steuerelement geladen wird. Wenn <codeph>labelField</codeph> jedoch explizit auf <codeph>""</codeph> (leerer String) gesetzt wird, wird keine Beschriftung angezeigt.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#IconItemRenderer/labelFunction"><linktext>spark.components.IconItemRenderer.labelFunction</linktext></link><link href="" invalidHref="spark.components.xml#IItemRenderer/label"><linktext>spark.components.IItemRenderer.label</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Eine vom Benutzer definierte Funktion zur Bestimmung der Bezeichnungen einzelner Elemente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Eine vom Benutzer bereitgestellte Funktion, die für jedes Element zum Bestimmen seiner Bezeichnung ausgeführt werden soll. Die <codeph>labelFunction</codeph>-Eigenschaft überschreibt die <codeph>labelField</codeph>-Eigenschaft.
           <p>Sie können eine <codeph>labelFunction</codeph> verwenden, die die entsprechenden Felder findet und einen anzeigbaren String zurückgibt. Die <codeph>labelFunction</codeph> ist für die Verarbeitung von Formatierungen und lokalisierten Texten sinnvoll.</p>
           <p>Die „labelFunction“ übernimmt ein einzelnes Argument, nämlich das Element im Datenprovider, und gibt einen String zurück.</p>
      <pre>
      myLabelFunction(item:Object):String</pre>
     
      <p>Wenn <codeph>labelFunction</codeph> = <codeph>labelField</codeph> = null, wird die <codeph>label</codeph>-Eigenschaft verwendet, die aus dem listenbasierten Steuerelement geladen wird. Wenn <codeph>labelField</codeph> jedoch explizit auf <codeph>""</codeph> (leerer String) gesetzt wird, wird keine Beschriftung angezeigt.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#IconItemRenderer/labelFunction"><linktext>spark.components.IconItemRenderer.labelFunction</linktext></link><link href="" invalidHref="spark.components.xml#IItemRenderer/label"><linktext>spark.components.IItemRenderer.label</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:messageField:get"><apiName>messageField</apiName><shortdesc>
      Der Name des Felds in den Datenelementen, das als Meldung angezeigt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Name des Felds in den Datenelementen, das als Meldung angezeigt werden soll. Die <codeph>messageFunction</codeph>-Eigenschaft überschreibt diese Eigenschaft.
           <p>Verwenden Sie den <codeph>messageStyleName</codeph>-Stil, um das Aussehen des Texts zu bestimmen.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:messageFunction:get"><apiName>messageFunction</apiName><shortdesc>
      Eine vom Benutzer bereitgestellte Funktion, die für jedes Element zum Bestimmen seiner Meldung ausgeführt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Eine vom Benutzer bereitgestellte Funktion, die für jedes Element zum Bestimmen seiner Meldung ausgeführt werden soll. Die <codeph>messageFunction</codeph>-Eigenschaft überschreibt die <codeph>messageField</codeph>-Eigenschaft.
           <p>Sie können eine <codeph>messageFunction</codeph> verwenden, die die entsprechenden Felder findet und einen anzeigbaren String zurückgibt. Die <codeph>messageFunction</codeph> ist auch für die Verarbeitung von Formatierungen und lokalisierten Texten sinnvoll.</p>
           <p>Die „messageFunction“ übernimmt ein einzelnes Argument, nämlich das Element im Datenprovider, und gibt einen String zurück.</p>
      <pre>
      myMessageFunction(item:Object):String</pre>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:redrawRequested:get"><apiName>redrawRequested</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:IconItemRenderer:label:set"><apiName>label</apiName><shortdesc>
      Wenn labelFunction = labelField = null, wird die label-Eigenschaft verwendet, die aus dem Listensteuerelement geladen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      <p>Wenn <codeph>labelFunction</codeph> = <codeph>labelField</codeph> = null, wird die <codeph>label</codeph>-Eigenschaft verwendet, die aus dem Listensteuerelement geladen wird. Wenn <codeph>labelField</codeph> jedoch explizit auf <codeph>""</codeph> (leerer String) gesetzt wird, wird keine Beschriftung angezeigt.</p>
     
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#IconItemRenderer/labelField"><linktext>spark.components.IconItemRenderer.labelField</linktext></link><link href="spark.components.xml#IconItemRenderer/labelFunction"><linktext>spark.components.IconItemRenderer.labelFunction</linktext></link><link href="" invalidHref="spark.components.xml#IItemRenderer/label"><linktext>spark.components.IItemRenderer.label</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:ViewMenuItem"><apiName>ViewMenuItem</apiName><shortdesc>
  Das ViewMenuItem-Steuerelement zeigt eine Beschriftung und ein Symbol für ein Menüelement im ViewMenu-Container an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="showsCaret" owner="spark.components:ViewMenuItem" playerVersion="AIR2.5">
<description>
  Der Einfügezeichenstatus der Taste, die das Menüelement angibt.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ViewMenuItem&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ViewMenuItem/&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Das ViewMenuItem-Steuerelement zeigt eine Beschriftung und ein Symbol für ein Menüelement im ViewMenu-Container an. Schreiben Sie eine Ereignisprozedur für das <codeph>click</codeph>-Ereignis, um einen Vorgang auszuführen, wenn das Menüelement ausgewählt wird.
 
  <p/>
 
 <p>
  <adobeimage alt="" href="../../images/vm_open_menu_vm.png"/>
 </p>
  
  </apiDesc><example conref="ViewMenuExampleHome.mxml"/><example conref="ViewMenuExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#ViewMenu"><linktext>spark.components.ViewMenu</linktext></link><link href="spark.layouts.xml#ViewMenuLayout"><linktext>spark.layouts.ViewMenuLayout</linktext></link><link href="spark.components.supportClasses.xml#ViewNavigatorApplicationBase"><linktext>spark.components.supportClasses.ViewNavigatorApplicationBase</linktext></link><link href="" invalidHref="spark.skins.mobile.ViewMenuItemSkin.xml"><linktext>spark.skins.mobile.ViewMenuItemSkin</linktext></link></related-links><apiConstructor id="spark.components:ViewMenuItem:ViewMenuItem"><apiName>ViewMenuItem</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ViewMenuItem:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      Enthält „true“, wenn sich das ViewMenuItem-Steuerelement im Einfügezeichenstatus befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Enthält <codeph>true</codeph>, wenn sich das ViewMenuItem-Steuerelement im Einfügezeichenstatus befindet. 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:CalloutButton"><apiName>CalloutButton</apiName><shortdesc>
  Die CalloutButton-Steuerung ist eine Dropdown-Komponente, die eine Schaltfläche zum Öffnen und Schließen eines Callout-Containers definiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="style" name="repeatInterval"/><Exclude kind="style" name="repeatDelay"/><DefaultProperty name="calloutContent"/><skinParts><SkinPart name="dropDown" owner="spark.components:CalloutButton" playerVersion="AIR3" required="false" var_type="mx.core:IFactory">
<description>
      Ein Skinteil, der die Dropdown-Factory zur Erstellung der Callout-Instanz definiert. Wenn <codeph>dropDown</codeph> nicht in der Skin definiert wird, wird ein <codeph>ClassFactory</codeph> erstellt, um eine StandardCallout-Instanz zu generieren.
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the drop-down factory which creates the Callout
      instance.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:CalloutButton&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:CalloutButton
   <strong>Properties</strong>
    calloutDestructionPolicy="auto"
    calloutLayout="BasicLayout"
    horizontalPosition="auto"
    verticalPosition="auto
 
   <strong>Events</strong>
    open="<i>No default</i>"
    close="<i>No default</i>"
      ...
      <i>child tags</i>
      ...
  &lt;/s:CalloutButton&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Button</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die CalloutButton-Steuerung ist eine Dropdown-Komponente, die eine Schaltfläche zum Öffnen und Schließen eines Callout-Containers definiert. CalloutButton legt das Layout und die untergeordneten Komponenten des Callout-Containers fest.
   <p/>
  <p>
  <adobeimage alt="" href="../../images/ca_calloutButton_ca.png"/>
 </p>
   <p>Die CalloutButton-Steuerung verwendet die Klasse spark.components.supportClasses.DropDownController zur Verwaltung des Callout-Containers. Sie können auf DropDownController mithilfe der Eigenschaft <codeph>CalloutButton.dropDownController</codeph> zugreifen.</p>
   <p>Bei offenem Callout:</p>
  <ul>
    <li>Durch Anklicken der Schaltfläche wird der Callout geschlossen.</li>
    <li>Durch Klicken neben den Callout wird er geschlossen.</li>
  </ul>
   <p>Die CalloutButton-Komponente verfügt über die folgenden Standardmerkmale:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>Breit genug für die Beschriftung des Steuerelements.</entry>
        </row><row>
           <entry>Minimale Größe</entry>
           <entry>32 Pixel breit und 43 Pixel hoch</entry>
        </row><row>
           <entry>Maximale Größe</entry>
           <entry>10000 Pixel breit und 10000 Pixel hoch</entry>
        </row><row>
           <entry>Standardskinklasse</entry>
           <entry>spark.skins.mobile.CalloutButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="CalloutButtonExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#Callout"><linktext>spark.components.Callout</linktext></link><link href="" invalidHref="spark.components.Button.xml"><linktext>spark.components.Button</linktext></link><link href="" invalidHref="spark.components.supportClasses.DropDownController.xml"><linktext>spark.components.supportClasses.DropDownController</linktext></link></related-links><adobeApiEvent id="spark.components:CalloutButton_spark.events.DropDownEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  Wird ausgelöst, wenn der Benutzer auf die Schaltfläche „Öffnen“ klickt, um den Callout anzuzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.OPEN</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Benutzer auf die Schaltfläche „Öffnen“ klickt, um den Callout anzuzeigen.  
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:CalloutButton_spark.events.DropDownEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  Wird ausgelöst, wenn der Callout aus verschiedenen Gründen geschlossen wird. Beispiel: Der Callout wird programmgesteuert geschlossen. Der Benutzer klickt außerhalb des Callouts. Der Benutzer klickt bei Anzeige des Callouts auf die Schaltfläche „Öffnen“.
  
   </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.CLOSE</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Callout aus verschiedenen Gründen geschlossen wird. Beispiel: 
  <ul>
      <li>Der Callout wird programmgesteuert geschlossen.</li>
      <li>Der Benutzer klickt außerhalb des Callouts.</li>
      <li>Der Benutzer klickt bei Anzeige des Callouts auf die Schaltfläche „Öffnen“.</li>
  </ul>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:CalloutButton:CalloutButton"><apiName>CalloutButton</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:CalloutButton:closeDropDown"><apiName>closeDropDown</apiName><shortdesc>
      Ändert den Skinstatus in „normal“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Ändert den Skinstatus in „normal“.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:CalloutButton:openDropDown"><apiName>openDropDown</apiName><shortdesc>
      Initialisiert den Dropdownbereich und ändert den Status in „open“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Initialisiert den Dropdownbereich und ändert den Skinstatus in „offen“. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:CalloutButton:calloutContent:get"><apiName>calloutContent</apiName><shortdesc>
      Die in den Inhalt des Callouts aufzunehmenden Komponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Die in den Inhalt des Callouts aufzunehmenden Komponenten.
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Callout"><linktext>spark.components.Callout</linktext></link></related-links></apiValue><apiValue id="spark.components:CalloutButton:calloutDestructionPolicy:get"><apiName>calloutDestructionPolicy</apiName><shortdesc>
      Definiert die beim Schließen des Callouts von der Callout-Schaltfläche verwendete Zerstörungsrichtlinie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>auto
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Definiert die beim Schließen des Callouts von der Callout-Schaltfläche verwendete Zerstörungsrichtlinie. Ist die Schaltfläche auf <codeph>Auto</codeph> eingestellt, zerstört sie die Callout-Instanz beim Schließen. Bei der Einstellung <codeph>Nie</codeph> wird der Callout-Container zwischengespeichert.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:calloutLayout:get"><apiName>calloutLayout</apiName><shortdesc>
      Definiert das Layout des Callout-Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>BasicLayout
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Definiert das Layout des Callout-Containers.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:callout:get"><apiName>callout</apiName><shortdesc>
      Die nach dem Abfeuern von DropDownEvent.OPEN erstellte Callout-Instanz.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="calloutChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:Callout</apiValueClassifier></apiValueDef><apiDesc>
      Die nach dem Abfeuern von <codeph>DropDownEvent.OPEN</codeph> erstellte Callout-Instanz. Die Instanz wird mithilfe des Skinteils <codeph>dropDown</codeph> <codeph>IFactory</codeph> erstellt.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#CalloutButton/calloutDestructionPolicy"><linktext>calloutDestructionPolicy</linktext></link></related-links></apiValue><apiValue id="spark.components:CalloutButton:protected:dropDownController:get"><apiName>dropDownController</apiName><shortdesc>
      Instanz der DropDownController-Klasse, das alle Benutzerinteraktionen mit Maus, Tastatur und Fokus verarbeitet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.components.supportClasses:DropDownController"/></apiValueDef><apiDesc>
      Instanz der DropDownController-Klasse, das alle Benutzerinteraktionen mit Maus, Tastatur und Fokus verarbeitet. Flex ruft die <codeph>initializeDropDownController()</codeph>-Methode auf, nachdem die DropDownController-Instanz im Konstruktor erstellt wurde.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:horizontalPosition:get"><apiName>horizontalPosition</apiName><shortdesc conref="spark.components.Callout#horizontalPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="spark.components.Callout#horizontalPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:isDropDownOpen:get"><apiName>isDropDownOpen</apiName><shortdesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:verticalPosition:get"><apiName>verticalPosition</apiName><shortdesc conref="spark.components.Callout#verticalPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="spark.components.Callout#verticalPosition">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ToggleSwitch"><apiName>ToggleSwitch</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="style" name="textAlign"/><styles><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:ToggleSwitch" playerVersion="AIR3" theme="mobile" type="uint">
<description>
  Die Farbe von Texttiefen.
 
  </description>
<default>0x000000
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textShadowAlpha" owner="spark.components:ToggleSwitch" playerVersion="AIR3" theme="mobile" type="Number">
<description>
  Das Alpha von Texttiefen.
 
  </description>
<default>0.65
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="slideDuration" owner="spark.components:ToggleSwitch" playerVersion="AIR3" type="Number">
<description>
  Die Dauer einer Miniaturanimation in Millisekunden beim Gleiten zwischen den ausgewählten und nicht ausgewählten Seiten der Spur. Für Animationen zwischen zwei willkürlichen Positionen in der Spur nimmt die Animation entsprechend weniger Zeit in Anspruch. Beispielsweise nimmt nach dem Ziehen der Miniatur über die Hälfte der Spur die Animation für die restliche Strecke nur die Hälfte der Zeit in Anspruch.
  
  </description>
<default>125
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components:ToggleSwitch" playerVersion="AIR3" type="uint">
<description>
  Farbe zur Markierung der ausgewählten Seite der ToggleSwitch-Steuerung.
  
  </description>
<default>0x3F7FBA
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/><skinParts><SkinPart name="thumb" owner="spark.components:ToggleSwitch" playerVersion="AIR3" required="false" var_type="mx.core:IVisualElement">
<description>
      Ein Skinteil, der über die Spur gezogen werden kann. Die Eigenschaft <codeph>thumbPosition</codeph> enthält die aktuelle Position der Miniatur in der Spur.
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that can be dragged along the track.</shortdesc></SkinPart><SkinPart name="track" owner="spark.components:ToggleSwitch" playerVersion="AIR3" required="false" var_type="mx.core:IVisualElement">
<description>
      Ein Skinteil, der die Grenzen definiert, an denen entlang die Miniatur gezogen werden kann.
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the bounds along which the thumb can
      be dragged.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:ToggleSwitch&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:ToggleSwitch
   <strong>Properties</strong>
    selected="null"
    thumbPosition="null"
 
   <strong>Common Styles</strong>
    accentColor="0x3F7FBA"
    slideDuration="125"
 
   <strong>Mobile Styles</strong>
    textShadowAlpha="0.65"
    textShadowColor="0x000000"
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
   Der ToggleSwitch besteht aus einem Miniatur-Skinteil, der sich ähnlich der Spark-Slider-Steuerung zwischen den beiden Enden des Spur-Skinteils bewegt.
   <p> </p>
   <p> </p>
  <p>
  <adobeimage alt="" href="../../images/ts_toggleSwitch_ts.png"/>
 </p>
   <p>  </p>
   <p>Die ToggleSwitch-Steuerung verwendet die folgenden Standardwerte für nicht ausgewählte und ausgewählte Bezeichnungen: AUS (nicht ausgewählt) und EIN (ausgewählt). Definieren Sie eine benutzerdefinierte Skin, um die Bezeichnungen oder andere visuelle Merkmale der Steuerung zu ändern.</p>
   <p/>
   <pre>
  package skins
  // components\mobile\skins\MyToggleSwitchSkin.as
  {
      import spark.skins.mobile.ToggleSwitchSkin;
      
      public class MyToggleSwitchSkin extends ToggleSwitchSkin
      {
          public function MyToggleSwitchSkin()
          {
              super();
              // Set properties to define the labels 
              // for the selected and unselected positions.
              selectedLabel="Yes";
              unselectedLabel="No"; 
          }
      }
  }
  </pre>
   </apiDesc><example conref="ToggleSwitchExample.mxml"/></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.ToggleButton.xml"><linktext>spark.components.ToggleButton</linktext></link><link href="" invalidHref="spark.components.HSlider.xml"><linktext>spark.components.HSlider</linktext></link><link href="" invalidHref="spark.skins.mobile.ToggleSwitchSkin.xml"><linktext>spark.skins.mobile.ToggleSwitchSkin</linktext></link></related-links><apiConstructor id="spark.components:ToggleSwitch:ToggleSwitch"><apiName>ToggleSwitch</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ToggleSwitch:thumbPosition:get"><apiName>thumbPosition</apiName><shortdesc>
      Die aktuelle Position der Miniatur in der Spur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die aktuelle Position der Miniatur in der Spur. Der Wertebereich liegt zwischen 0,0 (nicht ausgewählt) und 1,0 (ausgewählt).
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ToggleSwitch:selected:set"><apiName>selected</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef><apiDesc>
       <codeph/><codeph/>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:CalloutPosition"><apiName>CalloutPosition</apiName><shortdesc>
  Die Klasse CalloutPosition definiert die Aufzählung horizontaler und vertikaler Positionen der Callout-Komponente relativ zum Eigentümer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die Klasse CalloutPosition definiert die Aufzählung horizontaler und vertikaler Positionen der Callout-Komponente relativ zum Eigentümer.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Callout"><linktext>spark.components.Callout</linktext></link><link href="spark.components.xml#Callout/horizontalPosition"><linktext>spark.components.Callout.horizontalPosition</linktext></link><link href="spark.components.xml#Callout/verticalPosition"><linktext>spark.components.Callout.verticalPosition</linktext></link></related-links><apiValue id="spark.components:CalloutPosition:AFTER"><apiName>AFTER</apiName><shortdesc>
      Platziert die führende Kante der Callout-Komponente nach der abschließenden Kante des Eigentümers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>after</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Platziert die führende Kante der Callout-Komponente nach der abschließenden Kante des Eigentümers.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:AUTO"><apiName>AUTO</apiName><shortdesc>
      Platziert die Callout-Komponente auf das Äußere des Eigentümers, wobei die Callout-Komponente für die Anpassung die geringste Größenänderung erfordert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Platziert die Callout-Komponente auf das Äußere des Eigentümers, wobei die Callout-Komponente für die Anpassung die geringste Größenänderung erfordert.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:BEFORE"><apiName>BEFORE</apiName><shortdesc>
      Platziert die abschließende Kante der Callout-Komponente vor die führende Kante des Eigentümers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>before</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Platziert die abschließende Kante der Callout-Komponente vor die führende Kante des Eigentümers.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:END"><apiName>END</apiName><shortdesc>
      Platziert die abschließende Kante der Callout-Komponente an die abschließende Kante des Eigentümers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>end</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Platziert die abschließende Kante der Callout-Komponente an die abschließende Kante des Eigentümers.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:MIDDLE"><apiName>MIDDLE</apiName><shortdesc>
      Platziert das horizontalCenter der Callout-Komponente in das horizontalCenter des Eigentümers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middle</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Platziert das horizontalCenter der Callout-Komponente in das horizontalCenter des Eigentümers.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:START"><apiName>START</apiName><shortdesc>
      Platziert die führende Kante der Callout-Komponente an die führende Kante des Eigentümers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>start</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Platziert die führende Kante der Callout-Komponente an die führende Kante des Eigentümers.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:SpinnerListItemRenderer"><apiName>SpinnerListItemRenderer</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:LabelItemRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>
   Es ist ein einfacher Elementrenderer mit einer einzelnen Textkomponente
 
 </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#SpinnerList"><linktext>spark.components.SpinnerList</linktext></link></related-links><apiConstructor id="spark.components:SpinnerListItemRenderer:SpinnerListItemRenderer"><apiName>SpinnerListItemRenderer</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
            
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:DateSpinner"><apiName>DateSpinner</apiName><shortdesc>
  Die DateSpinner-Steuerung enthält eine Schnittstelle zum Aufnehmen eines bestimmten Datums oder einer bestimmten Uhrzeit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="style" name="textAlign"/><styles><style format="Color" inherit="yes" name="accentColor" owner="spark.components:DateSpinner" playerVersion="AIR3" type="uint">
<description>
  Für Datumsobjekte verwendete Farbe, die mit dem aktuellen Datum übereinstimmen. Wenn dieser Wert auf "0x0000FF" gesetzt wird und das aktuelle Datum der 1.1.2011 ist, dann werden der Monat „Januar“, das Datum „1“ und das Jahr „2011“ in blauem Text auf den Spinners angezeigt. Diese Farbe wird nicht auf Zeit-Objekte angewandt.
 
  <p/>
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:DateSpinner" playerVersion="AIR3" type="String">
<description>
  Das Gebietsschema der Komponente. Steuert die Formatierung von Daten, z. B. in welcher Reihenfolge die Felder aufgelistet werden und welche zusätzlichen datenbezogenen Zeichen angezeigt werden. Nutzt standardmäßige Gebietsschemabezeichner, wie in Unicode Technical Standard #35 beschrieben. So sind „en“, „en_US“ und „en-US“ zum Beispiel alle Englisch, „ja“ ist Japanisch. Wenn das angegebene Gebietsschema nicht von der Plattform unterstützt wird, wird „en_US“ verwendet. Mit <codeph>DateTimeFormatter.getAvailableLocaleIDNames()</codeph> können Sie bestimmen, ob ein Gebietsschema unterstützt wird.
   <p>Der Standardwert ist „undefined“. Diese Eigenschaft übernimmt ihren Wert von einem Vorgänger. Ist er immer noch „undefined“, erbt sie ihn vom globalen <codeph>locale</codeph>-Stil. </p>
   <p>Beim Einsatz der Spark-Formatierer und -Globalisierungsklassen können Sie diesen Stil in der Stammanwendung auf den Wert der <codeph>LocaleID.DEFAULT</codeph>-Konstante setzen. Diese Klassen nutzen dann die internationalen Einstellungen des Client-Betriebssystems.</p>
   </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="Number">
<description>
  Offset der ersten Textzeile links vom Container in Pixeln. Diese Eigenschaft kann keine negative Zahl sein, wenn sie im Mobile-Design verwendet wird.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird. Mögliche Werte sind <codeph>"none"</codeph> und <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="Number">
<description>
  Die Anzahl der zusätzlichen Pixel, die zwischen den Zeichen angezeigt werden. Durch einen positiven Wert wird der Zeichenabstand über den normalen Abstand hinaus vergrößert und durch einen negativen Wert verkleinert.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="Number">
<description>
  Zusätzlicher vertikaler Abstand zwischen Textzeilen.
   <p>Der Standardwert ist 0.</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird. Gültige Werte sind <codeph>normal</codeph> und <codeph>bold</codeph>. Der Standardwert für die Button-Steuerelemente ist <codeph>bold</codeph>. Der Standardwert für alle anderen Steuerelemente ist <codeph>normal</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird. Gültige Werte sind <codeph>"normal"</codeph> und <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="Number">
<description>
  Die Höhe des Texts in Pixeln. Beim Halo-Design lautet der Standardwert für alle Steuerelemente mit Ausnahme des ColorPicker-Steuerelements 10. Für das ColorPicker-Steuerelement des Halo-Designs lautet der Standardwert 11. Beim Spark-Design lautet der Standardwert für alle Steuerelemente mit Ausnahme des ColorPicker-Steuerelements 12. Für das ColorPicker-Steuerelement des Spark-Designs lautet der Standardwert 11. Der Standardwert für das Mobile-Design ist 24.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="String">
<description>
  Der Name der zu verwendenden Schriftart. Anders als in einer vollständigen CSS-Implementierung werden durch Kommas getrennte Listen nicht unterstützt. Sie können den Namen einer beliebigen Schriftartfamilie verwenden. Wenn Sie eine generische Schriftartbezeichnung wählen, wird diese in eine entsprechende Geräteschriftart konvertiert. Die Standardschriftart für das Halo-Design ist <codeph>"Verdana"</codeph>. Die Standardschriftart für das Spark-Design ist <codeph>"Arial"</codeph>. Die Standardschriftart für das Mobile-Design ist <codeph>"_sans"</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="uint">
<description>
  Farbe des Texts in der Komponente, einschließlich der Komponentenbeschriftung. Der Standardwert für das Halo-Design ist <codeph>0x0B333C</codeph>. Der Standardwert für das Spark-Design ist <codeph>0x000000</codeph>. Der Standardwert für das Mobile-Design ist <codeph>0xFFFFFF</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="dateItemList" owner="spark.components:DateSpinner" playerVersion="AIR3" required="false" var_type="mx.core:IFactory">
<description>
      Die Standard-Factory zur Erstellung von SpinnerList-Schnittstellen für alle Felder. <codeph/>
     
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      The default factory for creating SpinnerList interfaces for all fields.</shortdesc></SkinPart><SkinPart name="listContainer" owner="spark.components:DateSpinner" playerVersion="AIR3" required="false" var_type="mx.core:IVisualElementContainer">
<description>
      Der Container für die Datenteillisten.
     
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      The container for the date part lists.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DateSpinner&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DateSpinner
    <strong>Properties</strong>
    displayMode="date|time|dateAndTime"
    maxDate="null"
    minDate="null"
    minuteStepSize="1"
    selectedDate=""
 
    <strong>Styles</strong>
    accentColor="0x0099FF"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die DateSpinner-Steuerung enthält eine Schnittstelle zum Aufnehmen eines bestimmten Datums oder einer bestimmten Uhrzeit. 
 
 <p>Die DateSpinner-Steuerung kann je nach dem Wert der Eigenschaft <codeph>displayMode</codeph> Datum, Uhrzeit oder beides anzeigen.</p>
 
  <p/>
  <p>
  <adobeimage alt="" href="../../images/datespinner_types.png"/>
 </p>
 
  <p>Die Benutzeroberfläche für die Steuerung besteht aus einer Reihe von SpinnerList-Steuerungen innerhalb eines SpinnerListContainer, der das aktuell ausgewählte Datum zeigt. Durch Antippen oder mithilfe der Maus kann der Benutzer das ausgewählte Datum verändern.</p>
 
  <p>Die DateSpinnerSkin definiert nur einige Eigenschaften zur Größenfestlegung. Um das Aussehen der DateSpinner-Steuerung zu ändern, würden Sie üblicherweise die zugrunde liegende SpinnerListSkin oder SpinnerListContainerSkin neu zuweisen.</p>
 
  </apiDesc><example conref="DateSpinnerExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#SpinnerList"><linktext>spark.components.SpinnerList</linktext></link><link href="spark.components.calendarClasses.xml#DateSpinnerItemRenderer"><linktext/></link><link href="" invalidHref="spark.skins.mobile.DateSpinnerSkin.xml"><linktext/></link></related-links><adobeApiEvent id="spark.components:DateSpinner_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  Wird ausgelöst, wenn das ausgewählte Datum geändert wurde, entweder vom Benutzer (d. h.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn das ausgewählte Datum geändert wurde, entweder vom Benutzer (d. h. interaktiv) oder programmatisch.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DateSpinner_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Wird ausgelöst, wenn das ausgewählte Datum vom Benutzer geändert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn das ausgewählte Datum vom Benutzer geändert wurde.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DateSpinner:DateSpinner"><apiName>DateSpinner</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:DateSpinner:protected:createDateItemList"><apiName>createDateItemList</apiName><shortdesc>
      Erstellen Sie ein Listenobjekt für den angegebenen Datumsteil.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>
     </apiDesc><apiOperationClassifier>spark.components:SpinnerList</apiOperationClassifier></apiReturn><apiParam><apiItemName>datePart</apiItemName><apiType value="String"/><apiDesc>Verwenden Sie Datumsteilkonstanten, wie z. B. YEAR_ITEM.
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>
      </apiDesc></apiParam><apiParam><apiItemName>itemCount</apiItemName><apiType value="int"/><apiDesc>
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Erstellen Sie ein Listenobjekt für den angegebenen Datumsteil.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:DateSpinner:protected:DATE_ITEM"><apiName>DATE_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>dateItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:HOUR_ITEM"><apiName>HOUR_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>hourItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:MERIDIAN_ITEM"><apiName>MERIDIAN_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>meridianItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:MINUTE_ITEM"><apiName>MINUTE_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>minuteItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:MONTH_ITEM"><apiName>MONTH_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>monthItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:YEAR_ITEM"><apiName>YEAR_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>yearItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:dateList"><apiName>dateList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:hourList"><apiName>hourList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:meridianList"><apiName>meridianList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:minuteList"><apiName>minuteList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:monthList"><apiName>monthList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:yearList"><apiName>yearList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:displayMode:get"><apiName>displayMode</apiName><shortdesc>
      Aktuell von DateSpinner verwendeter Anzeigemodus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>DateSelectorDisplayMode.DATE
      </apiDefaultValue></apiValueDef><apiDesc>
      Aktuell von DateSpinner verwendeter Anzeigemodus. Sie können diesen Wert mit den in der Klasse DateSelectorDisplayMode definierten Konstanten oder den entsprechenden Strings füllen.
     
      <p>In der folgenden Tabelle werden mögliche Werte beschrieben:
         <adobetable class="innertable">
         
         
         
         
         <tgroup cols="2"><thead><row><entry>Modus (String-Äquivalent)</entry><entry>Beschreibung</entry></row></thead><tbody><row><entry><codeph>DateSelectorDisplayMode.DATE</codeph> ("date")</entry><entry>Zeigt Monat, Tag und Jahr an. Dies ist der Standardmodus.</entry></row><row><entry><codeph>DateSelectorDisplayMode.TIME</codeph> ("time")</entry><entry>Zeigt Wochentag, Monat, Tag und Datum an.</entry></row><row><entry><codeph>DateSelectorDisplayMode.DATE_AND_TIME</codeph> ("dateAndTime")</entry><entry>Zeigt Stunden und Minuten und, wenn vom Gebietsschema unterstützt, den AM/PM-Selektor an.</entry></row></tbody></tgroup></adobetable>
       </p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.components.calendarClasses.DateSelectorDisplayMode.xml"><linktext>spark.components.calendarClasses.DateSelectorDisplayMode</linktext></link></related-links></apiValue><apiValue id="spark.components:DateSpinner:maxDate:get"><apiName>maxDate</apiName><shortdesc>
      Maximal auswählbares Datum; nur dieses Datum und davor liegende Daten können ausgewählt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>Dec 31st, 9999
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Maximal auswählbares Datum; nur dieses Datum und davor liegende Daten können ausgewählt werden.
     
      <p/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:minDate:get"><apiName>minDate</apiName><shortdesc>
      Minimal auswählbares Datum; nur dieses Datum und davor liegende Daten können ausgewählt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>January 1st, 1601
      </apiDefaultValue></apiValueDef><apiDesc>
      Minimal auswählbares Datum; nur dieses Datum und davor liegende Daten können ausgewählt werden.
     
      <p/>
     
      <p/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:minuteStepSize:get"><apiName>minuteStepSize</apiName><shortdesc>
      Für die Anzeige von Minuten zu verwendendes Minutenintervall.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>1
      </apiDefaultValue></apiValueDef><apiDesc>
      Für die Anzeige von Minuten zu verwendendes Minutenintervall. Gilt nur für die Modi TIME und DATE_AND_TIME. Gültige Werte müssen gleichmäßig auf 60 verteilt werden können; bei ungültigen Werte wird das Standardintervall 1 wiederhergestellt. Zum Beispiel werden bei einem Wert von „15“ die Werte 0, 15, 30, 45 angezeigt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:selectedDate:get"><apiName>selectedDate</apiName><shortdesc>
      Aktuell in der DateSpinner-Steuerung ausgewähltes Datum.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>the current date
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Aktuell in der DateSpinner-Steuerung ausgewähltes Datum.
     
      <p> </p>
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Callout"><apiName>Callout</apiName><shortdesc>
  Der Callout-Container ist ein SkinnablePopUpContainer, der als Pop-up mit zusätzlichen eigentümerbezogenen Positionierungsoptionen ähnlich dem PopUpAnchor fungiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><styles><style enumeration="inset,flat,none" inherit="no" name="contentBackgroundAppearance" owner="spark.components:Callout" playerVersion="AIR3" type="String">
<description>
  Aussehen von <codeph>contentGroup</codeph>. <codeph/><codeph/><codeph/>
   <p>In ActionScript können Sie folgende Konstanten verwenden, um diese Eigenschaft festzulegen: <codeph>ContentBackgroundAppearance.INSET</codeph>, <codeph>ContentBackgroundAppearance.FLAT</codeph> und <codeph>ContentBackgroundAppearance.NONE</codeph>.</p>
   </description>
<default>ContentBackgroundAppearance.INSET
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="arrow" owner="spark.components:Callout" playerVersion="AIR3" required="false" var_type="mx.core:UIComponent">
<description>
      Ein optionales Skinteil, das den Eigentümer mit der contentGroup visuell verbindet.
           </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that visually connects the owner to the
      contentGroup.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Callout&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Callout
    <strong>Properties</strong>
    horizontalPosition="auto"
    verticalPosition="auto"
     <strong>Styles</strong>
    contentBackgroundAppearance="inset"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnablePopUpContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der Callout-Container ist ein SkinnablePopUpContainer, der als Pop-up mit zusätzlichen eigentümerbezogenen Positionierungsoptionen ähnlich dem PopUpAnchor fungiert. Callout fügt außerdem einen optionalen Skinteil <codeph>Pfeil</codeph> hinzu, mit dem die Richtung zum Eigentümer grafisch dargestellt wird.
   <p/>
  <p>
  <adobeimage alt="" href="../../images/ca_calloutViewNav_ca.png"/>
 </p>
   <p>Mit der CalloutButton-Steuerung können Sie auch einen Callout-Container öffnen. Die CalloutButton-Steuerung wird in einer einzigen Steuerung, dem CalloutContainer und der erforderlichen Logik zum Öffnen und Schließen des Callout eingeschlossen. Anschließend gilt die CalloutButton-Steuerung als Eigentümer oder Host des Callout zu sein.</p>
   <p>Callout verwendet die Eigenschaften <codeph>horizontalPosition</codeph> und <codeph>verticalPosition</codeph>, um die Position des Callout relativ zum Eigentümer zu ermitteln, die von der Methode <codeph>open()</codeph> vorgegeben wird. Beide Eigenschaften können auf <codeph>CalloutPosition.AUTO</codeph> eingestellt wenden, wodurch eine Position aufgrund des Breitenverhältnisses des Bildschirms für den Callout ausgewählt wird, um eine Anpassung an die minimale Überlappung mit dem Eigentümer und die minimalen Anpassungen an die Bildschirmgrenzen zu ermöglichen.</p>
   <p>Nach der Positionierung positioniert der Callout den Pfeil auf der Seite neben dem Eigentümer, so nahe wie möglich an der horizontalen oder vertikalen Mitte des Eigentümers. Der Pfeil ist ausgeblendet, wenn die Callout-Position nicht an einer Kante liegt.</p>
   <p>Sie erstellen keinen Callout-Container im Rahmen des normalen Layouts seiner übergeordneten Container. Stattdessen wird er als Popup-Container über dem übergeordneten Element angezeigt. Daher erstellen Sie ihn nicht direkt im MXML-Code der Anwendung.</p>
   <p>Stattdessen erstellen Sie ihn als MXML-Komponente, häufig in einer separaten MXML-Datei. Erstellen Sie zum Anzeigen der Komponente eine Instanz der MXML-Komponente und rufen Sie die <codeph>open()</codeph>-Methode auf. Sie können auch die Größe und Position der Komponente festlegen, wenn Sie sie öffnen.</p>
   <p>Rufen Sie zum Schließen der Komponente die <codeph>close()</codeph>-Methode auf. Wenn das Popup Daten an eine Prozedur zurückgeben muss, können Sie einen Ereignis-Listener für das <codeph>PopUp.CLOSE</codeph>-Ereignis hinzufügen und die zurückgegebenen Daten in der <codeph>close()</codeph>-Methode festlegen.</p>
   <p>Der Callout befindet sich anfänglich im Skinstatus <codeph>closed</codeph>. Wenn er geöffnet wird, fügt er sich selbst als Popup dem PopUpManager hinzu und nimmt den <codeph>normal</codeph>-Skinstatus ein. Verwenden Sie zum Definieren von offenen und geschlossenen Animationen eine benutzerdefinierte Skin mit Übergängen zwischen den <codeph>closed</codeph>- und <codeph>normal</codeph>-Status.</p>
 
  <p>Callout ändert das von Flex-Komponenten bekannte Standardverhalten für Vererbungen und übernimmt stattdessen Stile aus der Annwendung der obersten Ebene. Dies verhindert, dass die Inhalte des Callout versehentlich Stile von einem Eigentümer (z. B. Schaltfläche oder Texteingabe) übernehmen, obwohl das Standardaussehen gewünscht und erwartet wurde.</p>
   <p>Der Callout-Container weist folgende Standardmerkmale auf:</p>
     <adobetable class="innertable">
     
     
     
     
     
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row><entry>Standardgröße</entry><entry>Groß genug, um seine untergeordneten Elemente anzuzeigen.</entry></row><row><entry>Minimale Größe</entry><entry>0 Pixel</entry></row><row><entry>Maximale Größe</entry><entry>10000 Pixel breit und 10000 Pixel hoch</entry></row><row><entry>Standardskinklasse</entry><entry>spark.skins.mobile.CalloutSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="CalloutExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#CalloutButton"><linktext>spark.components.CalloutButton</linktext></link><link href="" invalidHref="spark.skins.mobile.CalloutSkin.xml"><linktext>spark.skins.mobile.CalloutSkin</linktext></link><link href="spark.components.xml#ContentBackgroundAppearance"><linktext>spark.components.ContentBackgroundAppearance</linktext></link><link href="spark.components.xml#CalloutPosition"><linktext>spark.components.CalloutPosition</linktext></link></related-links><apiConstructor id="spark.components:Callout:Callout"><apiName>Callout</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
           </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Callout:protected:updateSkinDisplayList"><apiName>updateSkinDisplayList</apiName><shortdesc>
      Definiert die Grenzen des Pfeils, dessen Geometrie nicht vollständig durch das Skinlayout angegeben ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Definiert die Grenzen des <codeph>Pfeils</codeph>, dessen Geometrie nicht vollständig durch das Skinlayout angegeben ist.
           <p>Unterklassen können diese Methode überschreiben, um die Größe, Position und Sichtbarkeit des Pfeils, basierend auf der berechneten <codeph>arrowDirection</codeph>, zu aktualisieren.</p>
           <p>Standardmäßig richtet diese Methode den Pfeil an der kürzeren Grenze der <codeph>arrow</codeph>-Grenze oder <codeph>owner</codeph>-Grenze aus. Diese Implementierung geht davon aus, dass der <codeph>Pfeil</codeph> und die Callout-Skin einen gemeinsamen Koordinatenraum nutzen.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:Callout:protected:actualHorizontalPosition:get"><apiName>actualHorizontalPosition</apiName><shortdesc>
      Die voll aufgelöste horizontale Position nach der Bewertung von CalloutPosition.AUTO.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Die voll aufgelöste horizontale Position nach der Bewertung von CalloutPosition.AUTO.
     
      <p>Aktualisieren Sie diese Eigenschaft in <codeph>commitProperties()</codeph>, wenn <codeph>horizontalPosition</codeph> CalloutPosition.AUTO ist. <codeph/></p> 
      
      <p>Unterklassen sollten diese Eigenschaft bei der Berechnung von <codeph>arrowDirection</codeph>, der Pfeilposition in <codeph>updateSkinDisplayList()</codeph>, lesen.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Callout:protected:actualVerticalPosition:get"><apiName>actualVerticalPosition</apiName><shortdesc>
      Die voll aufgelöste vertikale Position nach der Bewertung von CalloutPosition.AUTO.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Die voll aufgelöste vertikale Position nach der Bewertung von CalloutPosition.AUTO.
     
      <p>Aktualisieren Sie diese Eigenschaft in <codeph>commitProperties()</codeph>, wenn <codeph>verticalPosition</codeph> CalloutPosition.AUTO ist. <codeph/></p> 
      
      <p>Unterklassen sollten diese Eigenschaft bei der Berechnung von <codeph>arrowDirection</codeph>, der Pfeilposition in <codeph>updateSkinDisplayList()</codeph>, lesen.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Callout:arrowDirection:get"><apiName>arrowDirection</apiName><shortdesc>
      Eine schreibgeschützte Eigenschaft, die die Richtung von der Callout-Komponente zum Eigentümer angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/><apiDefaultValue>none
           </apiDefaultValue></apiValueDef><apiDesc>
      Eine schreibgeschützte Eigenschaft, die die Richtung von der Callout-Komponente zum Eigentümer angibt.
           <p>Dieser Wert wird basierend auf der Position der Callout-Komponente, die von der <codeph>horizontalPosition</codeph> und der <codeph>verticalPosition</codeph> angegeben wird, berechnet. Äußere und innere Positionen zeigen von der Callout-Komponente in Richtung der Kante des Eigentümers. Eck- und absolute Mittelpositionenen werden nicht unterstützt und geben den Wert <codeph>"none".</codeph> zurück.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ArrowDirection"><linktext>spark.components.ArrowDirection</linktext></link></related-links></apiValue><apiValue id="spark.components:Callout:horizontalPosition:get"><apiName>horizontalPosition</apiName><shortdesc>
      Horizontale Position der Callout-Komponente relativ zum Eigentümer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>CalloutPosition.AUTO
      </apiDefaultValue></apiValueDef><apiDesc>
      Horizontale Position der Callout-Komponente relativ zum Eigentümer.
           <p>Mögliche Werte sind <codeph>"before"</codeph>, <codeph>"start"</codeph>, <codeph>"middle"</codeph>, <codeph>"end"</codeph>, <codeph>"after"</codeph> und <codeph>"auto"</codeph> (Standard).</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#CalloutPosition"><linktext>spark.components.CalloutPosition</linktext></link></related-links></apiValue><apiValue id="spark.components:Callout:verticalPosition:get"><apiName>verticalPosition</apiName><shortdesc>
      Vertikale Position der Callout-Komponente relativ zum Eigentümer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>CalloutPosition.AUTO
      </apiDefaultValue></apiValueDef><apiDesc>
      Vertikale Position der Callout-Komponente relativ zum Eigentümer.
           <p>Mögliche Werte sind <codeph>"before"</codeph>, <codeph>"start"</codeph>, <codeph>"middle"</codeph>, <codeph>"end"</codeph>, <codeph>"after"</codeph> und <codeph>"auto"</codeph> (Standard).</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#CalloutPosition"><linktext>spark.components.CalloutPosition</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:ViewMenu"><apiName>ViewMenu</apiName><shortdesc>
  Der ViewMenu-Container definiert ein Menü in einem View-Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="disabledAndLandscape" owner="spark.components:ViewMenu" playerVersion="AIR2.5">
<description>
  Disabled- und Querformatstatus
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="closedAndLandscape" owner="spark.components:ViewMenu" playerVersion="AIR2.5">
<description>
  Closed- und Querformatstatus
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="normalAndLandscape" owner="spark.components:ViewMenu" playerVersion="AIR2.5">
<description>
  Normal- und Querformatstatus
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="items"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components:SkinnablePopUpContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der ViewMenu-Container definiert ein Menü in einem View-Container. Jedes Menüelement wird mithilfe des ViewMenuItem-Steuerelements definiert. Der Anwendungscontainer erstellt automatisch einen ViewMenu-Container und zeigt diesen an, wenn der Benutzer die auf Menütaste des Geräts drückt. Sie können auch die <codeph>ViewNavigatorApplicationBase.viewMenuOpen</codeph>-Eigenschaft verwenden, um das Menü durch Programmierung zu öffnen.
 
  <p/>
 
 <p>
  <adobeimage alt="" href="../../images/vm_open_menu_vm.png"/>
 </p>
 
  <p>Die ViewMenuLayout-Klasse definiert das Layout des Menüs. Sie können auch Ihre eigene benutzerdefinierte Layoutklasse erstellen.</p>
 
  <p>Definieren Sie die Menüelemente, indem Sie die <codeph>View.viewMenuItems</codeph>-Eigenschaft wie im folgenden Beispiel verwenden:</p>
  
  <pre>
  &lt;s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
      xmlns:s="library://ns.adobe.com/flex/spark" 
      title="Home"> 
 
    ...
 
    &lt;s:viewMenuItems> 
        &lt;s:ViewMenuItem label="Add" click="itemClickInfo(event);"/> 
        &lt;s:ViewMenuItem label="Cancel" click="itemClickInfo(event);"/> 
        &lt;s:ViewMenuItem label="Delete" click="itemClickInfo(event);"/> 
        &lt;s:ViewMenuItem label="Edit" click="itemClickInfo(event);"/> 
        &lt;s:ViewMenuItem label="Search" click="itemClickInfo(event);"/> 
    &lt;/s:viewMenuItems>
 
  &lt;/s:View>
  </pre>
 
  <p>Beachten Sie, dass Sie den ViewMenu-Container nicht ausdrücklich in MXML definieren. Der ViewMenu-Container wird automatisch erstellt, um die ViewMenuItem-Steuerelemente unterzubringen.</p>
  
  </apiDesc><example conref="ViewMenuExampleHome.mxml"/><example conref="ViewMenuExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#ViewMenuItem"><linktext>spark.components.ViewMenuItem</linktext></link><link href="spark.layouts.xml#ViewMenuLayout"><linktext>spark.layouts.ViewMenuLayout</linktext></link><link href="spark.components.supportClasses.xml#ViewNavigatorApplicationBase"><linktext>spark.components.supportClasses.ViewNavigatorApplicationBase</linktext></link><link href="" invalidHref="spark.skins.mobile.ViewMenuSkin.xml"><linktext>spark.skins.mobile.ViewMenuSkin</linktext></link></related-links><apiConstructor id="spark.components:ViewMenu:ViewMenu"><apiName>ViewMenu</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ViewMenu:caretIndex:get"><apiName>caretIndex</apiName><shortdesc>
      Das Menüelement, das sich zurzeit im Einfügezeichenstatus befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Das Menüelement, das sich zurzeit im Einfügezeichenstatus befindet. Der Wert „-1“ bedeutet, dass sich kein Element im Einfügezeichenstatus befindet.  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewMenu:items:get"><apiName>items</apiName><shortdesc>
      Der Vektor von ViewMenuItem-Steuerelementen, der im ViewMenu-Container angezeigt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components:ViewMenuItem"/></apiValueDef><apiDesc>
      Der Vektor von ViewMenuItem-Steuerelementen, der im ViewMenu-Container angezeigt werden soll.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TabbedViewNavigator"><apiName>TabbedViewNavigator</apiName><shortdesc>
  Die TabbedViewNavigator-Klasse ist ein Container, der eine Sammlung von Ansichtsnavigatorcontainern verwaltet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="tabBar" owner="spark.components:TabbedViewNavigator" playerVersion="AIR2.5" required="false" var_type="spark.components.supportClasses:ButtonBarBase">
<description>
      Ein Skinteil, das die Registerkartenleiste des Navigators definiert. 
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the tab bar of the navigator.</shortdesc></SkinPart></skinParts></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ISelectableList</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die TabbedViewNavigator-Klasse ist ein Container, der eine Sammlung von Ansichtsnavigatorcontainern verwaltet. Nur ein Ansichtsnavigator ist jeweils aktiv und sichtbar. Diese Klasse enthält ein TabBar-Steuerelement, das zwischen der Sammlung von Ansichtsnavigatoren umschalten kann.  
   <p/>
  <p>
  <adobeimage alt="" href="../../images/tvn_sections_with_ab_tvn.png"/>
 </p>
   <p>Der TabbedViewNavigatorApplication-Container erstellt automatisch einen einzelnen TabbedViewNavigator-Container für die gesamte Anwendung. Sie können mithilfe der <codeph>navigator</codeph>-Eigenschaft des TabbedViewNavigatorApplication-Containers auf das TabbedViewNavigator-Objekt verweisen.</p>
 
  <p>Der aktive oder ausgewählte Navigator kann durch Klicken auf den entsprechenden Tabulator auf der TabBar oder durch Ändern der <codeph>selectedIndex</codeph>-Eigenschaft der Komponente geändert werden.</p>
 
  <p>Der Inhalt eines untergeordneten Ansichtsnavigators wird bei Deaktivierung gelöscht und bei Aktivierung dynamisch erstellt.</p>  
 
  </apiDesc><example conref="TabbedViewNavigatorExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#View"><linktext>spark.components.View</linktext></link><link href="spark.components.xml#ViewNavigator"><linktext>spark.components.ViewNavigator</linktext></link><link href="" invalidHref="spark.components.TabBar.xml"><linktext>spark.components.TabBar</linktext></link></related-links><adobeApiEvent id="spark.components:TabbedViewNavigator_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  Wird ausgelöst, wenn die ausgewählte Indexposition des Ansichtsnavigators geändert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die ausgewählte Indexposition des Ansichtsnavigators geändert wurde. Wenn dieses Ereignis ausgelöst wird, verweisen die <codeph>selectedIndex</codeph>- und <codeph>selectedNavigator</codeph>-Eigenschaften auf den neu ausgewählten Ansichtsnavigator.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TabbedViewNavigator_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  Wird ausgelöst, wenn die Sammlung der vom TabbedViewNavigator verwalteten Ansichtsnavigatoren geändert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die Sammlung der vom TabbedViewNavigator verwalteten Ansichtsnavigatoren geändert wurde.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TabbedViewNavigator_spark.events.IndexChangeEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  Wird ausgelöst, bevor der ausgewählte Ansichtsnavigator geändert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, bevor der ausgewählte Ansichtsnavigator geändert wird. Durch Abbrechen dieses Ereignisses wird verhindert, dass der aktive Ansichtsnavigator geändert wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TabbedViewNavigator_spark.events.IndexChangeEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Wird ausgelöst, wenn sich der aktuelle Ansichtsnavigator infolge einer Änderung der selectedIndex-Eigenschaft oder der Registerkarte im TabBar-Steuerelement ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich der aktuelle Ansichtsnavigator infolge einer Änderung der <codeph>selectedIndex</codeph>-Eigenschaft oder der Registerkarte im TabBar-Steuerelement ändert.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:TabbedViewNavigator:TabbedViewNavigator"><apiName>TabbedViewNavigator</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:TabbedViewNavigator:addItemAt"><apiName>addItemAt</apiName><shortdesc>
      Fügt den Ansichtsnavigator an der angegebenen Indexposition hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn die Indexposition kleiner als 0 oder größer als die Länge ist.
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Der hinzuzufügende Ansichtsnavigator. Er muss die <codeph>ViewNavigatorBase</codeph>-Klasse erweitern.
           </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition, an der das Element platziert werden soll.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt den Ansichtsnavigator an der angegebenen Indexposition hinzu. Alle nach dieser Indexposition platzierten Ansichtsnavigatoren werden um eine Stelle nach unten verschoben.  
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ViewNavigatorBase"><linktext>spark.components.supportClasses.ViewNavigatorBase</linktext></link></related-links></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:addItem"><apiName>addItem</apiName><shortdesc>
      Fügt den angegebenen Ansichtsnavigator am Ende der Liste hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Der hinzuzufügende Ansichtsnavigator. Er muss die <codeph>ViewNavigatorBase</codeph>-Klasse erweitern.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt den angegebenen Ansichtsnavigator am Ende der Liste hinzu. Entspricht dem Aufrufen von <codeph>addItemAt(item, length);</codeph>. 
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ViewNavigatorBase"><linktext>spark.components.supportClasses.ViewNavigatorBase</linktext></link></related-links></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:protected:createTabBarHideEffect"><apiName>createTabBarHideEffect</apiName><shortdesc>
      Erstellt den wiederzugebenden Effekt, wenn das TabBar-Steuerelement ausgeblendet ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Ein wiederzugebender Effekt, wenn das TabBar-Steuerelement ausgeblendet ist.
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn></apiOperationDef><apiDesc>
      Erstellt den wiederzugebenden Effekt, wenn das TabBar-Steuerelement ausgeblendet ist. Der erzeugte Effekt sorgt für die Animierung der TabBar und der Inhaltsgruppe des Navigators.
     
      <p>TabbedViewNavigator erwartet, dass die <codeph>includeInLayout</codeph>- und <codeph>visible</codeph>-Eigenschaften der TabBar nach dem Ausführen dieses Effekts auf <codeph>false</codeph> gesetzt sind.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:protected:createTabBarShowEffect"><apiName>createTabBarShowEffect</apiName><shortdesc>
      Erstellt den wiederzugebenden Effekt, wenn das TabBar-Steuerelement angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Ein wiederzugebender Effekt, wenn das TabBar-Steuerelement erscheint.
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn></apiOperationDef><apiDesc>
      Erstellt den wiederzugebenden Effekt, wenn das TabBar-Steuerelement angezeigt wird. Der erzeugte Effekt sorgt für die Animierung der TabBar und der Inhaltsgruppe des Navigators.
     
      <p>TabbedViewNavigator erwartet, dass die <codeph>includeInLayout</codeph>- und <codeph>visible</codeph>-Eigenschaften der TabBar nach dem Ausführen dieses Effekts auf <codeph>true</codeph> gesetzt sind.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:getItemAt"><apiName>getItemAt</apiName><shortdesc>
      Ruft das Ansichtsnavigatorobjekt an der angegebenen Indexposition ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn Indexposition &lt; 0 oder Indexposition >= Länge.
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Der Navigator an der angegebenen Indexposition oder „null“, wenn keiner vorhanden ist.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition in der Liste, aus der das Element abgerufen werden soll.
     
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Gibt sowohl die Richtung als auch die Anzahl von Elementen an, die während der Anforderung abgerufen werden sollen, wenn das Element nicht lokal ist.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ruft das Ansichtsnavigatorobjekt an der angegebenen Indexposition ab.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:getItemIndex"><apiName>getItemIndex</apiName><shortdesc>
      Gibt die Indexposition des Ansichtsnavigators zurück, wenn er sich in der Liste von Ansichtsnavigatoren befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Indexposition des Ansichtsnavigators oder „-1“, wenn das Element nicht in der Liste enthalten ist.
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das zu suchende Ansichtsnavigatorobjekt.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die Indexposition des Ansichtsnavigators zurück, wenn er sich in der Liste von Ansichtsnavigatoren befindet. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:hideTabBar"><apiName>hideTabBar</apiName><shortdesc>
      Blendet die Registerkartenleiste des Navigators aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>animate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Gibt an, ob beim Ausblenden der Registerkartenleiste ein Hide-Effekt wiedergegeben werden soll.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Blendet die Registerkartenleiste des Navigators aus.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      Benachrichtigt externe Komponenten, dass eine Eigenschaft in einem Navigator aktualisiert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Der Ansichtsnavigator, der aktualisiert wurde.
           </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Ein String, QName oder int-Wert für die Angabe der aktualisierten Eigenschaft.
           </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Der alte Wert dieser Eigenschaft. Wenn die Eigenschaft „null“ war, kann dies der alte Wert des Elements sein.
           </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Der neue Wert dieser Eigenschaft. Wenn die Eigenschaft „null“ war, muss der Wert nicht angegeben werden, da davon ausgegangen wird, dass das Element den neuen Wert hat.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Benachrichtigt externe Komponenten, dass eine Eigenschaft in einem Navigator aktualisiert wurde.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:removeAll"><apiName>removeAll</apiName><shortdesc>
      Entfernt alle untergeordneten Ansichtsnavigatoren aus dem Navigator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Entfernt alle untergeordneten Ansichtsnavigatoren aus dem Navigator.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:removeItemAt"><apiName>removeItemAt</apiName><shortdesc>
      Entfernt den Ansichtsnavigator an der angegebenen Indexposition und gibt ihn zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn index &lt; 0 oder index >= Länge.
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Das entfernte Element.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition, an der das Element entfernt werden soll.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Entfernt den Ansichtsnavigator an der angegebenen Indexposition und gibt ihn zurück. Die Indexposition aller nach dieser Indexposition platzierten Elemente werden um eine Stelle herabgesetzt.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:setItemAt"><apiName>setItemAt</apiName><shortdesc>
      Fügt den Ansichtsnavigator an der angegebenen Indexposition hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn die Indexposition kleiner als 0 oder größer als oder gleich der Länge ist.
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Der Navigator, der ersetzt wurde, oder null, wenn keiner ersetzt wurde.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Der Ansichtsnavigator, der an der Indexposition platziert werden soll.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition, an der der Navigator platziert werden soll.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt den Ansichtsnavigator an der angegebenen Indexposition hinzu. Wenn sich bereits ein Element an dieser Indexposition befindet, wird es vom neuen Element ersetzt und zurückgegeben.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:showTabBar"><apiName>showTabBar</apiName><shortdesc>
      Blendet die Registerkartenleiste des Navigators ein.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>animate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Gibt an, ob beim Anzeigen der Registerkartenleiste ein Show-Effekt wiedergegeben werden soll.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Blendet die Registerkartenleiste des Navigators ein.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:toArray"><apiName>toArray</apiName><shortdesc>
      Gibt ein Array zurück, das in derselben Reihenfolge gefüllt wird wie die IList-Implementierung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das Array.
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Gibt ein Array zurück, das in derselben Reihenfolge gefüllt wird wie die IList-Implementierung. 
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:TabbedViewNavigator:length:get"><apiName>length</apiName><shortdesc>
      Die Anzahl der von dieser Komponente verwalteten untergeordneten Ansichtsnavigatoren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Die Anzahl der von dieser Komponente verwalteten untergeordneten Ansichtsnavigatoren.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TabbedViewNavigator:navigators:get"><apiName>navigators</apiName><shortdesc>
      Die Ansichtsnavigatoren, die von diesem TabbedViewNavigator verwaltet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components.supportClasses:ViewNavigatorBase"/></apiValueDef><apiDesc>
      Die Ansichtsnavigatoren, die von diesem TabbedViewNavigator verwaltet werden. Jeder Ansichtsnavigator wird als Registerkarte in der Registerkartenleiste dieses TabbedViewNavigator dargestellt. Es kann jeweils nur ein Ansichtsnavigator aktiv sein. Sie können auf diesen aktiven Ansichtsnavigator mithilfe der <codeph>selectedNavigator</codeph>-Eigenschaft verweisen.
     
      <p>Wenn diese Eigenschaft geändert wird, wird der aktuelle Ansichtsnavigator entfernt und der <codeph>selectedIndex</codeph> auf 0 gesetzt. Dieser Vorgang kann nicht abgebrochen werden und wird sofort übernommen.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TabbedViewNavigator:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      Die auf null basierende Indexposition des ausgewählten Ansichtsnavigators oder „-1“, wenn keiner ausgewählt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Die auf null basierende Indexposition des ausgewählten Ansichtsnavigators oder „-1“, wenn keiner ausgewählt ist. Durch Festlegen der <codeph>selectedIndex</codeph>-Eigenschaft wird die Auswahl des aktuell ausgewählten Navigators aufgehoben und der Navigator an der angegebenen Indexposition ausgewählt.
           <p>Der Wert liegt immer zwischen -1 und (<codeph>navigators.length</codeph> - 1). Wenn Elemente an einer niedrigeren Indexposition als <codeph>selectedIndex</codeph> aus der Komponente entfernt werden, wird die ausgewählte Indexposition entsprechend nach unten angepasst.</p>
           <p>Wenn das ausgewählte Element entfernt wird, wird die ausgewählte Indexposition auf Folgendes gesetzt:</p>
           <ul>
        <li>-1 wenn keine Elemente übrig sind.</li>
        <li><codeph>selectedIndex</codeph> - 1, wenn mindestens ein Element vorhanden ist.</li>
      </ul>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TabbedViewNavigator:selectedNavigator:get"><apiName>selectedNavigator</apiName><shortdesc>
      Der ausgewählte Ansichtsnavigator für den TabbedViewNavigator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components.supportClasses:ViewNavigatorBase</apiValueClassifier></apiValueDef><apiDesc>
      Der ausgewählte Ansichtsnavigator für den TabbedViewNavigator. Es kann jeweils nur ein Ansichtsnavigator aktiv sein. Der aktive Ansichtsnavigator kann festgelegt werden, indem die <codeph>selectedIndex</codeph>-Eigenschaft geändert oder eine Registerkarte im TabBar-Steuerelement ausgewählt wird.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ContentBackgroundAppearance"><apiName>ContentBackgroundAppearance</apiName><shortdesc>
  Die ContentBackgroundAppearance-Klasse definiert die Konstanten für die zulässigen Werte des contentBackgroundAppearance-Stils des Callout.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ContentBackgroundAppearance-Klasse definiert die Konstanten für die zulässigen Werte des <codeph>contentBackgroundAppearance</codeph>-Stils des Callout.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Callout/style:contentBackgroundAppearance"><linktext>spark.components.Callout.contentBackgroundAppearance</linktext></link></related-links><apiValue id="spark.components:ContentBackgroundAppearance:FLAT"><apiName>FLAT</apiName><shortdesc>
      Wendet Maske auf die contentGroup an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>flat</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Wendet Maske auf die contentGroup an.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ContentBackgroundAppearance:INSET"><apiName>INSET</apiName><shortdesc>
      Wendet Tiefen und Maske auf die contentGroup an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>inset</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Wendet Tiefen und Maske auf die contentGroup an.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ContentBackgroundAppearance:NONE"><apiName>NONE</apiName><shortdesc>
      Deaktiviert contentBackgroundColor-Stil und contentGroup-Masken.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Deaktiviert den <codeph>contentBackgroundColor</codeph>-Stil und contentGroup-Masken. Diesen Wert verwenden, wenn der Inhalt von Callout direkt über <codeph>backgroundColor</codeph> angezeigt wird oder wenn Inhalte über eigene Masken verfügen. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ActionBarDefaultButtonAppearance"><apiName>ActionBarDefaultButtonAppearance</apiName><shortdesc>
  Die ActionBarDefaultButtonAppearance-Klasse definiert die Konstanten für die zulässigen Werte des defaultButtonAppearance-Stils der ActionBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ActionBarDefaultButtonAppearance-Klasse definiert die Konstanten für die zulässigen Werte des <codeph>defaultButtonAppearance</codeph>-Stils der ActionBar.
  
  </apiDesc></apiClassifierDetail><apiValue id="spark.components:ActionBarDefaultButtonAppearance:BEVELED"><apiName>BEVELED</apiName><shortdesc>
      Legt abgeflachte und undurchsichtige Schaltflächenskins für die Verwendung von Schaltflächen in Navigations- und Aktionsinhaltsgruppen fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>beveled</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Legt abgeflachte und undurchsichtige Schaltflächenskins für die Verwendung von Schaltflächen in Navigations- und Aktionsinhaltsgruppen fest.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ActionBarDefaultButtonAppearance:NORMAL"><apiName>NORMAL</apiName><shortdesc>
      Legt durchsichtige Schaltflächenskins für die Verwendung von Schaltflächen in Navigations- und Aktionsinhaltsgruppen fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Legt durchsichtige Schaltflächenskins für die Verwendung von Schaltflächen in Navigations- und Aktionsinhaltsgruppen fest.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:View"><apiName>View</apiName><shortdesc>
  Die View-Klasse ist die Basiscontainerklasse für alle von Ansichtsnavigatoren verwendeten Ansichten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><Exclude kind="property" name="z"/><Exclude kind="property" name="scaleZ"/><Exclude kind="property" name="scaleY"/><Exclude kind="property" name="scaleX"/><Exclude kind="property" name="maxWidth"/><Exclude kind="property" name="minWidth"/><Exclude kind="property" name="width"/><Exclude kind="property" name="maxHeight"/><Exclude kind="property" name="minHeight"/><Exclude kind="property" name="height"/><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:View&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:View
   <strong>Properties</strong>
    actionBarVisible="true"
    actionContent="null"
    actionLayout="null"
    data="null"
    destructionPolicy="auto"
    navigationContent="null"
    navigationLayout="null"
    overlayControls="false"
    tabBarVisible="true"
    title=""
    titleContent="null"
    titleLayout="null"
    viewMenuItems="null"
 
   <strong>Events</strong>
    backKeyPressed="<i>No default</i>"
    dataChange="<i>No default</i>"
    menuKeyPressed="<i>No default</i>"
    removing="<i>No default</i>"
    viewActivate="<i>No default</i>"
    viewDeactivate="<i>No default</i>"
 
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die View-Klasse ist die Basiscontainerklasse für alle von Ansichtsnavigatoren verwendeten Ansichten. Der View-Container erweitert den Group-Container und fügt zusätzliche Eigenschaften hinzu, die für die Kommunikation mit seinem übergeordneten Navigator verwendet werden.
   <p>In einer Mobilanwendung zeigt der Inhaltsbereich der Anwendung die einzelnen Fenster (oder Ansichten) an, aus denen die Anwendung besteht. Benutzer navigieren durch die Ansichten der Anwendung mithilfe des Touchscreens, der in der Anwendung integrierten Komponenten und der Eingabetasten des Mobilgeräts.</p>
   <p/>
  <p>
  <adobeimage alt="" href="../../images/vn_single_section_home_vn.png"/>
 </p>
   <p>Jede Ansicht in einer Anwendung entspricht einem View-Container, der in einer ActionScript- oder MXML-Datei definiert ist. Jede View enthält eine <codeph>data</codeph>-Eigenschaft, die die mit dieser Ansicht verküpften Daten festlegt. Views können mithilfe der <codeph>data</codeph>-Eigenschaft Informationen untereinander weitergeben, während der Benutzer in der Anwendung navigiert.</p>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ViewNavigator"><linktext>ViewNavigator</linktext></link></related-links><adobeApiEvent id="spark.components:View_spark.events.ViewNavigatorEvent.REMOVING_removing"><apiName>removing</apiName><shortdesc>
  Wird ausgelöst, wenn der Bildschirm als Reaktion auf eine Bildschirmänderung entfernt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ViewNavigatorEvent.REMOVING</apiEventType><adobeApiEventClassifier>spark.events.ViewNavigatorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Bildschirm als Reaktion auf eine Bildschirmänderung entfernt werden soll. Durch Aufrufen von <codeph>preventDefault()</codeph> während der Verarbeitung dieses Ereignisses wird die Bildschirmänderung abgebrochen.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_spark.events.ViewNavigatorEvent.VIEW_DEACTIVATE_viewDeactivate"><apiName>viewDeactivate</apiName><shortdesc>
  Wird ausgelöst, wenn die aktuelle Ansicht deaktiviert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ViewNavigatorEvent.VIEW_DEACTIVATE</apiEventType><adobeApiEventClassifier>spark.events.ViewNavigatorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die aktuelle Ansicht deaktiviert wurde.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_spark.events.ViewNavigatorEvent.VIEW_ACTIVATE_viewActivate"><apiName>viewActivate</apiName><shortdesc>
  Wird ausgelöst, wenn die aktuelle Ansicht aktiviert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ViewNavigatorEvent.VIEW_ACTIVATE</apiEventType><adobeApiEventClassifier>spark.events.ViewNavigatorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die aktuelle Ansicht aktiviert wurde.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_mx.events.FlexEvent.MENU_KEY_PRESSED_menuKeyPressed"><apiName>menuKeyPressed</apiName><shortdesc>
  Wird beim Drücken der Menütaste ausgelöst, wenn in einer Mobilanwendung eine Ansicht vorhanden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.MENU_KEY_PRESSED</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird beim Drücken der Menütaste ausgelöst, wenn in einer Mobilanwendung eine Ansicht vorhanden ist.
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Wird ausgelöst, wenn sich die Data-Eigenschaft verändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich die <codeph>data</codeph>-Eigenschaft verändert
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_mx.events.FlexEvent.BACK_KEY_PRESSED_backKeyPressed"><apiName>backKeyPressed</apiName><shortdesc>
  Wird beim Drücken der Zurücktaste ausgelöst, wenn in einer Mobilanwendung eine Ansicht vorhanden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.BACK_KEY_PRESSED</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird beim Drücken der Zurücktaste ausgelöst, wenn in einer Mobilanwendung eine Ansicht vorhanden ist.
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:View:View"><apiName>View</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:View:createReturnObject"><apiName>createReturnObject</apiName><shortdesc>
      Erstellt ein Objekt, das an den Ansichtsnavigator zurückgegeben wird, wenn diese Ansicht vom Navigatorstapel aus eingeblendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Wert, der in das <codeph>object</codeph>-Feld der <codeph>ViewNavigator.poppedViewReturnedObject</codeph>-Eigenschaft geschrieben wurde.  
           </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Erstellt ein Objekt, das an den Ansichtsnavigator zurückgegeben wird, wenn diese Ansicht vom Navigatorstapel aus eingeblendet wird.
           <p>Überschreiben Sie diese Methode in einer View, um Daten an die neue Ansicht zurückzugeben, wenn diese Ansicht vom Navigatorstapel aus eingeblendet wird. Die <codeph>createReturnObject()</codeph>-Methode gibt ein einzelnes Objekt zurück. Das von dieser Methode zurückgegebene Objekt wird in die <codeph>ViewNavigator.poppedViewReturnedObject</codeph>-Eigenschaft geschrieben. </p>
           <p>Die <codeph>ViewNavigator.poppedViewReturnedObject</codeph>-Eigenschaft ist ein ViewReturnObject-Typ. Die <codeph>ViewReturnObject.object</codeph>-Eigenschaft enthält den von dieser Methode zurückgegebenen Wert. </p>
           <p>Wenn die <codeph>poppedViewReturnedObject</codeph>-Eigenschaft „null“ ist, wurden keine Daten zurückgegeben. Die <codeph>poppedViewReturnedObject</codeph>-Eigenschaft wird in der neuen Ansicht festgelegt, bevor die neue Ansicht das <codeph>add</codeph>-Ereignis empfängt.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#ViewNavigator/poppedViewReturnedObject"><linktext>ViewNavigator.poppedViewReturnedObject</linktext></link><link href="spark.components.supportClasses.xml#ViewReturnObject"><linktext>spark.components.supportClasses.ViewReturnObject</linktext></link></related-links></apiOperation><apiOperation id="spark.components:View:deserializeData"><apiName>deserializeData</apiName><shortdesc>
      Deserialisiert ein Datenobjekt, das von der Ansicht normalerweise durch das Aufrufen der serializeData()-Methode auf dem Datenträger gespeichert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Wert, der der <codeph>data</codeph>-Eigenschaft der Ansicht zugewiesen ist.
          
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Das zu deserialisierende Datenobjekt.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Deserialisiert ein Datenobjekt, das von der Ansicht normalerweise durch das Aufrufen der <codeph>serializeData()</codeph>-Methode auf dem Datenträger gespeichert wurde.  
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:View:getCurrentViewState"><apiName>getCurrentViewState</apiName><shortdesc>
      Überprüft das Seitenverhältnis der Bühne und gibt den ordnungsgemäßen Status, in den die View wechseln soll, zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein String, der den Namen des auf die Ansicht anzuwendenden Status angibt. Die möglichen Rückgabewerte sind <codeph>"portrait"</codeph> oder <codeph>"landscape"</codeph>. Der Status wird nur geändert, wenn der gewünschte Status in der View vorhanden ist. Wenn er nicht vorhanden ist, gibt diese Methode den aktuellen Status der Komponente zurück.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Überprüft das Seitenverhältnis der Bühne und gibt den ordnungsgemäßen Status, in den die View wechseln soll, zurück.  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:View:serializeData"><apiName>serializeData</apiName><shortdesc>
      Zuständig für das Serialisieren der data-Eigenschaft der Ansicht, wenn diese dauerhaft auf dem Datenträger gespeichert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das serialisierte Datenobjekt.
     
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Zuständig für das Serialisieren der <codeph>data</codeph>-Eigenschaft der Ansicht, wenn diese dauerhaft auf dem Datenträger gespeichert wird. Das zurückgegebene Objekt muss etwas sein, das auf ein gemeinsames Objekt geschrieben werden kann. Standardmäßig gibt diese Methode die <codeph>data</codeph>-Eigenschaft der Ansicht zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:View:actionBarVisible:get"><apiName>actionBarVisible</apiName><shortdesc>
      Gibt an, ob in einer Ansicht die Aktionsleiste angezeigt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, ob in einer Ansicht die Aktionsleiste angezeigt werden soll. Diese Eigenschaft hängt nicht zwingend mit der <codeph>visible</codeph>-Eigenschaft des ActionBar-Steuerelements des Ansichtsnavigators zusammen. 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:actionContent:get"><apiName>actionContent</apiName><shortdesc conref="ActionBar#actionContent">
      Diese Eigenschaft überschreibt die actionContent-Eigenschaft in den ActionBar-, ViewNavigator- und ViewNavigatorApplication-Komponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionContent">
      Diese Eigenschaft überschreibt die <codeph>actionContent</codeph>-Eigenschaft in den ActionBar-, ViewNavigator- und ViewNavigatorApplication-Komponenten.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionContent"><linktext>ActionBar.actionContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:View:actionLayout:get"><apiName>actionLayout</apiName><shortdesc conref="ActionBar#actionLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:data:get"><apiName>data</apiName><shortdesc>
      Die mit der aktuellen Ansicht verknüpften Daten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Die mit der aktuellen Ansicht verknüpften Daten. Diese Eigenschaft verwenden Sie, um Informationen an die View zu übergeben, wenn diese auf den Navigatorstapel verschoben wird. Sie können diese Eigenschaft festlegen, indem Sie ein <codeph>data</codeph>-Argument an die <codeph>pushView()</codeph>-Methode übergeben. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:destructionPolicy:get"><apiName>destructionPolicy</apiName><shortdesc>
      Definiert die Richtlinie zum Löschen, die der Navigator der Ansicht verwenden sollte, wenn diese Ansicht entfernt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>auto
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Definiert die Richtlinie zum Löschen, die der Navigator der Ansicht verwenden sollte, wenn diese Ansicht entfernt wird. Falls auf „auto“ eingestellt, löscht der Navigator die Ansicht, wenn sie nicht aktiv ist. Falls auf „never“ eingestellt, wird die Ansicht im Speicher zwischengespeichert.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:isActive:get"><apiName>isActive</apiName><shortdesc>
      Gibt an, ob die aktuelle Ansicht aktiv ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, ob die aktuelle Ansicht aktiv ist. Der Navigator der Ansicht setzt dieses Flag automatisch auf <codeph>true</codeph> oder <codeph>false</codeph>, wenn der Status geändert wird. Wenn diese Eigenschaft festgelegt wird, können die <codeph>viewActivate</codeph> oder <codeph>viewDeactivate</codeph>-Ereignisse ausgelöst werden. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:navigationContent:get"><apiName>navigationContent</apiName><shortdesc conref="ActionBar#navigationContent">
      Diese Eigenschaft überschreibt die navigationContent-Eigenschaft in den ActionBar-, ViewNavigator- und ViewNavigatorApplication-Komponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationContent">
      Diese Eigenschaft überschreibt die <codeph>navigationContent</codeph>-Eigenschaft in den ActionBar-, ViewNavigator- und ViewNavigatorApplication-Komponenten.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationContent"><linktext>ActionBar.navigationContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:View:navigationLayout:get"><apiName>navigationLayout</apiName><shortdesc conref="ActionBar#navigationLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:navigator:get"><apiName>navigator</apiName><shortdesc>
     Der Ansichtsnavigator, in dem sich diese Ansicht befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="navigatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:ViewNavigator</apiValueClassifier></apiValueDef><apiDesc>
     Der Ansichtsnavigator, in dem sich diese Ansicht befindet.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:overlayControls:get"><apiName>overlayControls</apiName><shortdesc>
      Standardmäßig definieren die TabBar- und ActionBar-Steuerelemente einer Mobilanwendung einen Bereich, der von den Ansichten einer Anwendung nicht verwendet werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Standardmäßig definieren die TabBar- und ActionBar-Steuerelemente einer Mobilanwendung einen Bereich, der von den Ansichten einer Anwendung nicht verwendet werden kann. Das bedeutet, dass der Inhalt nicht den Vollbildmodus des mobilen Geräts nutzen kann. Wenn diese Eigenschaft auf <codeph>true</codeph>, gesetzt wird, erstreckt sich der Inhaltsbereich der Anwendung über die gesamte Breite und Höhe des Bildschirms. Das ActionBar-Steuerelement und das TabBar-Steuerelement werden mit einem <codeph>Alpha</codeph>wert von 0,5 über dem Inhaltsbereich angezeigt, sodass sie teilweise transparent sind. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:tabBarVisible:get"><apiName>tabBarVisible</apiName><shortdesc>
      Gibt an, ob in einer Ansicht die Registerkartenleiste angezeigt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, ob in einer Ansicht die Registerkartenleiste angezeigt werden soll. Diese Eigenschaft hängt nicht zwingend mit der <codeph>visible</codeph>-Eigenschaft des TabBar-Steuerelements des Navigators zusammen. 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:titleContent:get"><apiName>titleContent</apiName><shortdesc conref="ActionBar#titleContent">
      Diese Eigenschaft überschreibt die titleContent-Eigenschaft in den ActionBar-, ViewNavigator- und ViewNavigatorApplication-Komponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleContent">
      Diese Eigenschaft überschreibt die <codeph>titleContent</codeph>-Eigenschaft in den ActionBar-, ViewNavigator- und ViewNavigatorApplication-Komponenten.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>ActionBar.titleContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:View:titleLayout:get"><apiName>titleLayout</apiName><shortdesc conref="ActionBar#titleLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:title:get"><apiName>title</apiName><shortdesc conref="ActionBar#title">
      Diese Eigenschaft überschreibt die title-Eigenschaft in den ActionBar-, ViewNavigator- und ViewNavigatorApplication-Komponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#title">
      Diese Eigenschaft überschreibt die <codeph>title</codeph>-Eigenschaft in den ActionBar-, ViewNavigator- und ViewNavigatorApplication-Komponenten.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:viewMenuItems:get"><apiName>viewMenuItems</apiName><shortdesc>
      Der Vektor von ViewMenuItem-Objekten, die an das ViewMenu übergeben werden, wenn diese View die aktive Ansicht ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components:ViewMenuItem"/></apiValueDef><apiDesc>
      Der Vektor von ViewMenuItem-Objekten, die an das ViewMenu übergeben werden, wenn diese View die aktive Ansicht ist. 
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ViewMenu"><linktext>ViewMenu</linktext></link><link href="spark.components.xml#ViewMenuItem"><linktext>ViewMenuItem</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:ArrowDirection"><apiName>ArrowDirection</apiName><shortdesc>
  Zusammenfassung von Pfeilrichtungen zur Verwendung in visuellen Komponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Zusammenfassung von Pfeilrichtungen zur Verwendung in visuellen Komponenten.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Callout/arrowDirection"><linktext>spark.components.Callout.arrowDirection</linktext></link></related-links><apiValue id="spark.components:ArrowDirection:DOWN"><apiName>DOWN</apiName><shortdesc>
      Pfeil zeigt nach unten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>down</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Pfeil zeigt nach unten.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ArrowDirection:LEFT"><apiName>LEFT</apiName><shortdesc>
      Pfeil zeigt nach links.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Pfeil zeigt nach links.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ArrowDirection:NONE"><apiName>NONE</apiName><shortdesc>
      Keine Pfeilrichtung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Keine Pfeilrichtung.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ArrowDirection:RIGHT"><apiName>RIGHT</apiName><shortdesc>
      Pfeil zeigt nach rechts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Pfeil zeigt nach rechts.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ArrowDirection:UP"><apiName>UP</apiName><shortdesc>
      Pfeil zeigt nach oben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>up</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Pfeil zeigt nach oben.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:BusyIndicator"><apiName>BusyIndicator</apiName><shortdesc>
  Der BusyIndicator definiert eine Komponente, die angezeigt wird, wenn ein langer Vorgang verarbeitet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:BusyIndicator" playerVersion="AIR2.5" theme="spark,mobile" type="uint">
<description>
  Farbe der Speichen des Spinner.
   
  </description>
<default>0x000000
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="rotationInterval" owner="spark.components:BusyIndicator" playerVersion="AIR2.5" type="Number">
<description>
  Das Verzögerungsintervall in Millisekunden zwischen Rotationen dieser Komponente. Steuert die Geschwindigkeit, mit der sich diese Komponente dreht. 
 
  </description>
<default>50
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
   
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:BusyIndicator&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:BusyIndicator
    <strong>Common Styles</strong>
    rotationInterval=50
 
    <strong>Spark Styles</strong>
    symbolColor="0x000000"
  
    <strong>Mobile Styles</strong>
    symbolColor="0x000000"
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der BusyIndicator definiert eine Komponente, die angezeigt wird, wenn ein langer Vorgang verarbeitet wird. Diese Komponente erstellt einen Spinner mit zwölf Speichen. Die Farbe der Speichen wird durch den Wert des <codeph>symbolColor</codeph>-Stils gesteuert. Die Transparenz dieser Komponente kann mit der <codeph>alpha</codeph>-Eigenschaft geändert werden; der Alphawert der einzelnen Speichen kann jedoch nicht geändert werden.
   <p/>
  <p>
  <adobeimage alt="" href="../../images/bi_busy_indicator_bi.png"/>
 </p>
 
  <p>Die Geschwindigkeit, mit der sich diese Komponente dreht, wird durch den <codeph>rotationInterval</codeph>-Stil gesteuert. Der <codeph>rotationInterval</codeph>-Stil legt die Verzögerung zwischen Rotationen in Millisekunden fest. Verringern Sie den <codeph>rotationInterval</codeph>-Wert, um die Geschwindigkeit der Rotation zu erhöhen.</p>
 
  <p>Der BusyIndicator weist folgende Standardmerkmale auf:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row><entry>Standardgröße</entry><entry>160 DPI: 26 x 26 Pixel 240 DPI: 40 x 40 Pixel 320 DPI: 52 x 52 Pixel</entry></row><row><entry>Minimale Größe</entry><entry>20 x 20 Pixel</entry></row><row><entry>Maximale Größe</entry><entry>Keine Beschränkung</entry></row></tbody></tgroup></adobetable>
  
  <p>Der Durchmesser des BusyIndicator-Spinner besteht aus der Mindestbreite und -höhe der Komponente. Der Durchmesser muss eine gerade Zahl sein; wenn eine ungerade Zahl angegeben wird, wird 1 abgezogen.</p>
 
  </apiDesc><example conref="BusyIndicatorExample.mxml"/><example conref="BusyIndicatorExampleHomeView.mxml"/></apiClassifierDetail><apiConstructor id="spark.components:BusyIndicator:BusyIndicator"><apiName>BusyIndicator</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:ActionBar"><apiName>ActionBar</apiName><shortdesc>
  Die ActionBar-Klasse definiert eine Komponente, die Titel-, Navigations- und Aktionsinhaltsgruppen enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="titleContentWithActionAndNavigation" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  ActionBar mit für den <codeph>titleContent</codeph>-Skinteil definiertem Inhalt und Komponenten für die Anzeige im <codeph>actionGroup</codeph>-Skinteil sowie im <codeph>navigationGroup</codeph>-Skinteil.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleContentWithNavigation" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  ActionBar mit Inhalt im <codeph>titleContent</codeph>-Skinteil und Komponenten, die in der <codeph>navigationContent</codeph>-Eigenschaft für eine Anzeige im <codeph>navigationGroup</codeph>-Skinteil definiert sind.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleContentWithAction" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  ActionBar mit Inhalt im <codeph>titleContent</codeph>-Skinteil und Komponenten, die in der <codeph>actionContent</codeph>-Eigenschaft für eine Anzeige im <codeph>actionGroup</codeph>-Skinteil definiert sind.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleContent" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  ActionBar mit Inhalt im <codeph>titleContent</codeph>-Skinteil, aber nicht im <codeph>titleDisplay</codeph>-Skinteil.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleWithActionAndNavigation" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  ActionBar mit für den <codeph>titleDisplay</codeph>-Skinteil definiertem Inhalt und Komponenten für die Anzeige im <codeph>actionGroup</codeph>-Skinteil sowie im <codeph>navigationGroup</codeph>-Skinteil.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleWithNavigation" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  ActionBar mit für den <codeph>titleDisplay</codeph>-Skinteil definiertem Inhalt und Komponenten, die in der <codeph>navigationContent</codeph>-Eigenschaft für die Anzeige im <codeph>navigationGroup</codeph>-Skinteil definiert sind.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleWithAction" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  ActionBar mit für den <codeph>titleDisplay</codeph>-Skinteil definiertem Inhalt und Komponenten, die in der <codeph>actionContent</codeph>-Eigenschaft für die Anzeige im <codeph>actionGroup</codeph>-Skinteil definiert sind.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="title" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  Basisstatus der ActionBar mit <codeph>titleDisplay</codeph>-Skinteil und keinem Inhalt
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style enumeration="normal,beveled" inherit="no" name="defaultButtonAppearance" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="String">
<description>
  Aussehen von Schaltflächen in Navigations- und Aktionsgruppen. Gültige MXML-Werte sind <codeph>normal</codeph> und <codeph>beveled</codeph>.
   <p>In ActionScript können Sie folgende Konstanten verwenden, um diese Eigenschaft festzulegen: <codeph>ActionBarDefaultButtonAppearance.NORMAL</codeph> und <codeph>ActionBarDefaultButtonAppearance.BEVELED</codeph>.</p>
   </description>
<default>ActionBarDefaultButtonAppearance.NORMAL
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textShadowAlpha" owner="spark.components:ActionBar" playerVersion="AIR1.5" theme="mobile" type="Number">
<description>
  Alpha von Textschatten.
 
  </description>
<default>0.55
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:ActionBar" playerVersion="AIR1.5" theme="mobile" type="uint">
<description>
  Farbe von Textschatten.
 
  </description>
<default>0xFFFFFF
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Anzahl von Pixeln zwischen dem oberen Rand und allen Inhaltsgruppen.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Anzahl von Pixeln zwischen dem linken Rand und der actionGroup.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Anzahl von Pixeln zwischen dem linken Rand und der navigationGroup.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Anzahl von Pixeln zwischen dem unteren Rand und allen Inhaltsgruppen.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>
<default>0x70B2EE
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="Number">
<description conref="spark.components.SkinnableContainer#style:contentBackgroundAlpha">
  </description>
<default>1.0
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="Number">
<description conref="spark.components.SkinnableContainer#style:backgroundAlpha">
  </description>
<default>1.0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:accentColor">
  </description>
<default>0x0099FF
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="left,right,center" inherit="no" name="titleAlign" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="String">
<description>
  Ausrichtung des Titels relativ zu den ActionBar-Abmessungen. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"right"</codeph> und <codeph>"center"</codeph>.
 
  </description>
<default>"center"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Offset der ersten Textzeile links vom Container in Pixeln. Diese Eigenschaft kann keine negative Zahl sein, wenn sie im Mobile-Design verwendet wird.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird. Mögliche Werte sind <codeph>"none"</codeph> und <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  Ausrichtung von Text in einem Container. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"right"</codeph> oder <codeph>"center"</codeph>.
 
  <p>Der Standardwert für die meisten Steuerelemente ist <codeph>„left“</codeph>. Für die FormItem-Komponente ist der Standardwert <codeph>„right“</codeph>. Für die Button-, LinkButton- und AccordionHeader-Komponenten ist der Standardwert <codeph>„center“</codeph>, und diese Eigenschaft wird nur erkannt, wenn die <codeph>labelPlacement</codeph>-Eigenschaft auf <codeph>„left“</codeph> oder <codeph>„right“</codeph> eingestellt ist. Wenn <codeph>labelPlacement</codeph> auf <codeph>"top"</codeph> oder <codeph>"bottom"</codeph> gesetzt wird, werden der Text und eventuell vorhandene Symbole zentriert.</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Die Anzahl der zusätzlichen Pixel, die zwischen den Zeichen angezeigt werden. Durch einen positiven Wert wird der Zeichenabstand über den normalen Abstand hinaus vergrößert und durch einen negativen Wert verkleinert.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Zusätzlicher vertikaler Abstand zwischen Textzeilen.
   <p>Der Standardwert ist 0.</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird. Gültige Werte sind <codeph>normal</codeph> und <codeph>bold</codeph>. Der Standardwert für die Button-Steuerelemente ist <codeph>bold</codeph>. Der Standardwert für alle anderen Steuerelemente ist <codeph>normal</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird. Gültige Werte sind <codeph>"normal"</codeph> und <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Die Höhe des Texts in Pixeln. Beim Halo-Design lautet der Standardwert für alle Steuerelemente mit Ausnahme des ColorPicker-Steuerelements 10. Für das ColorPicker-Steuerelement des Halo-Designs lautet der Standardwert 11. Beim Spark-Design lautet der Standardwert für alle Steuerelemente mit Ausnahme des ColorPicker-Steuerelements 12. Für das ColorPicker-Steuerelement des Spark-Designs lautet der Standardwert 11. Der Standardwert für das Mobile-Design ist 24.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  Der Name der zu verwendenden Schriftart. Anders als in einer vollständigen CSS-Implementierung werden durch Kommas getrennte Listen nicht unterstützt. Sie können den Namen einer beliebigen Schriftartfamilie verwenden. Wenn Sie eine generische Schriftartbezeichnung wählen, wird diese in eine entsprechende Geräteschriftart konvertiert. Die Standardschriftart für das Halo-Design ist <codeph>"Verdana"</codeph>. Die Standardschriftart für das Spark-Design ist <codeph>"Arial"</codeph>. Die Standardschriftart für das Mobile-Design ist <codeph>"_sans"</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="uint">
<description>
  Farbe des Texts in der Komponente, einschließlich der Komponentenbeschriftung. Der Standardwert für das Halo-Design ist <codeph>0x0B333C</codeph>. Der Standardwert für das Spark-Design ist <codeph>0x000000</codeph>. Der Standardwert für das Mobile-Design ist <codeph>0xFFFFFF</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="navigationGroup" owner="spark.components:ActionBar" playerVersion="AIR2.5" required="false" var_type="spark.components:Group">
<description>
      Der Skinteil, der das Aussehen des Navigationsbereichs der Komponente definiert. Standardmäßig definiert die ActionBarSkin-Klasse den Navigationsbereich, sodass er rechts vom Titelbereich erscheint.
           </description>


	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      navigation area of the component.</shortdesc><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></SkinPart><SkinPart name="titleGroup" owner="spark.components:ActionBar" playerVersion="AIR2.5" required="false" var_type="spark.components:Group">
<description>
      Der Skinteil, der das Aussehen des Titelbereichs der Komponente definiert. Standardmäßig definiert die ActionBarSkin-Klasse den Titelbereich, sodass er zwischen dem Navigations- und dem Aktionsbereich erscheint.
           </description>


	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      title area of the component.</shortdesc><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></SkinPart><SkinPart name="actionGroup" owner="spark.components:ActionBar" playerVersion="AIR2.5" required="false" var_type="spark.components:Group">
<description>
      Der Skinteil, der das Aussehen des Aktionsbereichs der Komponente definiert. Standardmäßig definiert die ActionBarSkin-Klasse den Aktionsbereich so, dass er rechts vom Titelbereich erscheint.
           </description>


	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      action area of the component.</shortdesc><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></SkinPart><SkinPart name="titleDisplay" owner="spark.components:ActionBar" playerVersion="AIR2.5" required="false" var_type="spark.core:IDisplayText">
<description>
      Der Skinteil, der das Aussehen des Titeltexts in der Komponente definiert. Sie können CSS verwenden, um Stile im titleDisplay-Skinteil der ActionBar zu deklarieren, wie im folgenden Beispiel gezeigt wird:
      
      <pre>
      @namespace s "library://ns.adobe.com/flex/spark"; 
      s|ActionBar #titleDisplay { 
         color:red; 
      }
     </pre>
     
      </description>


	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      title text in the component.</shortdesc><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:ActionBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:ActionBar
   <strong>Properties</strong>
    actionContent="null"
    actionLayout="HorizontalLayout"
    navigationContent="null"
    navigationLayout="HorizontalLayout"
    title=""
    titleContent="null"
    titleLayout="HorizontalLayout"
 
   <strong>Common Styles</strong>
    color="<i>Theme dependent</i>"
    fontFamily="<i>Theme dependent</i>"
    fontSize="<i>Theme dependent</i>"
    fontStyle="normal"
    fontWeight="normal"
    leading="0"
    letterSpacing="0"
    textAlign="center"
    textDecoration="none"
    textIndent="0"
 
   <strong>Mobile Styles</strong>
    accentColor="0x0099FF"
    backgroundAlpha="1.0"
    color="<i>Theme dependent</i>"
    contentBackgroundAlpha="1.0"
    contentBackgroundColor="0xFFFFFF"
    focusColor="0x70B2EE"
    textShadowAlpha="0.55"
    textShadowColor="0xFFFFFF"
    titleAlign="center"
 
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ActionBar-Klasse definiert eine Komponente, die Titel-, Navigations- und Aktionsinhaltsgruppen enthält. Das ActionBar-Steuerelement stellt einen Standardbereich für die Navigations- und Aktionssteuerelemente bereit. Damit können Sie globale Steuerelemente, die von einer beliebigen Stelle in der Anwendung verwendet werden können, oder Steuerelemente für eine bestimmte Ansicht definieren. 
   <p>Das ActionBar-Steuerelement definiert drei unterschiedliche Bereiche: </p>
   <ul>
    <li>Navigationsbereich
        <p>Enthält Komponenten, mit denen der Benutzer im Abschnitt navigieren kann. Beispiel: Sie können eine „Home“-Schaltfläche im Navigationsbereich festlegen. Mit der <codeph>navigationContent</codeph>-Eigenschaft definieren Sie die Komponenten, die im Navigationsbereich erscheinen. Mit der <codeph>navigationLayout</codeph>-Eigenschaft definieren Sie das Layout des Navigationsbereichs. </p></li>
     <li>Titelbereich
         <p>Enthält entweder einen String mit dem Titeltext oder Komponenten. Wenn Sie Komponenten angeben, können Sie keinen Titelstring angeben. Mit der<codeph>title</codeph>-Eigenschaft können Sie den String angeben, der im Titelbereich erscheinen soll. Mit der <codeph>titleContent</codeph>-Eigenschaft definieren Sie die Komponenten, die im Titelbereich erscheinen. Mit der <codeph>titleLayout</codeph>-Eigenschaft definieren Sie das Layout des Titelbereichs. Wenn Sie einen Wert für die <codeph>titleContent</codeph>-Eigenschaft angeben, ignoriert die ActionBar-Skin die <codeph>title</codeph>-Eigenschaft.</p></li> 
      <li>Aktionsbereich 
         <p>Enthält Komponenten, die Aktionen definieren, die ein Benutzer in einer Ansicht vornehmen kann. Beispiel: Sie können eine Such- oder Aktualisierungsschaltfläche als Teil des Aktionsbereichs definieren. Mit der <codeph>actionContent</codeph>-Eigenschaft definieren Sie die Komponenten, die im Titelbereich erscheinen. Mit der <codeph>actionLayout</codeph>-Eigenschaft definieren Sie das Layout des Aktionsbereichs.</p></li>
  </ul>
   <p/>
  <p>
  <adobeimage alt="" href="../../images/ab_search_override_ab.png"/>
 </p>
   <p>Bei Mobilanwendungen mit einem einzelnen Abschnitt, d. h. einem einzelnen ViewNavigator-Container, benutzen alle Ansichten die gleiche Aktionsleiste. Bei Mobilanwendungen mit Abschnitten, also mit mehreren ViewNavigator-Containern, definiert jeder Abschnitt seine eigene Aktionsleiste.</p>
   </apiDesc><example conref="ActionBarExample2.mxml"/><example conref="ActionBarExample3.mxml"/><example conref="ActionBarExampleHomeView.mxml"/></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.SkinnableContainer.xml"><linktext>spark.components.SkinnableContainer</linktext></link><link href="spark.components.xml#ViewNavigator"><linktext>ViewNavigator</linktext></link><link href="spark.components.xml#View"><linktext>Ansicht</linktext></link><link href="spark.components.xml#ViewNavigatorApplication"><linktext>ViewNavigatorApplication</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links><apiConstructor id="spark.components:ActionBar:ActionBar"><apiName>ActionBar</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ActionBar:actionContent:get"><apiName>actionContent</apiName><shortdesc>
      Komponenten, die Aktionen definieren, die ein Benutzer in einer Ansicht vornehmen kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Komponenten, die Aktionen definieren, die ein Benutzer in einer Ansicht vornehmen kann. Diese Komponenten erscheinen unter Verwendung des <codeph>actionGroup</codeph>-Skinteils im Aktionsbereich des Steuerelements. 
     
      <p>Die Position und das Aussehen des <codeph>actionGroup</codeph>-Skinteils wird durch die ActionBarSkin-Klasse bestimmt. Die standardmäßige ActionBarSkin-Klasse definiert die <codeph>actionGroup</codeph> so, dass sie rechts vom Titelanzeigenbereich der ActionBar erscheint.</p>
     
      <p>Erstellen Sie eine benutzerdefinierte Skinklasse, um die Standardposition und das Standardaussehen des <codeph>actionGroup</codeph>-Skinteils zu ändern.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link><link href="spark.components.xml#ActionBar/actionLayout"><linktext>actionLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:actionLayout:get"><apiName>actionLayout</apiName><shortdesc>
      Definiert das Layout der im Aktionsbereich von der actionGroup-Eigenschaft definierten Komponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>HorizontalLayout
           </apiDefaultValue></apiValueDef><apiDesc>
      Definiert das Layout der im Aktionsbereich von der <codeph>actionGroup</codeph>-Eigenschaft definierten Komponenten.
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionContent"><linktext>actionContent</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:navigationContent:get"><apiName>navigationContent</apiName><shortdesc>
      Die Komponenten, die die Navigation für den Benutzer definieren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Die Komponenten, die die Navigation für den Benutzer definieren. Diese Komponenten erscheinen unter Verwendung des <codeph>navigationGroup</codeph>-Skinteils im Navigationsbereich des Steuerelements. 
           <p>Die Position und das Aussehen des <codeph>navigationGroup</codeph>-Skinteils wird durch die ActionBarSkin-Klasse bestimmt. Die standardmäßige ActionBarSkin-Klasse definiert die <codeph>navigationGroup</codeph> so, dass sie links vom <codeph>titleGroup</codeph>-Bereich der ActionBar erscheint.</p>
     
      <p>Erstellen Sie eine benutzerdefinierte Skinklasse, um die Standardposition und das Standardaussehen des <codeph>navigationGroup</codeph>-Skinteils zu ändern.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link><link href="spark.components.xml#ActionBar/navigationLayout"><linktext>navigationLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:navigationLayout:get"><apiName>navigationLayout</apiName><shortdesc>
      Definiert das Layout der im navigationGroup-Skinteil enthaltenen Komponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>HorizontalLayout
           </apiDefaultValue></apiValueDef><apiDesc>
      Definiert das Layout der im <codeph>navigationGroup</codeph>-Skinteil enthaltenen Komponenten.
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationContent"><linktext>navigationContent</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:titleContent:get"><apiName>titleContent</apiName><shortdesc>
      Die Komponenten, die im Titelbereich des Steuerelements erscheinen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Die Komponenten, die im Titelbereich des Steuerelements erscheinen. Diese Komponenten erscheinen im <codeph>titleGroup</codeph>-Skinteil des ActionBar-Steuerelements.
           <p>Die Position und das Aussehen des <codeph>titleGroup</codeph>-Skinteils wird durch die ActionBarSkin-Klasse bestimmt. Standardmäßig definiert die ActionBarSkin-Klasse die <codeph>titleGroup</codeph> so, dass sie in der Mitte der ActionBar erscheint, indem der verbleibende Platz zwischen <codeph>navigationGroup</codeph>- und <codeph>actionGroup</codeph>-Skinteil verwendet wird.</p>
     
      <p>Wenn <codeph>titleContent</codeph> null ist, wird der <codeph>titleDisplay</codeph>-Skinteil, falls vorhanden, an der Stelle des <codeph>titleGroup</codeph>-Skinteils angezeigt.</p> 
     
      <p>Erstellen Sie eine benutzerdefinierte ActionBarSkin-Skinklasse, um die Standardposition und das Standardaussehen des <codeph>titleGroup</codeph>-Skinteils zu ändern.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link><link href="spark.components.xml#ActionBar/title"><linktext>title</linktext></link><link href="spark.components.xml#ActionBar/titleLayout"><linktext>titleLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:titleLayout:get"><apiName>titleLayout</apiName><shortdesc>
      Definiert das Layout des titleGroup- und titleDisplay-Skinteils.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>HorizontalLayout
      </apiDefaultValue></apiValueDef><apiDesc>
      Definiert das Layout des <codeph>titleGroup</codeph>- und <codeph>titleDisplay</codeph>-Skinteils.
     
      <p>Wenn die<codeph>titleContent</codeph>-Eigenschaft null ist, wird der <codeph>titleDisplay</codeph>-Skinteil an der Stelle des <codeph>titleGroup</codeph>-Skinteils angezeigt. Der <codeph>titleDisplay</codeph>-Skinteil wird in der Mitte des ActionBar-Steuerelements platziert, indem die <codeph>paddingLeft</codeph>- und <codeph>paddingRight</codeph>-Eigenschaften der von der <codeph>titleLayout</codeph>-Eigenschaft angegebenen Layoutklasse verwendet werden.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>titleContent</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:title:get"><apiName>title</apiName><shortdesc>
      Titel oder Beschriftung im Titelbereich.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
           </apiDefaultValue></apiValueDef><apiDesc>
      Titel oder Beschriftung im Titelbereich. 
           <p>Mit der <codeph>titleContent</codeph>-Eigenschaft definieren Sie die Komponenten, die im Titelbereich erscheinen. Wenn Sie einen Wert für die <codeph>titleContent</codeph>-Eigenschaft angeben, ignoriert die ActionBar-Skin die <codeph>title</codeph>-Eigenschaft.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>titleContent</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:TabbedViewNavigatorApplication"><apiName>TabbedViewNavigatorApplication</apiName><shortdesc>
  Der TabbedViewNavigatorApplication-Container definiert eine Anwendung mit mehreren Abschnitten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="navigators"/><skinParts><SkinPart name="tabbedNavigator" owner="spark.components:TabbedViewNavigatorApplication" playerVersion="AIR2.5" required="false" var_type="spark.components:TabbedViewNavigator">
<description>
      Der Haupt-tabbedNavigator für die Anwendung.
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The main tabbedNavigator for the application.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:TabbedViewNavigatorApplication&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:TabbedViewNavigatorApplication
    <strong>Properties</strong>
    navigators="null"
 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorApplicationBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der TabbedViewNavigatorApplication-Container definiert eine Anwendung mit mehreren Abschnitten. Der TabbedViewNavigatorApplication-Container erstellt automatisch einen TabbedMobileNavigator-Container. Der TabbedViewNavigator-Container erstellt das TabBar-Steuerelement, um die Navigation zwischen den Abschnitten der Anwendung zu unterstützen.
 
  <p>Das einzige untergeordnete Element des TabbedViewNavigatorApplication-Containers ist ViewNavigator. Definieren Sie einen ViewNavigator für jeden Abschnitt der Anwendung.</p> 
 
  <p>Der TabbedViewNavigatorApplication-Container hat die folgenden Standardmerkmale:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>100 % hoch und 100 % breit, um den gesamten verfügbaren Bildschirmraum einzunehmen.</entry>
        </row><row>
           <entry>Layout des untergeordneten Elements</entry>
           <entry>Wird durch die einzelnen View-Container, die die Ansicht der Anwendung gestalten, definiert.</entry>
        </row><row>
           <entry>Bildlaufleisten</entry>
           <entry>Keine. Wenn Sie Bildlaufleisten hinzufügen, können Benutzer die gesamte Anwendung hindurch einen Bildlauf durchführen. Das schließt den ActionBar- und TabBar-Bereich der Anwendung ein. Da diese Bereiche der Ansicht normalerweise keinen Bildlauf durchführen sollen, fügen Sie den einzelnen View-Containern der Anwendung anstatt dem Anwendungscontainer selbst Bildlaufleisten hinzu. </entry>
        </row><row>
           <entry>Standardskinklasse</entry>
           <entry>spark.skins.mobile.TabbedViewNavigatorApplicationSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TabbedViewNavigatorApplicationExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#TabbedViewNavigator"><linktext>spark.components.TabbedViewNavigator</linktext></link><link href="" invalidHref="spark.components.TabBar.xml"><linktext>spark.components.TabBar</linktext></link><link href="" invalidHref="spark.skins.mobile.TabbedViewNavigatorApplicationSkin.xml"><linktext>spark.skins.mobile.TabbedViewNavigatorApplicationSkin</linktext></link></related-links><apiConstructor id="spark.components:TabbedViewNavigatorApplication:TabbedViewNavigatorApplication"><apiName>TabbedViewNavigatorApplication</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:TabbedViewNavigatorApplication:navigators:get"><apiName>navigators</apiName><shortdesc conref="TabbedViewNavigator#navigators">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components.supportClasses:ViewNavigatorBase"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="TabbedViewNavigator#navigators">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:LabelItemRenderer"><apiName>LabelItemRenderer</apiName><shortdesc>
  Die LabelItemRenderer-Klasse definiert den Standardelementrenderer für ein listenbasiertes Steuerelement im Mobile-Design.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><styles><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  Die vertikale Ausrichtung des Inhalts, wenn das Seitenverhältnis nicht 1:1 ist. Mögliche Werte sind <codeph>"top"</codeph>, <codeph>"center"</codeph> und <codeph>"bottom"</codeph>.
  
  </description>
<default>"center"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" theme="spark,mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="uint">
<description conref="spark.components.List#style:selectionColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Die Anzahl der Pixel zwischen der oberen Rahmenlinie und der Textkomponente des Elementrenderers.
 
  </description>
<default>5
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Die Anzahl der Pixel zwischen der unteren Rahmenlinie und der Textkomponente des Elementrenderers.
 
  </description>
<default>5
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR1.5" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:chromeColor">
  </description>
<default>0xCCCCCC
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Offset der ersten Textzeile links vom Container in Pixeln. Diese Eigenschaft kann keine negative Zahl sein, wenn sie im Mobile-Design verwendet wird.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird. Mögliche Werte sind <codeph>"none"</codeph> und <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  Ausrichtung von Text in einem Container. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"right"</codeph> oder <codeph>"center"</codeph>.
 
  <p>Der Standardwert für die meisten Steuerelemente ist <codeph>„left“</codeph>. Für die FormItem-Komponente ist der Standardwert <codeph>„right“</codeph>. Für die Button-, LinkButton- und AccordionHeader-Komponenten ist der Standardwert <codeph>„center“</codeph>, und diese Eigenschaft wird nur erkannt, wenn die <codeph>labelPlacement</codeph>-Eigenschaft auf <codeph>„left“</codeph> oder <codeph>„right“</codeph> eingestellt ist. Wenn <codeph>labelPlacement</codeph> auf <codeph>"top"</codeph> oder <codeph>"bottom"</codeph> gesetzt wird, werden der Text und eventuell vorhandene Symbole zentriert.</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Die Anzahl der zusätzlichen Pixel, die zwischen den Zeichen angezeigt werden. Durch einen positiven Wert wird der Zeichenabstand über den normalen Abstand hinaus vergrößert und durch einen negativen Wert verkleinert.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Zusätzlicher vertikaler Abstand zwischen Textzeilen.
   <p>Der Standardwert ist 0.</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird. Gültige Werte sind <codeph>normal</codeph> und <codeph>bold</codeph>. Der Standardwert für die Button-Steuerelemente ist <codeph>bold</codeph>. Der Standardwert für alle anderen Steuerelemente ist <codeph>normal</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird. Gültige Werte sind <codeph>"normal"</codeph> und <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Die Höhe des Texts in Pixeln. Beim Halo-Design lautet der Standardwert für alle Steuerelemente mit Ausnahme des ColorPicker-Steuerelements 10. Für das ColorPicker-Steuerelement des Halo-Designs lautet der Standardwert 11. Beim Spark-Design lautet der Standardwert für alle Steuerelemente mit Ausnahme des ColorPicker-Steuerelements 12. Für das ColorPicker-Steuerelement des Spark-Designs lautet der Standardwert 11. Der Standardwert für das Mobile-Design ist 24.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  Der Name der zu verwendenden Schriftart. Anders als in einer vollständigen CSS-Implementierung werden durch Kommas getrennte Listen nicht unterstützt. Sie können den Namen einer beliebigen Schriftartfamilie verwenden. Wenn Sie eine generische Schriftartbezeichnung wählen, wird diese in eine entsprechende Geräteschriftart konvertiert. Die Standardschriftart für das Halo-Design ist <codeph>"Verdana"</codeph>. Die Standardschriftart für das Spark-Design ist <codeph>"Arial"</codeph>. Die Standardschriftart für das Mobile-Design ist <codeph>"_sans"</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="uint">
<description>
  Farbe des Texts in der Komponente, einschließlich der Komponentenbeschriftung. Der Standardwert für das Halo-Design ist <codeph>0x0B333C</codeph>. Der Standardwert für das Spark-Design ist <codeph>0x000000</codeph>. Der Standardwert für das Mobile-Design ist <codeph>0xFFFFFF</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:LabelItemRenderer" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der rechten Rahmenlinie der Komponente und dem rechten Rand ihres Inhaltsbereichs.
  <p>Der Standardwert ist 0.</p>
  <p>Der Standardwert für ein Schaltflächensteuerelement im Halo-Design beträgt 10 und im Spark-Design 6.</p>
  <p>Der Standardwert für das ComboBox-Steuerelement ist 5.</p>
  <p>Der Standardwert für den Form-Container ist 16.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:LabelItemRenderer" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der linken Rahmenlinie der Komponente und dem linken Rand ihres Inhaltsbereichs.
  <p>Der Standardwert ist 0.</p>
  <p>Der Standardwert für ein Schaltflächensteuerelement im Halo-Design beträgt 10 und im Spark-Design 6.</p>
  <p>Der Standardwert für das ComboBox-Steuerelement ist 5.</p>
  <p>Der Standardwert für den Form-Container ist 16.</p>
  <p>Der Standardwert für das Tree-Steuerelement ist 2.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:LabelItemRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:LabelItemRenderer
   <strong>Properties</strong>
    label=""
 
   <strong>Common Styles</strong>
    color="<i>Theme dependent</i>"
    downColor="<i>Theme dependent</i>"
    fontFamily="<i>Theme dependent</i>"
    fontSize="<i>Theme dependent</i>"
    fontStyle="normal"
    fontWeight="normal"
    leading="0"
    letterSpacing="0"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="5"
    rollOverColor="0xCEDBEF"
    selectionColor="0xB2B2B2"
    textAlign="left"
    textDecoration="none"
    textIndent="0"
    verticalAlign="center"
  
   <strong>Spark Styles</strong>
    alternatingItemColors="undefined"
    focusColor="0x70B2EE"
    symbolColor="0x000000"
  
   <strong>Mobile Styles</strong>
    alternatingItemColors="undefined"
    focusColor="0x70B2EE"
    symbolColor="0x000000"
 
    <b>Events</b>
    dataChange="<i>No default</i>"
 
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>spark.components:IItemRenderer</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die LabelItemRenderer-Klasse definiert den Standardelementrenderer für ein listenbasiertes Steuerelement im Mobile-Design. Es ist ein einfacher Elementrenderer mit einer einzelnen Textkomponente
   <p>Der Elementrenderer erstellt ein einzelnes StyleableTextField-Steuerelement, um einen String anzuzeigen. Der Name des StyleableTextField-Steuerelements im Elementrenderer ist <codeph>labelDisplay</codeph>. Verwenden Sie die <codeph>labelField</codeph>-Eigenschaft des listenbasierten Steuerelements zum Festlegen eines Felds des Datenelements, das im StyleableTextField-Steuerelement angezeigt werden soll.</p>
   <p>Zum Erstellen eines benutzerdefinierten Elementrenderers für mobile Geräte empfiehlt Adobe die Erstellung eines neuen ActionScript-Elementrenderers, der diese Klasse erweitert.</p>
   </apiDesc><example conref="LabelItemRendererExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#IconItemRenderer"><linktext>spark.components.IconItemRenderer</linktext></link><link href="" invalidHref="spark.components.List.xml"><linktext>spark.components.List</linktext></link><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer.</linktext></link><link href="" invalidHref="spark.components.IItemRenderer.xml"><linktext>spark.components.IItemRenderer</linktext></link><link href="" invalidHref="spark.components.supportClasses.ItemRenderer.xml"><linktext>spark.components.supportClasses.ItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.components:LabelItemRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Wird ausgelöst, wenn sich die Data-Eigenschaft verändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich die <codeph>data</codeph>-Eigenschaft verändert
   <p>Wenn Sie eine Komponente als Elementrenderer verwenden, enthält die <codeph>data</codeph>-Eigenschaft die anzuzeigenden Daten. Sie können auf dieses Ereignis warten und die Komponente aktualisieren, wenn sich die <codeph>data</codeph>-Eigenschaft ändert.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:LabelItemRenderer:LabelItemRenderer"><apiName>LabelItemRenderer</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:LabelItemRenderer:protected:createLabelDisplay"><apiName>createLabelDisplay</apiName><shortdesc>
      Erstellt die labelDisplay-Komponente
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Erstellt die labelDisplay-Komponente
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:destroyLabelDisplay"><apiName>destroyLabelDisplay</apiName><shortdesc>
      Löscht die labelDisplay-Komponente
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Löscht die labelDisplay-Komponente
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:drawBackground"><apiName>drawBackground</apiName><shortdesc>
      Erzeugt einen Hintergrund für den Elementrenderer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Legt die Breite der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleX</codeph>-Eigenschaft der Komponente.
           </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Legt die Höhe der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleY</codeph>-Eigenschaft der Komponente.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Erzeugt einen Hintergrund für den Elementrenderer.
     
      <p>Diese Methode wird gemeinsam mit <codeph>layoutContents()</codeph> von der <codeph>updateDisplayList()</codeph>-Methode aufgerufen.</p>
     
      <p> Sie kann die folgenden Status entsprechend verarbeiten: selected, down oder caretted. Wenn jedoch <codeph>alternatingItemColors</codeph> <codeph>undefined</codeph> ist, ist der Standardhintergrund transparent. Überschreiben Sie diese Methode, um das Aussehen des Hintergrunds des Elementrenderers zu ändern.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:drawBorder"><apiName>drawBorder</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3.0"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Legt die Breite der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleX</codeph>-Eigenschaft der Komponente.
           </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Legt die Höhe der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleY</codeph>-Eigenschaft der Komponente.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
     
      <p><codeph/></p>
     
      <p/>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:getElementPreferredHeight"><apiName>getElementPreferredHeight</apiName><shortdesc conref="spark.skins.mobile.supportClasses.MobileSkin#getElementPreferredHeight()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc conref="spark.skins.mobile.supportClasses.MobileSkin#getElementPreferredHeight()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#LabelItemRenderer/setElementPosition"><linktext>setElementPosition</linktext></link><link href="spark.components.xml#LabelItemRenderer/setElementSize"><linktext>setElementSize</linktext></link><link href="spark.components.xml#LabelItemRenderer/getElementPreferredWidth"><linktext>getElementPreferredWidth</linktext></link></related-links></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:getElementPreferredWidth"><apiName>getElementPreferredWidth</apiName><shortdesc conref="spark.skins.mobile.supportClasses.MobileSkin#getElementPreferredWidth()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc conref="spark.skins.mobile.supportClasses.MobileSkin#getElementPreferredWidth()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#LabelItemRenderer/setElementPosition"><linktext>setElementPosition</linktext></link><link href="spark.components.xml#LabelItemRenderer/setElementSize"><linktext>setElementSize</linktext></link><link href="spark.components.xml#LabelItemRenderer/getElementPreferredHeight"><linktext>getElementPreferredHeight</linktext></link></related-links></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:layoutContents"><apiName>layoutContents</apiName><shortdesc>
      Positioniert die untergeordneten Elemente für diesen Elementrenderer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Legt die Breite der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleX</codeph>-Eigenschaft der Komponente.
           </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Legt die Höhe der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleY</codeph>-Eigenschaft der Komponente.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Positioniert die untergeordneten Elemente für diesen Elementrenderer.
     
      <p>Diese Methode wird zusammen mit <codeph>drawBackground()</codeph> von der <codeph>updateDisplayList()</codeph>-Methode aufgerufen.</p>
     
      <p>Diese Methode positioniert die <codeph>labelDisplay</codeph>-Komponente. Unterklassen sollten das überschreiben, um ihre untergeordneten Elemente zu positionieren.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:setElementPosition"><apiName>setElementPosition</apiName><shortdesc conref="spark.skins.mobile.supportClasses.MobileSkin#setElementPosition()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc conref="spark.skins.mobile.supportClasses.MobileSkin#setElementPosition()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#LabelItemRenderer/setElementSize"><linktext>setElementSize</linktext></link></related-links></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:setElementSize"><apiName>setElementSize</apiName><shortdesc conref="spark.skins.mobile.supportClasses.MobileSkin#setElementSize()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc conref="spark.skins.mobile.supportClasses.MobileSkin#setElementSize()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#LabelItemRenderer/setElementPosition"><linktext>setElementPosition</linktext></link></related-links></apiOperation><apiValue id="spark.components:LabelItemRenderer:protected:labelDisplay"><apiName>labelDisplay</apiName><shortdesc>
      Die Textkomponente, mit der die Beschriftungsdaten des Elementrenderers angezeigt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:StyleableTextField</apiValueClassifier></apiValueDef><apiDesc>
      Die Textkomponente, mit der die Beschriftungsdaten des Elementrenderers angezeigt werden.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:LabelItemRenderer:applicationDPI:get"><apiName>applicationDPI</apiName><shortdesc>
      Gibt die DPI der Anwendung zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Gibt die DPI der Anwendung zurück.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:LabelItemRenderer:data:get"><apiName>data</apiName><shortdesc>
      Die Implementierung der data-Eigenschaft gemäß der IDataRenderer-Schnittstelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Die Implementierung der <codeph>data</codeph>-Eigenschaft gemäß der IDataRenderer-Schnittstelle. Wenn festgelegt, wird der Wert gespeichert und die Komponente entwertet, damit das Layout der Komponente neu aufgebaut werden kann.
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer.</linktext></link></related-links></apiValue><apiValue id="spark.components:LabelItemRenderer:protected:down:get"><apiName>down</apiName><shortdesc>
      Ist „true“, wenn der Benutzer auf einen Elementrenderer klickt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ist <codeph>true</codeph>, wenn der Benutzer auf einen Elementrenderer klickt.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:LabelItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:LabelItemRenderer:protected:hovered:get"><apiName>hovered</apiName><shortdesc>
      Ist „true“, wenn der Benutzer mit der Maus auf den Elementrenderer zeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ist <codeph>true</codeph>, wenn der Benutzer mit der Maus auf den Elementrenderer zeigt.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:LabelItemRenderer:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:LabelItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:LabelItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:LabelItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="spark.components:SpinnerListContainer"><apiName>SpinnerListContainer</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="style" name="backgroundColor"/><Exclude kind="style" name="backgroundAlpha"/><DefaultProperty name="mxmlContentFactory"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
   Die SpinnerLists werden horizontal angeordnet. Mit SpinnerListContainerSkin werden ein Bild, Tiefenverläufe und eine Auswahlanzeige aufgerufen.   
       
 </apiDesc><example conref="SpinnerListExample.mxml"/><example conref="SpinnerListContainerExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#SpinnerList"><linktext>spark.components.SpinnerList</linktext></link><link href="" invalidHref="spark.skins.mobile.SpinnerListContainerSkin.xml"><linktext/></link></related-links><apiConstructor id="spark.components:SpinnerListContainer:SpinnerListContainer"><apiName>SpinnerListContainer</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
            
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:ViewNavigatorApplication"><apiName>ViewNavigatorApplication</apiName><shortdesc>
  Die ViewNavigatorApplication-Klasse ist eine Anwendungsklasse, die ein einfaches Framework für Anwendungen bereitstellen soll, die ein ansichtsbasiertes Navigationsmodell einsetzen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="navigationStack"/><skinParts><SkinPart name="navigator" owner="spark.components:ViewNavigatorApplication" required="false" var_type="spark.components:ViewNavigator">
<description>
      Der Hauptansichtsnavigator für die Anwendung. Die Komponente ist für das Verwalten des Ansichtsnavigationsmodells für die Anwendung zuständig.  
     </description>
	<shortdesc>
      The main view navigator for the application.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ViewNavigatorApplication&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ViewNavigatorApplication
    <strong>Properties</strong>
    actionContent="null"
    actionLayout="null"
    firstView="null"
    firstViewData="null"
    navigationContent="null"
    navigationLayout="null"
    title=""
    titleContent="null"
    titleLayout="null"
 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorApplicationBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ViewNavigatorApplication-Klasse ist eine Anwendungsklasse, die ein einfaches Framework für Anwendungen bereitstellen soll, die ein ansichtsbasiertes Navigationsmodell einsetzen. Wenn diese Klasse verwendet wird, fungiert sie als Hauptzugangspunkt für die Anwendung und unterstützt Hardwaregeräteschlüssel, Ausrichtungserkennung und die dauerhafte Speicherung von Anwendungssitzungen.
 
  <p>Ein ansichtsbasiertes Navigationsmodell ist durch eine Benutzeroberfläche charakterisiert, auf der der Endbenutzer zwischen einer Reihe von Vollbildansichten als Reaktion auf Benutzerinteraktion navigiert. Dieses Paradigma wird im Allgemeinen von Mobilanwendungen verwendet und unter Einsatz eines integrierten ViewNavigator-Containers ausgeführt.</p>
 
  <p>Verwenden Sie die <codeph>firstView</codeph>-Eigenschaft, um die zuerst angezeigte View bei Initialisierung der Anwendung anzugeben.</p>
 
  <p>Im Gegensatz zur Application akzeptiert ViewNavigatorApplication keine untergeordneten Elemente für UIComponent-Objekte. Stattdessen sollten alle visuellen Komponenten untergeordnete Elemente der von der Anwendung verwalteten Ansichten sein.</p>
 
  <p>Der ViewNavigatorApplication-Container hat die folgenden Standardmerkmale:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>100 % hoch und 100 % breit, um den gesamten verfügbaren Bildschirmraum einzunehmen.</entry>
        </row><row>
           <entry>Layout des untergeordneten Elements</entry>
           <entry>Wird durch die einzelnen View-Container, die die Ansicht der Anwendung gestalten, definiert.</entry>
        </row><row>
           <entry>Bildlaufleisten</entry>
           <entry>Keine. Wenn Sie Bildlaufleisten hinzufügen, können Benutzer die gesamte Anwendung hindurch einen Bildlauf durchführen. Das schließt den ActionBar- und TabBar-Bereich der Anwendung ein. Da diese Bereiche der Ansicht normalerweise keinen Bildlauf durchführen sollen, fügen Sie den einzelnen View-Containern der Anwendung anstatt dem Anwendungscontainer selbst Bildlaufleisten hinzu. </entry>
        </row><row>
           <entry>Standardskinklasse</entry>
           <entry>spark.skins.mobile.ViewNavigatorApplicationSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ViewNavigatorApplicationExample.mxml"/><example conref="ViewNavigatorApplicationHomeView.mxml"/><example conref="ViewNavigatorApplicationView2.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#ViewNavigator"><linktext>spark.components.ViewNavigator</linktext></link><link href="spark.components.xml#View"><linktext>spark.components.View</linktext></link><link href="" invalidHref="spark.skins.mobile.ViewNavigatorApplicationSkin.xml"><linktext>spark.skins.mobile.ViewNavigatorApplicationSkin</linktext></link></related-links><apiConstructor id="spark.components:ViewNavigatorApplication:ViewNavigatorApplication"><apiName>ViewNavigatorApplication</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ViewNavigatorApplication:actionBar:get"><apiName>actionBar</apiName><shortdesc>
      Ein Verweis auf das ActionBar-Steuerelement des Ansichtsnavigators, falls vorhanden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:ActionBar</apiValueClassifier></apiValueDef><apiDesc>
      Ein Verweis auf das ActionBar-Steuerelement des Ansichtsnavigators, falls vorhanden. Diese Eigenschaft ist erst gültig, nachdem der Ansichtsnavigator der Anzeigeliste hinzugefügt wurde.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar"><linktext>ActionBar</linktext></link><link href="spark.components.xml#ViewNavigator"><linktext>ViewNavigator</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:actionContent:get"><apiName>actionContent</apiName><shortdesc conref="ActionBar#actionContent">
      Diese Eigenschaft überschreibt die actionContent-Eigenschaft im ActionBar-Steuerelement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionContent">
      Diese Eigenschaft überschreibt die <codeph>actionContent</codeph>-Eigenschaft im ActionBar-Steuerelement.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionContent"><linktext>spark.components.ActionBar.actionContent</linktext></link><link href="spark.components.xml#View/actionContent"><linktext>spark.components.View.actionContent</linktext></link><link href="spark.components.xml#ViewNavigator/actionContent"><linktext>spark.components.ViewNavigator.actionContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:actionLayout:get"><apiName>actionLayout</apiName><shortdesc conref="ActionBar#actionLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionLayout">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionLayout"><linktext>spark.components.ActionBar.actionLayout</linktext></link><link href="spark.components.xml#View/actionLayout"><linktext>spark.components.View.actionLayout</linktext></link><link href="spark.components.xml#ViewNavigator/actionLayout"><linktext>spark.components.ViewNavigator.actionLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:firstViewData:get"><apiName>firstViewData</apiName><shortdesc conref="ViewNavigator#firstViewData">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ViewNavigator#firstViewData">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigatorApplication:firstView:get"><apiName>firstView</apiName><shortdesc conref="ViewNavigator#firstView">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ViewNavigator#firstView">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigatorApplication:navigationContent:get"><apiName>navigationContent</apiName><shortdesc conref="ActionBar#navigationContent">
      Diese Eigenschaft überschreibt die navigationContent-Eigenschaft im ActionBar-Steuerelement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationContent">
      Diese Eigenschaft überschreibt die <codeph>navigationContent</codeph>-Eigenschaft im ActionBar-Steuerelement.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationContent"><linktext>spark.components.ActionBar.navigationContent</linktext></link><link href="spark.components.xml#View/navigationContent"><linktext>spark.components.View.navigationContent</linktext></link><link href="spark.components.xml#ViewNavigator/navigationContent"><linktext>spark.components.ViewNavigator.navigationContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:navigationLayout:get"><apiName>navigationLayout</apiName><shortdesc conref="ActionBar#navigationLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationLayout">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationLayout"><linktext>spark.components.ActionBar.navigationLayout</linktext></link><link href="spark.components.xml#View/navigationLayout"><linktext>spark.components.View.navigationLayout</linktext></link><link href="spark.components.xml#ViewNavigator/navigationLayout"><linktext>spark.components.ViewNavigator.navigationLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:titleContent:get"><apiName>titleContent</apiName><shortdesc conref="ActionBar#titleContent">
      Diese Eigenschaft überschreibt die titleContent-Eigenschaft in den ActionBar- und ViewNavigatorApplication-Komponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleContent">
      Diese Eigenschaft überschreibt die <codeph>titleContent</codeph>-Eigenschaft in den ActionBar- und ViewNavigatorApplication-Komponenten.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>spark.components.ActionBar.titleContent</linktext></link><link href="spark.components.xml#View/titleContent"><linktext>spark.components.View.titleContent</linktext></link><link href="spark.components.xml#ViewNavigator/titleContent"><linktext>spark.components.ViewNavigator.titleContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:titleLayout:get"><apiName>titleLayout</apiName><shortdesc conref="ActionBar#titleLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleLayout">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleLayout"><linktext>spark.components.ActionBar.titleLayout</linktext></link><link href="spark.components.xml#View/titleLayout"><linktext>spark.components.View.titleLayout</linktext></link><link href="spark.components.xml#ViewNavigator/titleLayout"><linktext>spark.components.ViewNavigator.titleLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:title:get"><apiName>title</apiName><shortdesc conref="ActionBar#title">
      Diese Eigenschaft überschreibt die title-Eigenschaft im ActionBar-Steuerelement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#title">
      Diese Eigenschaft überschreibt die <codeph>title</codeph>-Eigenschaft im ActionBar-Steuerelement.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/title"><linktext>spark.components.ActionBar.title</linktext></link><link href="spark.components.xml#View/title"><linktext>spark.components.View.title</linktext></link><link href="spark.components.xml#ViewNavigator/title"><linktext>spark.components.ViewNavigator.title</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:SpinnerList"><apiName>SpinnerList</apiName><shortdesc>
  Die SpinnerList-Komponente zeigt eine Liste mit Objekten an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="event" name="itemRollOver"/><Exclude kind="event" name="itemRollOut"/><Exclude kind="event" name="changing"/><Exclude kind="property" name="requireSelection"/><Exclude kind="property" name="layout"/><Exclude kind="style" name="chromeColor"/><Exclude kind="style" name="accentColor"/><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="scroller" owner="spark.components:SpinnerList" playerVersion="AIR3" required="false" var_type="spark.components:Scroller">
<description>
      
     
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      The optional Scroller that is used to scroll the List.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:SpinnerList&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SpinnerList
    <strong>Properties</strong>
    wrapElements="true|false"
  /&gt;
  </pre>
 
 ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die SpinnerList-Komponente zeigt eine Liste mit Objekten an. Das Objekt in der Mitte der Liste ist immer das selectedItem. Standardmäßig springt die Liste automatisch vom Ende wieder an den Anfang.
 
  <p/>
 
 <p>
  <adobeimage alt="" href="../../images/spinnerlist_example.png"/>
 </p>
 
 <p/>
 
  </apiDesc><example conref="SpinnerListExample.mxml"/><example conref="SpinnerListContainerExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#SpinnerListContainer"><linktext/></link></related-links><apiConstructor id="spark.components:SpinnerList:SpinnerList"><apiName>SpinnerList</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
            
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SpinnerList:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SpinnerList:protected:partAdded"><apiName>partAdded</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SpinnerList:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.components:SpinnerList:caretIndex:get"><apiName>caretIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:SpinnerList:wrapElements:get"><apiName>wrapElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     </apiDefaultValue></apiValueDef><apiDesc>
       
           
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SpinnerList:dataProvider:set"><apiName>dataProvider</apiName><shortdesc conref="spark.components.DataGroup#dataProvider">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.collections:IList"/></apiValueDef><apiDesc conref="spark.components.DataGroup#dataProvider">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:SplitViewNavigator"><apiName>SplitViewNavigator</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><skinStates><SkinState name="landscape" owner="spark.components:SplitViewNavigator" playerVersion="AIR3">
<description>
  <codeph/>
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></SkinState><SkinState name="portrait" owner="spark.components:SplitViewNavigator" playerVersion="AIR3">
<description>
  <codeph/>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="viewNavigatorPopUp" owner="spark.components:SplitViewNavigator" playerVersion="AIR3" required="false" var_type="spark.components:SkinnablePopUpContainer">
<description>
      <codeph/> <codeph/> 
     
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      The popUp used to display a navigator when 
      showFirstViewNavigatorInPopUp() is called.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:SplitViewNavigator&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:SplitViewNavigator
    <strong>Properties</strong>
    autoHideFirstViewNavigator="false"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorBase</apiBaseClassifier></apiClassifierDef><apiDesc>
    
   <p/>
  <p>
  <adobeimage alt="" href="../../images/svn_master_detail_svn.png"/>
 </p>
   <p><codeph/> Diese Komponente ist hilfreich für die Erstellung einer Mustervorlagen-/Detail-Schnittstelle auf einem Mobilgerät. Die Summe der untergeordneten Navigatoren, die von dieser Komponente verwaltet werden können, ist nicht begrenzt. </p>
   <p><b/></p>
 
  <p><codeph/><codeph/>  <codeph/> Bei dieser Einstellung wird die Eigenschaft <codeph>includeInLayout</codeph> dieses untergeordneten Elements entsprechend gesetzt.</p>
    
  <p>  <codeph/><codeph/>  <codeph/> <codeph/> </p>
   <p><b/><codeph/></p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.skins.mobile.SplitViewNavigatorSkin.xml"><linktext/></link><link href="spark.components.supportClasses.xml#ViewNavigatorBase"><linktext>spark.components.supportClasses.ViewNavigatorBase</linktext></link><link href="spark.components.xml#ViewNavigator"><linktext>spark.components.ViewNavigator</linktext></link><link href="spark.components.xml#TabbedViewNavigator"><linktext>spark.components.TabbedViewNavigator</linktext></link><link href="" invalidHref="spark.components.xml#Application/aspectRatio"><linktext>spark.components.Application.aspectRatio</linktext></link><link href="spark.components.xml#Callout"><linktext>spark.components.Callout</linktext></link><link href="" invalidHref="spark.components.SkinnablePopUpContainer.xml"><linktext>spark.components.SkinnablePopUpContainer</linktext></link></related-links><apiConstructor id="spark.components:SplitViewNavigator:SplitViewNavigator"><apiName>SplitViewNavigator</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SplitViewNavigator:getViewNavigatorAt"><apiName>getViewNavigatorAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
     
      </apiDesc><apiOperationClassifier>spark.components.supportClasses:ViewNavigatorBase</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Der Index des abzurufenden Navigators.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
       <codeph/>
     
      <p/> 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SplitViewNavigator:hideViewNavigatorPopUp"><apiName>hideViewNavigatorPopUp</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
       
     
      <p> </p>
     
      <p><codeph/><codeph/> <codeph/></p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SplitViewNavigator:showFirstViewNavigatorInPopUp"><apiName>showFirstViewNavigatorInPopUp</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>owner</apiItemName><apiType value="flash.display:DisplayObjectContainer"/></apiParam></apiOperationDef><apiDesc>
       
     
      <p><codeph/> <codeph/></p>
     
      <p>  <codeph/><codeph/></p>
     
      <p/>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:SplitViewNavigator:autoHideFirstViewNavigator:get"><apiName>autoHideFirstViewNavigator</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
       <codeph/>
     
      <p><codeph/></p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SplitViewNavigator:numViewNavigators:get"><apiName>numViewNavigators</apiName><shortdesc>
      Die Anzahl der von diesem Container verwalteten Navigatoren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Die Anzahl der von diesem Container verwalteten Navigatoren.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>