<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.components"><apiName>spark.components</apiName><apiDetail/><apiClassifier id="spark.components:ViewNavigator"><apiName>ViewNavigator</apiName><shortdesc>
  ViewNavigator コンポーネントは、View オブジェクトのコレクションで構成されるコンテナです。表示されてアクティブになるのは最上位のビューのみです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="landscapeAndOverlay" owner="spark.components:ViewNavigator" playerVersion="AIR2.5">
<description>
  ナビゲーターが横方向で、ナビゲーターコントロールが上にオーバーレイされている場合に使用される状態です。
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="portraitAndOverlay" owner="spark.components:ViewNavigator" playerVersion="AIR2.5">
<description>
  ナビゲーターが縦方向で、ナビゲーターコントロールが上にオーバーレイされている場合に使用される状態です。
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="landscape" owner="spark.components:ViewNavigator" playerVersion="AIR2.5">
<description>
  ナビゲーターが横方向の場合に使用される状態です。
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="portrait" owner="spark.components:ViewNavigator" playerVersion="AIR2.5">
<description>
  ナビゲーターが縦方向の場合に使用される状態です。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="navigationStack"/><skinParts><SkinPart name="actionBar" owner="spark.components:ViewNavigator" playerVersion="AIR2.5" required="false" var_type="spark.components:ActionBar">
<description>
     ナビゲーターのアクションバーを定義するスキンパーツです。 
     
     </description>

	<prolog><asCustoms><langversion>3.0
     </langversion><productversion>Flex 4.5
    </productversion></asCustoms></prolog><shortdesc>
     A skin part that defines the action bar of the navigator.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:ViewNavigator&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:ViewNavigator
   <strong>Properties</strong>
    actionContent="null"
    actionLayout="null"
    defaultPopTransition="SlideViewTransition"
    defaultPushTransition="SlideViewTransition"
    firstView="null"
    firstViewData="null"
    navigationContent="null"
    navigationLayout="null"
    poppedViewReturnedObject="null"
    title=""
    titleContent="null"
    titleLayout="null"
 
  &gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ViewNavigator コンポーネントは、View オブジェクトのコレクションで構成されるコンテナです。表示されてアクティブになるのは最上位のビューのみです。ViewNavigator コンテナを使用して、モバイルアプリケーションのビューの間のナビゲーションを制御します。ViewNavigatorApplication コンテナは、アプリケーション全体に対して 1 つの ViewNavigator コンテナを自動的に作成します。
  
  <p>モバイルアプリケーションのナビゲーションは、View オブジェクトのスタックによって制御されます。スタックの最上位の View オブジェクトは、現在表示できるビューを定義します。ViewNavigator コンテナは、スタックを保守します。ビューを変更するには、新規 View オブジェクトをスタックにプッシュするか、現在の View オブジェクトをスタックからポップします。現在表示できる View オブジェクトをスタックからポップすると、View オブジェクトが破棄されて、スタックの前のビューに戻ります。</p>
   <p>スタックの最上位にビューがプッシュされると、古いビューの <codeph>data</codeph> プロパティが自動的に保持されます。現在のビューがスタックからポップされた結果、そのビューが再びアクティブになると、このプロパティが復元されます。新規ビューがスタックにプッシュされてアクティブになると、古いビューのインスタンスは破棄されます。</p>
 
  <p>ViewNavigator では、アクティブビューによって定義されたコンテキスト情報が表示されるオプションの ActionBar コントロールが表示されます。 アクティブビューが変更されると、アクションバーが自動的に更新されます。</p>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#View"><linktext>spark.components.View</linktext></link><link href="spark.components.xml#ActionBar"><linktext>spark.components.ActionBar</linktext></link><link href="spark.components.xml#TabbedViewNavigator"><linktext>spark.components.TabbedViewNavigator</linktext></link><link href="spark.transitions.xml#ViewTransitionBase"><linktext>spark.transitions.ViewTransitionBase</linktext></link></related-links><apiConstructor id="spark.components:ViewNavigator:ViewNavigator"><apiName>ViewNavigator</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:ViewNavigator:protected:createActionBarHideEffect"><apiName>createActionBarHideEffect</apiName><shortdesc>
      ActionBar コントロールが非表示の場合に再生されるエフェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>ActionBar コントロールが非表示の場合に再生されるエフェクトです。
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn></apiOperationDef><apiDesc>
      ActionBar コントロールが非表示の場合に再生されるエフェクトを作成します。 作成されたエフェクトは、ナビゲーターのコンテンツ領域に現在表示されているビューと ActionBar の両方をアニメーション化する役割があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:protected:createActionBarShowEffect"><apiName>createActionBarShowEffect</apiName><shortdesc>
      ActionBar コントロールが表示されるときに再生されるエフェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>ActionBar コントロールが表示されるときに再生されるエフェクトです。
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn></apiOperationDef><apiDesc>
      ActionBar コントロールが表示されるときに再生されるエフェクトを作成します。 作成されたエフェクトは、ナビゲーターのコンテンツ領域に現在表示されているビューと ActionBar の両方をアニメーション化する役割があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:hideActionBar"><apiName>hideActionBar</apiName><shortdesc>
      アクションバーを非表示にします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>animate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>アクションバーを非表示にするときに、非表示エフェクトを再生するかどうかを示します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      アクションバーを非表示にします。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:popAll"><apiName>popAll</apiName><shortdesc>
      ナビゲータースタックからすべてのビューを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>ビューを切り替える際に再生するビュートランジションです。    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ナビゲータースタックからすべてのビューを削除します。 このメソッドは、表示を空白画面に変更します。  
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:popToFirstView"><apiName>popToFirstView</apiName><shortdesc>
      ナビゲーションスタックから最下位のビュー以外のすべてのビューを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>ビューを切り替える際に再生するビュートランジションです。    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ナビゲーションスタックから最下位のビュー以外のすべてのビューを削除します。 最下位のビューは、スタックに最初にプッシュされたビューです。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:popView"><apiName>popView</apiName><shortdesc>
      ナビゲーションスタックから現在のビューをポップします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>ビューを切り替える際に再生するビュートランジションです。    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ナビゲーションスタックから現在のビューをポップします。 現在のビューは、スタックの最上位のビューによって表されています。スタックの前のビューが現在のビューになります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:pushView"><apiName>pushView</apiName><shortdesc>
      新規ビューをナビゲーションスタックの最上位にプッシュします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewClass</apiItemName><apiType value="Class"/><apiDesc>ビューを作成するために使用されるクラスです。この引数は、View コンテナを拡張するクラスを参照する必要があります。
      
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>ビューに渡されるデータオブジェクトです。 この引数は、新規ビューの <codeph>data</codeph> プロパティに書き込まれます。
      
      </apiDesc></apiParam><apiParam><apiItemName>context</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc><codeph>ViewNavigator.context</codeph> プロパティに書き込む任意のオブジェクトです。新規のビューを作成すると、このプロパティが参照され、その値に基づいてアクションが実行されます。例えば、<codeph>context</codeph> の値に基づいて、様々な方法でデータが表示されます。
      
      </apiDesc></apiParam><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>ビューを切り替える際に再生するビュートランジションです。    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      新規ビューをナビゲーションスタックの最上位にプッシュします。 スタックにプッシュされたビューが現在のビューになります。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:replaceView"><apiName>replaceView</apiName><shortdesc>
      ナビゲーションスタックの最上位のビューを新規ビューで置換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewClass</apiItemName><apiType value="Class"/><apiDesc>置換ビューを作成するために使用されるクラスです。この引数は、View コンテナを拡張するクラスを参照する必要があります。
      
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>ビューに渡されるデータオブジェクトです。 この引数は、新規ビューの <codeph>data</codeph> プロパティに書き込まれます。
      
      </apiDesc></apiParam><apiParam><apiItemName>context</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>プッシュのコンテキストを記述するために使用される任意のオブジェクト。新規ビューが作成されるときに、新規ビューはこのプロパティを参照できます。
      
      </apiDesc></apiParam><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>ビューを切り替える際に再生するビュートランジションです。    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ナビゲーションスタックの最上位のビューを新規ビューで置換します。 スタックの現在のビューを置換するビューが現在のビューになります。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:showActionBar"><apiName>showActionBar</apiName><shortdesc>
      アクションバーを表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>animate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>アクションバーを表示するときに、表示エフェクトを再生するかどうかを示します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      アクションバーを表示します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:ViewNavigator:actionContent:get"><apiName>actionContent</apiName><shortdesc conref="ActionBar#actionContent">
      このプロパティは、ActionBar コンポーネントおよび ViewNavigatorApplication コンポーネントの actionContent プロパティをオーバーライドします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionContent">
      このプロパティは、ActionBar コンポーネントおよび ViewNavigatorApplication コンポーネントの <codeph>actionContent</codeph> プロパティをオーバーライドします。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionContent"><linktext>ActionBar.actionContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:actionLayout:get"><apiName>actionLayout</apiName><shortdesc conref="ActionBar#actionContent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionContent">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:activeView:get"><apiName>activeView</apiName><shortdesc>
      ビューのトランジション時に、このプロパティは、ナビゲーターのトランジション先のビューを参照します。 ナビゲーターの現在アクティブになっているビューです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="viewChangeComplete"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:View</apiValueClassifier></apiValueDef><apiDesc>
      <p>ビューのトランジション時に、このプロパティは、ナビゲーターのトランジション先のビューを参照します。</p>
           
      ナビゲーターの現在アクティブになっているビューです。一度にアクティブにできるビューは 1 つだけです。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:context:get"><apiName>context</apiName><shortdesc>
      現在のビューが作成されたコンテキストを表すストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      現在のビューが作成されたコンテキストを表すストリングです。このプロパティは、<codeph>ViewNavigator.pushView()</codeph> メソッドに渡される <codeph>context</codeph> パラメーターの値に割り当てられます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:defaultPopTransition:get"><apiName>defaultPopTransition</apiName><shortdesc>
      ポップナビゲーション操作のデフォルトのビュートランジションを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.transitions:ViewTransitionBase</apiValueClassifier><apiDefaultValue>SlideViewTransition
           </apiDefaultValue></apiValueDef><apiDesc>
      ポップナビゲーション操作のデフォルトのビュートランジションを指定します。
           </apiDesc></apiValueDetail><related-links><link href="spark.transitions.xml#SlideViewTransition"><linktext>spark.transitions.SlideViewTransition</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:defaultPushTransition:get"><apiName>defaultPushTransition</apiName><shortdesc>
      プッシュナビゲーション操作のデフォルトのビュートランジションを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.transitions:ViewTransitionBase</apiValueClassifier><apiDefaultValue>SlideViewTransition
           </apiDefaultValue></apiValueDef><apiDesc>
      プッシュナビゲーション操作のデフォルトのビュートランジションを指定します。
           </apiDesc></apiValueDetail><related-links><link href="spark.transitions.xml#SlideViewTransition"><linktext>spark.transitions.SlideViewTransition</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:firstViewData:get"><apiName>firstViewData</apiName><shortdesc>
      ナビゲーターが初期化されるときに、最初のビューの data プロパティに渡される Object です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      ナビゲーターが初期化されるときに、最初のビューの <codeph>data</codeph> プロパティに渡される Object です。<codeph>firstView</codeph> プロパティを使用して最初のビューを指定します。   
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ViewNavigator/firstView"><linktext>firstView</linktext></link><link href="spark.components.xml#View"><linktext>View</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:firstView:get"><apiName>firstView</apiName><shortdesc>
      アプリケーションの各ビューは、ActionScript または MXML ファイルに定義された View コンテナクラスに対応します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      アプリケーションの各ビューは、ActionScript または MXML ファイルに定義された View コンテナクラスに対応します。 このプロパティは、スタックの最初のビューの初期化に使用するビューを指定します。 このプロパティは、View コンテナを拡張するクラスを参照する必要があります。
           <p><codeph>firstViewData</codeph> プロパティを使用して最初のビューに渡すデータ指定します。</p>   
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ViewNavigator/firstViewData"><linktext>firstViewData</linktext></link><link href="spark.components.xml#View"><linktext>View</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:length:get"><apiName>length</apiName><shortdesc>
      ナビゲーターによって管理されているビューの数を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="lengthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      ナビゲーターによって管理されているビューの数を返します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:navigationContent:get"><apiName>navigationContent</apiName><shortdesc conref="ActionBar#navigationContent">
      このプロパティは、ActionBar コンポーネントおよび ViewNavigatorApplication コンポーネントの navigationContent プロパティをオーバーライドします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationContent">
      このプロパティは、ActionBar コンポーネントおよび ViewNavigatorApplication コンポーネントの <codeph>navigationContent</codeph> プロパティをオーバーライドします。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationContent"><linktext>ActionBar.navigationContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:navigationLayout:get"><apiName>navigationLayout</apiName><shortdesc conref="ActionBar#navigationLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:poppedViewReturnedObject:get"><apiName>poppedViewReturnedObject</apiName><shortdesc>
      ナビゲーションスタックからポップオフされたか、別のビューで置き換えられた、最後のビューによって返されたオブジェクトを保持します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components.supportClasses:ViewReturnObject</apiValueClassifier><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      ナビゲーションスタックからポップオフされたか、別のビューで置き換えられた、最後のビューによって返されたオブジェクトを保持します。 値を返すには、スタックからポップされるビューが自分の <codeph>createReturnObject()</codeph> メソッドをオーバーライドします。
           <p>このオブジェクトを使用できるのは、ナビゲーションのポップまたは置換処理に対する応答として、ナビゲーターがビューの切り替え中である場合のみです。新規ビューが <codeph>add</codeph> イベントを受け取ったときに、このオブジェクトが有効であることは保証されています。このオブジェクトは、ビューが <codeph>viewActivate</codeph> イベントを受け取った後に破棄されます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#View/createReturnObject()"><linktext>View.createReturnObject()</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:titleContent:get"><apiName>titleContent</apiName><shortdesc conref="ActionBar#titleContent">
      このプロパティは、ActionBar コンポーネントおよび ViewNavigatorApplication コンポーネントの titleContent プロパティをオーバーライドします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleContent">
      このプロパティは、ActionBar コンポーネントおよび ViewNavigatorApplication コンポーネントの <codeph>titleContent</codeph> プロパティをオーバーライドします。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>ActionBar.titleContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:titleLayout:get"><apiName>titleLayout</apiName><shortdesc conref="ActionBar#titleLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:title:get"><apiName>title</apiName><shortdesc conref="ActionBar#title">
      このプロパティは、ActionBar コンポーネントおよび ViewNavigatorApplication コンポーネントの title プロパティをオーバーライドします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#title">
      このプロパティは、ActionBar コンポーネントおよび ViewNavigatorApplication コンポーネントの <codeph>title</codeph> プロパティをオーバーライドします。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IconItemRenderer"><apiName>IconItemRenderer</apiName><shortdesc>
  IconItemRenderer クラスは、モバイルデバイス用に最適化されたパフォーマンスのよいアイテムレンダラーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style inherit="no" name="messageStyleName" owner="spark.components:IconItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  メッセージコンポーネントのスタイルに使用する CSS スタイル宣言の名前です。
 
  </description>
<default>iconItemRendererMessageStyle
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="iconDelay" owner="spark.components:IconItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  アイコンのソースがまだキャッシュされていない場合に、アイコンのソースの読み込みを試みる前の遅延時間の値です。
 
  <p>遅延が便利な理由は、スクロールしている間は、必ずしも即座にイメージを読み込む必要がないからです。 代わりに、特定の遅延期間待機して、このアイテムレンダラーをユーザーが実際に表示するかどうかを確認する必要があります。</p>
 
  </description>
<default>500
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="spark.components:IconItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  子同士の垂直方向の間隔を示すピクセル数です。 デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合は 6 になります。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="spark.components:IconItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  子同士の水平方向の間隔を示すピクセル数です。デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合は 8 になります。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:IconItemRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:IconItemRenderer
   <strong>Properties</strong>
    decorator=""
    iconContentLoader="<i>See property description</i>"
    iconField="null"
    iconFillMode=""scale
    iconFunction="null"
    iconHeight="NaN"
    iconPlaceholder="null"
    iconScaleMode="stretch"
    iconWidth="NaN"
    label=""
    labelField="null"
    labelFunction="null"
    messageField="null"
    messageFunction="null"
 
   <strong>Common Styles</strong>
    horizontalGap="8"
    iconDelay="500"
    messageStyleName="iconItemRendererMessageStyle"
    verticalGap="6"
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.core:IGraphicElementContainer</apiBaseInterface><apiBaseInterface>spark.core:ISharedDisplayObject</apiBaseInterface><apiBaseClassifier>spark.components:LabelItemRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>
  IconItemRenderer クラスは、モバイルデバイス用に最適化されたパフォーマンスのよいアイテムレンダラーです。 リストベースのコントロールの各アイテムに対して、次の 4 個のオプションパーツが表示されます。 
   <ul>
    <li><codeph>iconField</codeph> または <codeph>iconFunction</codeph> プロパティによって定義される、左側のアイコン。</li>
    <li><codeph>labelField</codeph> プロパティまたは <codeph>labelFunction</codeph> プロパティによって定義される、アイコンの横の 1 行のテキスト。</li>
    <li><codeph>messageField</codeph> プロパティまたは <codeph>messageFunction</codeph> プロパティによって定義される、テキストラベルの下の複数行のメッセージ。</li>
    <li><codeph>decorator</codeph> プロパティによって定義される、右側のデコレーターアイコン。</li>
  </ul>
   <p>1 行のテキストラベルにフォントサイズや色などの CSS スタイルを適用するには、IconItemRenderer クラスにスタイルを設定します。 複数行のメッセージにスタイルを設定するには、<codeph>messageStyleNameM</codeph> スタイルプロパティを使用します。 次の例では、テキストラベルとメッセージの両方にテキストスタイルを設定します。</p>
   <pre>
     &lt;fx:Style>
         .myFontStyle { 
             fontSize: 15;
             color: #9933FF;
         }
  
     &lt;/fx:Style>
     
     &lt;s:List id="myList"
         width="100%" height="100%"
         labelField="firstName">
         &lt;s:itemRenderer>
             &lt;fx:Component>
                 &lt;s:IconItemRenderer messageStyleName="myFontStyle" fontSize="25"
                     labelField="firstName"
                     messageField="lastName" 
                     decorator="@Embed(source='assets/logo_small.jpg')"/>
             &lt;/fx:Component>
         &lt;/s:itemRenderer>
         &lt;s:ArrayCollection>
             &lt;fx:Object firstName="Dave" lastName="Duncam" company="Adobe" phone="413-555-1212"/>
             &lt;fx:Object firstName="Sally" lastName="Smith" company="Acme" phone="617-555-1491"/>
             &lt;fx:Object firstName="Jim" lastName="Jackson" company="Beta" phone="413-555-2345"/>
             &lt;fx:Object firstName="Mary" lastName="Moore" company="Gamma" phone="617-555-1899"/>
         &lt;/s:ArrayCollection>
     &lt;/s:List>
  </pre>
   </apiDesc><example conref="IconItemRendererExample.mxml"/></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.List.xml"><linktext>spark.components.List</linktext></link><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link><link href="" invalidHref="spark.components.IItemRenderer.xml"><linktext>spark.components.IItemRenderer</linktext></link><link href="" invalidHref="spark.components.supportClasses.ItemRenderer.xml"><linktext>spark.components.supportClasses.ItemRenderer</linktext></link><link href="spark.components.xml#LabelItemRenderer"><linktext>spark.components.LabelItemRenderer</linktext></link></related-links><apiConstructor id="spark.components:IconItemRenderer:IconItemRenderer"><apiName>IconItemRenderer</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:IconItemRenderer:invalidateGraphicElementDisplayList"><apiName>invalidateGraphicElementDisplayList</apiName><shortdesc>
      エレメントが変更されてその再描画が必要であることを、ホストコンポーネントに通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="spark.core:IGraphicElement"/><apiDesc>変更されたエレメントです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エレメントが変更されてその再描画が必要であることを、ホストコンポーネントに通知します。<codeph>IGraphicElementHost</codeph> は、IGraphicElement の <codeph>validateDisplayList()</codeph> メソッドを呼び出して、再描画の機会を与える必要があります。 通常、ホストは、自分の <codeph>validateDisplayList()</codeph> メソッドで、エレメントの表示リストを検証します。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:IconItemRenderer:invalidateGraphicElementProperties"><apiName>invalidateGraphicElementProperties</apiName><shortdesc>
      エレメントが変更されてプロパティの検証が必要であることを、ホストコンポーネントに通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="spark.core:IGraphicElement"/><apiDesc>変更されたエレメントです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エレメントが変更されてプロパティの検証が必要であることを、ホストコンポーネントに通知します。<codeph>IGraphicElementHost</codeph> は、IGraphicElement の <codeph>validateProperties()</codeph> メソッドを呼び出して、プロパティをコミットする機会を与える必要があります。 通常、ホストは、自分の <codeph>validateProperties()</codeph> メソッドで、エレメントのプロパティを検証します。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:IconItemRenderer:invalidateGraphicElementSharing"><apiName>invalidateGraphicElementSharing</apiName><shortdesc>
      エレメントレイヤーが変更されたことをホストに通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="spark.core:IGraphicElement"/><apiDesc>サイズが変更されたエレメントです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エレメントレイヤーが変更されたことをホストに通知します。<codeph>IGraphicElementHost</codeph> は、共有された DisplayObject があるグラフィックエレメントのシーケンスを再評価する必要があり、必要に応じて DisplayObject の再割り当てを行い、そのシーケンスを結果として再描画する必要があります。 通常、ホストは、自分の <codeph>validateProperties()</codeph> メソッドで、これを実行します。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:IconItemRenderer:invalidateGraphicElementSize"><apiName>invalidateGraphicElementSize</apiName><shortdesc>
      エレメントサイズが変更されたことをホストコンポーネントに通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="spark.core:IGraphicElement"/><apiDesc>サイズが変更されたエレメントです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エレメントサイズが変更されたことをホストコンポーネントに通知します。<codeph>IGraphicElementHost</codeph> は、IGraphicElement の <codeph>validateSize()</codeph> メソッドを呼び出して、サイズを検証する機会を与える必要があります。 通常、ホストは、自分の <codeph>validateSize()</codeph> メソッドで、エレメントのサイズを検証します。
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:IconItemRenderer:protected:decoratorDisplay"><apiName>decoratorDisplay</apiName><shortdesc>
      このアイテムレンダラーのデコレーターを表示するために使用される表示オブジェクトコンポーネントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="spark.primitives:BitmapImage"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      このアイテムレンダラーのデコレーターを表示するために使用される表示オブジェクトコンポーネントです。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:protected:iconDisplay"><apiName>iconDisplay</apiName><shortdesc>
      アイテムレンダラーのアイコンデータを表示するために使用されるビットマップイメージコンポーネントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="spark.primitives:BitmapImage"/></apiValueDef><apiDesc>
      アイテムレンダラーのアイコンデータを表示するために使用されるビットマップイメージコンポーネントです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:protected:messageDisplay"><apiName>messageDisplay</apiName><shortdesc>
      アイテムレンダラーのメッセージデータを表示するために使用されるテキストコンポーネントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:StyleableTextField</apiValueClassifier></apiValueDef><apiDesc>
      アイテムレンダラーのメッセージデータを表示するために使用されるテキストコンポーネントです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:decorator:get"><apiName>decorator</apiName><shortdesc>
      このアイテムレンダラーの右側に表示されるデコレーターアイコンです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>"" 
     
      </apiDefaultValue></apiValueDef><apiDesc>
      このアイテムレンダラーの右側に表示されるデコレーターアイコンです。
     
      <p>デコレーターアイコンでは、<codeph>verticalAlign</codeph> スタイルが無視されて、常に垂直方向の中央揃えになります。</p>
           <p>デコレーターアイコンは、埋め込みアセットであることが想定されています。外部アセットを使用すると、パフォーマンスが低下することがあります。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconContentLoader:get"><apiName>iconContentLoader</apiName><shortdesc>
      コンテンツローダークライアントに関連付けるイメージキャッシュやキューなどのオプションのカスタムイメージローダーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.core:IContentLoader"/></apiValueDef><apiDesc>
      コンテンツローダークライアントに関連付けるイメージキャッシュやキューなどのオプションのカスタムイメージローダーです。
     
      <p>デフォルト値は、IconItemRenderer で定義されている静的コンテンツキャッシュで、100 エントリまで可能です。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconField:get"><apiName>iconField</apiName><shortdesc>
      アイコンとして表示されるデータアイテム内のフィールドの名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      アイコンとして表示されるデータアイテム内のフィールドの名前です。デフォルトでは、<codeph>iconField</codeph> は <codeph>null</codeph> で、アイテムレンダラーにアイコンは表示されません。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconFillMode:get"><apiName>iconFillMode</apiName><shortdesc conref="spark.primitives.BitmapImage#fillMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>mx.graphics.BitmapFillMode.SCALE&lt;/code>
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#fillMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.graphics.BitmapFillMode.xml"><linktext>mx.graphics.BitmapFillMode</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:iconFunction:get"><apiName>iconFunction</apiName><shortdesc>
      アイコンを決定するために各アイテムで実行されるユーザー指定の関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      アイコンを決定するために各アイテムで実行されるユーザー指定の関数です。 <codeph>iconFunction</codeph> プロパティは <codeph>iconField</codeph> プロパティをオーバーライドします。
           <p>このような場合に、適切なフィールドを検索して有効な URL またはアイコンとして使用されるオブジェクトコンポーネントを返す <codeph>iconFunction</codeph> を指定できます。</p>
           <p>アイコン関数は、データプロバイダー内のアイテムである引数を 1 つ受け取り、<codeph>spark.primitives.BitmapImage</codeph> オブジェクトに <codeph>source</codeph> プロパティとして渡される Object を返します。 アイコン関数は、イメージを指し示す有効な URL またはイメージを表す Class ファイルを返します。 アイコン関数から返される可能性がある他のタイプのオブジェクトについては、<codeph>BitmapImage</codeph> のマニュアルを参照してください。</p>
      <pre>
      myIconFunction(item:Object):Object</pre>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.xml#BitmapImage/source"><linktext>spark.primitives.BitmapImage.source</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:iconHeight:get"><apiName>iconHeight</apiName><shortdesc>
      アイコンの高さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
     
      </apiDefaultValue></apiValueDef><apiDesc>
      アイコンの高さです。指定しないと、イメージの本来の高さが使用されます。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconPlaceholder:get"><apiName>iconPlaceholder</apiName><shortdesc>
      外部から読み込まれるアセットのダウンロード中に使用するアイコンアセットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      外部から読み込まれるアセットのダウンロード中に使用するアイコンアセットです。
     
      <p>このアセットは、外部からロードされるイメージではなく、埋め込みイメージにする必要があります。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconScaleMode:get"><apiName>iconScaleMode</apiName><shortdesc conref="spark.primitives.BitmapImage#scaleMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>mx.graphics.BitmapScaleMode.STRETCH&lt;/code>
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#scaleMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.graphics.BitmapScaleMode.xml"><linktext>mx.graphics.BitmapScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:iconWidth:get"><apiName>iconWidth</apiName><shortdesc>
      アイコンの幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
     
      </apiDefaultValue></apiValueDef><apiDesc>
      アイコンの幅です。指定しないと、イメージの本来の幅が使用されます。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:labelField:get"><apiName>labelField</apiName><shortdesc>
      ラベルとして表示するデータプロバイダーアイテム内のフィールドの名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ラベルとして表示するデータプロバイダーアイテム内のフィールドの名前です。 <codeph>labelFunction</codeph> プロパティはこのプロパティをオーバーライドします。
     
      <p><codeph>labelFunction</codeph> = <codeph>labelField</codeph> = null の場合は、リストベースのコントロールからプッシュされる <codeph>label</codeph> プロパティを使用します。 ただし、<codeph>labelField</codeph> が明示的に <codeph>""</codeph>（空の文字列）に設定されている場合、ラベルは表示されません。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#IconItemRenderer/labelFunction"><linktext>spark.components.IconItemRenderer.labelFunction</linktext></link><link href="" invalidHref="spark.components.xml#IItemRenderer/label"><linktext>spark.components.IItemRenderer.label</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      ラベルを決定するために各アイテムで実行されるユーザー指定の関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ラベルを決定するために各アイテムで実行されるユーザー指定の関数です。 <codeph>labelFunction</codeph> プロパティは <codeph>labelField</codeph> プロパティをオーバーライドします。
           <p>このような場合に、適切なフィールドを検索して表示可能なストリングを返す <codeph>labelFunction</codeph> を指定できます。 また、<codeph>labelFunction</codeph> はフォーマット処理やローカライズにも使用できます。</p>
           <p>ラベル関数は、データプロバイダー内のアイテムである引数を 1 つ受け取り、ストリングを返します。</p>
      <pre>
      myLabelFunction(item:Object):String</pre>
     
      <p><codeph>labelFunction</codeph> = <codeph>labelField</codeph> = null の場合は、リストベースのコントロールからプッシュされる <codeph>label</codeph> プロパティを使用します。 ただし、<codeph>labelField</codeph> が明示的に <codeph>""</codeph>（空の文字列）に設定されている場合、ラベルは表示されません。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#IconItemRenderer/labelFunction"><linktext>spark.components.IconItemRenderer.labelFunction</linktext></link><link href="" invalidHref="spark.components.xml#IItemRenderer/label"><linktext>spark.components.IItemRenderer.label</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:messageField:get"><apiName>messageField</apiName><shortdesc>
      メッセージとして表示されるデータアイテム内のフィールドの名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      メッセージとして表示されるデータアイテム内のフィールドの名前です。<codeph>messageFunction</codeph> プロパティはこのプロパティをオーバーライドします。
           <p>テキストの外観を制御するには、<codeph>messageStyleName</codeph> スタイルを使用します。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:messageFunction:get"><apiName>messageFunction</apiName><shortdesc>
      メッセージを決定する各アイテムで実行されるユーザー指定の関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      メッセージを決定する各アイテムで実行されるユーザー指定の関数です。<codeph>messageFunction</codeph> プロパティは <codeph>messageField</codeph> プロパティをオーバーライドします。
           <p>このような場合に、適切なフィールドを検索して表示可能なストリングを返す <codeph>messageFunction</codeph> を指定できます。 また、<codeph>messageFunction</codeph> はフォーマット処理やローカライズにも使用できます。</p>
           <p>メッセージ関数は、データプロバイダー内のアイテムである引数を 1 つ受け取り、ストリングを返します。</p>
      <pre>
      myMessageFunction(item:Object):String</pre>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:redrawRequested:get"><apiName>redrawRequested</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:IconItemRenderer:label:set"><apiName>label</apiName><shortdesc>
      labelFunction = labelField = null の場合は、リストコントロールからプッシュされる label プロパティを使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      <p><codeph>labelFunction</codeph> = <codeph>labelField</codeph> = null の場合は、リストコントロールからプッシュされる <codeph>label</codeph> プロパティを使用します。 ただし、<codeph>labelField</codeph> が明示的に <codeph>""</codeph>（空の文字列）に設定されている場合、ラベルは表示されません。</p>
     
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#IconItemRenderer/labelField"><linktext>spark.components.IconItemRenderer.labelField</linktext></link><link href="spark.components.xml#IconItemRenderer/labelFunction"><linktext>spark.components.IconItemRenderer.labelFunction</linktext></link><link href="" invalidHref="spark.components.xml#IItemRenderer/label"><linktext>spark.components.IItemRenderer.label</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:ViewMenuItem"><apiName>ViewMenuItem</apiName><shortdesc>
  ViewMenuItem コントロールには、ViewMenu コンテナのメニューアイテムのラベルとアイコンが表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="showsCaret" owner="spark.components:ViewMenuItem" playerVersion="AIR2.5">
<description>
  メニューアイテムを表すボタンのキャレット状態です。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ViewMenuItem&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ViewMenuItem/&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ViewMenuItem コントロールには、ViewMenu コンテナのメニューアイテムのラベルとアイコンが表示されます。メニューアイテムが選択されたときに操作を実行するために、<codeph>click</codeph> イベントのイベントハンドラーを書き込みます。
 
  <p/>
 
 <p>
  <adobeimage alt="" href="../../images/vm_open_menu_vm.png"/>
 </p>
  
  </apiDesc><example conref="ViewMenuExampleHome.mxml"/><example conref="ViewMenuExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#ViewMenu"><linktext>spark.components.ViewMenu</linktext></link><link href="spark.layouts.xml#ViewMenuLayout"><linktext>spark.layouts.ViewMenuLayout</linktext></link><link href="spark.components.supportClasses.xml#ViewNavigatorApplicationBase"><linktext>spark.components.supportClasses.ViewNavigatorApplicationBase</linktext></link><link href="" invalidHref="spark.skins.mobile.ViewMenuItemSkin.xml"><linktext>spark.skins.mobile.ViewMenuItemSkin</linktext></link></related-links><apiConstructor id="spark.components:ViewMenuItem:ViewMenuItem"><apiName>ViewMenuItem</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ViewMenuItem:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      ViewMenuItem コントロールがキャレット状態の場合は true です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      ViewMenuItem コントロールがキャレット状態の場合は <codeph>true</codeph> です。 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:CalloutButton"><apiName>CalloutButton</apiName><shortdesc>
  CalloutButton コントロールは、Callout コンテナを開閉するボタンを定義するドロップダウンコンポーネントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="style" name="repeatInterval"/><Exclude kind="style" name="repeatDelay"/><DefaultProperty name="calloutContent"/><skinParts><SkinPart name="dropDown" owner="spark.components:CalloutButton" playerVersion="AIR3" required="false" var_type="mx.core:IFactory">
<description>
      Callout インスタンスを作成するドロップダウンファクトリを定義するスキンパーツです。<codeph>dropDown</codeph> がスキンに定義されていない場合、<codeph>ClassFactory</codeph> が作成されて、デフォルトの Callout インスタンスが生成されます。
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the drop-down factory which creates the Callout
      instance.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:CalloutButton&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:CalloutButton
   <strong>Properties</strong>
    calloutDestructionPolicy="auto"
    calloutLayout="BasicLayout"
    horizontalPosition="auto"
    verticalPosition="auto
 
   <strong>Events</strong>
    open="<i>No default</i>"
    close="<i>No default</i>"
      ...
      <i>child tags</i>
      ...
  &lt;/s:CalloutButton&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Button</apiBaseClassifier></apiClassifierDef><apiDesc>
  CalloutButton コントロールは、Callout コンテナを開閉するボタンを定義するドロップダウンコンポーネントです。CalloutButton では、Callout コンテナのレイアウトおよび子コンポーネントを指定します。
   <p/>
  <p>
  <adobeimage alt="" href="../../images/ca_calloutButton_ca.png"/>
 </p>
   <p>CalloutButton コントロールは、spark.components.supportClasses.DropDownController クラスを使用して Callout コンテナを管理します。 DropDownController には、保護された <codeph>CalloutButton.dropDownController</codeph> プロパティを使用してアクセスできます。</p>
   <p>コールアウトが開いているときには次のようになります。</p>
  <ul>
    <li>ボタンをクリックするとコールアウトが閉じます</li>
    <li>コールアウトの外側をクリックするとコールアウトが閉じます</li>
  </ul>
   <p>CalloutButton コンポーネントには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>コントロールのテキストラベル全体を表示できる幅です。</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 32 ピクセル、高さ 43 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.mobile.CalloutButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="CalloutButtonExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#Callout"><linktext>spark.components.Callout</linktext></link><link href="" invalidHref="spark.components.Button.xml"><linktext>spark.components.Button</linktext></link><link href="" invalidHref="spark.components.supportClasses.DropDownController.xml"><linktext>spark.components.supportClasses.DropDownController</linktext></link></related-links><adobeApiEvent id="spark.components:CalloutButton_spark.events.DropDownEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  ユーザーが開くボタンをクリックしてコールアウトを表示したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.OPEN</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーが開くボタンをクリックしてコールアウトを表示したときに送出されます。  
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:CalloutButton_spark.events.DropDownEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  次のような理由で、コールアウトが閉じたときに送出されます。コールアウトがプログラムで閉じられたため。ユーザーがコールアウトの外側をクリックしたため。コールアウトの表示中に、ユーザーが開くボタンをクリックしたため。
  
   </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.CLOSE</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  次のような理由で、コールアウトが閉じたときに送出されます。 
  <ul>
      <li>コールアウトがプログラムで閉じられたため。</li>
      <li>ユーザーがコールアウトの外側をクリックしたため。</li>
      <li>コールアウトの表示中に、ユーザーが開くボタンをクリックしたため。</li>
  </ul>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:CalloutButton:CalloutButton"><apiName>CalloutButton</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:CalloutButton:closeDropDown"><apiName>closeDropDown</apiName><shortdesc>
      スキンステートを normal に変更します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      スキンステートを normal に変更します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:CalloutButton:openDropDown"><apiName>openDropDown</apiName><shortdesc>
      dropDown を初期化して、スキンステートを open に変更します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      dropDown を初期化して、スキンステートを open に変更します。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:CalloutButton:calloutContent:get"><apiName>calloutContent</apiName><shortdesc>
      コールアウトのコンテンツに含める一連のコンポーネントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      コールアウトのコンテンツに含める一連のコンポーネントです。
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Callout"><linktext>spark.components.Callout</linktext></link></related-links></apiValue><apiValue id="spark.components:CalloutButton:calloutDestructionPolicy:get"><apiName>calloutDestructionPolicy</apiName><shortdesc>
      コールアウトが閉じられるときに、コールアウトボタンが使用する破棄ポリシーを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>auto
      
      </apiDefaultValue></apiValueDef><apiDesc>
      コールアウトが閉じられるときに、コールアウトボタンが使用する破棄ポリシーを定義します。「<codeph>auto</codeph>」に設定すると、コールアウトを閉じるときにボタンが Callout インスタンスを破棄します。 「<codeph>never</codeph>」に設定すると、Callout コンテナがメモリにキャッシュされます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:calloutLayout:get"><apiName>calloutLayout</apiName><shortdesc>
      Callout コンテナのレイアウトを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>BasicLayout
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Callout コンテナのレイアウトを定義します。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:callout:get"><apiName>callout</apiName><shortdesc>
      DropDownEvent.OPEN が発行された後に作成される Callout インスタンスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="calloutChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:Callout</apiValueClassifier></apiValueDef><apiDesc>
      <codeph>DropDownEvent.OPEN</codeph> が発行された後に作成される Callout インスタンスです。このインスタンスは、<codeph>dropDown</codeph> の <codeph>IFactory</codeph> スキンパーツを使用して作成されます。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#CalloutButton/calloutDestructionPolicy"><linktext>calloutDestructionPolicy</linktext></link></related-links></apiValue><apiValue id="spark.components:CalloutButton:protected:dropDownController:get"><apiName>dropDownController</apiName><shortdesc>
      マウス、キーボード、およびフォーカスに関するすべてのユーザー操作を処理する DropDownController クラスのインスタンスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.components.supportClasses:DropDownController"/></apiValueDef><apiDesc>
      マウス、キーボード、およびフォーカスに関するすべてのユーザー操作を処理する DropDownController クラスのインスタンスです。コンストラクターで DropDownController インスタンスが作成された後、Flex は <codeph>initializeDropDownController()</codeph> メソッドを呼び出します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:horizontalPosition:get"><apiName>horizontalPosition</apiName><shortdesc conref="spark.components.Callout#horizontalPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="spark.components.Callout#horizontalPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:isDropDownOpen:get"><apiName>isDropDownOpen</apiName><shortdesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:verticalPosition:get"><apiName>verticalPosition</apiName><shortdesc conref="spark.components.Callout#verticalPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="spark.components.Callout#verticalPosition">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ToggleSwitch"><apiName>ToggleSwitch</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="style" name="textAlign"/><styles><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:ToggleSwitch" playerVersion="AIR3" theme="mobile" type="uint">
<description>
  テキストシャドウの色です。
 
  </description>
<default>0x000000
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textShadowAlpha" owner="spark.components:ToggleSwitch" playerVersion="AIR3" theme="mobile" type="Number">
<description>
  テキストシャドウのアルファです。
 
  </description>
<default>0.65
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="slideDuration" owner="spark.components:ToggleSwitch" playerVersion="AIR3" type="Number">
<description>
  トラックの選択されたスライドと選択解除されたスライドの間をスライドするサムのアニメーションの期間（ミリ秒）です。トラックの 2 つの任意の位置の間のアニメーションの場合は、アニメーションの時間はそれに比例して短くなります。 例えば、サムをトラックに沿って半分の位置までドラッグすると、スライドのアニメーションはトラックの残りの部分になるので、時間は半分になります。
  
  </description>
<default>125
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components:ToggleSwitch" playerVersion="AIR3" type="uint">
<description>
  ToggleSwitch コントロールの選択側をハイライト表示するために適用される色です。
  
  </description>
<default>0x3F7FBA
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/><skinParts><SkinPart name="thumb" owner="spark.components:ToggleSwitch" playerVersion="AIR3" required="false" var_type="mx.core:IVisualElement">
<description>
      トラックに沿ってドラッグできるスキンパーツです。 <codeph>thumbPosition</codeph> プロパティには、トラックに沿った現在のサムの位置が含まれています。
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that can be dragged along the track.</shortdesc></SkinPart><SkinPart name="track" owner="spark.components:ToggleSwitch" playerVersion="AIR3" required="false" var_type="mx.core:IVisualElement">
<description>
      サムをドラッグできる境界を定義するスキンパーツです。
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the bounds along which the thumb can
      be dragged.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:ToggleSwitch&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:ToggleSwitch
   <strong>Properties</strong>
    selected="null"
    thumbPosition="null"
 
   <strong>Common Styles</strong>
    accentColor="0x3F7FBA"
    slideDuration="125"
 
   <strong>Mobile Styles</strong>
    textShadowAlpha="0.65"
    textShadowColor="0x000000"
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ToggleSwitch は、トラックスキンパーツの両端の間を移動するサムのスキンで構成されており、Spark の Slider コントロールに似ています。
   <p/>
   <p/>
  <p>
  <adobeimage alt="" href="../../images/ts_toggleSwitch_ts.png"/>
 </p>
   <p/>
   <p>ToggleSwitch コントロールは、選択解除ラベルおよび選択ラベルに対して、OFF（選択解除）および ON（選択）のデフォルト値を使用します。ラベルまたはコントロールの他の表示特性を変更するカスタムスキンを定義します。</p>
   <p/>
   <pre>
  package skins
  // components\mobile\skins\MyToggleSwitchSkin.as
  {
      import spark.skins.mobile.ToggleSwitchSkin;
      
      public class MyToggleSwitchSkin extends ToggleSwitchSkin
      {
          public function MyToggleSwitchSkin()
          {
              super();
              // Set properties to define the labels 
              // for the selected and unselected positions.
              selectedLabel="Yes";
              unselectedLabel="No"; 
          }
      }
  }
  </pre>
   </apiDesc><example conref="ToggleSwitchExample.mxml"/></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.ToggleButton.xml"><linktext>spark.components.ToggleButton</linktext></link><link href="" invalidHref="spark.components.HSlider.xml"><linktext>spark.components.HSlider</linktext></link><link href="" invalidHref="spark.skins.mobile.ToggleSwitchSkin.xml"><linktext>spark.skins.mobile.ToggleSwitchSkin</linktext></link></related-links><apiConstructor id="spark.components:ToggleSwitch:ToggleSwitch"><apiName>ToggleSwitch</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ToggleSwitch:thumbPosition:get"><apiName>thumbPosition</apiName><shortdesc>
      トラックに沿った現在のサムの位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      トラックに沿った現在のサムの位置です。値の範囲は 0.0（選択解除）および 1.0（選択）です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ToggleSwitch:selected:set"><apiName>selected</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      <codeph/><codeph/>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:CalloutPosition"><apiName>CalloutPosition</apiName><shortdesc>
  CalloutPosition クラスは、Callout コンポーネントの、オーナーに対する水平方向および垂直方向の相対的な位置の列挙を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  CalloutPosition クラスは、Callout コンポーネントの、オーナーに対する水平方向および垂直方向の相対的な位置の列挙を定義します。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Callout"><linktext>spark.components.Callout</linktext></link><link href="spark.components.xml#Callout/horizontalPosition"><linktext>spark.components.Callout.horizontalPosition</linktext></link><link href="spark.components.xml#Callout/verticalPosition"><linktext>spark.components.Callout.verticalPosition</linktext></link></related-links><apiValue id="spark.components:CalloutPosition:AFTER"><apiName>AFTER</apiName><shortdesc>
      オーナーの末尾の端の後にコールアウトの先頭の端を位置づけます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>after</apiData><apiType value="String"/></apiValueDef><apiDesc>
      オーナーの末尾の端の後にコールアウトの先頭の端を位置づけます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:AUTO"><apiName>AUTO</apiName><shortdesc>
      オーナーの外側にコールアウトを位置づけます。この場合、コールアウトを合わせるために必要なサイズ変更が最小ですみます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc>
      オーナーの外側にコールアウトを位置づけます。この場合、コールアウトを合わせるために必要なサイズ変更が最小ですみます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:BEFORE"><apiName>BEFORE</apiName><shortdesc>
      オーナーの先頭の端の前にコールアウトの末尾の端を位置づけます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>before</apiData><apiType value="String"/></apiValueDef><apiDesc>
      オーナーの先頭の端の前にコールアウトの末尾の端を位置づけます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:END"><apiName>END</apiName><shortdesc>
      オーナーの末尾の端にコールアウトの末尾の端を位置づけます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>end</apiData><apiType value="String"/></apiValueDef><apiDesc>
      オーナーの末尾の端にコールアウトの末尾の端を位置づけます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:MIDDLE"><apiName>MIDDLE</apiName><shortdesc>
      オーナーの horizontalCenter にコールアウトの horizontalCenter を位置づけます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middle</apiData><apiType value="String"/></apiValueDef><apiDesc>
      オーナーの horizontalCenter にコールアウトの horizontalCenter を位置づけます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:START"><apiName>START</apiName><shortdesc>
      オーナーの先頭の端にコールアウトの先頭の端を位置づけます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>start</apiData><apiType value="String"/></apiValueDef><apiDesc>
      オーナーの先頭の端にコールアウトの先頭の端を位置づけます。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:SpinnerListItemRenderer"><apiName>SpinnerListItemRenderer</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:LabelItemRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>
  これは、1 つのテキストコンポーネントが指定された簡単なアイテムレンダラーです。
 
 </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#SpinnerList"><linktext>spark.components.SpinnerList</linktext></link></related-links><apiConstructor id="spark.components:SpinnerListItemRenderer:SpinnerListItemRenderer"><apiName>SpinnerListItemRenderer</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
            
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:DateSpinner"><apiName>DateSpinner</apiName><shortdesc>
  DateSpinner コントロールは、特定の日付または時刻を選択するインターフェイスを提示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="style" name="textAlign"/><styles><style format="Color" inherit="yes" name="accentColor" owner="spark.components:DateSpinner" playerVersion="AIR3" type="uint">
<description>
  今日の日付に一致する日付アイテムに適用する色です。例えば、これを「0x0000FF」に設定し、今日の日付が 1/1/2011 の場合、「January」の月、「1」の日付および「2011」の年がスピナーで青色のテキストになります。この色は時刻アイテムには適用されません。
 
  <p/>
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:DateSpinner" playerVersion="AIR3" type="String">
<description>
  コンポーネントのロケールです。 日付のフォーマット方法を制御します。例えば、フィールドをリストする順序および日付に関連する追加の文字がある場合にはその表示内容などを制御します。Unicode Technical Standard #35 に記述されている標準ロケール識別子を使用します。例えば、「en」、「en_US」および「en-US」はすべて英語で、「ja」は日本語です。指定したロケールがプラットフォームでサポートされていない場合は、「en_US」が使用されます。 ロケールがサポートされているかどうかを特定するには、<codeph>DateTimeFormatter.getAvailableLocaleIDNames()</codeph> を使用します
   <p>デフォルト値は undefined です。このプロパティは上位要素から値を継承します。それでも未定義の場合は、グローバルな <codeph>locale</codeph> スタイルから継承します。 </p>
   <p>Spark の formatters クラスおよび globalization クラスを使用する際には、ルートアプリケーションのこのスタイルを <codeph>LocaleID.DEFAULT</codeph> 定数の値に設定できます。 そうすれば、それらのクラスは、クライアントオペレーティングシステムの国際環境設定を使用します。</p>
   </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセット（ピクセル単位）です。モバイルテーマで使用するときは、このプロパティを負の数にできません。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 可能な値は、<codeph>"none"</codeph> および <codeph>"underline"</codeph> です。
 
  </description>
<default>"none"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="Number">
<description>
  各文字間に表示される追加のピクセル数。 正の値を指定すると文字間隔が通常より広くなり、負の値を指定すると文字間隔が通常より狭くなります。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="Number">
<description>
  追加の行間を表します。
   <p>デフォルト値は 0 です。</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 有効な値は <codeph>normal</codeph> と <codeph>bold</codeph> です。 Button コントロールのデフォルト値は <codeph>bold</codeph> です。 他のすべてのコントロールのデフォルト値は <codeph>normal</codeph> です。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"italic"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 Halo テーマ内では、ColorPicker コントロール以外のすべてのコントロールのデフォルト値は 10 です。Halo テーマ別 ColorPicker コントロールのデフォルトは 11 です。Spark テーマ内では、ColorPicker コントロール以外のすべてのコントロールのデフォルト値は 12 です。Spark テーマ別 ColorPicker コントロールのデフォルトは 11 です。Mobile テーマのデフォルト値は 24 です。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="String">
<description>
  使用するフォントの名前です。 完全な CSS 実装と異なり、カンマ区切りリストはサポートされません。 任意のフォントファミリ名を使用できます。 汎用フォント名を指定した場合、適切なデバイスフォントに置換されます。Halo テーマのデフォルトフォントは <codeph>"Verdana"</codeph> です。Spark テーマのデフォルトフォントは <codeph>"Arial"</codeph> です。Mobile テーマのデフォルトフォントは <codeph>"_sans"</codeph> です。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="uint">
<description>
  コンポーネントのラベルを含めたコンポーネント内のテキストの色です。Halo テーマのデフォルト値は <codeph>0x0B333C</codeph> です。Spark テーマのデフォルト値は <codeph>0x000000</codeph> です。Mobile テーマのデフォルト値は <codeph>0xFFFFFF</codeph> です。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="dateItemList" owner="spark.components:DateSpinner" playerVersion="AIR3" required="false" var_type="mx.core:IFactory">
<description>
      すべてのフィールドの SpinnerList インターフェイスを作成するためのデフォルトファクトリです。 <codeph/>
     
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      The default factory for creating SpinnerList interfaces for all fields.</shortdesc></SkinPart><SkinPart name="listContainer" owner="spark.components:DateSpinner" playerVersion="AIR3" required="false" var_type="mx.core:IVisualElementContainer">
<description>
      
     
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      The container for the date part lists.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DateSpinner&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DateSpinner
    <strong>Properties</strong>
    displayMode="date|time|dateAndTime"
    maxDate="null"
    minDate="null"
    minuteStepSize="1"
    selectedDate=""
 
    <strong>Styles</strong>
    accentColor="0x0099FF"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  DateSpinner コントロールは、特定の日付または時刻を選択するインターフェイスを提示します。 
 
 <p>DateSpinner コントロールは、<codeph>displayMode</codeph> プロパティの値に基づいて日付、時刻、または日付と時刻を表示できます。</p>
 
  <p/>
  <p>
  <adobeimage alt="" href="../../images/datespinner_types.png"/>
 </p>
 
  <p>このコントロールの UI は、現在選択されている日付を表示する SpinnerListContainer 内にラップされた一連の SpinnerList コントロールで構成されています。 タッチまたはマウス操作を使用して、ユーザーは選択した日付を調整できます。</p>
 
  <p>DateSpinnerSkin は、一部のサイズ設定プロパティのみを定義します。 DateSpinner コントロールの外観を変更するには、通常、基盤となる SpinnerListSkin または SpinnerListContainerSkin のスキンを再設定します。</p>
 
  </apiDesc><example conref="DateSpinnerExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#SpinnerList"><linktext>spark.components.SpinnerList</linktext></link><link href="spark.components.calendarClasses.xml#DateSpinnerItemRenderer"><linktext/></link><link href="" invalidHref="spark.skins.mobile.DateSpinnerSkin.xml"><linktext/></link></related-links><adobeApiEvent id="spark.components:DateSpinner_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  選択した日付がユーザーその他によって変更された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  選択した日付がユーザーによって（インタラクティブに）変更されるか、プログラムによって変更された後に送出されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DateSpinner_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  選択した日付がユーザーによって変更された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  選択した日付がユーザーによって変更された後に送出されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DateSpinner:DateSpinner"><apiName>DateSpinner</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:DateSpinner:protected:createDateItemList"><apiName>createDateItemList</apiName><shortdesc>
      指定した日付パーツのリストオブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>
     </apiDesc><apiOperationClassifier>spark.components:SpinnerList</apiOperationClassifier></apiReturn><apiParam><apiItemName>datePart</apiItemName><apiType value="String"/><apiDesc>日付パーツの定数（YEAR_ITEM など）を使用します。
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>
      </apiDesc></apiParam><apiParam><apiItemName>itemCount</apiItemName><apiType value="int"/><apiDesc>
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定した日付パーツのリストオブジェクトを作成します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:DateSpinner:protected:DATE_ITEM"><apiName>DATE_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>dateItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:HOUR_ITEM"><apiName>HOUR_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>hourItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:MERIDIAN_ITEM"><apiName>MERIDIAN_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>meridianItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:MINUTE_ITEM"><apiName>MINUTE_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>minuteItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:MONTH_ITEM"><apiName>MONTH_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>monthItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:YEAR_ITEM"><apiName>YEAR_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>yearItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:dateList"><apiName>dateList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:hourList"><apiName>hourList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:meridianList"><apiName>meridianList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:minuteList"><apiName>minuteList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:monthList"><apiName>monthList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:yearList"><apiName>yearList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:displayMode:get"><apiName>displayMode</apiName><shortdesc>
      DateSpinner が現在表示用に使用しているモードです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>DateSelectorDisplayMode.DATE
      </apiDefaultValue></apiValueDef><apiDesc>
      DateSpinner が現在表示用に使用しているモードです。DateSelectorDisplayMode クラスに定義されている定数またはそれに相当する文字列をこの値に指定できます。
     
      <p>次の表で、指定できる値を説明します。
         <adobetable class="innertable">
         
         
         
         
         <tgroup cols="2"><thead><row><entry>モード（相当する文字列）</entry><entry>説明</entry></row></thead><tbody><row><entry><codeph>DateSelectorDisplayMode.DATE</codeph>（「date」）</entry><entry>月、日および年を表示します。 「通常」がデフォルトのモードです。</entry></row><row><entry><codeph>DateSelectorDisplayMode.TIME</codeph>（「time」）</entry><entry>曜日、月、日および時刻を表示します。</entry></row><row><entry><codeph>DateSelectorDisplayMode.DATE_AND_TIME</codeph>（「dateAndTime」）</entry><entry>時間と分およびロケールでサポートされている場合は AM/PM セレクターを表示します。</entry></row></tbody></tgroup></adobetable>
       </p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.components.calendarClasses.DateSelectorDisplayMode.xml"><linktext>spark.components.calendarClasses.DateSelectorDisplayMode</linktext></link></related-links></apiValue><apiValue id="spark.components:DateSpinner:maxDate:get"><apiName>maxDate</apiName><shortdesc>
      最大選択可能日付です。この日付およびこの日付より前の日付のみを選択できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>Dec 31st, 9999
     
      </apiDefaultValue></apiValueDef><apiDesc>
      最大選択可能日付です。この日付およびこの日付より前の日付のみを選択できます。
     
      <p/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:minDate:get"><apiName>minDate</apiName><shortdesc>
      最小選択可能日付です。この日付およびこの日付より後の日付のみを選択できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>January 1st, 1601
      </apiDefaultValue></apiValueDef><apiDesc>
      最小選択可能日付です。この日付およびこの日付より後の日付のみを選択できます。
     
      <p/>
     
      <p/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:minuteStepSize:get"><apiName>minuteStepSize</apiName><shortdesc>
      分を表示する際に使用する分間隔です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>1
      </apiDefaultValue></apiValueDef><apiDesc>
      分を表示する際に使用する分間隔です。TIME および DATE_AND_TIME モードのみで適用可能です。有効な値は、60 を割り切れる数字である必要があります。無効な値はデフォルト間隔の 1 になります。例えば、「15」という値では、0、15、30、45 という値が表示されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:selectedDate:get"><apiName>selectedDate</apiName><shortdesc>
      DateSpinner コントロールで現在選択されている日付です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>the current date
     
      </apiDefaultValue></apiValueDef><apiDesc>
      DateSpinner コントロールで現在選択されている日付です。
     
      <p/>
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Callout"><apiName>Callout</apiName><shortdesc>
  Callout コンテナは、PopUpAnchor と同様に、オーナーに対して相対的に配置できる追加オプションを備えたポップアップとして機能する SkinnablePopUpContainer です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><styles><style enumeration="inset,flat,none" inherit="no" name="contentBackgroundAppearance" owner="spark.components:Callout" playerVersion="AIR3" type="String">
<description>
  <codeph>contentGroup</codeph> の外観です。<codeph/><codeph/><codeph/>
   <p>ActionScript では、このプロパティを設定するために、<codeph>ContentBackgroundAppearance.INSET</codeph>、<codeph>ContentBackgroundAppearance.FLAT</codeph> および <codeph>ContentBackgroundAppearance.NONE</codeph> の各定数を使用できます。</p>
   </description>
<default>ContentBackgroundAppearance.INSET
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="arrow" owner="spark.components:Callout" playerVersion="AIR3" required="false" var_type="mx.core:UIComponent">
<description>
      オーナーを contentGroup に視覚的に接続するオプションのスキンパーツです。
           </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that visually connects the owner to the
      contentGroup.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Callout&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Callout
    <strong>Properties</strong>
    horizontalPosition="auto"
    verticalPosition="auto"
     <strong>Styles</strong>
    contentBackgroundAppearance="inset"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnablePopUpContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Callout コンテナは、PopUpAnchor と同様に、オーナーに対して相対的に配置できる追加オプションを備えたポップアップとして機能する SkinnablePopUpContainer です。コールアウトでは、オーナーへの方向を表示するオプションの <codeph>arrow</codeph> スキンパーツも追加されます。
   <p/>
  <p>
  <adobeimage alt="" href="../../images/ca_calloutViewNav_ca.png"/>
 </p>
   <p>CalloutButton コントロールを使用して、コールアウトコンテナを開くこともできます。 CalloutButton コントロールは、コールアウトコンテナおよびコールアウトの開閉に必要なすべてのロジックを 1 つのコントロールにカプセル化します。 次に、この CalloutButton コントロールが、コールアウトのオーナー、つまりホストと呼ばれるようになります。</p>
   <p>Callout は <codeph>horizontalPosition</codeph> および <codeph>verticalPosition</codeph> プロパティを使用して、<codeph>open()</codeph> メソッドで指定されたオーナーとの相対位置を決定します。 両方のプロパティを <codeph>CalloutPosition.AUTO</codeph> に設定すると、画面の縦横比に基づいて、オーナーとの重なりを最小限にし、画面境界の調整を最小限にするようなコールアウトの表示位置が選択されます。</p>
   <p>位置が決まると、オーナーに連接する側に、オーナーの水平方向または垂直方向の中央にできるだけ近づくように、矢印を Callout が適切に配置します。Callout の位置がどのエッジとも隣接していない場合、矢印は非表示になります。</p>
   <p>Callout コンテナは、親コンテナの通常のレイアウトの一部として作成しないでください。このコンテナは、親の上にポップアップコンテナとして表示されます。そのため、アプリケーションの MXML コードにこのコンテナを直接作成しないでください。</p>
   <p>代わりに、MXML コンポーネントとして、多くの場合は別の MXML ファイルに作成します。このコンポーネントを表示するには、MXML コンポーネントのインスタンスを作成して、<codeph>open()</codeph> メソッドを呼び出します。コンポーネントを開くときに、コンポーネントのサイズと位置を設定することもできます。</p>
   <p>コンポーネントを閉じるには、<codeph>close()</codeph> メソッドを呼び出します。ポップアップがハンドラーにデータを返す必要がある場合は、<codeph>PopUp.CLOSE</codeph> イベントのイベントリスナーを追加し、返されたデータを <codeph>close()</codeph> メソッドで指定することができます。</p>
   <p>Callout は、最初は <codeph>closed</codeph> スキン状態になっています。開くと、自分自身を PopUpManager にポップアップとして追加し、<codeph>normal</codeph> スキン状態に移行します。開くまたは閉じるアニメーションを定義するには、<codeph>closed</codeph> スキン状態と <codeph>normal</codeph> スキン状態の間のトランジションにカスタムスキンを使用します。</p>
 
  <p>Callout は、Flex コンポーネントのデフォルトの継承動作を変更して、最上位レベルのアプリケーションからスタイルを継承します。 こうすることにより、デフォルトの外観が設定されていると思われるオーナーのスタイル（Button や TextInput など）を、Callout のコンテンツが意図せずに継承しないようにしています。</p>
   <p>Callout コンテナには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
     
     
     
     
     
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row><entry>デフォルトサイズ</entry><entry>子を表示できるだけのサイズ</entry></row><row><entry>最小サイズ</entry><entry>0 ピクセル</entry></row><row><entry>最大サイズ</entry><entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry></row><row><entry>デフォルトスキンクラス</entry><entry>spark.skins.mobile.CalloutSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="CalloutExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#CalloutButton"><linktext>spark.components.CalloutButton</linktext></link><link href="" invalidHref="spark.skins.mobile.CalloutSkin.xml"><linktext>spark.skins.mobile.CalloutSkin</linktext></link><link href="spark.components.xml#ContentBackgroundAppearance"><linktext>spark.components.ContentBackgroundAppearance</linktext></link><link href="spark.components.xml#CalloutPosition"><linktext>spark.components.CalloutPosition</linktext></link></related-links><apiConstructor id="spark.components:Callout:Callout"><apiName>Callout</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
           </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Callout:protected:updateSkinDisplayList"><apiName>updateSkinDisplayList</apiName><shortdesc>
      スキンのレイアウトによってジオメトリが完全に指定されていない矢印の境界を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      スキンのレイアウトによってジオメトリが完全に指定されていない <codeph>arrow</codeph> の境界を設定します。
           <p>サブクラスは、計算された <codeph>arrowDirection</codeph> に基づいて、このメソッドをオーバーライドして、矢印のサイズ、位置および表示を更新できます。</p>
           <p>デフォルトでは、このメソッドは、<codeph>arrow</codeph> の境界または <codeph>owner</codeph> の境界の短いほうに矢印を整列します。この実装では、<codeph>arrow</codeph> と Callout のスキンが同じ座標空間を共有していると仮定しています。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:Callout:protected:actualHorizontalPosition:get"><apiName>actualHorizontalPosition</apiName><shortdesc>
      CalloutPosition.AUTO を評価した後に完全に解決された水平位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      CalloutPosition.AUTO を評価した後に完全に解決された水平位置です。
     
      <p><codeph>horizontalPosition</codeph> が明示的に CalloutPosition.AUTO に指定されている場合に、<codeph>commitProperties()</codeph> でこのプロパティを更新します。 <codeph/></p> 
      
      <p><codeph>updateSkinDisplayList()</codeph> で <codeph>arrowDirection</codeph> つまり矢印の位置を計算する際には、サブクラスがこのプロパティを読み取る必要があります。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Callout:protected:actualVerticalPosition:get"><apiName>actualVerticalPosition</apiName><shortdesc>
      CalloutPosition.AUTO を評価した後に完全に解決された垂直位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      CalloutPosition.AUTO を評価した後に完全に解決された垂直位置です。
     
      <p><codeph>verticalPosition</codeph> が明示的に CalloutPosition.AUTO に指定されている場合に、<codeph>commitProperties()</codeph> でこのプロパティを更新します。 <codeph/></p> 
      
      <p><codeph>updateSkinDisplayList()</codeph> で <codeph>arrowDirection</codeph> つまり矢印の位置を計算する際には、サブクラスがこのプロパティを読み取る必要があります。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Callout:arrowDirection:get"><apiName>arrowDirection</apiName><shortdesc>
      コールアウトからオーナーに向かう方向を示す読み取り専用のプロパティです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/><apiDefaultValue>none
           </apiDefaultValue></apiValueDef><apiDesc>
      コールアウトからオーナーに向かう方向を示す読み取り専用のプロパティです。
           <p>この値は、<codeph>horizontalPosition</codeph> および <codeph>verticalPosition</codeph> で指定されるコールアウトの位置に基づいて計算されます。外部と内部の位置では、コールアウトからオーナーの端に向かう方向を指します。角の位置と絶対中心の位置はサポートされていないので、<codeph>"none"</codeph> という値が返されます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ArrowDirection"><linktext>spark.components.ArrowDirection</linktext></link></related-links></apiValue><apiValue id="spark.components:Callout:horizontalPosition:get"><apiName>horizontalPosition</apiName><shortdesc>
      オーナーに対する、コールアウトの相対的な水平位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>CalloutPosition.AUTO
      </apiDefaultValue></apiValueDef><apiDesc>
      オーナーに対する、コールアウトの相対的な水平位置です。
           <p>指定できる値は、<codeph>"before"</codeph>、<codeph>"start"</codeph>、<codeph>"middle"</codeph>、<codeph>"end"</codeph>、<codeph>"after"</codeph> および <codeph>"auto"</codeph>（デフォルト）です。</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#CalloutPosition"><linktext>spark.components.CalloutPosition</linktext></link></related-links></apiValue><apiValue id="spark.components:Callout:verticalPosition:get"><apiName>verticalPosition</apiName><shortdesc>
      オーナーに対する、コールアウトの相対的な垂直位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>CalloutPosition.AUTO
      </apiDefaultValue></apiValueDef><apiDesc>
      オーナーに対する、コールアウトの相対的な垂直位置です。
           <p>指定できる値は、<codeph>"before"</codeph>、<codeph>"start"</codeph>、<codeph>"middle"</codeph>、<codeph>"end"</codeph>、<codeph>"after"</codeph> および <codeph>"auto"</codeph>（デフォルト）です。</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#CalloutPosition"><linktext>spark.components.CalloutPosition</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:ViewMenu"><apiName>ViewMenu</apiName><shortdesc>
  ViewMenu コンテナでは、View コンテナのメニューが定義されています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="disabledAndLandscape" owner="spark.components:ViewMenu" playerVersion="AIR2.5">
<description>
  無効で横方向の状態です。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="closedAndLandscape" owner="spark.components:ViewMenu" playerVersion="AIR2.5">
<description>
  閉じた状態で横方向の状態です。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="normalAndLandscape" owner="spark.components:ViewMenu" playerVersion="AIR2.5">
<description>
  通常で横方向の状態です。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="items"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components:SkinnablePopUpContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  ViewMenu コンテナでは、View コンテナのメニューが定義されています。各メニューアイテムは、ViewMenuItem コントロールを使用して定義されています。 アプリケーションコンテナでは、ユーザーがデバイスのメニューボタンを押したときに、ViewMenu コンテナが自動的に作成されて表示されます。 また、<codeph>ViewNavigatorApplicationBase.viewMenuOpen</codeph> プロパティを使用して、メニューをプログラムで開くこともできます。
 
  <p/>
 
 <p>
  <adobeimage alt="" href="../../images/vm_open_menu_vm.png"/>
 </p>
 
  <p>ViewMenuLayout クラスでは、メニューのレイアウトが定義されています。 別の方法として、独自のカスタムレイアウトクラスを作成することもできます。</p>
 
  <p><codeph>View.viewMenuItems</codeph> プロパティを使用してメニューアイテムを定義します。次に例を示します。</p>
  
  <pre>
  &lt;s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
      xmlns:s="library://ns.adobe.com/flex/spark" 
      title="Home"> 
 
    ...
 
    &lt;s:viewMenuItems> 
        &lt;s:ViewMenuItem label="Add" click="itemClickInfo(event);"/> 
        &lt;s:ViewMenuItem label="Cancel" click="itemClickInfo(event);"/> 
        &lt;s:ViewMenuItem label="Delete" click="itemClickInfo(event);"/> 
        &lt;s:ViewMenuItem label="Edit" click="itemClickInfo(event);"/> 
        &lt;s:ViewMenuItem label="Search" click="itemClickInfo(event);"/> 
    &lt;/s:viewMenuItems>
 
  &lt;/s:View>
  </pre>
 
  <p>ViewMenu コンテナを MXML で明示的に定義しないことに注意してください。 ViewMenu コンテナは、ViewMenuItem コントロールを保持するために自動的に作成されます。</p>
  
  </apiDesc><example conref="ViewMenuExampleHome.mxml"/><example conref="ViewMenuExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#ViewMenuItem"><linktext>spark.components.ViewMenuItem</linktext></link><link href="spark.layouts.xml#ViewMenuLayout"><linktext>spark.layouts.ViewMenuLayout</linktext></link><link href="spark.components.supportClasses.xml#ViewNavigatorApplicationBase"><linktext>spark.components.supportClasses.ViewNavigatorApplicationBase</linktext></link><link href="" invalidHref="spark.skins.mobile.ViewMenuSkin.xml"><linktext>spark.skins.mobile.ViewMenuSkin</linktext></link></related-links><apiConstructor id="spark.components:ViewMenu:ViewMenu"><apiName>ViewMenu</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ViewMenu:caretIndex:get"><apiName>caretIndex</apiName><shortdesc>
      現在キャレット状態のメニューアイテムです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      現在キャレット状態のメニューアイテムです。値が -1 の場合は、キャレット状態のアイテムがありません。  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewMenu:items:get"><apiName>items</apiName><shortdesc>
      ViewMenu コンテナに表示する ViewMenuItem コントロールの Vector です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components:ViewMenuItem"/></apiValueDef><apiDesc>
      ViewMenu コンテナに表示する ViewMenuItem コントロールの Vector です。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TabbedViewNavigator"><apiName>TabbedViewNavigator</apiName><shortdesc>
  TabbedViewNavigator クラスは、ビューナビゲーターコンテナのコレクションを管理するコンテナです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="tabBar" owner="spark.components:TabbedViewNavigator" playerVersion="AIR2.5" required="false" var_type="spark.components.supportClasses:ButtonBarBase">
<description>
      ナビゲーターのタブバーを定義するスキンパーツです。 
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the tab bar of the navigator.</shortdesc></SkinPart></skinParts></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ISelectableList</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  TabbedViewNavigator クラスは、ビューナビゲーターコンテナのコレクションを管理するコンテナです。 一度にアクティブにして表示できるビューナビゲーターは 1 つのみです。 このクラスには、ビューナビゲーターのコレクションを切り替えることができる TabBar コントロールが含まれています。  
   <p/>
  <p>
  <adobeimage alt="" href="../../images/tvn_sections_with_ab_tvn.png"/>
 </p>
   <p>TabbedViewNavigatorApplication コンテナは、アプリケーション全体に対して 1 つの TabbedViewNavigator コンテナを自動的に作成します。TabbedViewNavigator オブジェクトは、TabbedViewNavigatorApplication コンテナの <codeph>navigator</codeph> プロパティを使用して参照できます。</p>
 
  <p>アクティブつまり選択されたナビゲーターは、TabBar の対応するタブをクリックするか、コンポーネントの <codeph>selectedIndex</codeph> プロパティを変更することにより変更できます。</p>
 
  <p>子のビューナビゲーターのコンテンツは、非アクティブ化されると破棄され、アクティブ化されると動的に作成されます。 </p>  
 
  </apiDesc><example conref="TabbedViewNavigatorExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#View"><linktext>spark.components.View</linktext></link><link href="spark.components.xml#ViewNavigator"><linktext>spark.components.ViewNavigator</linktext></link><link href="" invalidHref="spark.components.TabBar.xml"><linktext>spark.components.TabBar</linktext></link></related-links><adobeApiEvent id="spark.components:TabbedViewNavigator_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  ビューナビゲーターの選択されたインデックスが変更されると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ビューナビゲーターの選択されたインデックスが変更されると送出されます。 このイベントが送出されると、<codeph>selectedIndex</codeph> プロパティおよび <codeph>selectedNavigator</codeph> プロパティが、新しく選択されたビューナビゲーターを参照します。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TabbedViewNavigator_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  TabbedViewNavigator によって管理されるビューナビゲーターのコレクションが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  TabbedViewNavigator によって管理されるビューナビゲーターのコレクションが変更されたときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TabbedViewNavigator_spark.events.IndexChangeEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  選択されたビューナビゲーターが変更される前に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  選択されたビューナビゲーターが変更される前に送出されます。 このイベントをキャンセルすると、アクティブなビューナビゲーターは変更されません。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TabbedViewNavigator_spark.events.IndexChangeEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  selectedIndex プロパティが変更されたか、TabBar コントロールの選択されたタブが変更された結果、現在のビューナビゲーターが変更されると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>selectedIndex</codeph> プロパティが変更されたか、TabBar コントロールの選択されたタブが変更された結果、現在のビューナビゲーターが変更されると送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:TabbedViewNavigator:TabbedViewNavigator"><apiName>TabbedViewNavigator</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:TabbedViewNavigator:addItemAt"><apiName>addItemAt</apiName><shortdesc>
      指定されたインデックス位置にビューナビゲーターを追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>インデックスが 0 未満であるか、または長さより大きい場合
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>追加するビューナビゲーターです。 このビューナビゲーターは <codeph>ViewNavigatorBase</codeph> クラスを拡張する必要があります。
           </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>アイテムを配置するインデックス位置です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたインデックス位置にビューナビゲーターを追加します。 このインデックス位置の後にあったすべてのビューナビゲーターは、1 つだけ下に移動されます。  
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ViewNavigatorBase"><linktext>spark.components.supportClasses.ViewNavigatorBase</linktext></link></related-links></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:addItem"><apiName>addItem</apiName><shortdesc>
      指定されたビューナビゲーターをリストの末尾に追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>追加するビューナビゲーターです。 このビューナビゲーターは <codeph>ViewNavigatorBase</codeph> クラスを拡張する必要があります。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたビューナビゲーターをリストの末尾に追加します。 <codeph>addItemAt(item, length)</codeph> の呼び出しと同等です。 
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ViewNavigatorBase"><linktext>spark.components.supportClasses.ViewNavigatorBase</linktext></link></related-links></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:protected:createTabBarHideEffect"><apiName>createTabBarHideEffect</apiName><shortdesc>
      TabBar コントロールが非表示の場合に再生されるエフェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>TabBar コントロールが非表示の場合に再生されるエフェクトです。
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn></apiOperationDef><apiDesc>
      TabBar コントロールが非表示の場合に再生されるエフェクトを作成します。作成されたエフェクトは、ナビゲーターの TabBar とコンテンツグループの両方のアニメーションを表示します。
     
      <p>TabbedViewNavigator は、このエフェクトが実行された後に TabBar の <codeph>includeInLayout</codeph> プロパティおよび <codeph>visible</codeph> プロパティが <codeph>false</codeph> になることを想定しています。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:protected:createTabBarShowEffect"><apiName>createTabBarShowEffect</apiName><shortdesc>
      TabBar コントロールが表示される場合に再生されるエフェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>TabBar コントロールが表示されるときに再生されるエフェクトです。
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn></apiOperationDef><apiDesc>
      TabBar コントロールが表示される場合に再生されるエフェクトを作成します。作成されたエフェクトは、ナビゲーターの TabBar とコンテンツグループの両方のアニメーションを表示します。
     
      <p>TabbedViewNavigator は、このエフェクトが実行された後に TabBar の <codeph>includeInLayout</codeph> プロパティおよび <codeph>visible</codeph> プロパティが <codeph>true</codeph> になることを想定しています。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:getItemAt"><apiName>getItemAt</apiName><shortdesc>
      指定されたインデックス位置にあるビューナビゲーターオブジェクトを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>index &lt; 0 または index >= length の場合
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>指定されたインデックス位置にあるナビゲーターです。ナビゲーターがない場合は null です。
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>アイテムを取得するリストのインデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>アイテムがローカルでない場合に要求時に取得するアイテムの方向と量を示す値です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたインデックス位置にあるビューナビゲーターオブジェクトを取得します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:getItemIndex"><apiName>getItemIndex</apiName><shortdesc>
      ビューナビゲーターがビューナビゲーターのリスト内にある場合に、ビューナビゲーターのインデックスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>ビューナビゲーターのインデックスです。アイテムがリスト内にない場合は -1 です。
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>見つけようとしているビューナビゲーターオブジェクトです。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      ビューナビゲーターがビューナビゲーターのリスト内にある場合に、ビューナビゲーターのインデックスを返します。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:hideTabBar"><apiName>hideTabBar</apiName><shortdesc>
      ナビゲーターのタブバーを非表示にします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>animate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>タブを非表示にするときに、非表示エフェクトを再生するかどうかを示します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ナビゲーターのタブバーを非表示にします。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      ビューナビゲーターのプロパティが更新されたことを外部コンポーネントに通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>更新されたビューナビゲーターです。
           </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>更新されたプロパティを指定する String、QName または int です。
           </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>そのプロパティの古い値です。 プロパティが null の場合はアイテムの古い値を指定できます。
           </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>そのプロパティの新しい値です。 プロパティが null の場合、アイテムは新しい値と見なされるので、指定する必要はありません。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ビューナビゲーターのプロパティが更新されたことを外部コンポーネントに通知します。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:removeAll"><apiName>removeAll</apiName><shortdesc>
      ナビゲーターからすべての子のビューナビゲーターを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      ナビゲーターからすべての子のビューナビゲーターを削除します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:removeItemAt"><apiName>removeItemAt</apiName><shortdesc>
      指定されたインデックス位置にあるビューナビゲーターを削除し、返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>index &lt; 0 または index >= length の場合。
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>削除されたアイテムです。
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>アイテムが削除されるインデックスです。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたインデックス位置にあるビューナビゲーターを削除し、返します。このインデックス位置の後にあったすべてのアイテムのインデックスは、1 だけ減少します。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:setItemAt"><apiName>setItemAt</apiName><shortdesc>
      指定されたインデックス位置にビューナビゲーターを追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>インデックスが 0 未満であるか、または長さ以上の場合
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>置き換えられたナビゲーターです。ナビゲーターがない場合は null です。
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>インデックス位置に配置するビューナビゲーターです。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>ナビゲーターを配置するインデックス位置です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたインデックス位置にビューナビゲーターを追加します。 アイテムが既にそのインデックス位置にある場合は、新しいアイテムに置き換えられ、インデックス位置にあったアイテムが返されます。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:showTabBar"><apiName>showTabBar</apiName><shortdesc>
      ナビゲーターのタブバーを表示します
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>animate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>タブを表示するときに、表示エフェクトを再生するかどうかを示します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ナビゲーターのタブバーを表示します
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:toArray"><apiName>toArray</apiName><shortdesc>
      IList 実装と同じ順序で指定された配列を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>配列です。
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      IList 実装と同じ順序で指定された配列を返します。 
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:TabbedViewNavigator:length:get"><apiName>length</apiName><shortdesc>
      このコンポーネントによって管理されている子のビューナビゲーターの数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      このコンポーネントによって管理されている子のビューナビゲーターの数です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TabbedViewNavigator:navigators:get"><apiName>navigators</apiName><shortdesc>
      この TabbedViewNavigator によって管理されているビューナビゲーターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components.supportClasses:ViewNavigatorBase"/></apiValueDef><apiDesc>
      この TabbedViewNavigator によって管理されているビューナビゲーターです。 各ビューナビゲーターは、この TabbedViewNavigator のタブバーのタブとして表されています。一度にアクティブにできるのは 1 つのビューナビゲーターのみです。 アクティブなビューナビゲーターは、<codeph>selectedNavigator</codeph> プロパティを使用して参照できます。
     
      <p>このプロパティを変更すると、現在のビューナビゲーターが削除されて、<codeph>selectedIndex</codeph> が 0 に設定されます。 この操作はキャンセルできず、即座にコミットされます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TabbedViewNavigator:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      選択されたビューナビゲーターの 0 から始まるインデックスです。または、何も選択されていない場合は -1 です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      選択されたビューナビゲーターの 0 から始まるインデックスです。または、何も選択されていない場合は -1 です。 <codeph>selectedIndex</codeph> プロパティを設定すると、現在選択されているナビゲーターが選択解除され、指定したインデックスのナビゲーターが選択されます。
           <p>値は常に -1 ～ (<codeph>navigators.length</codeph> - 1) の間です。 <codeph>selectedIndex</codeph> よりも低いインデックスのアイテムがコンポーネントから削除されると、選択されたインデックスがそれに応じて下方向に調整されます。</p>
           <p>選択されたアイテムが削除されると、選択されたインデックスは次の値に設定されます。</p>
           <ul>
        <li>残っているアイテムがない場合は -1 です。</li>
        <li><codeph>selectedIndex</codeph> - 少なくとも 1 つのアイテムがある場合は 1 です。</li>
      </ul>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TabbedViewNavigator:selectedNavigator:get"><apiName>selectedNavigator</apiName><shortdesc>
      TabbedViewNavigator 用に選択されたビューナビゲーターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components.supportClasses:ViewNavigatorBase</apiValueClassifier></apiValueDef><apiDesc>
      TabbedViewNavigator 用に選択されたビューナビゲーターです。一度にアクティブにできるのは 1 つのビューナビゲーターのみです。 アクティブなビューナビゲーターは <codeph>selectedIndex</codeph> プロパティを変更するか、TabBar コントロールのタブを選択して設定できます。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ContentBackgroundAppearance"><apiName>ContentBackgroundAppearance</apiName><shortdesc>
  ContentBackgroundAppearance クラスは、Callout の contentBackgroundAppearance スタイルの許可値の定数を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ContentBackgroundAppearance クラスは、Callout の <codeph>contentBackgroundAppearance</codeph> スタイルの許可値の定数を定義します。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Callout/style:contentBackgroundAppearance"><linktext>spark.components.Callout.contentBackgroundAppearance</linktext></link></related-links><apiValue id="spark.components:ContentBackgroundAppearance:FLAT"><apiName>FLAT</apiName><shortdesc>
      contentGroup にマスクを適用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>flat</apiData><apiType value="String"/></apiValueDef><apiDesc>
      contentGroup にマスクを適用します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ContentBackgroundAppearance:INSET"><apiName>INSET</apiName><shortdesc>
      contentGroup にシャドウおよびマスクを適用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>inset</apiData><apiType value="String"/></apiValueDef><apiDesc>
      contentGroup にシャドウおよびマスクを適用します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ContentBackgroundAppearance:NONE"><apiName>NONE</apiName><shortdesc>
      contentBackgroundColor スタイルと contentGroup マスキングの両方を無効にします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>contentBackgroundColor</codeph> スタイルと contentGroup マスキングの両方を無効にします。Callout のコンテンツを <codeph>backgroundColor</codeph> の上に直接表示する場合、またはコンテンツが自分でマスキングを提供する場合は、この値を使用します。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ActionBarDefaultButtonAppearance"><apiName>ActionBarDefaultButtonAppearance</apiName><shortdesc>
  ActionBarDefaultButtonAppearance クラスは、ActionBar の defaultButtonAppearance スタイルの許可値の定数を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ActionBarDefaultButtonAppearance クラスは、ActionBar の <codeph>defaultButtonAppearance</codeph> スタイルの許可値の定数を定義します。
  
  </apiDesc></apiClassifierDetail><apiValue id="spark.components:ActionBarDefaultButtonAppearance:BEVELED"><apiName>BEVELED</apiName><shortdesc>
      ナビゲーショングループとアクションコンテンツグループのボタンに使用される、ベベルが適用された不透明なボタンスキンを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>beveled</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ナビゲーショングループとアクションコンテンツグループのボタンに使用される、ベベルが適用された不透明なボタンスキンを指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ActionBarDefaultButtonAppearance:NORMAL"><apiName>NORMAL</apiName><shortdesc>
      ナビゲーショングループとアクションコンテンツグループのボタンに使用される、透明なボタンスキンを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ナビゲーショングループとアクションコンテンツグループのボタンに使用される、透明なボタンスキンを指定します。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:View"><apiName>View</apiName><shortdesc>
  View クラスは、ビューナビゲーターによって使用されるすべてのビューの基本コンテナクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><Exclude kind="property" name="z"/><Exclude kind="property" name="scaleZ"/><Exclude kind="property" name="scaleY"/><Exclude kind="property" name="scaleX"/><Exclude kind="property" name="maxWidth"/><Exclude kind="property" name="minWidth"/><Exclude kind="property" name="width"/><Exclude kind="property" name="maxHeight"/><Exclude kind="property" name="minHeight"/><Exclude kind="property" name="height"/><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:View&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:View
   <strong>Properties</strong>
    actionBarVisible="true"
    actionContent="null"
    actionLayout="null"
    data="null"
    destructionPolicy="auto"
    navigationContent="null"
    navigationLayout="null"
    overlayControls="false"
    tabBarVisible="true"
    title=""
    titleContent="null"
    titleLayout="null"
    viewMenuItems="null"
 
   <strong>Events</strong>
    backKeyPressed="<i>No default</i>"
    dataChange="<i>No default</i>"
    menuKeyPressed="<i>No default</i>"
    removing="<i>No default</i>"
    viewActivate="<i>No default</i>"
    viewDeactivate="<i>No default</i>"
 
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  View クラスは、ビューナビゲーターによって使用されるすべてのビューの基本コンテナクラスです。 View コンテナは Group コンテナを拡張して、親のナビゲーターと通信するために使用される追加プロパティを追加します。
   <p>モバイルアプリケーションでは、アプリケーションのコンテンツ領域に、アプリケーションを構成する個々の画面やビューが表示されます。ユーザーは、タッチスクリーン、アプリケーションの組み込みコンポーネントおよびモバイルデバイスの入力コントロールを使用して、アプリケーションのビューをナビゲートします。</p>
   <p/>
  <p>
  <adobeimage alt="" href="../../images/vn_single_section_home_vn.png"/>
 </p>
   <p>アプリケーションの各ビューは、ActionScript または MXML ファイルに定義された View コンテナに対応します。各 View には、そのビューに関連付けられているデータを指定する <codeph>data</codeph> プロパティが含まれています。 ユーザーがアプリケーションをナビゲートすると、View は <codeph>data</codeph> プロパティを使用して、相互に情報を渡すことができます。</p>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ViewNavigator"><linktext>ViewNavigator</linktext></link></related-links><adobeApiEvent id="spark.components:View_spark.events.ViewNavigatorEvent.REMOVING_removing"><apiName>removing</apiName><shortdesc>
  画面の変更に応答して、画面が削除されようとするときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ViewNavigatorEvent.REMOVING</apiEventType><adobeApiEventClassifier>spark.events.ViewNavigatorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  画面の変更に応答して、画面が削除されようとするときに送出されます。このイベントの処理中に <codeph>preventDefault()</codeph> を呼び出すと、画面の変更がキャンセルされます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_spark.events.ViewNavigatorEvent.VIEW_DEACTIVATE_viewDeactivate"><apiName>viewDeactivate</apiName><shortdesc>
  現在のビューが非アクティブ化されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ViewNavigatorEvent.VIEW_DEACTIVATE</apiEventType><adobeApiEventClassifier>spark.events.ViewNavigatorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  現在のビューが非アクティブ化されたときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_spark.events.ViewNavigatorEvent.VIEW_ACTIVATE_viewActivate"><apiName>viewActivate</apiName><shortdesc>
  現在のビューがアクティブ化されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ViewNavigatorEvent.VIEW_ACTIVATE</apiEventType><adobeApiEventClassifier>spark.events.ViewNavigatorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  現在のビューがアクティブ化されたときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_mx.events.FlexEvent.MENU_KEY_PRESSED_menuKeyPressed"><apiName>menuKeyPressed</apiName><shortdesc>
  メニューキーが押されて、モバイルアプリケーション内でビューが終了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.MENU_KEY_PRESSED</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  メニューキーが押されて、モバイルアプリケーション内でビューが終了したときに送出されます。
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  data プロパティが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>data</codeph> プロパティが変更されたときに送出されます。
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_mx.events.FlexEvent.BACK_KEY_PRESSED_backKeyPressed"><apiName>backKeyPressed</apiName><shortdesc>
  戻るキーが押されて、モバイルアプリケーション内でビューが終了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.BACK_KEY_PRESSED</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  戻るキーが押されて、モバイルアプリケーション内でビューが終了したときに送出されます。
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:View:View"><apiName>View</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:View:createReturnObject"><apiName>createReturnObject</apiName><shortdesc>
      このビューがナビゲーターのスタックからポップされたときにビューナビゲーターに返されるオブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>ViewNavigator.poppedViewReturnedObject</codeph> プロパティの <codeph>object</codeph> フィールドに書き込まれる値です。  
           </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      このビューがナビゲーターのスタックからポップされたときにビューナビゲーターに返されるオブジェクトを作成します。
           <p>このビューがスタックからポップされたときに、新しいビューにデータを返すには、View のこのメソッドをオーバーライドします。<codeph>createReturnObject()</codeph> メソッドは 1 つの Object を返します。このメソッドによって返された Object は、<codeph>ViewNavigator.poppedViewReturnedObject</codeph> プロパティに書き込まれます。 </p>
           <p>ViewReturnObject タイプの <codeph>ViewNavigator.poppedViewReturnedObject</codeph> プロパティです。 <codeph>ViewReturnObject.object</codeph> プロパティには、このメソッドによって返された値が含まれています。 </p>
           <p><codeph>poppedViewReturnedObject</codeph> プロパティが null の場合、データは返されませんでした。 新しいビューが <codeph>add</codeph> イベントを受け取る前に、新しいビューの <codeph>poppedViewReturnedObject</codeph> プロパティが設定されることが保証されています。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#ViewNavigator/poppedViewReturnedObject"><linktext>ViewNavigator.poppedViewReturnedObject</linktext></link><link href="spark.components.supportClasses.xml#ViewReturnObject"><linktext>spark.components.supportClasses.ViewReturnObject</linktext></link></related-links></apiOperation><apiOperation id="spark.components:View:deserializeData"><apiName>deserializeData</apiName><shortdesc>
      通常 serializeData() メソッドを呼び出して、ビューによってディスクに保存されたデータオブジェクトを非直列化します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>ビューの <codeph>data</codeph> プロパティに割り当てられる値です。
          
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>非直列化するデータオブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      通常 <codeph>serializeData()</codeph> メソッドを呼び出してビューによってディスクに保存されたデータオブジェクトを非直列化します。  
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:View:getCurrentViewState"><apiName>getCurrentViewState</apiName><shortdesc>
      ステージの縦横比をチェックして、View の変更後の正しい状態を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>ビューに適用する状態の名前を指定するストリングです。有効な戻り値は、<codeph>"portrait"</codeph> か <codeph>"landscape"</codeph> のどちらかです。 状態が変更されるのは、必要な状態が View に存在する場合のみです。 存在しない場合、このメソッドは、コンポーネントの現在の状態を返します。
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      ステージの縦横比をチェックして、View の変更後の正しい状態を返します。  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:View:serializeData"><apiName>serializeData</apiName><shortdesc>
      ビューをディスクに保存する際に、ビューの data プロパティをシリアライズする役目があります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>シリアライズされたデータオブジェクト。
     
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      ビューをディスクに保存する際に、ビューの <codeph>data</codeph> プロパティをシリアライズする役目があります。返されたオブジェクトは、共有オブジェクトに正しく書き込めるものであることが必要です。 デフォルトでは、このメソッドはビューの <codeph>data</codeph> プロパティを返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:View:actionBarVisible:get"><apiName>actionBarVisible</apiName><shortdesc>
      ビューがアクションバーを表示するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      ビューがアクションバーを表示するかどうかを指定します。 このプロパティは、ビューナビゲーターの ActionBar コントロールの <codeph>visible</codeph> プロパティに関連付けられているとは限りません。 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:actionContent:get"><apiName>actionContent</apiName><shortdesc conref="ActionBar#actionContent">
      このプロパティは、ActionBar コンポーネント、ViewNavigator コンポーネントおよび ViewNavigatorApplication コンポーネントの actionContent プロパティをオーバーライドします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionContent">
      このプロパティは、ActionBar コンポーネント、ViewNavigator コンポーネントおよび ViewNavigatorApplication コンポーネントの <codeph>actionContent</codeph> プロパティをオーバーライドします。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionContent"><linktext>ActionBar.actionContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:View:actionLayout:get"><apiName>actionLayout</apiName><shortdesc conref="ActionBar#actionLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:data:get"><apiName>data</apiName><shortdesc>
      現在のビューに関連付けられているデータです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      現在のビューに関連付けられているデータです。このプロパティを使用して、View がナビゲーターのスタックにプッシュされたときに、View に情報を渡します。このプロパティは、<codeph>data</codeph> 引数を <codeph>pushView()</codeph> メソッドに渡すことにより設定できます。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:destructionPolicy:get"><apiName>destructionPolicy</apiName><shortdesc>
      このビューが削除されるときに、ビューのナビゲーターが使用する破棄ポリシーを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>auto
     
      </apiDefaultValue></apiValueDef><apiDesc>
      このビューが削除されるときに、ビューのナビゲーターが使用する破棄ポリシーを定義します。「auto」に設定されている場合は、ビューがアクティブでなくなると、ナビゲーターがビューを破棄します。「never」に設定されている場合は、ビューがメモリーにキャッシュされます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:isActive:get"><apiName>isActive</apiName><shortdesc>
      現在のビューがアクティブかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      現在のビューがアクティブかどうかを示します。 ビューのナビゲーターは、状態の変更に応じて、このフラグを <codeph>true</codeph> または <codeph>false</codeph> に自動的に設定します。 このプロパティを設定すると、<codeph>viewActivate</codeph> イベントまたは <codeph>viewDeactivate</codeph> イベントが送出される場合があります。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:navigationContent:get"><apiName>navigationContent</apiName><shortdesc conref="ActionBar#navigationContent">
      このプロパティは、ActionBar コンポーネント、ViewNavigator コンポーネントおよび ViewNavigatorApplication コンポーネントの navigationContent プロパティをオーバーライドします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationContent">
      このプロパティは、ActionBar コンポーネント、ViewNavigator コンポーネントおよび ViewNavigatorApplication コンポーネントの <codeph>navigationContent</codeph> プロパティをオーバーライドします。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationContent"><linktext>ActionBar.navigationContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:View:navigationLayout:get"><apiName>navigationLayout</apiName><shortdesc conref="ActionBar#navigationLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:navigator:get"><apiName>navigator</apiName><shortdesc>
     このビューがあるビューナビゲーターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="navigatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:ViewNavigator</apiValueClassifier></apiValueDef><apiDesc>
     このビューがあるビューナビゲーターです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:overlayControls:get"><apiName>overlayControls</apiName><shortdesc>
      デフォルトでは、モバイルアプリケーションの TabBar コントロールおよび ActionBar コントロールは、アプリケーションのビューで使用できない領域を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      デフォルトでは、モバイルアプリケーションの TabBar コントロールおよび ActionBar コントロールは、アプリケーションのビューで使用できない領域を定義します。つまり、コンテンツはモバイルデバイスのフルスクリーンサイズを使用できません。このプロパティを <codeph>true</codeph> に設定すると、アプリケーションのコンテンツ領域が画面の幅と高さ全体になります。 ActionBar コントロールと TabBar コントロールは、0.5 の <codeph>alpha</codeph> 値を使用してコンテンツ領域に重ねられるため、部分的に透明になります。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:tabBarVisible:get"><apiName>tabBarVisible</apiName><shortdesc>
      ビューがタブバーを表示するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      ビューがタブバーを表示するかどうかを指定します。 このプロパティは、ナビゲーターの TabBar コントロールの <codeph>visible</codeph> プロパティに関連付けられているとは限りません。 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:titleContent:get"><apiName>titleContent</apiName><shortdesc conref="ActionBar#titleContent">
      このプロパティは、ActionBar コンポーネント、ViewNavigator コンポーネントおよび ViewNavigatorApplication コンポーネントの titleContent プロパティをオーバーライドします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleContent">
      このプロパティは、ActionBar コンポーネント、ViewNavigator コンポーネントおよび ViewNavigatorApplication コンポーネントの <codeph>titleContent</codeph> プロパティをオーバーライドします。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>ActionBar.titleContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:View:titleLayout:get"><apiName>titleLayout</apiName><shortdesc conref="ActionBar#titleLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:title:get"><apiName>title</apiName><shortdesc conref="ActionBar#title">
      このプロパティは、ActionBar コンポーネント、ViewNavigator コンポーネントおよび ViewNavigatorApplication コンポーネントの title プロパティをオーバーライドします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#title">
      このプロパティは、ActionBar コンポーネント、ViewNavigator コンポーネントおよび ViewNavigatorApplication コンポーネントの <codeph>title</codeph> プロパティをオーバーライドします。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:viewMenuItems:get"><apiName>viewMenuItems</apiName><shortdesc>
      この View がアクティブビューの場合に、ViewMenu に渡される ViewMenuItem オブジェクトの Vector です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components:ViewMenuItem"/></apiValueDef><apiDesc>
      この View がアクティブビューの場合に、ViewMenu に渡される ViewMenuItem オブジェクトの Vector です。 
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ViewMenu"><linktext>ViewMenu</linktext></link><link href="spark.components.xml#ViewMenuItem"><linktext>ViewMenuItem</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:ArrowDirection"><apiName>ArrowDirection</apiName><shortdesc>
  ビジュアルコンポーネントで使用する矢印の方向の列挙です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ビジュアルコンポーネントで使用する矢印の方向の列挙です。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Callout/arrowDirection"><linktext>spark.components.Callout.arrowDirection</linktext></link></related-links><apiValue id="spark.components:ArrowDirection:DOWN"><apiName>DOWN</apiName><shortdesc>
      下を指す矢印です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>down</apiData><apiType value="String"/></apiValueDef><apiDesc>
      下を指す矢印です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ArrowDirection:LEFT"><apiName>LEFT</apiName><shortdesc>
      左を指す矢印です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
      左を指す矢印です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ArrowDirection:NONE"><apiName>NONE</apiName><shortdesc>
      矢印の方向はありません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
      矢印の方向はありません。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ArrowDirection:RIGHT"><apiName>RIGHT</apiName><shortdesc>
      右を指す矢印です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
      右を指す矢印です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ArrowDirection:UP"><apiName>UP</apiName><shortdesc>
      上を指す矢印です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>up</apiData><apiType value="String"/></apiValueDef><apiDesc>
      上を指す矢印です。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:BusyIndicator"><apiName>BusyIndicator</apiName><shortdesc>
  BusyIndicator は、長時間実行される操作の進行中に表示するコンポーネントを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:BusyIndicator" playerVersion="AIR2.5" theme="spark,mobile" type="uint">
<description>
  スピナーのスポークのカラーです。
   
  </description>
<default>0x000000
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="rotationInterval" owner="spark.components:BusyIndicator" playerVersion="AIR2.5" type="Number">
<description>
  このコンポーネントの回転と回転の間の遅延間隔です（ミリ秒）。コンポーネントの回転速度を制御します。 
 
  </description>
<default>50
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
   
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:BusyIndicator&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:BusyIndicator
    <strong>Common Styles</strong>
    rotationInterval=50
 
    <strong>Spark Styles</strong>
    symbolColor="0x000000"
  
    <strong>Mobile Styles</strong>
    symbolColor="0x000000"
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  BusyIndicator は、長時間実行される操作の進行中に表示するコンポーネントを定義します。このコンポーネントは 12 本のスポークがあるスピナーを作成します。スポークのカラーは、<codeph>symbolColor</codeph> スタイルの値で制御されます。このコンポーネントの透明度は、<codeph>alpha</codeph> プロパティを使用して変更できますが、各スポークのアルファ値は変更できません。
   <p/>
  <p>
  <adobeimage alt="" href="../../images/bi_busy_indicator_bi.png"/>
 </p>
 
  <p>このコンポーネントの回転速度は、<codeph>rotationInterval</codeph> スタイルによって制御されます。<codeph>rotationInterval</codeph> スタイルは、回転と回転の間の遅延をミリ秒単位で設定します。<codeph>rotationInterval</codeph> の値を減らすと、回転速度が速くなります。</p>
 
  <p>BusyIndicator には、次のデフォルト特性があります。</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row><entry>デフォルトサイズ</entry><entry>160 DPI：26x26 ピクセル 240 DPI：40x40 ピクセル 320 DPI：52x52 ピクセル</entry></row><row><entry>最小サイズ</entry><entry>20x20 ピクセル</entry></row><row><entry>最大サイズ</entry><entry>制限なし</entry></row></tbody></tgroup></adobetable>
  
  <p>BusyIndicator のスピナーの直径は、コンポーネントの幅と高さの小さいほうの値になります。直径は偶数にする必要があり、奇数に設定すると 1 減らされます。</p>
 
  </apiDesc><example conref="BusyIndicatorExample.mxml"/><example conref="BusyIndicatorExampleHomeView.mxml"/></apiClassifierDetail><apiConstructor id="spark.components:BusyIndicator:BusyIndicator"><apiName>BusyIndicator</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:ActionBar"><apiName>ActionBar</apiName><shortdesc>
  ActionBar クラスは、タイトル、ナビゲーション、アクションのコンテンツグループを含むコンポーネントを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="titleContentWithActionAndNavigation" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  <codeph>titleContent</codeph> スキンパーツ用に定義されたコンテンツが指定された ActionBar、および<codeph>actionGroup</codeph> スキンパーツと <codeph>navigationGroup</codeph> スキンパーツに表示するコンポーネントです。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleContentWithNavigation" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  <codeph>titleContent</codeph> スキンパーツのコンテンツが指定された ActionBar、および <codeph>navigationGroup</codeph> スキンパーツに表示される <codeph>navigationContent</codeph> プロパティに定義されたコンポーネントです。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleContentWithAction" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  <codeph>titleContent</codeph> スキンパーツのコンテンツが指定された ActionBar、および<codeph>actionGroup</codeph> スキンパーツに表示される <codeph>actionContent</codeph> プロパティに定義されたコンポーネントです。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleContent" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  <codeph>titleDisplay</codeph> スキンパーツではなく、<codeph>titleContent</codeph> スキンパーツのコンテンツが指定された ActionBar です。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleWithActionAndNavigation" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  <codeph>titleDisplay</codeph> スキンパーツ用に定義されたコンテンツが指定された ActionBar、および <codeph>actionGroup</codeph> スキンパーツと <codeph>navigationGroup</codeph> スキンパーツに表示するコンポーネントです。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleWithNavigation" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  <codeph>titleDisplay</codeph> スキンパーツ用に定義されたコンテンツが指定された ActionBar、および <codeph>navigationGroup</codeph> スキンパーツに表示される <codeph>navigationContent</codeph> プロパティに定義されたコンポーネントです。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleWithAction" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  <codeph>titleDisplay</codeph> スキンパーツ用に定義されたコンテンツが指定された ActionBar、および <codeph>actionGroup</codeph> スキンパーツに表示される <codeph>actionContent</codeph> プロパティに定義されたコンポーネントです。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="title" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  <codeph>titleDisplay</codeph> スキンパーツが指定されているがコンテンツが指定されていない ActionBar のベースステートです。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style enumeration="normal,beveled" inherit="no" name="defaultButtonAppearance" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="String">
<description>
  ナビゲーショングループとアクショングループのボタンの外観です。有効な MXML 値は <codeph>normal</codeph> と <codeph>beveled</codeph> です
   <p>ActionScript では、このプロパティを設定するために、<codeph>ActionBarDefaultButtonAppearance.NORMAL</codeph> および <codeph>ActionBarDefaultButtonAppearance.BEVELED</codeph> の各定数を使用できます。</p>
   </description>
<default>ActionBarDefaultButtonAppearance.NORMAL
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textShadowAlpha" owner="spark.components:ActionBar" playerVersion="AIR1.5" theme="mobile" type="Number">
<description>
  テキストシャドウのアルファです。
 
  </description>
<default>0.55
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:ActionBar" playerVersion="AIR1.5" theme="mobile" type="uint">
<description>
  テキストシャドウのカラーです。
 
  </description>
<default>0xFFFFFF
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  上境界線とすべてのコンテンツグループとの間のピクセル数です。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  左境界線と actionGroup との間のピクセル数です。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  左境界線と navigationGroup との間のピクセル数です。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  下境界線とすべてのコンテンツグループとの間のピクセル数です。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>
<default>0x70B2EE
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="Number">
<description conref="spark.components.SkinnableContainer#style:contentBackgroundAlpha">
  </description>
<default>1.0
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="Number">
<description conref="spark.components.SkinnableContainer#style:backgroundAlpha">
  </description>
<default>1.0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:accentColor">
  </description>
<default>0x0099FF
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="left,right,center" inherit="no" name="titleAlign" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="String">
<description>
  ActionBar のサイズを基準にしたタイトルの配置です。有効な値は、<codeph>"left"</codeph>、<codeph>"right"</codeph> および <codeph>"center"</codeph> です。
 
  </description>
<default>"center"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセット（ピクセル単位）です。モバイルテーマで使用するときは、このプロパティを負の数にできません。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 可能な値は、<codeph>"none"</codeph> および <codeph>"underline"</codeph> です。
 
  </description>
<default>"none"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  コンテナ内のテキストの整列。 可能な値は <codeph>"left"</codeph>、<codeph>"right"</codeph>、または <codeph>"center"</codeph> です。
 
  <p>ほとんどのコンポーネントのデフォルト値は <codeph>"left"</codeph> です。 FormItem コンポーネントの場合、デフォルト値は <codeph>"right"</codeph> です。 Button、LinkButton および AccordionHeader コンポーネントでは、デフォルト値は <codeph>"center"</codeph> です。このプロパティは <codeph>labelPlacement</codeph> プロパティが <codeph>"left"</codeph> または <codeph>"right"</codeph> に設定されている場合のみ認識されます。 <codeph>labelPlacement</codeph> が <codeph>"top"</codeph> または <codeph>"bottom"</codeph> に設定されている場合は、テキストおよびアイコンが中央に配置されます。</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  各文字間に表示される追加のピクセル数。 正の値を指定すると文字間隔が通常より広くなり、負の値を指定すると文字間隔が通常より狭くなります。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  追加の行間を表します。
   <p>デフォルト値は 0 です。</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 有効な値は <codeph>normal</codeph> と <codeph>bold</codeph> です。 Button コントロールのデフォルト値は <codeph>bold</codeph> です。 他のすべてのコントロールのデフォルト値は <codeph>normal</codeph> です。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"italic"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 Halo テーマ内では、ColorPicker コントロール以外のすべてのコントロールのデフォルト値は 10 です。Halo テーマ別 ColorPicker コントロールのデフォルトは 11 です。Spark テーマ内では、ColorPicker コントロール以外のすべてのコントロールのデフォルト値は 12 です。Spark テーマ別 ColorPicker コントロールのデフォルトは 11 です。Mobile テーマのデフォルト値は 24 です。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  使用するフォントの名前です。 完全な CSS 実装と異なり、カンマ区切りリストはサポートされません。 任意のフォントファミリ名を使用できます。 汎用フォント名を指定した場合、適切なデバイスフォントに置換されます。Halo テーマのデフォルトフォントは <codeph>"Verdana"</codeph> です。Spark テーマのデフォルトフォントは <codeph>"Arial"</codeph> です。Mobile テーマのデフォルトフォントは <codeph>"_sans"</codeph> です。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="uint">
<description>
  コンポーネントのラベルを含めたコンポーネント内のテキストの色です。Halo テーマのデフォルト値は <codeph>0x0B333C</codeph> です。Spark テーマのデフォルト値は <codeph>0x000000</codeph> です。Mobile テーマのデフォルト値は <codeph>0xFFFFFF</codeph> です。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="navigationGroup" owner="spark.components:ActionBar" playerVersion="AIR2.5" required="false" var_type="spark.components:Group">
<description>
      コンポーネントのナビゲーション領域の外観を定義するスキンパーツです。 デフォルトでは、ActionBarSkin クラスは、タイトル領域の左に表示されるナビゲーション領域を定義します。
           </description>


	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      navigation area of the component.</shortdesc><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></SkinPart><SkinPart name="titleGroup" owner="spark.components:ActionBar" playerVersion="AIR2.5" required="false" var_type="spark.components:Group">
<description>
      コンポーネントのタイトル領域の外観を定義するスキンパーツです。 デフォルトでは、ActionBarSkin クラスは、ナビゲーション領域とアクション領域の間に表示されるタイトル領域を定義します。
           </description>


	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      title area of the component.</shortdesc><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></SkinPart><SkinPart name="actionGroup" owner="spark.components:ActionBar" playerVersion="AIR2.5" required="false" var_type="spark.components:Group">
<description>
      コンポーネントのアクション領域の外観を定義するスキンパーツです。 デフォルトでは、ActionBarSkin クラスは、タイトル領域の右に表示されるアクション領域を定義します。
           </description>


	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      action area of the component.</shortdesc><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></SkinPart><SkinPart name="titleDisplay" owner="spark.components:ActionBar" playerVersion="AIR2.5" required="false" var_type="spark.core:IDisplayText">
<description>
      コンポーネント内のタイトルテキストの外観を定義するスキンパーツです。CSS を使用して ActionBar の titleDisplay スキンパーツのスタイルを宣言できます。次に例を示します。
      
      <pre>
      @namespace s "library://ns.adobe.com/flex/spark"; 
      s|ActionBar #titleDisplay { 
         color:red; 
      }
     </pre>
     
      </description>


	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      title text in the component.</shortdesc><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:ActionBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:ActionBar
   <strong>Properties</strong>
    actionContent="null"
    actionLayout="HorizontalLayout"
    navigationContent="null"
    navigationLayout="HorizontalLayout"
    title=""
    titleContent="null"
    titleLayout="HorizontalLayout"
 
   <strong>Common Styles</strong>
    color="<i>Theme dependent</i>"
    fontFamily="<i>Theme dependent</i>"
    fontSize="<i>Theme dependent</i>"
    fontStyle="normal"
    fontWeight="normal"
    leading="0"
    letterSpacing="0"
    textAlign="center"
    textDecoration="none"
    textIndent="0"
 
   <strong>Mobile Styles</strong>
    accentColor="0x0099FF"
    backgroundAlpha="1.0"
    color="<i>Theme dependent</i>"
    contentBackgroundAlpha="1.0"
    contentBackgroundColor="0xFFFFFF"
    focusColor="0x70B2EE"
    textShadowAlpha="0.55"
    textShadowColor="0xFFFFFF"
    titleAlign="center"
 
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  ActionBar クラスは、タイトル、ナビゲーション、アクションのコンテンツグループを含むコンポーネントを定義します。 ActionBar コントロールは、ナビゲーションおよびアクションコントロールの標準領域を提供します。アプリケーションのどこからでも使用できるグローバルコントロールまたはビュー固有のコントロールを定義できます。 
   <p>ActionBar コントロールは、3 つの異なる領域を定義します。 </p>
   <ul>
    <li>ナビゲーション領域
        <p>ユーザーがセクションをナビゲートできるようにするコンポーネントが含まれます。例えば、ナビゲーション領域にホームボタンを定義できます。<codeph>navigationContent</codeph> プロパティを使用して、ナビゲーション領域に表示されるコンポーネントを定義します。<codeph>navigationLayout</codeph> プロパティを使用して、ナビゲーション領域のレイアウトを定義します。 </p></li>
     <li>タイトル領域
         <p>タイトルテキストを含むストリング、またはコンポーネントのいずれかを含みます。 コンポーネントを指定する場合、タイトルストリングは指定できません。 <codeph>title</codeph> プロパティを使用して、タイトル領域に表示されるストリングを指定します。 <codeph>titleContent</codeph> プロパティを使用して、タイトル領域に表示されるコンポーネントを定義します。 <codeph>titleLayout</codeph> プロパティを使用して、タイトル領域のレイアウトを定義します。 <codeph>titleContent</codeph> プロパティに値を指定する場合、ActionBar スキンは <codeph>title</codeph> プロパティを無視します。</p></li> 
      <li>アクション領域 
         <p>ユーザーがビューで行えるアクションを定義するコンポーネントが含まれます。 例えば、アクション領域の一部に検索ボタンや更新ボタンを定義する場合があります。 <codeph>actionContent</codeph> プロパティを使用して、アクション領域に表示されるコンポーネントを定義します。 <codeph>actionLayout</codeph> プロパティを使用して、アクション領域のレイアウトを定義します。</p></li>
  </ul>
   <p/>
  <p>
  <adobeimage alt="" href="../../images/ab_search_override_ab.png"/>
 </p>
   <p>単一セクション、つまり単一の ViewNavigator コンテナが設定されたモバイルアプリケーションの場合、すべてのビューで同じアクションバーが共有されます。 複数セクション、つまり複数の ViewNavigator コンテナが設定されたモバイルアプリケーションの場合、各セクションが自分のアクションバーを定義します。</p>
   </apiDesc><example conref="ActionBarExample2.mxml"/><example conref="ActionBarExample3.mxml"/><example conref="ActionBarExampleHomeView.mxml"/></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.SkinnableContainer.xml"><linktext>spark.components.SkinnableContainer</linktext></link><link href="spark.components.xml#ViewNavigator"><linktext>ViewNavigator</linktext></link><link href="spark.components.xml#View"><linktext>View</linktext></link><link href="spark.components.xml#ViewNavigatorApplication"><linktext>ViewNavigatorApplication</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links><apiConstructor id="spark.components:ActionBar:ActionBar"><apiName>ActionBar</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ActionBar:actionContent:get"><apiName>actionContent</apiName><shortdesc>
      ユーザーがビューで行えるアクションを定義するコンポーネントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーがビューで行えるアクションを定義するコンポーネントです。 これらのコンポーネントは、<codeph>actionGroup</codeph> スキンパーツを使用して、コントロールのアクション領域に表示されます。 
     
      <p><codeph>actionGroup</codeph> スキンパーツの位置と外観は、ActionBarSkin クラスによって決まります。 デフォルトの ActionBarSkin クラスは、ActionBar のタイトル表示領域の右に表示される <codeph>actionGroup</codeph> を定義します。</p>
     
      <p><codeph>actionGroup</codeph> スキンパーツのデフォルトの位置と外観を変更するカスタム ActionBarSkin スキンクラスを作成します。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link><link href="spark.components.xml#ActionBar/actionLayout"><linktext>actionLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:actionLayout:get"><apiName>actionLayout</apiName><shortdesc>
      actionGroup プロパティによってアクション領域に定義されたコンポーネントのレイアウトを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>HorizontalLayout
           </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>actionGroup</codeph> プロパティによってアクション領域に定義されたコンポーネントのレイアウトを定義します。
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionContent"><linktext>actionContent</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:navigationContent:get"><apiName>navigationContent</apiName><shortdesc>
      ユーザーのナビゲーションを定義するコンポーネントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーのナビゲーションを定義するコンポーネントです。 これらのコンポーネントは、<codeph>navigationGroup</codeph> スキンパーツを使用して、コントロールのナビゲーション領域に表示されます。 
           <p><codeph>navigationGroup</codeph> スキンパーツの位置と外観は、ActionBarSkin クラスによって決まります。デフォルトの ActionBarSkin クラスは、ActionBar の <codeph>titleGroup</codeph> 領域の左に表示される <codeph>navigationGroup</codeph> を定義します。</p>
     
      <p><codeph>navigationGroup</codeph> スキンパーツのデフォルトの位置と外観を変更するカスタム ActionBarSkin スキンクラスを作成します。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link><link href="spark.components.xml#ActionBar/navigationLayout"><linktext>navigationLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:navigationLayout:get"><apiName>navigationLayout</apiName><shortdesc>
      navigationGroup スキンパーツに含まれるコンポーネントのレイアウトを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>HorizontalLayout
           </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>navigationGroup</codeph> スキンパーツに含まれるコンポーネントのレイアウトを定義します。
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationContent"><linktext>navigationContent</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:titleContent:get"><apiName>titleContent</apiName><shortdesc>
      コントロールのタイトル領域に表示されるコンポーネントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      コントロールのタイトル領域に表示されるコンポーネントです。 これらのコンポーネントは ActionBar コントロールの <codeph>titleGroup</codeph> スキンパーツに表示されます。
           <p><codeph>titleGroup</codeph> スキンパーツの位置と外観は、ActionBarSkin クラスによって決まります。 デフォルトの ActionBarSkin クラスは、<codeph>navigationGroup</codeph> スキンパーツと <codeph>actionGroup</codeph> スキンパーツの間に残っているスペースを使用して、ActionBar の中央に表示される <codeph>titleGroup</codeph> を定義します。</p>
     
      <p><codeph>titleContent</codeph> が null の場合は、<codeph>titleDisplay</codeph> スキンパーツがあれば、<codeph>titleGroup</codeph> スキンパーツの代わりに表示されます。</p> 
     
      <p><codeph>titleGroup</codeph> スキンパーツのデフォルトの位置と外観を変更するカスタム ActionBarSkin スキンクラスを作成します。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link><link href="spark.components.xml#ActionBar/title"><linktext>title</linktext></link><link href="spark.components.xml#ActionBar/titleLayout"><linktext>titleLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:titleLayout:get"><apiName>titleLayout</apiName><shortdesc>
      titleGroup スキンパーツと titleDisplay スキンパーツのレイアウトを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>HorizontalLayout
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>titleGroup</codeph> スキンパーツと <codeph>titleDisplay</codeph> スキンパーツのレイアウトを定義します。
     
      <p><codeph>titleContent</codeph> プロパティが null の場合は、<codeph>titleDisplay</codeph> スキンパーツが <codeph>titleGroup</codeph> スキンパーツの代わりに表示されます。<codeph>titleLayout</codeph> プロパティによって指定されたレイアウトクラスの <codeph>paddingLeft</codeph> プロパティと <codeph>paddingRight</codeph> プロパティを使用して、<codeph>titleDisplay</codeph> スキンパーツが ActionBar コントロールの中央に配置されます。</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>titleContent</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:title:get"><apiName>title</apiName><shortdesc>
      タイトル領域に表示されるタイトルまたはキャプションです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
           </apiDefaultValue></apiValueDef><apiDesc>
      タイトル領域に表示されるタイトルまたはキャプションです。 
           <p><codeph>titleContent</codeph> プロパティを使用して、タイトル領域に表示されるコンポーネントを定義します。 <codeph>titleContent</codeph> プロパティに値を指定する場合、ActionBar スキンは <codeph>title</codeph> プロパティを無視します。</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>titleContent</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:TabbedViewNavigatorApplication"><apiName>TabbedViewNavigatorApplication</apiName><shortdesc>
  TabbedViewNavigatorApplication コンテナは、複数のセクションがあるアプリケーションを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="navigators"/><skinParts><SkinPart name="tabbedNavigator" owner="spark.components:TabbedViewNavigatorApplication" playerVersion="AIR2.5" required="false" var_type="spark.components:TabbedViewNavigator">
<description>
      アプリケーションのメイン tabbedNavigator です。
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The main tabbedNavigator for the application.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:TabbedViewNavigatorApplication&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:TabbedViewNavigatorApplication
    <strong>Properties</strong>
    navigators="null"
 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorApplicationBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  TabbedViewNavigatorApplication コンテナは、複数のセクションがあるアプリケーションを定義します。 TabbedViewNavigatorApplication コンテナは、TabbedMobileNavigator コンテナを自動的に作成します。 TabbedViewNavigator コンテナは、TabBar コントロールを作成して、アプリケーションのセクション間のナビゲーションをサポートします。
 
  <p>TabbedViewNavigatorApplication コンテナに許可されている子は ViewNavigator のみです。アプリケーションの各セクションに 1 つの ViewNavigator を定義します。</p> 
 
  <p>TabbedViewNavigatorApplication コンテナには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>100 ％の高さおよび 100 ％の幅を指定すると、使用可能なすべての画面スペースを占有します。</entry>
        </row><row>
           <entry>子レイアウト</entry>
           <entry>アプリケーションのビューを構成する個々の View コンテナによって定義されます。</entry>
        </row><row>
           <entry>スクロールバー</entry>
           <entry>なし。 スクロールバーを追加すると、ユーザーがアプリケーション全体をスクロールできます。 それには、アプリケーションの ActionBar および TabBar 領域も含まれます。 ビューのこれらの領域は通常スクロールする必要がないため、アプリケーションコンテナ自身ではなく、アプリケーションの個々の View コンテナにスクロールバーを追加します。 </entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.mobile.TabbedViewNavigatorApplicationSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TabbedViewNavigatorApplicationExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#TabbedViewNavigator"><linktext>spark.components.TabbedViewNavigator</linktext></link><link href="" invalidHref="spark.components.TabBar.xml"><linktext>spark.components.TabBar</linktext></link><link href="" invalidHref="spark.skins.mobile.TabbedViewNavigatorApplicationSkin.xml"><linktext>spark.skins.mobile.TabbedViewNavigatorApplicationSkin</linktext></link></related-links><apiConstructor id="spark.components:TabbedViewNavigatorApplication:TabbedViewNavigatorApplication"><apiName>TabbedViewNavigatorApplication</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:TabbedViewNavigatorApplication:navigators:get"><apiName>navigators</apiName><shortdesc conref="TabbedViewNavigator#navigators">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components.supportClasses:ViewNavigatorBase"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="TabbedViewNavigator#navigators">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:LabelItemRenderer"><apiName>LabelItemRenderer</apiName><shortdesc>
  LabelItemRenderer クラスでは、モバイルテーマのリストベースのコントロールのデフォルトアイテムレンダラーが定義されています。 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><styles><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  縦横比が 1 対 1 でないときのコンテンツの垂直方向の配置です。 有効な値は、<codeph>"top"</codeph>、<codeph>"center"</codeph> および <codeph>"bottom"</codeph> です。
  
  </description>
<default>"center"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" theme="spark,mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="uint">
<description conref="spark.components.List#style:selectionColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  アイテムレンダラーの上の境界とテキストコンポーネントとの間のピクセル数です。
 
  </description>
<default>5
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  アイテムレンダラーの下の境界とテキストコンポーネントとの間のピクセル数です。
 
  </description>
<default>5
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR1.5" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:chromeColor">
  </description>
<default>0xCCCCCC
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセット（ピクセル単位）です。モバイルテーマで使用するときは、このプロパティを負の数にできません。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 可能な値は、<codeph>"none"</codeph> および <codeph>"underline"</codeph> です。
 
  </description>
<default>"none"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  コンテナ内のテキストの整列。 可能な値は <codeph>"left"</codeph>、<codeph>"right"</codeph>、または <codeph>"center"</codeph> です。
 
  <p>ほとんどのコンポーネントのデフォルト値は <codeph>"left"</codeph> です。 FormItem コンポーネントの場合、デフォルト値は <codeph>"right"</codeph> です。 Button、LinkButton および AccordionHeader コンポーネントでは、デフォルト値は <codeph>"center"</codeph> です。このプロパティは <codeph>labelPlacement</codeph> プロパティが <codeph>"left"</codeph> または <codeph>"right"</codeph> に設定されている場合のみ認識されます。 <codeph>labelPlacement</codeph> が <codeph>"top"</codeph> または <codeph>"bottom"</codeph> に設定されている場合は、テキストおよびアイコンが中央に配置されます。</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  各文字間に表示される追加のピクセル数。 正の値を指定すると文字間隔が通常より広くなり、負の値を指定すると文字間隔が通常より狭くなります。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  追加の行間を表します。
   <p>デフォルト値は 0 です。</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 有効な値は <codeph>normal</codeph> と <codeph>bold</codeph> です。 Button コントロールのデフォルト値は <codeph>bold</codeph> です。 他のすべてのコントロールのデフォルト値は <codeph>normal</codeph> です。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"italic"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 Halo テーマ内では、ColorPicker コントロール以外のすべてのコントロールのデフォルト値は 10 です。Halo テーマ別 ColorPicker コントロールのデフォルトは 11 です。Spark テーマ内では、ColorPicker コントロール以外のすべてのコントロールのデフォルト値は 12 です。Spark テーマ別 ColorPicker コントロールのデフォルトは 11 です。Mobile テーマのデフォルト値は 24 です。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  使用するフォントの名前です。 完全な CSS 実装と異なり、カンマ区切りリストはサポートされません。 任意のフォントファミリ名を使用できます。 汎用フォント名を指定した場合、適切なデバイスフォントに置換されます。Halo テーマのデフォルトフォントは <codeph>"Verdana"</codeph> です。Spark テーマのデフォルトフォントは <codeph>"Arial"</codeph> です。Mobile テーマのデフォルトフォントは <codeph>"_sans"</codeph> です。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="uint">
<description>
  コンポーネントのラベルを含めたコンポーネント内のテキストの色です。Halo テーマのデフォルト値は <codeph>0x0B333C</codeph> です。Spark テーマのデフォルト値は <codeph>0x000000</codeph> です。Mobile テーマのデフォルト値は <codeph>0xFFFFFF</codeph> です。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:LabelItemRenderer" playerVersion="Flash9" type="Number">
<description>
  コンポーネントの右境界線からコンテンツ領域の右端までのピクセル数です。
  <p>デフォルト値は 0 です。</p>
  <p>Halo テーマの Button コントロールデフォルト値は 10 で、Spark テーマの場合は 6 です。</p>
  <p>ComboBox コントロールのデフォルト値は 5 です。</p>
  <p>Form コンテナのデフォルト値は 16 です。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:LabelItemRenderer" playerVersion="Flash9" type="Number">
<description>
  コンポーネントの左境界線からコンテンツ領域の左端までのピクセル数です。
  <p>デフォルト値は 0 です。</p>
  <p>Halo テーマの Button コントロールデフォルト値は 10 で、Spark テーマの場合は 6 です。</p>
  <p>ComboBox コントロールのデフォルト値は 5 です。</p>
  <p>Form コンテナのデフォルト値は 16 です。</p>
  <p>Tree コントロールのデフォルト値は 2 です。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:LabelItemRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:LabelItemRenderer
   <strong>Properties</strong>
    label=""
 
   <strong>Common Styles</strong>
    color="<i>Theme dependent</i>"
    downColor="<i>Theme dependent</i>"
    fontFamily="<i>Theme dependent</i>"
    fontSize="<i>Theme dependent</i>"
    fontStyle="normal"
    fontWeight="normal"
    leading="0"
    letterSpacing="0"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="5"
    rollOverColor="0xCEDBEF"
    selectionColor="0xB2B2B2"
    textAlign="left"
    textDecoration="none"
    textIndent="0"
    verticalAlign="center"
  
   <strong>Spark Styles</strong>
    alternatingItemColors="undefined"
    focusColor="0x70B2EE"
    symbolColor="0x000000"
  
   <strong>Mobile Styles</strong>
    alternatingItemColors="undefined"
    focusColor="0x70B2EE"
    symbolColor="0x000000"
 
    <b>Events</b>
    dataChange="<i>No default</i>"
 
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>spark.components:IItemRenderer</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  LabelItemRenderer クラスでは、モバイルテーマのリストベースのコントロールのデフォルトアイテムレンダラーが定義されています。 これは、1 つのテキストコンポーネントが指定された簡単なアイテムレンダラーです。
   <p>アイテムレンダラーは、1 つの StyleableTextField コントロールを作成して String を表示します。 アイテムレンダラーの StyleableTextField コントロールの名前は <codeph>labelDisplay</codeph> です。 リストベースのコントロールの <codeph>labelField</codeph> プロパティを使用して、StyleableTextField コントロールに表示されるデータアイテムのフィールドを指定します。</p>
   <p>モバイルデバイスで使用するカスタムアイテムレンダラーを作成するには、このクラスを拡張する新規 ActionScript アイテムレンダラーを作成することをお勧めします。</p>
   </apiDesc><example conref="LabelItemRendererExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#IconItemRenderer"><linktext>spark.components.IconItemRenderer</linktext></link><link href="" invalidHref="spark.components.List.xml"><linktext>spark.components.List</linktext></link><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link><link href="" invalidHref="spark.components.IItemRenderer.xml"><linktext>spark.components.IItemRenderer</linktext></link><link href="" invalidHref="spark.components.supportClasses.ItemRenderer.xml"><linktext>spark.components.supportClasses.ItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.components:LabelItemRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  data プロパティが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>data</codeph> プロパティが変更されたときに送出されます。
   <p>コンポーネントをアイテムレンダラーとして使う場合、<codeph>data</codeph> プロパティは表示するデータを保持します。 このイベントを受け取って、<codeph>data</codeph> プロパティが変更されたときにコンポーネントを更新することができます。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:LabelItemRenderer:LabelItemRenderer"><apiName>LabelItemRenderer</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:LabelItemRenderer:protected:createLabelDisplay"><apiName>createLabelDisplay</apiName><shortdesc>
      labelDisplay コンポーネントを作成します
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      labelDisplay コンポーネントを作成します
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:destroyLabelDisplay"><apiName>destroyLabelDisplay</apiName><shortdesc>
      labelDisplay コンポーネントを破棄します
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      labelDisplay コンポーネントを破棄します
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:drawBackground"><apiName>drawBackground</apiName><shortdesc>
      アイテムレンダラーの背景をレンダリングします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位によりコンポーネントの幅を指定します。
           </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      アイテムレンダラーの背景をレンダリングします。
     
      <p>このメソッドは、<codeph>layoutContents()</codeph> とともに、<codeph>updateDisplayList()</codeph> メソッドによって呼び出されます。</p>
     
      <p>このメソッドは selected、down または caretted のステートを適切に扱うことができます。ただし、<codeph>alternatingItemColors</codeph> が <codeph>undefined</codeph> に設定されている場合は、デフォルトの背景が透明になります。 アイテムレンダラーの背景の外観を変更するには、このメソッドをオーバーライドします。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:drawBorder"><apiName>drawBorder</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3.0"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位によりコンポーネントの幅を指定します。
           </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
     
      <p><codeph/></p>
     
      <p/>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:getElementPreferredHeight"><apiName>getElementPreferredHeight</apiName><shortdesc conref="spark.skins.mobile.supportClasses.MobileSkin#getElementPreferredHeight()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc conref="spark.skins.mobile.supportClasses.MobileSkin#getElementPreferredHeight()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#LabelItemRenderer/setElementPosition"><linktext>setElementPosition</linktext></link><link href="spark.components.xml#LabelItemRenderer/setElementSize"><linktext>setElementSize</linktext></link><link href="spark.components.xml#LabelItemRenderer/getElementPreferredWidth"><linktext>getElementPreferredWidth</linktext></link></related-links></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:getElementPreferredWidth"><apiName>getElementPreferredWidth</apiName><shortdesc conref="spark.skins.mobile.supportClasses.MobileSkin#getElementPreferredWidth()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc conref="spark.skins.mobile.supportClasses.MobileSkin#getElementPreferredWidth()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#LabelItemRenderer/setElementPosition"><linktext>setElementPosition</linktext></link><link href="spark.components.xml#LabelItemRenderer/setElementSize"><linktext>setElementSize</linktext></link><link href="spark.components.xml#LabelItemRenderer/getElementPreferredHeight"><linktext>getElementPreferredHeight</linktext></link></related-links></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:layoutContents"><apiName>layoutContents</apiName><shortdesc>
      このアイテムレンダラーの子の位置を決めます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位によりコンポーネントの幅を指定します。
           </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このアイテムレンダラーの子の位置を決めます。
     
      <p>このメソッドは、<codeph>drawBackground()</codeph> とともに、<codeph>updateDisplayList()</codeph> メソッドによって呼び出されます。</p>
     
      <p>このメソッドは、<codeph>labelDisplay</codeph> コンポーネントの位置を決めます。 サブクラスは、これをオーバライドして自分の子の位置を決めます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:setElementPosition"><apiName>setElementPosition</apiName><shortdesc conref="spark.skins.mobile.supportClasses.MobileSkin#setElementPosition()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc conref="spark.skins.mobile.supportClasses.MobileSkin#setElementPosition()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#LabelItemRenderer/setElementSize"><linktext>setElementSize</linktext></link></related-links></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:setElementSize"><apiName>setElementSize</apiName><shortdesc conref="spark.skins.mobile.supportClasses.MobileSkin#setElementSize()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc conref="spark.skins.mobile.supportClasses.MobileSkin#setElementSize()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#LabelItemRenderer/setElementPosition"><linktext>setElementPosition</linktext></link></related-links></apiOperation><apiValue id="spark.components:LabelItemRenderer:protected:labelDisplay"><apiName>labelDisplay</apiName><shortdesc>
      アイテムレンダラーのラベルデータを表示するために使用されるテキストコンポーネントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:StyleableTextField</apiValueClassifier></apiValueDef><apiDesc>
      アイテムレンダラーのラベルデータを表示するために使用されるテキストコンポーネントです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:LabelItemRenderer:applicationDPI:get"><apiName>applicationDPI</apiName><shortdesc>
      アプリケーションの DPI を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      アプリケーションの DPI を返します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:LabelItemRenderer:data:get"><apiName>data</apiName><shortdesc>
      IDataRenderer インターフェイスによって定義された data プロパティの実装です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      IDataRenderer インターフェイスによって定義された <codeph>data</codeph> プロパティの実装です。 設定すると、値を格納し、コンポーネントを無効化してコンポーネントの再レイアウトをトリガーします。
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="spark.components:LabelItemRenderer:protected:down:get"><apiName>down</apiName><shortdesc>
      ユーザーがアイテムレンダラーを押し下げているときに true に設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーがアイテムレンダラーを押し下げているときに <codeph>true</codeph> に設定されます。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:LabelItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:LabelItemRenderer:protected:hovered:get"><apiName>hovered</apiName><shortdesc>
      ユーザーがアイテムレンダラー上にマウスポインターを置いたときに true に設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーがアイテムレンダラー上にマウスポインターを置いたときに <codeph>true</codeph> に設定されます。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:LabelItemRenderer:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:LabelItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:LabelItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:LabelItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="spark.components:SpinnerListContainer"><apiName>SpinnerListContainer</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="style" name="backgroundColor"/><Exclude kind="style" name="backgroundAlpha"/><DefaultProperty name="mxmlContentFactory"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  SpinnerList は水平方向にレイアウトされます。 SpinnerListContainerSkin は、フレーム、シャドウのグラデーションおよび選択インジケーターを表示します。   
       
 </apiDesc><example conref="SpinnerListExample.mxml"/><example conref="SpinnerListContainerExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#SpinnerList"><linktext>spark.components.SpinnerList</linktext></link><link href="" invalidHref="spark.skins.mobile.SpinnerListContainerSkin.xml"><linktext/></link></related-links><apiConstructor id="spark.components:SpinnerListContainer:SpinnerListContainer"><apiName>SpinnerListContainer</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
            
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:ViewNavigatorApplication"><apiName>ViewNavigatorApplication</apiName><shortdesc>
  ViewNavigatorApplication クラスは、ビューベースのナビゲーションモデルを使用するアプリケーションの簡単なフレームワークを提供するためのアプリケーションクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="navigationStack"/><skinParts><SkinPart name="navigator" owner="spark.components:ViewNavigatorApplication" required="false" var_type="spark.components:ViewNavigator">
<description>
      アプリケーションのメインのビューナビゲーターです。 このコンポーネントには、アプリケーションのビューのナビゲーションモデルを管理する役割があります。  
     </description>
	<shortdesc>
      The main view navigator for the application.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ViewNavigatorApplication&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ViewNavigatorApplication
    <strong>Properties</strong>
    actionContent="null"
    actionLayout="null"
    firstView="null"
    firstViewData="null"
    navigationContent="null"
    navigationLayout="null"
    title=""
    titleContent="null"
    titleLayout="null"
 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorApplicationBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ViewNavigatorApplication クラスは、ビューベースのナビゲーションモデルを使用するアプリケーションの簡単なフレームワークを提供するためのアプリケーションクラスです。 使用時には、このクラスはアプリケーションの主なエントリポイントとして機能し、ハードウェアデバイスキー、方向の検知およびアプリケーションセッションのパーシスタンスをサポートします。
 
  <p>ビューベースのナビゲーションモデルの特徴は、ユーザーの操作への応答として表示される一連のフルスクリーン表示をエンドユーザーがナビゲートできるユーザーインターフェイスです。 このパラダイムは、モバイルアプリケーションでよく使用されるもので、プリセットの ViewNavigator コンテナを使用して実現されています。</p>
 
  <p><codeph>firstView</codeph> プロパティを使用して、アプリケーションが初期化されるときに最初に表示される View を指定します。</p>
 
  <p>Application の場合とは異なり、ViewNavigatorApplication は、UIComponent オブジェクトを子として受け入れるようにはなっていません。 その代わり、すべてのビジュアルコンポーネントは、アプリケーションによって管理されるビューの子である必要があります。</p>
 
  <p>ViewNavigatorApplication コンテナには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>100 ％の高さおよび 100 ％の幅を指定すると、使用可能なすべての画面スペースを占有します。</entry>
        </row><row>
           <entry>子レイアウト</entry>
           <entry>アプリケーションのビューを構成する個々の View コンテナによって定義されます。</entry>
        </row><row>
           <entry>スクロールバー</entry>
           <entry>なし。 スクロールバーを追加すると、ユーザーがアプリケーション全体をスクロールできます。 それには、アプリケーションの ActionBar および TabBar 領域も含まれます。 ビューのこれらの領域は通常スクロールする必要がないため、アプリケーションコンテナ自身ではなく、アプリケーションの個々の View コンテナにスクロールバーを追加します。 </entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.mobile.ViewNavigatorApplicationSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ViewNavigatorApplicationExample.mxml"/><example conref="ViewNavigatorApplicationHomeView.mxml"/><example conref="ViewNavigatorApplicationView2.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#ViewNavigator"><linktext>spark.components.ViewNavigator</linktext></link><link href="spark.components.xml#View"><linktext>spark.components.View</linktext></link><link href="" invalidHref="spark.skins.mobile.ViewNavigatorApplicationSkin.xml"><linktext>spark.skins.mobile.ViewNavigatorApplicationSkin</linktext></link></related-links><apiConstructor id="spark.components:ViewNavigatorApplication:ViewNavigatorApplication"><apiName>ViewNavigatorApplication</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ViewNavigatorApplication:actionBar:get"><apiName>actionBar</apiName><shortdesc>
      存在する場合は、ナビゲーターの ActionBar コントロールへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:ActionBar</apiValueClassifier></apiValueDef><apiDesc>
      存在する場合は、ナビゲーターの ActionBar コントロールへの参照です。 このプロパティは、ビューナビゲーターが表示リストに追加された後にのみ有効になります。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar"><linktext>ActionBar</linktext></link><link href="spark.components.xml#ViewNavigator"><linktext>ViewNavigator</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:actionContent:get"><apiName>actionContent</apiName><shortdesc conref="ActionBar#actionContent">
      このプロパティは、ActionBar コントロールの actionContent プロパティをオーバーライドします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionContent">
      このプロパティは、ActionBar コントロールの <codeph>actionContent</codeph> プロパティをオーバーライドします。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionContent"><linktext>spark.components.ActionBar.actionContent</linktext></link><link href="spark.components.xml#View/actionContent"><linktext>spark.components.View.actionContent</linktext></link><link href="spark.components.xml#ViewNavigator/actionContent"><linktext>spark.components.ViewNavigator.actionContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:actionLayout:get"><apiName>actionLayout</apiName><shortdesc conref="ActionBar#actionLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionLayout">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionLayout"><linktext>spark.components.ActionBar.actionLayout</linktext></link><link href="spark.components.xml#View/actionLayout"><linktext>spark.components.View.actionLayout</linktext></link><link href="spark.components.xml#ViewNavigator/actionLayout"><linktext>spark.components.ViewNavigator.actionLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:firstViewData:get"><apiName>firstViewData</apiName><shortdesc conref="ViewNavigator#firstViewData">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ViewNavigator#firstViewData">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigatorApplication:firstView:get"><apiName>firstView</apiName><shortdesc conref="ViewNavigator#firstView">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ViewNavigator#firstView">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigatorApplication:navigationContent:get"><apiName>navigationContent</apiName><shortdesc conref="ActionBar#navigationContent">
      このプロパティは、ActionBar コントロールの navigationContent プロパティをオーバーライドします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationContent">
      このプロパティは、ActionBar コントロールの <codeph>navigationContent</codeph> プロパティをオーバーライドします。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationContent"><linktext>spark.components.ActionBar.navigationContent</linktext></link><link href="spark.components.xml#View/navigationContent"><linktext>spark.components.View.navigationContent</linktext></link><link href="spark.components.xml#ViewNavigator/navigationContent"><linktext>spark.components.ViewNavigator.navigationContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:navigationLayout:get"><apiName>navigationLayout</apiName><shortdesc conref="ActionBar#navigationLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationLayout">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationLayout"><linktext>spark.components.ActionBar.navigationLayout</linktext></link><link href="spark.components.xml#View/navigationLayout"><linktext>spark.components.View.navigationLayout</linktext></link><link href="spark.components.xml#ViewNavigator/navigationLayout"><linktext>spark.components.ViewNavigator.navigationLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:titleContent:get"><apiName>titleContent</apiName><shortdesc conref="ActionBar#titleContent">
      このプロパティは、ActionBar コンポーネントおよび ViewNavigatorApplication コンポーネントの titleContent プロパティをオーバーライドします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleContent">
      このプロパティは、ActionBar コンポーネントおよび ViewNavigatorApplication コンポーネントの <codeph>titleContent</codeph> プロパティをオーバーライドします。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>spark.components.ActionBar.titleContent</linktext></link><link href="spark.components.xml#View/titleContent"><linktext>spark.components.View.titleContent</linktext></link><link href="spark.components.xml#ViewNavigator/titleContent"><linktext>spark.components.ViewNavigator.titleContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:titleLayout:get"><apiName>titleLayout</apiName><shortdesc conref="ActionBar#titleLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleLayout">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleLayout"><linktext>spark.components.ActionBar.titleLayout</linktext></link><link href="spark.components.xml#View/titleLayout"><linktext>spark.components.View.titleLayout</linktext></link><link href="spark.components.xml#ViewNavigator/titleLayout"><linktext>spark.components.ViewNavigator.titleLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:title:get"><apiName>title</apiName><shortdesc conref="ActionBar#title">
      このプロパティは、ActionBar コントロールの title プロパティをオーバーライドします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#title">
      このプロパティは、ActionBar コントロールの <codeph>title</codeph> プロパティをオーバーライドします。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/title"><linktext>spark.components.ActionBar.title</linktext></link><link href="spark.components.xml#View/title"><linktext>spark.components.View.title</linktext></link><link href="spark.components.xml#ViewNavigator/title"><linktext>spark.components.ViewNavigator.title</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:SpinnerList"><apiName>SpinnerList</apiName><shortdesc>
  SpinnerList コンポーネントはアイテムのリストを表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="event" name="itemRollOver"/><Exclude kind="event" name="itemRollOut"/><Exclude kind="event" name="changing"/><Exclude kind="property" name="requireSelection"/><Exclude kind="property" name="layout"/><Exclude kind="style" name="chromeColor"/><Exclude kind="style" name="accentColor"/><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="scroller" owner="spark.components:SpinnerList" playerVersion="AIR3" required="false" var_type="spark.components:Scroller">
<description>
      
     
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      The optional Scroller that is used to scroll the List.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:SpinnerList&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SpinnerList
    <strong>Properties</strong>
    wrapElements="true|false"
  /&gt;
  </pre>
 
 ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  SpinnerList コンポーネントはアイテムのリストを表示します。リストの中央のアイテムは、常に selectedItem です。デフォルトでは、リストは折り返して表示されます。
 
  <p/>
 
 <p>
  <adobeimage alt="" href="../../images/spinnerlist_example.png"/>
 </p>
 
 <p/>
 
  </apiDesc><example conref="SpinnerListExample.mxml"/><example conref="SpinnerListContainerExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#SpinnerListContainer"><linktext/></link></related-links><apiConstructor id="spark.components:SpinnerList:SpinnerList"><apiName>SpinnerList</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
            
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SpinnerList:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SpinnerList:protected:partAdded"><apiName>partAdded</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SpinnerList:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.components:SpinnerList:caretIndex:get"><apiName>caretIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:SpinnerList:wrapElements:get"><apiName>wrapElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     </apiDefaultValue></apiValueDef><apiDesc>
       
           
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SpinnerList:dataProvider:set"><apiName>dataProvider</apiName><shortdesc conref="spark.components.DataGroup#dataProvider">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.collections:IList"/></apiValueDef><apiDesc conref="spark.components.DataGroup#dataProvider">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:SplitViewNavigator"><apiName>SplitViewNavigator</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><skinStates><SkinState name="landscape" owner="spark.components:SplitViewNavigator" playerVersion="AIR3">
<description>
  <codeph/>
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></SkinState><SkinState name="portrait" owner="spark.components:SplitViewNavigator" playerVersion="AIR3">
<description>
  <codeph/>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="viewNavigatorPopUp" owner="spark.components:SplitViewNavigator" playerVersion="AIR3" required="false" var_type="spark.components:SkinnablePopUpContainer">
<description>
      <codeph/><codeph/> 
     
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      The popUp used to display a navigator when 
      showFirstViewNavigatorInPopUp() is called.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:SplitViewNavigator&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:SplitViewNavigator
    <strong>Properties</strong>
    autoHideFirstViewNavigator="false"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  
   <p/>
  <p>
  <adobeimage alt="" href="../../images/svn_master_detail_svn.png"/>
 </p>
   <p><codeph/>このコンポーネントは、モバイルデバイスでマスター / 詳細インターフェイスを作成する場合に便利です。このコンポーネントが管理できる子ナビゲーターの数に制限はありません。 </p>
   <p><b/></p>
 
  <p><codeph/><codeph/><codeph/>設定すると、その子の <codeph>includeInLayout</codeph> プロパティが、それに一致するように設定されます。</p>
    
  <p><codeph/><codeph/><codeph/><codeph/></p>
   <p><b/><codeph/></p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.skins.mobile.SplitViewNavigatorSkin.xml"><linktext/></link><link href="spark.components.supportClasses.xml#ViewNavigatorBase"><linktext>spark.components.supportClasses.ViewNavigatorBase</linktext></link><link href="spark.components.xml#ViewNavigator"><linktext>spark.components.ViewNavigator</linktext></link><link href="spark.components.xml#TabbedViewNavigator"><linktext>spark.components.TabbedViewNavigator</linktext></link><link href="" invalidHref="spark.components.xml#Application/aspectRatio"><linktext>spark.components.Application.aspectRatio</linktext></link><link href="spark.components.xml#Callout"><linktext>spark.components.Callout</linktext></link><link href="" invalidHref="spark.components.SkinnablePopUpContainer.xml"><linktext>spark.components.SkinnablePopUpContainer</linktext></link></related-links><apiConstructor id="spark.components:SplitViewNavigator:SplitViewNavigator"><apiName>SplitViewNavigator</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SplitViewNavigator:getViewNavigatorAt"><apiName>getViewNavigatorAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定したインデックスのナビゲーターです。ナビゲーターがない場合は null です.
     
      </apiDesc><apiOperationClassifier>spark.components.supportClasses:ViewNavigatorBase</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>取得するナビゲーターのインデックスです.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph/>
     
      <p/> 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SplitViewNavigator:hideViewNavigatorPopUp"><apiName>hideViewNavigatorPopUp</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
     
      <p/>
     
      <p><codeph/><codeph/><codeph/></p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SplitViewNavigator:showFirstViewNavigatorInPopUp"><apiName>showFirstViewNavigatorInPopUp</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>owner</apiItemName><apiType value="flash.display:DisplayObjectContainer"/></apiParam></apiOperationDef><apiDesc>
      
     
      <p><codeph/><codeph/></p>
     
      <p><codeph/><codeph/></p>
     
      <p/>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:SplitViewNavigator:autoHideFirstViewNavigator:get"><apiName>autoHideFirstViewNavigator</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph/>
     
      <p><codeph/></p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SplitViewNavigator:numViewNavigators:get"><apiName>numViewNavigators</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>