<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.components"><apiName>spark.components</apiName><apiDetail/><apiClassifier id="spark.components:ViewNavigator"><apiName>ViewNavigator</apiName><shortdesc>
  ViewNavigator 组件是由 View 对象集合组成的容器，其中仅最顶部的视图可见且处于活动状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="landscapeAndOverlay" owner="spark.components:ViewNavigator" playerVersion="AIR2.5">
<description>
  导航器处于横向且导航器控件在顶部叠加时所使用的状态。
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="portraitAndOverlay" owner="spark.components:ViewNavigator" playerVersion="AIR2.5">
<description>
  导航器处于纵向且导航器控件在顶部叠加时所使用的状态。
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="landscape" owner="spark.components:ViewNavigator" playerVersion="AIR2.5">
<description>
  导航器处于横向时所使用的状态。
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="portrait" owner="spark.components:ViewNavigator" playerVersion="AIR2.5">
<description>
  导航器处于纵向时所使用的状态.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="navigationStack"/><skinParts><SkinPart name="actionBar" owner="spark.components:ViewNavigator" playerVersion="AIR2.5" required="false" var_type="spark.components:ActionBar">
<description>
     定义导航器操作栏的外观部件。 
     
     </description>

	<prolog><asCustoms><langversion>3.0
     </langversion><productversion>Flex 4.5
    </productversion></asCustoms></prolog><shortdesc>
     A skin part that defines the action bar of the navigator.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:ViewNavigator&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:ViewNavigator
   <strong>Properties</strong>
    actionContent="null"
    actionLayout="null"
    defaultPopTransition="SlideViewTransition"
    defaultPushTransition="SlideViewTransition"
    firstView="null"
    firstViewData="null"
    navigationContent="null"
    navigationLayout="null"
    poppedViewReturnedObject="null"
    title=""
    titleContent="null"
    titleLayout="null"
 
  &gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ViewNavigator 组件是由 View 对象集合组成的容器，其中仅最顶部的视图可见且处于活动状态。使用 ViewNavigator 容器控制在手机应用程序的视图之间的导航。ViewNavigatorApplication 容器为整个应用程序自动创建单个 ViewNavigator 容器。
  
  <p>由 View 对象的堆栈控制手机应用程序中的导航。堆栈上的顶部 View 对象定义当前可见视图。ViewNavigator 容器保存堆栈。要更改视图，请将新 View 对象推送至堆栈上，或从堆栈中弹出当前 View 对象。从堆栈返弹出的当前可见 View 对象破坏 View 对象，并将用户返回至堆栈上的前一个视图。</p>
   <p>将视图推送到堆栈顶部时，会自动持久保存旧视图的 <codeph>data</codeph> 属性。由于当前视图弹出堆栈而重新激活视图时会恢复。新视图通过推送到堆栈而变为活动时，会破坏旧视图的实例。</p>
 
  <p>ViewNavigator 显示可选 ActionBar 控件，其中显示由活动视图定义的上下文信息。活动视图变化时，操作栏会自动更新。</p>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#View"><linktext>spark.components.View</linktext></link><link href="spark.components.xml#ActionBar"><linktext>spark.components.ActionBar</linktext></link><link href="spark.components.xml#TabbedViewNavigator"><linktext>spark.components.TabbedViewNavigator</linktext></link><link href="spark.transitions.xml#ViewTransitionBase"><linktext>spark.transitions.ViewTransitionBase</linktext></link></related-links><apiConstructor id="spark.components:ViewNavigator:ViewNavigator"><apiName>ViewNavigator</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:ViewNavigator:protected:createActionBarHideEffect"><apiName>createActionBarHideEffect</apiName><shortdesc>
      创建隐藏 ActionBar 控件时播放的效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>隐藏 ActionBar 控件时播放的效果。
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn></apiOperationDef><apiDesc>
      创建隐藏 ActionBar 控件时播放的效果。产生的效果负责同时对 ActionBar 和当前显示在导航器内容区域的视图设置动画。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:protected:createActionBarShowEffect"><apiName>createActionBarShowEffect</apiName><shortdesc>
      创建 ActionBar 控件出现时播放的效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>出现 ActionBar 控件时播放的效果。
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn></apiOperationDef><apiDesc>
      创建 ActionBar 控件出现时播放的效果。产生的效果负责同时对 ActionBar 和当前显示在导航器内容区域的视图设置动画。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:hideActionBar"><apiName>hideActionBar</apiName><shortdesc>
      隐藏操作栏。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>animate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>指示隐藏效果是否要在操作栏隐藏时播放。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      隐藏操作栏。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:popAll"><apiName>popAll</apiName><shortdesc>
      从导航器堆栈中删除所有视图。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>切换视图时播放的视图过渡。    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      从导航器堆栈中删除所有视图。该方法更改空白屏幕的显示。  
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:popToFirstView"><apiName>popToFirstView</apiName><shortdesc>
      除底部视图外，从导航堆栈中删除所有视图。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>切换视图时播放的视图过渡。    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      除底部视图外，从导航堆栈中删除所有视图。底部视图是第一个推送到堆栈上的视图。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:popView"><apiName>popView</apiName><shortdesc>
      从导航堆栈弹出当前视图。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>切换视图时播放的视图过渡。    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      从导航堆栈弹出当前视图。当前视图由堆栈上的顶部视图表示。堆栈上的前一个视图成为当前视图。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:pushView"><apiName>pushView</apiName><shortdesc>
      将新视图推送到导航堆栈的顶部。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewClass</apiItemName><apiType value="Class"/><apiDesc>用来创建视图的类。该参数必须引用扩展 View 容器的类。
      
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>要传递给视图的数据对象。将该参数写入新视图的 <codeph>data</codeph> 属性。
      
      </apiDesc></apiParam><apiParam><apiItemName>context</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>写入 <codeph>ViewNavigator.context</codeph> 属性中的任意对象。创建新视图后，该视图可以引用此属性并根据其值执行操作。例如，视图可能会根据 <codeph>context</codeph> 值来以不同的方式显示数据。
      
      </apiDesc></apiParam><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>切换视图时播放的视图过渡。    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将新视图推送到导航堆栈的顶部。推送到堆栈上的视图成为当前视图。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:replaceView"><apiName>replaceView</apiName><shortdesc>
      将导航堆栈的顶部视图替换为新视图。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewClass</apiItemName><apiType value="Class"/><apiDesc>用来创建替换视图的类。该参数必须引用扩展 View 容器的类。
      
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>要传递给视图的数据对象。将该参数写入新视图的 <codeph>data</codeph> 属性。
      
      </apiDesc></apiParam><apiParam><apiItemName>context</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>用来描述推送操作上下文的任意对象。创建新视图时，它可以引用该属性。
      
      </apiDesc></apiParam><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>切换视图时播放的视图过渡。    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将导航堆栈的顶部视图替换为新视图。替换堆栈上当前视图的视图成为当前视图。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:showActionBar"><apiName>showActionBar</apiName><shortdesc>
      显示操作栏。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>animate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>指示操作栏出现时是否播放显示效果。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      显示操作栏。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:ViewNavigator:actionContent:get"><apiName>actionContent</apiName><shortdesc conref="ActionBar#actionContent">
      该属性覆盖 ActionBar 和 ViewNavigatorApplication 组件中的 actionContent 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionContent">
      该属性覆盖 ActionBar 和 ViewNavigatorApplication 组件中的 <codeph>actionContent</codeph> 属性。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionContent"><linktext>ActionBar.actionContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:actionLayout:get"><apiName>actionLayout</apiName><shortdesc conref="ActionBar#actionContent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionContent">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:activeView:get"><apiName>activeView</apiName><shortdesc>
      在视图过渡期间，该属性引用导航器过渡到的视图。导航器的当前活动视图。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="viewChangeComplete"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:View</apiValueClassifier></apiValueDef><apiDesc>
      <p>在视图过渡期间，该属性引用导航器过渡到的视图。</p>
           
      导航器的当前活动视图。一次仅一个视图可处于活动状态。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:context:get"><apiName>context</apiName><shortdesc>
      描述创建当前视图所在的上下文的字符串。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      描述创建当前视图所在的上下文的字符串。该属性指定为 <codeph>context</codeph> 参数（传递至 <codeph>ViewNavigator.pushView()</codeph> 方法）的值。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:defaultPopTransition:get"><apiName>defaultPopTransition</apiName><shortdesc>
      指定弹出导航操作的默认视图过渡。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.transitions:ViewTransitionBase</apiValueClassifier><apiDefaultValue>SlideViewTransition
           </apiDefaultValue></apiValueDef><apiDesc>
      指定弹出导航操作的默认视图过渡。
           </apiDesc></apiValueDetail><related-links><link href="spark.transitions.xml#SlideViewTransition"><linktext>spark.transitions.SlideViewTransition</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:defaultPushTransition:get"><apiName>defaultPushTransition</apiName><shortdesc>
      指定推送导航操作的默认视图过渡。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.transitions:ViewTransitionBase</apiValueClassifier><apiDefaultValue>SlideViewTransition
           </apiDefaultValue></apiValueDef><apiDesc>
      指定推送导航操作的默认视图过渡。
           </apiDesc></apiValueDetail><related-links><link href="spark.transitions.xml#SlideViewTransition"><linktext>spark.transitions.SlideViewTransition</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:firstViewData:get"><apiName>firstViewData</apiName><shortdesc>
      导航器初始化时传递至第一个视图的 data 属性的对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      导航器初始化时传递至第一个视图的 <codeph>data</codeph> 属性的对象。通过使用 <codeph>firstView</codeph> 属性指定第一个视图。   
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ViewNavigator/firstView"><linktext>firstView</linktext></link><link href="spark.components.xml#View"><linktext>视图</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:firstView:get"><apiName>firstView</apiName><shortdesc>
      应用程序中的每个视图对应于在 ActionScript 或 MXML 文件中定义的 View 容器类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      应用程序中的每个视图对应于在 ActionScript 或 MXML 文件中定义的 View 容器类。该属性指定用于初始化堆栈的第一个视图的视图。该属性必须引用扩展 View 容器的类。
           <p>通过使用 <codeph>firstViewData</codeph> 属性指定传递至第一个视图的任意数据。</p>   
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ViewNavigator/firstViewData"><linktext>firstViewData</linktext></link><link href="spark.components.xml#View"><linktext>视图</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:length:get"><apiName>length</apiName><shortdesc>
      返回导航器正在管理的视图数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="lengthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      返回导航器正在管理的视图数。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:navigationContent:get"><apiName>navigationContent</apiName><shortdesc conref="ActionBar#navigationContent">
      该属性覆盖 ActionBar 和 ViewNavigatorApplication 组件中的 navigationContent 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationContent">
      该属性覆盖 ActionBar 和 ViewNavigatorApplication 组件中的 <codeph>navigationContent</codeph> 属性。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationContent"><linktext>ActionBar.navigationContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:navigationLayout:get"><apiName>navigationLayout</apiName><shortdesc conref="ActionBar#navigationLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:poppedViewReturnedObject:get"><apiName>poppedViewReturnedObject</apiName><shortdesc>
      包含从导航堆栈弹出的或由其它视图替换的最后一个视图返回的对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components.supportClasses:ViewReturnObject</apiValueClassifier><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      包含从导航堆栈弹出的或由其它视图替换的最后一个视图返回的对象。为了返回值，从堆栈弹出的视图覆盖其 <codeph>createReturnObject()</codeph> 方法。
           <p>仅当导航器正在切换视图以响应弹出或替换导航操作时，该对象才可用。新视图接收 <codeph>add</codeph> 事件时该对象保证有效，但视图接收 <codeph>viewActivate</codeph> 事件后该对象受到破坏。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#View/createReturnObject()"><linktext>View.createReturnObject()</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:titleContent:get"><apiName>titleContent</apiName><shortdesc conref="ActionBar#titleContent">
      该属性覆盖 ActionBar 和 ViewNavigatorApplication 组件中的 titleContent 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleContent">
      该属性覆盖 ActionBar 和 ViewNavigatorApplication 组件中的 <codeph>titleContent</codeph> 属性。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>ActionBar.titleContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:titleLayout:get"><apiName>titleLayout</apiName><shortdesc conref="ActionBar#titleLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:title:get"><apiName>title</apiName><shortdesc conref="ActionBar#title">
      该属性覆盖 ActionBar 和 ViewNavigatorApplication 组件中的 title 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#title">
      该属性覆盖 ActionBar 和 ViewNavigatorApplication 组件中的 <codeph>title</codeph> 属性。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IconItemRenderer"><apiName>IconItemRenderer</apiName><shortdesc>
  IconItemRenderer 类是针对手机设备优化的高性能项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style inherit="no" name="messageStyleName" owner="spark.components:IconItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  用于消息组件样式的 CSS 样式声明的名称。
 
  </description>
<default>iconItemRendererMessageStyle
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="iconDelay" owner="spark.components:IconItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  如果图标的源代码尚未缓存，试图加载该源代码之前的延迟值。
 
  <p>延迟很有用处，因为在周围滚动时，不必立即加载图像，而是应该等待一段延迟时间，以确保用户的确希望看到该项呈示器。</p>
 
  </description>
<default>500
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="spark.components:IconItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  垂直方向上各子项间的像素数目。默认值取决于组件类；如果没有覆盖该类的默认值，则默认值为 6。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="spark.components:IconItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  水平方向上各子代之间的像素数。默认值取决于组件类；如果没有覆盖该类的默认值，则默认值为 8。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:IconItemRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:IconItemRenderer
   <strong>Properties</strong>
    decorator=""
    iconContentLoader="<i>See property description</i>"
    iconField="null"
    iconFillMode=""scale
    iconFunction="null"
    iconHeight="NaN"
    iconPlaceholder="null"
    iconScaleMode="stretch"
    iconWidth="NaN"
    label=""
    labelField="null"
    labelFunction="null"
    messageField="null"
    messageFunction="null"
 
   <strong>Common Styles</strong>
    horizontalGap="8"
    iconDelay="500"
    messageStyleName="iconItemRendererMessageStyle"
    verticalGap="6"
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.core:IGraphicElementContainer</apiBaseInterface><apiBaseInterface>spark.core:ISharedDisplayObject</apiBaseInterface><apiBaseClassifier>spark.components:LabelItemRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>
  IconItemRenderer 类是针对手机设备优化的高性能项呈示器。为基于列表的控件中的每项显示四个可选部件： 
   <ul>
    <li><codeph>iconField</codeph> 或 <codeph>iconFunction</codeph> 属性定义的、位于左侧的图标。</li>
    <li><codeph>labelField</codeph> 或 <codeph>labelFunction</codeph> 属性定义的图标旁边的单行文本标签。</li>
    <li><codeph>messageField</codeph> 或 <codeph>messageFunction</codeph> 属性定义的文本标签下方的多行消息。</li>
    <li><codeph>decorator</codeph> 属性定义的、位于右侧的修饰符图标。</li>
  </ul>
   <p>要将 CSS 样式应用于单行文本标签（例如字体大小和颜色），请对 IconItemRenderer 类设置样式。要对多行消息设置样式，请使用 <codeph>messageStyleNameM</codeph> 样式属性。以下示例为文本标签和消息设置文本样式：</p>
   <pre>
     &lt;fx:Style>
         .myFontStyle { 
             fontSize: 15;
             color: #9933FF;
         }
  
     &lt;/fx:Style>
     
     &lt;s:List id="myList"
         width="100%" height="100%"
         labelField="firstName">
         &lt;s:itemRenderer>
             &lt;fx:Component>
                 &lt;s:IconItemRenderer messageStyleName="myFontStyle" fontSize="25"
                     labelField="firstName"
                     messageField="lastName" 
                     decorator="@Embed(source='assets/logo_small.jpg')"/>
             &lt;/fx:Component>
         &lt;/s:itemRenderer>
         &lt;s:ArrayCollection>
             &lt;fx:Object firstName="Dave" lastName="Duncam" company="Adobe" phone="413-555-1212"/>
             &lt;fx:Object firstName="Sally" lastName="Smith" company="Acme" phone="617-555-1491"/>
             &lt;fx:Object firstName="Jim" lastName="Jackson" company="Beta" phone="413-555-2345"/>
             &lt;fx:Object firstName="Mary" lastName="Moore" company="Gamma" phone="617-555-1899"/>
         &lt;/s:ArrayCollection>
     &lt;/s:List>
  </pre>
   </apiDesc><example conref="IconItemRendererExample.mxml"/></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.List.xml"><linktext>spark.components.List</linktext></link><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link><link href="" invalidHref="spark.components.IItemRenderer.xml"><linktext>spark.components.IItemRenderer</linktext></link><link href="" invalidHref="spark.components.supportClasses.ItemRenderer.xml"><linktext>spark.components.supportClasses.ItemRenderer</linktext></link><link href="spark.components.xml#LabelItemRenderer"><linktext>spark.components.LabelItemRenderer</linktext></link></related-links><apiConstructor id="spark.components:IconItemRenderer:IconItemRenderer"><apiName>IconItemRenderer</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:IconItemRenderer:invalidateGraphicElementDisplayList"><apiName>invalidateGraphicElementDisplayList</apiName><shortdesc>
      请注意元素已更改且需要重新绘制的主机组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="spark.core:IGraphicElement"/><apiDesc>已更改的元素。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      请注意元素已更改且需要重新绘制的主机组件。<codeph>IGraphicElementHost</codeph> 必须对 IGraphicElement 调用 <codeph>validateDisplayList()</codeph> 方法，才可使其有机会重新绘制。通常，主机将在其 <codeph>validateDisplayList()</codeph> 方法中验证元素的显示列表。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:IconItemRenderer:invalidateGraphicElementProperties"><apiName>invalidateGraphicElementProperties</apiName><shortdesc>
      请注意元素已更改且需要验证属性的主机组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="spark.core:IGraphicElement"/><apiDesc>已更改的元素。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      请注意元素已更改且需要验证属性的主机组件。<codeph>IGraphicElementHost</codeph> 必须对 IGraphicElement 调用 <codeph>validateProperties()</codeph> 方法，才可使其有机会提交其属性。通常，主机将在其 <codeph>validateProperties()</codeph> 方法中验证元素属性。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:IconItemRenderer:invalidateGraphicElementSharing"><apiName>invalidateGraphicElementSharing</apiName><shortdesc>
      请注意元素图层已更改的主机。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="spark.core:IGraphicElement"/><apiDesc>已更改大小的元素。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      请注意元素图层已更改的主机。<codeph>IGraphicElementHost</codeph> 必须重新计算含有共享 DisplayObject 的图形元素的序列，且可能需要重新指定 DisplayObject，并因此重新绘制这些序列。通常，主机将在其 <codeph>validateProperties()</codeph> 方法中执行该操作。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:IconItemRenderer:invalidateGraphicElementSize"><apiName>invalidateGraphicElementSize</apiName><shortdesc>
      请注意元素大小已更改的主机组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="spark.core:IGraphicElement"/><apiDesc>已更改大小的元素。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      请注意元素大小已更改的主机组件。<codeph>IGraphicElementHost</codeph> 必须对 IGraphicElement 调用 <codeph>validateSize()</codeph> 方法，才可使其有机会验证其大小。通常，主机将在其 <codeph>validateSize()</codeph> 方法中验证元素的大小。
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:IconItemRenderer:protected:decoratorDisplay"><apiName>decoratorDisplay</apiName><shortdesc>
      用于显示该项呈示器的修饰符的显示对象组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="spark.primitives:BitmapImage"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      用于显示该项呈示器的修饰符的显示对象组件。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:protected:iconDisplay"><apiName>iconDisplay</apiName><shortdesc>
      用于显示项呈示器的图标数据的位图图像组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="spark.primitives:BitmapImage"/></apiValueDef><apiDesc>
      用于显示项呈示器的图标数据的位图图像组件。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:protected:messageDisplay"><apiName>messageDisplay</apiName><shortdesc>
      用于显示项呈示器的消息数据的文本组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:StyleableTextField</apiValueClassifier></apiValueDef><apiDesc>
      用于显示项呈示器的消息数据的文本组件。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:decorator:get"><apiName>decorator</apiName><shortdesc>
      显示在该项呈示器右侧的修饰符图标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>"" 
     
      </apiDefaultValue></apiValueDef><apiDesc>
      显示在该项呈示器右侧的修饰符图标。
     
      <p>修饰符图标忽略 <codeph>verticalAlign</codeph> 样式，始终垂直居中显示。</p>
           <p>修饰符图标应为嵌入资源。如果使用外部资源，可能会导致性能降低。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconContentLoader:get"><apiName>iconContentLoader</apiName><shortdesc>
      要与内容加载器客户端相关联的可选自定义图像加载器（例如，图像缓存或队列）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.core:IContentLoader"/></apiValueDef><apiDesc>
      要与内容加载器客户端相关联的可选自定义图像加载器（例如，图像缓存或队列）。
     
      <p>默认值是在 IconItemRenderer 上定义的静态内容缓存，它最多允许存放 100 条。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconField:get"><apiName>iconField</apiName><shortdesc>
      数据项中作为图标显示的字段名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      数据项中作为图标显示的字段名称。默认情况下，<codeph>iconField</codeph> 为 <codeph>null</codeph>，且项呈示器不显示图标。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconFillMode:get"><apiName>iconFillMode</apiName><shortdesc conref="spark.primitives.BitmapImage#fillMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>mx.graphics.BitmapFillMode.SCALE&lt;/code>
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#fillMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.graphics.BitmapFillMode.xml"><linktext>mx.graphics.BitmapFillMode</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:iconFunction:get"><apiName>iconFunction</apiName><shortdesc>
      用户提供的函数，在每个项目上运行以确定其图标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      用户提供的函数，在每个项目上运行以确定其图标。<codeph>iconFunction</codeph> 属性覆盖 <codeph>iconField</codeph> 属性。
           <p>可以提供一个 <codeph>iconFunction</codeph>，用于查找合适的字段并返回将用作图标的有效 URL 或对象。</p>
           <p>icon 函数仅使用数据提供程序中的某项作为唯一参数，并返回一个作为 <codeph>source</codeph> 属性传递给 <codeph>spark.primitives.BitmapImage</codeph> 对象的 Object。icon 函数可以返回一个指向图像的有效 URL 或返回一个表示图像的 Class 文件。要了解从 icon 函数可以返回其它哪些类型的对象，请参阅 <codeph>BitmapImage</codeph> 文档</p>
      <pre>
      myIconFunction(item:Object):Object</pre>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.xml#BitmapImage/source"><linktext>spark.primitives.BitmapImage.source</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:iconHeight:get"><apiName>iconHeight</apiName><shortdesc>
      图标的高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
     
      </apiDefaultValue></apiValueDef><apiDesc>
      图标的高度。如果未指定，则使用图像的固有高度。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconPlaceholder:get"><apiName>iconPlaceholder</apiName><shortdesc>
      正在下载外部加载资源时要使用的图标资源。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      正在下载外部加载资源时要使用的图标资源。
     
      <p>该资源应为嵌入图像而非外部加载图片。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconScaleMode:get"><apiName>iconScaleMode</apiName><shortdesc conref="spark.primitives.BitmapImage#scaleMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>mx.graphics.BitmapScaleMode.STRETCH&lt;/code>
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#scaleMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.graphics.BitmapScaleMode.xml"><linktext>mx.graphics.BitmapScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:iconWidth:get"><apiName>iconWidth</apiName><shortdesc>
      图标的宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
     
      </apiDefaultValue></apiValueDef><apiDesc>
      图标的宽度。如果未指定，则使用图像的固有宽度。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:labelField:get"><apiName>labelField</apiName><shortdesc>
      数据提供程序项目中作为标签显示的字段名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      数据提供程序项目中作为标签显示的字段名称。<codeph>labelFunction</codeph> 属性将覆盖此属性。
     
      <p>如果 <codeph>labelFunction</codeph> = <codeph>labelField</codeph> = null，则使用从基于列表的控件推入的 <codeph>label</codeph> 属性。但是，如果 <codeph>labelField</codeph> 显式设置为 <codeph>""</codeph>（空字符串），则不会显示标签。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#IconItemRenderer/labelFunction"><linktext>spark.components.IconItemRenderer.labelFunction</linktext></link><link href="" invalidHref="spark.components.xml#IItemRenderer/label"><linktext>spark.components.IItemRenderer.label</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      用户提供的函数，在每个项目上运行以确定其标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      用户提供的函数，在每个项目上运行以确定其标签。<codeph>labelFunction</codeph> 属性覆盖 <codeph>labelField</codeph> 属性。
           <p>您可以提供一个 <codeph>labelFunction</codeph>，用于查找合适的字段并返回可显示的字符串。<codeph>labelFunction</codeph> 还非常适用于处理格式设置和本地化。</p>
           <p>label 函数仅使用数据提供程序中的某个项目作为唯一参数，并返回一个 String。</p>
      <pre>
      myLabelFunction(item:Object):String</pre>
     
      <p>如果 <codeph>labelFunction</codeph> = <codeph>labelField</codeph> = null，则使用从基于列表的控件推入的 <codeph>label</codeph> 属性。但是，如果 <codeph>labelField</codeph> 显式设置为 <codeph>""</codeph>（空字符串），则不会显示标签。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#IconItemRenderer/labelFunction"><linktext>spark.components.IconItemRenderer.labelFunction</linktext></link><link href="" invalidHref="spark.components.xml#IItemRenderer/label"><linktext>spark.components.IItemRenderer.label</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:messageField:get"><apiName>messageField</apiName><shortdesc>
      数据项中作为消息显示的字段名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      数据项中作为消息显示的字段名称。<codeph>messageFunction</codeph> 属性覆盖此属性。
           <p>使用 <codeph>messageStyleName</codeph> 样式控制文本的外观。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:messageFunction:get"><apiName>messageFunction</apiName><shortdesc>
      用户提供的函数，在每个项目上运行以确定其消息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      用户提供的函数，在每个项目上运行以确定其消息。<codeph>messageFunction</codeph> 属性覆盖 <codeph>messageField</codeph> 属性。
           <p>您可以提供一个 <codeph>messageFunction</codeph>，用于查找合适的字段并返回可显示的字符串。<codeph>messageFunction</codeph> 还非常适用于处理格式设置和本地化。</p>
           <p>message 函数仅使用数据提供程序中的某项作为唯一参数，并返回一个 String。</p>
      <pre>
      myMessageFunction(item:Object):String</pre>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:redrawRequested:get"><apiName>redrawRequested</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:IconItemRenderer:label:set"><apiName>label</apiName><shortdesc>
      如果 labelFunction = labelField = null，则使用从列表控件推入的 label 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      <p>如果 <codeph>labelFunction</codeph> = <codeph>labelField</codeph> = null，则使用从列表控件推入的 <codeph>label</codeph> 属性。但是，如果 <codeph>labelField</codeph> 显式设置为 <codeph>""</codeph>（空字符串），则不会显示标签。</p>
     
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#IconItemRenderer/labelField"><linktext>spark.components.IconItemRenderer.labelField</linktext></link><link href="spark.components.xml#IconItemRenderer/labelFunction"><linktext>spark.components.IconItemRenderer.labelFunction</linktext></link><link href="" invalidHref="spark.components.xml#IItemRenderer/label"><linktext>spark.components.IItemRenderer.label</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:ViewMenuItem"><apiName>ViewMenuItem</apiName><shortdesc>
  ViewMenuItem 控件为 ViewMenu 容器中的菜单项显示标签和图标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="showsCaret" owner="spark.components:ViewMenuItem" playerVersion="AIR2.5">
<description>
  表示菜单项的按钮的插入标记状态。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ViewMenuItem&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ViewMenuItem/&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ViewMenuItem 控件为 ViewMenu 容器中的菜单项显示标签和图标。为 <codeph>click</codeph> 事件编写事件处理函数，以便在选择菜单项时执行操作。
 
  <p/>
 
 <p>
  <adobeimage alt="" href="../../images/vm_open_menu_vm.png"/>
 </p>
  
  </apiDesc><example conref="ViewMenuExampleHome.mxml"/><example conref="ViewMenuExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#ViewMenu"><linktext>spark.components.ViewMenu</linktext></link><link href="spark.layouts.xml#ViewMenuLayout"><linktext>spark.layouts.ViewMenuLayout</linktext></link><link href="spark.components.supportClasses.xml#ViewNavigatorApplicationBase"><linktext>spark.components.supportClasses.ViewNavigatorApplicationBase</linktext></link><link href="" invalidHref="spark.skins.mobile.ViewMenuItemSkin.xml"><linktext>spark.skins.mobile.ViewMenuItemSkin</linktext></link></related-links><apiConstructor id="spark.components:ViewMenuItem:ViewMenuItem"><apiName>ViewMenuItem</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ViewMenuItem:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      如果 ViewMenuItem 控件处于插入标记状态，则包含 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      如果 ViewMenuItem 控件处于插入标记状态，则包含 <codeph>true</codeph>。 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:CalloutButton"><apiName>CalloutButton</apiName><shortdesc>
  CalloutButton 控件是一个下拉组件，定义一个用于打开和关闭标注容器的按钮。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="style" name="repeatInterval"/><Exclude kind="style" name="repeatDelay"/><DefaultProperty name="calloutContent"/><skinParts><SkinPart name="dropDown" owner="spark.components:CalloutButton" playerVersion="AIR3" required="false" var_type="mx.core:IFactory">
<description>
      一个外观部件，定义用于创建标注实例的下拉工厂。如果未在外观上定义 <codeph>dropDown</codeph>，则会创建一个 <codeph>ClassFactory</codeph> 以生成一个默认的标注实例。
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the drop-down factory which creates the Callout
      instance.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:CalloutButton&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:CalloutButton
   <strong>Properties</strong>
    calloutDestructionPolicy="auto"
    calloutLayout="BasicLayout"
    horizontalPosition="auto"
    verticalPosition="auto
 
   <strong>Events</strong>
    open="<i>No default</i>"
    close="<i>No default</i>"
      ...
      <i>child tags</i>
      ...
  &lt;/s:CalloutButton&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Button</apiBaseClassifier></apiClassifierDef><apiDesc>
  CalloutButton 控件是一个下拉组件，定义一个用于打开和关闭标注容器的按钮。CalloutButton 指定标注容器的布局和子组件。
   <p/>
  <p>
  <adobeimage alt="" href="../../images/ca_calloutButton_ca.png"/>
 </p>
   <p>CalloutButton 控件使用 spark.components.supportClasses.DropDownController 类管理标注容器。您可以通过使用受保护的 <codeph>CalloutButton.dropDownController</codeph> 属性访问 DropDownController。</p>
   <p>当标注处于打开状态时：</p>
  <ul>
    <li>单击该按钮会关闭标注</li>
    <li>单击标注以外的区域会关闭标注。</li>
  </ul>
   <p>CalloutButton 组件具有以下默认特性：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>宽度足以显示控件的文本标签</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>32 个像素宽 × 43 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.mobile.CalloutButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="CalloutButtonExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#Callout"><linktext>spark.components.Callout</linktext></link><link href="" invalidHref="spark.components.Button.xml"><linktext>spark.components.Button</linktext></link><link href="" invalidHref="spark.components.supportClasses.DropDownController.xml"><linktext>spark.components.supportClasses.DropDownController</linktext></link></related-links><adobeApiEvent id="spark.components:CalloutButton_spark.events.DropDownEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  当用户单击打开按钮以显示标注时调度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.OPEN</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户单击打开按钮以显示标注时调度。  
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:CalloutButton_spark.events.DropDownEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  当标注由于任何原因关闭（如以编程方式关闭标注）时调度。用户单击标注以外的区域。当标注显示时用户单击打开按钮。
  
   </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.CLOSE</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当标注由于任何原因关闭时调度，例如有以下原因： 
  <ul>
      <li>标注以编程方式关闭。</li>
      <li>用户单击标注以外的区域。</li>
      <li>当标注显示时用户单击打开按钮。</li>
  </ul>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:CalloutButton:CalloutButton"><apiName>CalloutButton</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:CalloutButton:closeDropDown"><apiName>closeDropDown</apiName><shortdesc>
      将外观状态更改为“正常”。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      将外观状态更改为“正常”。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:CalloutButton:openDropDown"><apiName>openDropDown</apiName><shortdesc>
      初始化 dropDown 并将外观状态更改为“打开”。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      初始化 dropDown 并将外观状态更改为“打开”。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:CalloutButton:calloutContent:get"><apiName>calloutContent</apiName><shortdesc>
      标注的内容中要包含的组件集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      标注的内容中要包含的组件集。
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Callout"><linktext>spark.components.Callout</linktext></link></related-links></apiValue><apiValue id="spark.components:CalloutButton:calloutDestructionPolicy:get"><apiName>calloutDestructionPolicy</apiName><shortdesc>
      定义当标注关闭时标注按钮使用的破坏策略。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>auto
      
      </apiDefaultValue></apiValueDef><apiDesc>
      定义当标注关闭时标注按钮使用的破坏策略。如果设置为<codeph>“auto”</codeph>，则按钮会在它关闭时破坏标注实例。如果设置为<codeph>“never”</codeph>，则标注容器会缓存在内存中。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:calloutLayout:get"><apiName>calloutLayout</apiName><shortdesc>
      定义标注容器的布局。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>BasicLayout
      
      </apiDefaultValue></apiValueDef><apiDesc>
      定义标注容器的布局。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:callout:get"><apiName>callout</apiName><shortdesc>
      在触发 DropDownEvent.OPEN 后创建的标注实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="calloutChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:Callout</apiValueClassifier></apiValueDef><apiDesc>
      在触发 <codeph>DropDownEvent.OPEN</codeph> 后创建的标注实例。实例是使用 <codeph>dropDown</codeph> <codeph>IFactory</codeph> 外观部件创建的。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#CalloutButton/calloutDestructionPolicy"><linktext>calloutDestructionPolicy</linktext></link></related-links></apiValue><apiValue id="spark.components:CalloutButton:protected:dropDownController:get"><apiName>dropDownController</apiName><shortdesc>
      用于处理所有鼠标、键盘和焦点用户交互的 DropDownController 类的实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.components.supportClasses:DropDownController"/></apiValueDef><apiDesc>
      用于处理所有鼠标、键盘和焦点用户交互的 DropDownController 类的实例。在构造函数中创建 DropDownController 实例之后，Flex 调用 <codeph>initializeDropDownController()</codeph> 方法。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:horizontalPosition:get"><apiName>horizontalPosition</apiName><shortdesc conref="spark.components.Callout#horizontalPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="spark.components.Callout#horizontalPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:isDropDownOpen:get"><apiName>isDropDownOpen</apiName><shortdesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:verticalPosition:get"><apiName>verticalPosition</apiName><shortdesc conref="spark.components.Callout#verticalPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="spark.components.Callout#verticalPosition">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ToggleSwitch"><apiName>ToggleSwitch</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="style" name="textAlign"/><styles><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:ToggleSwitch" playerVersion="AIR3" theme="mobile" type="uint">
<description>
  文本阴影的颜色。
 
  </description>
<default>0x000000
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textShadowAlpha" owner="spark.components:ToggleSwitch" playerVersion="AIR3" theme="mobile" type="Number">
<description>
  文本阴影的 alpha。
 
  </description>
<default>0.65
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="slideDuration" owner="spark.components:ToggleSwitch" playerVersion="AIR3" type="Number">
<description>
  滑块在轨道的选中幻灯片和未选中幻灯片之间滑动的动画持续时间（以毫秒为单位）。对于轨道上任意两个位置间的动画，动画需要的时间也会按比例缩短。例如，沿着轨道拖动滑块一半后，沿轨道的其余幻灯片的动画需要原来一半的持续时间。
  
  </description>
<default>125
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components:ToggleSwitch" playerVersion="AIR3" type="uint">
<description>
  应用了颜色以突出显示 ToggleSwitch 控件的选中幻灯片。
  
  </description>
<default>0x3F7FBA
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/><skinParts><SkinPart name="thumb" owner="spark.components:ToggleSwitch" playerVersion="AIR3" required="false" var_type="mx.core:IVisualElement">
<description>
      一个外观部件，可以将其沿轨道拖动。<codeph>thumbPosition</codeph> 属性包含滑块沿轨道的当前位置。
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that can be dragged along the track.</shortdesc></SkinPart><SkinPart name="track" owner="spark.components:ToggleSwitch" playerVersion="AIR3" required="false" var_type="mx.core:IVisualElement">
<description>
      一个外观部件，用于定义可以沿其拖动滑块的边界。
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the bounds along which the thumb can
      be dragged.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:ToggleSwitch&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:ToggleSwitch
   <strong>Properties</strong>
    selected="null"
    thumbPosition="null"
 
   <strong>Common Styles</strong>
    accentColor="0x3F7FBA"
    slideDuration="125"
 
   <strong>Mobile Styles</strong>
    textShadowAlpha="0.65"
    textShadowColor="0x000000"
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ToggleSwitch 包含一个滑块外观部件，该部件可在轨道外观部件的两端之间移动，类似于 Spark Slider 控件。
   <p/>
   <p/>
  <p>
  <adobeimage alt="" href="../../images/ts_toggleSwitch_ts.png"/>
 </p>
   <p/>
   <p>ToggleSwitch 控件对未选中和选中的标签使用以下默认值：OFF（未选中）和 ON（选中）。定义一个自定义外观以更改标签，或更改控件的其他外观特性。</p>
   <p/>
   <pre>
  package skins
  // components\mobile\skins\MyToggleSwitchSkin.as
  {
      import spark.skins.mobile.ToggleSwitchSkin;
      
      public class MyToggleSwitchSkin extends ToggleSwitchSkin
      {
          public function MyToggleSwitchSkin()
          {
              super();
              // Set properties to define the labels 
              // for the selected and unselected positions.
              selectedLabel="Yes";
              unselectedLabel="No"; 
          }
      }
  }
  </pre>
   </apiDesc><example conref="ToggleSwitchExample.mxml"/></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.ToggleButton.xml"><linktext>spark.components.ToggleButton</linktext></link><link href="" invalidHref="spark.components.HSlider.xml"><linktext>spark.components.HSlider</linktext></link><link href="" invalidHref="spark.skins.mobile.ToggleSwitchSkin.xml"><linktext>spark.skins.mobile.ToggleSwitchSkin</linktext></link></related-links><apiConstructor id="spark.components:ToggleSwitch:ToggleSwitch"><apiName>ToggleSwitch</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ToggleSwitch:thumbPosition:get"><apiName>thumbPosition</apiName><shortdesc>
      滑块沿轨道的当前位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      滑块沿轨道的当前位置。值范围在 0.0（未选中）和 1.0（选中）之间。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ToggleSwitch:selected:set"><apiName>selected</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      <codeph/><codeph/>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:CalloutPosition"><apiName>CalloutPosition</apiName><shortdesc>
  CalloutPosition 类定义标注组件相对于所有者的水平和垂直位置的枚举。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  CalloutPosition 类定义标注组件相对于所有者的水平和垂直位置的枚举。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Callout"><linktext>spark.components.Callout</linktext></link><link href="spark.components.xml#Callout/horizontalPosition"><linktext>spark.components.Callout.horizontalPosition</linktext></link><link href="spark.components.xml#Callout/verticalPosition"><linktext>spark.components.Callout.verticalPosition</linktext></link></related-links><apiValue id="spark.components:CalloutPosition:AFTER"><apiName>AFTER</apiName><shortdesc>
      在所有者的结尾边缘之后放置标注的前导边缘。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>after</apiData><apiType value="String"/></apiValueDef><apiDesc>
      在所有者的结尾边缘之后放置标注的前导边缘。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:AUTO"><apiName>AUTO</apiName><shortdesc>
      将标注放置在所有者外部，标注要求重新调整大小以适应的次数最少的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc>
      将标注放置在所有者外部，标注要求重新调整大小以适应的次数最少的位置。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:BEFORE"><apiName>BEFORE</apiName><shortdesc>
      将标注的结尾边缘放置在所有者的前导边缘之前。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>before</apiData><apiType value="String"/></apiValueDef><apiDesc>
      将标注的结尾边缘放置在所有者的前导边缘之前。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:END"><apiName>END</apiName><shortdesc>
      将标注的结尾边缘放置在所有者的结尾边缘处。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>end</apiData><apiType value="String"/></apiValueDef><apiDesc>
      将标注的结尾边缘放置在所有者的结尾边缘处。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:MIDDLE"><apiName>MIDDLE</apiName><shortdesc>
      将标注的 horizontalCenter 放置在所有者的 horizontalCenter 处。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middle</apiData><apiType value="String"/></apiValueDef><apiDesc>
      将标注的 horizontalCenter 放置在所有者的 horizontalCenter 处。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:START"><apiName>START</apiName><shortdesc>
      将标注的前导边缘放置在所有者的前导边缘处。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>start</apiData><apiType value="String"/></apiValueDef><apiDesc>
      将标注的前导边缘放置在所有者的前导边缘处。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:SpinnerListItemRenderer"><apiName>SpinnerListItemRenderer</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:LabelItemRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>
  这是具有单个文本组件的简单项呈示器。
 
 </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#SpinnerList"><linktext>spark.components.SpinnerList</linktext></link></related-links><apiConstructor id="spark.components:SpinnerListItemRenderer:SpinnerListItemRenderer"><apiName>SpinnerListItemRenderer</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
            
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:DateSpinner"><apiName>DateSpinner</apiName><shortdesc>
  DateSpinner 控件为选取特定的日期或时间提供了一个接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="style" name="textAlign"/><styles><style format="Color" inherit="yes" name="accentColor" owner="spark.components:DateSpinner" playerVersion="AIR3" type="uint">
<description>
  为与今天的日期相匹配的日期项应用了颜色。例如，如果此项设置为“0x0000FF”且今天的日期是 1/1/2011，则月份“一月”、日期“1”和年份“2011”将在旋转器上以蓝色文本显示。此颜色并不应用于时间项。
 
  <p/>
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:DateSpinner" playerVersion="AIR3" type="String">
<description>
  组件的区域设置。控制日期的显示格式，如以什么顺序列出字段和显示哪些与日期相关的其他字符（如果有）。使用标准区域设置标识符，如 Unicode Technical Standard #35 中所述。例如，"en"、"en_US" 和 "en-US" 均表示英语，"ja" 表示日语。如果平台上不支持指定的区域设置，将使用“en_US”。要确定是否支持某个区域设置，请使用 <codeph>DateTimeFormatter.getAvailableLocaleIDNames()</codeph>
   <p>默认值为 undefined。此属性从祖代继承其值；如果未定义祖代，则从全局区域设置<codeph/>样式中继承。</p>
   <p>在使用 Spark 格式化程序和全球化类时，可以将根应用程序的此样式设置为 <codeph>LocaleID.DEFAULT</codeph> 常量的值。然后，这些类使用客户端操作系统的国际首选参数。</p>
   </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。与手机主题一起使用时，该属性不能为负数。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="Number">
<description>
  文本行之间附加的垂直空间。
   <p>默认值为 0。</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>normal</codeph> 和 <codeph>bold</codeph>。Button 控件的默认值为 <codeph>bold</codeph>。所有其它控件的默认值为 <codeph>normal</codeph>。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="Number">
<description>
  文本的高度，以像素为单位。在 Halo 主题中，除 ColorPicker 控件外，所有其它控件的默认值均为 10。对于 Halo 主题的 ColorPicker 控件，默认值为 11。在 Spark 主题中，除 ColorPicker 控件外，所有其它控件的默认值均为 12。对于 Spark 主题的 ColorPicker 控件，默认值为 11。Mobile 主题的默认值为 24。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。Halo 主题的默认字体为 <codeph>"Verdana"</codeph>。Spark 主题的默认字体为 <codeph>"Arial"</codeph>。Mobile 主题的默认字体为 <codeph>"_sans"</codeph>。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。Halo 主题的默认值为 <codeph>0x0B333C</codeph>。Spark 主题的默认值为 <codeph>0x000000</codeph>。Mobile 主题的默认值为 <codeph>0xFFFFFF</codeph>。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="dateItemList" owner="spark.components:DateSpinner" playerVersion="AIR3" required="false" var_type="mx.core:IFactory">
<description>
      用于为所有字段创建 SpinnerList 接口的默认工厂。<codeph/>
     
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      The default factory for creating SpinnerList interfaces for all fields.</shortdesc></SkinPart><SkinPart name="listContainer" owner="spark.components:DateSpinner" playerVersion="AIR3" required="false" var_type="mx.core:IVisualElementContainer">
<description>
      日期部件列表的容器.
     
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      The container for the date part lists.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DateSpinner&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DateSpinner
    <strong>Properties</strong>
    displayMode="date|time|dateAndTime"
    maxDate="null"
    minDate="null"
    minuteStepSize="1"
    selectedDate=""
 
    <strong>Styles</strong>
    accentColor="0x0099FF"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  DateSpinner 控件为选取特定的日期或时间提供了一个接口。 
 
 <p>DateSpinner 控件可以基于 <codeph>displayMode</codeph> 属性的值显示日期、时间或者日期和时间。</p>
 
  <p/>
  <p>
  <adobeimage alt="" href="../../images/datespinner_types.png"/>
 </p>
 
  <p>该控件的 UI 由包含在一个 SpinnerListContainer 内的一系列 SpinnerList 控件组成，这些控件显示当前选中的日期。通过触摸或鼠标交互，用户可以调整选中的日期。</p>
 
  <p>DateSpinnerSkin 只定义了一些调整大小属性。要更改 DateSpinner 控件的外观，您通常需要重新设置基础 SpinnerListSkin 或 SpinnerListContainerSkin 的外观。</p>
 
  </apiDesc><example conref="DateSpinnerExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#SpinnerList"><linktext>spark.components.SpinnerList</linktext></link><link href="spark.components.calendarClasses.xml#DateSpinnerItemRenderer"><linktext/></link><link href="" invalidHref="spark.skins.mobile.DateSpinnerSkin.xml"><linktext/></link></related-links><adobeApiEvent id="spark.components:DateSpinner_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  选中的日期已更改后调度，无论是由用户更改（即</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  选中的日期已更改后调度，无论是由用户更改（即交互方式）还是以编程方式更改。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DateSpinner_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  选中的日期已由用户更改后调度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  选中的日期已由用户更改后调度。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DateSpinner:DateSpinner"><apiName>DateSpinner</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:DateSpinner:protected:createDateItemList"><apiName>createDateItemList</apiName><shortdesc>
      为指定的日期部件创建一个列表对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>
     </apiDesc><apiOperationClassifier>spark.components:SpinnerList</apiOperationClassifier></apiReturn><apiParam><apiItemName>datePart</apiItemName><apiType value="String"/><apiDesc>使用日期部件常量，如 YEAR_ITEM。
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>
      </apiDesc></apiParam><apiParam><apiItemName>itemCount</apiItemName><apiType value="int"/><apiDesc>
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      为指定的日期部件创建一个列表对象。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:DateSpinner:protected:DATE_ITEM"><apiName>DATE_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>dateItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:HOUR_ITEM"><apiName>HOUR_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>hourItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:MERIDIAN_ITEM"><apiName>MERIDIAN_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>meridianItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:MINUTE_ITEM"><apiName>MINUTE_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>minuteItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:MONTH_ITEM"><apiName>MONTH_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>monthItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:YEAR_ITEM"><apiName>YEAR_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>yearItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:dateList"><apiName>dateList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:hourList"><apiName>hourList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:meridianList"><apiName>meridianList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:minuteList"><apiName>minuteList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:monthList"><apiName>monthList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:yearList"><apiName>yearList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:displayMode:get"><apiName>displayMode</apiName><shortdesc>
      DateSpinner 当前用于显示的模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>DateSelectorDisplayMode.DATE
      </apiDefaultValue></apiValueDef><apiDesc>
      DateSpinner 当前用于显示的模式。您可以将此值设置为在 DateSelectorDisplayMode 类中定义的常量，或设置为其等效字符串。
     
      <p>下表描述了可能的值：
         <adobetable class="innertable">
         
         
         
         
         <tgroup cols="2"><thead><row><entry>模式（等效字符串）</entry><entry>说明</entry></row></thead><tbody><row><entry><codeph>DateSelectorDisplayMode.DATE</codeph> ("date")</entry><entry>显示月、日和年。这是默认模式。</entry></row><row><entry><codeph>DateSelectorDisplayMode.TIME</codeph> ("time")</entry><entry>显示周日、月、日和时间。</entry></row><row><entry><codeph>DateSelectorDisplayMode.DATE_AND_TIME</codeph> ("dateAndTime")</entry><entry>显示小时和分钟；如果区域设置支持 AM/PM 选择器，还会显示 AM/PM 选择器。</entry></row></tbody></tgroup></adobetable>
       </p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.components.calendarClasses.DateSelectorDisplayMode.xml"><linktext>spark.components.calendarClasses.DateSelectorDisplayMode</linktext></link></related-links></apiValue><apiValue id="spark.components:DateSpinner:maxDate:get"><apiName>maxDate</apiName><shortdesc>
      最大可选的日期；只有此日期和此日期之前的日期是可选的。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>Dec 31st, 9999
     
      </apiDefaultValue></apiValueDef><apiDesc>
      最大可选的日期；只有此日期和此日期之前的日期是可选的。
     
      <p/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:minDate:get"><apiName>minDate</apiName><shortdesc>
      最小可选的日期；只有此日期和此日期之后的日期是可选的。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>January 1st, 1601
      </apiDefaultValue></apiValueDef><apiDesc>
      最小可选的日期；只有此日期和此日期之后的日期是可选的。
     
      <p/>
     
      <p/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:minuteStepSize:get"><apiName>minuteStepSize</apiName><shortdesc>
      显示分钟时要使用的分钟时间间隔。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>1
      </apiDefaultValue></apiValueDef><apiDesc>
      显示分钟时要使用的分钟时间间隔。仅适用于 TIME 模式和 DATE_AND_TIME 模式。有效值必须是 60 的倍数；无效值将恢复到默认的时间间隔 1。例如，值“15”将显示值 0、15、30、45。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:selectedDate:get"><apiName>selectedDate</apiName><shortdesc>
      DateSpinner 控件中当前选中的日期。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>the current date
     
      </apiDefaultValue></apiValueDef><apiDesc>
      DateSpinner 控件中当前选中的日期。
     
      <p/>
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Callout"><apiName>Callout</apiName><shortdesc>
  该标注容器是一个 SkinnablePopUpContainer，充当一个拥有附加的所有者相对定位选项的弹出菜单，类似于 PopUpAnchor。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><styles><style enumeration="inset,flat,none" inherit="no" name="contentBackgroundAppearance" owner="spark.components:Callout" playerVersion="AIR3" type="String">
<description>
  <codeph>contentGroup</codeph> 的外观。<codeph/><codeph/><codeph/>
   <p>在 ActionScript 中，您可以使用以下常量来设置此属性：<codeph>ContentBackgroundAppearance.INSET</codeph>、<codeph>ContentBackgroundAppearance.FLAT</codeph> 和 <codeph>ContentBackgroundAppearance.NONE</codeph>。</p>
   </description>
<default>ContentBackgroundAppearance.INSET
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="arrow" owner="spark.components:Callout" playerVersion="AIR3" required="false" var_type="mx.core:UIComponent">
<description>
      以可视方式将所有者连接到 contentGroup 的可选外观部件。
           </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that visually connects the owner to the
      contentGroup.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Callout&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Callout
    <strong>Properties</strong>
    horizontalPosition="auto"
    verticalPosition="auto"
     <strong>Styles</strong>
    contentBackgroundAppearance="inset"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnablePopUpContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  该标注容器是一个 SkinnablePopUpContainer，充当一个拥有附加的所有者相对定位选项的弹出菜单，类似于 PopUpAnchor。标注还增加了一个可选的<codeph>箭头</codeph>外观部件，它直观地显示了朝向所有者的方向。
   <p/>
  <p>
  <adobeimage alt="" href="../../images/ca_calloutViewNav_ca.png"/>
 </p>
   <p>您还可以使用 CalloutButton 控件打开一个标注容器。CalloutButton 控件将标注容器以及打开和关闭标注所需的所有逻辑都封装在单一控件中。因此，CalloutButton 控件是标注的所有者或宿主。</p>
   <p>标注使用 <codeph>horizontalPosition</codeph> 和 <codeph>verticalPosition</codeph> 属性来确定标注相对于由 <codeph>open()</codeph> 方法指定的所有者的位置。这两个属性都可以设置为 <codeph>CalloutPosition.AUTO</codeph>，该值基于屏幕的高宽比为标注选择一个合适位置，使其与所有者的重叠最小，在屏幕边界的调整也最小。</p>
   <p>一旦定位后，标注会将箭头放置在与所有者相邻的一边，尽可能居中并接近所有者的水平或垂直中心。如果标注的位置与任何边缘都不相邻，则箭头会隐藏。</p>
   <p>您不创建一个标注容器作为其父容器的正常布局的一部分。相反，它作为其父项上面的一个弹出容器出现。因此，您不必在应用程序的 MXML 代码中直接创建它。</p>
   <p>而应经常在单独的 MXML 文件中创建它作为 MXML 组件。要显示该组件，请先创建 MXML 组件的实例，然后调用 <codeph>open()</codeph> 方法。您还可以在打开组件时设置其大小和位置。</p>
   <p>要关闭该组件，请调用 <codeph>close()</codeph> 方法。如果弹出窗口需要将数据传递回处理程序，您可以为 <codeph>PopUp.CLOSE</codeph> 事件添加事件侦听器，并在 <codeph>close()</codeph> 方法中指定返回数据。</p>
   <p>标注最初处于其<codeph>关闭</codeph>外观状态。打开它时，会作为弹出窗口添加到 PopUpManager，并过渡到 <codeph>normal</codeph> 外观状态。要定义打开和关闭动画，请在 <codeph>closed</codeph> 和 <codeph>normal</codeph> 外观状态之间配合使用自定义外观和过渡。</p>
 
  <p>标注从顶级应用程序继承样式，而不同于在 Flex 组件中存在的默认继承行为。这可以防止标注的内容无意中从所有者（例如按钮或 TextInput）继承样式（在这种情况下，其预期行为是继承默认外观）。</p>
   <p>标注容器具有以下默认特性：</p>
     <adobetable class="innertable">
     
     
     
     
     
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row><entry>默认大小</entry><entry>大小足以显示其子代</entry></row><row><entry>最小大小</entry><entry>0 个像素</entry></row><row><entry>最大大小</entry><entry>10000 个像素宽 × 10000 个像素高</entry></row><row><entry>默认外观类</entry><entry>spark.skins.mobile.CalloutSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="CalloutExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#CalloutButton"><linktext>spark.components.CalloutButton</linktext></link><link href="" invalidHref="spark.skins.mobile.CalloutSkin.xml"><linktext>spark.skins.mobile.CalloutSkin</linktext></link><link href="spark.components.xml#ContentBackgroundAppearance"><linktext>spark.components.ContentBackgroundAppearance</linktext></link><link href="spark.components.xml#CalloutPosition"><linktext>spark.components.CalloutPosition</linktext></link></related-links><apiConstructor id="spark.components:Callout:Callout"><apiName>Callout</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
           </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Callout:protected:updateSkinDisplayList"><apiName>updateSkinDisplayList</apiName><shortdesc>
      设置箭头的边界，这些箭头的几何图形不是完全由外观的布局指定的。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      设置<codeph>箭头</codeph>的边界，其几何形状不由外观的布局完全指定。
           <p>子类可以覆盖此方法以基于计算的 <codeph>arrowDirection</codeph> 来更新箭头的大小、位置和可见性。</p>
           <p>默认情况下，此方法使用 <codeph>arrow</codeph> 边界和 <codeph>owner</codeph> 边界中较短的值来对齐箭头。此实现假定<codeph>箭头</codeph>和标注外观共享相同的坐标空间。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:Callout:protected:actualHorizontalPosition:get"><apiName>actualHorizontalPosition</apiName><shortdesc>
      在计算 CalloutPosition.AUTO 后完全解析的水平位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      在计算 CalloutPosition.AUTO 后完全解析的水平位置。
     
      <p>当显式 <codeph>horizontalPosition</codeph> 为 CalloutPosition.AUTO 时，在 <codeph>commitProperties()</codeph> 中更新此属性。<codeph/></p> 
      
      <p>在计算 <codeph>arrowDirection</codeph>、<codeph>updateSkinDisplayList()</codeph> 中的箭头位置时，子类应该读取此属性。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Callout:protected:actualVerticalPosition:get"><apiName>actualVerticalPosition</apiName><shortdesc>
      在计算 CalloutPosition.AUTO 后完全解析的垂直位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      在计算 CalloutPosition.AUTO 后完全解析的垂直位置。
     
      <p>当显式 <codeph>verticalPosition</codeph> 为 CalloutPosition.AUTO 时，在 <codeph>commitProperties()</codeph> 中更新此属性。<codeph/></p> 
      
      <p>在计算 <codeph>arrowDirection</codeph>、<codeph>updateSkinDisplayList()</codeph> 中的箭头位置时，子类应该读取此属性。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Callout:arrowDirection:get"><apiName>arrowDirection</apiName><shortdesc>
      指示从标注指向所有者的方向的只读属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/><apiDefaultValue>none
           </apiDefaultValue></apiValueDef><apiDesc>
      指示从标注指向所有者的方向的只读属性。
           <p>此值根据由 <codeph>horizontalPosition</codeph> 和 <codeph>verticalPosition</codeph> 给出的标注位置来计算。外部位置和内部位置都将从标注指向所有者的边缘。边角位置和绝对中心位置都不受支持，将返回值<codeph>“none”</codeph>。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ArrowDirection"><linktext>spark.components.ArrowDirection</linktext></link></related-links></apiValue><apiValue id="spark.components:Callout:horizontalPosition:get"><apiName>horizontalPosition</apiName><shortdesc>
      相对于所有者的标注水平位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>CalloutPosition.AUTO
      </apiDefaultValue></apiValueDef><apiDesc>
      相对于所有者的标注水平位置。
           <p>可能的值为<codeph>“before”</codeph>、<codeph>“start”</codeph>、<codeph>“middle”</codeph>、<codeph>“end”</codeph>、<codeph>“after”</codeph>以及<codeph>“auto”</codeph>（默认值）。</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#CalloutPosition"><linktext>spark.components.CalloutPosition</linktext></link></related-links></apiValue><apiValue id="spark.components:Callout:verticalPosition:get"><apiName>verticalPosition</apiName><shortdesc>
      相对于所有者的标注垂直位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>CalloutPosition.AUTO
      </apiDefaultValue></apiValueDef><apiDesc>
      相对于所有者的标注垂直位置。
           <p>可能的值为<codeph>“before”</codeph>、<codeph>“start”</codeph>、<codeph>“middle”</codeph>、<codeph>“end”</codeph>、<codeph>“after”</codeph>以及<codeph>“auto”</codeph>（默认值）。</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#CalloutPosition"><linktext>spark.components.CalloutPosition</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:ViewMenu"><apiName>ViewMenu</apiName><shortdesc>
  ViewMenu 容器定义 View 容器中的菜单。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="disabledAndLandscape" owner="spark.components:ViewMenu" playerVersion="AIR2.5">
<description>
  已禁用的横向状态。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="closedAndLandscape" owner="spark.components:ViewMenu" playerVersion="AIR2.5">
<description>
  已关闭的横向状态。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="normalAndLandscape" owner="spark.components:ViewMenu" playerVersion="AIR2.5">
<description>
  正常的横向状态。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="items"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components:SkinnablePopUpContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  ViewMenu 容器定义 View 容器中的菜单。每个菜单项都使用 ViewMenuItem 控件进行定义。用户按设备的菜单按钮时，应用程序容器会自动创建并显示 ViewMenu 容器。还可以使用 <codeph>ViewNavigatorApplicationBase.viewMenuOpen</codeph> 属性通过编程方式打开菜单。
 
  <p/>
 
 <p>
  <adobeimage alt="" href="../../images/vm_open_menu_vm.png"/>
 </p>
 
  <p>ViewMenuLayout 类定义菜单的布局。或者，可以创建自己的自定义布局类。</p>
 
  <p>使用 <codeph>View.viewMenuItems</codeph> 属性定义菜单项，如下例所示：</p>
  
  <pre>
  &lt;s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
      xmlns:s="library://ns.adobe.com/flex/spark" 
      title="Home"> 
 
    ...
 
    &lt;s:viewMenuItems> 
        &lt;s:ViewMenuItem label="Add" click="itemClickInfo(event);"/> 
        &lt;s:ViewMenuItem label="Cancel" click="itemClickInfo(event);"/> 
        &lt;s:ViewMenuItem label="Delete" click="itemClickInfo(event);"/> 
        &lt;s:ViewMenuItem label="Edit" click="itemClickInfo(event);"/> 
        &lt;s:ViewMenuItem label="Search" click="itemClickInfo(event);"/> 
    &lt;/s:viewMenuItems>
 
  &lt;/s:View>
  </pre>
 
  <p>请注意，不要在 MXML 中显式定义 ViewMenu 容器。ViewMenu 容器会自动创建，以包含 ViewMenuItem 控件。</p>
  
  </apiDesc><example conref="ViewMenuExampleHome.mxml"/><example conref="ViewMenuExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#ViewMenuItem"><linktext>spark.components.ViewMenuItem</linktext></link><link href="spark.layouts.xml#ViewMenuLayout"><linktext>spark.layouts.ViewMenuLayout</linktext></link><link href="spark.components.supportClasses.xml#ViewNavigatorApplicationBase"><linktext>spark.components.supportClasses.ViewNavigatorApplicationBase</linktext></link><link href="" invalidHref="spark.skins.mobile.ViewMenuSkin.xml"><linktext>spark.skins.mobile.ViewMenuSkin</linktext></link></related-links><apiConstructor id="spark.components:ViewMenu:ViewMenu"><apiName>ViewMenu</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ViewMenu:caretIndex:get"><apiName>caretIndex</apiName><shortdesc>
      当前处于插入标记状态的菜单项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      当前处于插入标记状态的菜单项。值 -1 表示没有项目处于插入标记状态。  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewMenu:items:get"><apiName>items</apiName><shortdesc>
      要显示在 ViewMenu 容器中的 ViewMenuItem 控件的矢量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components:ViewMenuItem"/></apiValueDef><apiDesc>
      要显示在 ViewMenu 容器中的 ViewMenuItem 控件的矢量。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TabbedViewNavigator"><apiName>TabbedViewNavigator</apiName><shortdesc>
  TabbedViewNavigator 类是管理视图导航器容器集合的容器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="tabBar" owner="spark.components:TabbedViewNavigator" playerVersion="AIR2.5" required="false" var_type="spark.components.supportClasses:ButtonBarBase">
<description>
      定义导航器选项卡栏的外观部件。 
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the tab bar of the navigator.</shortdesc></SkinPart></skinParts></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ISelectableList</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  TabbedViewNavigator 类是管理视图导航器容器集合的容器。一次仅一个视图导航器处于活动状态并可见。该类包含用来在视图导航器集合间切换的 TabBar 控件。  
   <p/>
  <p>
  <adobeimage alt="" href="../../images/tvn_sections_with_ab_tvn.png"/>
 </p>
   <p>TabbedViewNavigatorApplication 容器为整个应用程序自动创建单个 TabbedViewNavigator 容器。您可以通过使用 TabbedViewNavigatorApplication 容器的 <codeph>navigator</codeph> 属性引用 TabbedViewNavigator 对象。</p>
 
  <p>通过单击 TabBar 中相应的选项卡或更改组件的 <codeph>selectedIndex</codeph> 属性，可以更改活动的或选定的导航器。</p>
 
  <p>停用子视图导航器时，其内容会受到破坏；激活时，会动态创建其内容。</p>  
 
  </apiDesc><example conref="TabbedViewNavigatorExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#View"><linktext>spark.components.View</linktext></link><link href="spark.components.xml#ViewNavigator"><linktext>spark.components.ViewNavigator</linktext></link><link href="" invalidHref="spark.components.TabBar.xml"><linktext>spark.components.TabBar</linktext></link></related-links><adobeApiEvent id="spark.components:TabbedViewNavigator_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  当视图导航器的选定索引发生更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当视图导航器的选定索引发生更改时分派。分派该事件时，<codeph>selectedIndex</codeph> 和 <codeph>selectedNavigator</codeph> 属性引用新选择的视图导航器。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TabbedViewNavigator_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  当 TabbedViewNavigator 管理的视图导航器集合发生更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 TabbedViewNavigator 管理的视图导航器集合发生更改时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TabbedViewNavigator_spark.events.IndexChangeEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  当选择的视图导航器发生更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当选择的视图导航器发生更改时分派。取消该事件后能防止活动视图导航器发生更改。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TabbedViewNavigator_spark.events.IndexChangeEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  由于 selectedIndex 属性或在 TabBar 控件中选定选项卡发生改变，而使当前视图导航器发生更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  由于 <codeph>selectedIndex</codeph> 属性或在 TabBar 控件中选定选项卡发生改变，而使当前视图导航器发生更改时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:TabbedViewNavigator:TabbedViewNavigator"><apiName>TabbedViewNavigator</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:TabbedViewNavigator:addItemAt"><apiName>addItemAt</apiName><shortdesc>
      在指定的索引处添加视图导航器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果索引小于 0 或大于长度
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>要添加的视图导航器。它必须扩展 <codeph>ViewNavigatorBase</codeph> 类。
           </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>要放置项目的索引位置。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      在指定的索引处添加视图导航器。原先位于此索引之后的任意视图导航器将向下移动一个位置。  
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ViewNavigatorBase"><linktext>spark.components.supportClasses.ViewNavigatorBase</linktext></link></related-links></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:addItem"><apiName>addItem</apiName><shortdesc>
      将指定的视图导航器添加到列表末尾。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>要添加的视图导航器。它必须扩展 <codeph>ViewNavigatorBase</codeph> 类。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      将指定的视图导航器添加到列表末尾。等效于调用 <codeph>addItemAt(item, length);</codeph>。 
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ViewNavigatorBase"><linktext>spark.components.supportClasses.ViewNavigatorBase</linktext></link></related-links></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:protected:createTabBarHideEffect"><apiName>createTabBarHideEffect</apiName><shortdesc>
      创建隐藏 TabBar 控件时播放的效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>隐藏 TabBar 控件时播放的效果。
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn></apiOperationDef><apiDesc>
      创建隐藏 TabBar 控件时播放的效果。生成的效果用于设置导航器的 TabBar 和内容组的动画。
     
      <p>TabbedViewNavigator 预计，在运行该效果后，TabBar 的 <codeph>includeInLayout</codeph> 和 <codeph>visible</codeph> 属性为 <codeph>false</codeph>。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:protected:createTabBarShowEffect"><apiName>createTabBarShowEffect</apiName><shortdesc>
      创建显示 TabBar 控件时播放的效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>出现 TabBar 控件时播放的效果。
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn></apiOperationDef><apiDesc>
      创建显示 TabBar 控件时播放的效果。生成的效果用于设置导航器的 TabBar 和内容组的动画。
     
      <p>TabbedViewNavigator 预计，在运行该效果后，TabBar 的 <codeph>includeInLayout</codeph> 和 <codeph>visible</codeph> 属性为 <codeph>true</codeph>。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:getItemAt"><apiName>getItemAt</apiName><shortdesc>
      获取位于指定索引处的视图导航器对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果 index &lt; 0 或 index >= length
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>在指定索引处的导航器；如果没有导航器，则为 null。
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>要从中检索项目的列表中的索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>指示当该项不是本地项时，在请求期间要提取的项的方向和数量。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      获取位于指定索引处的视图导航器对象。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:getItemIndex"><apiName>getItemIndex</apiName><shortdesc>
      如果视图导航器位于视图导航器列表中，则返回视图导航器索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>该视图导航器的索引；如果该项不在列表中，则为 -1。
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>要定位的视图导航器对象。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果视图导航器位于视图导航器列表中，则返回视图导航器索引。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:hideTabBar"><apiName>hideTabBar</apiName><shortdesc>
      隐藏导航器的选项卡栏。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>animate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>指示选项卡栏消失时是否播放隐藏效果。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      隐藏导航器的选项卡栏。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      通知外部组件视图导航器上的属性已更新。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>已更新的视图导航器。
           </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>指定已更新属性的 String、QName 或 int。
           </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>该属性的旧值。如果属性为 null，则它可以是该项的旧值。
           </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>该属性的新值。如果属性为 null，则无需指定它，因为已假定该项为新值。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      通知外部组件视图导航器上的属性已更新。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:removeAll"><apiName>removeAll</apiName><shortdesc>
      从导航器中删除所有子视图导航器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      从导航器中删除所有子视图导航器。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:removeItemAt"><apiName>removeItemAt</apiName><shortdesc>
      删除指定索引处的视图导航器并返回该索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果 index &lt; 0 或 index >= length。
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>被删除的项目。
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>要从中删除项目的索引。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      删除指定索引处的视图导航器并返回该索引。原先位于此索引之后的任意项索引将降低一个位置。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:setItemAt"><apiName>setItemAt</apiName><shortdesc>
      在指定的索引处添加视图导航器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果索引小于 0 或大于等于 length
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>已替换的导航器；如果没有导航器，则为 null。
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>要置于索引处的视图导航器。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>要在其位置放置导航器的索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      在指定的索引处添加视图导航器。如果此索引处已存在某一项，新项将替代该项，并返回该项。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:showTabBar"><apiName>showTabBar</apiName><shortdesc>
      显示导航器的选项卡栏
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>animate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>指示选项卡栏显示时是否播放显示效果。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      显示导航器的选项卡栏
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:toArray"><apiName>toArray</apiName><shortdesc>
      返回与 IList 实现的填充顺序相同的 Array。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>数组。
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      返回与 IList 实现的填充顺序相同的 Array。 
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:TabbedViewNavigator:length:get"><apiName>length</apiName><shortdesc>
      该组件正在管理的子视图导航器数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      该组件正在管理的子视图导航器数。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TabbedViewNavigator:navigators:get"><apiName>navigators</apiName><shortdesc>
      TabbedViewNavigator 管理的视图导航器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components.supportClasses:ViewNavigatorBase"/></apiValueDef><apiDesc>
      TabbedViewNavigator 管理的视图导航器。每个视图导航器表示为在该 TabbedViewNavigator 的选项卡栏中的一个选项卡。一次仅一个视图导航器可处于活动状态。您可以通过使用 <codeph>selectedNavigator</codeph> 属性来引用活动视图导航器。
     
      <p>如果更改该属性，会导致删除当前视图导航器，并将 <codeph>selectedIndex</codeph> 设置为 0。该操作无法取消，且会立即提交。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TabbedViewNavigator:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      所选视图导航器的以零开始的索引；如果未选择任何导航器，则为 -1。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      所选视图导航器的以零开始的索引；如果未选择任何导航器，则为 -1。设置 <codeph>selectedIndex</codeph> 属性会取消选择当前选定的导航器，并选择指定索引位置的导航器。
           <p>该值始终在 -1 和 (<codeph>navigators.length</codeph> - 1) 之间。如果从组件删除低于 <codeph>selectedIndex</codeph> 的索引位置的项目，则会相应地向下调整选定的索引。</p>
           <p>如果已删除选定项目，则将选定索引设置为：</p>
           <ul>
        <li>如果没有剩余项目，则为 -1。</li>
        <li>如果至少有一个项目，则为 <codeph>selectedIndex</codeph> - 1。</li>
      </ul>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TabbedViewNavigator:selectedNavigator:get"><apiName>selectedNavigator</apiName><shortdesc>
      TabbedViewNavigator 的选定视图导航器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components.supportClasses:ViewNavigatorBase</apiValueClassifier></apiValueDef><apiDesc>
      TabbedViewNavigator 的选定视图导航器。一次仅一个视图导航器可处于活动状态。活动视图导航器可以通过更改 <codeph>selectedIndex</codeph> 属性或在 TabBar 控件中选择选项卡来设置。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ContentBackgroundAppearance"><apiName>ContentBackgroundAppearance</apiName><shortdesc>
  ContentBackgroundAppearance 类为标注的 contentBackgroundAppearance 样式的允许值定义常量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ContentBackgroundAppearance 类为标注的 <codeph>contentBackgroundAppearance</codeph> 样式的允许值定义常量。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Callout/style:contentBackgroundAppearance"><linktext>spark.components.Callout.contentBackgroundAppearance</linktext></link></related-links><apiValue id="spark.components:ContentBackgroundAppearance:FLAT"><apiName>FLAT</apiName><shortdesc>
      对 contentGroup 应用蒙版。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>flat</apiData><apiType value="String"/></apiValueDef><apiDesc>
      对 contentGroup 应用蒙版。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ContentBackgroundAppearance:INSET"><apiName>INSET</apiName><shortdesc>
      对 contentGroup 应用阴影和蒙版。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>inset</apiData><apiType value="String"/></apiValueDef><apiDesc>
      对 contentGroup 应用阴影和蒙版。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ContentBackgroundAppearance:NONE"><apiName>NONE</apiName><shortdesc>
      禁用 contentBackgroundColor 样式和 contentGroup 掩蔽。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
      禁用 <codeph>contentBackgroundColor</codeph> 样式和 contentGroup 掩蔽。当标注的内容应当直接出现在 <codeph>backgroundColor</codeph> 的顶部或该内容提供自己的掩蔽时，使用此值。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ActionBarDefaultButtonAppearance"><apiName>ActionBarDefaultButtonAppearance</apiName><shortdesc>
  ActionBarDefaultButtonAppearance 类为 ActionBar 的 defaultButtonAppearance 样式所允许的值定义常量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ActionBarDefaultButtonAppearance 类为 ActionBar 的 <codeph>defaultButtonAppearance</codeph> 样式所允许的值定义常量。
  
  </apiDesc></apiClassifierDetail><apiValue id="spark.components:ActionBarDefaultButtonAppearance:BEVELED"><apiName>BEVELED</apiName><shortdesc>
      指定用于导航和操作内容组中的按钮的、有斜面且不透明的按钮外观。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>beveled</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指定用于导航和操作内容组中的按钮的、有斜面且不透明的按钮外观。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ActionBarDefaultButtonAppearance:NORMAL"><apiName>NORMAL</apiName><shortdesc>
      指定用于导航和操作内容组中的按钮的透明按钮外观。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指定用于导航和操作内容组中的按钮的透明按钮外观。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:View"><apiName>View</apiName><shortdesc>
  View 类是视图导航器使用的所有视图的容器基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><Exclude kind="property" name="z"/><Exclude kind="property" name="scaleZ"/><Exclude kind="property" name="scaleY"/><Exclude kind="property" name="scaleX"/><Exclude kind="property" name="maxWidth"/><Exclude kind="property" name="minWidth"/><Exclude kind="property" name="width"/><Exclude kind="property" name="maxHeight"/><Exclude kind="property" name="minHeight"/><Exclude kind="property" name="height"/><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:View&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:View
   <strong>Properties</strong>
    actionBarVisible="true"
    actionContent="null"
    actionLayout="null"
    data="null"
    destructionPolicy="auto"
    navigationContent="null"
    navigationLayout="null"
    overlayControls="false"
    tabBarVisible="true"
    title=""
    titleContent="null"
    titleLayout="null"
    viewMenuItems="null"
 
   <strong>Events</strong>
    backKeyPressed="<i>No default</i>"
    dataChange="<i>No default</i>"
    menuKeyPressed="<i>No default</i>"
    removing="<i>No default</i>"
    viewActivate="<i>No default</i>"
    viewDeactivate="<i>No default</i>"
 
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  View 类是视图导航器使用的所有视图的容器基类。View 容器扩展 Group 容器并添加用于与其父导航器通信的其它属性。
   <p>在手机应用程序中，应用程序的内容区域显示组成应用程序的各个屏幕或视图。用户通过使用触摸屏、在应用程序中构建的组件和手机设备的输入控件来导航应用程序的视图。</p>
   <p/>
  <p>
  <adobeimage alt="" href="../../images/vn_single_section_home_vn.png"/>
 </p>
   <p>应用程序中每个视图对应于在 ActionScript 或 MXML 文件中定义 View 容器。每个 View 包含用于指定与该视图相关联的数据的 <codeph>data</codeph> 属性。用户导航应用程序时，视图可以使用 <codeph>data</codeph> 属性来互相传递信息。</p>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ViewNavigator"><linktext>ViewNavigator</linktext></link></related-links><adobeApiEvent id="spark.components:View_spark.events.ViewNavigatorEvent.REMOVING_removing"><apiName>removing</apiName><shortdesc>
  在要删除屏幕以响应屏幕更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ViewNavigatorEvent.REMOVING</apiEventType><adobeApiEventClassifier>spark.events.ViewNavigatorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在要删除屏幕以响应屏幕更改时分派。处理此事件时调用 <codeph>preventDefault()</codeph> 将取消屏幕更改。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_spark.events.ViewNavigatorEvent.VIEW_DEACTIVATE_viewDeactivate"><apiName>viewDeactivate</apiName><shortdesc>
  在取消激活当前视图时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ViewNavigatorEvent.VIEW_DEACTIVATE</apiEventType><adobeApiEventClassifier>spark.events.ViewNavigatorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在取消激活当前视图时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_spark.events.ViewNavigatorEvent.VIEW_ACTIVATE_viewActivate"><apiName>viewActivate</apiName><shortdesc>
  在激活当前视图时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ViewNavigatorEvent.VIEW_ACTIVATE</apiEventType><adobeApiEventClassifier>spark.events.ViewNavigatorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在激活当前视图时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_mx.events.FlexEvent.MENU_KEY_PRESSED_menuKeyPressed"><apiName>menuKeyPressed</apiName><shortdesc>
  如果视图存在于手机应用程序内，则按菜单键时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.MENU_KEY_PRESSED</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  如果视图存在于手机应用程序内，则按菜单键时分派。
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  当 data 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 <codeph>data</codeph> 属性更改时进行分派。
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_mx.events.FlexEvent.BACK_KEY_PRESSED_backKeyPressed"><apiName>backKeyPressed</apiName><shortdesc>
  如果视图存在于手机应用程序内，则按返回键时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.BACK_KEY_PRESSED</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  如果视图存在于手机应用程序内，则按返回键时分派。
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:View:View"><apiName>View</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:View:createReturnObject"><apiName>createReturnObject</apiName><shortdesc>
      该视图从导航器堆栈弹出时，创建返回至视图导航器的对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>写入 <codeph>ViewNavigator.poppedViewReturnedObject</codeph> 属性的 <codeph>object</codeph> 字段的值。  
           </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      该视图从导航器堆栈弹出时，创建返回至视图导航器的对象。
           <p>当该视图从堆栈弹出时，在 View 中覆盖该方法，以将数据返回新视图。<codeph>createReturnObject()</codeph> 方法返回单个 Object。通过该方法返回的 Object 会写入 <codeph>ViewNavigator.poppedViewReturnedObject</codeph> 属性。 </p>
           <p><codeph>ViewNavigator.poppedViewReturnedObject</codeph> 属性属于 ViewReturnObject 类型。<codeph>ViewReturnObject.object</codeph> 属性包含该方法返回的值。 </p>
           <p>如果 <codeph>poppedViewReturnedObject</codeph> 属性为 null，则不会返回数据。<codeph>poppedViewReturnedObject</codeph> 属性在新视图接收到 <codeph>add</codeph> 事件前，必须在新视图中进行设置。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#ViewNavigator/poppedViewReturnedObject"><linktext>ViewNavigator.poppedViewReturnedObject</linktext></link><link href="spark.components.supportClasses.xml#ViewReturnObject"><linktext>spark.components.supportClasses.ViewReturnObject</linktext></link></related-links></apiOperation><apiOperation id="spark.components:View:deserializeData"><apiName>deserializeData</apiName><shortdesc>
      反序列化通过视图保存至磁盘的数据对象，通常通过调用 serializeData() 方法来实现。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定给视图的 <codeph>data</codeph> 属性的值。
          
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>要反序列化的数据对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      反数据化通过视图保存至磁盘的数据对象，通常通过调用 <codeph>serializeData()</codeph> 方法来实现。  
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:View:getCurrentViewState"><apiName>getCurrentViewState</apiName><shortdesc>
      检查舞台的高宽比，并返回视图应更改为的适当状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定要应用于视图的状态名称的字符串。可能返回值为 <codeph>"portrait"</codeph> 或 <codeph>"landscape"</codeph>。仅当视图上存在所需的状态时才更改状态。如果不存在所需状态，该方法返回组件的当前状态。
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      检查舞台的高宽比，并返回视图应更改为的适当状态。  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:View:serializeData"><apiName>serializeData</apiName><shortdesc>
      用来在视图持久保存到磁盘时序列化视图的 data 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>序列化的数据对象。
     
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      用来在视图持久保存到磁盘时序列化视图的 <codeph>data</codeph> 属性。返回的对象应该可以成功写入到共享对象。默认情况下，该方法返回视图的 <codeph>data</codeph> 属性。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:View:actionBarVisible:get"><apiName>actionBarVisible</apiName><shortdesc>
      指示视图是否应显示操作栏。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      指示视图是否应显示操作栏。该属性不需要与视图导航器的 ActionBar 控件的 <codeph>visible</codeph> 属性相关联。 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:actionContent:get"><apiName>actionContent</apiName><shortdesc conref="ActionBar#actionContent">
      该属性覆盖 ActionBar、ViewNavigator 和 ViewNavigatorApplication 组件中的 actionContent 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionContent">
      该属性覆盖 ActionBar、ViewNavigator 和 ViewNavigatorApplication 组件中的 <codeph>actionContent</codeph> 属性。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionContent"><linktext>ActionBar.actionContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:View:actionLayout:get"><apiName>actionLayout</apiName><shortdesc conref="ActionBar#actionLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:data:get"><apiName>data</apiName><shortdesc>
      与当前视图相关联的数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      与当前视图相关联的数据。视图推送至导航器的堆栈时，您可以使用该属性来将信息传递至视图。您可以通过将 <codeph>data</codeph> 参数传递至 <codeph>pushView()</codeph> 方法，设置该属性。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:destructionPolicy:get"><apiName>destructionPolicy</apiName><shortdesc>
      定义在删除此视图时视图的导航器应使用的破坏策略。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>auto
     
      </apiDefaultValue></apiValueDef><apiDesc>
      定义在删除此视图时视图的导航器应使用的破坏策略。如果设置为“auto”，则导航器将在视图处于非活动状态时破坏视图。如果设置为“never”，则将在内存中缓存视图。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:isActive:get"><apiName>isActive</apiName><shortdesc>
      指示当前视图是否是活动的。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      指示当前视图是否是活动的。视图的导航器根据状态变化自动将该标志设置为 <codeph>true</codeph> 或 <codeph>false</codeph>。设置该属性后，可以分派 <codeph>viewActivate</codeph> 或 <codeph>viewDeactivate</codeph> 事件。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:navigationContent:get"><apiName>navigationContent</apiName><shortdesc conref="ActionBar#navigationContent">
      该属性覆盖 ActionBar、ViewNavigator 和 ViewNavigatorApplication 组件中的 navigationContent 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationContent">
      该属性覆盖 ActionBar、ViewNavigator 和 ViewNavigatorApplication 组件中的 <codeph>navigationContent</codeph> 属性。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationContent"><linktext>ActionBar.navigationContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:View:navigationLayout:get"><apiName>navigationLayout</apiName><shortdesc conref="ActionBar#navigationLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:navigator:get"><apiName>navigator</apiName><shortdesc>
     该视图所位于的视图导航器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="navigatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:ViewNavigator</apiValueClassifier></apiValueDef><apiDesc>
     该视图所位于的视图导航器。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:overlayControls:get"><apiName>overlayControls</apiName><shortdesc>
      默认情况下，由手机应用程序的 TabBar 和 ActionBar 控件定义无法由应用程序视图使用的区域。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      默认情况下，由手机应用程序的 TabBar 和 ActionBar 控件定义无法由应用程序视图使用的区域。这表示，内容无法使用手机设备的全屏大小。如果将此属性设置为 <codeph>true</codeph>，则应用程序的内容区域会延展屏幕的整个宽度和高度。ActionBar 和 TabBar 控件将悬停在内容区域之上，其 <codeph>alpha</codeph> 值为 0.5，因此呈半透明状态。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:tabBarVisible:get"><apiName>tabBarVisible</apiName><shortdesc>
      指示视图是否应显示选项卡栏。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      指示视图是否应显示选项卡栏。该属性不需要与导航器的 TabBar 控件的 <codeph>visible</codeph> 属性相关联。 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:titleContent:get"><apiName>titleContent</apiName><shortdesc conref="ActionBar#titleContent">
      该属性覆盖 ActionBar、ViewNavigator 和 ViewNavigatorApplication 组件中的 titleContent 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleContent">
      该属性覆盖 ActionBar、ViewNavigator 和 ViewNavigatorApplication 组件中的 <codeph>titleContent</codeph> 属性。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>ActionBar.titleContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:View:titleLayout:get"><apiName>titleLayout</apiName><shortdesc conref="ActionBar#titleLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:title:get"><apiName>title</apiName><shortdesc conref="ActionBar#title">
      该属性覆盖 ActionBar、ViewNavigator 和 ViewNavigatorApplication 组件中的 title 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#title">
      该属性覆盖 ActionBar、ViewNavigator 和 ViewNavigatorApplication 组件中的 <codeph>title</codeph> 属性。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:viewMenuItems:get"><apiName>viewMenuItems</apiName><shortdesc>
      该视图为活动视图时传递给 ViewMenu 的 ViewMenuItem 对象的矢量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components:ViewMenuItem"/></apiValueDef><apiDesc>
      该视图为活动视图时传递给 ViewMenu 的 ViewMenuItem 对象的矢量。 
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ViewMenu"><linktext>ViewMenu</linktext></link><link href="spark.components.xml#ViewMenuItem"><linktext>ViewMenuItem</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:ArrowDirection"><apiName>ArrowDirection</apiName><shortdesc>
  枚举要在可视组件中使用的箭头方向。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  枚举要在可视组件中使用的箭头方向。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Callout/arrowDirection"><linktext>spark.components.Callout.arrowDirection</linktext></link></related-links><apiValue id="spark.components:ArrowDirection:DOWN"><apiName>DOWN</apiName><shortdesc>
      箭头指向下。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>down</apiData><apiType value="String"/></apiValueDef><apiDesc>
      箭头指向下。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ArrowDirection:LEFT"><apiName>LEFT</apiName><shortdesc>
      箭头指向左。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
      箭头指向左。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ArrowDirection:NONE"><apiName>NONE</apiName><shortdesc>
      没有箭头方向。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
      没有箭头方向。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ArrowDirection:RIGHT"><apiName>RIGHT</apiName><shortdesc>
      箭头指向右。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
      箭头指向右。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ArrowDirection:UP"><apiName>UP</apiName><shortdesc>
      箭头指向上。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>up</apiData><apiType value="String"/></apiValueDef><apiDesc>
      箭头指向上。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:BusyIndicator"><apiName>BusyIndicator</apiName><shortdesc>
  BusyIndicator 定义执行相当耗时的操作时要显示的组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:BusyIndicator" playerVersion="AIR2.5" theme="spark,mobile" type="uint">
<description>
  微调框的微调格的颜色。
   
  </description>
<default>0x000000
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="rotationInterval" owner="spark.components:BusyIndicator" playerVersion="AIR2.5" type="Number">
<description>
  该组件的旋转间要延迟的时间间隔，以毫秒为单位。控制该组件的微调速度。 
 
  </description>
<default>50
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
   
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:BusyIndicator&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:BusyIndicator
    <strong>Common Styles</strong>
    rotationInterval=50
 
    <strong>Spark Styles</strong>
    symbolColor="0x000000"
  
    <strong>Mobile Styles</strong>
    symbolColor="0x000000"
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  BusyIndicator 定义执行相当耗时的操作时要显示的组件。该组件会创建含有 12 个微调格的微调框。<codeph>symbolColor</codeph> 样式的值控制微调格的颜色。该组件的透明度可以使用 <codeph>alpha</codeph> 属性进行修改，但每个微调格的 alpha 值无法修改。
   <p/>
  <p>
  <adobeimage alt="" href="../../images/bi_busy_indicator_bi.png"/>
 </p>
 
  <p><codeph>rotationInterval</codeph> 样式控制该组件的微调速度。<codeph>rotationInterval</codeph> 样式设置旋转间的延迟时间间隔，以毫秒为单位。减小 <codeph>rotationInterval</codeph> 值可提高微调速度。</p>
 
  <p>BusyIndicator 具有下列默认特征：</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row><entry>默认大小</entry><entry>160 DPI: 26x26 像素 240 DPI: 40x40 像素 320 DPI: 52x52 像素</entry></row><row><entry>最小大小</entry><entry>20x20 像素</entry></row><row><entry>最大大小</entry><entry>无限制</entry></row></tbody></tgroup></adobetable>
  
  <p>BusyIndicator 的微调框直径是组件宽度和高度的最小值。直径必须是偶数，如果它设置为奇数，会减去一。</p>
 
  </apiDesc><example conref="BusyIndicatorExample.mxml"/><example conref="BusyIndicatorExampleHomeView.mxml"/></apiClassifierDetail><apiConstructor id="spark.components:BusyIndicator:BusyIndicator"><apiName>BusyIndicator</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:ActionBar"><apiName>ActionBar</apiName><shortdesc>
  ActionBar 类定义包含标题、导航和操作内容组的组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="titleContentWithActionAndNavigation" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  为 <codeph>titleContent</codeph> 外观部件定义了内容的 ActionBar，并且其组件显示在 <codeph>actionGroup</codeph> 外观部件和 <codeph>navigationGroup</codeph> 外观部件中。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleContentWithNavigation" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  在 <codeph>titleContent</codeph> 外观部件中具有内容的 ActionBar，并且其组件在 <codeph>navigationContent</codeph> 属性中进行了定义以显示在 <codeph>navigationGroup</codeph> 外观部件中。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleContentWithAction" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  在 <codeph>titleContent</codeph> 外观部件中具有内容的 ActionBar，并且其组件在 <codeph>actionContent</codeph> 属性中进行了定义以显示在 <codeph>actionGroup</codeph> 外观部件中。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleContent" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  在 <codeph>titleContent</codeph> 外观部件中具有内容但在 <codeph>titleDisplay</codeph> 外观部件中不具有内容的 ActionBar。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleWithActionAndNavigation" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  为 <codeph>titleDisplay</codeph> 外观部件定义了内容的 ActionBar，并且其组件显示在 <codeph>actionGroup</codeph> 外观部件和 <codeph>navigationGroup</codeph> 外观部件中。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleWithNavigation" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  为 <codeph>titleDisplay</codeph> 外观部件定义了内容的 ActionBar，并且其组件在 <codeph>navigationContent</codeph> 属性中进行了定义以显示在 <codeph>navigationGroup</codeph> 外观部件中。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleWithAction" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  为 <codeph>titleDisplay</codeph> 外观部件定义了内容的 ActionBar，并且其组件在 <codeph>actionContent</codeph> 属性中进行了定义以显示在 <codeph>actionGroup</codeph> 外观部件中。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="title" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  具有 <codeph>titleDisplay</codeph> 外观部件但没有内容的 ActionBar 的基本状态
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style enumeration="normal,beveled" inherit="no" name="defaultButtonAppearance" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="String">
<description>
  导航和操作组中的按钮的外观。有效的 MXML 值为 <codeph>normal</codeph> 和 <codeph>beveled</codeph>。
   <p>在 ActionScript 中，您可以使用下列常量来设置此属性：<codeph>ActionBarDefaultButtonAppearance.NORMAL</codeph> 和 <codeph>ActionBarDefaultButtonAppearance.BEVELED</codeph>。</p>
   </description>
<default>ActionBarDefaultButtonAppearance.NORMAL
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textShadowAlpha" owner="spark.components:ActionBar" playerVersion="AIR1.5" theme="mobile" type="Number">
<description>
  文本阴影的 Alpha。
 
  </description>
<default>0.55
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:ActionBar" playerVersion="AIR1.5" theme="mobile" type="uint">
<description>
  文本阴影的颜色。
 
  </description>
<default>0xFFFFFF
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  上边框与所有内容组之间的像素数目。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  左边框和 actionGroup 之间的像素数目。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  左边框和 navigationGroup 之间的像素数目。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  下边框与所有内容组之间的像素数目。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>
<default>0x70B2EE
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="Number">
<description conref="spark.components.SkinnableContainer#style:contentBackgroundAlpha">
  </description>
<default>1.0
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="Number">
<description conref="spark.components.SkinnableContainer#style:backgroundAlpha">
  </description>
<default>1.0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:accentColor">
  </description>
<default>0x0099FF
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="left,right,center" inherit="no" name="titleAlign" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="String">
<description>
  标题相对于 ActionBar 尺寸的对齐方式。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  </description>
<default>"center"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。与手机主题一起使用时，该属性不能为负数。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  容器内文本的对齐方式。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数组件的默认值为 <codeph>"left"</codeph>。对于 FormItem 组件，默认值为 <codeph>"right"</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>，且仅当将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时，才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  文本行之间附加的垂直空间。
   <p>默认值为 0。</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>normal</codeph> 和 <codeph>bold</codeph>。Button 控件的默认值为 <codeph>bold</codeph>。所有其它控件的默认值为 <codeph>normal</codeph>。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  文本的高度，以像素为单位。在 Halo 主题中，除 ColorPicker 控件外，所有其它控件的默认值均为 10。对于 Halo 主题的 ColorPicker 控件，默认值为 11。在 Spark 主题中，除 ColorPicker 控件外，所有其它控件的默认值均为 12。对于 Spark 主题的 ColorPicker 控件，默认值为 11。Mobile 主题的默认值为 24。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。Halo 主题的默认字体为 <codeph>"Verdana"</codeph>。Spark 主题的默认字体为 <codeph>"Arial"</codeph>。Mobile 主题的默认字体为 <codeph>"_sans"</codeph>。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。Halo 主题的默认值为 <codeph>0x0B333C</codeph>。Spark 主题的默认值为 <codeph>0x000000</codeph>。Mobile 主题的默认值为 <codeph>0xFFFFFF</codeph>。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="navigationGroup" owner="spark.components:ActionBar" playerVersion="AIR2.5" required="false" var_type="spark.components:Group">
<description>
      定义组件导航区域外观的外观部件。默认情况下，ActionBarSkin 类将导航区域定义为显示在标题区域的左侧。
           </description>


	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      navigation area of the component.</shortdesc><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></SkinPart><SkinPart name="titleGroup" owner="spark.components:ActionBar" playerVersion="AIR2.5" required="false" var_type="spark.components:Group">
<description>
      定义组件标题区域外观的外观部件。默认情况下，ActionBarSkin 类将标题区域定义为显示在导航区域和操作区域之间。
           </description>


	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      title area of the component.</shortdesc><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></SkinPart><SkinPart name="actionGroup" owner="spark.components:ActionBar" playerVersion="AIR2.5" required="false" var_type="spark.components:Group">
<description>
      定义组件操作区域外观的外观部件。默认情况下，ActionBarSkin 类将操作区域定义为显示在标题区域的右侧。
           </description>


	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      action area of the component.</shortdesc><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></SkinPart><SkinPart name="titleDisplay" owner="spark.components:ActionBar" playerVersion="AIR2.5" required="false" var_type="spark.core:IDisplayText">
<description>
      定义组件中标题文本外观的外观部件。您可以使用 CSS 以在 ActionBar 的 titleDisplay 外观部件上声明样式，如下例所示：
      
      <pre>
      @namespace s "library://ns.adobe.com/flex/spark"; 
      s|ActionBar #titleDisplay { 
         color:red; 
      }
     </pre>
     
      </description>


	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      title text in the component.</shortdesc><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:ActionBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:ActionBar
   <strong>Properties</strong>
    actionContent="null"
    actionLayout="HorizontalLayout"
    navigationContent="null"
    navigationLayout="HorizontalLayout"
    title=""
    titleContent="null"
    titleLayout="HorizontalLayout"
 
   <strong>Common Styles</strong>
    color="<i>Theme dependent</i>"
    fontFamily="<i>Theme dependent</i>"
    fontSize="<i>Theme dependent</i>"
    fontStyle="normal"
    fontWeight="normal"
    leading="0"
    letterSpacing="0"
    textAlign="center"
    textDecoration="none"
    textIndent="0"
 
   <strong>Mobile Styles</strong>
    accentColor="0x0099FF"
    backgroundAlpha="1.0"
    color="<i>Theme dependent</i>"
    contentBackgroundAlpha="1.0"
    contentBackgroundColor="0xFFFFFF"
    focusColor="0x70B2EE"
    textShadowAlpha="0.55"
    textShadowColor="0xFFFFFF"
    titleAlign="center"
 
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  ActionBar 类定义包含标题、导航和操作内容组的组件。ActionBar 控件为导航和操作控件提供标准区域。它可以定义全局控件（可从应用程序任意位置使用该控件），或定义特定于视图的控件。 
   <p>ActionBar 控件定义三个不同区域： </p>
   <ul>
    <li>导航区域
        <p>包含能使用户导航该部分的组件。例如，您可以在导航区域定义主按钮。使用 <codeph>navigationContent</codeph> 属性定义在导航区域中显示的组件。使用 <codeph>navigationLayout</codeph> 属性定义导航区域的布局。 </p></li>
     <li>标题区域
         <p>包含提供标题文本的字符串或组件。如果您指定组件，则您无法指定标题字符串。使用 <codeph>title</codeph> 属性指定要在标题区域中显示的字符串。使用 <codeph>titleContent</codeph> 属性定义在标题区域中显示的组件。使用 <codeph>titleLayout</codeph> 属性定义标题区域的布局。如果您为 <codeph>titleContent</codeph> 属性指定值，则 ActionBar 外观会忽略 <codeph>title</codeph> 属性。</p></li> 
      <li>操作区域 
         <p>包含用于定义操作（用户可以在视图中执行相应的操作）的组件。例如，您可以将搜索或刷新按钮定义为操作区域的一部分。使用 <codeph>actionContent</codeph> 属性定义在操作区域中显示的组件。使用 <codeph>actionLayout</codeph> 属性定义操作区域的布局。</p></li>
  </ul>
   <p/>
  <p>
  <adobeimage alt="" href="../../images/ab_search_override_ab.png"/>
 </p>
   <p>对于具有一个部分的手机应用程序（意味着一个手机应用程序具有一个 ViewNavigator 容器），所有视图共享相同的操作栏。对于具有多个部分的手机应用程序（意味着一个手机应用程序具有多个 ViewNavigator 容器），每个部分定义其自己的操作栏。</p>
   </apiDesc><example conref="ActionBarExample2.mxml"/><example conref="ActionBarExample3.mxml"/><example conref="ActionBarExampleHomeView.mxml"/></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.SkinnableContainer.xml"><linktext>spark.components.SkinnableContainer</linktext></link><link href="spark.components.xml#ViewNavigator"><linktext>ViewNavigator</linktext></link><link href="spark.components.xml#View"><linktext>视图</linktext></link><link href="spark.components.xml#ViewNavigatorApplication"><linktext>ViewNavigatorApplication</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links><apiConstructor id="spark.components:ActionBar:ActionBar"><apiName>ActionBar</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ActionBar:actionContent:get"><apiName>actionContent</apiName><shortdesc>
      用于定义操作（用户可以在视图中执行相应的操作）的组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      用于定义操作（用户可以在视图中执行相应的操作）的组件。这些组件显示在控件的操作区域中（使用 <codeph>actionGroup</codeph> 外观部件）。 
     
      <p><codeph>actionGroup</codeph> 外观部件的位置和外观由 ActionBarSkin 类确定。默认 ActionBarSkin 类将 <codeph>actionGroup</codeph> 定义为显示在 ActionBar 标题显示区域的右侧。</p>
     
      <p>创建自定义 ActionBarSkin 外观类以更改 <codeph>actionGroup</codeph> 外观部件的默认位置和外观。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link><link href="spark.components.xml#ActionBar/actionLayout"><linktext>actionLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:actionLayout:get"><apiName>actionLayout</apiName><shortdesc>
      定义由 actionGroup 属性定义在操作区域的组件布局。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>HorizontalLayout
           </apiDefaultValue></apiValueDef><apiDesc>
      定义由 <codeph>actionGroup</codeph> 属性定义在操作区域的组件布局。
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionContent"><linktext>actionContent</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:navigationContent:get"><apiName>navigationContent</apiName><shortdesc>
      为用户定义导航的组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      为用户定义导航的组件。这些组件显示在控件的导航区域中，位于 <codeph>navigationGroup</codeph> 外观部件中。 
           <p><codeph>navigationGroup</codeph> 外观部件的位置和外观由 ActionBarSkin 类确定。默认 ActionBarSkin 类将 <codeph>navigationGroup</codeph> 定义为显示在 ActionBar 的 <codeph>titleGroup</codeph> 区域的左侧。</p>
     
      <p>创建自定义外观 ActionBarSkin 外观类以更改 <codeph>navigationGroup</codeph> 外观部件的默认位置和外观。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link><link href="spark.components.xml#ActionBar/navigationLayout"><linktext>navigationLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:navigationLayout:get"><apiName>navigationLayout</apiName><shortdesc>
      定义在 navigationGroup 外观部件中包含的组件布局。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>HorizontalLayout
           </apiDefaultValue></apiValueDef><apiDesc>
      定义在 <codeph>navigationGroup</codeph> 外观部件中包含的组件布局。
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationContent"><linktext>navigationContent</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:titleContent:get"><apiName>titleContent</apiName><shortdesc>
      在控件的标题区域中显示的组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      在控件的标题区域中显示的组件。这些组件显示在 ActionBar 控件的 <codeph>titleGroup</codeph> 外观部件中。
           <p><codeph>titleGroup</codeph> 外观部件的位置和外观由 ActionBarSkin 类确定。默认 ActionBarSkin 类将 <codeph>titleGroup</codeph> 定义为显示在 ActionBar 的中间（利用 <codeph>navigationGroup</codeph> 和 <codeph>actionGroup</codeph> 外观部件之间的剩余空间）。</p>
     
      <p>如果 <codeph>titleContent</codeph> 为 null，将显示 <codeph>titleDisplay</codeph> 外观部件（如果存在），而非 <codeph>titleGroup</codeph> 外观部件。</p> 
     
      <p>创建自定义 ActionBarSkin 外观类以更改 <codeph>titleGroup</codeph> 外观部件的默认位置和外观。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link><link href="spark.components.xml#ActionBar/title"><linktext>title</linktext></link><link href="spark.components.xml#ActionBar/titleLayout"><linktext>titleLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:titleLayout:get"><apiName>titleLayout</apiName><shortdesc>
      定义 titleGroup 和 titleDisplay 外观部件的布局。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>HorizontalLayout
      </apiDefaultValue></apiValueDef><apiDesc>
      定义 <codeph>titleGroup</codeph> 和 <codeph>titleDisplay</codeph> 外观部件的布局。
     
      <p>如果 <codeph>titleContent</codeph> 属性为 null，将显示 <codeph>titleDisplay</codeph> 外观部件，而非 <codeph>titleGroup</codeph> 外观部件。通过使用由 <codeph>titleLayout</codeph> 属性指定的布局类的 <codeph>paddingLeft</codeph> 和 <codeph>paddingRight</codeph> 属性，<codeph>titleDisplay</codeph> 外观部件被定位在 ActionBar 控件的中间。</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>titleContent</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:title:get"><apiName>title</apiName><shortdesc>
      在标题区域中显示的标题或题注。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
           </apiDefaultValue></apiValueDef><apiDesc>
      在标题区域中显示的标题或题注。 
           <p>使用 <codeph>titleContent</codeph> 属性定义在标题区域中显示的组件。如果您为 <codeph>titleContent</codeph> 属性指定值，则 ActionBar 外观会忽略 <codeph>title</codeph> 属性。</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>titleContent</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:TabbedViewNavigatorApplication"><apiName>TabbedViewNavigatorApplication</apiName><shortdesc>
  TabbedViewNavigatorApplication 容器定义具有多个部分的应用程序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="navigators"/><skinParts><SkinPart name="tabbedNavigator" owner="spark.components:TabbedViewNavigatorApplication" playerVersion="AIR2.5" required="false" var_type="spark.components:TabbedViewNavigator">
<description>
      应用程序的主 tabbedNavigator。
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The main tabbedNavigator for the application.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:TabbedViewNavigatorApplication&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:TabbedViewNavigatorApplication
    <strong>Properties</strong>
    navigators="null"
 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorApplicationBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  TabbedViewNavigatorApplication 容器定义具有多个部分的应用程序。TabbedViewNavigatorApplication 容器自动创建 TabbedMobileNavigator 容器。TabbedViewNavigator 容器创建 TabBar 控件以支持应用程序的各个部分之间的导航。
 
  <p>TabbedViewNavigatorApplication 容器仅允许的子代为 ViewNavigator。为应用程序的每个部分定义一个 ViewNavigator。</p> 
 
  <p>TabbedViewNavigatorApplication 容器具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>要占据所有可用屏幕空间的 100% 高和 100% 宽。</entry>
        </row><row>
           <entry>子代布局</entry>
           <entry>通过组成应用程序视图的各个 View 容器来定义。</entry>
        </row><row>
           <entry>滚动条</entry>
           <entry>无。如果您添加滚动条，则用户可以滚动整个应用程序。这包括应用程序的 ActionBar 和 TabBar 区域。因为您通常不需要滚动这些视图区域，所以请将滚动条添加至应用程序的各个相应 View 容器，而不是添加至应用程序容器自身。 </entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.mobile.TabbedViewNavigatorApplicationSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TabbedViewNavigatorApplicationExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#TabbedViewNavigator"><linktext>spark.components.TabbedViewNavigator</linktext></link><link href="" invalidHref="spark.components.TabBar.xml"><linktext>spark.components.TabBar</linktext></link><link href="" invalidHref="spark.skins.mobile.TabbedViewNavigatorApplicationSkin.xml"><linktext>spark.skins.mobile.TabbedViewNavigatorApplicationSkin</linktext></link></related-links><apiConstructor id="spark.components:TabbedViewNavigatorApplication:TabbedViewNavigatorApplication"><apiName>TabbedViewNavigatorApplication</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:TabbedViewNavigatorApplication:navigators:get"><apiName>navigators</apiName><shortdesc conref="TabbedViewNavigator#navigators">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components.supportClasses:ViewNavigatorBase"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="TabbedViewNavigator#navigators">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:LabelItemRenderer"><apiName>LabelItemRenderer</apiName><shortdesc>
  LabelItemRenderer 类为手机主题中基于列表的控件定义默认项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><styles><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  不具有 1:1 高宽比时内容的垂直对齐方式。可能值为 <codeph>"top"</codeph>、<codeph>"center"</codeph> 和 <codeph>"bottom"</codeph>。
  
  </description>
<default>"center"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" theme="spark,mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="uint">
<description conref="spark.components.List#style:selectionColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  项呈示器的上边框与其文本组件之间的像素数目。
 
  </description>
<default>5
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  项呈示器的下边框与其文本组件之间的像素数目。
 
  </description>
<default>5
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR1.5" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:chromeColor">
  </description>
<default>0xCCCCCC
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。与手机主题一起使用时，该属性不能为负数。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  容器内文本的对齐方式。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数组件的默认值为 <codeph>"left"</codeph>。对于 FormItem 组件，默认值为 <codeph>"right"</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>，且仅当将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时，才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  文本行之间附加的垂直空间。
   <p>默认值为 0。</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>normal</codeph> 和 <codeph>bold</codeph>。Button 控件的默认值为 <codeph>bold</codeph>。所有其它控件的默认值为 <codeph>normal</codeph>。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  文本的高度，以像素为单位。在 Halo 主题中，除 ColorPicker 控件外，所有其它控件的默认值均为 10。对于 Halo 主题的 ColorPicker 控件，默认值为 11。在 Spark 主题中，除 ColorPicker 控件外，所有其它控件的默认值均为 12。对于 Spark 主题的 ColorPicker 控件，默认值为 11。Mobile 主题的默认值为 24。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。Halo 主题的默认字体为 <codeph>"Verdana"</codeph>。Spark 主题的默认字体为 <codeph>"Arial"</codeph>。Mobile 主题的默认字体为 <codeph>"_sans"</codeph>。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。Halo 主题的默认值为 <codeph>0x0B333C</codeph>。Spark 主题的默认值为 <codeph>0x000000</codeph>。Mobile 主题的默认值为 <codeph>0xFFFFFF</codeph>。
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:LabelItemRenderer" playerVersion="Flash9" type="Number">
<description>
  组件右边框与其内容区域右边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p>在 Halo 主题中，Button 控件的默认值为 10，在 Spark 主题中，其默认值为 6。</p>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:LabelItemRenderer" playerVersion="Flash9" type="Number">
<description>
  组件左边框与其内容区域左边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p>在 Halo 主题中，Button 控件的默认值为 10，在 Spark 主题中，其默认值为 6。</p>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  <p>Tree 控件的默认值为 2。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:LabelItemRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:LabelItemRenderer
   <strong>Properties</strong>
    label=""
 
   <strong>Common Styles</strong>
    color="<i>Theme dependent</i>"
    downColor="<i>Theme dependent</i>"
    fontFamily="<i>Theme dependent</i>"
    fontSize="<i>Theme dependent</i>"
    fontStyle="normal"
    fontWeight="normal"
    leading="0"
    letterSpacing="0"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="5"
    rollOverColor="0xCEDBEF"
    selectionColor="0xB2B2B2"
    textAlign="left"
    textDecoration="none"
    textIndent="0"
    verticalAlign="center"
  
   <strong>Spark Styles</strong>
    alternatingItemColors="undefined"
    focusColor="0x70B2EE"
    symbolColor="0x000000"
  
   <strong>Mobile Styles</strong>
    alternatingItemColors="undefined"
    focusColor="0x70B2EE"
    symbolColor="0x000000"
 
    <b>Events</b>
    dataChange="<i>No default</i>"
 
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>spark.components:IItemRenderer</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  LabelItemRenderer 类为手机主题中基于列表的控件定义默认项呈示器。这是具有单个文本组件的简单项呈示器。
   <p>该项呈示器创建单个 StyleableTextField 控件以显示字符串。项呈示器中 StyleableTextField 控件的名称为 <codeph>labelDisplay</codeph>。使用基于列表的控件的 <codeph>labelField</codeph> 属性指定要显示在 StyleableTextField 控件中的数据项字段。</p>
   <p>要创建在手机设备中使用的自定义项呈示器，Adobe 建议您创建扩展该类的新 ActionScript 项呈示器。</p>
   </apiDesc><example conref="LabelItemRendererExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#IconItemRenderer"><linktext>spark.components.IconItemRenderer</linktext></link><link href="" invalidHref="spark.components.List.xml"><linktext>spark.components.List</linktext></link><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link><link href="" invalidHref="spark.components.IItemRenderer.xml"><linktext>spark.components.IItemRenderer</linktext></link><link href="" invalidHref="spark.components.supportClasses.ItemRenderer.xml"><linktext>spark.components.supportClasses.ItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.components:LabelItemRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  当 data 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 <codeph>data</codeph> 属性更改时进行分派。
   <p>当您使用组件作为项呈示器时，<codeph>data</codeph> 属性将包含要显示的数据。您可以侦听此事件，并在 <codeph>data</codeph> 属性更改时更新组件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:LabelItemRenderer:LabelItemRenderer"><apiName>LabelItemRenderer</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:LabelItemRenderer:protected:createLabelDisplay"><apiName>createLabelDisplay</apiName><shortdesc>
      创建 labelDisplay 组件
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      创建 labelDisplay 组件
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:destroyLabelDisplay"><apiName>destroyLabelDisplay</apiName><shortdesc>
      破坏 labelDisplay 组件
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      破坏 labelDisplay 组件
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:drawBackground"><apiName>drawBackground</apiName><shortdesc>
      呈示项呈示器的背景。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>指定组件在组件坐标中的宽度（以像素为单位），而不考虑该组件的 <codeph>scaleX</codeph> 属性值。
           </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>指定组件在组件坐标中的高度（以像素为单位），而不考虑该组件的 <codeph>scaleY</codeph> 属性值。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      呈示项呈示器的背景。
     
      <p>该方法和 <codeph>layoutContents()</codeph> 由 <codeph>updateDisplayList()</codeph> 方法同时调用。</p>
     
      <p>它了解如何恰当处理 selected 状态、down 状态或 caretted 状态。但是，当 <codeph>alternatingItemColors</codeph> 设置为 <codeph>undefined</codeph> 时，默认背景是透明的。覆盖该方法以更改项呈示器的背景外观。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:drawBorder"><apiName>drawBorder</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3.0"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>指定组件在组件坐标中的宽度（以像素为单位），而不考虑该组件的 <codeph>scaleX</codeph> 属性值。
           </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>指定组件在组件坐标中的高度（以像素为单位），而不考虑该组件的 <codeph>scaleY</codeph> 属性值。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
     
      <p><codeph/></p>
     
      <p/>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:getElementPreferredHeight"><apiName>getElementPreferredHeight</apiName><shortdesc conref="spark.skins.mobile.supportClasses.MobileSkin#getElementPreferredHeight()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc conref="spark.skins.mobile.supportClasses.MobileSkin#getElementPreferredHeight()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#LabelItemRenderer/setElementPosition"><linktext>setElementPosition</linktext></link><link href="spark.components.xml#LabelItemRenderer/setElementSize"><linktext>setElementSize</linktext></link><link href="spark.components.xml#LabelItemRenderer/getElementPreferredWidth"><linktext>getElementPreferredWidth</linktext></link></related-links></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:getElementPreferredWidth"><apiName>getElementPreferredWidth</apiName><shortdesc conref="spark.skins.mobile.supportClasses.MobileSkin#getElementPreferredWidth()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc conref="spark.skins.mobile.supportClasses.MobileSkin#getElementPreferredWidth()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#LabelItemRenderer/setElementPosition"><linktext>setElementPosition</linktext></link><link href="spark.components.xml#LabelItemRenderer/setElementSize"><linktext>setElementSize</linktext></link><link href="spark.components.xml#LabelItemRenderer/getElementPreferredHeight"><linktext>getElementPreferredHeight</linktext></link></related-links></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:layoutContents"><apiName>layoutContents</apiName><shortdesc>
      定位该项呈示器的子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>指定组件在组件坐标中的宽度（以像素为单位），而不考虑该组件的 <codeph>scaleX</codeph> 属性值。
           </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>指定组件在组件坐标中的高度（以像素为单位），而不考虑该组件的 <codeph>scaleY</codeph> 属性值。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      定位该项呈示器的子项。
     
      <p>该方法和 <codeph>drawBackground()</codeph> 由 <codeph>updateDisplayList()</codeph> 方法同时调用。</p>
     
      <p>该方法定位 <codeph>labelDisplay</codeph> 组件。子类应覆盖此方法以定位它们的子项。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:setElementPosition"><apiName>setElementPosition</apiName><shortdesc conref="spark.skins.mobile.supportClasses.MobileSkin#setElementPosition()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc conref="spark.skins.mobile.supportClasses.MobileSkin#setElementPosition()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#LabelItemRenderer/setElementSize"><linktext>setElementSize</linktext></link></related-links></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:setElementSize"><apiName>setElementSize</apiName><shortdesc conref="spark.skins.mobile.supportClasses.MobileSkin#setElementSize()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc conref="spark.skins.mobile.supportClasses.MobileSkin#setElementSize()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#LabelItemRenderer/setElementPosition"><linktext>setElementPosition</linktext></link></related-links></apiOperation><apiValue id="spark.components:LabelItemRenderer:protected:labelDisplay"><apiName>labelDisplay</apiName><shortdesc>
      用于显示项呈示器的标签数据的文本组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:StyleableTextField</apiValueClassifier></apiValueDef><apiDesc>
      用于显示项呈示器的标签数据的文本组件。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:LabelItemRenderer:applicationDPI:get"><apiName>applicationDPI</apiName><shortdesc>
      返回应用程序的 DPI。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      返回应用程序的 DPI。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:LabelItemRenderer:data:get"><apiName>data</apiName><shortdesc>
      由 IDataRenderer 接口定义的 data 属性实现。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      由 IDataRenderer 接口定义的 <codeph>data</codeph> 属性实现。设置此属性后，它将存储值并使组件失效以触发组件重新布局。
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="spark.components:LabelItemRenderer:protected:down:get"><apiName>down</apiName><shortdesc>
      用户在项呈示器上按下时设置为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      用户在项呈示器上按下时设置为 <codeph>true</codeph>。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:LabelItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:LabelItemRenderer:protected:hovered:get"><apiName>hovered</apiName><shortdesc>
      用户将鼠标悬浮在项呈示器上时设置为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      用户将鼠标悬浮在项呈示器上时设置为 <codeph>true</codeph>。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:LabelItemRenderer:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:LabelItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:LabelItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:LabelItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="spark.components:SpinnerListContainer"><apiName>SpinnerListContainer</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="style" name="backgroundColor"/><Exclude kind="style" name="backgroundAlpha"/><DefaultProperty name="mxmlContentFactory"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  SpinnerList 是水平布局的。SpinnerListContainerSkin 显示一个帧、阴影渐变和一个选择指示符。   
       
 </apiDesc><example conref="SpinnerListExample.mxml"/><example conref="SpinnerListContainerExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#SpinnerList"><linktext>spark.components.SpinnerList</linktext></link><link href="" invalidHref="spark.skins.mobile.SpinnerListContainerSkin.xml"><linktext/></link></related-links><apiConstructor id="spark.components:SpinnerListContainer:SpinnerListContainer"><apiName>SpinnerListContainer</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
            
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:ViewNavigatorApplication"><apiName>ViewNavigatorApplication</apiName><shortdesc>
  ViewNavigatorApplication 类是一种应用程序类，用于为使用基于视图的导航模型的应用程序提供简单框架。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="navigationStack"/><skinParts><SkinPart name="navigator" owner="spark.components:ViewNavigatorApplication" required="false" var_type="spark.components:ViewNavigator">
<description>
      应用程序的主视图导航器。该组件用来管理应用程序的视图导航模型。  
     </description>
	<shortdesc>
      The main view navigator for the application.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ViewNavigatorApplication&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ViewNavigatorApplication
    <strong>Properties</strong>
    actionContent="null"
    actionLayout="null"
    firstView="null"
    firstViewData="null"
    navigationContent="null"
    navigationLayout="null"
    title=""
    titleContent="null"
    titleLayout="null"
 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorApplicationBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ViewNavigatorApplication 类是一种应用程序类，用于为使用基于视图的导航模型的应用程序提供简单框架。使用时，该类用作应用程序的主入口点，并为硬件设备密钥、方向检测和应用程序会话持久性提供支持。
 
  <p>基于视图的导航模型的特点在于用户界面，其中最终用户可以在一系列全屏视图之间导航以响应用户交互。这是一个通常由手机应用程序使用的范例，并通过内置 ViewNavigator 容器实现。</p>
 
  <p>使用 <codeph>firstView</codeph> 属性来指定初始化应用程序时首先显示的视图。</p>
 
  <p>与 Application 不同，ViewNavigatorApplication 不打算接受 UIComponent 对象作为子项。而是，所有可视组件应为由应用程序管理的视图的子项。</p>
 
  <p>ViewNavigatorApplication 容器具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>要占据所有可用屏幕空间的 100% 高和 100% 宽。</entry>
        </row><row>
           <entry>子代布局</entry>
           <entry>通过组成应用程序视图的各个 View 容器来定义。</entry>
        </row><row>
           <entry>滚动条</entry>
           <entry>无。如果您添加滚动条，则用户可以滚动整个应用程序。这包括应用程序的 ActionBar 和 TabBar 区域。因为您通常不需要滚动这些视图区域，所以请将滚动条添加至应用程序的各个相应 View 容器，而不是添加至应用程序容器自身。 </entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.mobile.ViewNavigatorApplicationSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ViewNavigatorApplicationExample.mxml"/><example conref="ViewNavigatorApplicationHomeView.mxml"/><example conref="ViewNavigatorApplicationView2.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#ViewNavigator"><linktext>spark.components.ViewNavigator</linktext></link><link href="spark.components.xml#View"><linktext>spark.components.View</linktext></link><link href="" invalidHref="spark.skins.mobile.ViewNavigatorApplicationSkin.xml"><linktext>spark.skins.mobile.ViewNavigatorApplicationSkin</linktext></link></related-links><apiConstructor id="spark.components:ViewNavigatorApplication:ViewNavigatorApplication"><apiName>ViewNavigatorApplication</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ViewNavigatorApplication:actionBar:get"><apiName>actionBar</apiName><shortdesc>
      对视图导航器的 ActionBar 控件（如果存在）的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:ActionBar</apiValueClassifier></apiValueDef><apiDesc>
      对视图导航器的 ActionBar 控件（如果存在）的引用。仅当视图导航器已添加到显示列表后该属性才有效。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar"><linktext>ActionBar</linktext></link><link href="spark.components.xml#ViewNavigator"><linktext>ViewNavigator</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:actionContent:get"><apiName>actionContent</apiName><shortdesc conref="ActionBar#actionContent">
      该属性覆盖 ActionBar 控件中的 actionContent 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionContent">
      该属性覆盖 ActionBar 控件中的 <codeph>actionContent</codeph> 属性。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionContent"><linktext>spark.components.ActionBar.actionContent</linktext></link><link href="spark.components.xml#View/actionContent"><linktext>spark.components.View.actionContent</linktext></link><link href="spark.components.xml#ViewNavigator/actionContent"><linktext>spark.components.ViewNavigator.actionContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:actionLayout:get"><apiName>actionLayout</apiName><shortdesc conref="ActionBar#actionLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionLayout">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionLayout"><linktext>spark.components.ActionBar.actionLayout</linktext></link><link href="spark.components.xml#View/actionLayout"><linktext>spark.components.View.actionLayout</linktext></link><link href="spark.components.xml#ViewNavigator/actionLayout"><linktext>spark.components.ViewNavigator.actionLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:firstViewData:get"><apiName>firstViewData</apiName><shortdesc conref="ViewNavigator#firstViewData">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ViewNavigator#firstViewData">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigatorApplication:firstView:get"><apiName>firstView</apiName><shortdesc conref="ViewNavigator#firstView">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ViewNavigator#firstView">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigatorApplication:navigationContent:get"><apiName>navigationContent</apiName><shortdesc conref="ActionBar#navigationContent">
      该属性覆盖 ActionBar 控件中的 navigationContent 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationContent">
      该属性覆盖 ActionBar 控件中的 <codeph>navigationContent</codeph> 属性。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationContent"><linktext>spark.components.ActionBar.navigationContent</linktext></link><link href="spark.components.xml#View/navigationContent"><linktext>spark.components.View.navigationContent</linktext></link><link href="spark.components.xml#ViewNavigator/navigationContent"><linktext>spark.components.ViewNavigator.navigationContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:navigationLayout:get"><apiName>navigationLayout</apiName><shortdesc conref="ActionBar#navigationLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationLayout">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationLayout"><linktext>spark.components.ActionBar.navigationLayout</linktext></link><link href="spark.components.xml#View/navigationLayout"><linktext>spark.components.View.navigationLayout</linktext></link><link href="spark.components.xml#ViewNavigator/navigationLayout"><linktext>spark.components.ViewNavigator.navigationLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:titleContent:get"><apiName>titleContent</apiName><shortdesc conref="ActionBar#titleContent">
      该属性覆盖 ActionBar 和 ViewNavigatorApplication 组件中的 titleContent 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleContent">
      该属性覆盖 ActionBar 和 ViewNavigatorApplication 组件中的 <codeph>titleContent</codeph> 属性。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>spark.components.ActionBar.titleContent</linktext></link><link href="spark.components.xml#View/titleContent"><linktext>spark.components.View.titleContent</linktext></link><link href="spark.components.xml#ViewNavigator/titleContent"><linktext>spark.components.ViewNavigator.titleContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:titleLayout:get"><apiName>titleLayout</apiName><shortdesc conref="ActionBar#titleLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleLayout">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleLayout"><linktext>spark.components.ActionBar.titleLayout</linktext></link><link href="spark.components.xml#View/titleLayout"><linktext>spark.components.View.titleLayout</linktext></link><link href="spark.components.xml#ViewNavigator/titleLayout"><linktext>spark.components.ViewNavigator.titleLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:title:get"><apiName>title</apiName><shortdesc conref="ActionBar#title">
      该属性覆盖 ActionBar 控件中的 title 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#title">
      该属性覆盖 ActionBar 控件中的 <codeph>title</codeph> 属性。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/title"><linktext>spark.components.ActionBar.title</linktext></link><link href="spark.components.xml#View/title"><linktext>spark.components.View.title</linktext></link><link href="spark.components.xml#ViewNavigator/title"><linktext>spark.components.ViewNavigator.title</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:SpinnerList"><apiName>SpinnerList</apiName><shortdesc>
  SpinnerList 组件显示各项的列表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="event" name="itemRollOver"/><Exclude kind="event" name="itemRollOut"/><Exclude kind="event" name="changing"/><Exclude kind="property" name="requireSelection"/><Exclude kind="property" name="layout"/><Exclude kind="style" name="chromeColor"/><Exclude kind="style" name="accentColor"/><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="scroller" owner="spark.components:SpinnerList" playerVersion="AIR3" required="false" var_type="spark.components:Scroller">
<description>
      
     
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      The optional Scroller that is used to scroll the List.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:SpinnerList&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SpinnerList
    <strong>Properties</strong>
    wrapElements="true|false"
  /&gt;
  </pre>
 
 ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  SpinnerList 组件显示各项的列表。列表中心的项始终是 selectedItem。默认情况下，列表是环绕的。
 
  <p/>
 
 <p>
  <adobeimage alt="" href="../../images/spinnerlist_example.png"/>
 </p>
 
 <p/>
 
  </apiDesc><example conref="SpinnerListExample.mxml"/><example conref="SpinnerListContainerExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#SpinnerListContainer"><linktext/></link></related-links><apiConstructor id="spark.components:SpinnerList:SpinnerList"><apiName>SpinnerList</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
            
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SpinnerList:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SpinnerList:protected:partAdded"><apiName>partAdded</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SpinnerList:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.components:SpinnerList:caretIndex:get"><apiName>caretIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:SpinnerList:wrapElements:get"><apiName>wrapElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     </apiDefaultValue></apiValueDef><apiDesc>
       
           
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SpinnerList:dataProvider:set"><apiName>dataProvider</apiName><shortdesc conref="spark.components.DataGroup#dataProvider">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.collections:IList"/></apiValueDef><apiDesc conref="spark.components.DataGroup#dataProvider">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:SplitViewNavigator"><apiName>SplitViewNavigator</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><skinStates><SkinState name="landscape" owner="spark.components:SplitViewNavigator" playerVersion="AIR3">
<description>
  <codeph/>
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></SkinState><SkinState name="portrait" owner="spark.components:SplitViewNavigator" playerVersion="AIR3">
<description>
  <codeph/>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="viewNavigatorPopUp" owner="spark.components:SplitViewNavigator" playerVersion="AIR3" required="false" var_type="spark.components:SkinnablePopUpContainer">
<description>
      <codeph/><codeph/> 
     
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      The popUp used to display a navigator when 
      showFirstViewNavigatorInPopUp() is called.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:SplitViewNavigator&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:SplitViewNavigator
    <strong>Properties</strong>
    autoHideFirstViewNavigator="false"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  
   <p/>
  <p>
  <adobeimage alt="" href="../../images/svn_master_detail_svn.png"/>
 </p>
   <p><codeph/>此组件用于在移动设备上创建一个主/详细接口。此组件可以管理的子导航器的数量没有限制。 </p>
   <p><b/></p>
 
  <p><codeph/><codeph/><codeph/>当设置时，该子项的 <codeph>includeInLayout</codeph> 属性将被设置为匹配。</p>
    
  <p><codeph/><codeph/><codeph/><codeph/></p>
   <p><b/><codeph/></p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.skins.mobile.SplitViewNavigatorSkin.xml"><linktext/></link><link href="spark.components.supportClasses.xml#ViewNavigatorBase"><linktext>spark.components.supportClasses.ViewNavigatorBase</linktext></link><link href="spark.components.xml#ViewNavigator"><linktext>spark.components.ViewNavigator</linktext></link><link href="spark.components.xml#TabbedViewNavigator"><linktext>spark.components.TabbedViewNavigator</linktext></link><link href="" invalidHref="spark.components.xml#Application/aspectRatio"><linktext>spark.components.Application.aspectRatio</linktext></link><link href="spark.components.xml#Callout"><linktext>spark.components.Callout</linktext></link><link href="" invalidHref="spark.components.SkinnablePopUpContainer.xml"><linktext>spark.components.SkinnablePopUpContainer</linktext></link></related-links><apiConstructor id="spark.components:SplitViewNavigator:SplitViewNavigator"><apiName>SplitViewNavigator</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SplitViewNavigator:getViewNavigatorAt"><apiName>getViewNavigatorAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定索引处的导航器，如果不存在则为 null.
     
      </apiDesc><apiOperationClassifier>spark.components.supportClasses:ViewNavigatorBase</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>要检索的导航器的索引.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph/>
     
      <p/> 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SplitViewNavigator:hideViewNavigatorPopUp"><apiName>hideViewNavigatorPopUp</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
     
      <p/>
     
      <p><codeph/><codeph/><codeph/></p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SplitViewNavigator:showFirstViewNavigatorInPopUp"><apiName>showFirstViewNavigatorInPopUp</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>owner</apiItemName><apiType value="flash.display:DisplayObjectContainer"/></apiParam></apiOperationDef><apiDesc>
      
     
      <p><codeph/><codeph/></p>
     
      <p><codeph/><codeph/></p>
     
      <p/>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:SplitViewNavigator:autoHideFirstViewNavigator:get"><apiName>autoHideFirstViewNavigator</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph/>
     
      <p><codeph/></p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SplitViewNavigator:numViewNavigators:get"><apiName>numViewNavigators</apiName><shortdesc>
      此容器管理的导航器数量.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      此容器管理的导航器数量.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>