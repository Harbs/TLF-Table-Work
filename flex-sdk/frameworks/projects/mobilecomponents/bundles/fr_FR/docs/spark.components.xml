<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.components"><apiName>spark.components</apiName><apiDetail/><apiClassifier id="spark.components:ViewNavigator"><apiName>ViewNavigator</apiName><shortdesc>
  Le composant ViewNavigator est un conteneur qui se compose d’une collection d’objets View dont seule la vue supérieure est visible et active.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="landscapeAndOverlay" owner="spark.components:ViewNavigator" playerVersion="AIR2.5">
<description>
  L’état utilisé lorsque le navigateur est en orientation paysage et que les contrôles du navigateur sont superposés par-dessus.
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="portraitAndOverlay" owner="spark.components:ViewNavigator" playerVersion="AIR2.5">
<description>
  L’état utilisé lorsque le navigateur est en orientation portrait et que les contrôles du navigateur sont superposés par-dessus.
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="landscape" owner="spark.components:ViewNavigator" playerVersion="AIR2.5">
<description>
  L’état utilisé lorsque le navigateur est en orientation Paysage.
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="portrait" owner="spark.components:ViewNavigator" playerVersion="AIR2.5">
<description>
  L’état utilisé lorsque le navigateur est en orientation Portrait.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="navigationStack"/><skinParts><SkinPart name="actionBar" owner="spark.components:ViewNavigator" playerVersion="AIR2.5" required="false" var_type="spark.components:ActionBar">
<description>
     Partie de l’habillage qui définit la barre d’action du navigateur. 
     
     </description>

	<prolog><asCustoms><langversion>3.0
     </langversion><productversion>Flex 4.5
    </productversion></asCustoms></prolog><shortdesc>
     A skin part that defines the action bar of the navigator.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:ViewNavigator&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:ViewNavigator
   <strong>Properties</strong>
    actionContent="null"
    actionLayout="null"
    defaultPopTransition="SlideViewTransition"
    defaultPushTransition="SlideViewTransition"
    firstView="null"
    firstViewData="null"
    navigationContent="null"
    navigationLayout="null"
    poppedViewReturnedObject="null"
    title=""
    titleContent="null"
    titleLayout="null"
 
  &gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le composant ViewNavigator est un conteneur qui se compose d’une collection d’objets View dont seule la vue supérieure est visible et active. Utilisez le conteneur ViewNavigator pour contrôler la navigation parmi les vues d’une application mobile. Le conteneur ViewNavigatorApplication crée automatiquement un seul conteneur ViewNavigator pour l’intégralité de l’application.
  
  <p>Une navigation dans une application mobile est contrôlée par une pile d’objets View. L’objet View supérieur sur la pile définit la vue actuellement visible. Le conteneur ViewNavigator conserve la pile. Pour modifier les vues, transférez un nouvel objet View dans la pile, ou extrayez l’objet View actuel de la pile. L’extraction de l’objet View actuellement visible de la pile a pour effet de supprimer l’objet View et renvoie l’utilisateur à la vue précédente sur la pile.</p>
   <p>Lorsqu’une vue est transférée en haut de la pile, la propriété <codeph>data</codeph> de la vue précédente est automatiquement conservée. Elle est restaurée lorsque la vue est réactivée à la suite de l’extraction de la vue actuelle de la pile. Lorsqu’une nouvelle vue devient active en étant transférée dans la pile, l’occurrence de la vue précédente est supprimée.</p>
 
  <p>Le composant ViewNavigator affiche un contrôle ActionBar facultatif qui affiche des informations contextuelles définies par la vue active. Lorsque la vue active change, la barre d’action est automatiquement mise à jour.</p>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#View"><linktext>spark.components.View</linktext></link><link href="spark.components.xml#ActionBar"><linktext>spark.components.ActionBar</linktext></link><link href="spark.components.xml#TabbedViewNavigator"><linktext>spark.components.TabbedViewNavigator</linktext></link><link href="spark.transitions.xml#ViewTransitionBase"><linktext>spark.transitions.ViewTransitionBase</linktext></link></related-links><apiConstructor id="spark.components:ViewNavigator:ViewNavigator"><apiName>ViewNavigator</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:ViewNavigator:protected:createActionBarHideEffect"><apiName>createActionBarHideEffect</apiName><shortdesc>
      Crée l’effet à lire lorsque le contrôle ActionBar est masqué.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Effet à lire lorsque le contrôle ActionBar est masqué.
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn></apiOperationDef><apiDesc>
      Crée l’effet à lire lorsque le contrôle ActionBar est masqué. L’effet produit est responsable de l’animation à la fois du contrôle ActionBar et de la vue actuellement affichée dans la zone de contenu du navigateur.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:protected:createActionBarShowEffect"><apiName>createActionBarShowEffect</apiName><shortdesc>
      Crée l’effet à lire lorsque le contrôle ActionBar est affiché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Effet à lire lorsque le contrôle ActionBar est affiché.
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn></apiOperationDef><apiDesc>
      Crée l’effet à lire lorsque le contrôle ActionBar est affiché. L’effet produit est responsable de l’animation à la fois du contrôle ActionBar et de la vue actuellement affichée dans la zone de contenu du navigateur.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:hideActionBar"><apiName>hideActionBar</apiName><shortdesc>
      Masque la barre d’action.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>animate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Indique si un effet de masquage doit être lu lorsque la barre d’action est masquée.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Masque la barre d’action.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:popAll"><apiName>popAll</apiName><shortdesc>
      Supprime toutes les vues de la pile du navigateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>Transition de vue à lire pendant le changement de vues.    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime toutes les vues de la pile du navigateur. Cette méthode affiche un écran vide.  
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:popToFirstView"><apiName>popToFirstView</apiName><shortdesc>
      Supprime toutes les vues, à l’exception de celle du bas de la pile de navigation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>Transition de vue à lire pendant le changement de vues.    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime toutes les vues, à l’exception de celle du bas de la pile de navigation. La vue inférieure est celle qui a été transférée en premier dans la pile.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:popView"><apiName>popView</apiName><shortdesc>
      Extrait la vue actuelle de la pile de navigation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>Transition de vue à lire pendant le changement de vues.    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Extrait la vue actuelle de la pile de navigation. La vue en cours est représentée par la vue supérieure de la pile. La vue précédente de la pile devient la vue en cours.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:pushView"><apiName>pushView</apiName><shortdesc>
      Transfère une nouvelle vue au sommet de la pile de navigation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewClass</apiItemName><apiType value="Class"/><apiDesc>La classe utilisée pour créer la vue. Cet argument doit référencer une classe qui étend le conteneur View.
      
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>L’objet de données à transmettre à la vue. Cet argument est écrit dans la propriété <codeph>data</codeph> de la nouvelle vue.
      
      </apiDesc></apiParam><apiParam><apiItemName>context</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Objet arbitraire écrit dans la propriété <codeph>ViewNavigator.context</codeph>. Lorsque la nouvelle vue est créée, elle peut faire référence à cette propriété et exécuter une action en fonction de sa valeur. Par exemple, la vue peut afficher des données de différentes manières selon la valeur de <codeph>context</codeph>.
      
      </apiDesc></apiParam><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>La transition de vue à lire pendant le passage des vues.    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Transfère une nouvelle vue au sommet de la pile de navigation. La vue transférée dans la pile devient la vue en cours. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:replaceView"><apiName>replaceView</apiName><shortdesc>
      Remplace la vue au sommet de la pile de navigation par une nouvelle vue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewClass</apiItemName><apiType value="Class"/><apiDesc>La classe utilisée pour créer la vue de remplacement. Cet argument doit référencer une classe qui étend le conteneur View.
      
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>L’objet de données à transmettre à la vue. Cet argument est écrit dans la propriété <codeph>data</codeph> de la nouvelle vue.
      
      </apiDesc></apiParam><apiParam><apiItemName>context</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Objet arbitraire utilisé pour décrire le contexte du transfert. Lorsque la nouvelle vue est créée, elle peut référencer cette propriété.
      
      </apiDesc></apiParam><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>Transition de vue à lire pendant le changement de vues.    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Remplace la vue au sommet de la pile de navigation par une nouvelle vue. La vue qui remplace la vue en cours dans la pile devient la vue en cours. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:showActionBar"><apiName>showActionBar</apiName><shortdesc>
      Affiche la barre d’action.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>animate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Indique si un effet d’affichage doit être lu lorsque la barre d’action est affichée.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Affiche la barre d’action.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:ViewNavigator:actionContent:get"><apiName>actionContent</apiName><shortdesc conref="ActionBar#actionContent">
      Cette propriété remplace la propriété actionContent dans les composants ActionBar et ViewNavigatorApplication.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionContent">
      Cette propriété remplace la propriété <codeph>actionContent</codeph> dans les composants ActionBar et ViewNavigatorApplication.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionContent"><linktext>ActionBar.actionContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:actionLayout:get"><apiName>actionLayout</apiName><shortdesc conref="ActionBar#actionContent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionContent">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:activeView:get"><apiName>activeView</apiName><shortdesc>
      Au cours d’une transition de vue, cette propriété référence la vue que le navigateur va afficher. La vue actuellement active du navigateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="viewChangeComplete"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:View</apiValueClassifier></apiValueDef><apiDesc>
      <p>Au cours d’une transition de vue, cette propriété référence la vue que le navigateur va afficher.</p>
           
      La vue actuellement active du navigateur. Une seule vue peut être active à la fois.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:context:get"><apiName>context</apiName><shortdesc>
      La chaîne qui décrit le contexte dans lequel la vue actuelle a été créée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      La chaîne qui décrit le contexte dans lequel la vue actuelle a été créée. Cette propriété est attribuée à la valeur du paramètre <codeph>context</codeph> transmis à la méthode <codeph>ViewNavigator.pushView()</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:defaultPopTransition:get"><apiName>defaultPopTransition</apiName><shortdesc>
      Spécifie la transition de vue par défaut pour les opérations de navigation pop.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.transitions:ViewTransitionBase</apiValueClassifier><apiDefaultValue>SlideViewTransition
           </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie la transition de vue par défaut pour les opérations de navigation pop.
           </apiDesc></apiValueDetail><related-links><link href="spark.transitions.xml#SlideViewTransition"><linktext>spark.transitions.SlideViewTransition</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:defaultPushTransition:get"><apiName>defaultPushTransition</apiName><shortdesc>
      Spécifie la transition de vue par défaut pour les opérations de navigation push.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.transitions:ViewTransitionBase</apiValueClassifier><apiDefaultValue>SlideViewTransition
           </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie la transition de vue par défaut pour les opérations de navigation push.
           </apiDesc></apiValueDetail><related-links><link href="spark.transitions.xml#SlideViewTransition"><linktext>spark.transitions.SlideViewTransition</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:firstViewData:get"><apiName>firstViewData</apiName><shortdesc>
      L’objet à transmettre à la propriété data de la première vue lorsque le navigateur est initialisé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      L’objet à transmettre à la propriété <codeph>data</codeph> de la première vue lorsque le navigateur est initialisé. Spécifiez la première vue à l’aide de la propriété <codeph>firstView</codeph>.   
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ViewNavigator/firstView"><linktext>firstView</linktext></link><link href="spark.components.xml#View"><linktext>Vue</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:firstView:get"><apiName>firstView</apiName><shortdesc>
      Chaque vue d’une application correspond à une classe de conteneur View définie dans un fichier ActionScript ou MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Chaque vue d’une application correspond à une classe de conteneur View définie dans un fichier ActionScript ou MXML. Cette propriété spécifie la vue à utiliser pour initialiser la première vue de la pile. Cette propriété doit référencer une classe qui étend le conteneur View.
           <p>Spécifiez les données transmises à la première vue à l’aide de la propriété <codeph>firstViewData</codeph>.</p>   
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ViewNavigator/firstViewData"><linktext>firstViewData</linktext></link><link href="spark.components.xml#View"><linktext>Vue</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:length:get"><apiName>length</apiName><shortdesc>
      Renvoie le nombre de vues actuellement gérées par le navigateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="lengthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Renvoie le nombre de vues actuellement gérées par le navigateur.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:navigationContent:get"><apiName>navigationContent</apiName><shortdesc conref="ActionBar#navigationContent">
      Cette propriété remplace la propriété navigationContent dans les composants ActionBar et ViewNavigatorApplication.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationContent">
      Cette propriété remplace la propriété <codeph>navigationContent</codeph> dans les composants ActionBar et ViewNavigatorApplication.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationContent"><linktext>ActionBar.navigationContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:navigationLayout:get"><apiName>navigationLayout</apiName><shortdesc conref="ActionBar#navigationLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:poppedViewReturnedObject:get"><apiName>poppedViewReturnedObject</apiName><shortdesc>
      Maintient l’objet renvoyé par la dernière vue qui a été extraite de la pile de navigation ou remplacée par une autre vue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components.supportClasses:ViewReturnObject</apiValueClassifier><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Maintient l’objet renvoyé par la dernière vue qui a été extraite de la pile de navigation ou remplacée par une autre vue. Pour renvoyer une valeur, la vue en cours d’extraction de la pile remplace sa méthode <codeph>createReturnObject()</codeph>.
           <p>Cet objet est disponible uniquement lorsque le navigateur est dans le processus de permutation des vues en réponse à une opération de navigation pop ou replace. Cet objet est assuré d’être valide lorsque la nouvelle vue reçoit l’événement <codeph>add</codeph> et est supprimé une fois que la vue a reçu un événement <codeph>viewActivate</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#View/createReturnObject()"><linktext>View.createReturnObject()</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:titleContent:get"><apiName>titleContent</apiName><shortdesc conref="ActionBar#titleContent">
      Cette propriété remplace la propriété titleContent dans les composants ActionBar et ViewNavigatorApplication.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleContent">
      Cette propriété remplace la propriété <codeph>titleContent</codeph> dans les composants ActionBar et ViewNavigatorApplication.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>ActionBar.titleContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:titleLayout:get"><apiName>titleLayout</apiName><shortdesc conref="ActionBar#titleLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:title:get"><apiName>title</apiName><shortdesc conref="ActionBar#title">
      Cette propriété remplace la propriété title dans les composants ActionBar et ViewNavigatorApplication.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#title">
      Cette propriété remplace la propriété <codeph>title</codeph> dans les composants ActionBar et ViewNavigatorApplication.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IconItemRenderer"><apiName>IconItemRenderer</apiName><shortdesc>
  La classe IconItemRenderer est un rendu d’élément performant, optimisé pour les périphériques mobiles.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style inherit="no" name="messageStyleName" owner="spark.components:IconItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  Nom de la déclaration de style CSS à utiliser pour les styles du composant de message.
 
  </description>
<default>iconItemRendererMessageStyle
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="iconDelay" owner="spark.components:IconItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  La valeur de délai avant d’essayer de charger la source de l’icône si elle n’a pas déjà été mise en cache.
 
  <p>La raison pour laquelle un délai est utile tient au fait que lorsque vous effectuez un défilement, vous ne voulez pas nécessairement que l’image se charge immédiatement. A la place, vous devez attendre un certain délai pour vous assurer que l’utilisateur souhaite réellement voir ce rendu d’élément.</p>
 
  </description>
<default>500
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="spark.components:IconItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Nombre de pixels entre les enfants, verticalement. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est 6.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="spark.components:IconItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Nombre de pixels entre les enfants dans le sens horizontal. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est 8.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:IconItemRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:IconItemRenderer
   <strong>Properties</strong>
    decorator=""
    iconContentLoader="<i>See property description</i>"
    iconField="null"
    iconFillMode=""scale
    iconFunction="null"
    iconHeight="NaN"
    iconPlaceholder="null"
    iconScaleMode="stretch"
    iconWidth="NaN"
    label=""
    labelField="null"
    labelFunction="null"
    messageField="null"
    messageFunction="null"
 
   <strong>Common Styles</strong>
    horizontalGap="8"
    iconDelay="500"
    messageStyleName="iconItemRendererMessageStyle"
    verticalGap="6"
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.core:IGraphicElementContainer</apiBaseInterface><apiBaseInterface>spark.core:ISharedDisplayObject</apiBaseInterface><apiBaseClassifier>spark.components:LabelItemRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe IconItemRenderer est un rendu d’élément performant, optimisé pour les périphériques mobiles. Elle affiche quatre parties facultatives pour chaque élément dans le contrôle basé sur une liste : 
   <ul>
    <li>Icône sur le côté gauche définie par la propriété <codeph>iconField</codeph> ou <codeph>iconFunction</codeph>.</li>
    <li>Etiquette de texte d’une seule ligne en regard de l’icône définie par la propriété <codeph>labelField</codeph> ou <codeph>labelFunction</codeph>.</li>
    <li>Message multiligne sous l’étiquette de texte défini par la propriété <codeph>messageField</codeph> ou <codeph>messageFunction</codeph>.</li>
    <li>Icône de décorateur sur le côté droit définie par la propriété <codeph>decorator</codeph>.</li>
  </ul>
   <p>Pour appliquer des styles CSS à l’étiquette de texte sur une seule ligne, tels qu’une taille de police et une couleur, définissez les styles sur la classe IconItemRenderer. Pour définir des styles sur le message multiligne, utilisez la propriété de style <codeph>messageStyleNameM</codeph>. L’exemple suivant définit les styles de texte à la fois pour l’étiquette de texte et le message :</p>
   <pre>
     &lt;fx:Style>
         .myFontStyle { 
             fontSize: 15;
             color: #9933FF;
         }
  
     &lt;/fx:Style>
     
     &lt;s:List id="myList"
         width="100%" height="100%"
         labelField="firstName">
         &lt;s:itemRenderer>
             &lt;fx:Component>
                 &lt;s:IconItemRenderer messageStyleName="myFontStyle" fontSize="25"
                     labelField="firstName"
                     messageField="lastName" 
                     decorator="@Embed(source='assets/logo_small.jpg')"/>
             &lt;/fx:Component>
         &lt;/s:itemRenderer>
         &lt;s:ArrayCollection>
             &lt;fx:Object firstName="Dave" lastName="Duncam" company="Adobe" phone="413-555-1212"/>
             &lt;fx:Object firstName="Sally" lastName="Smith" company="Acme" phone="617-555-1491"/>
             &lt;fx:Object firstName="Jim" lastName="Jackson" company="Beta" phone="413-555-2345"/>
             &lt;fx:Object firstName="Mary" lastName="Moore" company="Gamma" phone="617-555-1899"/>
         &lt;/s:ArrayCollection>
     &lt;/s:List>
  </pre>
   </apiDesc><example conref="IconItemRendererExample.mxml"/></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.List.xml"><linktext>spark.components.List</linktext></link><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link><link href="" invalidHref="spark.components.IItemRenderer.xml"><linktext>spark.components.IItemRenderer</linktext></link><link href="" invalidHref="spark.components.supportClasses.ItemRenderer.xml"><linktext>spark.components.supportClasses.ItemRenderer</linktext></link><link href="spark.components.xml#LabelItemRenderer"><linktext>spark.components.LabelItemRenderer</linktext></link></related-links><apiConstructor id="spark.components:IconItemRenderer:IconItemRenderer"><apiName>IconItemRenderer</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:IconItemRenderer:invalidateGraphicElementDisplayList"><apiName>invalidateGraphicElementDisplayList</apiName><shortdesc>
      Informe le composant hôte qu’un élément a été modifié et doit à nouveau être tracé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="spark.core:IGraphicElement"/><apiDesc>Elément modifié.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Informe le composant hôte qu’un élément a été modifié et doit à nouveau être tracé. L’interface <codeph>IGraphicElementHost</codeph> doit appeler la méthode <codeph>validateDisplayList()</codeph> sur l’interface IGraphicElement pour lui donner une chance de redessiner. En règle générale, l’hôte valide les listes d’affichage des éléments dans sa méthode <codeph>validateDisplayList()</codeph>.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:IconItemRenderer:invalidateGraphicElementProperties"><apiName>invalidateGraphicElementProperties</apiName><shortdesc>
      Signale au composant hôte qu’un élément a été modifié et qu’il doit valider les propriétés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="spark.core:IGraphicElement"/><apiDesc>Elément modifié.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Signale au composant hôte qu’un élément a été modifié et qu’il doit valider les propriétés. L’interface <codeph>IGraphicElementHost</codeph> doit appeler la méthode <codeph>validateProperties()</codeph> sur l’interface IGraphicElement pour lui donner une chance de valider ses propriétés. En règle générale, l’hôte valide les propriétés des éléments dans sa méthode <codeph>validateProperties()</codeph>.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:IconItemRenderer:invalidateGraphicElementSharing"><apiName>invalidateGraphicElementSharing</apiName><shortdesc>
      Signale à l’hôte qu’une couche d’élément a été modifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="spark.core:IGraphicElement"/><apiDesc>Elément dont la taille a été modifiée.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Signale à l’hôte qu’une couche d’élément a été modifiée. L’interface <codeph>IGraphicElementHost</codeph> doit évaluer à nouveau les séquences d’éléments graphiques avec les objets DisplayObject partagés et peut avoir besoin de réaffecter les objets DisplayObject et de tracer à nouveau les séquences en conséquence. En règle générale, l’hôte effectue cela dans sa méthode <codeph>validateProperties()</codeph>.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:IconItemRenderer:invalidateGraphicElementSize"><apiName>invalidateGraphicElementSize</apiName><shortdesc>
      Signale au composant hôte qu’une taille d’élément a été modifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="spark.core:IGraphicElement"/><apiDesc>Elément dont la taille a été modifiée.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Signale au composant hôte qu’une taille d’élément a été modifiée. L’interface <codeph>IGraphicElementHost</codeph> doit appeler la méthode <codeph>validateSize()</codeph> sur l’interface IGraphicElement pour lui donner une chance de valider sa taille. En règle générale, l’hôte valide la taille des éléments dans sa méthode <codeph>validateSize()</codeph>.
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:IconItemRenderer:protected:decoratorDisplay"><apiName>decoratorDisplay</apiName><shortdesc>
      Le composant d’objet d’affichage utilisé pour afficher le décorateur pour ce rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="spark.primitives:BitmapImage"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Le composant d’objet d’affichage utilisé pour afficher le décorateur pour ce rendu d’élément.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:protected:iconDisplay"><apiName>iconDisplay</apiName><shortdesc>
      Le composant d’image bitmap utilisé pour afficher les données d’icône du rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="spark.primitives:BitmapImage"/></apiValueDef><apiDesc>
      Le composant d’image bitmap utilisé pour afficher les données d’icône du rendu d’élément.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:protected:messageDisplay"><apiName>messageDisplay</apiName><shortdesc>
      Le composant de texte utilisé pour afficher les données de message du rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:StyleableTextField</apiValueClassifier></apiValueDef><apiDesc>
      Le composant de texte utilisé pour afficher les données de message du rendu d’élément.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:decorator:get"><apiName>decorator</apiName><shortdesc>
      L’icône de décorateur qui apparaît sur le côté droit de ce rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>"" 
     
      </apiDefaultValue></apiValueDef><apiDesc>
      L’icône de décorateur qui apparaît sur le côté droit de ce rendu d’élément.
     
      <p>L’icône de décorateur ignore le style <codeph>verticalAlign</codeph> et elle est toujours centrée verticalement.</p>
           <p>L’icône de décorateur doit être une ressource incorporée. Il peut y avoir dégradation des performances en cas d’utilisation de ressources externes.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconContentLoader:get"><apiName>iconContentLoader</apiName><shortdesc>
      Loader d’image personnalisée facultatif, tel qu’une mémoire cache ou une file d’attente d’images, à associer au client loader de contenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.core:IContentLoader"/></apiValueDef><apiDesc>
      Loader d’image personnalisée facultatif, tel qu’une mémoire cache ou une file d’attente d’images, à associer au client loader de contenu.
     
      <p>La valeur par défaut est un cache de contenu statique défini sur IconItemRenderer qui permet jusqu’à 100 entrées.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconField:get"><apiName>iconField</apiName><shortdesc>
      Le nom du champ dans l’élément de données à afficher en tant qu’icône.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Le nom du champ dans l’élément de données à afficher en tant qu’icône. Par défaut, <codeph>iconField</codeph> a la valeur <codeph>null</codeph> et le rendu d’élément n’affiche pas d’icône.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconFillMode:get"><apiName>iconFillMode</apiName><shortdesc conref="spark.primitives.BitmapImage#fillMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>mx.graphics.BitmapFillMode.SCALE&lt;/code>
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#fillMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.graphics.BitmapFillMode.xml"><linktext>mx.graphics.BitmapFillMode</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:iconFunction:get"><apiName>iconFunction</apiName><shortdesc>
      Une fonction fournie par l’utilisateur et à exécuter sur chaque élément pour en déterminer leur icône.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Une fonction fournie par l’utilisateur et à exécuter sur chaque élément pour en déterminer leur icône. La propriété <codeph>iconFunction</codeph> remplace la propriété <codeph>iconField</codeph>.
           <p>Vous pouvez fournir une propriété <codeph>iconFunction</codeph> qui recherche les champs appropriés et renvoie une URL ou un objet valide à utiliser comme icône.</p>
           <p>La fonction d’icône accepte un argument unique correspondant à l’élément dans le fournisseur de données et retourne un objet qui est transmis à un objet <codeph>spark.primitives.BitmapImage</codeph> en tant que propriété <codeph>source</codeph>. La fonction d’icône peut renvoyer une URL valide pointant vers une image ou un fichier de classe qui représente une image. Pour voir quels autres types d’objets peuvent être renvoyés par la fonction d’icône, voir la documentation sur <codeph>BitmapImage</codeph>.</p>
      <pre>
      myIconFunction(item:Object):Object</pre>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.xml#BitmapImage/source"><linktext>spark.primitives.BitmapImage.source</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:iconHeight:get"><apiName>iconHeight</apiName><shortdesc>
      La hauteur de l’icône.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
     
      </apiDefaultValue></apiValueDef><apiDesc>
      La hauteur de l’icône. Si elle n’est pas spécifiée, la hauteur intrinsèque de l’image est utilisée.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconPlaceholder:get"><apiName>iconPlaceholder</apiName><shortdesc>
      La ressource de l’icône à utiliser lorsqu’une ressource chargée en externe est en cours de téléchargement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      La ressource de l’icône à utiliser lorsqu’une ressource chargée en externe est en cours de téléchargement.
     
      <p>Cet élément doit être une image incorporée et non chargée de manière externe.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconScaleMode:get"><apiName>iconScaleMode</apiName><shortdesc conref="spark.primitives.BitmapImage#scaleMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>mx.graphics.BitmapScaleMode.STRETCH&lt;/code>
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#scaleMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.graphics.BitmapScaleMode.xml"><linktext>mx.graphics.BitmapScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:iconWidth:get"><apiName>iconWidth</apiName><shortdesc>
      Largeur de l’icône.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Largeur de l’icône. Si elle n’est pas spécifiée, la largeur intrinsèque de l’image est utilisée.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:labelField:get"><apiName>labelField</apiName><shortdesc>
      Le nom du champ dans les éléments dataprovider à afficher en tant qu'étiquette.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Le nom du champ des éléments du fournisseur de données à afficher en tant qu’étiquette. La propriété <codeph>labelFunction</codeph> remplace cette propriété.
     
      <p>Si <codeph>labelFunction</codeph> = <codeph>labelField</codeph> = null, utilisez la propriété <codeph>label</codeph> qui est placée à partir du contrôle basé sur une liste. Toutefois, si <codeph>labelField</codeph> est défini explicitement sur <codeph>""</codeph> (la chaîne vide), aucune étiquette ne s’affiche.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#IconItemRenderer/labelFunction"><linktext>spark.components.IconItemRenderer.labelFunction</linktext></link><link href="" invalidHref="spark.components.xml#IItemRenderer/label"><linktext>spark.components.IItemRenderer.label</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Fonction fournie par l’utilisateur à exécuter sur chaque élément pour en déterminer le libellé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fonction fournie par l’utilisateur à exécuter sur chaque élément pour en déterminer le libellé. La propriété <codeph>labelFunction</codeph> remplace la propriété <codeph>labelField</codeph>.
           <p>Vous pouvez spécifier une valeur <codeph>labelFunction</codeph> recherchant les champs appropriés et renvoyant une chaîne affichable. La propriété <codeph>labelFunction</codeph> permet également de gérer le formatage et la localisation.</p>
           <p>La fonction label accepte un seul argument, en l’occurrence l’élément du fournisseur de données, et renvoie une chaîne.</p>
      <pre>
      myLabelFunction(item:Object):String</pre>
     
      <p>Si <codeph>labelFunction</codeph> = <codeph>labelField</codeph> = null, utilisez la propriété <codeph>label</codeph> qui est placée à partir du contrôle basé sur une liste. Toutefois, si <codeph>labelField</codeph> est défini explicitement sur <codeph>""</codeph> (la chaîne vide), aucune étiquette ne s’affiche.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#IconItemRenderer/labelFunction"><linktext>spark.components.IconItemRenderer.labelFunction</linktext></link><link href="" invalidHref="spark.components.xml#IItemRenderer/label"><linktext>spark.components.IItemRenderer.label</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:messageField:get"><apiName>messageField</apiName><shortdesc>
      Le nom du champ dans les éléments de données à afficher en tant que message.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Le nom du champ dans les éléments de données à afficher en tant que message. La propriété <codeph>messageFunction</codeph> remplace cette propriété.
           <p>Utilisez le style <codeph>messageStyleName</codeph> pour contrôler l’aspect du texte.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:messageFunction:get"><apiName>messageFunction</apiName><shortdesc>
      Fonction fournie par l’utilisateur à exécuter sur chaque élément pour en déterminer le message.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fonction fournie par l’utilisateur à exécuter sur chaque élément pour en déterminer le message. La propriété <codeph>messageFunction</codeph> remplace la propriété <codeph>messageField</codeph>.
           <p>Vous pouvez fournir une propriété <codeph>messageFunction</codeph> qui recherche les champs appropriés et renvoie une chaîne affichable. La propriété <codeph>messageFunction</codeph> permet également de gérer la mise en forme et la localisation.</p>
           <p>La fonction de message accepte un seul argument, en l’occurrence l’élément de fournisseur de données, et renvoie une chaîne.</p>
      <pre>
      myMessageFunction(item:Object):String</pre>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:redrawRequested:get"><apiName>redrawRequested</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:IconItemRenderer:label:set"><apiName>label</apiName><shortdesc>
      Si labelFunction = labelField = null, utilisez la propriété label qui est placée à partir du contrôle de liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      <p>Si <codeph>labelFunction</codeph> = <codeph>labelField</codeph> = null, utilisez la propriété <codeph>label</codeph> qui est placée à partir du contrôle de liste. Toutefois, si <codeph>labelField</codeph> est défini explicitement sur <codeph>""</codeph> (la chaîne vide), aucune étiquette ne s’affiche.</p>
     
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#IconItemRenderer/labelField"><linktext>spark.components.IconItemRenderer.labelField</linktext></link><link href="spark.components.xml#IconItemRenderer/labelFunction"><linktext>spark.components.IconItemRenderer.labelFunction</linktext></link><link href="" invalidHref="spark.components.xml#IItemRenderer/label"><linktext>spark.components.IItemRenderer.label</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:ViewMenuItem"><apiName>ViewMenuItem</apiName><shortdesc>
  Le contrôle ViewMenuItem affiche une étiquette et une icône pour un élément de menu dans le conteneur ViewMenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="showsCaret" owner="spark.components:ViewMenuItem" playerVersion="AIR2.5">
<description>
  l’état d’insertion du bouton représentant l’élément de menu.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ViewMenuItem&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ViewMenuItem/&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle ViewMenuItem affiche une étiquette et une icône pour un élément de menu dans le conteneur ViewMenu. Ecrivez un gestionnaire d’événement pour l’événement <codeph>click</codeph> pour effectuer une opération lorsque l’élément de menu est sélectionné.
 
  <p/>
 
 <p>
  <adobeimage alt="" href="../../images/vm_open_menu_vm.png"/>
 </p>
  
  </apiDesc><example conref="ViewMenuExampleHome.mxml"/><example conref="ViewMenuExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#ViewMenu"><linktext>spark.components.ViewMenu</linktext></link><link href="spark.layouts.xml#ViewMenuLayout"><linktext>spark.layouts.ViewMenuLayout</linktext></link><link href="spark.components.supportClasses.xml#ViewNavigatorApplicationBase"><linktext>spark.components.supportClasses.ViewNavigatorApplicationBase</linktext></link><link href="" invalidHref="spark.skins.mobile.ViewMenuItemSkin.xml"><linktext>spark.skins.mobile.ViewMenuItemSkin</linktext></link></related-links><apiConstructor id="spark.components:ViewMenuItem:ViewMenuItem"><apiName>ViewMenuItem</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ViewMenuItem:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      Contient la valeur true si le contrôle ViewMenuItem est à l’état d’insertion.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Contient la valeur <codeph>true</codeph> si le contrôle ViewMenuItem est à l’état d’insertion. 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:CalloutButton"><apiName>CalloutButton</apiName><shortdesc>
  Le contrôle CalloutButton est un composant de liste déroulante qui définit un bouton permettant d’ouvrir et de fermer un conteneur Callout.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="style" name="repeatInterval"/><Exclude kind="style" name="repeatDelay"/><DefaultProperty name="calloutContent"/><skinParts><SkinPart name="dropDown" owner="spark.components:CalloutButton" playerVersion="AIR3" required="false" var_type="mx.core:IFactory">
<description>
      Partie d’habillage qui définit la fabrique de liste déroulante qui crée l’instance Callout. Si <codeph>dropDown</codeph> n’est pas défini sur l’habillage, un objet <codeph>ClassFactory</codeph> est créé pour générer une instance Callout par défaut.
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the drop-down factory which creates the Callout
      instance.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:CalloutButton&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:CalloutButton
   <strong>Properties</strong>
    calloutDestructionPolicy="auto"
    calloutLayout="BasicLayout"
    horizontalPosition="auto"
    verticalPosition="auto
 
   <strong>Events</strong>
    open="<i>No default</i>"
    close="<i>No default</i>"
      ...
      <i>child tags</i>
      ...
  &lt;/s:CalloutButton&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Button</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle CalloutButton est un composant de liste déroulante qui définit un bouton permettant d’ouvrir et de fermer un conteneur Callout. Le contrôle CalloutButton spécifie la présentation et les composants enfant du conteneur Callout.
   <p/>
  <p>
  <adobeimage alt="" href="../../images/ca_calloutButton_ca.png"/>
 </p>
   <p>Le contrôle CalloutButton utilise la classe spark.components.supportClasses.DropDownController pour gérer le conteneur Callout. Vous pouvez accéder à DropDownController à l’aide de la propriété protégée <codeph>CalloutButton.dropDownController</codeph>.</p>
   <p>Lorsque la légende est ouverte :</p>
  <ul>
    <li>le fait de cliquer sur le bouton ferme la légende ;</li>
    <li>un clic à l’extérieur de la légende provoque sa fermeture.</li>
  </ul>
   <p>Le composant CalloutButton possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Suffisamment large pour afficher l’étiquette de texte du contrôle</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>32 pixels de large et 43 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 pixels de large et 10000 pixels de haut</entry>
        </row><row>
           <entry>Classe d’habillage par défaut</entry>
           <entry>spark.skins.mobile.CalloutButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="CalloutButtonExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#Callout"><linktext>spark.components.Callout</linktext></link><link href="" invalidHref="spark.components.Button.xml"><linktext>spark.components.Button</linktext></link><link href="" invalidHref="spark.components.supportClasses.DropDownController.xml"><linktext>spark.components.supportClasses.DropDownController</linktext></link></related-links><adobeApiEvent id="spark.components:CalloutButton_spark.events.DropDownEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  Distribué lorsque l’utilisateur clique sur le bouton d’ouverture pour afficher la légende.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.OPEN</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur clique sur le bouton d’ouverture pour afficher la légende.  
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:CalloutButton_spark.events.DropDownEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  Distribué lorsque la légende se ferme pour une raison quelconque, par exemple lorsque : La légende est fermée par voie de programmation. L’utilisateur clique en dehors de la légende. L’utilisateur clique sur le bouton ouvrir alors que la légende est affichée.
  
   </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.CLOSE</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la légende se ferme pour une raison quelconque, par exemple lorsque : 
  <ul>
      <li>La légende est fermée par voie de programmation.</li>
      <li>L’utilisateur clique en dehors de la légende.</li>
      <li>L’utilisateur clique sur le bouton ouvrir alors que la légende est affichée.</li>
  </ul>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:CalloutButton:CalloutButton"><apiName>CalloutButton</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:CalloutButton:closeDropDown"><apiName>closeDropDown</apiName><shortdesc>
      Définit l’état de l’habillage sur normal.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Définit l’état de l’habillage sur normal.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:CalloutButton:openDropDown"><apiName>openDropDown</apiName><shortdesc>
      Initialise l’événement dropDown et définit l’état de l’habillage sur ouvert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Initialise l’élément déroulant et définit l’état de l’habillage sur ouvert. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:CalloutButton:calloutContent:get"><apiName>calloutContent</apiName><shortdesc>
      Ensemble de composants à inclure dans le contenu du conteneur Callout.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Ensemble de composants à inclure dans le contenu du conteneur Callout.
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Callout"><linktext>spark.components.Callout</linktext></link></related-links></apiValue><apiValue id="spark.components:CalloutButton:calloutDestructionPolicy:get"><apiName>calloutDestructionPolicy</apiName><shortdesc>
      Définit la stratégie de destruction que le bouton de légende utilise lorsque la légende est fermée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>auto
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Définit la stratégie de destruction que le bouton de légende utilise lorsque la légende est fermée. Si elle est définie sur <codeph>"auto"</codeph>, le bouton détruit l’instance Callout lorsqu’elle est fermée. Si elle est définie sur <codeph>"never"</codeph>, le conteneur Callout est mis en cache dans la mémoire.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:calloutLayout:get"><apiName>calloutLayout</apiName><shortdesc>
      Définit la présentation du conteneur Callout.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>BasicLayout
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Définit la présentation du conteneur Callout.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:callout:get"><apiName>callout</apiName><shortdesc>
      L’instance Callout est créée après le déclenchement de DropDownEvent.OPEN.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="calloutChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:Callout</apiValueClassifier></apiValueDef><apiDesc>
      Instance Callout créée après le déclenchement de <codeph>DropDownEvent.OPEN</codeph>. L’instance est créée à l’aide de la partie d’habillage <codeph>dropDown</codeph> <codeph>IFactory</codeph>.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#CalloutButton/calloutDestructionPolicy"><linktext>calloutDestructionPolicy</linktext></link></related-links></apiValue><apiValue id="spark.components:CalloutButton:protected:dropDownController:get"><apiName>dropDownController</apiName><shortdesc>
      Occurrence de la classe DropDownController qui gère l’ensemble des interactions utilisateur de souris, clavier et focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.components.supportClasses:DropDownController"/></apiValueDef><apiDesc>
      Occurrence de la classe DropDownController qui gère l’ensemble des interactions utilisateur de souris, clavier et focus. Flex appelle la méthode <codeph>initializeDropDownController()</codeph> après création de l’occurrence DropDownController dans le constructeur.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:horizontalPosition:get"><apiName>horizontalPosition</apiName><shortdesc conref="spark.components.Callout#horizontalPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="spark.components.Callout#horizontalPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:isDropDownOpen:get"><apiName>isDropDownOpen</apiName><shortdesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:verticalPosition:get"><apiName>verticalPosition</apiName><shortdesc conref="spark.components.Callout#verticalPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="spark.components.Callout#verticalPosition">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ToggleSwitch"><apiName>ToggleSwitch</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="style" name="textAlign"/><styles><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:ToggleSwitch" playerVersion="AIR3" theme="mobile" type="uint">
<description>
  Couleur des ombres du texte.
 
  </description>
<default>0x000000
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textShadowAlpha" owner="spark.components:ToggleSwitch" playerVersion="AIR3" theme="mobile" type="Number">
<description>
  Alpha des ombres du texte.
 
  </description>
<default>0.65
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="slideDuration" owner="spark.components:ToggleSwitch" playerVersion="AIR3" type="Number">
<description>
  Durée en millisecondes de l’animation du curseur lorsqu’il glisse entre les côtés sélectionnés et non sélectionnés de la piste. Pour les animations entre deux positions arbitraires sur la piste, la durée de l’animation est proportionnellement plus courte. Par exemple, après avoir fait glisser le curseur jusqu’au milieu de la piste, l’animation pour le glissement sur le reste de la piste prend la moitié de la durée.
  
  </description>
<default>125
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components:ToggleSwitch" playerVersion="AIR3" type="uint">
<description>
  Couleur appliquée pour mettre en surbrillance le côté sélectionné du contrôle ToggleSwitch.
  
  </description>
<default>0x3F7FBA
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/><skinParts><SkinPart name="thumb" owner="spark.components:ToggleSwitch" playerVersion="AIR3" required="false" var_type="mx.core:IVisualElement">
<description>
      Partie d’habillage pouvant être déplacée le long de la piste. La propriété <codeph>thumbPosition</codeph> contient la position actuelle du curseur le long de la piste.
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that can be dragged along the track.</shortdesc></SkinPart><SkinPart name="track" owner="spark.components:ToggleSwitch" playerVersion="AIR3" required="false" var_type="mx.core:IVisualElement">
<description>
      Partie d’habillage qui définit les limites le long desquelles le curseur peut être déplacé.
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the bounds along which the thumb can
      be dragged.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:ToggleSwitch&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:ToggleSwitch
   <strong>Properties</strong>
    selected="null"
    thumbPosition="null"
 
   <strong>Common Styles</strong>
    accentColor="0x3F7FBA"
    slideDuration="125"
 
   <strong>Mobile Styles</strong>
    textShadowAlpha="0.65"
    textShadowColor="0x000000"
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
   Le composant ToggleSwitch se compose d’une partie d’habillage de curseur qui se déplace entre les deux extrémités de la partie d’habillage de piste, de manière semblable au contrôle Spark Slider.
   <p> </p>
   <p> </p>
  <p>
  <adobeimage alt="" href="../../images/ts_toggleSwitch_ts.png"/>
 </p>
   <p>  </p>
   <p>Le contrôle ToggleSwitch utilise les valeurs par défaut suivantes pour les étiquettes non sélectionnées et sélectionnées : Désactivé (non sélectionné) et Activé (sélectionné). Définissez un habillage personnalisé pour modifier les étiquettes ou d’autres caractéristiques visuelles du contrôle.</p>
   <p/>
   <pre>
  package skins
  // components\mobile\skins\MyToggleSwitchSkin.as
  {
      import spark.skins.mobile.ToggleSwitchSkin;
      
      public class MyToggleSwitchSkin extends ToggleSwitchSkin
      {
          public function MyToggleSwitchSkin()
          {
              super();
              // Set properties to define the labels 
              // for the selected and unselected positions.
              selectedLabel="Yes";
              unselectedLabel="No"; 
          }
      }
  }
  </pre>
   </apiDesc><example conref="ToggleSwitchExample.mxml"/></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.ToggleButton.xml"><linktext>spark.components.ToggleButton</linktext></link><link href="" invalidHref="spark.components.HSlider.xml"><linktext>spark.components.HSlider</linktext></link><link href="" invalidHref="spark.skins.mobile.ToggleSwitchSkin.xml"><linktext>spark.skins.mobile.ToggleSwitchSkin</linktext></link></related-links><apiConstructor id="spark.components:ToggleSwitch:ToggleSwitch"><apiName>ToggleSwitch</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ToggleSwitch:thumbPosition:get"><apiName>thumbPosition</apiName><shortdesc>
      Position actuelle du curseur le long de la piste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Position actuelle du curseur le long de la piste. La plage de valeurs correspond à 0,0 (non sélectionné) et 1,0 (sélectionné).
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ToggleSwitch:selected:set"><apiName>selected</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef><apiDesc>
       <codeph/><codeph/>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:CalloutPosition"><apiName>CalloutPosition</apiName><shortdesc>
  La classe CalloutPosition définit l’énumération des positions horizontales et verticales du composant Callout par rapport au propriétaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe CalloutPosition définit l’énumération des positions horizontales et verticales du composant Callout par rapport au propriétaire.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Callout"><linktext>spark.components.Callout</linktext></link><link href="spark.components.xml#Callout/horizontalPosition"><linktext>spark.components.Callout.Horizontalposition</linktext></link><link href="spark.components.xml#Callout/verticalPosition"><linktext>spark.components.Callout.Verticalposition</linktext></link></related-links><apiValue id="spark.components:CalloutPosition:AFTER"><apiName>AFTER</apiName><shortdesc>
      Placez le bord du début de la légende après le bord de fin du propriétaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>after</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Placez le bord du début de la légende après le bord de fin du propriétaire.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:AUTO"><apiName>AUTO</apiName><shortdesc>
      Placez la légende à l’extérieur du propriétaire, où le redimmensionnement requis sera moindre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Placez la légende à l’extérieur du propriétaire, où le redimmensionnement requis sera moindre.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:BEFORE"><apiName>BEFORE</apiName><shortdesc>
      Placez le bord de fin de la légende avant le bord de début du propriétaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>before</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Placez le bord de fin de la légende avant le bord de début du propriétaire.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:END"><apiName>END</apiName><shortdesc>
      Placez le bord de fin de la légende sur le bord de fin du propriétaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>end</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Placez le bord de fin de la légende sur le bord de fin du propriétaire.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:MIDDLE"><apiName>MIDDLE</apiName><shortdesc>
      Définissez la même contrainte horizontalCenter pour la légende et le propriétaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middle</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Définissez la même contrainte horizontalCenter pour la légende et le propriétaire.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:START"><apiName>START</apiName><shortdesc>
      Placez le bord de début de la légende sur le bord du début du propriétaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>start</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Placez le bord de début de la légende sur le bord du début du propriétaire.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:SpinnerListItemRenderer"><apiName>SpinnerListItemRenderer</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:LabelItemRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>
   Il s’agit d’un rendu d’élément simple avec un seul composant de texte.
 
 </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#SpinnerList"><linktext>spark.components.SpinnerList</linktext></link></related-links><apiConstructor id="spark.components:SpinnerListItemRenderer:SpinnerListItemRenderer"><apiName>SpinnerListItemRenderer</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
            
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:DateSpinner"><apiName>DateSpinner</apiName><shortdesc>
  Le contrôle DateSpinner présente une interface permettant de choisir une date ou une heure données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="style" name="textAlign"/><styles><style format="Color" inherit="yes" name="accentColor" owner="spark.components:DateSpinner" playerVersion="AIR3" type="uint">
<description>
  Couleur appliquée pour les éléments de date qui correspondent à la date d’aujourd’hui. Par exemple, si cette option est définie sur « 0x0000FF » et que la date d’aujourd’hui est égale à 1/1/2011, alors le mois « janvier », la date « 1 » et l’année « 2011 » figurent en texte bleu sur les éléments Spinner. Cette couleur n’est pas appliquée aux éléments d’heure.
 
  <p/>
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:DateSpinner" playerVersion="AIR3" type="String">
<description>
  Paramètre régional du composant. Contrôle la mise en forme des dates, par exemple l’ordre des champs et les autres caractères associés à la date affichés, le cas échéant. Utilisez les identifiants de langue standard tels que décrits dans la norme technique Unicode #35. Par exemple « en », « en_US » et « en-US » pour l’anglais, « ja » pour le japonais. Si le paramètre régional spécifié n’est pas pris en charge sur la plateforme, « en_US » est utilisé. Pour déterminer si un paramètre régional est pris en charge, utilisez <codeph>DateTimeFormatter.getAvailableLocaleIDNames()</codeph>.
   <p>La valeur par défaut est undefined. Cette propriété hérite de sa valeur d’un ancêtre ; si elle n’est pas encore définie, elle hérite du style de <codeph>langue</codeph> global.</p>
   <p>Lors de l’utilisation des classes de formatage et globalisation Spark, vous pouvez définir ce style pour l’application racine sur la valeur de la constante <codeph>LocaleID.DEFAULT</codeph>. Ces classes utiliseront ensuite les préférences internationales du système d’exploitation du client.</p>
   </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur (en pixels). Cette propriété ne peut pas être une valeur négative lorsqu’elle est utilisée avec le thème Mobile.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
   <p>La valeur par défaut est 0.</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="String">
<description>
  Détermine si le texte doit être en gras. Les valeurs reconnues sont <codeph>normal</codeph> et <codeph>bold</codeph>. La valeur par défaut du contrôle Button est <codeph>bold</codeph>. La valeur par défaut de tous les autres contrôles est <codeph>normal</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="Number">
<description>
  Hauteur du texte, en pixels. Dans le thème Halo, la valeur par défaut est 10 pour tous les contrôles sauf ColorPicker. Pour le contrôle ColorPicker avec thème Halo, la valeur par défaut est 11. Dans le thème Spark, la valeur par défaut est 12 pour tous les contrôles sauf ColorPicker. Pour le contrôle ColorPicker avec thème Spark, la valeur par défaut est 11. La valeur par défaut du thème Mobile est 24.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée. La police par défaut du thème Halo est <codeph>"Verdana"</codeph>. La police par défaut du thème Spark est <codeph>"Arial"</codeph>. La police par défaut du thème Mobile est <codeph>"_sans"</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="uint">
<description>
  Couleur de texte dans le composant, y compris l’étiquette du composant. La valeur par défaut du thème Halo est <codeph>0x0B333C</codeph>. La valeur par défaut du thème Spark est <codeph>0x000000</codeph>. La valeur par défaut du thème Mobile est <codeph>0xFFFFFF</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="dateItemList" owner="spark.components:DateSpinner" playerVersion="AIR3" required="false" var_type="mx.core:IFactory">
<description>
      Fabrique par défaut pour la création d’interfaces SpinnerList pour tous les champs. <codeph/>
     
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      The default factory for creating SpinnerList interfaces for all fields.</shortdesc></SkinPart><SkinPart name="listContainer" owner="spark.components:DateSpinner" playerVersion="AIR3" required="false" var_type="mx.core:IVisualElementContainer">
<description>
      
     
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      The container for the date part lists.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DateSpinner&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DateSpinner
    <strong>Properties</strong>
    displayMode="date|time|dateAndTime"
    maxDate="null"
    minDate="null"
    minuteStepSize="1"
    selectedDate=""
 
    <strong>Styles</strong>
    accentColor="0x0099FF"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle DateSpinner présente une interface permettant de choisir une date ou une heure données. 
 
 <p>Le contrôle DateSpinner peut afficher la date, l’heure ou la date et l’heure, selon la valeur de la propriété <codeph>displayMode</codeph>.</p>
 
  <p/>
  <p>
  <adobeimage alt="" href="../../images/datespinner_types.png"/>
 </p>
 
  <p>L’interface utilisateur pour le contrôle est composée d’une série de contrôles SpinnerList, enveloppés dans un conteneur SpinnerListContainer qui affiche la date actuellement sélectionnée. Les utilisateurs peuvent ajuster la date sélectionnée par interaction tactile ou à l’aide de la souris.</p>
 
  <p>L’habillage DateSpinnerSkin définit uniquement certaines propriétés de dimensionnement. Pour modifier l’aspect du contrôle DateSpinner, en règle générale, vous modifiez les habillages SpinnerListSkin ou SpinnerListContainerSkin sous-jacents.</p>
 
  </apiDesc><example conref="DateSpinnerExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#SpinnerList"><linktext>spark.components.SpinnerList</linktext></link><link href="spark.components.calendarClasses.xml#DateSpinnerItemRenderer"><linktext/></link><link href="" invalidHref="spark.skins.mobile.DateSpinnerSkin.xml"><linktext/></link></related-links><adobeApiEvent id="spark.components:DateSpinner_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  Distribué après la modification de la date sélectionnée, soit par l’utilisateur (c’est-à-dire de façon interactive), soit par programmation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après la modification de la date sélectionnée, soit par l’utilisateur (c’est-à-dire de façon interactive), soit par programmation.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DateSpinner_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué après la modification de la date sélectionnée par l’utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après la modification de la date sélectionnée par l’utilisateur.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DateSpinner:DateSpinner"><apiName>DateSpinner</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:DateSpinner:protected:createDateItemList"><apiName>createDateItemList</apiName><shortdesc>
      Créez un objet de liste pour la partie de date spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>
     </apiDesc><apiOperationClassifier>spark.components:SpinnerList</apiOperationClassifier></apiReturn><apiParam><apiItemName>datePart</apiItemName><apiType value="String"/><apiDesc>Utilisez des constantes de partie de date, par exemple YEAR_ITEM.
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>
      </apiDesc></apiParam><apiParam><apiItemName>itemCount</apiItemName><apiType value="int"/><apiDesc>
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Créez un objet de liste pour la partie de date spécifiée.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:DateSpinner:protected:DATE_ITEM"><apiName>DATE_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>dateItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:HOUR_ITEM"><apiName>HOUR_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>hourItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:MERIDIAN_ITEM"><apiName>MERIDIAN_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>meridianItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:MINUTE_ITEM"><apiName>MINUTE_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>minuteItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:MONTH_ITEM"><apiName>MONTH_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>monthItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:YEAR_ITEM"><apiName>YEAR_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>yearItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:dateList"><apiName>dateList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:hourList"><apiName>hourList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:meridianList"><apiName>meridianList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:minuteList"><apiName>minuteList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:monthList"><apiName>monthList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:yearList"><apiName>yearList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:displayMode:get"><apiName>displayMode</apiName><shortdesc>
      Mode actuellement utilisé par le composant DateSpinner pour l’affichage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>DateSelectorDisplayMode.DATE
      </apiDefaultValue></apiValueDef><apiDesc>
      Mode actuellement utilisé par le composant DateSpinner pour l’affichage. Vous pouvez définir cette valeur sur les constantes définies dans la classe DateSelectorDisplayMode ou sur leurs équivalents de type chaîne.
     
      <p>Le tableau suivant présente les valeurs possibles :
         <adobetable class="innertable">
         
         
         
         
         <tgroup cols="2"><thead><row><entry>Mode (équivalent de type chaîne)</entry><entry>Description</entry></row></thead><tbody><row><entry><codeph>DateSelectorDisplayMode.DATE</codeph> ("date")</entry><entry>Affiche le mois, le jour et l’année. Il s’agit du mode par défaut.</entry></row><row><entry><codeph>DateSelectorDisplayMode.TIME</codeph> ("time")</entry><entry>Affiche le jour de la semaine, le mois, le jour et l’heure.</entry></row><row><entry><codeph>DateSelectorDisplayMode.DATE_AND_TIME</codeph> ("dateAndTime")</entry><entry>Affiche les heures et minutes et, si le paramètre régional le prend en charge, le sélecteur AM/PM.</entry></row></tbody></tgroup></adobetable>
       </p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.components.calendarClasses.DateSelectorDisplayMode.xml"><linktext>spark.components.calendarClasses.DateSelectorDisplayMode</linktext></link></related-links></apiValue><apiValue id="spark.components:DateSpinner:maxDate:get"><apiName>maxDate</apiName><shortdesc>
      Date maximale sélectionnable ; seule cette date et les dates précédentes sont sélectionnables.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>Dec 31st, 9999
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Date maximale sélectionnable ; seule cette date et les dates précédentes sont sélectionnables.
     
      <p/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:minDate:get"><apiName>minDate</apiName><shortdesc>
      Date minimale sélectionnable ; seule cette date et les dates suivantes sont sélectionnables.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>January 1st, 1601
      </apiDefaultValue></apiValueDef><apiDesc>
      Date minimale sélectionnable ; seule cette date et les dates suivantes sont sélectionnables.
     
      <p/>
     
      <p/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:minuteStepSize:get"><apiName>minuteStepSize</apiName><shortdesc>
      Intervalle de minutes à utiliser lors de l’affichage des minutes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>1
      </apiDefaultValue></apiValueDef><apiDesc>
      Intervalle de minutes à utiliser lors de l’affichage des minutes. Applicable uniquement dans les modes TIME et DATE_AND_TIME. Les valeurs valides doivent être des diviseurs de 60 ; les valeurs non valides renvoient à l’intervalle par défaut de 1. Par exemple, la valeur « 15 » affiche les valeurs 0, 15, 30, 45.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:selectedDate:get"><apiName>selectedDate</apiName><shortdesc>
      Date actuellement sélectionnée dans le contrôle DateSpinner.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>the current date
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Date actuellement sélectionnée dans le contrôle DateSpinner.
     
      <p> </p>
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Callout"><apiName>Callout</apiName><shortdesc>
  Le conteneur Callout est de type SkinnablePopUpContainer et fonctionne comme une fenêtre contextuelle avec d’autres options de positionnement liées au propriétaire, semblables à PopUpAnchor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><styles><style enumeration="inset,flat,none" inherit="no" name="contentBackgroundAppearance" owner="spark.components:Callout" playerVersion="AIR3" type="String">
<description>
  Aspect du composant <codeph>contentGroup</codeph>. <codeph/><codeph/><codeph/>
   <p>Dans ActionScript, vous pouvez utiliser les constantes suivantes pour définir cette propriété : <codeph>ContentBackgroundAppearance.INSET</codeph>, <codeph>ContentBackgroundAppearance.FLAT</codeph> et <codeph>ContentBackgroundAppearance.NONE</codeph>.</p>
   </description>
<default>ContentBackgroundAppearance.INSET
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="arrow" owner="spark.components:Callout" playerVersion="AIR3" required="false" var_type="mx.core:UIComponent">
<description>
      Partie d’habillage facultative connectant le propriétaire au contentGroup de manière visuelle.
           </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that visually connects the owner to the
      contentGroup.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Callout&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Callout
    <strong>Properties</strong>
    horizontalPosition="auto"
    verticalPosition="auto"
     <strong>Styles</strong>
    contentBackgroundAppearance="inset"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnablePopUpContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le conteneur Callout est de type SkinnablePopUpContainer et fonctionne comme une fenêtre contextuelle avec d’autres options de positionnement liées au propriétaire, semblables à PopUpAnchor. Le composant Callout ajoute également une partie d’habillage facultative <codeph>arrow</codeph> qui affiche visuellement la direction vers le propriétaire.
   <p/>
  <p>
  <adobeimage alt="" href="../../images/ca_calloutViewNav_ca.png"/>
 </p>
   <p>Vous pouvez également utiliser le contrôle CalloutButton pour ouvrir un conteneur de légende. Le contrôle CalloutButton encapsule dans un contrôle unique le conteneur de légende et l’ensemble de la logique nécessaire pour ouvrir et fermer la légende. Le contrôle CalloutButton est alors considéré comme la propriétaire, ou l’hôte, de la légende.</p>
   <p>Le composant Callout utilise les propriétés <codeph>horizontalPosition</codeph> et <codeph>verticalPosition</codeph> pour déterminer sa position par rapport au propriétaire spécifié par la méthode <codeph>open()</codeph>. Les deux propriétés peuvent être définies sur <codeph>CalloutPosition.AUTO</codeph>, ce qui sélectionne une position basée sur les proportions de l’écran, pour adapter la taille du conteneur Callout avec un chevauchement minimal avec le propriétaire et des ajustements minimum sur les limites de l’écran.</p>
   <p>Une fois positionné, le conteneur Callout positionne la flèche sur le côté adjacent à son propriétaire, centrée aussi près que possible sur le centre horizontal ou vertical du propriétaire, selon le cas. La flèche est masquée dans les cas où la position du conteneur Callout n’est adjacente à aucun bord.</p>
   <p>Vous ne pouvez pas créer un conteneur Callout en tant que partie intégrante de la présentation de son conteneur parent. Au lieu de cela, il s’affiche comme un conteneur contextuel au-dessus de l’objet parent. Par conséquent, vous ne créez pas directement dans le code MXML de votre application.</p>
   <p>Au lieu de cela, vous créez est en tant que composant MXML, souvent dans un autre fichier MXML. Pour afficher le composant créer une instance du composant MXML, puis appelez la <codeph>open()</codeph> méthode. Vous pouvez également définir la taille et la position du composant lors de l'ouverture de ce document.</p>
   <p>Pour fermer le composant, appelez la méthode <codeph>close()</codeph>. Si la fenêtre contextuelle doit renvoyer des données à un gestionnaire, vous pouvez ajouter un écouteur pour l’événement <codeph>PopUp.CLOSE</codeph> et spécifier les données renvoyées dans la méthode <codeph>close()</codeph>.</p>
   <p>Le composant Callout est initialement dans son état d’habillage <codeph>closed</codeph>. Lorsqu'il s'ouvre, il ajoute lui-même comme une fenêtre contextuelle à l'occurrence PopUpManager, et la transition vers la <codeph>normal</codeph> état d'habillage. Pour définir des animations d’ouverture et de fermeture, utilisez un habillage personnalisé avec des transitions entre les états d’habillage <codeph>closed</codeph> et <codeph>normal</codeph>.</p>
 
  <p>Le conteneur Callout change le comportement d’héritage par défaut observé pour les composants Flex et hérite des styles à partir de l’application de plus haut niveau. Cela permet d’éviter que le contenu du conteneur Callout hérite accidentellement de styles à partir d’un propriétaire (de type Button ou TextInput) lorsque l’aspect par défaut est souhaité et prévu.</p>
   <p>Le conteneur Callout présente les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
     
     
     
     
     
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row><entry>Taille par défaut</entry><entry>Suffisamment grand pour afficher ses enfants </entry></row><row><entry>Taille minimale</entry><entry>0 pixel</entry></row><row><entry>Taille minimale</entry><entry>10000 pixels de large et 10000 pixels de haut</entry></row><row><entry>Classe d’habillage par défaut</entry><entry>spark.skins.mobile.CalloutSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="CalloutExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#CalloutButton"><linktext>spark.components.CalloutButton</linktext></link><link href="" invalidHref="spark.skins.mobile.CalloutSkin.xml"><linktext>spark.skins.mobile.CalloutSkin</linktext></link><link href="spark.components.xml#ContentBackgroundAppearance"><linktext>spark.components.ContentBackgroundAppearance</linktext></link><link href="spark.components.xml#CalloutPosition"><linktext>spark.components.CalloutPosition</linktext></link></related-links><apiConstructor id="spark.components:Callout:Callout"><apiName>Callout</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
           </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Callout:protected:updateSkinDisplayList"><apiName>updateSkinDisplayList</apiName><shortdesc>
      Définit les limites des flèches dont la géométrie n’est pas entièrement spécifiée par la présentation de l’habillage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Définit les limites des éléments <codeph>arrow</codeph> dont la géométrie n’est pas entièrement spécifiée par la présentation de l’habillage.
           <p>Les sous-classes peuvent remplacer cette méthode pour mettre à jour la taille, la position et la visibilité de la flèche, en fonction de la propriété <codeph>arrowDirection</codeph> calculée.</p>
           <p>Par défaut, cette méthode aligne la flèche avec les limites les plus courtes de la <codeph>flèche</codeph> ou du <codeph>propriétaire</codeph>. Cette implémentation suppose que l’élément <codeph>arrow</codeph> et l’habillage du composant Callout partagent le même espace de coordonnées.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:Callout:protected:actualHorizontalPosition:get"><apiName>actualHorizontalPosition</apiName><shortdesc>
      Position horizontale entièrement résolue après l’évaluation de CalloutPosition.AUTO.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Position horizontale entièrement résolue après l’évaluation de CalloutPosition.AUTO.
     
      <p>Mettez à jour cette propriété dans <codeph>commitProperties()</codeph> lorsque la valeur explicite <codeph>horizontalPosition</codeph> est CalloutPosition.AUTO. <codeph/></p> 
      
      <p>Les sous-classes doivent lire cette propriété lors du calcul de <codeph>arrowDirection</codeph>, la position de la flèche dans <codeph>updateSkinDisplayList()</codeph>.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Callout:protected:actualVerticalPosition:get"><apiName>actualVerticalPosition</apiName><shortdesc>
      Position verticale entièrement résolue après l’évaluation de CalloutPosition.AUTO.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Position verticale entièrement résolue après l’évaluation de CalloutPosition.AUTO.
     
      <p>Mettez à jour cette propriété dans <codeph>commitProperties()</codeph> lorsque la valeur explicite <codeph>verticalPosition</codeph> est CalloutPosition.AUTO. <codeph/></p> 
      
      <p>Les sous-classes doivent lire cette propriété lors du calcul de <codeph>arrowDirection</codeph>, la position de la flèche dans <codeph>updateSkinDisplayList()</codeph>.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Callout:arrowDirection:get"><apiName>arrowDirection</apiName><shortdesc>
      Propriété en lecture seule indiquant la direction de la légende au propriétaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/><apiDefaultValue>none
           </apiDefaultValue></apiValueDef><apiDesc>
      Propriété en lecture seule indiquant la direction de la légende au propriétaire.
           <p>Cette valeur est calculée en fonction de la position de la légende fournie par les contraintes <codeph>horizontalPosition</codeph> et <codeph>verticalPosition</codeph>. Les positions intérieures et extérieures pointeront de la légende vers le bord du propriétaire. Les positions de coin et de centre absolu ne sont pas prises en charge et renverront la valeur <codeph>« none ».</codeph></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ArrowDirection"><linktext>spark.components.ArrowDirection</linktext></link></related-links></apiValue><apiValue id="spark.components:Callout:horizontalPosition:get"><apiName>horizontalPosition</apiName><shortdesc>
      Position horizontale de la légende par rapport au propriétaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>CalloutPosition.AUTO
      </apiDefaultValue></apiValueDef><apiDesc>
      Position horizontale de la légende par rapport au propriétaire.
           <p>Les valeurs possibles sont <codeph>« before »,</codeph> <codeph>« start »,</codeph> <codeph>« middle »</codeph>, <codeph>« end »</codeph>, <codeph>« after »</codeph>et <codeph>« auto »</codeph> (par défaut).</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#CalloutPosition"><linktext>spark.components.CalloutPosition</linktext></link></related-links></apiValue><apiValue id="spark.components:Callout:verticalPosition:get"><apiName>verticalPosition</apiName><shortdesc>
      Position verticale de la légende par rapport au propriétaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>CalloutPosition.AUTO
      </apiDefaultValue></apiValueDef><apiDesc>
      Position verticale de la légende par rapport au propriétaire.
           <p>Les valeurs possibles sont <codeph>« before »,</codeph> <codeph>« start »,</codeph> <codeph>« middle »</codeph>, <codeph>« end »</codeph>, <codeph>« after »</codeph>et <codeph>« auto »</codeph> (par défaut).</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#CalloutPosition"><linktext>spark.components.CalloutPosition</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:ViewMenu"><apiName>ViewMenu</apiName><shortdesc>
  Le conteneur ViewMenu définit un menu dans un conteneur View.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="disabledAndLandscape" owner="spark.components:ViewMenu" playerVersion="AIR2.5">
<description>
  Désactivé et état de paysage.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="closedAndLandscape" owner="spark.components:ViewMenu" playerVersion="AIR2.5">
<description>
  Fermé et état de paysage.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="normalAndLandscape" owner="spark.components:ViewMenu" playerVersion="AIR2.5">
<description>
  Normal et état de paysage.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="items"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components:SkinnablePopUpContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le conteneur ViewMenu définit un menu dans un conteneur View. Chaque élément de menu est défini à l’aide du contrôle ViewMenuItem. Le conteneur d’application crée et affiche automatiquement un conteneur ViewMenu lorsque l’utilisateur appuie sur le bouton de menu du périphérique. Vous pouvez également utiliser la propriété <codeph>ViewNavigatorApplicationBase.viewMenuOpen</codeph> pour ouvrir le menu par programmation.
 
  <p/>
 
 <p>
  <adobeimage alt="" href="../../images/vm_open_menu_vm.png"/>
 </p>
 
  <p>La classe ViewMenuLayout définit la présentation du menu. Alternativement, vous pouvez créer votre propre classe de présentation personnalisée.</p>
 
  <p>Définissez les éléments de menu à l’aide de la propriété <codeph>View.viewMenuItems</codeph>, comme l’illustre l’exemple suivant :</p>
  
  <pre>
  &lt;s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
      xmlns:s="library://ns.adobe.com/flex/spark" 
      title="Home"> 
 
    ...
 
    &lt;s:viewMenuItems> 
        &lt;s:ViewMenuItem label="Add" click="itemClickInfo(event);"/> 
        &lt;s:ViewMenuItem label="Cancel" click="itemClickInfo(event);"/> 
        &lt;s:ViewMenuItem label="Delete" click="itemClickInfo(event);"/> 
        &lt;s:ViewMenuItem label="Edit" click="itemClickInfo(event);"/> 
        &lt;s:ViewMenuItem label="Search" click="itemClickInfo(event);"/> 
    &lt;/s:viewMenuItems>
 
  &lt;/s:View>
  </pre>
 
  <p>Remarquez que vous ne définissez pas explicitement le conteneur ViewMenu dans MXML. Le conteneur ViewMenu est créé automatiquement pour contenir les contrôles ViewMenuItem.</p>
  
  </apiDesc><example conref="ViewMenuExampleHome.mxml"/><example conref="ViewMenuExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#ViewMenuItem"><linktext>spark.components.ViewMenuItem</linktext></link><link href="spark.layouts.xml#ViewMenuLayout"><linktext>spark.layouts.ViewMenuLayout</linktext></link><link href="spark.components.supportClasses.xml#ViewNavigatorApplicationBase"><linktext>spark.components.supportClasses.ViewNavigatorApplicationBase</linktext></link><link href="" invalidHref="spark.skins.mobile.ViewMenuSkin.xml"><linktext>spark.skins.mobile.ViewMenuSkin</linktext></link></related-links><apiConstructor id="spark.components:ViewMenu:ViewMenu"><apiName>ViewMenu</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ViewMenu:caretIndex:get"><apiName>caretIndex</apiName><shortdesc>
      L'élément de menu qui est actuellement à l'état d'insertion. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      L’élément de menu qui est actuellement à l’état d’insertion. Une valeur de -1 signifie qu’aucun élément n’est à l’état d’insertion.  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewMenu:items:get"><apiName>items</apiName><shortdesc>
      Le vecteur des contrôles ViewMenuItem à afficher dans le conteneur ViewMenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components:ViewMenuItem"/></apiValueDef><apiDesc>
      Le vecteur des contrôles ViewMenuItem à afficher dans le conteneur ViewMenu.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TabbedViewNavigator"><apiName>TabbedViewNavigator</apiName><shortdesc>
  La classe TabbedViewNavigator est un conteneur qui gère un ensemble de conteneurs de navigateurs de vue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="tabBar" owner="spark.components:TabbedViewNavigator" playerVersion="AIR2.5" required="false" var_type="spark.components.supportClasses:ButtonBarBase">
<description>
      Partie de l’habillage qui définit la barre d’onglets du navigateur. 
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the tab bar of the navigator.</shortdesc></SkinPart></skinParts></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ISelectableList</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe TabbedViewNavigator est un conteneur qui gère une collection de conteneurs de navigateurs de vue. Un seul navigateur de vue est actif et visible à la fois. Cette classe inclut un contrôle TabBar qui fournit la possibilité d’alterner entre la collection des navigateurs de vue.  
   <p/>
  <p>
  <adobeimage alt="" href="../../images/tvn_sections_with_ab_tvn.png"/>
 </p>
   <p>Le conteneur TabbedViewNavigatorApplication crée automatiquement un seul conteneur TabbedViewNavigator pour l’intégralité de l’application. Vous pouvez référencer l’objet TabbedViewNavigator à l’aide de la propriété <codeph>navigator</codeph> du conteneur TabbedViewNavigatorApplication.</p>
 
  <p>Le navigateur actif ou sélectionné peut être modifié en cliquant sur l’onglet correspondant dans le conteneur TabBar ou en modifiant la propriété <codeph>selectedIndex</codeph> du composant.</p>
 
  <p>Le contenu d’un navigateur de vue enfant est supprimé lorsqu’il est désactivé et créé dynamiquement lorsqu’il est activé.</p>  
 
  </apiDesc><example conref="TabbedViewNavigatorExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#View"><linktext>spark.components.View</linktext></link><link href="spark.components.xml#ViewNavigator"><linktext>spark.components.ViewNavigator</linktext></link><link href="" invalidHref="spark.components.TabBar.xml"><linktext>spark.components.TabBar</linktext></link></related-links><adobeApiEvent id="spark.components:TabbedViewNavigator_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  Distribué lorsque l’index sélectionné du navigateur de vue change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’index sélectionné du navigateur de vue change. Lorsque cet événement est distribué, les propriétés <codeph>selectedIndex</codeph> et <codeph>selectedNavigator</codeph> font référence au navigateur de vue nouvellement sélectionné.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TabbedViewNavigator_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  Distribué lorsque la collection de navigateurs de vue gérés par le composant TabbedViewNavigator change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la collection de navigateurs de vue gérés par le composant TabbedViewNavigator change.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TabbedViewNavigator_spark.events.IndexChangeEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  Distribué avant que le navigateur de vue sélectionné ne change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué avant que le navigateur de vue sélectionné ne change. L’annulation de cet événement empêche le navigateur de vue actif de changer.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TabbedViewNavigator_spark.events.IndexChangeEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsque le navigateur de vue actif change à la suite d’une modification de la propriété selectedIndex ou d’une modification de l’onglet sélectionné dans le contrôle TabBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le navigateur de vue actif change à la suite d’une modification de la propriété <codeph>selectedIndex</codeph> ou d’une modification de l’onglet sélectionné dans le contrôle TabBar.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:TabbedViewNavigator:TabbedViewNavigator"><apiName>TabbedViewNavigator</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:TabbedViewNavigator:addItemAt"><apiName>addItemAt</apiName><shortdesc>
      Ajoute le navigateur de vue à l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si l’index est inférieur à 0 ou supérieur à la longueur
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Le navigateur de vue à ajouter. Il doit étendre la classe <codeph>ViewNavigatorBase</codeph>.
           </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index auquel placer l’élément.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute le navigateur de vue à l’index spécifié. Tout navigateur de vue qui se trouvait après cet index est descendu d’un cran.   
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ViewNavigatorBase"><linktext>spark.components.supportClasses.ViewNavigatorBase</linktext></link></related-links></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:addItem"><apiName>addItem</apiName><shortdesc>
      Ajoute le navigateur de vue spécifié à la fin de la liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Le navigateur de vue à ajouter. Il doit étendre la classe <codeph>ViewNavigatorBase</codeph>.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute le navigateur de vue spécifié à la fin de la liste. Equivaut à appeler la méthode <codeph>addItemAt(item, length);</codeph>. 
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ViewNavigatorBase"><linktext>spark.components.supportClasses.ViewNavigatorBase</linktext></link></related-links></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:protected:createTabBarHideEffect"><apiName>createTabBarHideEffect</apiName><shortdesc>
      Crée l’effet à lire lorsque le contrôle TabBar est masqué.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Effet à lire lorsque le contrôle TabBar est masqué.
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn></apiOperationDef><apiDesc>
      Crée l’effet à lire lorsque le contrôle TabBar est masqué. L’effet produit est responsable de l’animation du contrôle TabBar et du groupe de contenu du navigateur.
     
      <p>TabbedViewNavigator s’attend à ce que les propriétés <codeph>includeInLayout</codeph> et <codeph>visible</codeph> du composant TabBar aient la valeur <codeph>false </codeph> après l’exécution de cet effet.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:protected:createTabBarShowEffect"><apiName>createTabBarShowEffect</apiName><shortdesc>
      Crée l’effet à lire lorsque le contrôle TabBar est affiché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Effet à lire lorsque le contrôle TabBar est affiché.
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn></apiOperationDef><apiDesc>
      Crée l’effet à lire lorsque le contrôle TabBar est affiché. L’effet produit est responsable de l’animation du contrôle TabBar et du groupe de contenu du navigateur.
     
      <p>TabbedViewNavigator s’attend à ce que les propriétés <codeph>includeInLayout</codeph> et <codeph>visible</codeph> du composant TabBar aient la valeur <codeph>true </codeph> après l’exécution de cet effet.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:getItemAt"><apiName>getItemAt</apiName><shortdesc>
      Obtient l’objet de navigateur de vue à l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si l’index &lt; 0 ou l’index >= longueur
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Le navigateur au niveau de l’index spécifié, ou null s’il n’en existe aucun.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de la liste à partir duquel extraire l’élément.
     
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Indique le nombre d’éléments à récupérer au cours de la demande si l’élément n’est pas local, ainsi que leur direction.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Obtient l’objet de navigateur de vue à l’index spécifié.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:getItemIndex"><apiName>getItemIndex</apiName><shortdesc>
      Renvoie l’index du navigateur de vue s’il se trouve dans la liste des navigateurs de vue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>L’index du navigateur de vue ou -1 s’il ne se trouve pas dans la liste.
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>L’objet du navigateur de vue à localiser.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie l’index du navigateur de vue s’il se trouve dans la liste des navigateurs de vue. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:hideTabBar"><apiName>hideTabBar</apiName><shortdesc>
      Masque la barre d’onglets du navigateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>animate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Indique si un effet de masquage doit s’exécuter lorsque la barre d’onglets disparaît.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Masque la barre d’onglets du navigateur.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      Avertit les composants externes qu’une propriété sur un navigateur de vue a été mise à jour.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Le navigateur de vue qui a été mis à jour.
           </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Chaîne, valeur QName ou entier indiquant la propriété modifiée.
           </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Ancienne valeur de cette propriété Si la valeur de la propriété était null, il peut s’agir de l’ancienne valeur de l’élément.
           </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Nouvelle valeur de cette propriété Si la valeur de la propriété était null, il n’est pas nécessaire de la spécifier, car l’élément est supposé correspondre à la nouvelle valeur.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Avertit les composants externes qu’une propriété sur un navigateur de vue a été mise à jour.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:removeAll"><apiName>removeAll</apiName><shortdesc>
      Supprime tous les navigateurs de vue enfants à partir du navigateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Supprime tous les navigateurs de vue enfants à partir du navigateur.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:removeItemAt"><apiName>removeItemAt</apiName><shortdesc>
      Supprimez le navigateur de vue qui se trouve à l’index spécifié et renvoyez-le.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si l’index &lt; 0 ou l’index >= length.
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Elément qui a été supprimé.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index auquel l’élément doit être supprimé.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprimez le navigateur de vue qui se trouve à l’index spécifié et renvoyez-le. L’index de tous les éléments qui se trouvaient après cet index est réduit d’une unité.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:setItemAt"><apiName>setItemAt</apiName><shortdesc>
      Ajoute le navigateur de vue à l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si l’index est inférieur à 0 ou supérieur ou égal à la longueur
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Le navigateur de vue remplacé ou null si aucun navigateur n’a été remplacé.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Le navigateur de vue à placer au niveau de l’index.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>L’index au niveau duquel placer le navigateur.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute le navigateur de vue à l’index spécifié. Si un élément se trouvait déjà au niveau de cet index, le nouvel élément le remplace et il est renvoyé.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:showTabBar"><apiName>showTabBar</apiName><shortdesc>
      Affiche la barre d’onglets du navigateur
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>animate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Indique si un effet d’affichage doit s’exécuter lorsque la barre d’onglets apparaît.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Affiche la barre d’onglets du navigateur
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:toArray"><apiName>toArray</apiName><shortdesc>
      Renvoyez un tableau rempli dans le même ordre que l’implémentation de l’interface IList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Le tableau.
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Renvoyez un tableau rempli dans le même ordre que l’implémentation de l’interface IList. 
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:TabbedViewNavigator:length:get"><apiName>length</apiName><shortdesc>
      Le nombre de navigateurs de vue enfants gérés par ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Le nombre de navigateurs de vue enfants géré par ce composant.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TabbedViewNavigator:navigators:get"><apiName>navigators</apiName><shortdesc>
      Les navigateurs de vue qui sont gérés par le composant TabbedViewNavigator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components.supportClasses:ViewNavigatorBase"/></apiValueDef><apiDesc>
      Les navigateurs de vue qui sont gérés par le composant TabbedViewNavigator. Chaque navigateur de vue est représenté sous forme d’onglet dans la barre d’onglets du composant TabbedViewNavigator. Un seul navigateur de vue peut être actif à la fois. Vous pouvez faire référence au navigateur de vue actif à l’aide de la propriété <codeph>selectedNavigator</codeph>.
     
      <p>La modification de cette propriété entraîne la suppression du navigateur de vue actif et définit la propriété <codeph>selectedIndex</codeph> sur 0. Cette opération ne peut pas être annulée et est immédiatement validée.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TabbedViewNavigator:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      L’index de base zéro du navigateur de vue sélectionné ou -1 si aucun élément n’est sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      L’index de base zéro du navigateur de vue sélectionné ou -1 si aucun élément n’est sélectionné. La définition de la propriété <codeph>selectedIndex</codeph> désélectionne le navigateur actuellement sélectionné et sélectionne le navigateur présent à l’index spécifié.
           <p>La valeur est toujours comprise entre -1 et (<codeph>navigators.length</codeph> - 1). Si des éléments présents à un index inférieur à la valeur <codeph>selectedIndex</codeph> sont supprimés du composant, l’index sélectionné est réduit en conséquence.</p>
           <p>Si l’élément sélectionné est supprimé, l’index sélectionné est défini sur :</p>
           <ul>
        <li>-1 s’il n’existe aucun élément restant.</li>
        <li><codeph>selectedIndex</codeph> - 1 s’il existe au moins un élément.</li>
      </ul>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TabbedViewNavigator:selectedNavigator:get"><apiName>selectedNavigator</apiName><shortdesc>
      Navigateur de vue sélectionné pour le composant TabbedViewNavigator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components.supportClasses:ViewNavigatorBase</apiValueClassifier></apiValueDef><apiDesc>
      Navigateur de vue sélectionné pour le composant TabbedViewNavigator. Un seul navigateur de vue peut être actif à la fois. Le navigateur de vue actif peut être défini en modifiant la propriété <codeph>selectedIndex</codeph> ou en sélectionnant un onglet dans le contrôle TabBar.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ContentBackgroundAppearance"><apiName>ContentBackgroundAppearance</apiName><shortdesc>
  La classe ContentBackgroundAppearance définit les constantes pour les valeurs autorisées du style contentBackgroundAppearance du composant Callout.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ContentBackgroundAppearance définit les constantes pour les valeurs autorisées du style <codeph>contentBackgroundAppearance</codeph> du composant Callout.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Callout/style:contentBackgroundAppearance"><linktext>spark.components.Callout.contentBackgroundAppearance</linktext></link></related-links><apiValue id="spark.components:ContentBackgroundAppearance:FLAT"><apiName>FLAT</apiName><shortdesc>
      Applique un masque à la partie d’habillage contentGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>flat</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Applique un masque à la partie d’habillage contentGroup.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ContentBackgroundAppearance:INSET"><apiName>INSET</apiName><shortdesc>
      Applique une ombre et un masque à la partie d’habillage contentGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>inset</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Applique une ombre et un masque à la partie d’habillage contentGroup.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ContentBackgroundAppearance:NONE"><apiName>NONE</apiName><shortdesc>
      Désactive à la fois le style contentBackgroundColor et le masquage de contentGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Désactive à la fois le style <codeph>contentBackgroundColor</codeph> et le masquage de contentGroup. Utilisez cette valeur lorsque le contenu du composant Callout doit apparaître directement au-dessus du style <codeph>backgroundColor</codeph> ou lorsque les contenus fournissent leur propre masquage. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ActionBarDefaultButtonAppearance"><apiName>ActionBarDefaultButtonAppearance</apiName><shortdesc>
  La classe ActionBarDefaultButtonAppearance définit les constantes pour les valeurs autorisées du style defaultButtonAppearance du composant ActionBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ActionBarDefaultButtonAppearance définit les constantes pour les valeurs autorisées du style <codeph>defaultButtonAppearance</codeph> du composant ActionBar.
  
  </apiDesc></apiClassifierDetail><apiValue id="spark.components:ActionBarDefaultButtonAppearance:BEVELED"><apiName>BEVELED</apiName><shortdesc>
      Spécifie l’utilisation d’habillages de bouton biseautés et opaques pour les boutons des groupes de contenu de navigation et d’action.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>beveled</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Spécifie l’utilisation d’habillages de bouton biseautés et opaques pour les boutons des groupes de contenu de navigation et d’action.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ActionBarDefaultButtonAppearance:NORMAL"><apiName>NORMAL</apiName><shortdesc>
      Spécifie l’utilisation d’habillages de bouton transparents pour les boutons des groupes de contenu de navigation et d’action.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Spécifie l’utilisation d’habillages de bouton transparents pour les boutons des groupes de contenu de navigation et d’action.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:View"><apiName>View</apiName><shortdesc>
  La classe View est la classe de conteneur de base pour toutes les vues utilisées par les navigateurs de vue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><Exclude kind="property" name="z"/><Exclude kind="property" name="scaleZ"/><Exclude kind="property" name="scaleY"/><Exclude kind="property" name="scaleX"/><Exclude kind="property" name="maxWidth"/><Exclude kind="property" name="minWidth"/><Exclude kind="property" name="width"/><Exclude kind="property" name="maxHeight"/><Exclude kind="property" name="minHeight"/><Exclude kind="property" name="height"/><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:View&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:View
   <strong>Properties</strong>
    actionBarVisible="true"
    actionContent="null"
    actionLayout="null"
    data="null"
    destructionPolicy="auto"
    navigationContent="null"
    navigationLayout="null"
    overlayControls="false"
    tabBarVisible="true"
    title=""
    titleContent="null"
    titleLayout="null"
    viewMenuItems="null"
 
   <strong>Events</strong>
    backKeyPressed="<i>No default</i>"
    dataChange="<i>No default</i>"
    menuKeyPressed="<i>No default</i>"
    removing="<i>No default</i>"
    viewActivate="<i>No default</i>"
    viewDeactivate="<i>No default</i>"
 
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe View est la classe de conteneur de base pour toutes les vues utilisées par les navigateurs de vue. Le conteneur View étend le conteneur Group et ajoute des propriétés supplémentaires qui permettent de communiquer avec son navigateur parent.
   <p>Dans une application mobile, la zone de contenu de l’application affiche les différents écrans, ou les vues, qui constituent l’application. Les utilisateurs accèdent aux vues de l’application à l’aide de l’écran tactile, des composants intégrés dans l’application et des contrôles de saisie du périphérique mobile.</p>
   <p/>
  <p>
  <adobeimage alt="" href="../../images/vn_single_section_home_vn.png"/>
 </p>
   <p>Chaque vue d’une application correspond à un conteneur View défini dans un fichier ActionScript ou MXML. Chaque vue contient une propriété <codeph>data</codeph> qui spécifie les données associées à cette vue. Les vues peuvent utiliser la propriété <codeph>data</codeph> pour se transmettre des informations entre elles lorsque l’utilisateur parcourt l’application.</p>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ViewNavigator"><linktext>ViewNavigator</linktext></link></related-links><adobeApiEvent id="spark.components:View_spark.events.ViewNavigatorEvent.REMOVING_removing"><apiName>removing</apiName><shortdesc>
  Distribué lorsque l'écran est sur le point d'être supprimé en réponse à une modification d'écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ViewNavigatorEvent.REMOVING</apiEventType><adobeApiEventClassifier>spark.events.ViewNavigatorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l'écran est sur le point d'être supprimé en réponse à une modification d'écran. L’appel de la méthode <codeph>preventDefault()</codeph> lors de la manipulation de cet événement annule la modification de l’écran.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_spark.events.ViewNavigatorEvent.VIEW_DEACTIVATE_viewDeactivate"><apiName>viewDeactivate</apiName><shortdesc>
  Distribué lorsque la vue en cours a été désactivée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ViewNavigatorEvent.VIEW_DEACTIVATE</apiEventType><adobeApiEventClassifier>spark.events.ViewNavigatorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la vue en cours a été désactivée.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_spark.events.ViewNavigatorEvent.VIEW_ACTIVATE_viewActivate"><apiName>viewActivate</apiName><shortdesc>
  Distribué lorsque la vue en cours a été activée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ViewNavigatorEvent.VIEW_ACTIVATE</apiEventType><adobeApiEventClassifier>spark.events.ViewNavigatorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la vue en cours a été activée.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_mx.events.FlexEvent.MENU_KEY_PRESSED_menuKeyPressed"><apiName>menuKeyPressed</apiName><shortdesc>
  Distribué lorsque la touche de menu est enfoncée lorsqu’une vue existe au sein d’une application mobile.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.MENU_KEY_PRESSED</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué si la touche de menu est enfoncée lorsqu’une vue existe au sein d’une application mobile.
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Distribué lorsque la propriété data change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>data</codeph> change.
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_mx.events.FlexEvent.BACK_KEY_PRESSED_backKeyPressed"><apiName>backKeyPressed</apiName><shortdesc>
  Distribué lorsque la touche Précédent est enfoncée lorsqu’une vue existe au sein d’une application mobile.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.BACK_KEY_PRESSED</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué si la touche Précédent est enfoncée lorsqu’une vue existe au sein d’une application mobile.
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:View:View"><apiName>View</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:View:createReturnObject"><apiName>createReturnObject</apiName><shortdesc>
      Crée un objet renvoyé au navigateur de vue lorsque cette vue est extraite de la pile du navigateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>La valeur écrite dans le champ <codeph>object</codeph> de la propriété <codeph>ViewNavigator.poppedViewReturnedObject</codeph>.  
           </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Crée un objet renvoyé au navigateur de vue lorsque cette vue est extraite de la pile du navigateur.
           <p>Remplace cette méthode dans une vue pour renvoyer les données à la nouvelle vue lorsque cette vue est extraite de la pile. La méthode <codeph>createReturnObject()</codeph> renvoie un objet unique. L’objet renvoyé par cette méthode est écrit dans la propriété <codeph>ViewNavigator.poppedViewReturnedObject</codeph>. </p>
           <p>La propriété <codeph>ViewNavigator.poppedViewReturnedObject</codeph> est de type ViewReturnObject. La propriété <codeph>ViewReturnObject.object</codeph> contient la valeur renvoyée par cette méthode. </p>
           <p>Si la propriété <codeph>poppedViewReturnedObject</codeph> a la valeur null, aucune donnée n’a été renvoyée. La propriété <codeph>poppedViewReturnedObject</codeph> est assurée d’être définie dans la nouvelle vue avant que celle-ci ne reçoive l’événement <codeph>ajouter</codeph>.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#ViewNavigator/poppedViewReturnedObject"><linktext>ViewNavigator.poppedViewReturnedObject</linktext></link><link href="spark.components.supportClasses.xml#ViewReturnObject"><linktext>spark.components.supportClasses.ViewReturnObject</linktext></link></related-links></apiOperation><apiOperation id="spark.components:View:deserializeData"><apiName>deserializeData</apiName><shortdesc>
      Désérialise un objet de données qui a été enregistré sur le disque par la vue, en général par un appel de la méthode serializeData().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>La valeur attribuée à la propriété <codeph>data</codeph> de la vue.
          
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>L’objet de données à désérialiser.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Désérialise un objet de données qui a été enregistré sur le disque par la vue, en général par un appel de la méthode <codeph>serializeData()</codeph>.  
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:View:getCurrentViewState"><apiName>getCurrentViewState</apiName><shortdesc>
      Vérifie les proportions de la scène et renvoie l’état correct que la vue devrait adopter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Chaîne spécifiant le nom de l’état à appliquer à la vue. Les valeurs renvoyées possibles sont <codeph>« portrait » </codeph> ou <codeph>« paysage »</codeph>. L’état est modifié uniquement si l’état souhaité existe sur la vue. Dans le cas contraire, cette méthode renvoie l’état actuel du composant.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Vérifie les proportions de la scène et renvoie l’état correct que la vue devrait adopter.  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:View:serializeData"><apiName>serializeData</apiName><shortdesc>
      Responsable de sérialiser la propriété data de la vue lorsque la vue est conservée sur le disque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>L’objet de données sérialisé.
     
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Responsable de sérialiser la propriété <codeph>data</codeph> de la vue lorsque la vue est conservée sur le disque. L’objet renvoyé doit pouvoir être écrit correctement dans un objet partagé. Par défaut, cette méthode renvoie la propriété <codeph>data</codeph> de la vue.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:View:actionBarVisible:get"><apiName>actionBarVisible</apiName><shortdesc>
      Spécifie si une vue doit afficher la barre d’action ou non.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie si une vue doit afficher la barre d’action ou non. Cette propriété ne correspond pas nécessairement à la propriété <codeph>visible</codeph> du contrôle ActionBar du navigateur de vue. 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:actionContent:get"><apiName>actionContent</apiName><shortdesc conref="ActionBar#actionContent">
      Cette propriété remplace la propriété actionContent dans les composants ActionBar, ViewNavigator et ViewNavigatorApplication.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionContent">
      Cette propriété remplace la propriété <codeph>actionContent</codeph> dans les composants ActionBar, ViewNavigator et ViewNavigatorApplication.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionContent"><linktext>ActionBar.actionContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:View:actionLayout:get"><apiName>actionLayout</apiName><shortdesc conref="ActionBar#actionLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:data:get"><apiName>data</apiName><shortdesc>
      Données associées à la vue en cours.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Données associées à la vue en cours. Cette propriété vous permet de transmettre des informations à la vue lorsqu’elle est transférée sur la pile du navigateur. Vous pouvez définir cette propriété en transmettant un argument <codeph>data</codeph> à la méthode <codeph>pushView()</codeph>. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:destructionPolicy:get"><apiName>destructionPolicy</apiName><shortdesc>
      Définit la politique de destruction que doit utiliser la vue du navigateur lorsque cette vue est supprimée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>auto
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Définit la politique de destruction que doit utiliser la vue du navigateur lorsque cette vue est supprimée. Si défini sur "auto", le navigateur détruit la vue lorsqu'elle n'est pas active. Si la valeur "never" est définie, la vue sera mise en cache dans la mémoire.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:isActive:get"><apiName>isActive</apiName><shortdesc>
      Indique si la vue en cours est active.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si la vue en cours est active. Le navigateur de la vue définit automatiquement cet indicateur sur <codeph>true</codeph> ou <codeph>false</codeph> lorsque son état change. La définition de cette propriété peut entraîner la distribution des événements <codeph>viewActivate</codeph> ou <codeph>viewDeactivate</codeph>. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:navigationContent:get"><apiName>navigationContent</apiName><shortdesc conref="ActionBar#navigationContent">
      Cette propriété remplace la propriété navigationContent dans les composants ActionBar, ViewNavigator et ViewNavigatorApplication.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationContent">
      Cette propriété remplace la propriété <codeph>navigationContent</codeph> dans les composants ActionBar, ViewNavigator et ViewNavigatorApplication.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationContent"><linktext>ActionBar.navigationContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:View:navigationLayout:get"><apiName>navigationLayout</apiName><shortdesc conref="ActionBar#navigationLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:navigator:get"><apiName>navigator</apiName><shortdesc>
     Le navigateur de vue dans lequel cette vue réside.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="navigatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:ViewNavigator</apiValueClassifier></apiValueDef><apiDesc>
     Navigateur de vue dans lequel cette vue réside.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:overlayControls:get"><apiName>overlayControls</apiName><shortdesc>
      Par défaut, les contrôles TabBar et ActionBar d’une application mobile définissent une zone qui ne peut pas être utilisée par les vues d’une application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Par défaut, les contrôles TabBar et ActionBar d’une application mobile définissent une zone qui ne peut pas être utilisée par les vues d’une application. Cela signifie que votre contenu ne peut pas utiliser la taille plein écran du périphérique mobile. Si vous définissez cette propriété sur <codeph>true</codeph>, la zone de contenu de l’application s’étend sur toute la largeur et sur toute la hauteur de l’écran. Les contrôles ActionBar et TabBar passent le pointeur au-dessus de la zone de contenu avec une valeur <codeph>alpha</codeph> de 0,5, de sorte qu’ils sont partiellement transparents. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:tabBarVisible:get"><apiName>tabBarVisible</apiName><shortdesc>
      Spécifie si une vue doit afficher la barre d’onglets ou non.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie si une vue doit afficher la barre d’onglets ou non. Cette propriété ne correspond pas nécessairement à la propriété <codeph>visible</codeph> du contrôle TabBar du navigateur. 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:titleContent:get"><apiName>titleContent</apiName><shortdesc conref="ActionBar#titleContent">
      Cette propriété remplace la propriété titleContent dans les composants ActionBar, ViewNavigator et ViewNavigatorApplication.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleContent">
      Cette propriété remplace la propriété <codeph>titleContent</codeph> dans les composants ActionBar, ViewNavigator et ViewNavigatorApplication.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>ActionBar.titleContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:View:titleLayout:get"><apiName>titleLayout</apiName><shortdesc conref="ActionBar#titleLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:title:get"><apiName>title</apiName><shortdesc conref="ActionBar#title">
      Cette propriété remplace la propriété title dans les composants ActionBar, ViewNavigator et ViewNavigatorApplication.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#title">
      Cette propriété remplace la propriété <codeph>title</codeph> dans les composants ActionBar, ViewNavigator et ViewNavigatorApplication.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:viewMenuItems:get"><apiName>viewMenuItems</apiName><shortdesc>
      Vecteur des objets ViewMenuItem qui sont transmis à ViewMenu lorsque cette vue est active.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components:ViewMenuItem"/></apiValueDef><apiDesc>
      Vecteur des objets ViewMenuItem qui sont transmis à ViewMenu lorsque cette vue est active. 
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ViewMenu"><linktext>ViewMenu</linktext></link><link href="spark.components.xml#ViewMenuItem"><linktext>ViewMenuItem</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:ArrowDirection"><apiName>ArrowDirection</apiName><shortdesc>
  Enumération de directions de flèche utilisables dans les composants visuels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Enumération de directions de flèche utilisables dans les composants visuels.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Callout/arrowDirection"><linktext>spark.components.Callout.Arrowdirection</linktext></link></related-links><apiValue id="spark.components:ArrowDirection:DOWN"><apiName>DOWN</apiName><shortdesc>
      Flèche pointant vers le bas.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>down</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Flèche pointant vers le bas.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ArrowDirection:LEFT"><apiName>LEFT</apiName><shortdesc>
      Flèche pointant vers la gauche.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Flèche pointant vers la gauche.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ArrowDirection:NONE"><apiName>NONE</apiName><shortdesc>
      Aucune direction de flèche.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Aucune direction de flèche.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ArrowDirection:RIGHT"><apiName>RIGHT</apiName><shortdesc>
      Flèche pointant vers la droite.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Flèche pointant vers la droite.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ArrowDirection:UP"><apiName>UP</apiName><shortdesc>
      Flèche pointant vers le haut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>up</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Flèche pointant vers le haut.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:BusyIndicator"><apiName>BusyIndicator</apiName><shortdesc>
  La BusyIndicator définit un composant pour afficher lorsqu'une longue opération est en cours.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:BusyIndicator" playerVersion="AIR2.5" theme="spark,mobile" type="uint">
<description>
  Couleur des rayons du composant Spinner.
   
  </description>
<default>0x000000
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="rotationInterval" owner="spark.components:BusyIndicator" playerVersion="AIR2.5" type="Number">
<description>
  Un intervalle de délai, en millisecondes, entre les rotations de ce composant. Contrôle la vitesse à laquelle ce composant pirouettes. 
 
  </description>
<default>50
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
   
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:BusyIndicator&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:BusyIndicator
    <strong>Common Styles</strong>
    rotationInterval=50
 
    <strong>Spark Styles</strong>
    symbolColor="0x000000"
  
    <strong>Mobile Styles</strong>
    symbolColor="0x000000"
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  La BusyIndicator définit un composant pour afficher lorsqu'une longue opération est en cours. Ce composant crée un composant Spinner avec douze rayons. La couleur des rayons est contrôlée par la valeur du style <codeph>symbolColor</codeph>. La transparence de ce composant peut être modifiée à l’aide de la propriété <codeph>alpha</codeph>, mais la valeur alpha de chaque rayon ne peut pas être modifiée.
   <p/>
  <p>
  <adobeimage alt="" href="../../images/bi_busy_indicator_bi.png"/>
 </p>
 
  <p>La vitesse de rotation de ce composant est contrôlée par le style <codeph>rotationInterval</codeph>. Le style <codeph>rotationInterval</codeph> définit le délai en millisecondes entre les rotations. Diminuez la valeur <codeph>rotationInterval</codeph> pour augmenter la vitesse de rotation.</p>
 
  <p>L’indicateur BusyIndicator présente les caractéristiques par défaut suivantes :</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row><entry>Taille par défaut</entry><entry>160 PPP : 26x26 pixels 240 ppp : 40x40 pixels 320 ppp : 52x52 pixels</entry></row><row><entry>Taille minimale</entry><entry>20 x 20 pixels</entry></row><row><entry>Taille minimale</entry><entry>Aucune limite</entry></row></tbody></tgroup></adobetable>
  
  <p>Le diamètre de rotation de l’indicateur d’activité est égal au minimum de la largeur et à la hauteur du composant. Le diamètre doit être un nombre pair, car il est réduit de un s’il est défini sur un nombre impair.</p>
 
  </apiDesc><example conref="BusyIndicatorExample.mxml"/><example conref="BusyIndicatorExampleHomeView.mxml"/></apiClassifierDetail><apiConstructor id="spark.components:BusyIndicator:BusyIndicator"><apiName>BusyIndicator</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:ActionBar"><apiName>ActionBar</apiName><shortdesc>
  La classe ActionBar définit un composant qui inclut les groupes de titre, de navigation et de contenu d’action.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="titleContentWithActionAndNavigation" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  Classe ActionBar dont le contenu est défini pour la partie d’habillage <codeph>titleContent</codeph> et les composants à afficher dans les parties d’habillage <codeph>actionGroup</codeph> et <codeph>navigationGroup</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleContentWithNavigation" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  Classe ActionBar dont le contenu se trouve dans la partie d’habillage <codeph>titleContent</codeph> et les composants sont définis dans la propriété <codeph>navigationContent</codeph> à afficher dans la partie d’habillage <codeph>navigationGroup</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleContentWithAction" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  Classe ActionBar dont le contenu se trouve dans la partie d’habillage <codeph>titleContent</codeph> et les composants définis dans la propriété <codeph>actionContent</codeph> à afficher dans la partie d’habillage <codeph>actionGroup</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleContent" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  Classe ActionBar dont le contenu se trouve dans la partie d’habillage <codeph>titleContent</codeph> et non dans la partie d’habillage <codeph>titleDisplay</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleWithActionAndNavigation" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  Classe ActionBar dont le contenu est défini pour la partie d’habillage <codeph>titleDisplay</codeph> et les composants à afficher dans les parties d’habillage <codeph>actionGroup</codeph> et <codeph>navigationGroup</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleWithNavigation" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  Classe ActionBar dont le contenu est défini pour la partie d’habillage <codeph>titleDisplay</codeph> et les composants sont définis dans la propriété <codeph>navigationContent</codeph> à afficher dans la partie d’habillage <codeph>navigationGroup</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleWithAction" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  Classe ActionBar dont le contenu est défini pour la partie d’habillage <codeph>titleDisplay</codeph> et les composants sont définis dans la propriété <codeph>actionContent</codeph> à afficher dans la partie d’habillage <codeph>actionGroup</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="title" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  Etat de base de la classe ActionBar avec la partie d’habillage <codeph>titleDisplay</codeph> et aucun contenu
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style enumeration="normal,beveled" inherit="no" name="defaultButtonAppearance" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="String">
<description>
  Aspect des boutons dans les groupes de navigation et d’action. Les valeurs MXML valides sont <codeph>normal</codeph> et <codeph>beveled</codeph>.
   <p>Dans ActionScript, vous pouvez utiliser les constantes suivantes pour définir cette propriété : <codeph>ActionBarDefaultButtonAppearance.NORMAL</codeph> et <codeph>ActionBarDefaultButtonAppearance.BEVELED</codeph>.</p>
   </description>
<default>ActionBarDefaultButtonAppearance.NORMAL
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textShadowAlpha" owner="spark.components:ActionBar" playerVersion="AIR1.5" theme="mobile" type="Number">
<description>
  Alpha des ombres du texte.
 
  </description>
<default>0.55
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:ActionBar" playerVersion="AIR1.5" theme="mobile" type="uint">
<description>
  Couleur des ombres du texte.
 
  </description>
<default>0xFFFFFF
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Nombre de pixels entre la bordure supérieure et tous les groupes de contenu.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Nombre de pixels entre la bordure gauche et le composant actionGroup.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Nombre de pixels entre la bordure gauche et le composant navigationGroup.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Nombre de pixels entre la bordure inférieure et tous les groupes de contenu.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>
<default>0x70B2EE
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="Number">
<description conref="spark.components.SkinnableContainer#style:contentBackgroundAlpha">
  </description>
<default>1.0
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="Number">
<description conref="spark.components.SkinnableContainer#style:backgroundAlpha">
  </description>
<default>1.0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:accentColor">
  </description>
<default>0x0099FF
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="left,right,center" inherit="no" name="titleAlign" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="String">
<description>
  Alignement du titre par rapport aux dimensions ActionBar. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> et <codeph>"center"</codeph>.
 
  </description>
<default>"center"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur (en pixels). Cette propriété ne peut pas être une valeur négative lorsqu’elle est utilisée avec le thème Mobile.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut de la plupart des composants est <codeph>"left"</codeph>. Pour le composant FormItem, la valeur par défaut est <codeph>"right"</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Cette propriété n’est reconnue que lorsque la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
   <p>La valeur par défaut est 0.</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  Détermine si le texte doit être en gras. Les valeurs reconnues sont <codeph>normal</codeph> et <codeph>bold</codeph>. La valeur par défaut du contrôle Button est <codeph>bold</codeph>. La valeur par défaut de tous les autres contrôles est <codeph>normal</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Hauteur du texte, en pixels. Dans le thème Halo, la valeur par défaut est 10 pour tous les contrôles sauf ColorPicker. Pour le contrôle ColorPicker avec thème Halo, la valeur par défaut est 11. Dans le thème Spark, la valeur par défaut est 12 pour tous les contrôles sauf ColorPicker. Pour le contrôle ColorPicker avec thème Spark, la valeur par défaut est 11. La valeur par défaut du thème Mobile est 24.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée. La police par défaut du thème Halo est <codeph>"Verdana"</codeph>. La police par défaut du thème Spark est <codeph>"Arial"</codeph>. La police par défaut du thème Mobile est <codeph>"_sans"</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="uint">
<description>
  Couleur de texte dans le composant, y compris l’étiquette du composant. La valeur par défaut du thème Halo est <codeph>0x0B333C</codeph>. La valeur par défaut du thème Spark est <codeph>0x000000</codeph>. La valeur par défaut du thème Mobile est <codeph>0xFFFFFF</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="navigationGroup" owner="spark.components:ActionBar" playerVersion="AIR2.5" required="false" var_type="spark.components:Group">
<description>
      La partie de l’habillage qui définit l’aspect de la zone de navigation du composant. Par défaut, la classe ActionBarSkin définit la zone de navigation qui doit apparaître à gauche de la zone de titre.
           </description>


	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      navigation area of the component.</shortdesc><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></SkinPart><SkinPart name="titleGroup" owner="spark.components:ActionBar" playerVersion="AIR2.5" required="false" var_type="spark.components:Group">
<description>
      La partie de l’habillage qui définit l’aspect de la zone de titre du composant. Par défaut, la classe ActionBarSkin définit la zone de titre qui doit apparaître entre les zones de navigation et d’action.
           </description>


	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      title area of the component.</shortdesc><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></SkinPart><SkinPart name="actionGroup" owner="spark.components:ActionBar" playerVersion="AIR2.5" required="false" var_type="spark.components:Group">
<description>
      La partie de l’habillage qui définit l’aspect de la zone d’action du composant. Par défaut, la classe ActionBarSkin définit la zone d’action qui doit apparaître à droite de la zone de titre.
           </description>


	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      action area of the component.</shortdesc><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></SkinPart><SkinPart name="titleDisplay" owner="spark.components:ActionBar" playerVersion="AIR2.5" required="false" var_type="spark.core:IDisplayText">
<description>
      La partie de l’habillage qui définit l’aspect du texte de titre dans le composant. Vous pouvez utiliser une feuille de style CSS pour déclarer les styles de la partie d’habillage titleDisplay de la classe ActionBar, comme l’illustre l’exemple suivant :
      
      <pre>
      @namespace s "library://ns.adobe.com/flex/spark"; 
      s|ActionBar #titleDisplay { 
         color:red; 
      }
     </pre>
     
      </description>


	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      title text in the component.</shortdesc><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:ActionBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:ActionBar
   <strong>Properties</strong>
    actionContent="null"
    actionLayout="HorizontalLayout"
    navigationContent="null"
    navigationLayout="HorizontalLayout"
    title=""
    titleContent="null"
    titleLayout="HorizontalLayout"
 
   <strong>Common Styles</strong>
    color="<i>Theme dependent</i>"
    fontFamily="<i>Theme dependent</i>"
    fontSize="<i>Theme dependent</i>"
    fontStyle="normal"
    fontWeight="normal"
    leading="0"
    letterSpacing="0"
    textAlign="center"
    textDecoration="none"
    textIndent="0"
 
   <strong>Mobile Styles</strong>
    accentColor="0x0099FF"
    backgroundAlpha="1.0"
    color="<i>Theme dependent</i>"
    contentBackgroundAlpha="1.0"
    contentBackgroundColor="0xFFFFFF"
    focusColor="0x70B2EE"
    textShadowAlpha="0.55"
    textShadowColor="0xFFFFFF"
    titleAlign="center"
 
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ActionBar définit un composant qui inclut les groupes de titre, de navigation et de contenu d’action. Le contrôle ActionBar fournit une zone standard pour les contrôles de navigation et d’action. Il vous permet de définir des contrôles globaux qui peuvent être utilisés n’importe où dans l’application, ou des contrôles spécifiques à une vue. 
   <p>Le contrôle ActionBar définit trois zones distinctes : </p>
   <ul>
    <li>Zone de navigation
        <p>Contient des composants qui permettent à l’utilisateur de parcourir la section. Vous pouvez par exemple définir un bouton d’accueil dans la zone de navigation. Utilisez la propriété <codeph>navigationContent</codeph> pour définir les composants à afficher dans la zone de navigation. Utilisez la propriété <codeph>navigationLayout</codeph> pour définir la mise en forme de la zone de navigation. </p></li>
     <li>Zone de titre
         <p>Contient soit une chaîne renfermant le texte du titre, soit des composants. Si vous spécifiez des composants, vous ne pouvez pas spécifier de chaîne de titre. Utilisez la propriété <codeph>title</codeph> pour spécifier la chaîne qui doit apparaître dans la zone de titre. Utilisez la propriété <codeph>titleContent</codeph> pour définir les composants à afficher dans la zone de titre. Utilisez la propriété <codeph>titleLayout</codeph> pour définir la mise en forme de la zone de titre. Si vous attribuez une valeur à la propriété <codeph>titleContent</codeph>, l’habillage du contrôle ActionBar ignore la propriété <codeph>title</codeph>.</p></li> 
      <li>Zone d’action 
         <p>Contient des composants qui définissent les actions que l’utilisateur peut réaliser dans une vue. Vous pouvez par exemple définir un bouton de recherche ou d’actualisation dans le cadre de la zone action. Utilisez la propriété <codeph>actionContent</codeph> pour définir les composants à afficher dans la zone d’action. Utilisez la propriété <codeph>actionLayout</codeph> pour définir la mise en forme de la zone d’action.</p></li>
  </ul>
   <p/>
  <p>
  <adobeimage alt="" href="../../images/ab_search_override_ab.png"/>
 </p>
   <p>Pour une application mobile comportant une seule section, c’est-à-dire un seul conteneur ViewNavigator, toutes les vues partagent la même barre d’action. Pour une application mobile comportant plusieurs sections, c’est-à-dire avec plusieurs conteneurs ViewNavigator, chaque section définit sa propre barre d’action.</p>
   </apiDesc><example conref="ActionBarExample2.mxml"/><example conref="ActionBarExample3.mxml"/><example conref="ActionBarExampleHomeView.mxml"/></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.SkinnableContainer.xml"><linktext>spark.components.SkinnableContainer</linktext></link><link href="spark.components.xml#ViewNavigator"><linktext>ViewNavigator</linktext></link><link href="spark.components.xml#View"><linktext>Afficher</linktext></link><link href="spark.components.xml#ViewNavigatorApplication"><linktext>ViewNavigatorApplication</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links><apiConstructor id="spark.components:ActionBar:ActionBar"><apiName>ActionBar</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ActionBar:actionContent:get"><apiName>actionContent</apiName><shortdesc>
      Les composants qui définissent les actions que l’utilisateur peut réaliser dans une vue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Les composants qui définissent les actions que l’utilisateur peut réaliser dans une vue. Ces composants apparaissent dans la zone d’action du contrôle, à l’aide de la partie d’habillage <codeph>actionGroup</codeph>. 
     
      <p>L’emplacement et l’apparence de la partie d’habillage <codeph>actionGroup</codeph> sont déterminés par la classe ActionBarSkin. La classe ActionBarSkin par défaut fait en sorte que la partie d’habillage <codeph>actionGroup</codeph> apparaisse à droite de la zone d’affichage du titre du contrôle ActionBar.</p>
     
      <p>Créez une classe d’habillage personnalisée pour modifier l’emplacement et l’apparence par défaut de la partie d’habillage <codeph>actionGroup</codeph>.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link><link href="spark.components.xml#ActionBar/actionLayout"><linktext>actionLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:actionLayout:get"><apiName>actionLayout</apiName><shortdesc>
      Définit la mise en forme des composants définis dans la zone d’action par la propriété actionGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>HorizontalLayout
           </apiDefaultValue></apiValueDef><apiDesc>
      Définit la mise en forme des composants définis dans la zone d’action par la propriété <codeph>actionGroup</codeph>.
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionContent"><linktext>actionContent</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:navigationContent:get"><apiName>navigationContent</apiName><shortdesc>
      Les composants qui définissent la navigation pour l’utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Les composants qui définissent la navigation pour l’utilisateur. Ces composants apparaissent dans la zone de navigation du contrôle, à l’aide de la partie d’habillage <codeph>navigationGroup</codeph>. 
           <p>L’emplacement et l’apparence de la partie d’habillage <codeph>navigationGroup</codeph> sont déterminés par la classe ActionBarSkin. La classe ActionBarSkin par défaut fait en sorte que la partie d’habillage <codeph>navigationGroup</codeph> apparaisse à gauche de la zone <codeph>titleGroup</codeph> du contrôle ActionBar.</p>
     
      <p>Créez une classe d’habillage personnalisée pour modifier l’emplacement et l’apparence par défaut de la partie d’habillage <codeph>navigationGroup</codeph>.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link><link href="spark.components.xml#ActionBar/navigationLayout"><linktext>navigationLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:navigationLayout:get"><apiName>navigationLayout</apiName><shortdesc>
      Définit la mise en forme des composants contenus dans la partie d’habillage navigationGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>HorizontalLayout
           </apiDefaultValue></apiValueDef><apiDesc>
      Définit la mise en forme des composants contenus dans la partie d’habillage <codeph>navigationGroup</codeph>.
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationContent"><linktext>navigationContent</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:titleContent:get"><apiName>titleContent</apiName><shortdesc>
      Les composants qui s’affichent dans la zone de titre du contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Les composants qui s’affichent dans la zone de titre du contrôle. Ces composants apparaissent dans la partie d’habillage <codeph>titleGroup</codeph> du contrôle ActionBar.
           <p>L’emplacement et l’apparence de la partie d’habillage <codeph>titleGroup</codeph> sont déterminés par la classe ActionBarSkin. La classe ActionBarSkin par défaut fait en sorte que la partie d’habillage <codeph>titleGroup</codeph> apparaisse au centre du contrôle ActionBar, en utilisant l’espace restant entre les parties d’habillage <codeph>navigationGroup</codeph> et <codeph>actionGroup</codeph>.</p>
     
      <p>Si <codeph>titleContent</codeph> a la valeur null, la partie de l’habillage <codeph>titleDisplay</codeph>, si elle est présente, s’affiche à la place de la partie d’habillage <codeph>titleGroup</codeph>.</p> 
     
      <p>Créez une classe d’habillage personnalisée pour modifier l’emplacement et l’apparence par défaut de la partie d’habillage <codeph>titleGroup</codeph>.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link><link href="spark.components.xml#ActionBar/title"><linktext>title</linktext></link><link href="spark.components.xml#ActionBar/titleLayout"><linktext>titleLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:titleLayout:get"><apiName>titleLayout</apiName><shortdesc>
      Définit la mise en forme des parties d’habillage titleGroup et titleDisplay.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>HorizontalLayout
      </apiDefaultValue></apiValueDef><apiDesc>
      Définit la mise en forme des parties d’habillage <codeph>titleGroup</codeph> et <codeph>titleDisplay</codeph>.
     
      <p>Si la propriété <codeph>titleContent</codeph> a la valeur null, la partie d’habillage <codeph>titleDisplay</codeph> s’affiche à la place de la partie d’habillage <codeph>titleGroup</codeph>. La partie d’habillage <codeph>titleDisplay</codeph> est placée au centre du contrôle ActionBar à l’aide des propriétés <codeph>paddingLeft</codeph> et <codeph>paddingRight</codeph> de la classe de mise en forme spécifiée par la propriété <codeph>titleLayout</codeph>.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>titleContent</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:title:get"><apiName>title</apiName><shortdesc>
      Titre ou légende affiché(e) dans la zone de titre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
           </apiDefaultValue></apiValueDef><apiDesc>
      Titre ou légende affiché(e) dans la zone de titre. 
           <p>Utilisez la propriété <codeph>titleContent</codeph> pour définir les composants à afficher dans la zone de titre. Si vous attribuez une valeur à la propriété <codeph>titleContent</codeph>, l’habillage du contrôle ActionBar ignore la propriété <codeph>title</codeph>.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>titleContent</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:TabbedViewNavigatorApplication"><apiName>TabbedViewNavigatorApplication</apiName><shortdesc>
  Le conteneur TabbedViewNavigatorApplication définit une application comportant plusieurs sections.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="navigators"/><skinParts><SkinPart name="tabbedNavigator" owner="spark.components:TabbedViewNavigatorApplication" playerVersion="AIR2.5" required="false" var_type="spark.components:TabbedViewNavigator">
<description>
      Navigateur tabbedNavigator principal pour l’application.
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The main tabbedNavigator for the application.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:TabbedViewNavigatorApplication&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:TabbedViewNavigatorApplication
    <strong>Properties</strong>
    navigators="null"
 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorApplicationBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le conteneur TabbedViewNavigatorApplication définit une application comportant plusieurs sections. Le conteneur TabbedViewNavigatorApplication crée automatiquement un conteneur TabbedMobileNavigator. Le conteneur TabbedViewNavigator crée le contrôle TabBar pour prendre en charge la navigation parmi les sections de l’application.
 
  <p>Le seul enfant autorisé du conteneur TabbedViewNavigatorApplication est ViewNavigator. Définissez un composant ViewNavigator pour chaque section de l’application.</p> 
 
  <p>Le conteneur TabbedViewNavigatorApplication présente les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>100 % de hauteur et 100 % de largeur pour occuper l’intégralité de l’espace disponible à l’écran.</entry>
        </row><row>
           <entry>Mise en forme des enfants</entry>
           <entry>Définie par chaque conteneur de vue composant les vues de l’application.</entry>
        </row><row>
           <entry>Barres de défilement</entry>
           <entry>Aucun. Si vous ajoutez des barres de défilement, les utilisateurs sont en mesure de faire défiler l’ensemble de l’application. Cela inclut les zones ActionBar et TabBar de l’application. Comme, en règle générale, vous ne souhaitez pas faire défiler ces zones de la vue, ajoutez des barres de défilement à chaque conteneur de vue de l’application, et non au conteneur de l’application lui-même. </entry>
        </row><row>
           <entry>Classe d’habillage par défaut</entry>
           <entry>spark.skins.mobile.TabbedViewNavigatorApplicationSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TabbedViewNavigatorApplicationExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#TabbedViewNavigator"><linktext>spark.components.TabbedViewNavigator</linktext></link><link href="" invalidHref="spark.components.TabBar.xml"><linktext>spark.components.TabBar</linktext></link><link href="" invalidHref="spark.skins.mobile.TabbedViewNavigatorApplicationSkin.xml"><linktext>spark.skins.mobile.TabbedViewNavigatorApplicationSkin</linktext></link></related-links><apiConstructor id="spark.components:TabbedViewNavigatorApplication:TabbedViewNavigatorApplication"><apiName>TabbedViewNavigatorApplication</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:TabbedViewNavigatorApplication:navigators:get"><apiName>navigators</apiName><shortdesc conref="TabbedViewNavigator#navigators">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components.supportClasses:ViewNavigatorBase"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="TabbedViewNavigator#navigators">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:LabelItemRenderer"><apiName>LabelItemRenderer</apiName><shortdesc>
  La classe LabelItemRenderer définit le rendu d’élément par défaut d’un contrôle basé sur une liste dans le thème Mobile.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><styles><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  Alignement vertical du contenu si aucune proportion de un à un ne lui est affectée. Valeurs possibles : <codeph>"top"</codeph>, <codeph>"center"</codeph> et <codeph>"bottom"</codeph>.
  
  </description>
<default>"center"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" theme="spark,mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="uint">
<description conref="spark.components.List#style:selectionColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Nombre de pixels entre la bordure supérieure et le composant de texte du rendu d’élément.
 
  </description>
<default>5
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Nombre de pixels entre la bordure inférieure et le composant de texte du rendu d’élément.
 
  </description>
<default>5
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR1.5" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:chromeColor">
  </description>
<default>0xCCCCCC
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur (en pixels). Cette propriété ne peut pas être une valeur négative lorsqu’elle est utilisée avec le thème Mobile.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut de la plupart des composants est <codeph>"left"</codeph>. Pour le composant FormItem, la valeur par défaut est <codeph>"right"</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Cette propriété n’est reconnue que lorsque la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
   <p>La valeur par défaut est 0.</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  Détermine si le texte doit être en gras. Les valeurs reconnues sont <codeph>normal</codeph> et <codeph>bold</codeph>. La valeur par défaut du contrôle Button est <codeph>bold</codeph>. La valeur par défaut de tous les autres contrôles est <codeph>normal</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Hauteur du texte, en pixels. Dans le thème Halo, la valeur par défaut est 10 pour tous les contrôles sauf ColorPicker. Pour le contrôle ColorPicker avec thème Halo, la valeur par défaut est 11. Dans le thème Spark, la valeur par défaut est 12 pour tous les contrôles sauf ColorPicker. Pour le contrôle ColorPicker avec thème Spark, la valeur par défaut est 11. La valeur par défaut du thème Mobile est 24.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée. La police par défaut du thème Halo est <codeph>"Verdana"</codeph>. La police par défaut du thème Spark est <codeph>"Arial"</codeph>. La police par défaut du thème Mobile est <codeph>"_sans"</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="uint">
<description>
  Couleur de texte dans le composant, y compris l’étiquette du composant. La valeur par défaut du thème Halo est <codeph>0x0B333C</codeph>. La valeur par défaut du thème Spark est <codeph>0x000000</codeph>. La valeur par défaut du thème Mobile est <codeph>0xFFFFFF</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:LabelItemRenderer" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure droite du composant et le bord droit de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button dans le thème Halo est 10 et dans le thème Spark est 6. </p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:LabelItemRenderer" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure gauche du composant et le bord gauche de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button dans le thème Halo est 10 et dans le thème Spark est 6. </p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  <p>La valeur par défaut d’un contrôle Tree est 2.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:LabelItemRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:LabelItemRenderer
   <strong>Properties</strong>
    label=""
 
   <strong>Common Styles</strong>
    color="<i>Theme dependent</i>"
    downColor="<i>Theme dependent</i>"
    fontFamily="<i>Theme dependent</i>"
    fontSize="<i>Theme dependent</i>"
    fontStyle="normal"
    fontWeight="normal"
    leading="0"
    letterSpacing="0"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="5"
    rollOverColor="0xCEDBEF"
    selectionColor="0xB2B2B2"
    textAlign="left"
    textDecoration="none"
    textIndent="0"
    verticalAlign="center"
  
   <strong>Spark Styles</strong>
    alternatingItemColors="undefined"
    focusColor="0x70B2EE"
    symbolColor="0x000000"
  
   <strong>Mobile Styles</strong>
    alternatingItemColors="undefined"
    focusColor="0x70B2EE"
    symbolColor="0x000000"
 
    <b>Events</b>
    dataChange="<i>No default</i>"
 
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>spark.components:IItemRenderer</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe LabelItemRenderer définit le rendu d’élément par défaut d’un contrôle basé sur une liste dans le thème Mobile. Il s’agit d’un rendu d’élément simple avec un seul composant de texte.
   <p>Le rendu d’élément crée un contrôle StyleableTextField unique pour afficher une chaîne. Le nom du contrôle StyleableTextField dans le rendu d’élément est <codeph>labelDisplay</codeph>. Utilisez la propriété <codeph>labelField</codeph> du contrôle basé sur une liste pour spécifier un champ de l’élément de données à afficher dans le contrôle StyleableTextField.</p>
   <p>Pour créer un rendu d’élément personnalisé à utiliser sur les périphériques mobiles, Adobe vous recommande de créer un nouveau rendu d’élément ActionScript qui étend cette classe.</p>
   </apiDesc><example conref="LabelItemRendererExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#IconItemRenderer"><linktext>spark.components.IconItemRenderer</linktext></link><link href="" invalidHref="spark.components.List.xml"><linktext>spark.components.List</linktext></link><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link><link href="" invalidHref="spark.components.IItemRenderer.xml"><linktext>spark.components.IItemRenderer</linktext></link><link href="" invalidHref="spark.components.supportClasses.ItemRenderer.xml"><linktext>spark.components.supportClasses.ItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.components:LabelItemRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Distribué lorsque la propriété data change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>data</codeph> change.
   <p>Lorsque vous utilisez un composant comme rendu d’élément, la propriété <codeph>data</codeph> contient les données à afficher. Vous pouvez écouter cet événement et mettre à jour le composant lorsque la propriété <codeph>data</codeph> change.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:LabelItemRenderer:LabelItemRenderer"><apiName>LabelItemRenderer</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:LabelItemRenderer:protected:createLabelDisplay"><apiName>createLabelDisplay</apiName><shortdesc>
      Crée le composant labelDisplay.
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Crée le composant labelDisplay.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:destroyLabelDisplay"><apiName>destroyLabelDisplay</apiName><shortdesc>
      Détruit le composant labelDisplay.
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Détruit le composant labelDisplay.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:drawBackground"><apiName>drawBackground</apiName><shortdesc>
      Génère le rendu de l’arrière-plan pour le rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Indique la largeur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> du composant.
           </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Indique la hauteur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> du composant.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Génère le rendu de l’arrière-plan pour le rendu d’élément.
     
      <p>Cette méthode, parallèlement à <codeph>layoutContents()</codeph>, est appelée par la méthode <codeph>updateDisplayList()</codeph>.</p>
     
      <p> Elle permet de gérer correctement les états  selected, down, ou caretted. Cependant, lorsque <codeph>alternatingItemColors</codeph> est défini sur <codeph>undefined</codeph>, l’arrière-plan par défaut est transparent. Remplacez cette méthode pour modifier l’aspect de l’arrière-plan du rendu d’élément.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:drawBorder"><apiName>drawBorder</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3.0"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Indique la largeur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> du composant.
           </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Indique la hauteur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> du composant.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
     
      <p><codeph/></p>
     
      <p/>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:getElementPreferredHeight"><apiName>getElementPreferredHeight</apiName><shortdesc conref="spark.skins.mobile.supportClasses.MobileSkin#getElementPreferredHeight()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc conref="spark.skins.mobile.supportClasses.MobileSkin#getElementPreferredHeight()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#LabelItemRenderer/setElementPosition"><linktext>setElementPosition</linktext></link><link href="spark.components.xml#LabelItemRenderer/setElementSize"><linktext>setElementSize</linktext></link><link href="spark.components.xml#LabelItemRenderer/getElementPreferredWidth"><linktext>getElementPreferredWidth</linktext></link></related-links></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:getElementPreferredWidth"><apiName>getElementPreferredWidth</apiName><shortdesc conref="spark.skins.mobile.supportClasses.MobileSkin#getElementPreferredWidth()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc conref="spark.skins.mobile.supportClasses.MobileSkin#getElementPreferredWidth()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#LabelItemRenderer/setElementPosition"><linktext>setElementPosition</linktext></link><link href="spark.components.xml#LabelItemRenderer/setElementSize"><linktext>setElementSize</linktext></link><link href="spark.components.xml#LabelItemRenderer/getElementPreferredHeight"><linktext>getElementPreferredHeight</linktext></link></related-links></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:layoutContents"><apiName>layoutContents</apiName><shortdesc>
      Place les enfants pour ce rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Indique la largeur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> du composant.
           </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Indique la hauteur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> du composant.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Place les enfants pour ce rendu d’élément.
     
      <p>Cette méthode, parallèlement à <codeph>drawBackground()</codeph>, est appelée par la méthode <codeph>updateDisplayList()</codeph>.</p>
     
      <p>Cette méthode place le composant <codeph>labelDisplay</codeph>. Les sous-classes doivent remplacer cela pour placer leurs enfants.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:setElementPosition"><apiName>setElementPosition</apiName><shortdesc conref="spark.skins.mobile.supportClasses.MobileSkin#setElementPosition()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc conref="spark.skins.mobile.supportClasses.MobileSkin#setElementPosition()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#LabelItemRenderer/setElementSize"><linktext>setElementSize</linktext></link></related-links></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:setElementSize"><apiName>setElementSize</apiName><shortdesc conref="spark.skins.mobile.supportClasses.MobileSkin#setElementSize()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc conref="spark.skins.mobile.supportClasses.MobileSkin#setElementSize()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#LabelItemRenderer/setElementPosition"><linktext>setElementPosition</linktext></link></related-links></apiOperation><apiValue id="spark.components:LabelItemRenderer:protected:labelDisplay"><apiName>labelDisplay</apiName><shortdesc>
      Composant de texte utilisé pour afficher les données d’étiquette du rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:StyleableTextField</apiValueClassifier></apiValueDef><apiDesc>
      Le composant de texte utilisé pour afficher les données d’étiquette du rendu d’élément.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:LabelItemRenderer:applicationDPI:get"><apiName>applicationDPI</apiName><shortdesc>
      Renvoie la valeur PPP de l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Renvoie la valeur PPP de l’application.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:LabelItemRenderer:data:get"><apiName>data</apiName><shortdesc>
      Implémentation de la propriété data, telle que définie par l’interface IDataRenderer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Implémentation de la propriété <codeph>data</codeph>, telle que définie par l’interface IDataRenderer. Quand elle est définie, elle stocke la valeur et annule le composant pour déclencher sa redisposition.
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="spark.components:LabelItemRenderer:protected:down:get"><apiName>down</apiName><shortdesc>
      Défini sur true lorsque l’utilisateur appuie sur un rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Défini sur <codeph>true</codeph> lorsque l’utilisateur appuie sur un rendu d’élément.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:LabelItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:LabelItemRenderer:protected:hovered:get"><apiName>hovered</apiName><shortdesc>
      Défini sur true lorsque l’utilisateur survole avec la souris le rendu d’élément. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Défini sur <codeph>true</codeph> lorsque l’utilisateur survole avec la souris le rendu d’élément.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:LabelItemRenderer:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:LabelItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:LabelItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:LabelItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="spark.components:SpinnerListContainer"><apiName>SpinnerListContainer</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="style" name="backgroundColor"/><Exclude kind="style" name="backgroundAlpha"/><DefaultProperty name="mxmlContentFactory"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
   Les éléments SpinnerList sont disposés horizontalement. Le constructeur SpinnerListContainerSkin affiche une image, des dégradés d’ombre et un indicateur de sélection.   
       
 </apiDesc><example conref="SpinnerListExample.mxml"/><example conref="SpinnerListContainerExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#SpinnerList"><linktext>spark.components.SpinnerList</linktext></link><link href="" invalidHref="spark.skins.mobile.SpinnerListContainerSkin.xml"><linktext/></link></related-links><apiConstructor id="spark.components:SpinnerListContainer:SpinnerListContainer"><apiName>SpinnerListContainer</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
            
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:ViewNavigatorApplication"><apiName>ViewNavigatorApplication</apiName><shortdesc>
  La classe ViewNavigatorApplication est une classe d’application destinée à fournir une infrastructure simple pour les applications qui adoptent un modèle de navigation basé sur les vues.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="navigationStack"/><skinParts><SkinPart name="navigator" owner="spark.components:ViewNavigatorApplication" required="false" var_type="spark.components:ViewNavigator">
<description>
      Le navigateur de vue principal pour l’application. Ce composant est responsable de la gestion du modèle de navigation de vue pour l’application.  
     </description>
	<shortdesc>
      The main view navigator for the application.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ViewNavigatorApplication&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ViewNavigatorApplication
    <strong>Properties</strong>
    actionContent="null"
    actionLayout="null"
    firstView="null"
    firstViewData="null"
    navigationContent="null"
    navigationLayout="null"
    title=""
    titleContent="null"
    titleLayout="null"
 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorApplicationBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ViewNavigatorApplication est une classe d’application destinée à fournir une infrastructure simple pour les applications qui adoptent un modèle de navigation basé sur les vues. Lorsqu’elle est utilisée, cette classe fonctionne comme point d’entrée principal de l’application et assure la prise en charge des touches matérielles de périphérique, la détection de l’orientation et la persistance de session de l’application.
 
  <p>Un modèle de navigation basé sur les vues est caractérisé par une interface utilisateur dans laquelle l’utilisateur final navigue entre une série de vues plein écran en réponse à l’interaction de l’utilisateur. Il s’agit d’un paradigme fréquemment utilisé par les applications mobiles, qui est accompli par le biais de l’utilisation d’un conteneur ViewNavigator intégré.</p>
 
  <p>Utilisez la propriété <codeph>firstView</codeph> pour spécifier la vue affichée en premier lors de l’initialisation de l’application.</p>
 
  <p>Contrairement à l’application, la classe ViewNavigatorApplication n’est pas censée accepter les objets UIComponent en tant qu’enfants. En revanche, tous les composants visuels doivent être des enfants des diverses vues gérées par l’application.</p>
 
  <p>Le conteneur ViewNavigatorApplication présente les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>100 % de hauteur et 100 % de largeur pour occuper l’intégralité de l’espace disponible à l’écran.</entry>
        </row><row>
           <entry>Mise en forme des enfants</entry>
           <entry>Définie par chaque conteneur de vue composant les vues de l’application.</entry>
        </row><row>
           <entry>Barres de défilement</entry>
           <entry>Aucun. Si vous ajoutez des barres de défilement, les utilisateurs sont en mesure de faire défiler l’ensemble de l’application. Cela inclut les zones ActionBar et TabBar de l’application. Comme, en règle générale, vous ne souhaitez pas faire défiler ces zones de la vue, ajoutez des barres de défilement à chaque conteneur de vue de l’application, et non au conteneur de l’application lui-même. </entry>
        </row><row>
           <entry>Classe d’habillage par défaut</entry>
           <entry>spark.skins.mobile.ViewNavigatorApplicationSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ViewNavigatorApplicationExample.mxml"/><example conref="ViewNavigatorApplicationHomeView.mxml"/><example conref="ViewNavigatorApplicationView2.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#ViewNavigator"><linktext>spark.components.ViewNavigator</linktext></link><link href="spark.components.xml#View"><linktext>spark.components.View</linktext></link><link href="" invalidHref="spark.skins.mobile.ViewNavigatorApplicationSkin.xml"><linktext>spark.skins.mobile.ViewNavigatorApplicationSkin</linktext></link></related-links><apiConstructor id="spark.components:ViewNavigatorApplication:ViewNavigatorApplication"><apiName>ViewNavigatorApplication</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ViewNavigatorApplication:actionBar:get"><apiName>actionBar</apiName><shortdesc>
      Une référence au contrôle ActionBar du navigateur de vue, le cas échéant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:ActionBar</apiValueClassifier></apiValueDef><apiDesc>
      Une référence au contrôle ActionBar du navigateur de vue, le cas échéant. Cette propriété est valide seulement une fois que le navigateur de vue a été ajouté à la liste d’affichage.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar"><linktext>ActionBar</linktext></link><link href="spark.components.xml#ViewNavigator"><linktext>ViewNavigator</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:actionContent:get"><apiName>actionContent</apiName><shortdesc conref="ActionBar#actionContent">
      Cette propriété remplace la propriété actionContent dans le contrôle ActionBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionContent">
      Cette propriété remplace la propriété <codeph>actionContent</codeph> dans le contrôle ActionBar.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionContent"><linktext>spark.components.ActionBar.actionContent</linktext></link><link href="spark.components.xml#View/actionContent"><linktext>spark.components.View.actionContent</linktext></link><link href="spark.components.xml#ViewNavigator/actionContent"><linktext>spark.components.ViewNavigator.actionContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:actionLayout:get"><apiName>actionLayout</apiName><shortdesc conref="ActionBar#actionLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionLayout">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionLayout"><linktext>spark.components.ActionBar.actionLayout</linktext></link><link href="spark.components.xml#View/actionLayout"><linktext>spark.components.View.actionLayout</linktext></link><link href="spark.components.xml#ViewNavigator/actionLayout"><linktext>spark.components.ViewNavigator.actionLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:firstViewData:get"><apiName>firstViewData</apiName><shortdesc conref="ViewNavigator#firstViewData">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ViewNavigator#firstViewData">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigatorApplication:firstView:get"><apiName>firstView</apiName><shortdesc conref="ViewNavigator#firstView">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ViewNavigator#firstView">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigatorApplication:navigationContent:get"><apiName>navigationContent</apiName><shortdesc conref="ActionBar#navigationContent">
      Cette propriété remplace la propriété navigationContent dans le contrôle ActionBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationContent">
      Cette propriété remplace la propriété <codeph>navigationContent</codeph> dans le contrôle ActionBar.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationContent"><linktext>spark.components.ActionBar.navigationContent</linktext></link><link href="spark.components.xml#View/navigationContent"><linktext>spark.components.View.navigationContent</linktext></link><link href="spark.components.xml#ViewNavigator/navigationContent"><linktext>spark.components.ViewNavigator.navigationContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:navigationLayout:get"><apiName>navigationLayout</apiName><shortdesc conref="ActionBar#navigationLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationLayout">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationLayout"><linktext>spark.components.ActionBar.navigationLayout</linktext></link><link href="spark.components.xml#View/navigationLayout"><linktext>spark.components.View.navigationLayout</linktext></link><link href="spark.components.xml#ViewNavigator/navigationLayout"><linktext>spark.components.ViewNavigator.navigationLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:titleContent:get"><apiName>titleContent</apiName><shortdesc conref="ActionBar#titleContent">
      Cette propriété remplace la propriété titleContent dans les composants ActionBar et ViewNavigatorApplication.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleContent">
      Cette propriété remplace la propriété <codeph>titleContent</codeph> dans les composants ActionBar et ViewNavigatorApplication.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>spark.components.ActionBar.titleContent</linktext></link><link href="spark.components.xml#View/titleContent"><linktext>spark.components.View.titleContent</linktext></link><link href="spark.components.xml#ViewNavigator/titleContent"><linktext>spark.components.ViewNavigator.titleContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:titleLayout:get"><apiName>titleLayout</apiName><shortdesc conref="ActionBar#titleLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleLayout">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleLayout"><linktext>spark.components.ActionBar.titleLayout</linktext></link><link href="spark.components.xml#View/titleLayout"><linktext>spark.components.View.titleLayout</linktext></link><link href="spark.components.xml#ViewNavigator/titleLayout"><linktext>spark.components.ViewNavigator.titleLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:title:get"><apiName>title</apiName><shortdesc conref="ActionBar#title">
      Cette propriété remplace la propriété title dans le contrôle ActionBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#title">
      Cette propriété remplace la propriété <codeph>title</codeph> dans le contrôle ActionBar.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/title"><linktext>spark.components.ActionBar.title</linktext></link><link href="spark.components.xml#View/title"><linktext>spark.components.View.title</linktext></link><link href="spark.components.xml#ViewNavigator/title"><linktext>spark.components.ViewNavigator.title</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:SpinnerList"><apiName>SpinnerList</apiName><shortdesc>
  Le composant SpinnerList affiche une liste d’éléments.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="event" name="itemRollOver"/><Exclude kind="event" name="itemRollOut"/><Exclude kind="event" name="changing"/><Exclude kind="property" name="requireSelection"/><Exclude kind="property" name="layout"/><Exclude kind="style" name="chromeColor"/><Exclude kind="style" name="accentColor"/><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="scroller" owner="spark.components:SpinnerList" playerVersion="AIR3" required="false" var_type="spark.components:Scroller">
<description>
      
     
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      The optional Scroller that is used to scroll the List.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:SpinnerList&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SpinnerList
    <strong>Properties</strong>
    wrapElements="true|false"
  /&gt;
  </pre>
 
 ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le composant SpinnerList affiche une liste d’éléments. L’élément au centre de la liste correspond toujours à l’élément selectedItem. Par défaut, la liste défile en boucle.
 
  <p/>
 
 <p>
  <adobeimage alt="" href="../../images/spinnerlist_example.png"/>
 </p>
 
 <p/>
 
  </apiDesc><example conref="SpinnerListExample.mxml"/><example conref="SpinnerListContainerExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#SpinnerListContainer"><linktext/></link></related-links><apiConstructor id="spark.components:SpinnerList:SpinnerList"><apiName>SpinnerList</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
            
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SpinnerList:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SpinnerList:protected:partAdded"><apiName>partAdded</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SpinnerList:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.components:SpinnerList:caretIndex:get"><apiName>caretIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:SpinnerList:wrapElements:get"><apiName>wrapElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     </apiDefaultValue></apiValueDef><apiDesc>
       
           
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SpinnerList:dataProvider:set"><apiName>dataProvider</apiName><shortdesc conref="spark.components.DataGroup#dataProvider">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.collections:IList"/></apiValueDef><apiDesc conref="spark.components.DataGroup#dataProvider">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:SplitViewNavigator"><apiName>SplitViewNavigator</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><skinStates><SkinState name="landscape" owner="spark.components:SplitViewNavigator" playerVersion="AIR3">
<description>
  <codeph/>
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></SkinState><SkinState name="portrait" owner="spark.components:SplitViewNavigator" playerVersion="AIR3">
<description>
  <codeph/>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="viewNavigatorPopUp" owner="spark.components:SplitViewNavigator" playerVersion="AIR3" required="false" var_type="spark.components:SkinnablePopUpContainer">
<description>
      <codeph/> <codeph/> 
     
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      The popUp used to display a navigator when 
      showFirstViewNavigatorInPopUp() is called.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:SplitViewNavigator&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:SplitViewNavigator
    <strong>Properties</strong>
    autoHideFirstViewNavigator="false"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorBase</apiBaseClassifier></apiClassifierDef><apiDesc>
    
   <p/>
  <p>
  <adobeimage alt="" href="../../images/svn_master_detail_svn.png"/>
 </p>
   <p><codeph/> Ce composant est utile pour la création d’une interface gabarit/détail sur un périphérique mobile. Le nombre de navigateurs enfant gérés par ce composant n’est pas limité. </p>
   <p><b/></p>
 
  <p><codeph/><codeph/>  <codeph/> Si cette valeur est définie, la propriété <codeph>includeInLayout</codeph> de cet enfant est définie en correspondance.</p>
    
  <p>  <codeph/><codeph/>  <codeph/> <codeph/> </p>
   <p><b/><codeph/></p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.skins.mobile.SplitViewNavigatorSkin.xml"><linktext/></link><link href="spark.components.supportClasses.xml#ViewNavigatorBase"><linktext>spark.components.supportClasses.ViewNavigatorBase</linktext></link><link href="spark.components.xml#ViewNavigator"><linktext>spark.components.ViewNavigator</linktext></link><link href="spark.components.xml#TabbedViewNavigator"><linktext>spark.components.TabbedViewNavigator</linktext></link><link href="" invalidHref="spark.components.xml#Application/aspectRatio"><linktext>spark.components.Application.aspectRatio</linktext></link><link href="spark.components.xml#Callout"><linktext>spark.components.Callout</linktext></link><link href="" invalidHref="spark.components.SkinnablePopUpContainer.xml"><linktext>spark.components.SkinnablePopUpContainer</linktext></link></related-links><apiConstructor id="spark.components:SplitViewNavigator:SplitViewNavigator"><apiName>SplitViewNavigator</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SplitViewNavigator:getViewNavigatorAt"><apiName>getViewNavigatorAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
     
      </apiDesc><apiOperationClassifier>spark.components.supportClasses:ViewNavigatorBase</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
       <codeph/>
     
      <p/> 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SplitViewNavigator:hideViewNavigatorPopUp"><apiName>hideViewNavigatorPopUp</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
       
     
      <p> </p>
     
      <p><codeph/><codeph/> <codeph/></p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SplitViewNavigator:showFirstViewNavigatorInPopUp"><apiName>showFirstViewNavigatorInPopUp</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>owner</apiItemName><apiType value="flash.display:DisplayObjectContainer"/></apiParam></apiOperationDef><apiDesc>
       
     
      <p><codeph/> <codeph/></p>
     
      <p>  <codeph/><codeph/></p>
     
      <p/>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:SplitViewNavigator:autoHideFirstViewNavigator:get"><apiName>autoHideFirstViewNavigator</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
       <codeph/>
     
      <p><codeph/></p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SplitViewNavigator:numViewNavigators:get"><apiName>numViewNavigators</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>