<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.components"><apiName>spark.components</apiName><apiDetail/><apiClassifier id="spark.components:ViewNavigator"><apiName>ViewNavigator</apiName><shortdesc>
  Компонент ViewNavigator - это контейнер, который содержит коллекцию объектов представления, в которой только верхнее представление является видимым и активным.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="landscapeAndOverlay" owner="spark.components:ViewNavigator" playerVersion="AIR2.5">
<description>
  Это состояние используется, когда навигатор расположен в ландшафтной ориентации и элементы управления навигатора перекрыты сверху.
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="portraitAndOverlay" owner="spark.components:ViewNavigator" playerVersion="AIR2.5">
<description>
  Это состояние используется, когда навигатор расположен в книжной ориентации и элементы управления навигатора перекрыты сверху.
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="landscape" owner="spark.components:ViewNavigator" playerVersion="AIR2.5">
<description>
  Это состояние используется, когда навигатор находится в ландшафтной ориентации.
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="portrait" owner="spark.components:ViewNavigator" playerVersion="AIR2.5">
<description>
  Это состояние используется, когда навигатор находится в книжной ориентации.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="navigationStack"/><skinParts><SkinPart name="actionBar" owner="spark.components:ViewNavigator" playerVersion="AIR2.5" required="false" var_type="spark.components:ActionBar">
<description>
     Элемент темы оформления, определяющий панель действий навигатора. 
     
     </description>

	<prolog><asCustoms><langversion>3.0
     </langversion><productversion>Flex 4.5
    </productversion></asCustoms></prolog><shortdesc>
     A skin part that defines the action bar of the navigator.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:ViewNavigator&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:ViewNavigator
   <strong>Properties</strong>
    actionContent="null"
    actionLayout="null"
    defaultPopTransition="SlideViewTransition"
    defaultPushTransition="SlideViewTransition"
    firstView="null"
    firstViewData="null"
    navigationContent="null"
    navigationLayout="null"
    poppedViewReturnedObject="null"
    title=""
    titleContent="null"
    titleLayout="null"
 
  &gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Компонент ViewNavigator - это контейнер, который содержит коллекцию объектов представления, в которой только верхнее представление является видимым и активным. Контейнер ViewNavigator используется для управления навигацией между представлениями в мобильном приложении. Контейнер ViewNavigatorApplication автоматически создает один контейнер ViewNavigator для всего приложения.
  
  <p>Навигацией в мобильном приложении управляет стек объектов View. Верхний объект View в стеке определяет текущее видимое представление. Контейнер ViewNavigator выполняет поддержку стека. Для изменения представления поместите новый объект View в стек или удалите текущий объект View из стека. Если текущий видимый объект View больше не отображается в стеке, он будет удален и в стеке будет отображаться предыдущее представление.</p>
   <p>Если представление помещается в начало стека, свойство <codeph>data</codeph> предыдущего представления автоматически сохраняется. Оно восстанавливается, когда представление повторно активируется в результате того, что текущее представление удаляется из стека. Когда новое представление становится активным после его помещения в стек, предыдущее представление удаляется.</p>
 
  <p>ViewNavigator отображает дополнительный элемент управления ActionBar с контекстной информацией, определенной активным представлением. При изменении активного представления также автоматически обновляется панель действий.</p>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#View"><linktext>spark.components.View</linktext></link><link href="spark.components.xml#ActionBar"><linktext>spark.components.ActionBar</linktext></link><link href="spark.components.xml#TabbedViewNavigator"><linktext>spark.components.TabbedViewNavigator</linktext></link><link href="spark.transitions.xml#ViewTransitionBase"><linktext>spark.transitions.ViewTransitionBase</linktext></link></related-links><apiConstructor id="spark.components:ViewNavigator:ViewNavigator"><apiName>ViewNavigator</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:ViewNavigator:protected:createActionBarHideEffect"><apiName>createActionBarHideEffect</apiName><shortdesc>
      Создает эффект, который будет воспроизводиться при скрытом элементе управления ActionBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Эффект, который будет воспроизводиться при скрытом элементе управления ActionBar.
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn></apiOperationDef><apiDesc>
      Создает эффект, который будет воспроизводиться при скрытом элементе управления ActionBar. Производимый эффект обеспечивает анимацию ActionBar и представления, которые в настоящее время отображаются в области содержимого навигатора.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:protected:createActionBarShowEffect"><apiName>createActionBarShowEffect</apiName><shortdesc>
      Создает эффект, который будет воспроизводиться при отображении элемента управления ActionBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Эффект, который будет воспроизводиться при отображении элемента управления ActionBar.
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn></apiOperationDef><apiDesc>
      Создает эффект, который будет воспроизводиться при отображении элемента управления ActionBar. Производимый эффект обеспечивает анимацию ActionBar и представления, которые в настоящее время отображаются в области содержимого навигатора.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:hideActionBar"><apiName>hideActionBar</apiName><shortdesc>
      Скрывает панель действий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>animate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Указывает, будет ли воспроизводиться эффект скрытия, если панель действий скрыта.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Скрывает панель действий.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:popAll"><apiName>popAll</apiName><shortdesc>
      Удаляет все представления из стека навигатора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>Переход представления, воспроизводимый при переключении представлений.    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удаляет все представления из стека навигатора. Этот метод изменяет отображение пустого экрана.  
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:popToFirstView"><apiName>popToFirstView</apiName><shortdesc>
      Удаляет все представления, кроме нижнего, из стека навигации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>Переход представления, воспроизводимый при переключении представлений.    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удаляет все представления, кроме нижнего, из стека навигации. Нижним представлением является то, которое было первым помещено в стек.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:popView"><apiName>popView</apiName><shortdesc>
      Удаляет текущее представление из стека навигации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>Переход представления, воспроизводимый при переключении представлений.    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удаляет текущее представление из стека навигации. Текущее представление является верхним представлением в стеке. Предыдущее представление в стеке становится текущим представлением.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:pushView"><apiName>pushView</apiName><shortdesc>
      Перемещает новое представление в начало стека навигации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewClass</apiItemName><apiType value="Class"/><apiDesc>Класс, используемый для создания представления. Этот аргумент должен ссылаться на класс, который расширяет контейнер View.
      
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Объект данных для передачи в представление. Аргумент записывается в свойстве <codeph>data</codeph> нового представления.
      
      </apiDesc></apiParam><apiParam><apiItemName>context</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Произвольный объект, записываемый в свойстве <codeph>ViewNavigator.context</codeph>. Новое представление может создать ссылку на это свойство и выполнить действие, указанное в значении свойства. Например, от значения <codeph>context</codeph> зависят различные способы отображения данных в представлении.
      
      </apiDesc></apiParam><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>Переход представления, воспроизводимый при переключении представлений.    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Перемещает новое представление в начало стека навигации. Представление, помещенное в начало стека, становится текущим представлением. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:replaceView"><apiName>replaceView</apiName><shortdesc>
      Заменяет верхнее представление в стеке навигации новым представлением.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewClass</apiItemName><apiType value="Class"/><apiDesc>Класс, используемый для создания представления замены. Этот аргумент должен ссылаться на класс, который расширяет контейнер View.
      
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Объект данных для передачи в представление. Аргумент записывается в свойстве <codeph>data</codeph> нового представления.
      
      </apiDesc></apiParam><apiParam><apiItemName>context</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Произвольный объект, используемый для описания контекста нажатия. При создании нового представления можно создать ссылку на это свойство.
      
      </apiDesc></apiParam><apiParam><apiItemName>transition</apiItemName><apiOperationClassifier>spark.transitions:ViewTransitionBase</apiOperationClassifier><apiData>null</apiData><apiDesc>Переход представления, воспроизводимый при переключении представлений.    
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Заменяет верхнее представление в стеке навигации новым представлением. Представление, которое замещает текущее представление в стеке, становится текущим представлением. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:ViewNavigator:showActionBar"><apiName>showActionBar</apiName><shortdesc>
      Отображает панель действий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>animate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Указывает, будет ли воспроизводиться эффект отображения, если панель действий отображается.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Отображает панель действий.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:ViewNavigator:actionContent:get"><apiName>actionContent</apiName><shortdesc conref="ActionBar#actionContent">
      Это свойство изменяет свойство actionContent в компонентах ActionBar и ViewNavigatorApplication.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionContent">
      Это свойство изменяет свойство <codeph>actionContent</codeph> в компонентах ActionBar и ViewNavigatorApplication.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionContent"><linktext>ActionBar.actionContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:actionLayout:get"><apiName>actionLayout</apiName><shortdesc conref="ActionBar#actionContent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionContent">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:activeView:get"><apiName>activeView</apiName><shortdesc>
      Во время перехода представления это свойство создает ссылку на представление, к которому переходит навигатор. Текущее активное представление навигатора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="viewChangeComplete"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:View</apiValueClassifier></apiValueDef><apiDesc>
      <p>Во время перехода представления это свойство создает ссылку на представление, к которому переходит навигатор.</p>
           
      Текущее активное представление навигатора. Только одно представление может быть активным.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:context:get"><apiName>context</apiName><shortdesc>
      Строка, описывающая контекст, в котором было создано текущее представление.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Строка, описывающая контекст, в котором было создано текущее представление. Это свойство присваивается значению <codeph>context</codeph> параметра, который передается в метод <codeph>ViewNavigator.pushView()</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:defaultPopTransition:get"><apiName>defaultPopTransition</apiName><shortdesc>
      Указывает переход представлений по умолчанию для всплывающих операций навигации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.transitions:ViewTransitionBase</apiValueClassifier><apiDefaultValue>SlideViewTransition
           </apiDefaultValue></apiValueDef><apiDesc>
      Указывает переход представлений по умолчанию для всплывающих операций навигации. 
           </apiDesc></apiValueDetail><related-links><link href="spark.transitions.xml#SlideViewTransition"><linktext>spark.transitions.SlideViewTransition</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:defaultPushTransition:get"><apiName>defaultPushTransition</apiName><shortdesc>
      Указывает переход представлений по умолчанию для операций нажатия навигации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.transitions:ViewTransitionBase</apiValueClassifier><apiDefaultValue>SlideViewTransition
           </apiDefaultValue></apiValueDef><apiDesc>
      Указывает переход представлений по умолчанию для операций нажатия навигации.
           </apiDesc></apiValueDetail><related-links><link href="spark.transitions.xml#SlideViewTransition"><linktext>spark.transitions.SlideViewTransition</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:firstViewData:get"><apiName>firstViewData</apiName><shortdesc>
      Объект для передачи в свойство data первого представления при инициализации навигатора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Объект для передачи в свойство <codeph>data</codeph> первого представления при инициализации навигатора. Указывает первое представление с помощью свойства <codeph>firstView</codeph>.   
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ViewNavigator/firstView"><linktext>firstView</linktext></link><link href="spark.components.xml#View"><linktext>View</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:firstView:get"><apiName>firstView</apiName><shortdesc>
      Каждое представление в приложении соответствует классу контейнера View, определенному в файле ActionScript или MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Каждое представление в приложении соответствует классу контейнера View, определенному в файле ActionScript или MXML. Это свойство указывает представление, которое используется для инициализации первого представления стека. Это свойство должно ссылаться на класс, который расширяет контейнер View.
           <p>Указывает данные, передаваемые в первое представление с помощью свойства <codeph>firstViewData</codeph>.</p>   
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ViewNavigator/firstViewData"><linktext>firstViewData</linktext></link><link href="spark.components.xml#View"><linktext>View</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:length:get"><apiName>length</apiName><shortdesc>
      Возвращает количество представлений, управляемых этим навигатором.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="lengthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Возвращает количество представлений, управляемых этим навигатором.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:navigationContent:get"><apiName>navigationContent</apiName><shortdesc conref="ActionBar#navigationContent">
      Это свойство изменяет свойство navigationContent в компонентах ActionBar и ViewNavigatorApplication.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationContent">
      Это свойство изменяет свойство <codeph>navigationContent</codeph> в компонентах ActionBar и ViewNavigatorApplication.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationContent"><linktext>ActionBar.navigationContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:navigationLayout:get"><apiName>navigationLayout</apiName><shortdesc conref="ActionBar#navigationLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:poppedViewReturnedObject:get"><apiName>poppedViewReturnedObject</apiName><shortdesc>
      Содержит объект, возвращенный последним представлением, которое было удалено из стека навигации или заменено другим представлением.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components.supportClasses:ViewReturnObject</apiValueClassifier><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Содержит объект, возвращенный последним представлением, которое было удалено из стека навигации или заменено другим представлением. Для возврата значения представление, удаляемое из стека, изменяет свой метод <codeph>createReturnObject()</codeph>.
           <p>Этот объект доступен, только когда навигатор находится в процессе переключения представлений, реагируя на операции всплывания и замены навигации. Этот объект обязательно будет действительным, когда новое представление получает событие <codeph>add</codeph>, и удаляется, после того как представление получит событие <codeph>viewActivate</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#View/createReturnObject()"><linktext>View.createReturnObject()</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:titleContent:get"><apiName>titleContent</apiName><shortdesc conref="ActionBar#titleContent">
      Это свойство изменяет свойство titleContent в компонентах ActionBar и ViewNavigatorApplication.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleContent">
      Это свойство изменяет свойство <codeph>titleContent</codeph> в компонентах ActionBar и ViewNavigatorApplication.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>ActionBar.titleContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigator:titleLayout:get"><apiName>titleLayout</apiName><shortdesc conref="ActionBar#titleLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigator:title:get"><apiName>title</apiName><shortdesc conref="ActionBar#title">
      Это свойство изменяет свойство title в компонентах ActionBar и ViewNavigatorApplication.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#title">
      Это свойство изменяет свойство <codeph>title</codeph> в компонентах ActionBar и ViewNavigatorApplication.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IconItemRenderer"><apiName>IconItemRenderer</apiName><shortdesc>
  Класс IconItemRenderer - это действующее средство визуализации элементов, оптимизированное для мобильных устройств.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style inherit="no" name="messageStyleName" owner="spark.components:IconItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  Имя объявления стиля CSS для стилей компонента сообщения.
 
  </description>
<default>iconItemRendererMessageStyle
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="iconDelay" owner="spark.components:IconItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Значение задержки перед попыткой загрузки источника значка, если он не был кэширован.
 
  <p>Эта задержка необходима для того, чтобы при прокрутке не выполнялась немедленная загрузка изображения. При этом выдерживается определенный период времени, достаточный для того, чтобы пользователь решил, что необходимо отобразить это средство визуализации элементов.</p>
 
  </description>
<default>500
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="spark.components:IconItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Число пикселей между нижестоящими элементами по вертикали. Значение по умолчанию зависит от класса компонента; если оно не переопределено для класса, значением по умолчанию является 6.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="spark.components:IconItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Число пикселей между нижестоящими элементами по горизонтали. Значение по умолчанию зависит от класса компонента; если оно не переопределено для класса, значением по умолчанию является 8.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:IconItemRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:IconItemRenderer
   <strong>Properties</strong>
    decorator=""
    iconContentLoader="<i>See property description</i>"
    iconField="null"
    iconFillMode=""scale
    iconFunction="null"
    iconHeight="NaN"
    iconPlaceholder="null"
    iconScaleMode="stretch"
    iconWidth="NaN"
    label=""
    labelField="null"
    labelFunction="null"
    messageField="null"
    messageFunction="null"
 
   <strong>Common Styles</strong>
    horizontalGap="8"
    iconDelay="500"
    messageStyleName="iconItemRendererMessageStyle"
    verticalGap="6"
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.core:IGraphicElementContainer</apiBaseInterface><apiBaseInterface>spark.core:ISharedDisplayObject</apiBaseInterface><apiBaseClassifier>spark.components:LabelItemRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс IconItemRenderer - это действующее средство визуализации элементов, оптимизированное для мобильных устройств. Он отображает четыре дополнительных элемента для каждого элемента в элементе управления на основе списка: 
   <ul>
    <li>Значок слева, определенный свойством <codeph>iconField</codeph> или <codeph>iconFunction</codeph>.</li>
    <li>метку текста, состоящего из одной строки, рядом со значком, определенным свойством <codeph>labelField</codeph> или <codeph>labelFunction</codeph>;</li>
    <li>многострочное сообщение под меткой текста, определенное свойством <codeph>messageField</codeph> или <codeph>messageFunction</codeph>;</li>
    <li>Значок средства оформления справа, определенный свойством <codeph>decorator</codeph>.</li>
  </ul>
   <p>Для применения стилей CSS к метке текста, состоящего из одной строки, например размер или цвет шрифта, необходимо установить стили в классе IconItemRenderer. Чтобы установить стили в многострочном сообщении, используйте свойство стиля <codeph>messageStyleNameM</codeph>. Следующий пример иллюстрирует установку стилей текста для метки текста и сообщения:</p>
   <pre>
     &lt;fx:Style>
         .myFontStyle { 
             fontSize: 15;
             color: #9933FF;
         }
  
     &lt;/fx:Style>
     
     &lt;s:List id="myList"
         width="100%" height="100%"
         labelField="firstName">
         &lt;s:itemRenderer>
             &lt;fx:Component>
                 &lt;s:IconItemRenderer messageStyleName="myFontStyle" fontSize="25"
                     labelField="firstName"
                     messageField="lastName" 
                     decorator="@Embed(source='assets/logo_small.jpg')"/>
             &lt;/fx:Component>
         &lt;/s:itemRenderer>
         &lt;s:ArrayCollection>
             &lt;fx:Object firstName="Dave" lastName="Duncam" company="Adobe" phone="413-555-1212"/>
             &lt;fx:Object firstName="Sally" lastName="Smith" company="Acme" phone="617-555-1491"/>
             &lt;fx:Object firstName="Jim" lastName="Jackson" company="Beta" phone="413-555-2345"/>
             &lt;fx:Object firstName="Mary" lastName="Moore" company="Gamma" phone="617-555-1899"/>
         &lt;/s:ArrayCollection>
     &lt;/s:List>
  </pre>
   </apiDesc><example conref="IconItemRendererExample.mxml"/></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.List.xml"><linktext>spark.components.List</linktext></link><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link><link href="" invalidHref="spark.components.IItemRenderer.xml"><linktext>spark.components.IItemRenderer</linktext></link><link href="" invalidHref="spark.components.supportClasses.ItemRenderer.xml"><linktext>spark.components.supportClasses.ItemRenderer</linktext></link><link href="spark.components.xml#LabelItemRenderer"><linktext>spark.components.LabelItemRenderer</linktext></link></related-links><apiConstructor id="spark.components:IconItemRenderer:IconItemRenderer"><apiName>IconItemRenderer</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:IconItemRenderer:invalidateGraphicElementDisplayList"><apiName>invalidateGraphicElementDisplayList</apiName><shortdesc>
      Уведомляет компонент хоста о том, что элемент изменился и должен быть повторно отображен.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="spark.core:IGraphicElement"/><apiDesc>Измененный элемент.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Уведомление компонента хоста о том, что элемент изменился и должен быть повторно отображен. <codeph>IGraphicElementHost</codeph> должен вызывать метод <codeph>validateDisplayList()</codeph> для повторного отображения IGraphicElement. Как правило, списки отображения элементов проверяются в методе <codeph>validateDisplayList()</codeph> хоста.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:IconItemRenderer:invalidateGraphicElementProperties"><apiName>invalidateGraphicElementProperties</apiName><shortdesc>
      Уведомляет компонент хоста, что элемент был изменен и должен пройти проверку правильности свойств.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="spark.core:IGraphicElement"/><apiDesc>Измененный элемент.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Уведомляет компонент хоста, что элемент был изменен и должен пройти проверку правильности свойств. <codeph>IGraphicElementHost</codeph> должен вызывать метод <codeph>validateProperties()</codeph> для сохранения свойств IGraphicElement. Как правило, свойства элементов проверяются в методе <codeph>validateProperties()</codeph> хоста.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:IconItemRenderer:invalidateGraphicElementSharing"><apiName>invalidateGraphicElementSharing</apiName><shortdesc>
      Уведомление хоста о изменении слоя элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="spark.core:IGraphicElement"/><apiDesc>Элемент, размер которого был изменен.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Уведомление хоста о изменении слоя элементов. <codeph>IGraphicElementHost</codeph> должен повторно рассчитать последовательность графических элементов с общедоступным DisplayObjects, при этом может потребоваться повторное присвоение DisplayObjects и повторное отображение последовательностей в результате. Как правило, это проверяется в методе <codeph>validateProperties()</codeph> хоста.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:IconItemRenderer:invalidateGraphicElementSize"><apiName>invalidateGraphicElementSize</apiName><shortdesc>
      Уведомление компонента хоста о том, что был изменен размер элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="spark.core:IGraphicElement"/><apiDesc>Элемент, размер которого был изменен.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Уведомление компонента хоста о том, что был изменен размер элемента. <codeph>IGraphicElementHost</codeph> должен вызывать метод <codeph>validateSize()</codeph> для проверки размера IGraphicElement. Как правило, размер элементов проверяется в методе <codeph>validateSize()</codeph> хоста.
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:IconItemRenderer:protected:decoratorDisplay"><apiName>decoratorDisplay</apiName><shortdesc>
      Компонент экранного объекта, используемый для отображения средства оформления этого средства визуализации элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="spark.primitives:BitmapImage"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Компонент экранного объекта, используемый для отображения средства оформления этого средства визуализации элементов.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:protected:iconDisplay"><apiName>iconDisplay</apiName><shortdesc>
      Компонент растрового изображения, используемый для отображения данных значка этого средства визуализации элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="spark.primitives:BitmapImage"/></apiValueDef><apiDesc>
      Компонент растрового изображения, используемый для отображения данных значка этого средства визуализации элементов.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:protected:messageDisplay"><apiName>messageDisplay</apiName><shortdesc>
      Компонент текста, используемый для отображения данных сообщения этого средства визуализации элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:StyleableTextField</apiValueClassifier></apiValueDef><apiDesc>
      Компонент текста, используемый для отображения данных сообщения этого средства визуализации элементов.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:decorator:get"><apiName>decorator</apiName><shortdesc>
      Значок средства оформления, отображаемый с правой стороны средства визуализации элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>"" 
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Значок средства оформления, отображаемый с правой стороны средства визуализации элементов.
     
      <p>Значок средства оформления игнорирует стиль <codeph>verticalAlign</codeph> и всегда располагается вертикально по центру.</p>
           <p>Значок средства оформления должен быть встроенным ресурсом. Использование внешних ресурсов может привести к снижению производительности.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconContentLoader:get"><apiName>iconContentLoader</apiName><shortdesc>
      Дополнительный пользовательский загрузчик изображений, например кэш или очередь изображений, для связи с клиентом загрузчика содержимого.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.core:IContentLoader"/></apiValueDef><apiDesc>
      Дополнительный пользовательский загрузчик изображений, например кэш или очередь изображений, для связи с клиентом загрузчика содержимого.
     
      <p>Значение по умолчанию представлено кэшем статического содержимого, определенного в IconItemRenderer, что позволяет разместить до 100 записей.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconField:get"><apiName>iconField</apiName><shortdesc>
      Имя поля в элементе данных, которое следует отобразить как значок.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Имя поля в элементе данных, которое следует отобразить как значок. По умолчанию <codeph>iconField</codeph> имеет значение <codeph>null</codeph> и средство визуализации элементов не отображает значок.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconFillMode:get"><apiName>iconFillMode</apiName><shortdesc conref="spark.primitives.BitmapImage#fillMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>mx.graphics.BitmapFillMode.SCALE&lt;/code>
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#fillMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.graphics.BitmapFillMode.xml"><linktext>mx.graphics.BitmapFillMode</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:iconFunction:get"><apiName>iconFunction</apiName><shortdesc>
      Предоставленная пользователем функция, выполняемая для каждого элемента с целью определения ее значка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Предоставленная пользователем функция, выполняемая для каждого элемента с целью определения ее значка. Свойство <codeph>iconFunction</codeph> переопределяет свойство <codeph>iconField</codeph>.
           <p>Для поиска соответствующих полей и возврата действительного URL-адреса или объекта, используемого в качестве значка, можно использовать функцию <codeph>iconFunction</codeph>.</p>
           <p>Функция значка принимает отдельный аргумент, являющийся элементом в поставщике данных, и возвращает Object, передаваемый в объект <codeph>spark.primitives.BitmapImage</codeph> в качестве свойства <codeph>source</codeph>. Функция значка может возвратить действительный URL-адрес изображения или файла Class, представляющего изображение. Для получения информации о других типах объектов, возвращаемых из функции значка, см. документацию по <codeph>BitmapImage</codeph>.</p>
      <pre>
      myIconFunction(item:Object):Object</pre>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.xml#BitmapImage/source"><linktext>spark.primitives.BitmapImage.source</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:iconHeight:get"><apiName>iconHeight</apiName><shortdesc>
      Высота значка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Высота значка. Если не указано, используется встроенная высота изображения.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconPlaceholder:get"><apiName>iconPlaceholder</apiName><shortdesc>
      Ресурс значка, который используется во время загрузки внешнего ресурса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ресурс значка, который используется во время загрузки внешнего ресурса.
     
      <p>Этот ресурс должен быть встроенным изображением, не требующим загрузки из внешнего источника.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:iconScaleMode:get"><apiName>iconScaleMode</apiName><shortdesc conref="spark.primitives.BitmapImage#scaleMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>mx.graphics.BitmapScaleMode.STRETCH&lt;/code>
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#scaleMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.graphics.BitmapScaleMode.xml"><linktext>mx.graphics.BitmapScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:iconWidth:get"><apiName>iconWidth</apiName><shortdesc>
      Ширина значка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ширина значка. Если не указано, используется встроенная ширина изображения.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:labelField:get"><apiName>labelField</apiName><shortdesc>
      Имя поля в элементах поставщика данных, которое следует отобразить как метку.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Имя поля в элементах поставщика данных, которое следует отобразить как метку. Свойство <codeph>labelFunction</codeph> переопределяет данное свойство.
     
      <p>Если <codeph>labelFunction</codeph> = <codeph>labelField</codeph> = null, используйте свойство <codeph>label</codeph>, предоставленное элементом управления на основе списка. Если для <codeph>labelField</codeph> явно указано <codeph>""</codeph> (пустая строка), то метки не отображаются.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#IconItemRenderer/labelFunction"><linktext>spark.components.IconItemRenderer.labelFunction</linktext></link><link href="" invalidHref="spark.components.xml#IItemRenderer/label"><linktext>spark.components.IItemRenderer.label</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Предоставленная пользователем функция, выполняемая для каждого элемента с целью определения его метки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Предоставленная пользователем функция, выполняемая для каждого элемента с целью определения его метки. Свойство <codeph>labelFunction</codeph> переопределяет свойство <codeph>labelField</codeph>.
           <p>Можно предоставить функцию <codeph>labelFunction</codeph>, которая выполняет поиск соответствующих полей и возвращает отображаемую строку. <codeph>labelFunction</codeph> можно также использовать для обработки форматирования и локализации.</p>
           <p>Функция метки принимает отдельный аргумент, являющийся элементом в поставщике данных, и возвращает строку.</p>
      <pre>
      myLabelFunction(item:Object):String</pre>
     
      <p>Если <codeph>labelFunction</codeph> = <codeph>labelField</codeph> = null, используйте свойство <codeph>label</codeph>, предоставленное элементом управления на основе списка. Если для <codeph>labelField</codeph> явно указано <codeph>""</codeph> (пустая строка), то метки не отображаются.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#IconItemRenderer/labelFunction"><linktext>spark.components.IconItemRenderer.labelFunction</linktext></link><link href="" invalidHref="spark.components.xml#IItemRenderer/label"><linktext>spark.components.IItemRenderer.label</linktext></link></related-links></apiValue><apiValue id="spark.components:IconItemRenderer:messageField:get"><apiName>messageField</apiName><shortdesc>
      Имя поля в элементах данных, которое следует отобразить как сообщение.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Имя поля в элементах данных, которое следует отобразить как сообщение. Свойство <codeph>messageFunction</codeph> переопределяет данное свойство.
           <p>Стиль <codeph>messageStyleName</codeph> управляет внешним видом текста.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:messageFunction:get"><apiName>messageFunction</apiName><shortdesc>
      Предоставленная пользователем функция, выполняемая для каждого элемента с целью определения его сообщения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Предоставленная пользователем функция, выполняемая для каждого элемента с целью определения его сообщения. Свойство <codeph>messageFunction</codeph> переопределяет свойство <codeph>messageField</codeph>.
           <p>Функция <codeph>messageFunction</codeph> может выполнить поиск соответствующих полей и возвратить отображаемую строку. Функция <codeph>messageFunction</codeph> также используется для форматирования и локализации.</p>
           <p>Функция сообщения принимает отдельный аргумент, являющийся элементом в поставщике данных, и возвращает строку.</p>
      <pre>
      myMessageFunction(item:Object):String</pre>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconItemRenderer:redrawRequested:get"><apiName>redrawRequested</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:IconItemRenderer:label:set"><apiName>label</apiName><shortdesc>
      Если labelFunction = labelField = null, используйте свойство label, предоставленное элементом управления списка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      <p>Если <codeph>labelFunction</codeph> = <codeph>labelField</codeph> = null, используйте свойство <codeph>label</codeph>, предоставленное элементом управления списка. Если для <codeph>labelField</codeph> явно указано <codeph>""</codeph> (пустая строка), то метки не отображаются.</p>
     
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#IconItemRenderer/labelField"><linktext>spark.components.IconItemRenderer.labelField</linktext></link><link href="spark.components.xml#IconItemRenderer/labelFunction"><linktext>spark.components.IconItemRenderer.labelFunction</linktext></link><link href="" invalidHref="spark.components.xml#IItemRenderer/label"><linktext>spark.components.IItemRenderer.label</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:ViewMenuItem"><apiName>ViewMenuItem</apiName><shortdesc>
  Элемент управления ViewMenuItem отображает значок и метку элемента меню в контейнере ViewMenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="showsCaret" owner="spark.components:ViewMenuItem" playerVersion="AIR2.5">
<description>
  Состояние символа вставки кнопки, представляющей элемент меню.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ViewMenuItem&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ViewMenuItem/&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Элемент управления ViewMenuItem отображает значок и метку элемента меню в контейнере ViewMenu. Для выполнения операции при выбранном элементе меню создайте обработчик для события <codeph>click</codeph>.
 
  <p/>
 
 <p>
  <adobeimage alt="" href="../../images/vm_open_menu_vm.png"/>
 </p>
  
  </apiDesc><example conref="ViewMenuExampleHome.mxml"/><example conref="ViewMenuExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#ViewMenu"><linktext>spark.components.ViewMenu</linktext></link><link href="spark.layouts.xml#ViewMenuLayout"><linktext>spark.layouts.ViewMenuLayout</linktext></link><link href="spark.components.supportClasses.xml#ViewNavigatorApplicationBase"><linktext>spark.components.supportClasses.ViewNavigatorApplicationBase</linktext></link><link href="" invalidHref="spark.skins.mobile.ViewMenuItemSkin.xml"><linktext>spark.skins.mobile.ViewMenuItemSkin</linktext></link></related-links><apiConstructor id="spark.components:ViewMenuItem:ViewMenuItem"><apiName>ViewMenuItem</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ViewMenuItem:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      Содержит true, если элемент управления ViewMenuItem находится в состоянии символа вставки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Содержит <codeph>true</codeph>, если элемент управления ViewMenuItem находится в состоянии символа вставки. 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:CalloutButton"><apiName>CalloutButton</apiName><shortdesc>
  Элемент управления CalloutButton — это раскрывающийся компонент, определяющий кнопку для открытия и закрытия контейнера Callout.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="style" name="repeatInterval"/><Exclude kind="style" name="repeatDelay"/><DefaultProperty name="calloutContent"/><skinParts><SkinPart name="dropDown" owner="spark.components:CalloutButton" playerVersion="AIR3" required="false" var_type="mx.core:IFactory">
<description>
      Компонент темы оформления, определяющий раскрывающуюся фабрику, которая создает экземпляр Callout. Если в теме оформления не определен <codeph>dropDown</codeph>, для создания стандартного экземпляра Callout открывается <codeph>ClassFactory</codeph>.
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the drop-down factory which creates the Callout
      instance.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:CalloutButton&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:CalloutButton
   <strong>Properties</strong>
    calloutDestructionPolicy="auto"
    calloutLayout="BasicLayout"
    horizontalPosition="auto"
    verticalPosition="auto
 
   <strong>Events</strong>
    open="<i>No default</i>"
    close="<i>No default</i>"
      ...
      <i>child tags</i>
      ...
  &lt;/s:CalloutButton&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Button</apiBaseClassifier></apiClassifierDef><apiDesc>
  Элемент управления CalloutButton — это раскрывающийся компонент, определяющий кнопку для открытия и закрытия контейнера Callout. CalloutButton определяет макет и нижестоящие компоненты контейнера Callout.
   <p/>
  <p>
  <adobeimage alt="" href="../../images/ca_calloutButton_ca.png"/>
 </p>
   <p>Элемент CalloutButton управляет контейнером Callout с помощью класса spark.components.supportClasses.DropDownController. Для доступа к DropDownController используется защищенное свойство <codeph>CalloutButton.dropDownController</codeph>.</p>
   <p>Когда выноска открыта:</p>
  <ul>
    <li>щелчок по кнопке закрывает выноску;</li>
    <li>щелчок за пределами выноски закрывает выноску.</li>
  </ul>
   <p>Компонент CalloutButton по умолчанию имеет характеристики, перечисленные ниже.</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>Имеет достаточную ширину для отображения текстовой метки элемента управления</entry>
        </row><row>
           <entry>Минимальный размер</entry>
           <entry>32 пикселей в ширину и 43 пикселей в высоту</entry>
        </row><row>
           <entry>Максимальный размер</entry>
           <entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry>
        </row><row>
           <entry>Класс темы оформления по умолчанию</entry>
           <entry>spark.skins.mobile.CalloutButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="CalloutButtonExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#Callout"><linktext>spark.components.Callout</linktext></link><link href="" invalidHref="spark.components.Button.xml"><linktext>spark.components.Button</linktext></link><link href="" invalidHref="spark.components.supportClasses.DropDownController.xml"><linktext>spark.components.supportClasses.DropDownController</linktext></link></related-links><adobeApiEvent id="spark.components:CalloutButton_spark.events.DropDownEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  Отправляется, когда пользователь нажимает кнопку открытия для отображения выноски.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.OPEN</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется, когда пользователь нажимает кнопку открытия для отображения выноски.  
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:CalloutButton_spark.events.DropDownEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  Отправляется при закрытии выноски по любой причине, например: выноска закрыта программным способом; пользователь щелкает за пределами выноски; пользователь нажимает кнопку открытия во время отображения выноски на экране.
  
   </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.CLOSE</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется, когда выноска закрывается по любой причине, например: 
  <ul>
      <li>выноска закрыта программным способом;</li>
      <li>пользователь щелкает за пределами выноски;</li>
      <li>пользователь нажимает кнопку открытия во время отображения выноски на экране.</li>
  </ul>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:CalloutButton:CalloutButton"><apiName>CalloutButton</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:CalloutButton:closeDropDown"><apiName>closeDropDown</apiName><shortdesc>
      Изменяет состояние темы оформления на нормальное.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Изменяет состояние темы оформления на нормальное.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:CalloutButton:openDropDown"><apiName>openDropDown</apiName><shortdesc>
      Инициализирует dropDown и изменяет состояние темы оформления на открытое.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Инициализирует dropDown и изменяет состояние темы оформления на открытое. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:CalloutButton:calloutContent:get"><apiName>calloutContent</apiName><shortdesc>
      Набор компонентов, добавляемый в содержимое Callout.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Набор компонентов, добавляемый в содержимое Callout.
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Callout"><linktext>spark.components.Callout</linktext></link></related-links></apiValue><apiValue id="spark.components:CalloutButton:calloutDestructionPolicy:get"><apiName>calloutDestructionPolicy</apiName><shortdesc>
      Определяет стратегию удаления кнопки выноски, когда выноска закрыта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>auto
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет стратегию удаления кнопки выноски, когда выноска закрыта. Если установлено значение <codeph>auto</codeph>, кнопка удаляет экземпляр Callout при закрытии выноски. Если установлено значение <codeph>never</codeph>, контейнер Callout кэшируется в памяти.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:calloutLayout:get"><apiName>calloutLayout</apiName><shortdesc>
      Определяет макет контейнера Callout.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>BasicLayout
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет макет контейнера Callout.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:callout:get"><apiName>callout</apiName><shortdesc>
      Экземпляр Callout, созданный после запуска события DropDownEvent.OPEN.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="calloutChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:Callout</apiValueClassifier></apiValueDef><apiDesc>
      Экземпляр Callout, созданный после запуска события <codeph>DropDownEvent.OPEN</codeph>. Экземпляр создан с использованием компонента темы оформления <codeph>dropDown</codeph> <codeph>IFactory</codeph>.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#CalloutButton/calloutDestructionPolicy"><linktext>calloutDestructionPolicy</linktext></link></related-links></apiValue><apiValue id="spark.components:CalloutButton:protected:dropDownController:get"><apiName>dropDownController</apiName><shortdesc>
      Экземпляр класса DropDownController, обрабатывающий все действия пользователя мыши, клавиатуры и фокуса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.components.supportClasses:DropDownController"/></apiValueDef><apiDesc>
      Экземпляр класса DropDownController, обрабатывающий все действия пользователя мыши, клавиатуры и фокуса. Flex вызывает метод <codeph>initializeDropDownController()</codeph> после создания DropDownController в конструкторе.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:horizontalPosition:get"><apiName>horizontalPosition</apiName><shortdesc conref="spark.components.Callout#horizontalPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="spark.components.Callout#horizontalPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:isDropDownOpen:get"><apiName>isDropDownOpen</apiName><shortdesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutButton:verticalPosition:get"><apiName>verticalPosition</apiName><shortdesc conref="spark.components.Callout#verticalPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="spark.components.Callout#verticalPosition">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ToggleSwitch"><apiName>ToggleSwitch</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="style" name="textAlign"/><styles><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:ToggleSwitch" playerVersion="AIR3" theme="mobile" type="uint">
<description>
  Цвет теней текста.
 
  </description>
<default>0x000000
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textShadowAlpha" owner="spark.components:ToggleSwitch" playerVersion="AIR3" theme="mobile" type="Number">
<description>
  Альфа-канал теней текста.
 
  </description>
<default>0.65
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="slideDuration" owner="spark.components:ToggleSwitch" playerVersion="AIR3" type="Number">
<description>
  Длительность анимации ползунка в миллисекундах при его скольжении между выбранными и невыбранными сторонами дорожки. Для анимации между любыми двумя произвольными позициями на дорожке требуется пропорционально более короткое количество времени. Например, после перемещения ползунка до середины дорожки для анимации скольжения по оставшейся половине дорожки требуется вдвое меньше времени.
  
  </description>
<default>125
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components:ToggleSwitch" playerVersion="AIR3" type="uint">
<description>
  Цвет выделения выбранной стороны элемента управления ToggleSwitch.
  
  </description>
<default>0x3F7FBA
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/><skinParts><SkinPart name="thumb" owner="spark.components:ToggleSwitch" playerVersion="AIR3" required="false" var_type="mx.core:IVisualElement">
<description>
      Компонент темы оформления, который можно перетащить вдоль дорожки. Свойство <codeph>thumbPosition</codeph> определяет текущее положение ползунка на дорожке.
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that can be dragged along the track.</shortdesc></SkinPart><SkinPart name="track" owner="spark.components:ToggleSwitch" playerVersion="AIR3" required="false" var_type="mx.core:IVisualElement">
<description>
      Компонент темы оформления, определяющий границы, вдоль которых можно перетащить ползунок.
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the bounds along which the thumb can
      be dragged.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:ToggleSwitch&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:ToggleSwitch
   <strong>Properties</strong>
    selected="null"
    thumbPosition="null"
 
   <strong>Common Styles</strong>
    accentColor="0x3F7FBA"
    slideDuration="125"
 
   <strong>Mobile Styles</strong>
    textShadowAlpha="0.65"
    textShadowColor="0x000000"
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
   ToggleSwitch состоит из компонента темы оформления ползунка, который перемещается между двумя концами компонента темы оформления дорожки, аналогично элементу управления Spark Slider.
   <p> </p>
   <p> </p>
  <p>
  <adobeimage alt="" href="../../images/ts_toggleSwitch_ts.png"/>
 </p>
   <p>  </p>
   <p>Элемент управления ToggleSwitch использует следующие значения по умолчанию для меток unselected и selected: OFF (unselected) и ON (selected). Чтобы изменить метки или другие визуальные характеристики элемента управления, можно создать пользовательскую тему оформления.</p>
   <p/>
   <pre>
  package skins
  // components\mobile\skins\MyToggleSwitchSkin.as
  {
      import spark.skins.mobile.ToggleSwitchSkin;
      
      public class MyToggleSwitchSkin extends ToggleSwitchSkin
      {
          public function MyToggleSwitchSkin()
          {
              super();
              // Set properties to define the labels 
              // for the selected and unselected positions.
              selectedLabel="Yes";
              unselectedLabel="No"; 
          }
      }
  }
  </pre>
   </apiDesc><example conref="ToggleSwitchExample.mxml"/></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.ToggleButton.xml"><linktext>spark.components.ToggleButton</linktext></link><link href="" invalidHref="spark.components.HSlider.xml"><linktext>spark.components.HSlider</linktext></link><link href="" invalidHref="spark.skins.mobile.ToggleSwitchSkin.xml"><linktext>spark.skins.mobile.ToggleSwitchSkin</linktext></link></related-links><apiConstructor id="spark.components:ToggleSwitch:ToggleSwitch"><apiName>ToggleSwitch</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ToggleSwitch:thumbPosition:get"><apiName>thumbPosition</apiName><shortdesc>
      Текущее положение ползунка на дорожке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Текущее положение ползунка на дорожке. Диапазон значения: от 0.0, unselected до 1.0, selected.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ToggleSwitch:selected:set"><apiName>selected</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef><apiDesc>
       <codeph/><codeph/>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:CalloutPosition"><apiName>CalloutPosition</apiName><shortdesc>
  Класс CalloutPosition определяет перечисление горизонтальных и вертикальных позиций компонента Callout относительно владельца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс CalloutPosition определяет перечисление горизонтальных и вертикальных позиций компонента Callout относительно владельца.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Callout"><linktext>spark.components.Callout</linktext></link><link href="spark.components.xml#Callout/horizontalPosition"><linktext>spark.components.Callout.horizontalPosition</linktext></link><link href="spark.components.xml#Callout/verticalPosition"><linktext>spark.components.Callout.verticalPosition</linktext></link></related-links><apiValue id="spark.components:CalloutPosition:AFTER"><apiName>AFTER</apiName><shortdesc>
      Расположение переднего края выноски за задним краем владельца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>after</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Расположение переднего края выноски за задним краем владельца.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:AUTO"><apiName>AUTO</apiName><shortdesc>
      Расположение выноски во внешней части владельца, где потребуется минимум изменений размера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Расположение выноски во внешней части владельца, где потребуется минимум изменений размера.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:BEFORE"><apiName>BEFORE</apiName><shortdesc>
      Расположение заднего края выноски перед передним краем владельца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>before</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Расположение заднего края выноски перед передним краем владельца.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:END"><apiName>END</apiName><shortdesc>
      Расположение заднего края выноски рядом с задним краем владельца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>end</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Расположение заднего края выноски рядом с задним краем владельца.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:MIDDLE"><apiName>MIDDLE</apiName><shortdesc>
      Расположение horizontalCenter выноски рядом с horizontalCenter владельца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middle</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Расположение horizontalCenter выноски рядом с horizontalCenter владельца.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:CalloutPosition:START"><apiName>START</apiName><shortdesc>
      Расположение переднего края выноски рядом с передним краем владельца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>start</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Расположение переднего края выноски рядом с передним краем владельца.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:SpinnerListItemRenderer"><apiName>SpinnerListItemRenderer</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:LabelItemRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>
   Это простое средство визуализации элементов с одним текстовым компонентом.
 
 </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#SpinnerList"><linktext>spark.components.SpinnerList</linktext></link></related-links><apiConstructor id="spark.components:SpinnerListItemRenderer:SpinnerListItemRenderer"><apiName>SpinnerListItemRenderer</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
            
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:DateSpinner"><apiName>DateSpinner</apiName><shortdesc>
  Элемент управления DateSpinner предоставляет интерфейс, на котором можно выбрать определенную дату или время.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="style" name="textAlign"/><styles><style format="Color" inherit="yes" name="accentColor" owner="spark.components:DateSpinner" playerVersion="AIR3" type="uint">
<description>
  Цвет, применяемый к элементам даты, которая соответствует сегодняшней дате. Например, если установлен цвет 0x0000FF и сегодняшней датой является 1/1/2011, то название месяца (Январь), число (1) и год (2011) будут выделены на счетчиках синим цветом. Этот цвет не применяется к элементам времени.
 
  <p/>
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:DateSpinner" playerVersion="AIR3" type="String">
<description>
  Локаль компонента. Управляет форматом дат, например определяет порядок перечисления полей и отображение дополнительных символов дат (при наличии). Используются стандартные идентификаторы локали, описанные в техническом стандарте Юникод № 35. Например en, en_US и en-US относятся к английскому, а ja — к японскому. Если платформа не поддерживает выбранную локаль, используется en_US. Чтобы определить, поддерживается ли выбранная локаль, используйте <codeph>DateTimeFormatter.getAvailableLocaleIDNames()</codeph>
   <p>По умолчанию используется значение undefined. Это свойство наследует свое значение из вышестоящего узла; если указано undefined, то значение наследуется из глобального стиля <codeph>locale</codeph>.</p>
   <p>При использовании средств форматирования Spark и классов глобализации в корневом приложении для этого стиля можно указать значение константы <codeph>LocaleID.DEFAULT</codeph>. При этом классы будут использовать международные установки клиентской операционной системы.</p>
   </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="Number">
<description>
  Смещение первой строки текста с левой стороны контейнера в пикселях. Это свойство не может быть представлено отрицательным числом, когда оно используется в мобильной теме.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="String">
<description>
  Определяет использование подчеркивания текста. Возможными значениями являются <codeph>none</codeph> и <codeph>underline</codeph>.
 
  </description>
<default>"none"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между каждым символом. Положительное значение увеличивает интервал между символами вне стандартного интервала, в то время как отрицательное значение его уменьшает.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="Number">
<description>
  Дополнительный вертикальный пробел между строками текста.
   <p>Значением по умолчанию является 0.</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="String">
<description>
  Определяет использование жирного шрифта в тексте. Допустимыми значениями являются <codeph>normal</codeph> и <codeph> bold</codeph>. Значение по умолчанию для элемента управления Button равно <codeph>bold</codeph>. Значением по умолчанию для всех прочих элементов управления является<codeph>normal</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="String">
<description>
  Определяет использование курсива в тексте. Допустимыми значениями являются <codeph>normal</codeph> и <codeph>italic</codeph>.
 
  </description>
<default>"normal"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="Number">
<description>
  Высота текста в пикселях. Для тем Halo значением по умолчанию для всех элементов управления, кроме ColorPicker, является 10. Для элемента управления ColorPicker с темой Halo значением по умолчанию является 11. Для тем Spark значением по умолчанию для всех элементов управления, кроме ColorPicker, является 12. Для элемента управления ColorPicker с темой Spark значением по умолчанию является 11. Значение по умолчанию для темы Mobile - 24.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="String">
<description>
  Имя используемого шрифта. В отличие от использования в реализации CSS, разделенные запятой списки не поддерживаются. Можно использовать любое имя гарнитуры шрифтов. При указании общего имени шрифта оно преобразовывается в соответствующий шрифт устройства. Шрифтом по умолчанию для темы Halo является <codeph>Verdana</codeph>. Шрифтом по умолчанию для темы Spark является <codeph>Arial</codeph>. Шрифт по умолчанию для темы Mobile - <codeph>"_sans"</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:DateSpinner" playerVersion="AIR2.5" type="uint">
<description>
  Цвет текста в компоненте, включая метку компонента. Значением по умолчанию для темы Halo является <codeph>0x0B333C</codeph>. Значение по умолчанию для темы Spark - <codeph>0x000000</codeph>. Значение по умолчанию для мобильной темы - <codeph>0xFFFFFF</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="dateItemList" owner="spark.components:DateSpinner" playerVersion="AIR3" required="false" var_type="mx.core:IFactory">
<description>
      Стандартная фабрика для создания интерфейсов SpinnerList для всех полей. <codeph/>
     
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      The default factory for creating SpinnerList interfaces for all fields.</shortdesc></SkinPart><SkinPart name="listContainer" owner="spark.components:DateSpinner" playerVersion="AIR3" required="false" var_type="mx.core:IVisualElementContainer">
<description>
      Контейнер для списков компонентов даты.
     
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      The container for the date part lists.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DateSpinner&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DateSpinner
    <strong>Properties</strong>
    displayMode="date|time|dateAndTime"
    maxDate="null"
    minDate="null"
    minuteStepSize="1"
    selectedDate=""
 
    <strong>Styles</strong>
    accentColor="0x0099FF"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Элемент управления DateSpinner предоставляет интерфейс, на котором можно выбрать определенную дату или время. 
 
 <p>Элемент управления DateSpinner может отобразить дату, время или дату и время в зависимости от значения свойства <codeph>displayMode</codeph>.</p>
 
  <p/>
  <p>
  <adobeimage alt="" href="../../images/datespinner_types.png"/>
 </p>
 
  <p>Пользовательский интерфейс этого элемента управления состоит из циклических элементов управления SpinnerList, расположенных в SpinnerListContainer и отображающих текущую выбранную дату. Выбранную дату можно изменить с помощью прикосновений или мыши.</p>
 
  <p>DateSpinnerSkin определяет только некоторые свойства изменения размера. Чтобы изменить внешний вид элемента управления DateSpinner, обычно требуется отредактировать тему оформления основного элемента SpinnerListSkin или SpinnerListContainerSkin.</p>
 
  </apiDesc><example conref="DateSpinnerExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#SpinnerList"><linktext>spark.components.SpinnerList</linktext></link><link href="spark.components.calendarClasses.xml#DateSpinnerItemRenderer"><linktext/></link><link href="" invalidHref="spark.skins.mobile.DateSpinnerSkin.xml"><linktext/></link></related-links><adobeApiEvent id="spark.components:DateSpinner_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  Отправляется после изменения выбранной даты пользователем (то есть</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после изменения выбранной даты пользователем (то есть при взаимодействии) или программным способом.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DateSpinner_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Отправляется после изменения выбранной даты пользователем.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после изменения выбранной даты пользователем.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DateSpinner:DateSpinner"><apiName>DateSpinner</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:DateSpinner:protected:createDateItemList"><apiName>createDateItemList</apiName><shortdesc>
      Создайте объект списка для указанного компонента даты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>
     </apiDesc><apiOperationClassifier>spark.components:SpinnerList</apiOperationClassifier></apiReturn><apiParam><apiItemName>datePart</apiItemName><apiType value="String"/><apiDesc>Используйте константы компонентов даты, например YEAR_ITEM.
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>
      </apiDesc></apiParam><apiParam><apiItemName>itemCount</apiItemName><apiType value="int"/><apiDesc>
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Создайте объект списка для указанного компонента даты.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:DateSpinner:protected:DATE_ITEM"><apiName>DATE_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>dateItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:HOUR_ITEM"><apiName>HOUR_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>hourItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:MERIDIAN_ITEM"><apiName>MERIDIAN_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>meridianItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:MINUTE_ITEM"><apiName>MINUTE_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>minuteItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:MONTH_ITEM"><apiName>MONTH_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>monthItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:YEAR_ITEM"><apiName>YEAR_ITEM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>yearItem</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:dateList"><apiName>dateList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:hourList"><apiName>hourList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:meridianList"><apiName>meridianList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:minuteList"><apiName>minuteList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:monthList"><apiName>monthList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:protected:yearList"><apiName>yearList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components:SpinnerList</apiValueClassifier></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:displayMode:get"><apiName>displayMode</apiName><shortdesc>
      Режим отображения, используемый в настоящее время DateSpinner.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>DateSelectorDisplayMode.DATE
      </apiDefaultValue></apiValueDef><apiDesc>
      Режим отображения, используемый в настоящее время DateSpinner. В качестве этого значения можно использовать константы, определенные в классе DateSelectorDisplayMode, или их строковые эквиваленты.
     
      <p>В таблице ниже перечисляются возможные значения:
         <adobetable class="innertable">
         
         
         
         
         <tgroup cols="2"><thead><row><entry>Режим (эквивалент String)</entry><entry>Описание</entry></row></thead><tbody><row><entry><codeph>DateSelectorDisplayMode.DATE</codeph> ("date")</entry><entry>Отображает месяц, день и год. Этот режим установлен по умолчанию.</entry></row><row><entry><codeph>DateSelectorDisplayMode.TIME</codeph> ("time")</entry><entry>Отображает день недели, месяц, день и время.</entry></row><row><entry><codeph>DateSelectorDisplayMode.DATE_AND_TIME</codeph> ("dateAndTime")</entry><entry>Отображает часы и минуты, а также селектор AM/PM, если он поддерживается локалью.</entry></row></tbody></tgroup></adobetable>
       </p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.components.calendarClasses.DateSelectorDisplayMode.xml"><linktext>spark.components.calendarClasses.DateSelectorDisplayMode</linktext></link></related-links></apiValue><apiValue id="spark.components:DateSpinner:maxDate:get"><apiName>maxDate</apiName><shortdesc>
      Максимальная выбираемая дата; для выбора доступны все даты до этой даты включительно.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>Dec 31st, 9999
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Максимальная выбираемая дата; для выбора доступны все даты до этой даты включительно.
     
      <p/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:minDate:get"><apiName>minDate</apiName><shortdesc>
      Минимальная выбираемая дата; для выбора доступны все даты после этой даты включительно.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>January 1st, 1601
      </apiDefaultValue></apiValueDef><apiDesc>
      Минимальная выбираемая дата; для выбора доступны все даты после этой даты включительно.
     
      <p/>
     
      <p/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:minuteStepSize:get"><apiName>minuteStepSize</apiName><shortdesc>
      Минутный интервал для отображения минут.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>1
      </apiDefaultValue></apiValueDef><apiDesc>
      Минутный интервал для отображения минут. Применяется только в режимах TIME и DATE_AND_TIME. Допускаются значения, на которые можно разделить 60 без остатка; при недопустимых значениях будет использоваться стандартный интервал 1. Например, при выборе значения 15 отобразятся значения 0, 15, 30 и 45.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DateSpinner:selectedDate:get"><apiName>selectedDate</apiName><shortdesc>
      Дата, которая в настоящий момент выбрана в элементе управления DateSpinner.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>the current date
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Дата, которая в настоящий момент выбрана в элементе управления DateSpinner.
     
      <p> </p>
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Callout"><apiName>Callout</apiName><shortdesc>
  Контейнер Callout – это SkinnablePopUpContainer, который действует как всплывающий элемент с дополнительными параметрами расположения относительно владельца аналогично PopUpAnchor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><styles><style enumeration="inset,flat,none" inherit="no" name="contentBackgroundAppearance" owner="spark.components:Callout" playerVersion="AIR3" type="String">
<description>
  Внешний вид <codeph>contentGroup</codeph>. <codeph/><codeph/><codeph/>
   <p>Для установки значения этого свойства в ActionScript используются следующие константы: <codeph>ContentBackgroundAppearance.INSET</codeph>, <codeph>ContentBackgroundAppearance.FLAT</codeph> и <codeph>ContentBackgroundAppearance.NONE</codeph>.</p>
   </description>
<default>ContentBackgroundAppearance.INSET
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="arrow" owner="spark.components:Callout" playerVersion="AIR3" required="false" var_type="mx.core:UIComponent">
<description>
      Дополнительный элемент темы оформления, который визуально соединяет владельца с contentGroup.
           </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that visually connects the owner to the
      contentGroup.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Callout&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Callout
    <strong>Properties</strong>
    horizontalPosition="auto"
    verticalPosition="auto"
     <strong>Styles</strong>
    contentBackgroundAppearance="inset"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnablePopUpContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Контейнер Callout – это SkinnablePopUpContainer, который действует как всплывающий элемент с дополнительными параметрами расположения относительно владельца аналогично PopUpAnchor. Элемент Callout также добавляет необязательный компонент темы оформления <codeph>arrow</codeph>, который визуально отображает направление к владельцу.
   <p/>
  <p>
  <adobeimage alt="" href="../../images/ca_calloutViewNav_ca.png"/>
 </p>
   <p>Чтобы открыть контейнер выноски, используйте элемент управления CalloutButton. Элемент управления CalloutButton объединяет в себе контейнер выноски и все логические функции, необходимые для открытия и закрытия выноски. Поэтому элемент управления CalloutButton рассматривается как владелец, или хост, выноски.</p>
   <p>Свойства <codeph>horizontalPosition</codeph> и <codeph>verticalPosition</codeph> используются для определения положения Callout относительно владельца, указанного в методе <codeph>open()</codeph>. Для обоих свойств можно указать значение <codeph>CalloutPosition.AUTO</codeph>, при этом положение будет выбрано на основе соотношения сторон экрана, что позволяет расположить элемент Callout с минимальным перекрытием владельца и минимальным изменением границ экрана.</p>
   <p>После размещения элемент Callout помещает стрелку на смежной с владельцем стороне, пытаясь разместить ее как можно ближе к вертикальному или горизонтальному центру владельца при необходимости Стрелка отображается только в том случае, если Callout соприкасается с любой из сторон.</p>
   <p>Контейнер Callout не создается как компонент обычного макета своего вышестоящего контейнера. Вместо этого он отображается как всплывающий контейнер поверх своего вышестоящего узла. Поэтому этот контейнер не создается непосредственно в коде MXML приложения,</p>
   <p>а создается как MXML-компонент, часто в отдельном файле MXML. Чтобы отобразить компонент, создайте экземпляр MXML-компонента и вызовите метод <codeph>open()</codeph>. При открытии компонента можно также установить его размер и положение.</p>
   <p>Чтобы закрыть компонент, вызовите метод <codeph>close()</codeph>. Если необходимо, чтобы данные передавались в обработчик из всплывающего окна, добавьте прослушиватель события <codeph>PopUp.CLOSE</codeph> и укажите возвращаемые данные в методе <codeph>close()</codeph>.</p>
   <p>Исходным состоянием темы оформления Callout является <codeph>closed</codeph>. При открытии компонент добавляется в PopUpManager как всплывающее окно и переходит в состояние темы оформления <codeph>normal</codeph>. Для определения анимации при открытии и закрытии используется пользовательская тема оформления с переходами между состояниями <codeph>closed</codeph> и <codeph>normal</codeph>.</p>
 
  <p>Callout изменяет стандартное поведение наследования, используемое компонентами Flex, и вместо этого наследует стили из приложения верхнего уровня. Это предотвращает случайное наследование содержимым Callout стилей владельца (то есть Button или TextInput), когда ожидается и требуется стандартный внешний вид.</p>
   <p>Контейнер Callout имеет следующие характеристики по умолчанию:</p>
     <adobetable class="innertable">
     
     
     
     
     
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row><entry>Размер по умолчанию</entry><entry>Достаточно большой, чтобы отобразить нижестоящие элементы</entry></row><row><entry>Минимальный размер</entry><entry>0 пикселей.</entry></row><row><entry>Максимальный размер</entry><entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry></row><row><entry>Класс темы оформления по умолчанию</entry><entry>spark.skins.mobile.CalloutSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="CalloutExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#CalloutButton"><linktext>spark.components.CalloutButton</linktext></link><link href="" invalidHref="spark.skins.mobile.CalloutSkin.xml"><linktext>spark.skins.mobile.CalloutSkin</linktext></link><link href="spark.components.xml#ContentBackgroundAppearance"><linktext>spark.components.ContentBackgroundAppearance</linktext></link><link href="spark.components.xml#CalloutPosition"><linktext>spark.components.CalloutPosition</linktext></link></related-links><apiConstructor id="spark.components:Callout:Callout"><apiName>Callout</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
           </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Callout:protected:updateSkinDisplayList"><apiName>updateSkinDisplayList</apiName><shortdesc>
      Определяет границы arrow, геометрия которой не полностью определена в макете темы оформления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Определяет границы <codeph>arrow</codeph>, геометрия которой не полностью определена в макете темы оформления.
           <p>Подклассы могут переопределить этот метод для обновления размера, положения и видимости стрелки на основе вычисленного значения <codeph>arrowDirection</codeph>.</p>
           <p>По умолчанию этот метод выравнивает стрелку по более коротким границам <codeph>arrow</codeph> или <codeph>owner</codeph>. При этом предполагается, что <codeph>arrow</codeph> и тема оформления Callout используют одно и то же координатное пространство.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:Callout:protected:actualHorizontalPosition:get"><apiName>actualHorizontalPosition</apiName><shortdesc>
      Полностью обработанное положение по горизонтали после оценки CalloutPosition.AUTO.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Полностью обработанное положение по горизонтали после оценки CalloutPosition.AUTO.
     
      <p>Обновите это свойство в <codeph>commitProperties()</codeph>, если явным значением <codeph>horizontalPosition</codeph> является CalloutPosition.AUTO. <codeph/></p> 
      
      <p>Это свойство должно использоваться подклассами при вычислении <codeph>arrowDirection</codeph>, т. е. положения стрелки в <codeph>updateSkinDisplayList()</codeph>.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Callout:protected:actualVerticalPosition:get"><apiName>actualVerticalPosition</apiName><shortdesc>
      Полностью обработанное положение по вертикали после оценки CalloutPosition.AUTO.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Полностью обработанное положение по вертикали после оценки CalloutPosition.AUTO.
     
      <p>Обновите это свойство в <codeph>commitProperties()</codeph>, если явным значением <codeph>verticalPosition</codeph> является CalloutPosition.AUTO. <codeph/></p> 
      
      <p>Это свойство должно использоваться подклассами при вычислении <codeph>arrowDirection</codeph>, т. е. положения стрелки в <codeph>updateSkinDisplayList()</codeph>.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Callout:arrowDirection:get"><apiName>arrowDirection</apiName><shortdesc>
      Свойство только для чтения, указывающее направление от выноски к владельцу.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/><apiDefaultValue>none
           </apiDefaultValue></apiValueDef><apiDesc>
      Свойство только для чтения, указывающее направление от выноски к владельцу.
           <p>Это значение вычисляется на основе положения выноски, определенного параметрами <codeph>horizontalPosition</codeph> и <codeph>verticalPosition</codeph>. Внешние и внутренние положения будут указывать от выноски по направлению к краю владельца. Угловые и полностью центральные положения не поддерживаются и возвращают значение <codeph>"none".</codeph></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ArrowDirection"><linktext>spark.components.ArrowDirection</linktext></link></related-links></apiValue><apiValue id="spark.components:Callout:horizontalPosition:get"><apiName>horizontalPosition</apiName><shortdesc>
      Горизонтальное положение выноски относительно владельца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>CalloutPosition.AUTO
      </apiDefaultValue></apiValueDef><apiDesc>
      Горизонтальное положение выноски относительно владельца.
           <p>Возможные значения: <codeph>"before"</codeph>, <codeph>"start"</codeph>, <codeph>"middle"</codeph>, <codeph>"end"</codeph>, <codeph>"after"</codeph>, и <codeph>"auto"</codeph> (по умолчанию).</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#CalloutPosition"><linktext>spark.components.CalloutPosition</linktext></link></related-links></apiValue><apiValue id="spark.components:Callout:verticalPosition:get"><apiName>verticalPosition</apiName><shortdesc>
      Вертикальное положение выноски относительно владельца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>CalloutPosition.AUTO
      </apiDefaultValue></apiValueDef><apiDesc>
      Вертикальное положение выноски относительно владельца.
           <p>Возможные значения: <codeph>"before"</codeph>, <codeph>"start"</codeph>, <codeph>"middle"</codeph>, <codeph>"end"</codeph>, <codeph>"after"</codeph>, и <codeph>"auto"</codeph> (по умолчанию).</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#CalloutPosition"><linktext>spark.components.CalloutPosition</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:ViewMenu"><apiName>ViewMenu</apiName><shortdesc>
  Контейнер ViewMenu определяет меню в контейнере View.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="disabledAndLandscape" owner="spark.components:ViewMenu" playerVersion="AIR2.5">
<description>
  Состояние выключения и ландшафтной ориентации.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="closedAndLandscape" owner="spark.components:ViewMenu" playerVersion="AIR2.5">
<description>
  Состояние закрытия и ландшафтной ориентации.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="normalAndLandscape" owner="spark.components:ViewMenu" playerVersion="AIR2.5">
<description>
  Нормальное состояние и состояние закрытия и ландшафтной ориентации.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="items"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components:SkinnablePopUpContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Контейнер ViewMenu определяет меню в контейнере View. Для определения каждого элемента меню используется элемент управления ViewMenuItem. Контейнер приложения автоматически создает и отображает контейнер ViewMenu, когда пользователь нажимает кнопку меню устройства. Чтобы открыть меню программным способом, можно также использовать свойство <codeph>ViewNavigatorApplicationBase.viewMenuOpen</codeph>.
 
  <p/>
 
 <p>
  <adobeimage alt="" href="../../images/vm_open_menu_vm.png"/>
 </p>
 
  <p>Класс ViewMenuLayout определяет макет меню. Также можно создать собственный пользовательский класс макета.</p>
 
  <p>Свойство <codeph>View.viewMenuItems</codeph> используется для определения элементов меню, как показано в следующем примере:</p>
  
  <pre>
  &lt;s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
      xmlns:s="library://ns.adobe.com/flex/spark" 
      title="Home"> 
 
    ...
 
    &lt;s:viewMenuItems> 
        &lt;s:ViewMenuItem label="Add" click="itemClickInfo(event);"/> 
        &lt;s:ViewMenuItem label="Cancel" click="itemClickInfo(event);"/> 
        &lt;s:ViewMenuItem label="Delete" click="itemClickInfo(event);"/> 
        &lt;s:ViewMenuItem label="Edit" click="itemClickInfo(event);"/> 
        &lt;s:ViewMenuItem label="Search" click="itemClickInfo(event);"/> 
    &lt;/s:viewMenuItems>
 
  &lt;/s:View>
  </pre>
 
  <p>Учтите, что контейнер ViewMenu не определяется явным образом в MXML. Контейнер ViewMenu автоматически создается для того, чтобы содержать элементы управления ViewMenuItem.</p>
  
  </apiDesc><example conref="ViewMenuExampleHome.mxml"/><example conref="ViewMenuExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#ViewMenuItem"><linktext>spark.components.ViewMenuItem</linktext></link><link href="spark.layouts.xml#ViewMenuLayout"><linktext>spark.layouts.ViewMenuLayout</linktext></link><link href="spark.components.supportClasses.xml#ViewNavigatorApplicationBase"><linktext>spark.components.supportClasses.ViewNavigatorApplicationBase</linktext></link><link href="" invalidHref="spark.skins.mobile.ViewMenuSkin.xml"><linktext>spark.skins.mobile.ViewMenuSkin</linktext></link></related-links><apiConstructor id="spark.components:ViewMenu:ViewMenu"><apiName>ViewMenu</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ViewMenu:caretIndex:get"><apiName>caretIndex</apiName><shortdesc>
      Элемент меню, который в настоящее время находится в состоянии символа вставки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Элемент меню, который в настоящее время находится в состоянии символа вставки. Значение -1 указывает, что в состоянии символа вставки отсутствуют элементы.  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewMenu:items:get"><apiName>items</apiName><shortdesc>
      Элементы управления ViewMenuItem вектора для отображения в контейнере ViewMenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components:ViewMenuItem"/></apiValueDef><apiDesc>
      Элементы управления ViewMenuItem вектора для отображения в контейнере ViewMenu.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TabbedViewNavigator"><apiName>TabbedViewNavigator</apiName><shortdesc>
  Класс TabbedViewNavigator является контейнером, который управляет коллекцией контейнеров навигатора представлений.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="tabBar" owner="spark.components:TabbedViewNavigator" playerVersion="AIR2.5" required="false" var_type="spark.components.supportClasses:ButtonBarBase">
<description>
      Элемент темы оформления, определяющий панель вкладок навигатора. 
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the tab bar of the navigator.</shortdesc></SkinPart></skinParts></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ISelectableList</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс TabbedViewNavigator является контейнером, который управляет коллекцией контейнеров навигатора представлений. Только один навигатор представлений может быть активным и видимым. Этот класс содержит элемент управления TabBar, который обеспечивает переключение между коллекциями навигаторов представлений.  
   <p/>
  <p>
  <adobeimage alt="" href="../../images/tvn_sections_with_ab_tvn.png"/>
 </p>
   <p>Контейнер TabbedViewNavigatorApplication автоматически создает один контейнер TabbedViewNavigator для всего приложения. Для создания ссылки на объект TabbedViewNavigator используется свойство <codeph>navigator</codeph> контейнера TabbedViewNavigatorApplication.</p>
 
  <p>Для изменения активного или выбранного навигатора щелкните соответствующую вкладку в TabBar или измените свойство <codeph>selectedIndex</codeph> компонента.</p>
 
  <p>Содержимое нижестоящего навигатора представлений удаляется при деактивации навигатора и динамически создается при активации навигатора.</p>  
 
  </apiDesc><example conref="TabbedViewNavigatorExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#View"><linktext>spark.components.View</linktext></link><link href="spark.components.xml#ViewNavigator"><linktext>spark.components.ViewNavigator</linktext></link><link href="" invalidHref="spark.components.TabBar.xml"><linktext>spark.components.TabBar</linktext></link></related-links><adobeApiEvent id="spark.components:TabbedViewNavigator_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  Отправляется после изменения выбранного индекса навигатора представлений.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после изменения выбранного индекса навигатора представлений. При отправке этого события свойства <codeph>selectedIndex</codeph> и <codeph>selectedNavigator</codeph> создают ссылку на последний выбранный навигатор представлений.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TabbedViewNavigator_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  Отправляется при изменении коллекции навигаторов представлений, управляемых TabbedViewNavigator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при изменении коллекции навигаторов представлений, управляемых TabbedViewNavigator.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TabbedViewNavigator_spark.events.IndexChangeEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  Отправляется перед изменением выбранного навигатора представлений.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется перед изменением выбранного навигатора представлений. При отмене этого события активный навигатор представлений не изменяется.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TabbedViewNavigator_spark.events.IndexChangeEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Отправляется при изменении текущего навигатора представлений в результате изменения свойства selectedIndex или выбранной вкладки в элементе управления TabBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при изменении текущего навигатора представлений в результате изменения свойства <codeph>selectedIndex</codeph> или выбранной вкладки в элементе управления TabBar.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:TabbedViewNavigator:TabbedViewNavigator"><apiName>TabbedViewNavigator</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:TabbedViewNavigator:addItemAt"><apiName>addItemAt</apiName><shortdesc>
      Добавляет навигатор представлений в указанную позицию индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если индекс меньше 0 или больше длины
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Добавляемый навигатор представления. Он должен расширять класс <codeph>ViewNavigatorBase</codeph>.
           </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс, в который помещается элемент.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Добавляет навигатор представлений в указанную позицию индекса. Любой навигатор представлений, прежде находившийся после данного индекса, перемещается на одну позицию.  
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ViewNavigatorBase"><linktext>spark.components.supportClasses.ViewNavigatorBase</linktext></link></related-links></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:addItem"><apiName>addItem</apiName><shortdesc>
      Добавляет указанный навигатор представлений в конец списка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Добавляемый навигатор представления. Он должен расширять класс <codeph>ViewNavigatorBase</codeph>.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Добавляет указанный навигатор представлений в конец списка. Эквивалентно вызову <codeph>addItemAt(item, length);</codeph>. 
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ViewNavigatorBase"><linktext>spark.components.supportClasses.ViewNavigatorBase</linktext></link></related-links></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:protected:createTabBarHideEffect"><apiName>createTabBarHideEffect</apiName><shortdesc>
      Создает эффект, который будет воспроизводиться при скрытом элементе управления TabBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Эффект, который будет воспроизводиться при скрытом элементе управления TabBar.
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn></apiOperationDef><apiDesc>
      Создает эффект, который будет воспроизводиться при скрытом элементе управления TabBar. Созданный эффект обеспечивает анимацию TabBar и группы содержимого навигатора.
     
      <p>TabbedViewNavigator ожидает, что для свойств <codeph>includeInLayout</codeph> и <codeph>visible</codeph> элемента TabBar будет установлено значение <codeph>false</codeph> после воспроизведения этого эффекта.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:protected:createTabBarShowEffect"><apiName>createTabBarShowEffect</apiName><shortdesc>
      Создает эффект, который будет воспроизводиться при отображенном элементе управления TabBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Эффект, воспроизводимый при отображении элемента управления TabBar.
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn></apiOperationDef><apiDesc>
      Создает эффект, который будет воспроизводиться при отображенном элементе управления TabBar. Созданный эффект обеспечивает анимацию TabBar и группы содержимого навигатора.
     
      <p>TabbedViewNavigator ожидает, что для свойств <codeph>includeInLayout</codeph> и <codeph>visible</codeph> элемента TabBar будет установлено значение <codeph>true</codeph> после воспроизведения этого эффекта.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:getItemAt"><apiName>getItemAt</apiName><shortdesc>
      Получение объекта навигатора представлений, расположенного в заданной позиции индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>если index &lt; 0 или index > = length
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Навигатор в указанном индексе или null, если отсутствует.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс в списке для извлечения элемента.
     
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Значение, указывающее как направление, так и число элементов, получаемых во время запроса, если элемент не является локальным.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Получение объекта навигатора представлений, расположенного в заданной позиции индекса.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:getItemIndex"><apiName>getItemIndex</apiName><shortdesc>
      Возвращает индекс навигатора представлений, если он находится в списке навигаторов представлений.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Индекс навигатора представлений или -1, если элемент отсутствует в списке.
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Объект навигатора представлений, местоположение которого будет определено.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает индекс навигатора представлений, если он находится в списке навигаторов представлений. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:hideTabBar"><apiName>hideTabBar</apiName><shortdesc>
      Скрывает вкладку навигатора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>animate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Указывает, будет ли воспроизводиться эффект скрытия, когда скрывается панель вкладок.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Скрывает вкладку навигатора.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      Уведомляет внешние компоненты о том, что обновлено свойство навигатора представлений.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Обновленный навигатор представлений
           </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Значения String, QName или int, определяющие обновленное свойство.
           </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Старое значение данного свойства. Если свойство имело значение null, это могло быть старое значение элемента.
           </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Новое значение данного свойства. Если свойство имело значение null, его можно не указывать, поскольку предполагается, что элемент является новым значением.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Уведомляет внешние компоненты о том, что обновлено свойство навигатора представлений.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:removeAll"><apiName>removeAll</apiName><shortdesc>
      Удаляет все нижестоящие навигаторы представлений из навигатора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Удаляет все нижестоящие навигаторы представлений из навигатора.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:removeItemAt"><apiName>removeItemAt</apiName><shortdesc>
      Удаляет навигатор представлений в указанной позиции индекса и возвращает его.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если индекс меньше 0 или больше или равен длине.
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Удаленный элемент.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс, из которого необходимо удалить элемент.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удаляет навигатор представлений в указанной позиции индекса и возвращает его. Индекс любых элементов, которые находились после этого индекса, уменьшается на одну позицию.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:setItemAt"><apiName>setItemAt</apiName><shortdesc>
      Добавляет навигатор представлений в указанную позицию индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если индекс меньше 0 либо больше или равен длине
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Замененный навигатор или null при его отсутствии.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Навигатор представлений, помещаемый в позицию индекса.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Позиция индекса, в которую помещается навигатор.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Добавляет навигатор представлений в указанную позицию индекса. Если элемент уже занимает данную позицию индекса, новый элемент заменит его и будет возвращен.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:showTabBar"><apiName>showTabBar</apiName><shortdesc>
      Отображает вкладку навигатора.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>animate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Указывает, будет ли воспроизводиться эффект отображения при выводе на экран панели вкладок.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Отображает вкладку навигатора.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TabbedViewNavigator:toArray"><apiName>toArray</apiName><shortdesc>
      Возвращает массив, заполняемый в порядке, аналогичном реализации IList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Массив.
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает массив, заполняемый в порядке, аналогичном реализации IList. 
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:TabbedViewNavigator:length:get"><apiName>length</apiName><shortdesc>
      Количество нижестоящих навигаторов представлений, управляемых этим компонентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Количество нижестоящих навигаторов представлений, управляемых этим компонентом.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TabbedViewNavigator:navigators:get"><apiName>navigators</apiName><shortdesc>
      Навигаторы представлений, управляемые TabbedViewNavigator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components.supportClasses:ViewNavigatorBase"/></apiValueDef><apiDesc>
      Навигаторы представлений, управляемые TabbedViewNavigator. Каждый навигатор представлен в виде вкладки в панели вкладок TabbedViewNavigator. Только один навигатор представлений может быть активным. Для создания ссылки на активный навигатор представлений используется свойство <codeph>selectedNavigator</codeph>.
     
      <p>При изменении этого свойства текущий навигатор представления удаляется и для <codeph>selectedIndex</codeph> устанавливается значение 0. Эта операция не может быть отменена и передается немедленно.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TabbedViewNavigator:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      Отсчитываемый от нуля индекс выбранного навигатора представлений или -1, если элементы не выбраны.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Отсчитываемый от нуля индекс выбранного навигатора представлений или -1, если элементы не выбраны. Установка свойства <codeph>selectedIndex</codeph> отменяет текущий выбор навигатора и выбирает навигатор в указанном индексе.
           <p>Значение всегда находится между -1 и (<codeph>navigators.length</codeph> - 1). Если элементы в индексе более низком, чем <codeph>selectedIndex</codeph>, удаляются из компонента, выбранный индекс соответственно корректируется с понижением.</p>
           <p>Если выбранный элемент удален, выбранный индекс устанавливается следующим образом:</p>
           <ul>
        <li>-1, если отсутствуют оставшиеся элементы.</li>
        <li><codeph>selectedIndex</codeph> - 1, если остался по меньшей мере один элемент.</li>
      </ul>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TabbedViewNavigator:selectedNavigator:get"><apiName>selectedNavigator</apiName><shortdesc>
      Выбранный навигатор представлений для TabbedViewNavigator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components.supportClasses:ViewNavigatorBase</apiValueClassifier></apiValueDef><apiDesc>
      Выбранный навигатор представлений для TabbedViewNavigator. Только один навигатор представлений может быть активным. Для установки активного навигатора представлений следует изменить свойство <codeph>selectedIndex</codeph> или щелкнуть вкладку в элементе управления TabBar.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ContentBackgroundAppearance"><apiName>ContentBackgroundAppearance</apiName><shortdesc>
  Класс ContentBackgroundAppearance определяет константы для допустимых значений стиля contentBackgroundAppearance в Callout.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ContentBackgroundAppearance определяет константы для допустимых значений стиля <codeph>contentBackgroundAppearance</codeph> в Callout.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Callout/style:contentBackgroundAppearance"><linktext>spark.components.Callout.contentBackgroundAppearance</linktext></link></related-links><apiValue id="spark.components:ContentBackgroundAppearance:FLAT"><apiName>FLAT</apiName><shortdesc>
      Применяет маску к contentGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>flat</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Применяет маску к contentGroup.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ContentBackgroundAppearance:INSET"><apiName>INSET</apiName><shortdesc>
      Применяет тень и маску к contentGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>inset</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Применяет тень и маску к contentGroup.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ContentBackgroundAppearance:NONE"><apiName>NONE</apiName><shortdesc>
      Отключает стиль contentBackgroundColor и маскирование contentGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Отключает стиль <codeph>contentBackgroundColor</codeph> и маскирование contentGroup. Используйте это значение, когда содержимое Callout должно отображаться непосредственно над <codeph>backgroundColor</codeph> или когда содержимое предоставляет собственное маскирование. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ActionBarDefaultButtonAppearance"><apiName>ActionBarDefaultButtonAppearance</apiName><shortdesc>
  Класс ActionBarDefaultButtonAppearance определяет константы для допустимых значений стиля defaultButtonAppearance в ActionBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ActionBarDefaultButtonAppearance определяет константы для допустимых значений стиля <codeph>defaultButtonAppearance</codeph> в ActionBar.
  
  </apiDesc></apiClassifierDetail><apiValue id="spark.components:ActionBarDefaultButtonAppearance:BEVELED"><apiName>BEVELED</apiName><shortdesc>
      Указывает темы оформления со скосом и непрозрачностью для кнопок в группах навигации и действий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>beveled</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Указывает темы оформления со скосом и непрозрачностью для кнопок в группах навигации и действий.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ActionBarDefaultButtonAppearance:NORMAL"><apiName>NORMAL</apiName><shortdesc>
      Указывает темы оформления с прозрачностью для кнопок в группах навигации и действий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Указывает темы оформления с прозрачностью для кнопок в группах навигации и действий.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:View"><apiName>View</apiName><shortdesc>
  Класс View - это базовый класс контейнера для всех представлений, используемых навигаторами представлений.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><Exclude kind="property" name="z"/><Exclude kind="property" name="scaleZ"/><Exclude kind="property" name="scaleY"/><Exclude kind="property" name="scaleX"/><Exclude kind="property" name="maxWidth"/><Exclude kind="property" name="minWidth"/><Exclude kind="property" name="width"/><Exclude kind="property" name="maxHeight"/><Exclude kind="property" name="minHeight"/><Exclude kind="property" name="height"/><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:View&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:View
   <strong>Properties</strong>
    actionBarVisible="true"
    actionContent="null"
    actionLayout="null"
    data="null"
    destructionPolicy="auto"
    navigationContent="null"
    navigationLayout="null"
    overlayControls="false"
    tabBarVisible="true"
    title=""
    titleContent="null"
    titleLayout="null"
    viewMenuItems="null"
 
   <strong>Events</strong>
    backKeyPressed="<i>No default</i>"
    dataChange="<i>No default</i>"
    menuKeyPressed="<i>No default</i>"
    removing="<i>No default</i>"
    viewActivate="<i>No default</i>"
    viewDeactivate="<i>No default</i>"
 
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс View - это базовый класс контейнера для всех представлений, используемых навигаторами представлений. Контейнер View расширяет контейнер Group и добавляет дополнительные свойства для связи с вышестоящим навигатором.
   <p>В мобильном приложении область содержимого приложения отображает отдельные экраны, или представления, которые составляют приложение. Для навигации по представлениям приложения пользователи могут использовать сенсорный экран, компоненты, встроенные в приложение, и элементы управления для ввода данных в мобильное устройство.</p>
   <p/>
  <p>
  <adobeimage alt="" href="../../images/vn_single_section_home_vn.png"/>
 </p>
   <p>Каждое представление в приложении соответствует контейнеру View, определенному в файле ActionScript или MXML. Каждый контейнер View содержит свойство <codeph>data</codeph>, определяющее данные, связанные с этим представлением. Контейнеры View используют свойство <codeph>data</codeph> для передачи информации друг другу, когда пользователь выполняет навигацию по приложению.</p>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ViewNavigator"><linktext>ViewNavigator</linktext></link></related-links><adobeApiEvent id="spark.components:View_spark.events.ViewNavigatorEvent.REMOVING_removing"><apiName>removing</apiName><shortdesc>
  Отправляется непосредственно перед удалением экрана вследствие изменения экрана.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ViewNavigatorEvent.REMOVING</apiEventType><adobeApiEventClassifier>spark.events.ViewNavigatorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется непосредственно перед удалением экрана вследствие изменения экрана. При вызове <codeph>preventDefault()</codeph> во время обработки этого события изменение экрана отменяется.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_spark.events.ViewNavigatorEvent.VIEW_DEACTIVATE_viewDeactivate"><apiName>viewDeactivate</apiName><shortdesc>
  Отправляется при деактивации текущего представления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ViewNavigatorEvent.VIEW_DEACTIVATE</apiEventType><adobeApiEventClassifier>spark.events.ViewNavigatorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при деактивации текущего представления.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_spark.events.ViewNavigatorEvent.VIEW_ACTIVATE_viewActivate"><apiName>viewActivate</apiName><shortdesc>
  Отправляется при активации текущего представления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ViewNavigatorEvent.VIEW_ACTIVATE</apiEventType><adobeApiEventClassifier>spark.events.ViewNavigatorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при активации текущего представления.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_mx.events.FlexEvent.MENU_KEY_PRESSED_menuKeyPressed"><apiName>menuKeyPressed</apiName><shortdesc>
  Отправляется при нажатии кнопки "Меню", когда представление находится в мобильном приложении.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.MENU_KEY_PRESSED</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при нажатии кнопки "Меню", когда представление находится в мобильном приложении.
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Передается при изменении свойства data.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при изменении свойства<codeph>data</codeph>.
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:View_mx.events.FlexEvent.BACK_KEY_PRESSED_backKeyPressed"><apiName>backKeyPressed</apiName><shortdesc>
  Отправляется при нажатии кнопки "Назад", когда представление находится в мобильном приложении.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.BACK_KEY_PRESSED</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при нажатии кнопки "Назад", когда представление находится в мобильном приложении.
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:View:View"><apiName>View</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:View:createReturnObject"><apiName>createReturnObject</apiName><shortdesc>
      Создает объект, возвращаемый в навигатор представлений, когда это представление более не отображается в стеке навигации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Значение в поле <codeph>object</codeph> свойства <codeph>ViewNavigator.poppedViewReturnedObject</codeph>.  
           </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Создает объект, возвращаемый в навигатор представлений, когда это представление более не отображается в стеке навигации.
           <p>При изменении этого метода в View данные возвращаются в новое представление, когда это представление более не отображается в стеке навигации. Метод <codeph>createReturnObject()</codeph> возвращает один объект. Объект, возвращаемый этим методом, записывается в свойстве <codeph>ViewNavigator.poppedViewReturnedObject</codeph>. </p>
           <p>Свойство <codeph>ViewNavigator.poppedViewReturnedObject</codeph> принадлежит к типу ViewReturnObject. Свойство <codeph>ViewReturnObject.object</codeph> содержит значение, возвращенное этим методом. </p>
           <p>Если для свойства <codeph>poppedViewReturnedObject</codeph> указано значение null, данные не возвращаются. Свойство <codeph>poppedViewReturnedObject</codeph> будет обязательно установлено в новом представлении до того, как новое представление получит событие <codeph>add</codeph>.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#ViewNavigator/poppedViewReturnedObject"><linktext>ViewNavigator.poppedViewReturnedObject</linktext></link><link href="spark.components.supportClasses.xml#ViewReturnObject"><linktext>spark.components.supportClasses.ViewReturnObject</linktext></link></related-links></apiOperation><apiOperation id="spark.components:View:deserializeData"><apiName>deserializeData</apiName><shortdesc>
      Десериализует объект данных, сохраненный на диск представлением, обычно посредством вызова метода serializeData().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Значение, назначенное свойству <codeph>data</codeph> представления.
          
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Объект данных для десериализации.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Десериализует объект данных, сохраненный на диск представлением, обычно посредством вызова метода <codeph>serializeData()</codeph>.  
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:View:getCurrentViewState"><apiName>getCurrentViewState</apiName><shortdesc>
      Проверяет пропорции рабочей области и возвращает соответствующее состояние, в которое должно перейти View.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>String, указывающая имя состояния, которое должно быть применено к представлению. Возможные возвращаемые значения: <codeph>"portrait"</codeph> или <codeph>"landscape"</codeph>. Это состояние изменяется, только если требуемое состояние существует в представлении. Если требуемое состояние отсутствует, этот метод возвращает текущее состояние компонента.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Проверяет пропорции рабочей области и возвращает соответствующее состояние, в которое должно перейти View.  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:View:serializeData"><apiName>serializeData</apiName><shortdesc>
      Отвечает за сериализацию свойства data представления, когда представление сохраняется на диске.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект сериализованных данных.
     
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Отвечает за сериализацию свойства <codeph>data</codeph> представления, когда представление сохраняется на диске. Возвращаемый объект должен быть таким, чтобы его можно было записать в общедоступном объекте. По умолчанию этот метод возвращает свойство <codeph>data</codeph> представления.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:View:actionBarVisible:get"><apiName>actionBarVisible</apiName><shortdesc>
      Указывает, будет ли в представлении отображаться панель действий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает, будет ли в представлении отображаться панель действий. Это свойство может не соответствовать свойству <codeph>visible</codeph> элемента управления ActionBar навигатора представлений. 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:actionContent:get"><apiName>actionContent</apiName><shortdesc conref="ActionBar#actionContent">
      Это свойство изменяет свойство actionContent в компонентах ActionBar, ViewNavigator и ViewNavigatorApplication.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionContent">
      Это свойство изменяет свойство <codeph>actionContent</codeph> в компонентах ActionBar, ViewNavigator и ViewNavigatorApplication.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionContent"><linktext>ActionBar.actionContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:View:actionLayout:get"><apiName>actionLayout</apiName><shortdesc conref="ActionBar#actionLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:data:get"><apiName>data</apiName><shortdesc>
      Данные, связанные с текущим представлением.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Данные, связанные с текущим представлением. С помощью этого свойства передается информация в View, когда это представление отображается в стеке навигации. Для установки этого свойства следует передать аргумент <codeph>data</codeph> в метод <codeph>pushView()</codeph>. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:destructionPolicy:get"><apiName>destructionPolicy</apiName><shortdesc>
      Определяет стратегию удаления, которую должен использовать навигатор представления, когда это представление удалено.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>auto
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет стратегию удаления, которую должен использовать навигатор представления, когда это представление удалено. При установленном значении "auto" навигатор удалит представление, которое будет неактивным. Если указано "never", представление будет кэшировано памяти.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:isActive:get"><apiName>isActive</apiName><shortdesc>
      Обозначает, является ли текущее представление активным.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Обозначает, является ли текущее представление активным. Навигатор представления автоматически установит для этого флага значения <codeph>true</codeph> или <codeph>false</codeph> при изменении его состояния. При установке этого свойства могут отправляться события <codeph>viewActivate</codeph> или <codeph>viewDeactivate</codeph>. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:navigationContent:get"><apiName>navigationContent</apiName><shortdesc conref="ActionBar#navigationContent">
      Это свойство изменяет свойство navigationContent в компонентах ActionBar, ViewNavigator и ViewNavigatorApplication.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationContent">
      Это свойство изменяет свойство <codeph>navigationContent</codeph> в компонентах ActionBar, ViewNavigator и ViewNavigatorApplication.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationContent"><linktext>ActionBar.navigationContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:View:navigationLayout:get"><apiName>navigationLayout</apiName><shortdesc conref="ActionBar#navigationLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:navigator:get"><apiName>navigator</apiName><shortdesc>
     Навигатор, содержащий это представление.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="navigatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:ViewNavigator</apiValueClassifier></apiValueDef><apiDesc>
     Навигатор, содержащий это представление.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:overlayControls:get"><apiName>overlayControls</apiName><shortdesc>
      По умолчанию элементы управления TabBar и ActionBar мобильного приложения определяют область, которая не может использоваться представлениями приложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      По умолчанию элементы управления TabBar и ActionBar мобильного приложения определяют область, которая не может использоваться представлениями приложения. Это означает, что содержимое не может использовать полноэкранный размер мобильного устройства. Если для свойства указано значение <codeph>true</codeph>, размеры области содержимого приложения совпадают с шириной и высотой экрана. Элементы управления ActionBar и TabBar размещены над областью содержимого со значением <codeph>alpha</codeph> равным 0,5, поэтому они являются частично прозрачными. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:tabBarVisible:get"><apiName>tabBarVisible</apiName><shortdesc>
      Указывает, будет ли в представлении отображаться панель вкладок.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает, будет ли в представлении отображаться панель вкладок. Это свойство может не соответствовать свойству <codeph>visible</codeph> элемента управления TabBar навигатора. 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:titleContent:get"><apiName>titleContent</apiName><shortdesc conref="ActionBar#titleContent">
      Это свойство изменяет свойство titleContent в компонентах ActionBar, ViewNavigator и ViewNavigatorApplication.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleContent">
      Это свойство изменяет свойство <codeph>titleContent</codeph> в компонентах ActionBar, ViewNavigator и ViewNavigatorApplication.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>ActionBar.titleContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:View:titleLayout:get"><apiName>titleLayout</apiName><shortdesc conref="ActionBar#titleLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:title:get"><apiName>title</apiName><shortdesc conref="ActionBar#title">
      Это свойство изменяет свойство title в компонентах ActionBar, ViewNavigator и ViewNavigatorApplication.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#title">
      Это свойство изменяет свойство <codeph>title</codeph> в компонентах ActionBar, ViewNavigator и ViewNavigatorApplication.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:View:viewMenuItems:get"><apiName>viewMenuItems</apiName><shortdesc>
      Вектор объектов ViewMenuItem, передаваемый в ViewMenu, когда это представление является активным.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components:ViewMenuItem"/></apiValueDef><apiDesc>
      Вектор объектов ViewMenuItem, передаваемый в ViewMenu, когда это представление является активным. 
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ViewMenu"><linktext>ViewMenu</linktext></link><link href="spark.components.xml#ViewMenuItem"><linktext>ViewMenuItem</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:ArrowDirection"><apiName>ArrowDirection</apiName><shortdesc>
  Перечисление направлений стрелок, используемых в визуальных компонентах.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Перечисление направлений стрелок, используемых в визуальных компонентах.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Callout/arrowDirection"><linktext>spark.components.Callout.arrowDirection</linktext></link></related-links><apiValue id="spark.components:ArrowDirection:DOWN"><apiName>DOWN</apiName><shortdesc>
      Стрелка направлена вниз.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>down</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Стрелка направлена вниз.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ArrowDirection:LEFT"><apiName>LEFT</apiName><shortdesc>
      Стрелка направлена влево.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Стрелка направлена влево.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ArrowDirection:NONE"><apiName>NONE</apiName><shortdesc>
      Направление стрелки отсутствует.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Направление стрелки отсутствует.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ArrowDirection:RIGHT"><apiName>RIGHT</apiName><shortdesc>
      Стрелка направлена вправо.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Стрелка направлена вправо.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ArrowDirection:UP"><apiName>UP</apiName><shortdesc>
      Стрелка направлена вверх.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>up</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Стрелка направлена вверх.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:BusyIndicator"><apiName>BusyIndicator</apiName><shortdesc>
  BusyIndicator определяет компонент, чтобы отобразить, когда продолжительная операция выполняется.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:BusyIndicator" playerVersion="AIR2.5" theme="spark,mobile" type="uint">
<description>
  Цвет линий счетчика.
   
  </description>
<default>0x000000
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="rotationInterval" owner="spark.components:BusyIndicator" playerVersion="AIR2.5" type="Number">
<description>
  Интервал задержки (в миллисекундах) между поворотами этого компонента. Управляет скоростью вращения этого компонента. 
 
  </description>
<default>50
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
   
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:BusyIndicator&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:BusyIndicator
    <strong>Common Styles</strong>
    rotationInterval=50
 
    <strong>Spark Styles</strong>
    symbolColor="0x000000"
  
    <strong>Mobile Styles</strong>
    symbolColor="0x000000"
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  BusyIndicator определяет компонент, отображаемый при выполнении длительной операции. Этот компонент создает счетчик с двенадцатью линиями. Цвет линий зависит от значения, установленного для стиля <codeph>symbolColor</codeph>. Прозрачность этого компонента можно изменить с помощью свойства <codeph>alpha</codeph>, но значение альфа-канала каждой линии не меняется.
   <p/>
  <p>
  <adobeimage alt="" href="../../images/bi_busy_indicator_bi.png"/>
 </p>
 
  <p>Скоростью вращения этого компонента управляет стиль <codeph>rotationInterval</codeph>. Стиль <codeph>rotationInterval</codeph> устанавливает интервал в миллисекундах между поворотами. Для увеличения скорости вращения необходимо уменьшить значение <codeph>rotationInterval</codeph>.</p>
 
  <p>BusyIndicator имеет следующие характеристики по умолчанию:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row><entry>Размер по умолчанию</entry><entry>160 DPI: 26x26 пикселов 240 DPI: 40x40 пикселов 320 DPI: 52x52 пикселов</entry></row><row><entry>Минимальный размер</entry><entry>20x20 пикселов</entry></row><row><entry>Максимальный размер</entry><entry>Без ограничений</entry></row></tbody></tgroup></adobetable>
  
  <p>Диаметр счетчика BusyIndicator представлен минимальными значениями ширины и высоты компонента. Диаметр должен быть представлен четным числом. В случае указания нечетного числа значение будет уменьшено на единицу.</p>
 
  </apiDesc><example conref="BusyIndicatorExample.mxml"/><example conref="BusyIndicatorExampleHomeView.mxml"/></apiClassifierDetail><apiConstructor id="spark.components:BusyIndicator:BusyIndicator"><apiName>BusyIndicator</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:ActionBar"><apiName>ActionBar</apiName><shortdesc>
  Класс ActionBar определяет компонент, включающий в себя группы заголовка, навигации и содержимого действий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="titleContentWithActionAndNavigation" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  ActionBar с содержимым, определенным для компонента темы оформления <codeph>titleContent</codeph>, и компоненты, отображаемые в элементах темы оформления <codeph>actionGroup</codeph> и <codeph>navigationGroup</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleContentWithNavigation" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  ActionBar с содержимым в компоненте темы оформления <codeph>titleContent</codeph> и компоненты, определенные в свойстве <codeph>navigationContent</codeph> для отображения в компоненте темы оформления <codeph>navigationGroup</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleContentWithAction" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  ActionBar с содержимым в компоненте темы оформления <codeph>titleContent</codeph> и компоненты, определенные в свойстве <codeph>actionContent</codeph> для отображения в компоненте темы оформления <codeph>actionGroup</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleContent" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  ActionBar с содержимым в компоненте темы оформления <codeph>titleContent</codeph>, но не темы оформления <codeph>titleDisplay</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleWithActionAndNavigation" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  ActionBar с содержимым, определенным для компонента темы оформления <codeph>titleDisplay</codeph>, и компоненты, отображаемые в элементах темы оформления <codeph>actionGroup</codeph> и <codeph>navigationGroup</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleWithNavigation" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  ActionBar с содержимым в компоненте темы оформления <codeph>titleDisplay</codeph> и компоненты, определенные в свойстве <codeph>navigationContent</codeph> для отображения в компоненте темы оформления <codeph>navigationGroup</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="titleWithAction" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  ActionBar с содержимым в компоненте темы оформления <codeph>titleDisplay</codeph> и компоненты, определенные в свойстве <codeph>actionContent</codeph> для отображения в компоненте темы оформления <codeph>actionGroup</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="title" owner="spark.components:ActionBar" playerVersion="AIR2.5">
<description>
  Базовое состояние ActionBar с компонентом темы оформления <codeph>titleDisplay</codeph> и без содержимого
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style enumeration="normal,beveled" inherit="no" name="defaultButtonAppearance" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="String">
<description>
  Внешний вид кнопок в группах навигации и действий. Допустимыми значениями MXML являются <codeph>normal</codeph> и<codeph>beveled</codeph>.
   <p>В ActionScript для установки значения этого свойства используются следующие константы: <codeph>ActionBarDefaultButtonAppearance.NORMAL</codeph> и <codeph>ActionBarDefaultButtonAppearance.BEVELED</codeph>.</p>
   </description>
<default>ActionBarDefaultButtonAppearance.NORMAL
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textShadowAlpha" owner="spark.components:ActionBar" playerVersion="AIR1.5" theme="mobile" type="Number">
<description>
  Альфа-канал теней текста.
 
  </description>
<default>0.55
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:ActionBar" playerVersion="AIR1.5" theme="mobile" type="uint">
<description>
  Цвет теней текста.
 
  </description>
<default>0xFFFFFF
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Количество пикселов между верхней границей и всеми группами содержимого.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Количество пикселов между левой границей и actionGroup.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Количество пикселов между левой границей и navigationGroup.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Количество пикселов между нижней границей и всеми группами содержимого.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>
<default>0x70B2EE
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="Number">
<description conref="spark.components.SkinnableContainer#style:contentBackgroundAlpha">
  </description>
<default>1.0
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="Number">
<description conref="spark.components.SkinnableContainer#style:backgroundAlpha">
  </description>
<default>1.0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:accentColor">
  </description>
<default>0x0099FF
 
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="left,right,center" inherit="no" name="titleAlign" owner="spark.components:ActionBar" playerVersion="AIR2.5" theme="mobile" type="String">
<description>
  Выравнивание заголовка относительно размеров ActionBar. Возможными значениями являются <codeph>left</codeph>, <codeph>right</codeph> и <codeph>center</codeph>.
 
  </description>
<default>"center"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Смещение первой строки текста с левой стороны контейнера в пикселях. Это свойство не может быть представлено отрицательным числом, когда оно используется в мобильной теме.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  Определяет использование подчеркивания текста. Возможными значениями являются <codeph>none</codeph> и <codeph>underline</codeph>.
 
  </description>
<default>"none"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  Выравнивание текста внутри контейнера. Возможными значениями являются <codeph>left</codeph>, <codeph>right</codeph> или <codeph>center</codeph>.
 
  <p>Значением по умолчанию является <codeph>left</codeph>. Для компонента FormItem, значением по умолчанию является <codeph>right</codeph>. Для компонентов Button, LinkButton и AccordionHeader значением по умолчанию является <codeph>center</codeph> и это свойство является допустимым, только если свойство <codeph>labelPlacement</codeph> установлено на <codeph>left</codeph> или <codeph>right</codeph>. Если свойство <codeph>labelPlacement</codeph> установлено на <codeph>top</codeph> или <codeph>bottom</codeph>, текст и любой значок располагаются по центру.</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между каждым символом. Положительное значение увеличивает интервал между символами вне стандартного интервала, в то время как отрицательное значение его уменьшает.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Дополнительный вертикальный пробел между строками текста.
   <p>Значением по умолчанию является 0.</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  Определяет использование жирного шрифта в тексте. Допустимыми значениями являются <codeph>normal</codeph> и <codeph> bold</codeph>. Значение по умолчанию для элемента управления Button равно <codeph>bold</codeph>. Значением по умолчанию для всех прочих элементов управления является<codeph>normal</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  Определяет использование курсива в тексте. Допустимыми значениями являются <codeph>normal</codeph> и <codeph>italic</codeph>.
 
  </description>
<default>"normal"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="Number">
<description>
  Высота текста в пикселях. Для тем Halo значением по умолчанию для всех элементов управления, кроме ColorPicker, является 10. Для элемента управления ColorPicker с темой Halo значением по умолчанию является 11. Для тем Spark значением по умолчанию для всех элементов управления, кроме ColorPicker, является 12. Для элемента управления ColorPicker с темой Spark значением по умолчанию является 11. Значение по умолчанию для темы Mobile - 24.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="String">
<description>
  Имя используемого шрифта. В отличие от использования в реализации CSS, разделенные запятой списки не поддерживаются. Можно использовать любое имя гарнитуры шрифтов. При указании общего имени шрифта оно преобразовывается в соответствующий шрифт устройства. Шрифтом по умолчанию для темы Halo является <codeph>Verdana</codeph>. Шрифтом по умолчанию для темы Spark является <codeph>Arial</codeph>. Шрифт по умолчанию для темы Mobile - <codeph>"_sans"</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:ActionBar" playerVersion="AIR2.5" type="uint">
<description>
  Цвет текста в компоненте, включая метку компонента. Значением по умолчанию для темы Halo является <codeph>0x0B333C</codeph>. Значение по умолчанию для темы Spark - <codeph>0x000000</codeph>. Значение по умолчанию для мобильной темы - <codeph>0xFFFFFF</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="navigationGroup" owner="spark.components:ActionBar" playerVersion="AIR2.5" required="false" var_type="spark.components:Group">
<description>
      Элемент темы оформления, определяющий внешний вид области навигации компонента. По умолчанию класс ActionBarSkin определяет область навигации, отображаемую слева от области заголовка.
           </description>


	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      navigation area of the component.</shortdesc><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></SkinPart><SkinPart name="titleGroup" owner="spark.components:ActionBar" playerVersion="AIR2.5" required="false" var_type="spark.components:Group">
<description>
      Элемент темы оформления, определяющий внешний вид области заголовка компонента. По умолчанию класс ActionBarSkin определяет область заголовка, отображаемую между областями навигации и действия.
           </description>


	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      title area of the component.</shortdesc><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></SkinPart><SkinPart name="actionGroup" owner="spark.components:ActionBar" playerVersion="AIR2.5" required="false" var_type="spark.components:Group">
<description>
      Элемент темы оформления, определяющий внешний вид области действия компонента. По умолчанию класс ActionBarSkin определяет область действия, отображаемую справа от области заголовка.
           </description>


	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      action area of the component.</shortdesc><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></SkinPart><SkinPart name="titleDisplay" owner="spark.components:ActionBar" playerVersion="AIR2.5" required="false" var_type="spark.core:IDisplayText">
<description>
      Элемент темы оформления, определяющий внешний вид текста заголовка в компоненте. Для объявления стилей в компоненте темы оформления ActionBar titleDisplay можно использовать CSS, как показано в следующем примере:
      
      <pre>
      @namespace s "library://ns.adobe.com/flex/spark"; 
      s|ActionBar #titleDisplay { 
         color:red; 
      }
     </pre>
     
      </description>


	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      title text in the component.</shortdesc><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:ActionBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:ActionBar
   <strong>Properties</strong>
    actionContent="null"
    actionLayout="HorizontalLayout"
    navigationContent="null"
    navigationLayout="HorizontalLayout"
    title=""
    titleContent="null"
    titleLayout="HorizontalLayout"
 
   <strong>Common Styles</strong>
    color="<i>Theme dependent</i>"
    fontFamily="<i>Theme dependent</i>"
    fontSize="<i>Theme dependent</i>"
    fontStyle="normal"
    fontWeight="normal"
    leading="0"
    letterSpacing="0"
    textAlign="center"
    textDecoration="none"
    textIndent="0"
 
   <strong>Mobile Styles</strong>
    accentColor="0x0099FF"
    backgroundAlpha="1.0"
    color="<i>Theme dependent</i>"
    contentBackgroundAlpha="1.0"
    contentBackgroundColor="0xFFFFFF"
    focusColor="0x70B2EE"
    textShadowAlpha="0.55"
    textShadowColor="0xFFFFFF"
    titleAlign="center"
 
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ActionBar определяет компонент, включающий в себя группы заголовка, навигации и содержимого действий. Элемент управления ActionBar обеспечивает стандартную область для элементов управления навигации и действий. Он позволяет определить глобальные элементы управления, которые могут использоваться в любых компонентах приложения, и элементы управления, которые зависят от представления. 
   <p>Элемент управления ActionBar определяет три различных области: </p>
   <ul>
    <li>Область навигации
        <p>Содержит компоненты для навигации по разделу. Например, можно указать кнопку возврата в области навигации. Свойство <codeph>navigationContent</codeph> используется для определения компонентов, которые отображаются в области навигации. Для определения макета области навигации используется свойство <codeph>navigationLayout</codeph>. </p></li>
     <li>Область заголовка
         <p>Содержит строку с текстом заголовка или компоненты. Если указаны компоненты, необходимо определить строку заголовка. Свойство <codeph>title</codeph> используется для указания строки, отображаемой в области заголовка. Для определения компонентов, отображаемых в области заголовка, используется свойство <codeph>titleContent</codeph>. С помощью свойства <codeph>titleLayout</codeph> можно определить макет области заголовка. Если указывается значение для свойства <codeph>titleContent</codeph>, тема оформления ActionBar игнорирует свойство <codeph>title</codeph>.</p></li> 
      <li>Область действий 
         <p>Содержит компоненты, определяющие действия, которые пользователь может выполнять в представлении. Например, в качестве компонента области действий можно указать кнопку "Поиск" или "Обновить". Для определения компонентов, отображаемых в области действий, используется свойство <codeph>actionContent</codeph>. С помощью свойства <codeph>actionLayout</codeph> можно определить макет области действий.</p></li>
  </ul>
   <p/>
  <p>
  <adobeimage alt="" href="../../images/ab_search_override_ab.png"/>
 </p>
   <p>В мобильном приложении с одним разделом, т. е. с одним контейнером ViewNavigator, для всех представлений используется одна панель действий. В мобильном приложении с несколькими разделами, т. е. с несколькими контейнерами ViewNavigator, в каждом разделе определяется собственная панель действий.</p>
   </apiDesc><example conref="ActionBarExample2.mxml"/><example conref="ActionBarExample3.mxml"/><example conref="ActionBarExampleHomeView.mxml"/></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.SkinnableContainer.xml"><linktext>spark.components.SkinnableContainer</linktext></link><link href="spark.components.xml#ViewNavigator"><linktext>ViewNavigator</linktext></link><link href="spark.components.xml#View"><linktext>View</linktext></link><link href="spark.components.xml#ViewNavigatorApplication"><linktext>ViewNavigatorApplication</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links><apiConstructor id="spark.components:ActionBar:ActionBar"><apiName>ActionBar</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ActionBar:actionContent:get"><apiName>actionContent</apiName><shortdesc>
      Компоненты, определяющие действия, которые пользователь может выполнять в представлении.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Компоненты, определяющие действия, которые пользователь может выполнять в представлении. Для отображения этих компонентов в области действий элемента управления используется компонент темы оформления <codeph>actionGroup</codeph>. 
     
      <p>Местоположение и внешний вид компонента темы оформления <codeph>actionGroup</codeph> определяются в классе ActionBarSkin. По умолчанию класс ActionBarSkin определяет <codeph>actionGroup</codeph>, отображаемый справа от области отображения заголовка в ActionBar.</p>
     
      <p>Для изменения стандартного местоположения и внешнего вида компонента темы оформления <codeph>actionGroup</codeph> можно создать пользовательский класс темы оформления ActionBarSkin.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link><link href="spark.components.xml#ActionBar/actionLayout"><linktext>actionLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:actionLayout:get"><apiName>actionLayout</apiName><shortdesc>
      Определяет макет компонентов, определенных в области действий свойством actionGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>HorizontalLayout
           </apiDefaultValue></apiValueDef><apiDesc>
      Определяет макет компонентов, определенных в области действий свойством <codeph>actionGroup</codeph>.
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionContent"><linktext>actionContent</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:navigationContent:get"><apiName>navigationContent</apiName><shortdesc>
      Компоненты, которые определяют навигацию для пользователя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Компоненты, которые определяют навигацию для пользователя. Для отображения этих компонентов в области навигации элемента управления используется компонент темы оформления <codeph>navigationGroup</codeph>. 
           <p>Местоположение и внешний вид компонента темы оформления <codeph>navigationGroup</codeph> определяются в классе ActionBarSkin. По умолчанию класс ActionBarSkin определяет компонент <codeph>navigationGroup</codeph>, отображаемый слева от области <codeph>titleGroup</codeph> в ActionBar.</p>
     
      <p>Для изменения стандартного местоположения и внешнего вида компонента темы оформления <codeph>navigationGroup</codeph> можно создать пользовательский класс темы оформления ActionBarSkin.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link><link href="spark.components.xml#ActionBar/navigationLayout"><linktext>navigationLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:navigationLayout:get"><apiName>navigationLayout</apiName><shortdesc>
      Определяет макет компонентов, содержащихся в компоненте темы оформления navigationGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>HorizontalLayout
           </apiDefaultValue></apiValueDef><apiDesc>
      Определяет макет компонентов, содержащихся в компоненте темы оформления <codeph>navigationGroup</codeph>.
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationContent"><linktext>navigationContent</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:titleContent:get"><apiName>titleContent</apiName><shortdesc>
      Компоненты, отображаемые в области заголовка элемента управления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Компоненты, отображаемые в области заголовка элемента управления. Эти компоненты отображаются в компоненте темы оформления <codeph>titleGroup</codeph> элемента управления ActionBar.
           <p>Местоположение и внешний вид компонента темы оформления <codeph>titleGroup</codeph> определяются в классе ActionBarSkin. По умолчанию класс ActionBarSkin определяет <codeph>titleGroup</codeph>, отображаемый в центре ActionBar, для чего используется оставшееся пространство между компонентами темы оформления <codeph>navigationGroup</codeph> и <codeph>actionGroup</codeph>.</p>
     
      <p>Если значением <codeph>titleContent</codeph> является null, компонент темы оформления <codeph>titleDisplay</codeph> (при наличии) отображается вместо компонента темы оформления <codeph>titleGroup</codeph>.</p> 
     
      <p>Для изменения стандартного местоположения и внешнего вида компонента темы оформления <codeph>titleGroup</codeph> можно создать пользовательский класс темы оформления ActionBarSkin.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link><link href="spark.components.xml#ActionBar/title"><linktext>title</linktext></link><link href="spark.components.xml#ActionBar/titleLayout"><linktext>titleLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:titleLayout:get"><apiName>titleLayout</apiName><shortdesc>
      Определяет макет компонентов темы оформления titleGroup и titleDisplay.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>HorizontalLayout
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет макет компонентов темы оформления <codeph>titleGroup</codeph> и <codeph>titleDisplay</codeph>.
     
      <p>Если значением свойства <codeph>titleContent</codeph> является null, компонент темы оформления <codeph>titleDisplay</codeph> отображается вместо компонента темы оформления <codeph>titleGroup</codeph>. Компонент темы оформления <codeph>titleDisplay</codeph> помещается в центре элемента управления ActionBar, для чего используются свойства <codeph>paddingLeft</codeph> и <codeph>paddingRight</codeph> класса макета, указанные в свойстве <codeph>titleLayout</codeph>.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>titleContent</linktext></link></related-links></apiValue><apiValue id="spark.components:ActionBar:title:get"><apiName>title</apiName><shortdesc>
      Заголовок или подпись в области заголовка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
           </apiDefaultValue></apiValueDef><apiDesc>
      Заголовок или подпись в области заголовка. 
           <p>Для определения компонентов, отображаемых в области заголовка, используется свойство <codeph>titleContent</codeph>. Если указывается значение для свойства <codeph>titleContent</codeph>, тема оформления ActionBar игнорирует свойство <codeph>title</codeph>.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>titleContent</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:TabbedViewNavigatorApplication"><apiName>TabbedViewNavigatorApplication</apiName><shortdesc>
  Контейнер TabbedViewNavigatorApplication определяет приложение с несколькими разделами.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="navigators"/><skinParts><SkinPart name="tabbedNavigator" owner="spark.components:TabbedViewNavigatorApplication" playerVersion="AIR2.5" required="false" var_type="spark.components:TabbedViewNavigator">
<description>
      Основной tabbedNavigator для приложения.
      
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The main tabbedNavigator for the application.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:TabbedViewNavigatorApplication&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:TabbedViewNavigatorApplication
    <strong>Properties</strong>
    navigators="null"
 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorApplicationBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Контейнер TabbedViewNavigatorApplication определяет приложение с несколькими разделами. Контейнер TabbedViewNavigatorApplication автоматически создает контейнер TabbedMobileNavigator. Для поддержки навигации по разделам приложения контейнер TabbedViewNavigator создает элемент управления TabBar.
 
  <p>Единственным допустимым нижестоящим элементом контейнера TabbedViewNavigatorApplication является ViewNavigator. Определяет один ViewNavigator для каждого раздела приложения.</p> 
 
  <p>Контейнер TabbedViewNavigatorApplication имеет следующие характеристики по умолчанию:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>высота 100 % и ширина 100 %, что позволяет заполнить всю доступную область экрана.</entry>
        </row><row>
           <entry>Нижестоящий макет</entry>
           <entry>Определяется отдельными контейнерами View, которые составляют представления приложения.</entry>
        </row><row>
           <entry>Полосы прокрутки</entry>
           <entry>Отсутствует. При добавлении полосы прокрутки пользователи могут прокручивать все приложение. в том числе области ActionBar и TabBar приложения. Чтобы избежать прокрутки этих областей представления, следует добавить полосы прокрутки к отдельным контейнерам View в приложении, а не непосредственно к контейнеру приложения. </entry>
        </row><row>
           <entry>Класс темы оформления по умолчанию</entry>
           <entry>spark.skins.mobile.TabbedViewNavigatorApplicationSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TabbedViewNavigatorApplicationExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#TabbedViewNavigator"><linktext>spark.components.TabbedViewNavigator</linktext></link><link href="" invalidHref="spark.components.TabBar.xml"><linktext>spark.components.TabBar</linktext></link><link href="" invalidHref="spark.skins.mobile.TabbedViewNavigatorApplicationSkin.xml"><linktext>spark.skins.mobile.TabbedViewNavigatorApplicationSkin</linktext></link></related-links><apiConstructor id="spark.components:TabbedViewNavigatorApplication:TabbedViewNavigatorApplication"><apiName>TabbedViewNavigatorApplication</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:TabbedViewNavigatorApplication:navigators:get"><apiName>navigators</apiName><shortdesc conref="TabbedViewNavigator#navigators">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components.supportClasses:ViewNavigatorBase"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="TabbedViewNavigator#navigators">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:LabelItemRenderer"><apiName>LabelItemRenderer</apiName><shortdesc>
  Класс LabelItemRenderer определяет средство визуализации элементов по умолчанию для элемента управления на основе списка в мобильной теме.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><styles><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  Вертикальное выравнивание содержимого без использования пропорции «один к одному». Допустимыми значениями являются <codeph>"top"</codeph>, <codeph>"center"</codeph> и <codeph>"bottom"</codeph>.
  
  </description>
<default>"center"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" theme="spark,mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="uint">
<description conref="spark.components.List#style:selectionColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Количество пикселов между верхней границей и компонентом текста средства визуализации элементов.
 
  </description>
<default>5
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Количество пикселов между нижней границей и компонентом текста средства визуализации элементов.
 
  </description>
<default>5
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="spark.components:LabelItemRenderer" playerVersion="AIR1.5" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:chromeColor">
  </description>
<default>0xCCCCCC
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>


	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Смещение первой строки текста с левой стороны контейнера в пикселях. Это свойство не может быть представлено отрицательным числом, когда оно используется в мобильной теме.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  Определяет использование подчеркивания текста. Возможными значениями являются <codeph>none</codeph> и <codeph>underline</codeph>.
 
  </description>
<default>"none"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  Выравнивание текста внутри контейнера. Возможными значениями являются <codeph>left</codeph>, <codeph>right</codeph> или <codeph>center</codeph>.
 
  <p>Значением по умолчанию является <codeph>left</codeph>. Для компонента FormItem, значением по умолчанию является <codeph>right</codeph>. Для компонентов Button, LinkButton и AccordionHeader значением по умолчанию является <codeph>center</codeph> и это свойство является допустимым, только если свойство <codeph>labelPlacement</codeph> установлено на <codeph>left</codeph> или <codeph>right</codeph>. Если свойство <codeph>labelPlacement</codeph> установлено на <codeph>top</codeph> или <codeph>bottom</codeph>, текст и любой значок располагаются по центру.</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между каждым символом. Положительное значение увеличивает интервал между символами вне стандартного интервала, в то время как отрицательное значение его уменьшает.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Дополнительный вертикальный пробел между строками текста.
   <p>Значением по умолчанию является 0.</p>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  Определяет использование жирного шрифта в тексте. Допустимыми значениями являются <codeph>normal</codeph> и <codeph> bold</codeph>. Значение по умолчанию для элемента управления Button равно <codeph>bold</codeph>. Значением по умолчанию для всех прочих элементов управления является<codeph>normal</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  Определяет использование курсива в тексте. Допустимыми значениями являются <codeph>normal</codeph> и <codeph>italic</codeph>.
 
  </description>
<default>"normal"
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="Number">
<description>
  Высота текста в пикселях. Для тем Halo значением по умолчанию для всех элементов управления, кроме ColorPicker, является 10. Для элемента управления ColorPicker с темой Halo значением по умолчанию является 11. Для тем Spark значением по умолчанию для всех элементов управления, кроме ColorPicker, является 12. Для элемента управления ColorPicker с темой Spark значением по умолчанию является 11. Значение по умолчанию для темы Mobile - 24.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="String">
<description>
  Имя используемого шрифта. В отличие от использования в реализации CSS, разделенные запятой списки не поддерживаются. Можно использовать любое имя гарнитуры шрифтов. При указании общего имени шрифта оно преобразовывается в соответствующий шрифт устройства. Шрифтом по умолчанию для темы Halo является <codeph>Verdana</codeph>. Шрифтом по умолчанию для темы Spark является <codeph>Arial</codeph>. Шрифт по умолчанию для темы Mobile - <codeph>"_sans"</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:LabelItemRenderer" playerVersion="AIR2.5" type="uint">
<description>
  Цвет текста в компоненте, включая метку компонента. Значением по умолчанию для темы Halo является <codeph>0x0B333C</codeph>. Значение по умолчанию для темы Spark - <codeph>0x000000</codeph>. Значение по умолчанию для мобильной темы - <codeph>0xFFFFFF</codeph>.
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:LabelItemRenderer" playerVersion="Flash9" type="Number">
<description>
  Число пикселей между правой границей компонента и правым краем его области содержимого.
  <p>Значением по умолчанию является 0.</p>
  <p>Значением по умолчанию для элемента управления Button является 10 для темы Halo и 6 для темы Spark.</p>
  <p>Значение по умолчанию для элемента управления ComboBox: 5.</p>
  <p>Значением по умолчанию для контейнера Form является 16.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:LabelItemRenderer" playerVersion="Flash9" type="Number">
<description>
  Количество пикселей между левой границей компонента и левым краем его области содержимого.
  <p>Значением по умолчанию является 0.</p>
  <p>Значением по умолчанию для элемента управления Button является 10 для темы Halo и 6 для темы Spark.</p>
  <p>Значение по умолчанию для элемента управления ComboBox: 5.</p>
  <p>Значением по умолчанию для контейнера Form является 16.</p>
  <p>Значением по умолчанию для элемента управления Tree является 2.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:LabelItemRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:LabelItemRenderer
   <strong>Properties</strong>
    label=""
 
   <strong>Common Styles</strong>
    color="<i>Theme dependent</i>"
    downColor="<i>Theme dependent</i>"
    fontFamily="<i>Theme dependent</i>"
    fontSize="<i>Theme dependent</i>"
    fontStyle="normal"
    fontWeight="normal"
    leading="0"
    letterSpacing="0"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="5"
    rollOverColor="0xCEDBEF"
    selectionColor="0xB2B2B2"
    textAlign="left"
    textDecoration="none"
    textIndent="0"
    verticalAlign="center"
  
   <strong>Spark Styles</strong>
    alternatingItemColors="undefined"
    focusColor="0x70B2EE"
    symbolColor="0x000000"
  
   <strong>Mobile Styles</strong>
    alternatingItemColors="undefined"
    focusColor="0x70B2EE"
    symbolColor="0x000000"
 
    <b>Events</b>
    dataChange="<i>No default</i>"
 
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>spark.components:IItemRenderer</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс LabelItemRenderer определяет средство визуализации элементов по умолчанию для элемента управления на основе списка в мобильной теме. Это простое средство визуализации элементов с одним текстовым компонентом.
   <p>Средство визуализации создает один элемент управления StyleableTextField для отображения строки. Именем элемента управления StyleableTextField в средстве визуализации элементов является <codeph>labelDisplay</codeph>. Свойство <codeph>labelField</codeph> элемента управления на основе списка используется для указания поля элемента данных, которое будет отображено в элементе управления StyleableTextField.</p>
   <p>Если требуется создать пользовательское средство визуализации элементов для мобильных устройств, компания Adobe рекомендует создать средство визуализации элементов ActionScript, которое расширяет этот класс.</p>
   </apiDesc><example conref="LabelItemRendererExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#IconItemRenderer"><linktext>spark.components.IconItemRenderer</linktext></link><link href="" invalidHref="spark.components.List.xml"><linktext>spark.components.List</linktext></link><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link><link href="" invalidHref="spark.components.IItemRenderer.xml"><linktext>spark.components.IItemRenderer</linktext></link><link href="" invalidHref="spark.components.supportClasses.ItemRenderer.xml"><linktext>spark.components.supportClasses.ItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.components:LabelItemRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Передается при изменении свойства data.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при изменении свойства<codeph>data</codeph>.
   <p>При использовании компонента как средства визуализации элементов свойство <codeph>data</codeph> содержит данные для отображения. Прослушиватель события может использовать это событие и обновить компонент при изменении свойства <codeph>data</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:LabelItemRenderer:LabelItemRenderer"><apiName>LabelItemRenderer</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:LabelItemRenderer:protected:createLabelDisplay"><apiName>createLabelDisplay</apiName><shortdesc>
      Создает компонент labelDisplay
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Создает компонент labelDisplay
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:destroyLabelDisplay"><apiName>destroyLabelDisplay</apiName><shortdesc>
      Удаляет компонент labelDisplay
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Удаляет компонент labelDisplay
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:drawBackground"><apiName>drawBackground</apiName><shortdesc>
      Отображает фон для средства визуализации элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Указывает ширину компонента в пикселях в координатах компонента вне зависимости от значения свойства <codeph>scaleX</codeph> компонента.
           </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Указывает высоту компонента в пикселях в координатах компонента вне зависимости от значения свойства <codeph>scaleY</codeph> компонента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Отображает фон для средства визуализации элементов.
     
      <p>Этот метод, а также <codeph>layoutContents()</codeph>, вызывается методом <codeph>updateDisplayList()</codeph>.</p>
     
      <p> Этот метод выполняет соответствующую обработку состояний selected, down или caretted. Однако если для <codeph>alternatingItemColors</codeph> установлено значение <codeph>undefined</codeph>, стандартный фон прозрачен. Переопределение этого метода изменит внешний вид фона средства визуализации элементов.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:drawBorder"><apiName>drawBorder</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3.0"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Указывает ширину компонента в пикселях в координатах компонента вне зависимости от значения свойства <codeph>scaleX</codeph> компонента.
           </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Указывает высоту компонента в пикселях в координатах компонента вне зависимости от значения свойства <codeph>scaleY</codeph> компонента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
     
      <p><codeph/></p>
     
      <p/>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:getElementPreferredHeight"><apiName>getElementPreferredHeight</apiName><shortdesc conref="spark.skins.mobile.supportClasses.MobileSkin#getElementPreferredHeight()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc conref="spark.skins.mobile.supportClasses.MobileSkin#getElementPreferredHeight()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#LabelItemRenderer/setElementPosition"><linktext>setElementPosition</linktext></link><link href="spark.components.xml#LabelItemRenderer/setElementSize"><linktext>setElementSize</linktext></link><link href="spark.components.xml#LabelItemRenderer/getElementPreferredWidth"><linktext>getElementPreferredWidth</linktext></link></related-links></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:getElementPreferredWidth"><apiName>getElementPreferredWidth</apiName><shortdesc conref="spark.skins.mobile.supportClasses.MobileSkin#getElementPreferredWidth()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc conref="spark.skins.mobile.supportClasses.MobileSkin#getElementPreferredWidth()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#LabelItemRenderer/setElementPosition"><linktext>setElementPosition</linktext></link><link href="spark.components.xml#LabelItemRenderer/setElementSize"><linktext>setElementSize</linktext></link><link href="spark.components.xml#LabelItemRenderer/getElementPreferredHeight"><linktext>getElementPreferredHeight</linktext></link></related-links></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:layoutContents"><apiName>layoutContents</apiName><shortdesc>
      Располагает нижестоящие элементы этого средства визуализации элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Указывает ширину компонента в пикселях в координатах компонента вне зависимости от значения свойства <codeph>scaleX</codeph> компонента.
           </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Указывает высоту компонента в пикселях в координатах компонента вне зависимости от значения свойства <codeph>scaleY</codeph> компонента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Располагает нижестоящие элементы этого средства визуализации элементов.
     
      <p>Этот метод, а также <codeph>drawBackground()</codeph>, вызывается методом <codeph>updateDisplayList()</codeph>.</p>
     
      <p>Этот метод размещает компонент <codeph>labelDisplay</codeph>. Подклассы должны переопределять это значение для размещения своих нижестоящих элементов.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:setElementPosition"><apiName>setElementPosition</apiName><shortdesc conref="spark.skins.mobile.supportClasses.MobileSkin#setElementPosition()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc conref="spark.skins.mobile.supportClasses.MobileSkin#setElementPosition()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#LabelItemRenderer/setElementSize"><linktext>setElementSize</linktext></link></related-links></apiOperation><apiOperation id="spark.components:LabelItemRenderer:protected:setElementSize"><apiName>setElementSize</apiName><shortdesc conref="spark.skins.mobile.supportClasses.MobileSkin#setElementSize()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc conref="spark.skins.mobile.supportClasses.MobileSkin#setElementSize()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#LabelItemRenderer/setElementPosition"><linktext>setElementPosition</linktext></link></related-links></apiOperation><apiValue id="spark.components:LabelItemRenderer:protected:labelDisplay"><apiName>labelDisplay</apiName><shortdesc>
      Компонент текста, используемый для отображения данных метки этого средства визуализации элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:StyleableTextField</apiValueClassifier></apiValueDef><apiDesc>
      Компонент текста, используемый для отображения данных метки этого средства визуализации элементов.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:LabelItemRenderer:applicationDPI:get"><apiName>applicationDPI</apiName><shortdesc>
      Возвращает DPI приложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Возвращает DPI приложения.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:LabelItemRenderer:data:get"><apiName>data</apiName><shortdesc>
      Реализация свойства data, как определено интерфейсом IDataRenderer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Реализация свойства <codeph>data</codeph>, как определено интерфейсом IDataRenderer. При установке обеспечивает сохранение значения и признание компонента недействительным для инициирования перекомпоновки компонента.
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="spark.components:LabelItemRenderer:protected:down:get"><apiName>down</apiName><shortdesc>
      Значение установлено на true, когда пользователь нажимает кнопку мыши на средстве визуализации элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Значение установлено на <codeph>true</codeph>, когда пользователь нажимает кнопку мыши при наведенном на средство визуализации элементов курсоре.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:LabelItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:LabelItemRenderer:protected:hovered:get"><apiName>hovered</apiName><shortdesc>
      Значение установлено на true, когда курсор мыши наведен на средство визуализации элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Значение установлено на <codeph>true</codeph>, когда курсор мыши наведен на средство визуализации элементов.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:LabelItemRenderer:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:LabelItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:LabelItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:LabelItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="spark.components:SpinnerListContainer"><apiName>SpinnerListContainer</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="style" name="backgroundColor"/><Exclude kind="style" name="backgroundAlpha"/><DefaultProperty name="mxmlContentFactory"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
   Элементы SpinnerList расположены горизонтально. SpinnerListContainerSkin отображает рамку, градиенты тени и индикатор выбора.   
       
 </apiDesc><example conref="SpinnerListExample.mxml"/><example conref="SpinnerListContainerExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#SpinnerList"><linktext>spark.components.SpinnerList</linktext></link><link href="" invalidHref="spark.skins.mobile.SpinnerListContainerSkin.xml"><linktext/></link></related-links><apiConstructor id="spark.components:SpinnerListContainer:SpinnerListContainer"><apiName>SpinnerListContainer</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
            
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:ViewNavigatorApplication"><apiName>ViewNavigatorApplication</apiName><shortdesc>
  ViewNavigatorApplication - это класс приложения, который обеспечивает простую инфраструктуру приложений, реализующих модель навигации на основе представления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="navigationStack"/><skinParts><SkinPart name="navigator" owner="spark.components:ViewNavigatorApplication" required="false" var_type="spark.components:ViewNavigator">
<description>
      Основной навигатор представления в приложении. Задачей компонента является управление моделью навигации представления для приложения.  
     </description>
	<shortdesc>
      The main view navigator for the application.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ViewNavigatorApplication&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ViewNavigatorApplication
    <strong>Properties</strong>
    actionContent="null"
    actionLayout="null"
    firstView="null"
    firstViewData="null"
    navigationContent="null"
    navigationLayout="null"
    title=""
    titleContent="null"
    titleLayout="null"
 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorApplicationBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ViewNavigatorApplication - это класс приложения, который обеспечивает простую инфраструктуру приложений, реализующих модель навигации на основе представления. Этот класс используется в качестве основной точки ввода для приложения и предоставляет поддержку для аппаратных клавиш устройства, определения ориентации и сохраняемости сеанса приложения.
 
  <p>Модель навигации на основе представления определяется пользовательским интерфейсом, в котором результатом действий пользователя является переключение между различными представлениями в полноэкранном режиме. Эта парадигма часто используется в мобильных приложениях и выполняется посредством встроенного контейнера ViewNavigator.</p>
 
  <p>Свойство <codeph>firstView</codeph> определяет компонент View, который отображается первым при инициализации приложения.</p>
 
  <p>В отличие от Application, ViewNavigatorApplication не предназначен для того, чтобы принимать объекты UIComponent в качестве нижестоящих элементов. Все визуальные компоненты должны являться нижестоящими элементами представлений, управляемых приложением.</p>
 
  <p>Контейнер ViewNavigatorApplication имеет следующие характеристики по умолчанию:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>высота 100 % и ширина 100 %, что позволяет заполнить всю доступную область экрана.</entry>
        </row><row>
           <entry>Нижестоящий макет</entry>
           <entry>Определяется отдельными контейнерами View, которые составляют представления приложения.</entry>
        </row><row>
           <entry>Полосы прокрутки</entry>
           <entry>Отсутствует. При добавлении полосы прокрутки пользователи могут прокручивать все приложение. в том числе области ActionBar и TabBar приложения. Чтобы избежать прокрутки этих областей представления, следует добавить полосы прокрутки к отдельным контейнерам View в приложении, а не непосредственно к контейнеру приложения. </entry>
        </row><row>
           <entry>Класс темы оформления по умолчанию</entry>
           <entry>spark.skins.mobile.ViewNavigatorApplicationSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ViewNavigatorApplicationExample.mxml"/><example conref="ViewNavigatorApplicationHomeView.mxml"/><example conref="ViewNavigatorApplicationView2.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#ViewNavigator"><linktext>spark.components.ViewNavigator</linktext></link><link href="spark.components.xml#View"><linktext>spark.components.View</linktext></link><link href="" invalidHref="spark.skins.mobile.ViewNavigatorApplicationSkin.xml"><linktext>spark.skins.mobile.ViewNavigatorApplicationSkin</linktext></link></related-links><apiConstructor id="spark.components:ViewNavigatorApplication:ViewNavigatorApplication"><apiName>ViewNavigatorApplication</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ViewNavigatorApplication:actionBar:get"><apiName>actionBar</apiName><shortdesc>
      Ссылка на элемент управления ActionBar навигатора представления (при его наличии).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:ActionBar</apiValueClassifier></apiValueDef><apiDesc>
      Ссылка на элемент управления ActionBar навигатора представления (при его наличии). Это свойство будет действительным только после добавления навигатора представления в список отображения.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar"><linktext>ActionBar</linktext></link><link href="spark.components.xml#ViewNavigator"><linktext>ViewNavigator</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:actionContent:get"><apiName>actionContent</apiName><shortdesc conref="ActionBar#actionContent">
      Это свойство изменяет свойство actionContent в элементе управления ActionBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionContent">
      Это свойство изменяет свойство <codeph>actionContent</codeph> в элементе управления ActionBar.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionContent"><linktext>spark.components.ActionBar.actionContent</linktext></link><link href="spark.components.xml#View/actionContent"><linktext>spark.components.View.actionContent</linktext></link><link href="spark.components.xml#ViewNavigator/actionContent"><linktext>spark.components.ViewNavigator.actionContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:actionLayout:get"><apiName>actionLayout</apiName><shortdesc conref="ActionBar#actionLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#actionLayout">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/actionLayout"><linktext>spark.components.ActionBar.actionLayout</linktext></link><link href="spark.components.xml#View/actionLayout"><linktext>spark.components.View.actionLayout</linktext></link><link href="spark.components.xml#ViewNavigator/actionLayout"><linktext>spark.components.ViewNavigator.actionLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:firstViewData:get"><apiName>firstViewData</apiName><shortdesc conref="ViewNavigator#firstViewData">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ViewNavigator#firstViewData">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigatorApplication:firstView:get"><apiName>firstView</apiName><shortdesc conref="ViewNavigator#firstView">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ViewNavigator#firstView">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ViewNavigatorApplication:navigationContent:get"><apiName>navigationContent</apiName><shortdesc conref="ActionBar#navigationContent">
      Это свойство изменяет свойство navigationContent в элементе управления ActionBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationContent">
      Это свойство изменяет свойство <codeph>navigationContent</codeph> в элементе управления ActionBar.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationContent"><linktext>spark.components.ActionBar.navigationContent</linktext></link><link href="spark.components.xml#View/navigationContent"><linktext>spark.components.View.navigationContent</linktext></link><link href="spark.components.xml#ViewNavigator/navigationContent"><linktext>spark.components.ViewNavigator.navigationContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:navigationLayout:get"><apiName>navigationLayout</apiName><shortdesc conref="ActionBar#navigationLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#navigationLayout">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/navigationLayout"><linktext>spark.components.ActionBar.navigationLayout</linktext></link><link href="spark.components.xml#View/navigationLayout"><linktext>spark.components.View.navigationLayout</linktext></link><link href="spark.components.xml#ViewNavigator/navigationLayout"><linktext>spark.components.ViewNavigator.navigationLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:titleContent:get"><apiName>titleContent</apiName><shortdesc conref="ActionBar#titleContent">
      Это свойство изменяет свойство titleContent в компонентах ActionBar и ViewNavigatorApplication.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleContent">
      Это свойство изменяет свойство <codeph>titleContent</codeph> в компонентах ActionBar и ViewNavigatorApplication.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleContent"><linktext>spark.components.ActionBar.titleContent</linktext></link><link href="spark.components.xml#View/titleContent"><linktext>spark.components.View.titleContent</linktext></link><link href="spark.components.xml#ViewNavigator/titleContent"><linktext>spark.components.ViewNavigator.titleContent</linktext></link><link href="" invalidHref="spark.skins.mobile.ActionBarSkin.xml"><linktext>spark.skins.mobile.ActionBarSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:titleLayout:get"><apiName>titleLayout</apiName><shortdesc conref="ActionBar#titleLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="spark.layouts.supportClasses:LayoutBase"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#titleLayout">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/titleLayout"><linktext>spark.components.ActionBar.titleLayout</linktext></link><link href="spark.components.xml#View/titleLayout"><linktext>spark.components.View.titleLayout</linktext></link><link href="spark.components.xml#ViewNavigator/titleLayout"><linktext>spark.components.ViewNavigator.titleLayout</linktext></link></related-links></apiValue><apiValue id="spark.components:ViewNavigatorApplication:title:get"><apiName>title</apiName><shortdesc conref="ActionBar#title">
      Это свойство изменяет свойство title в элементе управления ActionBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc conref="ActionBar#title">
      Это свойство изменяет свойство <codeph>title</codeph> в элементе управления ActionBar.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ActionBar/title"><linktext>spark.components.ActionBar.title</linktext></link><link href="spark.components.xml#View/title"><linktext>spark.components.View.title</linktext></link><link href="spark.components.xml#ViewNavigator/title"><linktext>spark.components.ViewNavigator.title</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:SpinnerList"><apiName>SpinnerList</apiName><shortdesc>
  Компонент SpinnerList отображает список элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><Exclude kind="event" name="itemRollOver"/><Exclude kind="event" name="itemRollOut"/><Exclude kind="event" name="changing"/><Exclude kind="property" name="requireSelection"/><Exclude kind="property" name="layout"/><Exclude kind="style" name="chromeColor"/><Exclude kind="style" name="accentColor"/><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="scroller" owner="spark.components:SpinnerList" playerVersion="AIR3" required="false" var_type="spark.components:Scroller">
<description>
      
     
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      The optional Scroller that is used to scroll the List.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:SpinnerList&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SpinnerList
    <strong>Properties</strong>
    wrapElements="true|false"
  /&gt;
  </pre>
 
 ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Компонент SpinnerList отображает список элементов. Элемент selectedItem всегда расположен в центре списка. По умолчанию список отображается циклически.
 
  <p/>
 
 <p>
  <adobeimage alt="" href="../../images/spinnerlist_example.png"/>
 </p>
 
 <p/>
 
  </apiDesc><example conref="SpinnerListExample.mxml"/><example conref="SpinnerListContainerExample.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#SpinnerListContainer"><linktext/></link></related-links><apiConstructor id="spark.components:SpinnerList:SpinnerList"><apiName>SpinnerList</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
            
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SpinnerList:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SpinnerList:protected:partAdded"><apiName>partAdded</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SpinnerList:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.components:SpinnerList:caretIndex:get"><apiName>caretIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:SpinnerList:wrapElements:get"><apiName>wrapElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     </apiDefaultValue></apiValueDef><apiDesc>
       
           
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SpinnerList:dataProvider:set"><apiName>dataProvider</apiName><shortdesc conref="spark.components.DataGroup#dataProvider">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.collections:IList"/></apiValueDef><apiDesc conref="spark.components.DataGroup#dataProvider">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:SplitViewNavigator"><apiName>SplitViewNavigator</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion><skinStates><SkinState name="landscape" owner="spark.components:SplitViewNavigator" playerVersion="AIR3">
<description>
  <codeph/>
 
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></SkinState><SkinState name="portrait" owner="spark.components:SplitViewNavigator" playerVersion="AIR3">
<description>
  <codeph/>
  
  </description>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="viewNavigatorPopUp" owner="spark.components:SplitViewNavigator" playerVersion="AIR3" required="false" var_type="spark.components:SkinnablePopUpContainer">
<description>
      <codeph/> <codeph/> 
     
      </description>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.6
     </productversion></asCustoms></prolog><shortdesc>
      The popUp used to display a navigator when 
      showFirstViewNavigatorInPopUp() is called.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:SplitViewNavigator&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:SplitViewNavigator
    <strong>Properties</strong>
    autoHideFirstViewNavigator="false"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ViewNavigatorBase</apiBaseClassifier></apiClassifierDef><apiDesc>
    
   <p/>
  <p>
  <adobeimage alt="" href="../../images/svn_master_detail_svn.png"/>
 </p>
   <p><codeph/> Этот компонент эффективен при создании интерфейса «Основной-подробности» на мобильном устройстве. Компонент может управлять неограниченным количеством нижестоящих навигаторов. </p>
   <p><b/></p>
 
  <p><codeph/><codeph/>  <codeph/> При установке свойство <codeph>includeInLayout</codeph> этого нижестоящего элемента будет установлено соответствующим образом.</p>
    
  <p>  <codeph/><codeph/>  <codeph/> <codeph/> </p>
   <p><b/><codeph/></p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.skins.mobile.SplitViewNavigatorSkin.xml"><linktext/></link><link href="spark.components.supportClasses.xml#ViewNavigatorBase"><linktext>spark.components.supportClasses.ViewNavigatorBase</linktext></link><link href="spark.components.xml#ViewNavigator"><linktext>spark.components.ViewNavigator</linktext></link><link href="spark.components.xml#TabbedViewNavigator"><linktext>spark.components.TabbedViewNavigator</linktext></link><link href="" invalidHref="spark.components.xml#Application/aspectRatio"><linktext>spark.components.Application.aspectRatio</linktext></link><link href="spark.components.xml#Callout"><linktext>spark.components.Callout</linktext></link><link href="" invalidHref="spark.components.SkinnablePopUpContainer.xml"><linktext>spark.components.SkinnablePopUpContainer</linktext></link></related-links><apiConstructor id="spark.components:SplitViewNavigator:SplitViewNavigator"><apiName>SplitViewNavigator</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SplitViewNavigator:getViewNavigatorAt"><apiName>getViewNavigatorAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Навигатор в указанном индексе или нуль, если навигаторы отсутствуют.
     
      </apiDesc><apiOperationClassifier>spark.components.supportClasses:ViewNavigatorBase</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Получаемый индекс навигатора.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
       <codeph/>
     
      <p/> 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SplitViewNavigator:hideViewNavigatorPopUp"><apiName>hideViewNavigatorPopUp</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
       
     
      <p> </p>
     
      <p><codeph/><codeph/> <codeph/></p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SplitViewNavigator:showFirstViewNavigatorInPopUp"><apiName>showFirstViewNavigatorInPopUp</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>owner</apiItemName><apiType value="flash.display:DisplayObjectContainer"/></apiParam></apiOperationDef><apiDesc>
       
     
      <p><codeph/> <codeph/></p>
     
      <p>  <codeph/><codeph/></p>
     
      <p/>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:SplitViewNavigator:autoHideFirstViewNavigator:get"><apiName>autoHideFirstViewNavigator</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
       <codeph/>
     
      <p><codeph/></p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SplitViewNavigator:numViewNavigators:get"><apiName>numViewNavigators</apiName><shortdesc>
      Количество навигаторов, управляемых контейнером.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Количество навигаторов, управляемых контейнером.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>