<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="flash.filesystem" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiPackage/apiPackage "><apiName class="- topic/title reference/title apiRef/apiName ">flash.filesystem</apiName><apiDetail class="- topic/body reference/refbody apiRef/apiDetail "/><apiClassifier languages="" id="flash.filesystem:FileStream" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">FileStream</apiName><shortdesc class="- topic/shortdesc ">
 Объект FileStream используется для чтения и записи файлов.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseInterface>flash.utils:IDataInput</apiBaseInterface><apiBaseInterface>flash.utils:IDataOutput</apiBaseInterface><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Объект FileStream используется для чтения и записи файлов. Файлы можно открывать в синхронном режиме с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> или в асинхронном с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>.
 
 <p class="- topic/p ">Преимущество открытия файлов в асинхронном режиме состоит в том, что пока Adobe AIR выполняет чтение и запись в фоновом режиме, может исполняться и другой код. При открытии в асинхронном режиме события <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> вызываются по мере выполнения операций.</p>
 
 <p class="- topic/p ">Поведение объекта File, открываемого в асинхронном режиме, похоже на поведение объекта ByteArray, а поведение файла, открываемого в асинхронном режиме, похоже на поведение объекта Socket или URLStream. Когда объект File открывается в синхронном режиме, вызывающий оператор приостанавливает работу, пока запрошенные данные считываются или записываются в файл. Когда же он открывается в асинхронном режиме, все записываемые данные немедленно помещаются в буфер и записываются в файл позднее.</p>
 
 <p class="- topic/p ">Независимо от того, в синхронном или асинхронном режиме выполняется чтение, в действительности методы чтения являются синхронными. В обоих случаях считывание производится из данных, которые «доступны» в текущий момент времени. Разница в том, что при синхронном чтении все данные доступны постоянно, а при асинхронном данные становятся доступны по мере того, как они передаются в буфер считывания. В любом случае, данные, которые в настоящий момент можно считать синхронным способом, представлены свойством <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>.</p>
 
 <p class="- topic/p ">Приложение, обрабатывающее вводимые данные в асинхронном режиме, обычно ожидает событий <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> и использует данные по мере того, как они становятся доступны, через вызов методов чтения. С другой стороны, приложение может просто дождаться, когда станут доступны все данные (событие <codeph class="+ topic/ph pr-d/codeph ">complete</codeph>), и как только событие <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> будет выполнено, обработать все данные сразу. </p>
 
 </apiDesc></apiClassifierDetail><adobeApiEvent id="flash.filesystem:FileStream_flash.events.Event.COMPLETE_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
 Сообщает о достижении конца потока.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Сообщает о достижении конца потока.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/position" class="- topic/link "><linktext class="- topic/linktext ">position</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream_flash.events.OutputProgressEvent.OUTPUT_PROGRESS_outputProgress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">outputProgress</apiName><shortdesc class="- topic/shortdesc ">
 Сообщает, что запись данных из буфера в файл завершена.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.OutputProgressEvent.OUTPUT_PROGRESS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.OutputProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Сообщает, что запись данных из буфера в файл завершена.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream_flash.events.ProgressEvent.PROGRESS_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><shortdesc class="- topic/shortdesc ">
 Сообщает, что в потоке появились новые доступные данные.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Сообщает, что в потоке появились новые доступные данные.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 Указывает, что во время выполнения асинхронной операции ввода-вывода произошла ошибка.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Указывает, что во время выполнения асинхронной операции ввода-вывода произошла ошибка.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream_flash.events.Event.CLOSE_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
 Указывает, что поток был закрыт формальным вызовом метода close().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Указывает, что поток был закрыт формальным вызовом метода <codeph class="+ topic/ph pr-d/codeph ">close()</codeph>.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.filesystem:FileStream:FileStream" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">FileStream</apiName><shortdesc class="- topic/shortdesc ">
	 Создает объект FileStream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Создает объект FileStream. Для открытия файла используйте методы <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> или <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>.
	 
	 </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.filesystem.xml#FileStream/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link></related-links></apiConstructor><apiOperation id="flash.filesystem:FileStream:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
	 Закрывает объект FileStream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Закрывает объект FileStream. 
	 
	 <p class="- topic/p ">После вызова метода <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> данные невозможно считывать или записывать. Если файл был открыт в асинхронном режиме (объект FileStream использует для открытия файла метод <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>), вызов метода <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> заставляет объект вызвать событие <codeph class="+ topic/ph pr-d/codeph ">close</codeph>. </p>
	 
	 <p class="- topic/p ">Автоматическое закрытие приложения закрывает все файлы, связанные с объектами FileStream в приложении. Тем не менее, рекомендуется ставить все асинхронно открытые объекты FileStream, у которых есть данные, ожидающие записи, в очередь на событие <codeph class="+ topic/ph pr-d/codeph ">closed</codeph>, прежде чем закрывать приложение (чтобы данные точно были записаны).</p>
	 
	 <p class="- topic/p ">Можно повторно использовать объект FileStream, вызвав метод <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> или <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>. Все файлы, связанные с объектом FileStream, при этом закрываются, но объект не вызывает событие <codeph class="+ topic/ph pr-d/codeph ">close</codeph>.</p>
	 
	 <p class="- topic/p ">Что касается объекта FileStream, открытого в асинхронном режиме (с использованием метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>), то даже если вызвать событие <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> для этого объекта и удалить свойства и переменные, ссылающиеся на него, объект FileStream не будет удален из памяти до тех пор, пока в остаются невыполненные операции и обработчики событий, ждущие их выполнения. В частности, объект FileStream, на который нет других ссылок, будет существовать, пока выполняется хотя бы одно из следующих условий: </p>
	 
	 <ul class="- topic/ul "><li class="- topic/li ">При выполнении считывания из файла не был достигнут конец файла (и не было вызвано событие <codeph class="+ topic/ph pr-d/codeph ">complete</codeph>). </li><li class="- topic/li ">Выходные данные будут по-прежнему доступны для записи, а у связанных с ними событий (таких как <codeph class="+ topic/ph pr-d/codeph ">outputProgress</codeph> или <codeph class="+ topic/ph pr-d/codeph ">ioError</codeph>) будут прослушиватели событий. </li></ul>
	 
	 </apiDesc><example conref="examples\FileStream.close.1.as" class="- topic/example ">     Следующий код открывает объект FileStream <i class="+ topic/ph hi-d/i ">асинхронно</i> и записывает текстовый файл с именем test.txt во вложенный каталог Apollo Test каталога документов пользователя. Вызов метода <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> объекта FileStream закрывает файл после записи данных. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;
import flash.events.Event;
            
var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.openAsync(file, FileMode.WRITE);
fileStream.writeUTFBytes("Hello");
fileStream.addEventListener(Event.CLOSE, fileClosed);
fileStream.close();

function fileClosed(event:Event):void {
    trace("closed");
}            
</codeblock></example><example conref="examples\FileStream.close.2.as" class="- topic/example ">     Следующий код открывает объект FileStream <i class="+ topic/ph hi-d/i ">синхронно</i> и записывает текстовый файл с именем test.txt во вложенный каталог Apollo Test каталога документов пользователя. Вызов метода <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> объекта FileStream закрывает файл после записи данных.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;
            
var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.open(file, FileMode.WRITE);
fileStream.writeUTF("Hello");
fileStream.close();
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.filesystem.xml#FileStream/event:close" class="- topic/link "><linktext class="- topic/linktext ">Событие close</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:close_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Открытый в асинхронном режиме файл будет закрыт.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Открытый в асинхронном режиме файл будет закрыт.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:openAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">openAsync</apiName><shortdesc class="- topic/shortdesc ">
	 Открывает объект FileStream в синхронном режиме, указывая на файл, заданный параметром file.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл находится в каталоге приложения, и для параметра <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> задан режим append, update или write. 
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">file</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Объект File, указывающий на файл, который необходимо открыть.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fileMode</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Строка класса FileMode, определяющая доступные действия объекта FileStream, например чтение или запись в файл.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Открывает объект FileStream в синхронном режиме, указывая на файл, заданный параметром <codeph class="+ topic/ph pr-d/codeph ">file</codeph>. 
	 
	 <p class="- topic/p ">Если объект FileStream уже открыт, вызов метода закрывает файл перед открытием, и последующие события (включая <codeph class="+ topic/ph pr-d/codeph ">close</codeph>) не передаются ранее открытому файлу.</p>
	 
	 <p class="- topic/p ">Если параметру <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> присвоена константа <codeph class="+ topic/ph pr-d/codeph ">FileMode.READ</codeph> или <codeph class="+ topic/ph pr-d/codeph ">FileMode.UPDATE</codeph>, AIR считывает данные во входной буфер при открытии файла, а события <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> и <codeph class="+ topic/ph pr-d/codeph ">open</codeph> отправляются по мере считывания данных во входной буфер.</p>
	 
	 <p class="- topic/p ">В системах, поддерживающих блокирование файлов, файлы, открытые только для записи или только для обновления (<codeph class="+ topic/ph pr-d/codeph ">FileMode.WRITE</codeph> или <codeph class="+ topic/ph pr-d/codeph ">FileMode.UPDATE</codeph>), недоступны для чтения, пока они не будут закрыты.</p>
	 
	 <p class="- topic/p ">После завершения выполнения операций с файлом необходимо вызвать метод <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> объекта FileStream. В некоторых системах число одновременно открытых файлов ограничено.</p>
	 
`	 </apiDesc><example conref="examples\FileStream.openAsync.1.as" class="- topic/example "> Следующий код показывает, как синхронно открыть файл test.txt во вложенном каталоге Apollo Test каталога документов пользователя, а затем считать этот файл в строку, используя для кодировки текста системный набор символов.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;
import flash.events.Event;

var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.addEventListener(Event.COMPLETE, fileCompleteHandler)
fileStream.openAsync(file, FileMode.READ);

function fileCompleteHandler(event:Event):void {
    var str:String = fileStream.readMultiByte(fileStream.bytesAvailable, File.systemCharset);
    trace(str);
    fileStream.close();
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link><link href="flash.filesystem.xml#FileStream/event:complete" class="- topic/link "><linktext class="- topic/linktext ">Событие complete</linktext></link><link href="flash.filesystem.xml#FileStream/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">Событие ioError</linktext></link><link href="flash.filesystem.xml#FileStream/event:progress" class="- topic/link "><linktext class="- topic/linktext ">Событие progress</linktext></link><link href="flash.filesystem.xml#FileMode" class="- topic/link "><linktext class="- topic/linktext ">FileMode</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:openAsync_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файла не существует; у вас нет прав для открытия файла; вы открываете файл для чтения, но у вас нет прав на чтение; вы открываете файл для записи, но у вас нет прав для записи. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Файла не существует; у вас нет прав для открытия файла; вы открываете файл для чтения, но у вас нет прав на чтение; вы открываете файл для записи, но у вас нет прав для записи.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream:openAsync_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вызывается при считывании данных во входной буфер. (При открытии файла для параметра <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> должно быть установлено значение <codeph class="+ topic/ph pr-d/codeph ">FileMode.READ</codeph> или <codeph class="+ topic/ph pr-d/codeph ">FileMode.UPDATE</codeph>.)
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вызывается при считывании данных во входной буфер.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream:openAsync_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Данные файла считаны во входной буфер. (При открытии файла для параметра <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> должно быть установлено значение <codeph class="+ topic/ph pr-d/codeph ">FileMode.READ</codeph> или <codeph class="+ topic/ph pr-d/codeph ">FileMode.UPDATE</codeph>.)
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Данные файла считаны во входной буфер.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><shortdesc class="- topic/shortdesc ">
	 Открывает объект FileStream в синхронном режиме, указывая на файл, заданный параметром file.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файла не существует; у вас нет прав для открытия файла; вы открываете файл для чтения, но у вас нет прав на чтение; вы открываете файл для записи, но у вас нет прав для записи. 
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл находится в каталоге приложения, и для параметра <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> задан режим append, update или write. 
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">file</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Объект File, указывающий на файл, который необходимо открыть.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fileMode</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Строка класса FileMode, определяющая доступные действия объекта FileStream, например чтение или запись в файл.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Открывает объект FileStream в синхронном режиме, указывая на файл, заданный параметром <codeph class="+ topic/ph pr-d/codeph ">file</codeph>. 
	 
	 <p class="- topic/p ">Если объект FileStream уже открыт, вызов метода закрывает файл перед открытием, и последующие события (включая <codeph class="+ topic/ph pr-d/codeph ">close</codeph>) не передаются ранее открытому файлу.</p>
	 
	 <p class="- topic/p ">В системах, поддерживающих блокирование файлов, файлы, открытые только для записи или только для обновления (<codeph class="+ topic/ph pr-d/codeph ">FileMode.WRITE</codeph> или <codeph class="+ topic/ph pr-d/codeph ">FileMode.UPDATE</codeph>), недоступны для чтения, пока они не будут закрыты.</p>
	 
	 <p class="- topic/p ">После завершения выполнения операций с файлом необходимо вызвать метод <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> объекта FileStream. В некоторых системах число одновременно открытых файлов ограничено.</p>
	 
	 </apiDesc><example conref="examples\FileStream.open.1.as" class="- topic/example "> Следующий код показывает, как синхронно открыть файл test.txt во вложенном каталоге Apollo Test каталога документов пользователя, а затем считать этот файл в строку, используя для кодировки текста системный набор символов.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.open(file, FileMode.READ);
var str:String = fileStream.readMultiByte(file.size, File.systemCharset);
trace(str);
fileStream.close();
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link><link href="flash.filesystem.xml#File" class="- topic/link "><linktext class="- topic/linktext ">Файл</linktext></link><link href="flash.filesystem.xml#FileMode" class="- topic/link "><linktext class="- topic/linktext ">FileMode</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:FileStream:readBoolean" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readBoolean</apiName><shortdesc class="- topic/shortdesc ">
	
     Считывает логическое значение из потока файлов, байтов или массива байтов.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на чтение; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), файл не может быть считан (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Положение, определенное для считывания данных, превышает количество доступных байтов (задается свойством <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Логическое значение будет <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, если количество байтов не равно нулю, в остальных случаях оно будет <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Считывает логическое значение из потока файлов, байтов или массива байтов. Считывается один байт. Если этот байт ненулевой, то возвращается значение <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. В противном случае возвращается значение <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readBoolean_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Чтение файла невозможно или файл не открыт. Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Чтение файла невозможно или файл не открыт.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readByte</apiName><shortdesc class="- topic/shortdesc ">
	
     Считывает байт со знаком из потока файлов, байтов или массива байтов.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на чтение; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), файл не может быть считан (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Положение, определенное для считывания данных, превышает количество доступных байтов (задается свойством <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Возвращенное значение находится в диапазоне от -128 до 127.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Считывает байт со знаком из потока файлов, байтов или массива байтов.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readByte_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Чтение файла невозможно или файл не открыт. Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Чтение файла невозможно или файл не открыт.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readBytes</apiName><shortdesc class="- topic/shortdesc ">
	
     Считывает число байтов данных, заданное параметром length, из потока файлов, байтов или массива байтов.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на чтение; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), файл не может быть считан (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Положение, определенное для считывания данных, превышает количество доступных байтов (задается свойством <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bytes</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Объект <codeph class="+ topic/ph pr-d/codeph ">ByteArray</codeph>, в который считываются данные.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">offset</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Смещение в параметре <codeph class="+ topic/ph pr-d/codeph ">bytes</codeph>, с которого должно начинаться считывание данных.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Число байтов для считывания. Если значение по умолчанию равно 0, считываются все доступные данные.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Считывает число байтов данных, заданное параметром <codeph class="+ topic/ph pr-d/codeph ">length</codeph>, из потока файлов, байтов или массива байтов. Байты считываются в объект ByteArray, определяемый параметром <codeph class="+ topic/ph pr-d/codeph ">bytes</codeph>, при этом начальная позиция определяется параметром <codeph class="+ topic/ph pr-d/codeph ">offset</codeph>.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readBytes_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Чтение файла невозможно или файл не открыт. Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Чтение файла невозможно или файл не открыт.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readDouble" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readDouble</apiName><shortdesc class="- topic/shortdesc ">
	
     Считывает из потока файлов, байтов или массива байтов число IEEE 754 с двойной точностью и плавающей запятой.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на чтение; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), файл не может быть считан (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Положение, определенное для считывания данных, превышает количество доступных байтов (задается свойством <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Число IEEE 754 с двойной точностью и плавающей запятой.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Считывает из потока файлов, байтов или массива байтов число IEEE 754 с двойной точностью и плавающей запятой.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readDouble_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Чтение файла невозможно или файл не открыт. Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Чтение файла невозможно или файл не открыт.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readFloat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readFloat</apiName><shortdesc class="- topic/shortdesc ">
	
     Считывает из потока файлов, байтов или массива байтов число IEEE 754 с одинарной точностью и плавающей запятой.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на чтение; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), файл не может быть считан (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Положение, определенное для считывания данных, превышает количество доступных байтов (задается свойством <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Число IEEE 754 с одинарной точностью и плавающей запятой.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Считывает из потока файлов, байтов или массива байтов число IEEE 754 с одинарной точностью и плавающей запятой.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readFloat_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Чтение файла невозможно или файл не открыт. Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Чтение файла невозможно или файл не открыт.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readInt</apiName><shortdesc class="- topic/shortdesc ">
	
     Считывает из потока файлов, байтов или массива байтов 32-разрядное целое число со знаком.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на чтение; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), файл не может быть считан (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Положение, определенное для считывания данных, превышает количество доступных байтов (задается свойством <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Возвращаемое значение находится в диапазоне от -2147483648 до 2147483647.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Считывает из потока файлов, байтов или массива байтов 32-разрядное целое число со знаком.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readInt_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Чтение файла невозможно или файл не открыт. Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Чтение файла невозможно или файл не открыт.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readMultiByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readMultiByte</apiName><shortdesc class="- topic/shortdesc ">
	
     Считывает из потока файлов, байтов или массива байтов многобайтовую строку заданной длины с использованием указанного набора символов.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на чтение; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), файл не может быть считан (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Положение, определенное для считывания данных, превышает количество доступных байтов (задается свойством <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Строка в кодировке UTF-8.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Число считываемых из потока байтов.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">charSet</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Строка, обозначающая набор символов, которые используются для интерпретации байтов. Возможные строки наборов символов: <codeph class="+ topic/ph pr-d/codeph ">"shift_jis"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"cn-gb"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"iso-8859-1"</codeph> и другие. Полный список см. в разделе <xref href="../../charset-codes.html" class="- topic/xref ">Поддерживаемые наборы символов</xref>. 
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Примечание.</b> Если в текущей системе не распознается значение параметра <codeph class="+ topic/ph pr-d/codeph ">charSet</codeph>, то в качестве набора символов <ph class="- topic/ph "> Adobe<sup class="+ topic/ph hi-d/sup ">®</sup> Flash<sup class="+ topic/ph hi-d/sup ">®</sup> Player или </ph> Adobe<sup class="+ topic/ph hi-d/sup ">®</sup> AIR<sup class="+ topic/ph hi-d/sup ">®</sup> будет использована кодовая страница по умолчанию. Например, значение параметра <codeph class="+ topic/ph pr-d/codeph ">charSet</codeph>, как в <codeph class="+ topic/ph pr-d/codeph ">myTest.readMultiByte(22, iso-8859-01)</codeph>, использующее <codeph class="+ topic/ph pr-d/codeph ">01</codeph> вместо <codeph class="+ topic/ph pr-d/codeph ">1</codeph>, может работать в системе разработчика, а в другой системе нет. В другой системе программа <ph class="- topic/ph ">Flash Player</ph> или среда выполнения AIR будет использовать кодовую страницу, заданную по умолчанию в системе.</p>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Считывает из потока файлов, байтов или массива байтов многобайтовую строку заданной длины с использованием указанного набора символов.
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/systemCharset" class="- topic/link "><linktext class="- topic/linktext ">File.systemCharset</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:readMultiByte_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Чтение файла невозможно или файл не открыт. Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Чтение файла невозможно или файл не открыт.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readObject" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readObject</apiName><shortdesc class="- topic/shortdesc ">
	
     Считывает объект из потока файлов, байтов или массива байтов зашифрованный в сериализованном формате AMF.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на чтение; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), файл не может быть считан (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Положение, определенное для считывания данных, превышает количество доступных байтов (задается свойством <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Десериализованный объект
     
     </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Считывает объект из потока файлов, байтов или массива байтов зашифрованный в сериализованном формате AMF.
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="../../flash/net/package.html#registerClassAlias()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.registerClassAlias()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:readObject_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Чтение файла невозможно или файл не открыт. Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Чтение файла невозможно или файл не открыт.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readShort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readShort</apiName><shortdesc class="- topic/shortdesc ">
	
     Считывает из потока файлов, байтов или массива байтов 16-разрядное целое число со знаком.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на чтение; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), файл не может быть считан (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Положение, определенное для считывания данных, превышает количество доступных байтов (задается свойством <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Возвращаемое значение находится в диапазоне от -32768 до 32767.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Считывает из потока файлов, байтов или массива байтов 16-разрядное целое число со знаком.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readShort_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Чтение файла невозможно или файл не открыт. Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Чтение файла невозможно или файл не открыт.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readUTFBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUTFBytes</apiName><shortdesc class="- topic/shortdesc ">
	
     Считывает последовательность байтов UTF-8 из потока байтов или массива байтов и возвращает строку.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на чтение; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), файл не может быть считан (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Положение, определенное для считывания данных, превышает количество доступных байтов (задается свойством <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Строка в кодировке UTF-8, являющаяся байтовым представлением символов указанной длины.     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Число байтов для считывания.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Считывает последовательность байтов UTF-8 из потока байтов или массива байтов и возвращает строку.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readUTFBytes_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Чтение файла невозможно или файл не открыт. Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Чтение файла невозможно или файл не открыт.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readUTF" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUTF</apiName><shortdesc class="- topic/shortdesc ">
	
     Считывает из потока файлов, байтов или массива байтов строку UTF-8.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на чтение; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), файл не может быть считан (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Положение, определенное для считывания данных, превышает количество доступных байтов (задается свойством <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Строка в кодировке UTF-8, являющаяся байтовым представлением символов.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Считывает из потока файлов, байтов или массива байтов строку UTF-8. Предполагается, что в строку вставляется префикс с неподписанным значением, указывающим длину в байтах.
     
     <p class="- topic/p ">Этот метод похож на метод <codeph class="+ topic/ph pr-d/codeph ">readUTF()</codeph> в интерфейсе Java<sup class="+ topic/ph hi-d/sup ">®</sup> IDataInput.</p>
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readUTF_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Чтение файла невозможно или файл не открыт. Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Чтение файла невозможно или файл не открыт.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readUnsignedByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUnsignedByte</apiName><shortdesc class="- topic/shortdesc ">
	
     Считывает байт без знака из потока файлов, байтов или массива байтов.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на чтение; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), файл не может быть считан (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Положение, определенное для считывания данных, превышает количество доступных байтов (задается свойством <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Возвращенное значение находится в диапазоне от 0 до 255.        
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Считывает байт без знака из потока файлов, байтов или массива байтов.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readUnsignedByte_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Чтение файла невозможно или файл не открыт. Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Чтение файла невозможно или файл не открыт.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readUnsignedInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUnsignedInt</apiName><shortdesc class="- topic/shortdesc ">
	
     Считывает из потока файлов, байтов или массива байтов 32-разрядное целое число без знака.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на чтение; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), файл не может быть считан (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Положение, определенное для считывания данных, превышает количество доступных байтов (задается свойством <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Возвращенное значение находится в диапазоне от 0 до 4294967295.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Считывает из потока файлов, байтов или массива байтов 32-разрядное целое число без знака.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readUnsignedInt_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Чтение файла невозможно или файл не открыт. Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Чтение файла невозможно или файл не открыт.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readUnsignedShort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUnsignedShort</apiName><shortdesc class="- topic/shortdesc ">
	
     Считывает из потока файлов, байтов или массива байтов 16-разрядное целое число без знака.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на чтение; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), файл не может быть считан (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Положение, определенное для считывания данных, превышает количество доступных байтов (задается свойством <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Возвращенное значение находится в диапазоне от 0 до 65535. 
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Считывает из потока файлов, байтов или массива байтов 16-разрядное целое число без знака.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readUnsignedShort_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Чтение файла невозможно или файл не открыт. Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Чтение файла невозможно или файл не открыт.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:truncate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">truncate</apiName><shortdesc class="- topic/shortdesc ">
	 Сокращает файл до положения, заданного свойством position объекта FileStream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не открыт для записи.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Сокращает файл до положения, заданного свойством <codeph class="+ topic/ph pr-d/codeph ">position</codeph> объекта FileStream. 
	 
	 <p class="- topic/p ">Все байты от положения, заданного свойством <codeph class="+ topic/ph pr-d/codeph ">position</codeph>, до конца файла, удаляются. Файл должен быть открыт для записи.</p>
	 
	 </apiDesc><example conref="examples\FileStream.truncate.1.as" class="- topic/example "> Следующий код синхронно открывает файл test.txt во вложенном каталоге Apollo Test каталога документов пользователя, а затем обрезает этот файл до 100 символов, если его длина превышает 100 символов.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.open(file, FileMode.UPDATE);
if (file.size > 100) {
    fileStream.position = 100;
    fileStream.truncate();
}
fileStream.close();
</codeblock></example><example conref="examples\FileStream.truncate.2.as" class="- topic/example "> Следующий код <i class="+ topic/ph hi-d/i ">асинхронно</i> открывает файл test.txt во вложенном каталоге Apollo Test каталога документов пользователя, а затем обрезает этот файл до 100 символов, если его длина превышает 100 символов.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.openAsync(file, FileMode.UPDATE);
trace("start", file.size)
if (file.size > 100) {
    fileStream.position = 100;
    fileStream.truncate();
}
fileStream.addEventListener(Event.CLOSE, fileClosed);
fileStream.close();
function fileClosed(event:Event):void {
    trace("closed", file.size); 
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/position" class="- topic/link "><linktext class="- topic/linktext ">position</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:FileStream:writeBoolean" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeBoolean</apiName><shortdesc class="- topic/shortdesc ">
	
     Записывает логическое значение.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на запись; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), в файл не может быть произведена запись (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Логическое значение, показывающее, какой байт записывается. Если параметр имеет значение <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, записывается 1; если <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, записывается 0.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Записывает логическое значение. Записывается один байт, соответствующий параметру <codeph class="+ topic/ph pr-d/codeph ">value</codeph>, 1 в случае значения <codeph class="+ topic/ph pr-d/codeph ">true</codeph> и 0 в случае значения <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeBoolean_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует). Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeByte</apiName><shortdesc class="- topic/shortdesc ">
	
     Записывает байт.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на запись; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), в файл не может быть произведена запись (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Значение байта в виде целого числа.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Записывает байт. Используются 8 младших битов параметра, а 24 старших битов игнорируются.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeByte_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует). Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeBytes</apiName><shortdesc class="- topic/shortdesc ">
	
     Записывает последовательность байтов из заданного массива байтов, начиная с байта, заданного параметром offset (используя индекс с нулевой базой), длиной, заданной параметром length, в поток файлов, байтов или массив байтов.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на запись; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), в файл не может быть произведена запись (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bytes</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Массив байтов для записи.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">offset</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Индекс с нулевой базой, определяющий положение в массиве для начала записи.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Целое число без знака, определяющее глубину буфера для записи.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Записывает последовательность байтов из заданного массива байтов <codeph class="+ topic/ph pr-d/codeph ">bytes</codeph>, начиная с байта, заданного параметром <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> (используя индекс с нулевой базой), длиной, заданной параметром <codeph class="+ topic/ph pr-d/codeph ">length</codeph>, в поток файлов, байтов или массив байтов.
     
     <p class="- topic/p ">Если параметр <codeph class="+ topic/ph pr-d/codeph ">length</codeph> опущен, применение длины по умолчанию, равной 0, приведет к тому, что будет записан весь буфер, начиная со значения параметра <codeph class="+ topic/ph pr-d/codeph ">offset</codeph>. Если также опустить параметр <codeph class="+ topic/ph pr-d/codeph ">offset</codeph>, будет записываться весь буфер. </p>
     
     <p class="- topic/p ">Если параметры <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> или <codeph class="+ topic/ph pr-d/codeph ">length</codeph> находятся за пределами диапазона, то они корректируются так, чтобы совпасть с началом и концом массива <codeph class="+ topic/ph pr-d/codeph ">bytes</codeph>.</p>
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeBytes_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует). Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeDouble" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeDouble</apiName><shortdesc class="- topic/shortdesc ">
	
     Записывает число IEEE 754 с двойной точностью (64-разрядное) и плавающей запятой.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на запись; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), в файл не может быть произведена запись (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Число с двойной точностью (64-разрядное) и плавающей запятой.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Записывает число IEEE 754 с двойной точностью (64-разрядное) и плавающей запятой.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeDouble_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует). Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeFloat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeFloat</apiName><shortdesc class="- topic/shortdesc ">
	
     Записывает число IEEE 754 с одинарной точностью (32-разрядное) и плавающей запятой.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на запись; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), в файл не может быть произведена запись (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Число с одинарной точностью (32-разрядное) и плавающей запятой.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Записывает число IEEE 754 с одинарной точностью (32-разрядное) и плавающей запятой.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeFloat_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует). Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeInt</apiName><shortdesc class="- topic/shortdesc ">
	
     Записывает 32-разрядное целое число со знаком.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на запись; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), в файл не может быть произведена запись (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Значение байта в виде целого числа со знаком.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Записывает 32-разрядное целое число со знаком.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeInt_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует). Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeMultiByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeMultiByte</apiName><shortdesc class="- topic/shortdesc ">
	
     Записывает в поток файлов, байтов или массив байтов многобайтовую строку заданной длины с использованием заданного набора символов.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на запись; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), в файл не может быть произведена запись (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Записываемое значение строки.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">charSet</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Строка, определяющая используемый набор символов. Возможные строки наборов символов: <codeph class="+ topic/ph pr-d/codeph ">"shift_jis"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"cn-gb"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"iso-8859-1"</codeph> и другие. Полный список см. в разделе <xref href="../../charset-codes.html" class="- topic/xref ">Поддерживаемые наборы символов</xref>. 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Записывает в поток файлов, байтов или массив байтов многобайтовую строку заданной длины с использованием заданного набора символов. 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/systemCharset" class="- topic/link "><linktext class="- topic/linktext ">File.systemCharset</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:writeMultiByte_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует). Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeObject" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeObject</apiName><shortdesc class="- topic/shortdesc ">
	
     Записывает объект в поток файлов, байтов или массив байтов в сериализованном формате AMF.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на запись; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), в файл не может быть произведена запись (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">object</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Объект для сериализации.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Записывает объект в поток файлов, байтов или массив байтов в сериализованном формате AMF.
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="../../flash/net/package.html#registerClassAlias()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.registerClassAlias()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:writeObject_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует). Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeShort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeShort</apiName><shortdesc class="- topic/shortdesc ">
	
     Записывает 16-разрядное целое число.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на запись; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), в файл не может быть произведена запись (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Значение байта в виде целого числа.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Записывает 16-разрядное целое число. Используются 16 младших битов параметра, а 16 старших битов игнорируются.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeShort_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует). Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeUTFBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeUTFBytes</apiName><shortdesc class="- topic/shortdesc ">
	
     Записывает строку UTF-8.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на запись; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), в файл не может быть произведена запись (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Записываемое значение строки.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Записывает строку UTF-8. Аналогично <codeph class="+ topic/ph pr-d/codeph ">writeUTF()</codeph>, но строке не предшествует 16-разрядное слово, указывающее длину.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeUTFBytes_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует). Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeUTF" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeUTF</apiName><shortdesc class="- topic/shortdesc ">
	
     Записывает в поток файлов, байтов или массив байтов строку UTF-8.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Если длина строки превышает 65535.
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на запись; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), в файл не может быть произведена запись (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Записываемое значение строки.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Записывает в поток файлов, байтов или массив байтов строку UTF-8. Сначала записывается длина строки UTF-8 в байтах (в виде 16-разрядного целого числа), за которой следуют байты символов строки.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeUTF_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует). Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeUnsignedInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeUnsignedInt</apiName><shortdesc class="- topic/shortdesc ">
	
     Записывает 32-разрядное целое число без знака.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не был открыт; файл был открыт, но без прав на запись; либо, если файл был открыт для синхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), в файл не может быть произведена запись (например, из-за отсутствия файла).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Значение байта в виде целого числа без знака.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Записывает 32-разрядное целое число без знака.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeUnsignedInt_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует). Данное событие вызывается только для файлов, открытых для асинхронных операций (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вы не можете произвести запись в файл (например, потому что файл отсутствует).</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.filesystem:FileStream:bytesAvailable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesAvailable</apiName><shortdesc class="- topic/shortdesc ">
	
     Возвращает число байтов данных, доступных для чтения во входном буфере.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Возвращает число байтов данных, доступных для чтения во входном буфере. В коде должен быть вызов свойства <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>, проверяющий доступность необходимого объема данных до того, как будет выполнена попытка их считывания с помощью одного из методов чтения.
     </apiDesc><example conref="examples\FileStream.bytesAvailable.1.as" class="- topic/example "/></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileStream:endian:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">endian</apiName><shortdesc class="- topic/shortdesc ">
	
     Порядок байтов данных, константа BIG_ENDIAN или LITTLE_ENDIAN класса Endian.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Порядок байтов данных, константа <codeph class="+ topic/ph pr-d/codeph ">BIG_ENDIAN</codeph> или <codeph class="+ topic/ph pr-d/codeph ">LITTLE_ENDIAN</codeph> класса Endian.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileStream:objectEncoding:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">objectEncoding</apiName><shortdesc class="- topic/shortdesc ">
     Указывает, какой формат, AMF3 или AMF0, используется для записи или чтения бинарных данных методом readObject() или writeObject().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Указывает, какой формат, AMF3 или AMF0, используется для записи или чтения бинарных данных методом <codeph class="+ topic/ph pr-d/codeph ">readObject()</codeph> или <codeph class="+ topic/ph pr-d/codeph ">writeObject()</codeph>.
	 
	 <p class="- topic/p ">Значение представлено константой из класса ObjectEncoding. По умолчанию используется формат AMF3.</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding</linktext></link><link href="flash.filesystem.xml#FileStream/readObject()" class="- topic/link "><linktext class="- topic/linktext ">readObject()</linktext></link><link href="flash.filesystem.xml#FileStream/writeObject()" class="- topic/link "><linktext class="- topic/linktext ">writeObject()</linktext></link></related-links></apiValue><apiValue id="flash.filesystem:FileStream:position:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">position</apiName><shortdesc class="- topic/shortdesc ">
	 Текущее положение в файле.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Текущее положение в файле. 
	 
	 <p class="- topic/p ">Данное значение изменяется при следующих условиях:</p>
	 
	 <ul class="- topic/ul "><li class="- topic/li ">Если явно задано свойство.</li><li class="- topic/li ">Если производится считывание из объекта FileStream (с использованием одного из методов чтения).</li><li class="- topic/li ">Если производится запись в объект FileStream.</li></ul>
	 
	 <p class="- topic/p ">Положение определяется как Number (а не uint) для поддержки файлов длиной более 2<sup class="+ topic/ph hi-d/sup ">32</sup> байтов. Значение данного свойства всегда представлено целым числом до 2<sup class="+ topic/ph hi-d/sup ">53</sup>. Если задать это значение дробным числом, то оно будет округлено до целого в меньшую сторону.</p>
	 
	 <p class="- topic/p ">Если при асинхронном чтении файла задать свойство <codeph class="+ topic/ph pr-d/codeph ">position</codeph>, приложение начнет заполнять буфер чтения данными, начиная с указанного положения, а свойство <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> может принять значение 0. Дождитесь события <codeph class="+ topic/ph pr-d/codeph ">complete</codeph>, прежде чем использовать метод read для чтения данных или дождитесь события <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> и проверьте свойство <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>, прежде чем использовать метод read.</p>
	  
	 </apiDesc><example conref="examples\FileStream.position.1.as" class="- topic/example "> На примере следующего кода показано, как обновляется свойство <codeph class="+ topic/ph pr-d/codeph ">position</codeph> объекта FileStream по мере считывания приложением данных из файла.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.fileSystem.*;
import flash.utils.ByteArray;
import flash.events.Event;

var sourceFile:File = File.documentsDirectory.resolvePath("Apollo Test/test.txt");
var stream:FileStream = new FileStream();
stream.addEventListener(Event.COMPLETE, readBytes);
stream.openAsync(sourceFile, FileMode.READ);

function readBytes(e:Event):void {
    var bytes:ByteArray = new ByteArray();
    trace("position 0:", stream.position); // 0
    bytes[0] = stream.readByte();
    trace("position 1:", stream.position); // 1
    fileStream.readBytes(bytes, stream.position, 4); 
    trace("position 2:", stream.position); // 5
    stream.close();
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileStream:readAhead:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">readAhead</apiName><shortdesc class="- topic/shortdesc ">
	 Минимальный объем данных, читаемых с диска в асинхронном режиме.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Should the readAhead value dwindle to 0 as the data is read in.
	 
	 </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Минимальный объем данных, читаемых с диска в асинхронном режиме.
	 
	 <p class="- topic/p ">Это свойство указывает, сколько данных пытается считать асинхронный поток за точкой текущего положения. Данные считываются блоками на основе размера страницы файловой системы. Поэтому, если для <codeph class="+ topic/ph pr-d/codeph ">readAhead</codeph> установлено значение 9000 в компьютерной системе с размером страницы 8 КБ (8192 байт), среда выполнения одновременно считывает следующие 2 блока или 16384 байт данных. Значение этого свойства по умолчанию — бесконечность: по умолчанию из файла, открытого для асинхронного чтения, данные считываются, пока не будет достигнут конец файла.</p>
	 
	 <p class="- topic/p ">Считывание данных из буфера чтения не влияет на значение свойства <codeph class="+ topic/ph pr-d/codeph ">readAhead</codeph>. При считывании данных из буфера новые данные считываются в буфер для его пополнения. 
	  </p>
	 
	 <p class="- topic/p ">Свойство <codeph class="+ topic/ph pr-d/codeph ">readAhead</codeph> не влияет на файл, открытый в синхронном режиме.</p>
	 
	 <p class="- topic/p ">При считывании данных в асинхронном режиме объект FileStream отправляет события <codeph class="+ topic/ph pr-d/codeph ">progress</codeph>. В методе обработчика событий для события <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> проверьте доступность необходимого количества байтов (это можно проверить с помощью свойства <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>), а затем считайте данные из буфера чтения с помощью метода read.</p>
	 
	 </apiDesc><example conref="examples\FileStream.readAhead.1.as" class="- topic/example ">     На примере следующего кода показано, как с помощью свойства <codeph class="+ topic/ph pr-d/codeph ">readAhead</codeph> ограничить объем данных, считываемых в файл, до 100 байтов:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var file:File = File.desktopDirectory.resolvePath("test.txt");
var fileStream:FileStream = new FileStream();
fileStream.readAhead = 100;
fileStream.addEventListener(ProgressEvent.PROGRESS, readProgressHandler)
fileStream.openAsync(file, FileMode.READ);
var results:ByteArray;

function readProgressHandler(event:ProgressEvent):void {
    if (fileStream.bytesAvailable >= 100) {
        fileStream.readBytes(results, 0, 100);
    }
}
</codeblock><swfblock conref="examples\FileStream.readAhead.1.swf" xml:space="preserve"/></example></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.filesystem:FileMode" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">FileMode</apiName><shortdesc class="- topic/shortdesc ">
 Класс FileMode определяет строковые константы, которые применяются в параметре fileMode методов open() и openAsync() класса FileStream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Класс FileMode определяет строковые константы, которые применяются в параметре <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> методов <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> и <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> класса FileStream. Параметр <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> этих методов определяет доступные действия объекта FileStream при открытии файла. 
 
 <p class="- topic/p ">На основании значения параметра <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph>, заданного методом open, могут быть доступны следующие действия в различных сочетаниях:</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">Чтение — объект FileStream может считывать данные из файла.</li><li class="- topic/li ">Запись — объект FileStream может записывать данные в файл.</li><li class="- topic/li ">Создание — объект FileStream при открытии создает несуществующий файл.</li><li class="- topic/li ">Сокращение при открытии — данные в файле удаляются при открытии (прежде, чем начинается запись каких-либо данных).</li><li class="- topic/li ">Добавление записываемых данных — данные всегда записываются в конец файла (при вызове любого метода записи).</li></ul>
 
 <p class="- topic/p ">В таблице ниже показаны возможные действия каждой из констант в классе FileMode при ее применении в качестве параметра <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> метода open объекта FileStream:</p>
 
 <adobetable class="innertable"><tgroup cols="6" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Константа FileMode</entry><entry align="center" class="- topic/entry ">Чтение</entry><entry align="center" class="- topic/entry ">Создание сценариев на языке</entry><entry align="center" class="- topic/entry ">Создание</entry><entry align="center" class="- topic/entry ">Сокращение при открытии</entry><entry align="center" class="- topic/entry ">Добавление записываемых данных</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">READ</codeph></entry><entry align="center" class="- topic/entry "> • </entry><entry class="- topic/entry "> </entry><entry class="- topic/entry "> </entry><entry class="- topic/entry "> </entry><entry class="- topic/entry "> </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">WRITE</codeph></entry><entry class="- topic/entry "> </entry><entry align="center" class="- topic/entry "> • </entry><entry align="center" class="- topic/entry "> • </entry><entry align="center" class="- topic/entry "> • </entry><entry class="- topic/entry "> </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">APPEND</codeph></entry><entry class="- topic/entry "> </entry><entry align="center" class="- topic/entry "> • </entry><entry align="center" class="- topic/entry "> • </entry><entry class="- topic/entry "/><entry align="center" class="- topic/entry "> • </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph></entry><entry align="center" class="- topic/entry "> • </entry><entry align="center" class="- topic/entry "> • </entry><entry align="center" class="- topic/entry "> • </entry><entry align="center" class="- topic/entry "/><entry class="- topic/entry "> </entry></row></tbody></tgroup></adobetable>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/open()" class="- topic/link "><linktext class="- topic/linktext ">FileStream.open()</linktext></link><link href="flash.filesystem.xml#FileStream/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">FileStream.openAsync()</linktext></link></related-links><apiValue id="flash.filesystem:FileMode:APPEND" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">APPEND</apiName><shortdesc class="- topic/shortdesc "> 
	Используется для открытия файла только для записи, при этом все записываемые данные добавляются в конец файла.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">append</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	Используется для открытия файла только для записи, при этом все записываемые данные добавляются в конец файла. При открытии создаются все несуществующие файлы. 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileMode:READ" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">READ</apiName><shortdesc class="- topic/shortdesc "> 
	Используется для открытия файла в режиме «только для чтения».</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">read</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	Используется для открытия файла в режиме «только для чтения». Файл должен существовать (несуществующие файлы не будут созданы).
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileMode:UPDATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">UPDATE</apiName><shortdesc class="- topic/shortdesc "> 
	Используется для открытия файла в режиме «чтение и запись».</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">update</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	Используется для открытия файла в режиме «чтение и запись». При открытии создаются все несуществующие файлы. 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileMode:WRITE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">WRITE</apiName><shortdesc class="- topic/shortdesc "> 
	Используется для открытия файла в режиме «только для записи».</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">write</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	Используется для открытия файла в режиме «только для записи». После открытия все несуществующие файлы будут созданы, а все существующие файлы будут сокращены (их данные будут удалены).
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.filesystem:StorageVolumeInfo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">StorageVolumeInfo</apiName><shortdesc class="- topic/shortdesc ">
	Объект StorageVolumeInfo отправляет объект StorageVolumeChangeEvent, когда устанавливается или извлекается том хранения.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Объект StorageVolumeInfo отправляет объект StorageVolumeChangeEvent, когда устанавливается или извлекается том хранения. Статическое свойство <codeph class="+ topic/ph pr-d/codeph ">StorageVolume.storageVolume</codeph> ссылается на отдельный объект StorageVolumeInfo, который отправляет события. Класс StorageVolumeInfo также определяет метод <codeph class="+ topic/ph pr-d/codeph ">getStorageVolumes</codeph> для перечисления томов хранения, установленных в данный момент
	
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Поддержка в профилях AIR:</i> эта функция поддерживается во всех компьютерных операционных системах, но не поддерживается во всех средах AIR для телевизионных устройств. Она также не поддерживается на мобильных устройствах. Используйте свойство <codeph class="+ topic/ph pr-d/codeph ">StorageVolumeInfo.isSupported</codeph>, чтобы проверить наличие поддержки в среде выполнения. Дополнительные сведения о поддержке API-интерфейса в разных профилях см. в разделе «<xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">Поддержка в профилях AIR</xref>».</p>
	 
	<p class="- topic/p ">В современных версиях ОС Linux объект StorageVolumeInfo отправляет только события <codeph class="+ topic/ph pr-d/codeph ">storageVolumeMount</codeph> и <codeph class="+ topic/ph pr-d/codeph ">storageVolumeUnmount</codeph> для физических устройств и сетевых дисков, установленных в определенных местоположениях.</p>
	
	</apiDesc><example conref="examples\StorageVolume.as" class="- topic/example "/><example conref="examples\StorageVolumeChangeEvent.as" class="- topic/example "/></apiClassifierDetail><adobeApiEvent id="flash.filesystem:StorageVolumeInfo_flash.events.StorageVolumeChangeEvent.STORAGE_VOLUME_UNMOUNT_storageVolumeUnmount" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">storageVolumeUnmount</apiName><shortdesc class="- topic/shortdesc ">
	 Отправляется при извлечении тома хранения.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.StorageVolumeChangeEvent.STORAGE_VOLUME_UNMOUNT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.StorageVolumeChangeEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Отправляется при извлечении тома хранения.
	 
	 <p class="- topic/p ">В современных версиях ОС Linux объект StorageVolumeInfo отправляет только события <codeph class="+ topic/ph pr-d/codeph ">storageVolumeMount</codeph> и <codeph class="+ topic/ph pr-d/codeph ">storageVolumeUnmount</codeph> для физических устройств и сетевых дисков, установленных в определенных местоположениях.</p>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:StorageVolumeInfo_flash.events.StorageVolumeChangeEvent.STORAGE_VOLUME_MOUNT_storageVolumeMount" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">storageVolumeMount</apiName><shortdesc class="- topic/shortdesc ">
	 Отправляется при установке тома хранения.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.StorageVolumeChangeEvent.STORAGE_VOLUME_MOUNT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.StorageVolumeChangeEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Отправляется при установке тома хранения.
	 
	 <p class="- topic/p ">В современных версиях ОС Linux объект StorageVolumeInfo отправляет только события <codeph class="+ topic/ph pr-d/codeph ">storageVolumeMount</codeph> и <codeph class="+ topic/ph pr-d/codeph ">storageVolumeUnmount</codeph> для физических устройств и сетевых дисков, установленных в определенных местоположениях.</p>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.filesystem:StorageVolumeInfo:getStorageVolumes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getStorageVolumes</apiName><shortdesc class="- topic/shortdesc ">
		Возвращает вектор объектов StorageVolume, соответствующих томам хранилищ, установленных в данный момент.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="Vector$flash.filesystem:StorageVolume" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Возвращает вектор объектов StorageVolume, соответствующих томам хранилищ, установленных в данный момент.
		
		<p class="- topic/p ">В современных версиях ОС Linux этот метод возвращает объекты, соответствующие физическим устройствам и сетевым дискам, установленным в определенных местоположениях.</p>
		
		</apiDesc><example conref="examples\StorageVolume.rootDirectory.1.as" class="- topic/example "> Следующий код отображает собственный путь для корневого каталога каждого установленного тома хранения:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var volumes:Vector.&lt;StorageVolume> = new Vector.&lt;StorageVolume>;
volumes = StorageVolumeInfo.storageVolumeInfo.getStorageVolumes();
for (var i:int = 0; i &lt; volumes.length; i++)
{
    trace(volumes[i].rootDirectory.nativePath);
}
</codeblock><swfblock conref="examples\StorageVolume.rootDirectory.1.swf" xml:space="preserve"/></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#StorageVolume" class="- topic/link "><linktext class="- topic/linktext ">flash.filesystem.StorageVolume</linktext></link></related-links></apiOperation><apiValue id="flash.filesystem:StorageVolumeInfo:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
        Свойству isSupported задается значение true, если текущая платформа поддерживает класс StorageVolumeInfo, в противном случае задается значение false.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
        Свойству <codeph class="+ topic/ph pr-d/codeph ">isSupported</codeph> задается значение <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, если текущая платформа поддерживает класс StorageVolumeInfo, в противном случае задается значение <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. 
        
        </apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:StorageVolumeInfo:storageVolumeInfo:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">storageVolumeInfo</apiName><shortdesc class="- topic/shortdesc ">
		Одиночный экземпляр объекта StorageVolumeInfo.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:StorageVolumeInfo</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Одиночный экземпляр объекта StorageVolumeInfo. Создайте для этого объекта прослушиватели событий <codeph class="+ topic/ph pr-d/codeph ">storageVolumeMount</codeph> и <codeph class="+ topic/ph pr-d/codeph ">storageVolumeUnmount</codeph>.
		
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.filesystem:File" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">File</apiName><shortdesc class="- topic/shortdesc ">
 Объект File представляет собой путь к файлу или каталогу.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.net:FileReference</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Объект File представляет собой путь к файлу или каталогу. Это может быть существующий или еще не существующий файл или каталог. Так, можно задать путь к файлу или каталогу, который вы планируете создать. 
 
  <p class="- topic/p ">Класс File предлагает некоторые свойства и методы для получения информации о файловой системе и для выполнения таких операций, как копирование файлов и каталогов.</p>
  
  <p class="- topic/p ">Объекты File можно использовать с классом FileStream для чтения и записи файлов. </p>
  
  <p class="- topic/p ">Класс File является расширением класса FileReference. Класс FileReference, доступный в Flash<sup class="+ topic/ph hi-d/sup ">®</sup> Player и Adobe<sup class="+ topic/ph hi-d/sup ">®</sup> AIR<sup class="+ topic/ph hi-d/sup ">®</sup>, содержит указатель на файл, а в класс File добавлены свойства и методы, не представленные в Flash Player (при проигрывании SWF-файла в обозревателе) из соображений безопасности.</p>
  
  <p class="- topic/p ">Класс File содержит статические свойства, которые позволяют указать часто используемые местоположения каталогов. К таким статическим свойствам относятся следующие:</p>
  
  <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.applicationStorageDirectory</codeph> — каталог хранилища, который является уникальным для каждого установленного приложения AIR</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.applicationDirectory</codeph> — каталог только для чтения, в который устанавливается приложение (вместе с установленными активами)</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.desktopDirectory</codeph> — каталог рабочего стола пользователя</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.documentsDirectory</codeph> — каталог с документами пользователя</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.userDirectory</codeph> — каталог пользователя</li></ul>
  
  <p class="- topic/p ">В различных операционных системах эти свойства имеют свои показательные значения. Например, в Mac OS, Linux и Windows собственные пути к каталогу рабочего стола пользователя отличаются. Однако свойство <codeph class="+ topic/ph pr-d/codeph ">File.desktopDirectory</codeph> указывает правильный путь к каталогу рабочего стола на каждой из этих платформ. При создании приложений для работы на различных платформах используйте эти свойства как основу для указания на другие файлы, используемые приложением. Затем используйте метод <codeph class="+ topic/ph pr-d/codeph ">resolvePath()</codeph> для коррекции пути. Например, данный код указывает на файл preferences.xml в каталоге хранилища приложения:</p>
  
  <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock "> var prefsFile:File = File.applicationStorageDirectory;
  prefsFile = prefsFile.resolvePath("preferences.xml");</codeblock>
  
  
  
  <p class="- topic/p ">Если указать буквенный собственный путь в ссылке на файл, то он будет работать только на одной платформе. Например, следующий объект File будет работать только в Windows:</p> 
  
  <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">new File("C:\Documents and Settings\joe\My Documents\test.txt")</codeblock>
  
  
  <p class="- topic/p ">Каталог хранилища приложения особенно полезен. Это каталог хранилища для каждого отдельного приложения AIR. Он определяется свойством <codeph class="+ topic/ph pr-d/codeph ">File.applicationStorageDirectory</codeph>.</p>
  
  <p class="- topic/p ">Нельзя добавлять в каталог приложения (в который установлено приложение AIR) или удалять из этого каталога содержимое. Это может повредить приложение AIR и сделать подпись приложения недействительной. Запись в каталог приложения запрещена в AIR по умолчанию, так как доступ на запись в этот каталог не предоставлен всем учетным записям пользователя во всех операционных системах. Каталог хранилища приложения можно использовать для записи внутренних файлов приложения. Каталог документов можно использовать для записи файлов, которые пользователь будет использовать за пределами приложения (например, отредактированные изображения и текстовые файлы).</p>
  
  
  </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream" class="- topic/link "><linktext class="- topic/linktext ">FileStream</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File_flash.events.FileListEvent.DIRECTORY_LISTING_directoryListing" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">directoryListing</apiName><shortdesc class="- topic/shortdesc ">
 Вызывается, когда в результате запроса метода getDirectoryListingAsync() становится доступен список каталогов.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.FileListEvent.DIRECTORY_LISTING</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.FileListEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Вызывается, когда в результате запроса метода <codeph class="+ topic/ph pr-d/codeph ">getDirectoryListingAsync()</codeph> становится доступен список каталогов.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/getDirectoryListingAsync()" class="- topic/link "><linktext class="- topic/linktext ">File.getDirectoryListingAsync()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.FileListEvent.SELECT_MULTIPLE_selectMultiple" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">selectMultiple</apiName><shortdesc class="- topic/shortdesc ">
 Вызывается, когда пользователь выбирает файлы из диалогового окна, открывшегося по вызову метода browseForOpenMultiple().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.FileListEvent.SELECT_MULTIPLE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.FileListEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Вызывается, когда пользователь выбирает файлы из диалогового окна, открывшегося по вызову метода <codeph class="+ topic/ph pr-d/codeph ">browseForOpenMultiple()</codeph>. 
 
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/browseForOpenMultiple()" class="- topic/link "><linktext class="- topic/linktext ">browseForOpenMultiple()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.Event.SELECT_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><shortdesc class="- topic/shortdesc ">
 Вызывается, когда пользователь выбирает файл или каталог из окна просмотра файлов или каталогов.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.SELECT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Вызывается, когда пользователь выбирает файл или каталог из окна просмотра файлов или каталогов. 
 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><shortdesc class="- topic/shortdesc ">
 Вызывается, когда операция нарушает ограничения безопасности.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Вызывается, когда операция нарушает ограничения безопасности.
 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 Вызывается, когда при выполнении асинхронной операции над файлом происходит ошибка.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Вызывается, когда при выполнении асинхронной операции над файлом происходит ошибка.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.Event.COMPLETE_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
 Вызывается при завершении асинхронной операции.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Вызывается при завершении асинхронной операции.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.Event.CANCEL_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
 Вызывается при отмене асинхронной операции, ожидающей выполнения.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CANCEL</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Вызывается при отмене асинхронной операции, ожидающей выполнения.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.filesystem:File:File" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">File</apiName><shortdesc class="- topic/shortdesc ">
	Функция конструктора для класса File.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Неверный синтаксис параметра <codeph class="+ topic/ph pr-d/codeph ">path</codeph>.
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">path</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Путь к файлу. Можно задать путь двумя способами: с помощью URL-адреса или записав путь в характерном для конкретной платформы виде. 
	
	<p class="- topic/p ">При вводе URL-адреса можно пользоваться следующими схемами URL: <codeph class="+ topic/ph pr-d/codeph ">file</codeph>, <codeph class="+ topic/ph pr-d/codeph ">app</codeph> или <codeph class="+ topic/ph pr-d/codeph ">app-storage</codeph>. Для параметра <codeph class="+ topic/ph pr-d/codeph ">path</codeph>, использующего запись URL, действительными являются следующие значения: </p>
	
	<ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"app:/DesktopPathTest.xml"</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"app-storage:/preferences.xml"</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"file:///C:/Documents%20and%20Settings/bob/Desktop"</codeph> (Рабочий стол на компьютере Боба)</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"file:///Users/bob/Desktop"</codeph> (Рабочий стол на компьютере Mac Боба)</li></ul>
	
	<p class="- topic/p ">Схемы URL <codeph class="+ topic/ph pr-d/codeph ">app</codeph> и <codeph class="+ topic/ph pr-d/codeph ">app-storage</codeph> весьма полезны, т. к. могут указать на подходящий файл во всех файловых системах. Тем не менее, в двух других примерах, в которых для указания на каталог рабочего стола пользователя используется схема URL <codeph class="+ topic/ph pr-d/codeph ">file</codeph>, предпочтительно передавать аргумент <i class="+ topic/ph hi-d/i ">no</i> <codeph class="+ topic/ph pr-d/codeph ">path</codeph> конструктору <codeph class="+ topic/ph pr-d/codeph ">File()</codeph>, а затем назначать <codeph class="+ topic/ph pr-d/codeph ">File.desktopDirectory</codeph> объекту File. Таким образом, доступ к каталогу рабочего стола не будет зависеть от платформы или от пользователя.</p>
	
	<p class="- topic/p ">При задании пути на компьютере Windows разделителем в аргументе может выступать обратная или левая косая черта, а на компьютере Мас OS и Linux — левая косая черта. Для параметра <codeph class="+ topic/ph pr-d/codeph ">path</codeph>, использующего собственную запись пути, действительными являются следующие значения:</p>
	
	<ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"C:/Documents and Settings/bob/Desktop"</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"/Users/bob/Desktop"</codeph></li></ul>
	
	<p class="- topic/p ">Тем не менее, в этих двух примерах следует передавать аргумент <i class="+ topic/ph hi-d/i ">no</i> <codeph class="+ topic/ph pr-d/codeph ">path</codeph> конструктору <codeph class="+ topic/ph pr-d/codeph ">File()</codeph>, а затем назначить <codeph class="+ topic/ph pr-d/codeph ">File.desktopDirectory</codeph> объекту File. Таким образом доступ к каталогу «Рабочий стол» не будет зависеть от платформы или от пользователя.</p>
	
	</apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Функция конструктора для класса File. 
	
	<p class="- topic/p ">При передаче аргумента <codeph class="+ topic/ph pr-d/codeph ">path</codeph> объект File указывает на конкретный путь, а свойства <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> и <codeph class="+ topic/ph pr-d/codeph ">url</codeph> отражают этот путь.</p>
	
	
	<p class="- topic/p ">Хотя можно передать аргумент <codeph class="+ topic/ph pr-d/codeph ">path</codeph>, чтобы указать путь к файлу, в результате может получиться код, предназначенный для конкретной платформы. Например, такой собственный путь, как <codeph class="+ topic/ph pr-d/codeph ">"C:\\Documents and Settings\\bob\\Desktop"</codeph>, или такой URL-адрес, как <codeph class="+ topic/ph pr-d/codeph ">"file:///C:/Documents%20and%20Settings/bob/Desktop"</codeph>, действителен только для Windows. Рекомендуется использовать следующие статические свойства, представляющие часто используемые каталоги и действительные для всех платформ:</p>
	
	<ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.applicationDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.applicationStorageDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.desktopDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.documentsDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.userDirectory</codeph></li></ul>
	
	<p class="- topic/p ">Затем можно вызвать метод <codeph class="+ topic/ph pr-d/codeph ">resolvePath()</codeph>, чтобы получить относительный путь к этим каталогам. Например, следующий код задает объект File для указания на файл settings.xml в каталоге хранилища приложения:</p>
	
	<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">var file:File = File.applicationStorageDirectory.resolvePath("settings.xml");</codeblock>
	
	
	
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">Важно!</b> Если передать строку URL в параметре <codeph class="+ topic/ph pr-d/codeph ">path</codeph>, URL декодируется и преобразуется в путь к файлу. Например, оператор <codeph class="+ topic/ph pr-d/codeph ">new File("file:///c:/test/demo%20file%201%2e0.txt")</codeph> создает объект File с собственным путем «c:\test\demo file 1.0.txt». (URL-адрес использует префиксы схемы file:, app: или app-storage:.) Однако, если допустимые префиксы URL-адреса пропускаются, строка пути рассматривается как собственный путь и не подвергается декодированию. Необходимо учитывать это поведение при проверке путей, полученных из потенциально ненадежных источников. Если просто проверяется строка ввода, расшифровка URL-адреса может позволить злоумышленнику обойти проверки. Всегда проверяйте окончательный путь создаваемого объекта File.</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 var file:File = new File( taintedString );
	 validate( file.nativePath ); //where validate() is your path validation function
	 </codeblock> 
	  
	 
	</apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/nativePath" class="- topic/link "><linktext class="- topic/linktext ">nativePath</linktext></link></related-links></apiConstructor><apiOperation id="flash.filesystem:File:browseForDirectory" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">browseForDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 Отображает для пользователя диалоговое окно выбора каталога.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Выполняется операция обзора (browseForOpen(), browseForOpenMultiple(), browseForSave(), browseForDirectory()).
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Программе не предоставлены необходимые права.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">title</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Строка, отображаемая в строке заголовка диалогового окна.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Отображает для пользователя диалоговое окно выбора каталога. При выборе каталога вызывается событие <codeph class="+ topic/ph pr-d/codeph ">select</codeph>. Свойство <codeph class="+ topic/ph pr-d/codeph ">target</codeph> события <codeph class="+ topic/ph pr-d/codeph ">select</codeph> является объектом File, указывающим на выбранный каталог.
	 
	 <p class="- topic/p ">Диалоговое окно выбора каталога не всегда отображается на переднем плане относительно окон, которые принадлежат другому окну (окна, свойство <codeph class="+ topic/ph pr-d/codeph ">owner</codeph> которых имеет непустое значение). Для предотвращения проблем, связанных с порядком окон, перед вызовом этого метода скройте подчиненные окна.</p>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Примечание.</b> На устройствах Android <codeph class="+ topic/ph pr-d/codeph ">browseForDirectory()</codeph> не поддерживается. Объект File незамедлительно отправляет событие cancel.</p>
	 
	 </apiDesc><example conref="examples\File.browseForDirectory.1.as" class="- topic/example "> Следующий код использует метод <codeph class="+ topic/ph pr-d/codeph ">File.browseForDirectory()</codeph>, чтобы позволить пользователю выбрать каталог. После выбора каталога код выводит список содержимого этого каталога в выходных данных метода <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
import flash.events.Event;

var directory:File = File.documentsDirectory;

try
{
    directory.browseForDirectory("Select Directory");
    directory.addEventListener(Event.SELECT, directorySelected);
}
catch (error:Error)
{
    trace("Failed:", error.message);
}

function directorySelected(event:Event):void 
{
    directory = event.target as File;
    var files:Array = directory.getDirectoryListing();
    for(var i:uint = 0; i &lt; files.length; i++)
    {
        trace(files[i].name);
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/browseForOpen()" class="- topic/link "><linktext class="- topic/linktext ">browseForOpen()</linktext></link><link href="flash.filesystem.xml#File/browseForSave()" class="- topic/link "><linktext class="- topic/linktext ">browseForSave()</linktext></link><link href="flash.filesystem.xml#File/event:select" class="- topic/link "><linktext class="- topic/linktext ">select</linktext></link><link href="flash.net.xml#FileFilter" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileFilter</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:browseForDirectory_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вызывается при нажатии кнопки «Отмена» в диалоговом окне «Открыть файл». 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вызывается при нажатии кнопки «Отмена» в диалоговом окне «Открыть файл».</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForDirectory_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вызывается при выборе каталога и закрытии диалогового окна выбора каталога. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вызывается при выборе каталога и закрытии диалогового окна выбора каталога.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForDirectory_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Операция обзора не поддерживается на этой платформе.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Операция обзора не поддерживается на этой платформе.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:browseForOpenMultiple" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">browseForOpenMultiple</apiName><shortdesc class="- topic/shortdesc ">
	 Отображает диалоговое окно «Открыть файл», в котором можно выбрать один или несколько файлов для открытия.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Выполняется операция обзора (browseForOpen(), browseForOpenMultiple(), browseForSave(), browseForDirectory()).
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Программе не предоставлены необходимые права.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">title</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Строка, отображаемая в строке заголовка диалогового окна.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">typeFilter</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Массив экземпляров FileFilter, который используется для фильтрации файлов, отображенных в диалоговом окне. Если данный параметр пропущен, то отображаются все файлы. Дополнительные сведения см. в описании класса FileFilter.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Отображает диалоговое окно «Открыть файл», в котором можно выбрать один или несколько файлов для открытия.
	 
	 <p class="- topic/p ">При выборе файлов вызывается событие <codeph class="+ topic/ph pr-d/codeph ">selectMultiple</codeph>. Свойство <codeph class="+ topic/ph pr-d/codeph ">target</codeph> события <codeph class="+ topic/ph pr-d/codeph ">select</codeph> является этим объектом File. В отличие от <codeph class="+ topic/ph pr-d/codeph ">browseForOpen()</codeph>, применение метода <codeph class="+ topic/ph pr-d/codeph ">browseForOpenMultiple()</codeph> не делает объект File ссылкой на выбранные файлы. Вместо этого конечное событие <codeph class="+ topic/ph pr-d/codeph ">selectMultiple</codeph> содержит массив выбранных файлов.</p>
	 
	 <p class="- topic/p ">Диалоговое окно «Открыть файл» не всегда отображается на переднем плане относительно окон, которые принадлежат другому окну (окна, свойство <codeph class="+ topic/ph pr-d/codeph ">owner</codeph> которых имеет непустое значение). Для предотвращения проблем, связанных с порядком окон, перед вызовом этого метода скройте подчиненные окна.</p>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Примечание.</b> На устройствах Android установка заголовка диалогового окна файла невозможна. Параметр <codeph class="+ topic/ph pr-d/codeph ">title</codeph> игнорируется.</p>
	 
	 </apiDesc><example conref="examples\File.browseForOpenMultiple.1.as" class="- topic/example "> Следующий код использует метод <codeph class="+ topic/ph pr-d/codeph ">File.browseForOpenMultiple()</codeph>, чтобы позволить пользователю выбрать несколько файлов. После выбора файлов код выводит список путей к ним.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;
import flash.events.FileListEvent;

var docsDir:File = File.documentsDirectory;
try
{
    docsDir.browseForOpenMultiple("Select Files");
    docsDir.addEventListener(FileListEvent.SELECT_MULTIPLE, filesSelected);
}
catch (error:Error)
{
    trace("Failed:", error.message);
}

function filesSelected(event:FileListEvent):void 
{
    for (var i:uint = 0; i &lt; event.files.length; i++) 
    {
        trace(event.files[i].nativePath);
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/browseForSave()" class="- topic/link "><linktext class="- topic/linktext ">browseForSave()</linktext></link><link href="flash.filesystem.xml#File/browseForOpen()" class="- topic/link "><linktext class="- topic/linktext ">browseForOpen()</linktext></link><link href="flash.filesystem.xml#File/browseForDirectory()" class="- topic/link "><linktext class="- topic/linktext ">browseForDirectory()</linktext></link><link href="flash.filesystem.xml#File/event:selectMultiple" class="- topic/link "><linktext class="- topic/linktext ">selectMultiple</linktext></link><link href="flash.net.xml#FileFilter" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileFilter</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:browseForOpenMultiple_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вызывается при нажатии кнопки «Отмена» в диалоговом окне «Открыть файл». 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вызывается при нажатии кнопки «Отмена» в диалоговом окне «Открыть файл».</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForOpenMultiple_selectMultiple" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">selectMultiple</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:FileListEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вызывается при выборе файлов и закрытии диалогового окна «Открыть файл». 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вызывается при выборе файлов и закрытии диалогового окна «Открыть файл».</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForOpenMultiple_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Операция обзора не поддерживается на этой платформе.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Операция обзора не поддерживается на этой платформе.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:browseForOpen" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">browseForOpen</apiName><shortdesc class="- topic/shortdesc ">
	 Отображает диалоговое окно «Открыть файл», где можно выбрать файл для открытия.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Выполняется операция обзора (browseForOpen(), browseForOpenMultiple(), browseForSave(), browseForDirectory()).
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Программе не предоставлены необходимые права.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">title</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Строка, отображаемая в строке заголовка диалогового окна.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">typeFilter</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Массив экземпляров FileFilter, который используется для фильтрации файлов, отображенных в диалоговом окне. Если данный параметр пропущен, то отображаются все файлы. Дополнительные сведения см. в описании класса FileFilter.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Отображает диалоговое окно «Открыть файл», где можно выбрать файл для открытия.
	 
	 <p class="- topic/p ">При выборе файла вызывается событие <codeph class="+ topic/ph pr-d/codeph ">select</codeph>. Свойство <codeph class="+ topic/ph pr-d/codeph ">target</codeph> события <codeph class="+ topic/ph pr-d/codeph ">select</codeph> — это объект File, указывающий на выбранный файл.</p>
	 
	 <p class="- topic/p ">Диалоговое окно «Открыть файл» не всегда отображается на переднем плане относительно окон, которые принадлежат другому окну (окна, свойство <codeph class="+ topic/ph pr-d/codeph ">owner</codeph> которых имеет непустое значение). Для предотвращения проблем, связанных с порядком окон, перед вызовом этого метода скройте подчиненные окна.</p>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Примечание.</b> На устройствах Android установка заголовка диалогового окна файла невозможна. Параметр <codeph class="+ topic/ph pr-d/codeph ">title</codeph> игнорируется.</p>
	 
	 </apiDesc><example conref="examples\File.browseForOpen.1.as" class="- topic/example "> Следующий код использует метод <codeph class="+ topic/ph pr-d/codeph ">File.browseForOpen()</codeph>, чтобы позволить пользователю выбрать текстовый файл. После выбора файла код считывает данные этого файла в строку.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;
import flash.events.Event;
import flash.net.FileFilter;

var fileToOpen:File = new File();
var txtFilter:FileFilter = new FileFilter("Text", "*.as;*.css;*.html;*.txt;*.xml");

try 
{
    fileToOpen.browseForOpen("Open", [txtFilter]);
    fileToOpen.addEventListener(Event.SELECT, fileSelected);
}
catch (error:Error)
{
    trace("Failed:", error.message);
}

function fileSelected(event:Event):void 
{
    var stream:FileStream = new FileStream();
    stream.open(event.target, FileMode.READ);
    var fileData:String = stream.readUTFBytes(stream.bytesAvailable);
    trace(fileData);
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/browseForSave()" class="- topic/link "><linktext class="- topic/linktext ">browseForSave()</linktext></link><link href="flash.filesystem.xml#File/browseForOpenMultiple()" class="- topic/link "><linktext class="- topic/linktext ">browseForOpenMultiple()</linktext></link><link href="flash.filesystem.xml#File/browseForDirectory()" class="- topic/link "><linktext class="- topic/linktext ">browseForDirectory()</linktext></link><link href="flash.filesystem.xml#File/event:select" class="- topic/link "><linktext class="- topic/linktext ">select</linktext></link><link href="flash.net.xml#FileFilter" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileFilter</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:browseForOpen_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вызывается при нажатии кнопки «Отмена» в диалоговом окне «Открыть файл». 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вызывается при нажатии кнопки «Отмена» в диалоговом окне «Открыть файл».</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForOpen_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вызывается при выборе файла и закрытии диалогового окна «Открыть файл». 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вызывается при выборе файла и закрытии диалогового окна «Открыть файл».</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForOpen_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Операция обзора не поддерживается на этой платформе.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Операция обзора не поддерживается на этой платформе.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:browseForSave" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">browseForSave</apiName><shortdesc class="- topic/shortdesc ">
	 Отображает диалоговое окно «Сохранить файл», в котором можно выбрать место назначения файла.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Выполняется операция обзора (browseForOpen(), browseForOpenMultiple(), browseForSave(), browseForDirectory()).
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Программе не предоставлены необходимые права.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">title</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Строка, отображаемая в строке заголовка диалогового окна.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Отображает диалоговое окно «Сохранить файл», в котором можно выбрать место назначения файла. 
	 
	 <p class="- topic/p ">При выборе файла вызывается событие <codeph class="+ topic/ph pr-d/codeph ">select</codeph>. Свойство <codeph class="+ topic/ph pr-d/codeph ">target</codeph> события <codeph class="+ topic/ph pr-d/codeph ">select</codeph> является объектом File, который указывает на выбранное место для сохранения файла.</p>
	 
	 <p class="- topic/p ">Диалоговое окно «Сохранить файл» не всегда отображается на переднем плане относительно окон, которые принадлежат другому окну (окна, свойство <codeph class="+ topic/ph pr-d/codeph ">owner</codeph> которых имеет непустое значение). Для предотвращения проблем, связанных с порядком окон, перед вызовом этого метода скройте подчиненные окна.</p>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Примечание.</b> На устройствах Android установка заголовка диалогового окна файла невозможна. Параметр <codeph class="+ topic/ph pr-d/codeph ">title</codeph> игнорируется.</p>
	 
	 </apiDesc><example conref="examples\File.browseForSave.1.as" class="- topic/example "> Следующий код использует метод <codeph class="+ topic/ph pr-d/codeph ">File.browseForSave()</codeph>, чтобы позволить пользователю выбрать путь для сохранения файла. После выбора файлов код сохраняет данные по выбранному пути.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;
import flash.events.Event;

var docsDir:File = File.documentsDirectory;
try
{
    docsDir.browseForSave("Save As");
    docsDir.addEventListener(Event.SELECT, saveData);
}
catch (error:Error)
{
    trace("Failed:", error.message);
}

function saveData(event:Event):void 
{
    var newFile:File = event.target as File;
    var str:String = "Hello.";
    if (!newFile.exists)
    {
        var stream:FileStream = new FileStream();
        stream.open(newFile, FileMode.WRITE);
        stream.writeUTFBytes(str);
        stream.close();
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/browseForDirectory()" class="- topic/link "><linktext class="- topic/linktext ">browseForDirectory()</linktext></link><link href="flash.filesystem.xml#File/browseForOpen()" class="- topic/link "><linktext class="- topic/linktext ">browseForOpen()</linktext></link><link href="flash.filesystem.xml#File/event:select" class="- topic/link "><linktext class="- topic/linktext ">select</linktext></link><link href="flash.net.xml#FileFilter" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileFilter</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:browseForSave_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вызывается при нажатии кнопки «Отмена» в диалоговом окне «Сохранить файл». 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вызывается при нажатии кнопки «Отмена» в диалоговом окне «Сохранить файл».</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForSave_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вызывается при выборе файла и закрытии диалогового окна «Сохранить файл». 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вызывается при выборе файла и закрытии диалогового окна «Сохранить файл».</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForSave_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Операция обзора не поддерживается на этой платформе.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Операция обзора не поддерживается на этой платформе.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
	 Отменяет все операции, ожидающие выполнения.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Отменяет все операции, ожидающие выполнения.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:canonicalize" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">canonicalize</apiName><shortdesc class="- topic/shortdesc ">
	 Устанавливает путь к файлу в качестве канонического.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Устанавливает путь к файлу в качестве канонического.
	 
	 <p class="- topic/p ">Если объект File представляет собой существующий файл или каталог, при установлении пути как канонического он корректируется в соответствии с регистром в имени реального файла или каталога. Если объект File — символьная ссылка, при установлении пути как канонического он корректируется для соответствия файлу или каталогу, на который указывает ссылка, независимо от того, существует ли такой файл или каталог. В файловых системах, учитывающих регистр (например, Linux), когда существует несколько файлов, имена которых отличаются только регистром, метод <codeph class="+ topic/ph pr-d/codeph ">canonicalize()</codeph> корректирует путь в соответствии с первым найденным файлом (в порядке, определенном файловой системой).</p>
	 
	 <p class="- topic/p ">Кроме того, при установлении канонического пути в ОС Windows короткие имена файлов переводятся в длинные.</p>
	 
	 </apiDesc><example conref="examples\File.canonicalize.2.as" class="- topic/example ">     Следующий код показывает, как с помощью метода <codeph class="+ topic/ph pr-d/codeph ">canonicalize()</codeph> найти соответствующее имя каталога, в котором используются заглавные буквы. Перед выполнением этого кода необходимо создать каталог с именем AIR Test на рабочем столе компьютера.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var path:File = File.desktopDirectory.resolvePath("air test");
trace(path.nativePath); 
path.canonicalize();
trace(path.nativePath); // ...\AIR Test

</codeblock></example><example conref="examples\File.canonicalize.1.as" class="- topic/example ">     Следующий код показывает, как с помощью метода <codeph class="+ topic/ph pr-d/codeph ">canonicalize()</codeph> найти длинное имя каталога Windows, исходя из его короткого имени. В данном примере предполагается, что в корне диска C: имеется каталог с именем AIR Test и коротким системным именем AIR~1.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var path:File = new File();
path.nativePath = "C:\\AIR~1";
path.canonicalize();
trace(path.nativePath); // C:\AIR Test
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	 Возвращает копию данного объекта File.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Возвращает копию данного объекта File. Регистрации событий не копируются.
	 
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Примечание.</i> Данный метод <i class="+ topic/ph hi-d/i ">не</i> копирует сам файл. Он просто создает копию экземпляра объекта File <ph class="- topic/ph ">ActionScript</ph>. Для копирования файла пользуйтесь методом <codeph class="+ topic/ph pr-d/codeph ">copyTo()</codeph>.</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:copyToAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">copyToAsync</apiName><shortdesc class="- topic/shortdesc ">
	 Начинает копирование файла или каталога из места, указанного данным объектом File, в место, заданное параметром destination.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Программе не предоставлены необходимые права на запись в целевую папку.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">newLocation</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:FileReference</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Место назначения нового файла. Обратите внимание, что данный объект File определяет конечный (скопированный) файл или каталог, а <i class="+ topic/ph hi-d/i ">не</i> путь к текущему каталогу.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">overwrite</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">При значении <codeph class="+ topic/ph pr-d/codeph ">false</codeph> невозможно выполнить копирование, если файл, заданный параметром <codeph class="+ topic/ph pr-d/codeph ">target</codeph>, уже существует. При значении <codeph class="+ topic/ph pr-d/codeph ">true</codeph> в ходе операции сначала стираются все существующие файлы или каталоги с таким же именем.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Начинает копирование файла или каталога из места, указанного данным объектом File, в место, заданное параметром <codeph class="+ topic/ph pr-d/codeph ">destination</codeph>. 
	 
	 <p class="- topic/p ">После завершения вызывается событие <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> (в случае успешного выполнения) или <codeph class="+ topic/ph pr-d/codeph ">ioError</codeph> (в случае невозможности завершения). Процесс копирования создает все необходимые родительские каталоги (если возможно).</p>
	 
	 </apiDesc><example conref="examples\File.copyToAsync.1.as" class="- topic/example "> Следующий код показывает, как скопировать файл с помощью метода <codeph class="+ topic/ph pr-d/codeph ">copyToAsync()</codeph>. Перед выполнением этого кода необходимо создать файл test1.txt во вложенном каталоге AIR Test каталога документов на компьютере. В результате копирования получается файл с именем test2.txt, который также находится во вложенном каталоге AIR Test. Если для параметра <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> задано значение <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, эта операция перезаписывает любой существующий файл test2.txt.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
import flash.events.Event;

var sourceFile:File = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("AIR Test/test1.txt");
var destination:File = File.documentsDirectory;
destination = destination.resolvePath("AIR Test/test2.txt");

sourceFile.copyToAsync(destination, true);
sourceFile.addEventListener(Event.COMPLETE, fileCopiedHandler);

function fileCopiedHandler(event:Event):void {
    trace("Done.");
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/copyTo()" class="- topic/link "><linktext class="- topic/linktext ">copyTo()</linktext></link><link href="flash.filesystem.xml#File/moveToAsync()" class="- topic/link "><linktext class="- topic/linktext ">moveToAsync()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:copyToAsync_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вызывается при успешном копировании файла или каталога. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вызывается при успешном копировании файла или каталога.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:copyToAsync_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Источник не существует; либо адресат существует, и <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> равно <codeph class="+ topic/ph pr-d/codeph ">false</codeph>; либо источник не удалось скопировать в целевой объект; либо источник и целевой объект указывают на один файл или одну папку, и <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> установлен на <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. ОС Windows не позволяет копировать открытый файл или каталог, если открыт хотя бы один из содержащихся в нем файлов.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Источник не существует; либо целевой объект существует, и overwrite равно false; либо источник не удалось скопировать в адресат; либо источник и целевой объект указывают на один файл или одну папку, и overwrite установлен на true.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:copyTo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">copyTo</apiName><shortdesc class="- topic/shortdesc ">
	 Перемещает файл или каталог из места, заданного объектом File, в место, заданное параметром newLocation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Источник не существует; либо адресат существует, и <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> равно <codeph class="+ topic/ph pr-d/codeph ">false</codeph>; либо источник не удалось скопировать в целевой объект; либо источник и целевой объект указывают на один файл или одну папку, и <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> установлен на <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. ОС Windows не позволяет копировать открытый файл или каталог, если открыт хотя бы один из содержащихся в нем файлов.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Программе не предоставлены необходимые права на запись в целевую папку.
	  
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">newLocation</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:FileReference</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Место назначения нового файла. Обратите внимание, что данный объект File определяет конечный (скопированный) файл или каталог, а <i class="+ topic/ph hi-d/i ">не</i> путь к текущему каталогу.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">overwrite</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">При значении <codeph class="+ topic/ph pr-d/codeph ">false</codeph> невозможно выполнить копирование, если файл, заданный параметром <codeph class="+ topic/ph pr-d/codeph ">target</codeph>, уже существует. При значении <codeph class="+ topic/ph pr-d/codeph ">true</codeph> в ходе операции перезаписываются все существующие файлы или каталоги с таким же именем.  
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Перемещает файл или каталог из места, заданного объектом File, в место, заданное параметром <codeph class="+ topic/ph pr-d/codeph ">newLocation</codeph>. Процесс копирования создает все необходимые родительские каталоги (если возможно).
	 
	 </apiDesc><example conref="examples\File.copyTo.1.as" class="- topic/example "> Следующий код показывает, как скопировать файл с помощью метода <codeph class="+ topic/ph pr-d/codeph ">copyTo()</codeph>. Перед выполнением этого кода необходимо создать файл test1.txt во вложенном каталоге AIR Test каталога документов на компьютере. В результате копирования получается файл с именем test2.txt, который также находится во вложенном каталоге AIR Test. Если для параметра <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> задано значение <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, эта операция перезаписывает любой существующий файл test2.txt.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
import flash.events.Event;

var sourceFile:FileReference = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("AIR Test/test1.txt");
var destination:FileReference = File.documentsDirectory;
destination = destination.resolvePath("AIR Test/test2.txt");

if (sourceFile.copyTo(destination, true)) {
    trace("Done.");
}
</codeblock></example><example conref="examples\File.copyTo.2.as" class="- topic/example "> Следующий код показывает, как скопировать файл с помощью метода <codeph class="+ topic/ph pr-d/codeph ">copyTo()</codeph>. Перед выполнением этого кода необходимо создать файл test1.txt во вложенном каталоге AIR Test основного каталога на компьютере. В результате копирования получается файл с именем test2.txt. На примере инструкций <codeph class="+ topic/ph pr-d/codeph ">try</codeph> и <codeph class="+ topic/ph pr-d/codeph ">catch</codeph> показано, как отвечать на ошибки.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var sourceFile:File = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("AIR Test/test1.txt");
var destination:File = File.documentsDirectory;
destination = destination.resolvePath("AIR Test/test2.txt");

try 
{
    sourceFile.copyTo(destination, true);
}
catch (error:Error)
{
    trace("Error:", error.message);
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/copyToAsync()" class="- topic/link "><linktext class="- topic/linktext ">copyToAsync()</linktext></link><link href="flash.filesystem.xml#File/moveTo()" class="- topic/link "><linktext class="- topic/linktext ">moveTo()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:createDirectory" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">createDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 Создает указанный каталог и все необходимые родительские каталоги.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Каталог не существовал и не мог быть создан. 
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Программе не предоставлены необходимые права.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Создает указанный каталог и все необходимые родительские каталоги. Если каталог уже существует, никаких действий не предпринимается.
	 
	 </apiDesc><example conref="examples\File.createDirectory.1.as" class="- topic/example ">     Следующий код перемещает файл с именем test.txt с рабочего стола во вложенный каталог AIR Test каталога документов. С помощью вызова метода <codeph class="+ topic/ph pr-d/codeph ">createDirectory()</codeph> перед перемещением файла можно убедиться в том, что каталог AIR Test действительно существует.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var source:File = File.desktopDirectory.resolvePath("test.txt");
var target:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");
var targetParent:File = target.parent;
targetParent.createDirectory();
source.moveTo(target, true);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:createTempDirectory" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">createTempDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 Возвращает ссылку на новый временный каталог.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Объект File, ссылающийся на новый временный каталог.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Возвращает ссылку на новый временный каталог. Это новый каталог в пути временного системного каталога.
	 
	 <p class="- topic/p ">Этот метод позволяет определить новый уникальный каталог, не отправляя запрос системе.</p>
	 
	 <p class="- topic/p ">Перед закрытием приложения рекомендуется удалять временные каталоги, так как не некоторых устройствах они не удаляются автоматически.</p>
	 
	 </apiDesc><example conref="examples\File.createTempDirectory.1.as" class="- topic/example "> Следующий код использует метод <codeph class="+ topic/ph pr-d/codeph ">createTempFile()</codeph> для получения ссылки на новый временный каталог.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.File;

var temp:File = File.createTempDirectory();
trace(temp.nativePath);
</codeblock> При каждом выполнении этого кода создается новый (уникальный) файл. 
</example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/createTempFile()" class="- topic/link "><linktext class="- topic/linktext ">createTempFile()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:createTempFile" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">createTempFile</apiName><shortdesc class="- topic/shortdesc ">
	 Возвращает ссылку на новый временный файл.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Объект File, ссылающийся на новый временный файл.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Возвращает ссылку на новый временный файл. Это новый файл в пути временного системного каталога.
	 
	 <p class="- topic/p ">Этот метод позволяет определить новый уникальный файл, не запрашивая об этом систему.</p>
	 
	 <p class="- topic/p ">Перед закрытием приложения рекомендуется удалять временные файлы, так как они не удаляются автоматически.</p>
	 
	 </apiDesc><example conref="examples\File.createTempFile.1.as" class="- topic/example "> Следующий код использует метод <codeph class="+ topic/ph pr-d/codeph ">createTempFile()</codeph> для получения ссылки на новый временный файл.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.File;

var temp:File = File.createTempFile();
trace(temp.nativePath);
</codeblock> При каждом выполнении этого кода создается новый (уникальный) файл. 
</example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/createTempDirectory()" class="- topic/link "><linktext class="- topic/linktext ">createTempDirectory()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:deleteDirectoryAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">deleteDirectoryAsync</apiName><shortdesc class="- topic/shortdesc ">
	 Удаляет каталог в асинхронном режиме.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Программе не предоставлены необходимые права на удаление каталога.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">deleteDirectoryContents</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Указывает, можно ли удалять каталог, содержащий файлы или подкаталоги. При значении <codeph class="+ topic/ph pr-d/codeph ">false</codeph> объект File вызывает событие <codeph class="+ topic/ph pr-d/codeph ">ioError</codeph>, если каталог содержит файлы или подкаталоги.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Удаляет каталог в асинхронном режиме. Если этот объект File является символьной ссылкой на каталог, то удаляется эта ссылка, а не сам каталог.
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/deleteDirectory()" class="- topic/link "><linktext class="- topic/linktext ">deleteDirectory()</linktext></link><link href="flash.filesystem.xml#File/deleteFileAsync()" class="- topic/link "><linktext class="- topic/linktext ">deleteFileAsync()</linktext></link><link href="flash.filesystem.xml#File/moveToTrashAsync()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrashAsync()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:deleteDirectoryAsync_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вызывается при успешном удалении каталога. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вызывается при успешном удалении каталога.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:deleteDirectoryAsync_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Каталог не может быть удален или такого каталога не существует. ОС Windows не позволяет удалять каталог, если открыт хотя бы один из содержащихся в нем файлов.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Каталог не может быть удален или такого каталога не существует.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:deleteDirectory" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">deleteDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 Удаляет каталог.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Каталог нельзя удалить, или он не существует. ОС Windows не позволяет удалять каталог, если открыт хотя бы один из содержащихся в нем файлов.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Программе не предоставлены необходимые права на удаление каталога.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">deleteDirectoryContents</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Указывает, можно ли удалять каталог, содержащий файлы или подкаталоги. При значении <codeph class="+ topic/ph pr-d/codeph ">false</codeph> вызов этого метода создает исключение, если каталог содержит файлы или подкаталоги.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Удаляет каталог. Если этот объект File является символьной ссылкой на каталог, то удаляется эта ссылка, а не сам каталог.
	 
	 </apiDesc><example conref="examples\File.deleteDirectory.1.as" class="- topic/example "> Следующий код создает пустой каталог, затем удаляет его с помощью метода <codeph class="+ topic/ph pr-d/codeph ">deleteDirectory()</codeph>. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var directory:File = File.documentsDirectory.resolvePath("Empty Junk Directory/");
File.createDirectory(directory);
trace(directory.exists); // true
directory.deleteDirectory();
trace(directory.exists); // false
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/deleteDirectoryAsync()" class="- topic/link "><linktext class="- topic/linktext ">deleteDirectoryAsync()</linktext></link><link href="flash.filesystem.xml#File/deleteFile()" class="- topic/link "><linktext class="- topic/linktext ">deleteFile()</linktext></link><link href="flash.filesystem.xml#File/moveToTrash()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrash()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:deleteFileAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">deleteFileAsync</apiName><shortdesc class="- topic/shortdesc ">
	 Удаляет файл в асинхронном режиме.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Программе не предоставлены необходимые права на удаление файла.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Удаляет файл в асинхронном режиме. Если этот объект File является символьной ссылкой, то удаляется эта ссылка, а не целевой файл.
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/deleteDirectoryAsync()" class="- topic/link "><linktext class="- topic/linktext ">deleteDirectoryAsync()</linktext></link><link href="flash.filesystem.xml#File/deleteFile()" class="- topic/link "><linktext class="- topic/linktext ">deleteFile()</linktext></link><link href="flash.filesystem.xml#File/moveToTrashAsync()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrashAsync()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:deleteFileAsync_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вызывается при успешном удалении файла. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вызывается при успешном удалении файла.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:deleteFileAsync_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не может быть удален или такого файла не существует. ОС Windows не позволяет удалять открытые файлы.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Файл не может быть удален или такого файла не существует.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:deleteFile" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">deleteFile</apiName><shortdesc class="- topic/shortdesc ">
	 Удаляет файл.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не может быть удален или такого файла не существует. ОС Windows не позволяет удалять открытые файлы.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Программе не предоставлены необходимые права на удаление файла.

	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Удаляет файл. Если этот объект File является символьной ссылкой, то удаляется эта ссылка, а не целевой файл.
	 
	 </apiDesc><example conref="examples\File.deleteFile.1.as" class="- topic/example "> Следующий код создает временный файл, затем вызывает метод <codeph class="+ topic/ph pr-d/codeph ">deleteFile()</codeph> для его удаления.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var file:File = File.createTempFile();
trace(file.exists); // true
file.deleteFile();
trace(file.exists); // false
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/deleteDirectory()" class="- topic/link "><linktext class="- topic/linktext ">deleteDirectory()</linktext></link><link href="flash.filesystem.xml#File/deleteFileAsync()" class="- topic/link "><linktext class="- topic/linktext ">deleteFileAsync()</linktext></link><link href="flash.filesystem.xml#File/moveToTrash()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrash()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:getDirectoryListingAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getDirectoryListingAsync</apiName><shortdesc class="- topic/shortdesc ">
	 В асинхронном режиме формирует массив объектов File, связанных с содержимым каталога, который представляется данным объектом File.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 В асинхронном режиме формирует массив объектов File, связанных с содержимым каталога, который представляется данным объектом File. 
	 
	 </apiDesc><example conref="examples\File.getDirectoryListingAsync.1.as" class="- topic/example "> Следующий код показывает, как с помощью метода <codeph class="+ topic/ph pr-d/codeph ">getDirectoryListingAsync()</codeph> можно вывести список содержимого каталога пользователя.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
import flash.events.FileListEvent;

var directory:File = File.userDirectory;
directory.getDirectoryListingAsync();
directory.addEventListener(FileListEvent.DIRECTORY_LISTING, directoryListingHandler);

function directoryListingHandler(event:FileListEvent):void {
    var list:Array = event.files;
    for (var i:uint = 0; i &lt; list.length; i++) {
        trace(list[i].nativePath);
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/getDirectoryListing()" class="- topic/link "><linktext class="- topic/linktext ">getDirectoryListing()</linktext></link><link href="flash.filesystem.xml#File/getRootDirectories()" class="- topic/link "><linktext class="- topic/linktext ">getRootDirectories()</linktext></link><link href="flash.filesystem.xml#File/event:directoryListing" class="- topic/link "><linktext class="- topic/linktext ">Событие directoryListing</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:getDirectoryListingAsync_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">У вас нет прав для чтения данного каталога или его не существует.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">У вас нет прав для чтения данного каталога или его не существует.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:getDirectoryListingAsync_directoryListing" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">directoryListing</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:FileListEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Содержимое каталога успешно пересчитано. Событие <codeph class="+ topic/ph pr-d/codeph ">contents</codeph> содержит свойство <codeph class="+ topic/ph pr-d/codeph ">files</codeph>, представляющее собой результирующий массив объектов File.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Содержимое каталога успешно пересчитано.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:getDirectoryListing" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getDirectoryListing</apiName><shortdesc class="- topic/shortdesc ">
	 Возвращает массив объектов File, связанных с файлами и каталогами, размещенными в каталоге, представленном данным объектом File.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Массив объектов File.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Возвращает массив объектов File, связанных с файлами и каталогами, размещенными в каталоге, представленном данным объектом File. При использовании этого метода не рассматривается содержимое подкаталогов.
	 
	 </apiDesc><example conref="examples\File.getDirectoryListing.1.as" class="- topic/example "> Следующий код показывает, как с помощью метода <codeph class="+ topic/ph pr-d/codeph ">getDirectoryListing()</codeph> можно вывести список содержимого каталога пользователя.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var directory:File = File.userDirectory;
var list:Array = directory.getDirectoryListing();
for (var i:uint = 0; i &lt; list.length; i++) {
    trace(list[i].nativePath);
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/getDirectoryListingAsync()" class="- topic/link "><linktext class="- topic/linktext ">getDirectoryListingAsync()</linktext></link><link href="flash.filesystem.xml#File/getRootDirectories()" class="- topic/link "><linktext class="- topic/linktext ">getRootDirectories()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:getRelativePath" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getRelativePath</apiName><shortdesc class="- topic/shortdesc ">
	 Находит среди двух путей к файлу относительный путь.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ссылка имеет значение <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вызывающий оператор не находится в изолированной программной среде безопасности.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Относительный путь между этим файлом (или каталогом) и файлом (или каталогом) <codeph class="+ topic/ph pr-d/codeph ">ref</codeph>, если возможно; в противном случае — <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ref</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:FileReference</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> Объект File, относительно которого задан путь.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useDotDot</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> Указывает, может ли конечный относительный путь использовать компоненты «..».
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Находит среди двух путей к файлу относительный путь.
	 
	 <p class="- topic/p ">Относительный путь — это список компонентов, которые могут быть добавлены (разрешены по отношению) к этой ссылке для обнаружения второй (параметрической) ссылки. Для записи возвращенного относительного пути используется разделитель «/».</p>
	 
	 <p class="- topic/p ">В других случаях относительные пути могут содержать ссылки «..», но такие пути не могут превышать предельного объема.</p>
	 
	 </apiDesc><example conref="examples\File.getRelativePath.1.as" class="- topic/example "/></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:getRootDirectories" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getRootDirectories</apiName><shortdesc class="- topic/shortdesc ">
	 Возвращается массив объектов File, в котором перечислены корневые каталоги файловой системы.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Массив объектов File, в котором перечислены корневые каталоги. 
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Возвращается массив объектов File, в котором перечислены корневые каталоги файловой системы. 
	 
	 <p class="- topic/p ">Например, в ОС Windows это список томов, таких как C: и D:. Пустой том, например CD- или DVD-привод, в который не установлен диск, не учитывается в массиве. В Mac OS и Linux этот метод всегда возвращает уникальный корневой каталог компьютера (каталог «/»)</p>
	 
	 <p class="- topic/p ">В файловых системах, в которых чтение корневого каталога невозможно, например в файловой системе Android, свойства возвращенного объекта File не всегда отражают истинное значение. Например, на платформе Android свойство <codeph class="+ topic/ph pr-d/codeph ">spaceAvailable</codeph> возвращает значение 0.</p>
	 
	 </apiDesc><example conref="examples\File.getRootDirectories.1.as" class="- topic/example "> Следующий код выводит список корневых каталогов:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
var rootDirs:Array = File.getRootDirectories();

for (var i:uint = 0; i &lt; rootDirs.length; i++) {
    trace(rootDirs[i].nativePath);
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:moveToAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">moveToAsync</apiName><shortdesc class="- topic/shortdesc ">
	 Перемещает файл или каталог из места, заданного объектом File, в место, заданное параметром newLocation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Программе не предоставлены необходимые права на перемещение файла.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">newLocation</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:FileReference</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Место назначения для перемещения. Этот объект указывает путь к конечному (перемещенному) файлу или каталогу, а <i class="+ topic/ph hi-d/i ">не</i> к исходному каталогу.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">overwrite</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">При значении <codeph class="+ topic/ph pr-d/codeph ">false</codeph> перемещение не выполняется, если файл <codeph class="+ topic/ph pr-d/codeph ">target</codeph> уже существует. При значении <codeph class="+ topic/ph pr-d/codeph ">true</codeph> в ходе операции сначала стираются все существующие файлы или каталоги с таким же именем.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Перемещает файл или каталог из места, заданного объектом File, в место, заданное параметром <codeph class="+ topic/ph pr-d/codeph ">newLocation</codeph>. 
	 
	 <p class="- topic/p ">Для переименования файла задайте параметр <codeph class="+ topic/ph pr-d/codeph ">destination</codeph>, чтобы он указывал на путь в каталог, содержащий файл, но с другим именем файла.</p>
	 
	 <p class="- topic/p ">Процесс перемещения создает все необходимые родительские каталоги (если возможно).</p>
	 
	 </apiDesc><example conref="examples\File.moveToAsync.1.as" class="- topic/example "> Следующий код показывает, как переименовать файл с помощью метода <codeph class="+ topic/ph pr-d/codeph ">moveToAsync()</codeph>. Исходное имя файла test1.txt в результате меняется на имя test2.txt. Так как и исходный, и целевой объекты File указывают на один и тот же каталог (вложенный каталог Apollo Test каталога документов пользователя), метод <codeph class="+ topic/ph pr-d/codeph ">moveToAsync()</codeph> переименовывает файл, а не перемещает его в новый каталог. Перед выполнением этого кода необходимо создать файл test1.txt во вложенном каталоге Apollo Test каталога документов на компьютере. Если для параметра <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> задано значение <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, эта операция перезаписывает любой существующий файл test2.txt.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
import flash.events.Event;

var sourceFile:File = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("Apollo Test/test1.txt");
var destination:File = File.documentsDirectory;
destination = destination.resolvePath("Apollo Test/test2.txt");

var sourceFile.moveToAsync(destination, true);
sourceFile.addEventListener(Event.COMPLETE, fileMoveCompleteHandler);

function fileMoveCompleteHandler(event:Event):void 
{
    trace("Done.")
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/copyToAsync()" class="- topic/link "><linktext class="- topic/linktext ">copyToAsync()</linktext></link><link href="flash.filesystem.xml#File/moveTo()" class="- topic/link "><linktext class="- topic/linktext ">moveTo()</linktext></link><link href="flash.filesystem.xml#File/moveToTrashAsync()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrashAsync()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:moveToAsync_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вызывается при успешном перемещении файла или каталога. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вызывается при успешном перемещении файла или каталога.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:moveToAsync_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Источник не существует; либо адрес назначения существует, и <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> имеет значение <codeph class="+ topic/ph pr-d/codeph ">false</codeph>; либо источник невозможно переместить в целевое местоположение; либо источник и адресат указывают на один файл или одну папку, и для <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> установлено значение <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. ОС Windows не позволяет перемещать открытый файл или каталог, если открыт хотя бы один из содержащихся в нем файлов.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Источник не существует; либо адрес назначения существует, и overwrite равно false; либо источник не удалось переместить в целевой объект; либо источник и адресат указывают на один файл или одну папку, и overwrite установлен на true.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:moveToTrashAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">moveToTrashAsync</apiName><shortdesc class="- topic/shortdesc ">
	 Перемещает файл или каталог в корзину в асинхронном режиме.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>TBC: what to do when Trash is not supported?  SB part of general policy about optional system facilities.
	 </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Программе не предоставлены необходимые права на перемещение файла в корзину.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Перемещает файл или каталог в корзину в асинхронном режиме. 
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Примечание.</b> В операционных системах, которые не поддерживают концепцию восстанавливаемой папки корзины, файлы сразу же удаляются.</p>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/moveToTrash()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrash()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:moveToTrashAsync_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Операционная система не разрешила выполнить операцию, либо файла или каталога не существует. ОС Windows не позволяет перемещать открытый файл или каталог, если открыт хотя бы один из содержащихся в нем файлов.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Операционная система не позволяет выполнить операцию, либо файл или каталог не существуют.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:moveToTrashAsync_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вызывается при успешном перемещении файла или каталога в корзину. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Вызывается при успешном перемещении файла или каталога в корзину.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:moveToTrash" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">moveToTrash</apiName><shortdesc class="- topic/shortdesc ">
	 Перемещает файл или каталог в корзину.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>TBC: what to do when Trash is not supported?  SB part of general policy about optional system facilities.
	 </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Операционная система не разрешила выполнить операцию, либо файла или каталога не существует. ОС Windows не позволяет перемещать открытый файл или каталог, если открыт хотя бы один из содержащихся в нем файлов.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Программе не предоставлены необходимые права на перемещение файла в корзину.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Перемещает файл или каталог в корзину.
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Примечание.</b> В операционных системах, которые не поддерживают концепцию восстанавливаемой папки корзины, файлы сразу же удаляются.</p>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/moveToTrashAsync()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrashAsync()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:moveTo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">moveTo</apiName><shortdesc class="- topic/shortdesc ">
	 Перемещает файл или каталог из места, заданного объектом File, в место, заданное параметром destination.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Источник не существует; либо адресат существует, и <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> установлен на <codeph class="+ topic/ph pr-d/codeph ">false</codeph>; либо исходный файл или каталог не мог быть перемещен в целевое местоположение; либо источник и адресат указывают на один файл или одну папку, и <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> установлен на <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. ОС Windows не позволяет перемещать открытый файл или каталог, если открыт хотя бы один из содержащихся в нем файлов.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Программе не предоставлены необходимые права на перемещение файла.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">newLocation</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:FileReference</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Место назначения для перемещения. Этот объект указывает путь к конечному (перемещенному) файлу или каталогу, а <i class="+ topic/ph hi-d/i ">не</i> к исходному каталогу.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">overwrite</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">При значении <codeph class="+ topic/ph pr-d/codeph ">false</codeph> перемещение не выполняется, если файл <codeph class="+ topic/ph pr-d/codeph ">target</codeph> уже существует. При значении <codeph class="+ topic/ph pr-d/codeph ">true</codeph> в ходе операции сначала стираются все существующие файлы или каталоги с таким же именем. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Перемещает файл или каталог из места, заданного объектом File, в место, заданное параметром <codeph class="+ topic/ph pr-d/codeph ">destination</codeph>. 
	 
	 <p class="- topic/p ">Для переименования файла задайте параметр <codeph class="+ topic/ph pr-d/codeph ">destination</codeph>, чтобы он указывал на путь в каталог, содержащий файл, но с другим именем файла.</p>
	 
	 <p class="- topic/p ">Процесс перемещения создает все необходимые родительские каталоги (если возможно).</p>
	 
	 </apiDesc><example conref="examples\File.moveTo.1.as" class="- topic/example "> Следующий код показывает, как переименовать файл с помощью метода <codeph class="+ topic/ph pr-d/codeph ">moveTo()</codeph>. Исходное имя файла test1.txt в результате меняется на имя test2.txt. Так как и исходный, и целевой объекты File указывают на один и тот же каталог (вложенный каталог Apollo Test каталога документов пользователя), метод <codeph class="+ topic/ph pr-d/codeph ">moveTo()</codeph> переименовывает файл, а не перемещает его в новый каталог. Перед выполнением этого кода необходимо создать файл test1.txt во вложенном каталоге AIR Test каталога документов на компьютере. Если для параметра <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> задано значение <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, эта операция перезаписывает любой существующий файл test2.txt.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

import flash.filesystem.File;
import flash.events.Event;

var sourceFile:File = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("AIR Test/test1.txt");
var destination:File = File.documentsDirectory;
destination = destination.resolvePath("Apollo Test/test2.txt");

try  
{
    sourceFile.moveTo(destination, true);
}
catch (error:Error)
{
    trace("Error:" + error.message);
}
</codeblock></example><example conref="examples\File.moveTo.2.as" class="- topic/example "> Следующий код показывает, как переместить файл с помощью метода <codeph class="+ topic/ph pr-d/codeph ">moveTo()</codeph>. Исходным файлом является файл test1.txt во вложенном каталоге Apollo Test каталога документов пользователя, и этот метод перемещает данный файл во вложенный каталог Results. Перед выполнением этого кода необходимо создать файл test1.txt во вложенном каталоге AIR Test основного каталога на компьютере. На примере инструкций <codeph class="+ topic/ph pr-d/codeph ">try</codeph> и <codeph class="+ topic/ph pr-d/codeph ">catch</codeph> показано, как отвечать на ошибки.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var sourceFile:File = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("AIR Test/test1.txt");
var destination:File = File.documentsDirectory;
destination = destination.resolvePath("AIR Test/Results/test1.txt");

try 
{
    sourceFile.moveTo(destination, true);
}
catch (error:Error)
{
    trace("Error:" + error.message);
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/copyTo()" class="- topic/link "><linktext class="- topic/linktext ">copyTo()</linktext></link><link href="flash.filesystem.xml#File/moveToAsync()" class="- topic/link "><linktext class="- topic/linktext ">moveToAsync()</linktext></link><link href="flash.filesystem.xml#File/moveToTrash()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrash()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:openWithDefaultApplication" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">openWithDefaultApplication</apiName><shortdesc class="- topic/shortdesc ">
	 Открывает файл в программе, назначенной в операционной системе для открытия данного типа файлов.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">(ОС Mac OS и Linux) Не найдено приложение, с помощью которого можно открыть файл. (В ОС Windows попытка открыть файл, с которым не связано ни одно приложение, заканчивается неудачей, при этом не выдается исключение.)
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл находится в каталоге программы или относится к запрещенному типу. Эта ошибка не распространяется на приложения AIR, устанавливаемые с помощью собственной программы установки (то есть приложения расширенного рабочего стола).
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не существует, или нет программы, назначенной для его открытия.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Файл не существует.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ReferenceError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ReferenceError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Открывает файл в программе, назначенной в операционной системе для открытия данного типа файлов.
	 
	 <p class="- topic/p ">AIR препятствует использованию метода File.openWithDefaultApplication() для открытия определенных файлов. В ОС Windows AIR препятствует открытию файлов определенного типа (с расширениями, перечисленными ниже). В системах Mac OS и Linux среда выполнения AIR не позволяет открывать файлы, которые запускаются в специальных приложениях, перечисленных ниже. При попытке открыть такие файлы с помощью метода <codeph class="+ topic/ph pr-d/codeph ">openWithDefaultApplication()</codeph> выдается исключение. Однако эти ограничения не распространяются на программы AIR, устанавливаемые с помощью собственной программы установки (то есть расширенные программы профиля рабочего стола). Они могут открывать файлы любого типа.</p>
	 
	 <p class="- topic/p ">Нельзя открывать документы из каталога программы.</p>
	 
	 <p class="- topic/p ">В приведенной ниже таблице перечислены расширения файлов, запрещенные в ОС Windows, а также программы, которые нельзя запускать в ОС Mac OS и ОС Linux.</p>
	 
	 <p class="- topic/p ">
	 <adobetable class="innertable"><tgroup cols="4" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry "> Расширение документа в ОС Windows </entry><entry class="- topic/entry "> Тип </entry><entry class="- topic/entry "> Соответствующая программа в ОС Mac OS </entry><entry class="- topic/entry "> Соответствующая программа в ОС Linux </entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "> bat </entry><entry class="- topic/entry "> Командный файл </entry><entry class="- topic/entry "> Терминал </entry><entry class="- topic/entry "> Нет программы по умолчанию </entry></row><row class="- topic/row "><entry class="- topic/entry "> cmd </entry><entry class="- topic/entry "> Командный файл DOS и Windows </entry><entry class="- topic/entry "> Терминал </entry><entry class="- topic/entry "> Нет программы по умолчанию </entry></row><row class="- topic/row "><entry class="- topic/entry "> com </entry><entry class="- topic/entry "> Команда </entry><entry class="- topic/entry "> Терминал </entry><entry class="- topic/entry "> Нет программы по умолчанию </entry></row><row class="- topic/row "><entry class="- topic/entry "> csh </entry><entry class="- topic/entry "> Сценарий командного процессора UNIX csh </entry><entry class="- topic/entry "> Терминал </entry><entry class="- topic/entry "> /bin/csh </entry></row><row class="- topic/row "><entry class="- topic/entry "> dash </entry><entry class="- topic/entry "> Сценарий командного процессора UNIX dash </entry><entry class="- topic/entry "> Терминал </entry><entry class="- topic/entry "> /bin/dash </entry></row><row class="- topic/row "><entry class="- topic/entry "> ksh </entry><entry class="- topic/entry "> Сценарий командного процессора UNIX ksh </entry><entry class="- topic/entry "> Терминал </entry><entry class="- topic/entry "> /bin/ksh </entry></row><row class="- topic/row "><entry class="- topic/entry "> sh </entry><entry class="- topic/entry "> Сценарий командного процессора UNIX  </entry><entry class="- topic/entry "> Терминал </entry><entry class="- topic/entry "> /bin/bash </entry></row><row class="- topic/row "><entry class="- topic/entry "> tcsh </entry><entry class="- topic/entry "> Сценарий командного процессора UNIX tcsh </entry><entry class="- topic/entry "> Терминал </entry><entry class="- topic/entry "> /bin/tcsh </entry></row><row class="- topic/row "><entry class="- topic/entry "> zsh </entry><entry class="- topic/entry "> Сценарий командного процессора UNIX zsh </entry><entry class="- topic/entry "> Терминал </entry><entry class="- topic/entry "> /bin/zsh </entry></row><row class="- topic/row "><entry class="- topic/entry "> exe </entry><entry class="- topic/entry "> Исполняемый файл </entry><entry class="- topic/entry "> Исполняемый бит, расширение .app </entry><entry class="- topic/entry "> /lib/ld.so </entry></row><row class="- topic/row "><entry class="- topic/entry "> lnk </entry><entry class="- topic/entry "> Файл комбинации клавиш Windows </entry><entry class="- topic/entry "> Исполняемый бит, расширение .app </entry><entry class="- topic/entry "> Ссылки в ОС Linux, набор исполняемых битов, нет программы по умолчанию. </entry></row><row class="- topic/row "><entry class="- topic/entry "> pif </entry><entry class="- topic/entry "> Файл сведений о программе </entry><entry class="- topic/entry "> Исполняемый бит, расширение .app </entry><entry class="- topic/entry "> нет </entry></row><row class="- topic/row "><entry class="- topic/entry "> reg </entry><entry class="- topic/entry "> Регистрационная информация/ключ для Windows 95/98, файл данных реестра </entry><entry class="- topic/entry "> нет </entry><entry class="- topic/entry "> нет </entry></row><row class="- topic/row "><entry class="- topic/entry "> scf </entry><entry class="- topic/entry "> Команда проводника Windows </entry><entry class="- topic/entry "> ScriptEditor, AutomatorRunner </entry><entry class="- topic/entry "> нет </entry></row><row class="- topic/row "><entry class="- topic/entry "> shb, shs </entry><entry class="- topic/entry "> Файл объектов Shell Scrap Object </entry><entry class="- topic/entry "> нет </entry><entry class="- topic/entry "> нет </entry></row><row class="- topic/row "><entry class="- topic/entry "> prg </entry><entry class="- topic/entry "> Программный файл </entry><entry class="- topic/entry "> нет </entry><entry class="- topic/entry "> нет </entry></row><row class="- topic/row "><entry class="- topic/entry "> vb, vbe, vbs </entry><entry class="- topic/entry "> Файлы VBScript </entry><entry class="- topic/entry "> нет </entry><entry class="- topic/entry "> нет </entry></row><row class="- topic/row "><entry class="- topic/entry "> vsmacros </entry><entry class="- topic/entry "> Проект двоичных макросов Visual Studio .NET </entry><entry class="- topic/entry "> нет </entry><entry class="- topic/entry "> нет </entry></row><row class="- topic/row "><entry class="- topic/entry "> ws, wsc, wsf, wsh </entry><entry class="- topic/entry "> Файлы сценариев Windows </entry><entry class="- topic/entry "> ScriptEditor, AutomatorRunner </entry><entry class="- topic/entry "> нет </entry></row><row class="- topic/row "><entry class="- topic/entry "> fxp </entry><entry class="- topic/entry "> Исходный код, скомпилированный с помощью Fox Pro </entry><entry class="- topic/entry "> нет </entry><entry class="- topic/entry "> нет </entry></row><row class="- topic/row "><entry class="- topic/entry "> mas </entry><entry class="- topic/entry "> Сохраненные процедуры Microsoft Access </entry><entry class="- topic/entry "> нет </entry><entry class="- topic/entry "> нет </entry></row><row class="- topic/row "><entry class="- topic/entry "> scr </entry><entry class="- topic/entry "> Заставка экрана Windows </entry><entry class="- topic/entry "> нет </entry><entry class="- topic/entry "> нет </entry></row><row class="- topic/row "><entry class="- topic/entry "> py, pyc </entry><entry class="- topic/entry "> Файл сценария Python </entry><entry class="- topic/entry "> Python </entry><entry class="- topic/entry "> Python </entry></row><row class="- topic/row "><entry class="- topic/entry "> pl </entry><entry class="- topic/entry "> Файл сценария языка Perl </entry><entry class="- topic/entry "> Терминал </entry><entry class="- topic/entry "> perl </entry></row><row class="- topic/row "><entry class="- topic/entry "> cgi </entry><entry class="- topic/entry "> Файл сценария Common Gateway Interface </entry><entry class="- topic/entry "> Терминал </entry><entry class="- topic/entry "> perl </entry></row><row class="- topic/row "><entry class="- topic/entry "> msi, msm, msp, mst, idt, cub, pcp </entry><entry class="- topic/entry "> Файл программы установки Windows </entry><entry class="- topic/entry "> installer </entry><entry class="- topic/entry "> нет </entry></row><row class="- topic/row "><entry class="- topic/entry "> job </entry><entry class="- topic/entry "> Объект «задание» планировщика заданий Windows </entry><entry class="- topic/entry "> нет </entry><entry class="- topic/entry "> нет </entry></row><row class="- topic/row "><entry class="- topic/entry "> jar, js, jse </entry><entry class="- topic/entry "> Файл архива Java, файл JavaScript, файл сценария с использованием кода JScript </entry><entry class="- topic/entry "> <ph class="- topic/ph ">JarLauncher</ph> </entry><entry class="- topic/entry "> jar </entry></row><row class="- topic/row "><entry class="- topic/entry "> url </entry><entry class="- topic/entry "> Ярлык Интернета </entry><entry class="- topic/entry "> нет </entry><entry class="- topic/entry "> нет </entry></row><row class="- topic/row "><entry class="- topic/entry "> hta </entry><entry class="- topic/entry "> HTML-приложение </entry><entry class="- topic/entry "> нет </entry><entry class="- topic/entry "> нет </entry></row></tbody></tgroup></adobetable>
	 </p>
	 
	 <p class="- topic/p ">
	 <adobetable class="innertable"><tgroup cols="4" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry "> Только для ОС Mac OS X </entry><entry class="- topic/entry "> Тип </entry><entry class="- topic/entry "> Программа в ОС Mac OS </entry><entry class="- topic/entry "> Соответствующая программа в ОС Linux </entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "> нет </entry><entry class="- topic/entry "> Апплет Mac OS X Java </entry><entry class="- topic/entry "> AppletLauncher </entry><entry class="- topic/entry "> нет </entry></row><row class="- topic/row "><entry class="- topic/entry "> нет </entry><entry class="- topic/entry "> Подключаемый модуль Mac OS X AppleScript </entry><entry class="- topic/entry "> systemevents </entry><entry class="- topic/entry "> нет </entry></row><row class="- topic/row "><entry class="- topic/entry "> нет </entry><entry class="- topic/entry "> Графический элемент Mac OS X </entry><entry class="- topic/entry "> dock, dashboardlauncher </entry><entry class="- topic/entry "> нет </entry></row></tbody></tgroup></adobetable>
	 </p>
	 
	 <p class="- topic/p ">
	 <adobetable class="innertable"><tgroup cols="4" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry "> Расширение документа только для ОС Linux </entry><entry class="- topic/entry "> Тип </entry><entry class="- topic/entry "> Соответствующая программа в ОС Mac OS </entry><entry class="- topic/entry "> Программа Linux </entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "> rb </entry><entry class="- topic/entry "> Сценарий командного процессора Ruby </entry><entry class="- topic/entry "> нет </entry><entry class="- topic/entry "> ruby </entry></row><row class="- topic/row "><entry class="- topic/entry "> desktop </entry><entry class="- topic/entry "> Файлы и ярлыки на рабочем столе </entry><entry class="- topic/entry "> нет </entry><entry class="- topic/entry "> Нет программы по умолчанию </entry></row><row class="- topic/row "><entry class="- topic/entry "> directory </entry><entry class="- topic/entry "> Файлы и ярлыки каталогов </entry><entry class="- topic/entry "> нет </entry><entry class="- topic/entry "> Нет программы по умолчанию </entry></row></tbody></tgroup></adobetable>
	 </p>
	 	 
	 	 
	 </apiDesc><example conref="examples\File.openWithDefaultApplication.1.as" class="- topic/example "> Следующий код дает пользователю возможность перейти к файлу MP3 и открыть его в приложении по умолчанию для воспроизведения MP3. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
import flash.net.FileFilter;

var file:File = File.documentsDirectory; 
var mp3Filter:FileFilter = new FileFilter("MP3 Files", "*.mp3"); 
file.browseForOpen("Open", [mp3Filter]); 
file.addEventListener(Event.SELECT, fileSelected); 
 
function fileSelected(e:Event):void 
{ 
    file.openWithDefaultApplication(); 
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/downloaded" class="- topic/link "><linktext class="- topic/linktext ">downloaded</linktext></link><link href="flash.desktop.xml#NativeProcess" class="- topic/link "><linktext class="- topic/linktext ">NativeProcess</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:resolvePath" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">resolvePath</apiName><shortdesc class="- topic/shortdesc ">
	 Создает новый объект File с относительным для данного объекта File путем, на основе параметра path (строки).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Новый объект File, указывающий на получившийся путь.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">path</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Путь, который нужно добавить в конец пути данного объекта File (если параметр <codeph class="+ topic/ph pr-d/codeph ">path</codeph> представляет относительный путь); или возвращаемый путь (если параметр <codeph class="+ topic/ph pr-d/codeph ">path</codeph> представляет абсолютный путь).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Создает новый объект File с относительным для данного объекта File путем, на основе параметра <codeph class="+ topic/ph pr-d/codeph ">path</codeph> (строки).
	 
	 <p class="- topic/p ">В качестве параметра <codeph class="+ topic/ph pr-d/codeph ">path</codeph> можно использовать относительный или абсолютный путь.</p>
	 
	 <p class="- topic/p ">При указании относительного пути заданный <codeph class="+ topic/ph pr-d/codeph ">path</codeph> добавляется в конец пути объекта File. Однако использование «..» в записи <codeph class="+ topic/ph pr-d/codeph ">path</codeph> может вернуть путь, не являющийся дочерним путем объекта File. Полученная ссылка не обязательно должна ссылаться на действительное место расположения файловой системы.</p>
	 
	 <p class="- topic/p ">При указании абсолютной ссылки на файл метод возвращает объект File, указывающий на этот путь. В абсолютной ссылке на файл должен использоваться допустимый синтаксис пути, присущий операционной системе пользователя (например, <codeph class="+ topic/ph pr-d/codeph ">"C:\\test"</codeph> в Windows). <i class="+ topic/ph hi-d/i ">Не</i> используйте URL-адрес (например, <codeph class="+ topic/ph pr-d/codeph ">file:///c:/test</codeph>) в качестве параметра <codeph class="+ topic/ph pr-d/codeph ">path</codeph>.</p>
	 
	 <p class="- topic/p ">Все полученные пути нормализуются следующим образом: </p>
	 
	 <ul class="- topic/ul "><li class="- topic/li ">Все элементы «.» игнорируются.</li><li class="- topic/li ">Все элементы «..» замещают родительские записи.  </li><li class="- topic/li ">Ни одна ссылка «..», достигающая корневого каталога файловой системы или корневого каталога хранения данных приложения, не проходит этот узел; такие ссылки игнорируются.</li></ul>
	 
	 <p class="- topic/p ">В качестве разделителя в записи пути всегда следует использовать левую косую черту (<codeph class="+ topic/ph pr-d/codeph ">/</codeph>). В ОС Windows также <i class="+ topic/ph hi-d/i ">можно</i> использовать обратную косую черту (<codeph class="+ topic/ph pr-d/codeph ">\</codeph>), но этого делать не следует. Использование обратной наклонной черты может привести к тому, что программы не смогут работать на других платформах.</p>
	 
	 <p class="- topic/p ">Имена файлов и каталогов в Linux чувствительны к регистру.</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.filesystem:File:applicationDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">applicationDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 Папка с установленными файлами приложения.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Папка с установленными файлами приложения.
	 
	 <p class="- topic/p ">Свойство <codeph class="+ topic/ph pr-d/codeph ">url</codeph> для этого объекта использует схему URL-адресов <codeph class="+ topic/ph pr-d/codeph ">app</codeph> (не схему <codeph class="+ topic/ph pr-d/codeph ">file</codeph>). Это означает, что строка <codeph class="+ topic/ph pr-d/codeph ">url</codeph> открывается записью<codeph class="+ topic/ph pr-d/codeph ">app:</codeph> (а не <codeph class="+ topic/ph pr-d/codeph ">file:</codeph>). Кроме того, если создается объект File, связанный с каталогом <codeph class="+ topic/ph pr-d/codeph ">File.applicationDirectory</codeph> (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">resolvePath()</codeph>), то <codeph class="+ topic/ph pr-d/codeph ">url</codeph> объекта File также использует схему URL-адреса <codeph class="+ topic/ph pr-d/codeph ">app</codeph> (как в примере). 
	 </p>
	 
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Примечание.</i> В файлы или каталоги, в путях которых используется схема URL-адреса <codeph class="+ topic/ph pr-d/codeph ">app:</codeph>, невозможно производить запись. Также невозможно удалять или создать файлы и папки с путями, в которых используется схема URL-адреса <codeph class="+ topic/ph pr-d/codeph ">app:</codeph>. Изменение содержимого в каталоге программы не является оптимальным методом по причинам, связанным с безопасностью, и блокируется операционной системой на некоторых платформах. Если требуется сохранить какие-то данные приложения, лучше использовать каталог хранения данных приложения (<codeph class="+ topic/ph pr-d/codeph ">File.applicationStorageDirectory</codeph>). Если необходимо предоставить какому-либо содержимому в каталоге хранения программы доступ к отдельным функциям программы (API-интерфейсы AIR), можно поместить эти функции в изолированную программную среду безопасности.</p>
	 
	 
	 <p class="- topic/p ">Свойство <codeph class="+ topic/ph pr-d/codeph ">applicationDirectory</codeph> позволяет создать ссылку на каталог приложения, который будет действительным для всех платформ. Если задать объект File для ссылки на каталог приложения с помощью свойства <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> или <codeph class="+ topic/ph pr-d/codeph ">url</codeph>, эта ссылка будет работать только на той платформе, для которой этот путь является действительным.</p>
	 
	 <p class="- topic/p ">На платформе Android свойство <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> объекта File, указывающее на каталог программы, является пустой строкой. Используйте свойство <codeph class="+ topic/ph pr-d/codeph ">url</codeph> для доступа к файлам программы.</p> 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/applicationStorageDirectory" class="- topic/link "><linktext class="- topic/linktext ">applicationStorageDirectory</linktext></link></related-links></apiValue><apiValue id="flash.filesystem:File:applicationStorageDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">applicationStorageDirectory</apiName><shortdesc class="- topic/shortdesc ">
     Каталог для хранения данных приложения.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Каталог для хранения данных приложения. 
	 
	 <p class="- topic/p ">Каждое приложение AIR имеет свой постоянный каталог для хранения данных, который создается при первом вызове <codeph class="+ topic/ph pr-d/codeph ">File.applicationStorageDirectory</codeph>. Этот каталог очень удобен для хранения данных приложения.</p>
	 
	 <p class="- topic/p ">При удалении программы AIR удаление каталога хранения программы и ее файлов программой удаления зависит от платформы.</p>
	 
	 <p class="- topic/p ">Свойство <codeph class="+ topic/ph pr-d/codeph ">url</codeph> для этого объекта использует схему URL-адреса <codeph class="+ topic/ph pr-d/codeph ">app-storage</codeph> (не схему <codeph class="+ topic/ph pr-d/codeph ">file</codeph>). Это означает, что строка <codeph class="+ topic/ph pr-d/codeph ">url</codeph> открывается записью<codeph class="+ topic/ph pr-d/codeph ">app-storage:</codeph> (а не <codeph class="+ topic/ph pr-d/codeph ">file:</codeph>). Кроме того, если создается объект File, связанный с каталогом <codeph class="+ topic/ph pr-d/codeph ">File.applicationStoreDirectory</codeph> (с помощью метода <codeph class="+ topic/ph pr-d/codeph ">resolvePath()</codeph>), то <codeph class="+ topic/ph pr-d/codeph ">url</codeph> объекта File также использует схему URL-адреса <codeph class="+ topic/ph pr-d/codeph ">app-storage</codeph> (как в примере).</p>
	 
	 <p class="- topic/p ">Свойство <codeph class="+ topic/ph pr-d/codeph ">applicationStorageDirectory</codeph> позволяет создать ссылку на каталог хранилища приложения, который будет действительным для всех платформ. Если задать объект File для ссылки на каталог хранилища приложения с помощью свойства <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> или <codeph class="+ topic/ph pr-d/codeph ">url</codeph>, эта ссылка будет работать только на той платформе, для которой этот путь является действительным.</p>
	 
	 
	 </apiDesc><example conref="examples\File.applicationStorageDirectory.1.as" class="- topic/example "> Следующий код создает объект File, указывающий на вложенный каталог images в каталоге хранилища приложения.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var tempFiles:File = File.applicationStorageDirectory;
tempFiles = tempFiles.resolvePath("images/");
trace(tempFiles.url); // app-storage:/images
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:desktopDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">desktopDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 Каталог рабочего стола пользователя.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Каталог рабочего стола пользователя.
	 
	 <p class="- topic/p ">Свойство <codeph class="+ topic/ph pr-d/codeph ">desktopDirectory</codeph> позволяет создать ссылку на каталог рабочего стола, который будет действительным для всех платформ. Если задать объект File для ссылки на каталог рабочего стола с помощью свойства <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> или <codeph class="+ topic/ph pr-d/codeph ">url</codeph>, эта ссылка будет работать только на той платформе, для которой этот путь является действительным.</p>
	 
	 <p class="- topic/p ">Если операционная система не поддерживает каталог рабочего стола, вместо него используется соответствующий каталог файловой системы.</p>
	 
  	 <p class="- topic/p ">В среде AIR для телевизионных устройств отсутствует понятие каталога рабочего стола пользователя. Поэтому свойство <codeph class="+ topic/ph pr-d/codeph ">desktopDirectory</codeph> ссылается на тот же каталог, что и свойство <codeph class="+ topic/ph pr-d/codeph ">File.userDirectory</codeph>. Каталог пользователя уникален для программы.</p>	 
	 	 
	 
	 </apiDesc><example conref="examples\File.desktopDirectory.1.as" class="- topic/example "> Следующий код выводит список файлов и каталогов в каталоге рабочего стола пользователя.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
var desktop:File = File.desktopDirectory;

var files:Array = desktop.getDirectoryListing();

for (var i:uint = 0; i &lt; files.length; i++) {
    trace(files[i].nativePath);
}
</codeblock><swfblock conref="examples\File.desktopDirectory.1.swf" xml:space="preserve"/></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:documentsDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">documentsDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 Каталог с документами пользователя.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Каталог с документами пользователя.
	 
	 <p class="- topic/p ">В Windows это каталог «Мои документы» (например, C:\Documents and Settings\имя_пользователя\Мои документы). В Mac OS это по умолчанию каталог /Users/имя_пользователя/Documents. В Linux это по умолчанию каталог /home/имя_пользователя/Documents (в англоязычной системе), и это свойство учитывает настройку <codeph class="+ topic/ph pr-d/codeph ">xdg-user-dirs</codeph>.</p>
	 
	 
	 <p class="- topic/p ">Свойство <codeph class="+ topic/ph pr-d/codeph ">documentsDirectory</codeph> позволяет создать ссылку на каталог документов, который будет действительным для всех платформ. Если задать объект File для ссылки на каталог документов с помощью свойства <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> или <codeph class="+ topic/ph pr-d/codeph ">url</codeph>, эта ссылка будет работать только на той платформе, для которой этот путь является действительным.</p>
	 
	 <p class="- topic/p ">Если операционная система не поддерживает каталог документов, вместо него используется соответствующий каталог файловой системы.</p>
	 
  	 <p class="- topic/p ">В среде AIR для телевизионных устройств отсутствует понятие каталога документов пользователя. Поэтому свойство <codeph class="+ topic/ph pr-d/codeph ">documentsDirectory</codeph> ссылается на тот же каталог, что и свойство <codeph class="+ topic/ph pr-d/codeph ">File.userDirectory</codeph>. Каталог пользователя уникален для программы.</p>	 
	 
	 </apiDesc><example conref="examples\File.documentsDirectory.1.as" class="- topic/example "> Следующий код использует свойство <codeph class="+ topic/ph pr-d/codeph ">File.documentsDirectory</codeph> и метод <codeph class="+ topic/ph pr-d/codeph ">File.createDirectory()</codeph> для проверки существования каталога с именем AIR Test в каталоге документов пользователя.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var directory:File = File.documentsDirectory;
directory = directory.resolvePath("AIR Test");

File.createDirectory(directory);
trace(directory.exists); // true
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:downloaded:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">downloaded</apiName><shortdesc class="- topic/shortdesc ">
	 Указывает, был ли файл или каталог, указанный в ссылке, загружен из Интернета.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Указывает, был ли файл или каталог, указанный в ссылке, загружен из Интернета.
	 
	 <p class="- topic/p ">Это свойство имеет значение только для операционных систем, в которых файлы могут помечаться во время загрузки:</p>
	 
	 <ul class="- topic/ul "><li class="- topic/li ">ОС Windows XP с пакетом обновления SP2 или более поздним и ОС Windows Vista</li><li class="- topic/li ">ОС Mac OS 10.5 и более поздних версий</li></ul>
	 
	 <p class="- topic/p ">В системах, которые не помечают загруженные файлы, такие как Linux, это свойство неприменимо (и имеет значение <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/openWithDefaultApplication()" class="- topic/link "><linktext class="- topic/linktext ">openWithDefaultApplication()</linktext></link></related-links></apiValue><apiValue id="flash.filesystem:File:exists:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">exists</apiName><shortdesc class="- topic/shortdesc ">
     Определяет, существует ли файл или каталог, на который дается ссылка.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Определяет, существует ли файл или каталог, на который дается ссылка. Значение <codeph class="+ topic/ph pr-d/codeph ">true</codeph> присваивается, если объект File указывает на существующий файл или каталог, в противном случае присваивается значение <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
	 
	 </apiDesc><example conref="examples\File.exists.1.as" class="- topic/example "> Следующий код создает временный файл, затем удаляет его и с помощью свойства <codeph class="+ topic/ph pr-d/codeph ">File.exists</codeph> проверяет существование файла.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var temp:File = File.createTempFile();
trace(temp.exists); // true
temp.deleteFile();
trace(temp.exists); // false
</codeblock><swfblock conref="examples\File.exists.1.swf" xml:space="preserve"/></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:icon:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">icon</apiName><shortdesc class="- topic/shortdesc ">
	 Объект Icon, содержащий значки, заданные для этого файла.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.desktop:Icon</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Объект Icon, содержащий значки, заданные для этого файла. Объект Icon является массивом объектов BitmapData, связанных с различными состояниями значков. В Linux объект Icon не содержит значков. На платформе Android свойство <codeph class="+ topic/ph pr-d/codeph ">icon</codeph> имеет значение <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
	 
	 </apiDesc><example conref="examples\File.icon.1.as" class="- topic/example "> На примере следующего кода показан поиск в массиве <codeph class="+ topic/ph pr-d/codeph ">icon</codeph> изображения с наибольшей высотой и присвоение этого изображения объекту Bitmap.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
import flash.display.*;

var directory:File = File.documentsDirectory;
var bitmaps:Array = directory.icon.bitmaps;
var bmpData:BitmapData = new BitmapData(1, 1);
for (var i:uint = 0; i &lt; bitmaps.length; i++) {
    if (bitmaps[i].height > bmpData.height) {
        bmpData = directory.icon.bitmaps[i];
    }
}
var iconBmp:Bitmap = new Bitmap(bmpData);
</codeblock> Этот объект Bitmap можно добавить в качестве дочернего элемента контейнера экранного объекта, например объекта Sprite или объекта Flex UIComponent.
</example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:isDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isDirectory</apiName><shortdesc class="- topic/shortdesc ">
     Указывает, ведет ли ссылка на каталог.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Указывает, ведет ли ссылка на каталог. Значение <codeph class="+ topic/ph pr-d/codeph ">true</codeph> присваивается, если объект File указывает на каталог, в противном случае присваивается значение <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
	 
	 </apiDesc><example conref="examples\File.isDirectory.1.as" class="- topic/example "> Следующий код создает массив объектов File с указанием на файлы и каталоги в каталоге пользователя, затем с помощью свойства <codeph class="+ topic/ph pr-d/codeph ">isDirectory</codeph> выводит список только тех объектов File, которые указывают на каталоги, а не файлы.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var userDirFiles:Array = File.userDirectory.getDirectoryListing();
for (var i:uint = 0; i &lt; userDirFiles.length; i++) {
    if (userDirFiles[i].isDirectory) {
        trace(userDirFiles[i].nativePath);
    }
}    
</codeblock><swfblock conref="examples\File.isDirectory.1.swf" xml:space="preserve"/></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:isHidden:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isHidden</apiName><shortdesc class="- topic/shortdesc ">
     Указывает, являются ли файл или каталог, на которые ведет ссылка, скрытыми. Значение true присваивается, если файл или каталог, на которые указывает ссылка, являются скрытыми, в противном случае присваивается значение false.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>(Waiting for Stan's OK:)
	 
	 <ul class="- topic/ul "><li class="- topic/li ">On Windows, a file or directory is designated as hidden by specifying the 
	 Hidden attribute (for example, in the File Properties dialog box) for the file.</li><li class="- topic/li ">On Mac OS and Linux, files can be designated as hidden for a number of reasons. Files with 
	 names that begin with the dot (.) character are designated as hidden. A .hidden file 
	 in the root directory lists other hidden files. Also, there is a bit in the file that, 
	 when set, makes it hidden.</li></ul>
	 
	 </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Указывает, являются ли файл или каталог, на которые ведет ссылка, скрытыми. Значение <codeph class="+ topic/ph pr-d/codeph ">true</codeph> присваивается, если файл или каталог, на которые указывает ссылка, являются скрытыми, в противном случае присваивается значение <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
	 
	 </apiDesc><example conref="examples\File.isHidden.1.as" class="- topic/example "> Следующий код создает массив объектов File с указанием на файлы и каталоги в каталоге пользователя, затем с помощью свойства <codeph class="+ topic/ph pr-d/codeph ">isHidden</codeph> выводит список скрытых файлов и каталогов.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var userDirFiles:Array = File.userDirectory.getDirectoryListing();
for (var i:uint = 0; i &lt; userDirFiles.length; i++) {
    if (userDirFiles[i].isHidden) {
        trace(userDirFiles[i].nativePath);
    }
}    
</codeblock><swfblock conref="examples\File.isHidden.1.swf" xml:space="preserve"/></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:isPackage:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isPackage</apiName><shortdesc class="- topic/shortdesc ">
     Указывает, является ли каталог, на который ссылаются, пакетом.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Указывает, является ли каталог, на который ссылаются, пакетом.
     
	 <p class="- topic/p ">Значение <codeph class="+ topic/ph pr-d/codeph ">true</codeph> присваивается, если каталог, на который ссылаются, является пакетом, в противном случае присваивается значение <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. Обратите внимание, что в классе File не предусмотрено прямое создание пакетов.</p>
	 
	 <ul class="- topic/ul "><li class="- topic/li ">В Mac OS каталог может быть назначен пакетом и в этом случае будет отображаться в диспетчере файлов Finder как единый файл, а не как каталог. Этому свойству присваивается значение <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, если каталог, на который ссылается объект, является пакетом; или значение <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, если файл не является каталогом или пакетом или его не существует.</li><li class="- topic/li ">В других операционных системах это свойство всегда имеет значение <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.</li></ul>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:isSymbolicLink:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSymbolicLink</apiName><shortdesc class="- topic/shortdesc ">
     Указывает, является ли ссылка символьной.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Указывает, является ли ссылка символьной.
     
	 <p class="- topic/p ">Значение <codeph class="+ topic/ph pr-d/codeph ">true</codeph> присваивается, если объект File указывает на каталог, в противном случае присваивается значение <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. Обратите внимание, что в классе File не предусмотрено прямое создание символьных ссылок.</p>
	 
	 <p class="- topic/p ">С помощью символьных ссылок один файл может ссылаться на другой файл или каталог на диске. Не путайте символьные ссылки с псевдонимами в Mac OS и ярлыками в Windows, это не одно и то же. Псевдонимы и ярлыки всегда считаются файлами (не каталогами), а чтение или запись псевдонимов и ярлыков не изменяет файлы, на которые они указывают. Символьная ссылка, в свою очередь, повторяет поведение файла или каталога, на который она указывает. Она может считаться файлом или каталогом, а при чтении и записи символьной ссылки изменения будут производиться над самим файлом, на который она указывает, а не только над ссылкой. Удаление символьной ссылки приводит к удалению самой ссылки, а не целевого объекта.</p>
	 
	 <p class="- topic/p ">Операционные системы Mac<sup class="+ topic/ph hi-d/sup ">®</sup> OS<sup class="+ topic/ph hi-d/sup ">®</sup>, Linux и Windows<sup class="+ topic/ph hi-d/sup ">®</sup> Vista<sup class="+ topic/ph hi-d/sup ">®</sup> поддерживают символьные ссылки. Кроме этого, в Windows свойство <codeph class="+ topic/ph pr-d/codeph ">isSymbolicLink</codeph> для объекта File, ссылающегося на точку соединения (используется в файловой системе NTFS) имеет значение <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:lineEnding:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">lineEnding</apiName><shortdesc class="- topic/shortdesc ">
	 Последовательность символов закрытия строки, используемая домашней операционной системой.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Последовательность символов закрытия строки, используемая домашней операционной системой.
	 
	 <p class="- topic/p ">В Mac OS и Linux это знак перевода строки (шестнадцатеричный код символа 0x0A). В ОС Windows это знак возврата каретки (шестнадцатеричный код символа 0x0D) в сочетании со знаком перевода строки (шестнадцатеричный код символа 0x0A).</p>
	 
	 </apiDesc><example conref="examples\File.lineEnding.1.as" class="- topic/example "> Следующий код записывает строку (<codeph class="+ topic/ph pr-d/codeph ">str</codeph>) в текстовый файл и с помощью статического свойства <codeph class="+ topic/ph pr-d/codeph ">File.lineEnding</codeph> заменяет все экземпляры символа начала новой строки (представленного в коде регулярным выражением <codeph class="+ topic/ph pr-d/codeph ">/\n/g</codeph>) на предпочитаемый домашней операционной системой символ закрытия строки.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var str:String = "Hello\n" + 
        "World\n";
str = str.replace(/\n/g, File.lineEnding);
var file:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.open(file, FileMode.WRITE);
fileStream.writeUTF(str);
fileStream.close();
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:nativePath:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">nativePath</apiName><shortdesc class="- topic/shortdesc ">
	 Полный путь в представлении домашней операционной системы.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Неверный синтаксис пути.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вызывающий оператор не находится в изолированной программной среде безопасности.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Полный путь в представлении домашней операционной системы. В Mac OS и Linux в качестве разделителя в записи пути используется левая косая черта (/). Однако в Windows можно <i class="+ topic/ph hi-d/i ">задать</i> свойство <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph>, используя в качестве разделителя в записи пути прямую (/) или обратную (\) косую черту, а AIR автоматически заменит все прямые косые черты обратными.
	 
	<p class="- topic/p ">Прежде чем написать код для прямого <i class="+ topic/ph hi-d/i ">задания</i> свойства <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph>, подумайте, не приведет ли это к созданию кода, который будет работать только на одной конкретной платформе. Например, такой собственный путь, как <codeph class="+ topic/ph pr-d/codeph ">C:\\Documents and Settings\\bob\\Desktop</codeph>, действителен только для Windows. Рекомендуется использовать следующие статические свойства, представляющие часто используемые каталоги и действительные для всех платформ:</p>
	
	<ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.applicationDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.applicationStorageDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.desktopDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.documentsDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.userDirectory</codeph></li></ul>
	
	<p class="- topic/p ">Можно вызвать метод <codeph class="+ topic/ph pr-d/codeph ">resolvePath()</codeph>, чтобы получить относительный путь к этим каталогам.</p>
	
	<p class="- topic/p ">Некоторые интерфейсы Flex API, например, свойство <codeph class="+ topic/ph pr-d/codeph ">source</codeph> класса SWFLoader, используют URL-адрес (свойство <codeph class="+ topic/ph pr-d/codeph ">url</codeph> объекта File), а не собственный путь (свойство <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph>).</p>
	
	
	
	 </apiDesc><example conref="examples\File.nativePath.1.as" class="- topic/example "> Следующий код иллюстрирует разницу между свойством <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> и свойством <codeph class="+ topic/ph pr-d/codeph ">url</codeph> объекта File. Комментарии содержат результаты на примере компьютера Windows.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var docs:File = File.documentsDirectory;
trace(docs.nativePath); // C:\Documents and Settings\turing\My Documents
trace(docs.url); // file:///C:/Documents%20and%20Settings/turing/My%20Documents
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:parent:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">parent</apiName><shortdesc class="- topic/shortdesc ">
     Каталог, содержащий файл или каталог, на который ссылается данный объект File.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Каталог, содержащий файл или каталог, на который ссылается данный объект File. 
	 
	 <p class="- topic/p ">Если файла или каталога не существует, свойство <codeph class="+ topic/ph pr-d/codeph ">parent</codeph> все равно будет возвращать объект File, указывающий на каталог, содержащий файл или каталог, даже если его не существует.</p>
	 
	 <p class="- topic/p ">Это свойство идентично возвращаемому значению для функции <codeph class="+ topic/ph pr-d/codeph ">resolvePath("..")</codeph>, но при этом родительскому элементу корневого каталога присваивается значение <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
	 
	 </apiDesc><example conref="examples\File.parent.1.as" class="- topic/example "> Следующий код использует свойство <codeph class="+ topic/ph pr-d/codeph ">parent</codeph>, чтобы показать каталог, содержащий временный файл.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var tempFile:File = File.createTempDirectory();
trace(tempFile.parent.nativePath);
tempFile.deleteFile();
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:separator:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">separator</apiName><shortdesc class="- topic/shortdesc ">
	 Разделительный символ, используемый в домашней операционной системе.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Разделительный символ, используемый в домашней операционной системе.
	 
	 <p class="- topic/p ">В Mac OS и Linux таким разделителем является левая косая черта (/). В ОС Windows это обратная косая черта (\).</p>
	 
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Примечание.</i> При использовании обратной косой черты в строковом литерале необходимо вводить ее дважды (например, <codeph class="+ topic/ph pr-d/codeph ">directory\\file.ext</codeph>). Две обратных косых черты в строковом литерале идентичны одной обратной косой черте в строке.</p>
	 
	 </apiDesc><example conref="examples\File.separator.1.as" class="- topic/example "> Следующий код использует метод <codeph class="+ topic/ph pr-d/codeph ">getRelativePath()</codeph> для получения относительного пути от каталога к файлу. Затем с помощью статического свойства <codeph class="+ topic/ph pr-d/codeph ">File.separator</codeph> код заменяет символы левой косой черты (/) в обозначении пути на разделители, используемые операционной системой, т. е. на обратную косую черту (\) в Windows и левую косую черту в других операционных системах.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var directory:File = File.documentsDirectory.resolvePath("Apollo Test");
var file:File = File.documentsDirectory.resolvePath("Apollo Test/employees/bob/test.txt");

var relativePath:String = directory.getRelativePath(file); // employees/bob/test.txt
relativePath = relativePath.replace(/\//g, File.separator);
trace(relativePath); 
</codeblock> В данном примере метод <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> использует регулярное выражение <codeph class="+ topic/ph pr-d/codeph ">/\//g</codeph> для поиска соответствий <i class="+ topic/ph hi-d/i ">всем</i> символам левой косой черты.
</example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:spaceAvailable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">spaceAvailable</apiName><shortdesc class="- topic/shortdesc ">
	 Доступное для использования пространство в данном местоположении File, в байтах.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Доступное для использования пространство в данном местоположении File, в байтах. 
	 
	 <p class="- topic/p "> Если объект File ссылается на каталог, <codeph class="+ topic/ph pr-d/codeph ">spaceAvailable</codeph> указывает на объем пространства в каталоге, доступный для использования файлами. Если объект File ссылается на файл, <codeph class="+ topic/ph pr-d/codeph ">spaceAvailable</codeph> указывает доступный объем увеличения файла. Если местоположение файла не существует, <codeph class="+ topic/ph pr-d/codeph ">spaceAvailable</codeph> имеет значение 0. Если объект File указывает на символическую ссылку, <codeph class="+ topic/ph pr-d/codeph ">spaceAvailable</codeph> указывает на доступное пространство в указанном символической ссылкой местоположении.</p>
	 
	 <p class="- topic/p ">Как правило, доступное для файла или каталога пространство равно такому пространству в томе, содержащем этот файл или каталог. Однако при выделении доступного пространства могут учитываться квоты и ограничения, установленные для каталогов.</p>
	 
	 <p class="- topic/p ">При добавлении файла или каталога в том, как правило, требуется больше места, чем фактический размер файла или содержимого каталога. Например, операционной системе может потребоваться дополнительное место для хранения информации указателей. Или секторам диска может потребоваться дополнительное пространство. К тому же, доступное пространство динамически изменяется. Поэтому выделение <i class="+ topic/ph hi-d/i ">всего</i> требуемого пространства для хранения файлов может быть невозможно.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:systemCharset:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">systemCharset</apiName><shortdesc class="- topic/shortdesc ">
	 Кодировка по умолчанию, используемая домашней операционной системой.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Кодировка по умолчанию, используемая домашней операционной системой. 
	 
	 <p class="- topic/p ">Возможные значения включают <codeph class="+ topic/ph pr-d/codeph ">"windows-1252"</codeph> <codeph class="+ topic/ph pr-d/codeph ">"shift-jis"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"cn-gb"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"iso-8859-1"</codeph> и другие. Полный список см. в разделе <xref href="../../charset-codes.html" class="- topic/xref ">Поддерживаемые наборы символов</xref>.</p>
	 
	 <p class="- topic/p ">Это значение можно использовать с методами <codeph class="+ topic/ph pr-d/codeph ">readMultiByte()</codeph> и <codeph class="+ topic/ph pr-d/codeph ">writeMultiByte()</codeph> класса FileStream.</p>
	 
	 </apiDesc><example conref="examples\File.systemCharSet.1.as" class="- topic/example "> Следующий код открывает файл (файл test.txt во вложенном каталоге AIR Test каталога документов пользователя) и использует статическое свойство <codeph class="+ topic/ph pr-d/codeph ">File.systemCharset</codeph> в качестве параметра <codeph class="+ topic/ph pr-d/codeph ">charSet</codeph> в вызове метода <codeph class="+ topic/ph pr-d/codeph ">readMultiByte()</codeph> объекта FileStream.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var file:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.open(file, FileMode.READ);
var str:String = fileStream.readMultiByte(file.size, File.systemCharset);
trace(str);    
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/readMultiByte()" class="- topic/link "><linktext class="- topic/linktext ">FileStream.readMultiByte()</linktext></link><link href="flash.filesystem.xml#FileStream/writeMultiByte()" class="- topic/link "><linktext class="- topic/linktext ">FileStream.writeMultiByte()</linktext></link></related-links></apiValue><apiValue id="flash.filesystem:File:url:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">url</apiName><shortdesc class="- topic/shortdesc ">
	 URL-адрес данного пути к файлу.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>The URL will have a null "host" specification. (As opposed to "localhost". This is more confusing than 
	 informative.
	 
	 </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Неверный синтаксис URL-адреса.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Вызывающий оператор не находится в изолированной программной среде безопасности.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 URL-адрес данного пути к файлу.
	 
	 <p class="- topic/p ">Если это ссылка на путь в каталог хранения данных приложения, схема URL будет <codeph class="+ topic/ph pr-d/codeph ">app-storage</codeph>. Если это ссылка на путь в каталог приложения, схема URL будет <codeph class="+ topic/ph pr-d/codeph ">app</codeph>. Во всех остальных случаях схема будет <codeph class="+ topic/ph pr-d/codeph ">file</codeph>. </p>
	 
	 <p class="- topic/p ">Для <i class="+ topic/ph hi-d/i ">присвоения</i> значения свойству <codeph class="+ topic/ph pr-d/codeph ">url</codeph> рекомендуется использовать знаки пробела (вместо <codeph class="+ topic/ph pr-d/codeph ">"%20"</codeph>). AIR автоматически кодирует строки (например, переводит пробелы в <codeph class="+ topic/ph pr-d/codeph ">"%20"</codeph>).</p>
	 
	 </apiDesc><example conref="examples\File.nativePath.1.as" class="- topic/example "> Следующий код иллюстрирует разницу между свойством <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> и свойством <codeph class="+ topic/ph pr-d/codeph ">url</codeph> объекта File. Комментарии содержат результаты на примере компьютера Windows.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var docs:File = File.documentsDirectory;
trace(docs.nativePath); // C:\Documents and Settings\turing\My Documents
trace(docs.url); // file:///C:/Documents%20and%20Settings/turing/My%20Documents
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/nativePath" class="- topic/link "><linktext class="- topic/linktext ">nativePath</linktext></link><link href="../../package.html#decodeURI()" class="- topic/link "><linktext class="- topic/linktext ">Глобальная функция decodeURI()</linktext></link><link href="../../package.html#decodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">Глобальная функция decodeURIComponent()</linktext></link><link href="../../package.html#encodeURI()" class="- topic/link "><linktext class="- topic/linktext ">Глобальная функция decodeURI()</linktext></link><link href="../../package.html#encodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">Глобальная функция decodeURIComponent()</linktext></link></related-links></apiValue><apiValue id="flash.filesystem:File:userDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">userDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 Каталог пользователя.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Каталог пользователя.
	 
	 <p class="- topic/p ">В ОС Windows это родительский элемент каталога «Мои документы» (например, C:\Мои документы\имя_пользователя). В Mac OS это /Users/имя_пользователя. В Linux это /home/имя_пользователя.</p>
	 
	 <p class="- topic/p ">Свойство <codeph class="+ topic/ph pr-d/codeph ">userDirectory</codeph> позволяет создать ссылку на каталог пользователя, который будет действительным для всех платформ. Если задать свойство <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> или <codeph class="+ topic/ph pr-d/codeph ">url</codeph> объекта File напрямую, ссылка будет работать только на той платформе, для которой она является действительной.</p>
	 
	 <p class="- topic/p ">Если операционная система не поддерживает каталог пользователя, вместо него используется соответствующий каталог файловой системы.</p>
	 
     <p class="- topic/p ">В среде AIR для телевизионных устройств свойство <codeph class="+ topic/ph pr-d/codeph ">userDirectory</codeph> ссылается на каталог пользователя, который уникален для программы.</p>	
     
	 </apiDesc><example conref="examples\File.userDirectory.1.as" class="- topic/example "> Следующий код выводит список файлов и каталогов корневого уровня каталога пользователя.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var files:Array = File.userDirectory.listDirectory();
for (var i:uint = 0; i &lt; files.length; i++) {
    trace(files[i].nativePath);
}
</codeblock></example></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.filesystem:StorageVolume" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">StorageVolume</apiName><shortdesc class="- topic/shortdesc ">
      Объект StorageVolume включает свойства, определяющие том хранения большoй емкости.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Объект StorageVolume включает свойства, определяющие том хранения большoй емкости. Использовать этот класс можно двумя способами.
      
      <ul class="- topic/ul "><li class="- topic/li ">Свойство <codeph class="+ topic/ph pr-d/codeph ">storageVolume</codeph> объекта StorageVolumeChangeEvent представляет собой объект StorageVolume. Этот объект представляет установленный или извлеченный том хранения.</li><li class="- topic/li ">Статический метод <codeph class="+ topic/ph pr-d/codeph ">StorageVolumeInfo.storageVolumeInfo.getStorageVolumes()</codeph> возвращает вектор с объектами StorageVolume. Каждый из этих объектов StorageVolume представляет установленный том хранения.</li></ul>
      
      </apiDesc><example conref="examples\StorageVolumeExample.as" class="- topic/example "> Следующий код перечисляет свойства каждого установленного тома хранения.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.display.Sprite;
    import flash.filesystem.StorageVolume;
    import flash.filesystem.StorageVolumeInfo;

    public class StorageVolumeExample extends Sprite
    {
        public function StorageVolumeExample()
        {
            var volumes:Vector.&lt;StorageVolume> = StorageVolumeInfo.storageVolumeInfo.getStorageVolumes();
            for (var i:int = 0; i &lt; volumes.length; i++)
            {
                var volume:StorageVolume = volumes[i];
                trace("nativePath:", volume.rootDirectory.nativePath);
                trace("fileSystemType:", volume.fileSystemType);
                trace("isRemovable:", volume.isRemovable);
                trace("isWritable:", volume.isWritable);
                trace("drive:", volume.drive);
                trace("name:", volume.name);
                trace("________________________________________________________");
            }
        }
    }
}
</codeblock></example><example conref="examples\StorageVolumeChangeEventExample.as" class="- topic/example "> Следующий код перечисляет свойства каждого установленного или извлеченного тома хранения. Обратите внимание на то, что свойство <codeph class="+ topic/ph pr-d/codeph ">storageVolume</codeph> объекта StorageVolumeChangeEvent задается только для события <codeph class="+ topic/ph pr-d/codeph ">storageVolumeMount</codeph>. Оно имеет значение <codeph class="+ topic/ph pr-d/codeph ">null</codeph> для события <codeph class="+ topic/ph pr-d/codeph ">storageVolumeUnmount</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.display.Sprite;
    import flash.events.StorageVolumeChangeEvent;
    import flash.filesystem.StorageVolume;
    import flash.filesystem.StorageVolumeInfo;

    public class StorageVolumeChangeEventExample extends Sprite
    {
        public function StorageVolumeChangeEventExample()
        {
            StorageVolumeInfo.storageVolumeInfo.addEventListener(StorageVolumeChangeEvent.STORAGE_VOLUME_MOUNT, mountEventHandler);
            StorageVolumeInfo.storageVolumeInfo.addEventListener(StorageVolumeChangeEvent.STORAGE_VOLUME_UNMOUNT, unmountEventHandler);
        }
        public function mountEventHandler(event:StorageVolumeChangeEvent):void
        {            
            var volume:StorageVolume = event.storageVolume;
            trace("VOLUME MOUNTED:");
            trace("nativePath:", event.rootDirectory.nativePath);
            trace("fileSystemType:", volume.fileSystemType);
            trace("isRemovable:", volume.isRemovable);
            trace("isWritable:", volume.isWritable);
            trace("drive:", volume.drive);
            trace("name:", volume.name);
            trace();
        }
        public function unmountEventHandler(event:StorageVolumeChangeEvent):void
        {            
            trace("VOLUME UNMOUNTED:");
            trace("nativePath:", event.rootDirectory.nativePath);
            trace();
        }        
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#StorageVolumeInfo/getStorageVolumes()" class="- topic/link "><linktext class="- topic/linktext ">flash.filesystem.StorageVolumeInfo.getStorageVolumes()</linktext></link><link href="flash.events.xml#StorageVolumeChangeEvent/storageVolume" class="- topic/link "><linktext class="- topic/linktext ">flash.events.StorageVolumeChangeEvent.storageVolume</linktext></link></related-links><apiConstructor id="flash.filesystem:StorageVolume:StorageVolume" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">StorageVolume</apiName><shortdesc class="- topic/shortdesc "> 
	    Функция конструктора.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rootDirPath</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">writable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">removable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fileSysType</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">drive</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	    Функция конструктора. Как правило, эта функция-конструктор не вызывается напрямую (для создания новых объектов StorageVolume). Вместо этого ссылка на объекты StorageVolume осуществляется путем обращения к свойству <codeph class="+ topic/ph pr-d/codeph ">storageVolume</codeph> объекта StorageVolumeChangeEvent или вызова метода <codeph class="+ topic/ph pr-d/codeph ">StorageVolumeInfo.storageVolumeInfo.getStorageVolumes()</codeph>.
	    
	    </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.filesystem:StorageVolume:drive:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">drive</apiName><shortdesc class="- topic/shortdesc ">
	     Имя диска тома в ОС Windows.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     Имя диска тома в ОС Windows. На других платформах это свойство имеет значение <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
	     
	     </apiDesc><example conref="examples\StorageVolume.drive.1.as" class="- topic/example "/></apiValueDetail></apiValue><apiValue id="flash.filesystem:StorageVolume:fileSystemType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fileSystemType</apiName><shortdesc class="- topic/shortdesc "> 
             Тип файловой системы на томе хранения (например, FAT, NTFS, HFS или UFS).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
             Тип файловой системы на томе хранения (например, <codeph class="+ topic/ph pr-d/codeph ">FAT</codeph>, <codeph class="+ topic/ph pr-d/codeph ">NTFS</codeph>, <codeph class="+ topic/ph pr-d/codeph ">HFS</codeph> или <codeph class="+ topic/ph pr-d/codeph ">UFS</codeph>).
             
	     </apiDesc><example conref="examples\StorageVolume.fileSystemType.1.as" class="- topic/example "> Следующий код отображает собственный путь для корневого каталога и тип файловой системы каждого установленного тома хранения.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var volumes:Vector.&lt;StorageVolume> = new Vector.&lt;StorageVolume>;
volumes = StorageVolumeInfo.storageVolumeInfo.getStorageVolumes();
for (var i:int = 0; i &lt; volumes.length; i++)
{
    trace(volumes[i].rootDirectory.nativePath, "(" + volumes[i].fileSystemType + ")");
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:StorageVolume:isRemovable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isRemovable</apiName><shortdesc class="- topic/shortdesc ">
             Рассматривает ли операционная система том хранения как съемный: да (true) или нет (false).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
             Рассматривает ли операционная система том хранения как съемный: да (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) или нет (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
             
             <p class="- topic/p ">В следующем списке приводятся значения свойства <codeph class="+ topic/ph pr-d/codeph ">StorageVolume.isRemovable</codeph> для различных типов устройств.</p>
             
	     <adobetable class="innertable"><tgroup cols="4" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Тип устройства</entry><entry class="- topic/entry ">Mac OS</entry><entry class="- topic/entry ">Windows</entry><entry class="- topic/entry ">Linux</entry></row></thead><tbody class="- topic/tbody "><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">Привод CD/DVD (внутренний)</entry><entry align="center" class="- topic/entry ">true</entry><entry align="center" class="- topic/entry ">true</entry><entry align="center" class="- topic/entry ">true</entry></row><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">Флэш-накопитель USB</entry><entry align="center" class="- topic/entry ">true</entry><entry align="center" class="- topic/entry ">true</entry><entry align="center" class="- topic/entry ">true</entry></row><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">Жесткий диск USB</entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">true</entry></row><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">Жесткий диск FireWire</entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">true</entry></row><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">Общедоступный том</entry><entry align="center" class="- topic/entry ">true</entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">- <sup class="+ topic/ph hi-d/sup ">1</sup></entry></row><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">Сетевой диск</entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">false</entry></row><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">Устройство чтения карт памяти (пустое)</entry><entry align="center" class="- topic/entry ">- <sup class="+ topic/ph hi-d/sup ">2</sup></entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">- <sup class="+ topic/ph hi-d/sup ">2</sup></entry></row><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">Устройство чтения карт памяти (с картой SD/CF)</entry><entry align="center" class="- topic/entry ">true</entry><entry align="center" class="- topic/entry ">true</entry><entry align="center" class="- topic/entry ">true</entry></row></tbody></tgroup></adobetable>
	     
	     <p class="- topic/p "><sup class="+ topic/ph hi-d/sup ">1</sup> В ОС Linux нет понятия общедоступного тома.</p>
	     
	     <p class="- topic/p "><sup class="+ topic/ph hi-d/sup ">2</sup> В ОС Windows пустое устройство чтения карт памяти обозначается как несъемное устройство. В ОС Mac OS и Linux пустые устройства чтения карт не обозначаются как тома хранения.</p>
             
	     </apiDesc><example conref="examples\StorageVolume.isRemovable.1.as" class="- topic/example "> Следующий код выводит список несъемных томов хранения, за которым следует список съемных томов.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var volumes:Vector.&lt;StorageVolume> = new Vector.&lt;StorageVolume>;
volumes = StorageVolumeInfo.storageVolumeInfo.getStorageVolumes();

trace("Non-removeable volumes:");
for (var i:int = 0; i &lt; volumes.length; i++)
{
    if (!volumes[i].isRemovable)
    {
        trace(volumes[i].rootDirectory.nativePath);
    }
}

trace("\nRemoveable volumes:");
for (i = 0; i &lt; volumes.length; i++)
{
    if (volumes[i].isRemovable)
    {
        trace(volumes[i].rootDirectory.nativePath);
    }
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:StorageVolume:isWritable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isWritable</apiName><shortdesc class="- topic/shortdesc ">
             Поддерживает ли том запись: да (true) или нет (false).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
             Поддерживает ли том запись: да (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) или нет (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
             
             <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Примечание.</b> Можно определить объем свободного пространства в томе, вызвав свойство <codeph class="+ topic/ph pr-d/codeph ">rootDirectory.spaceAvailble</codeph> объекта StorageVolume.</p>
             
             </apiDesc><example conref="examples\StorageVolume.isWritable.1.as" class="- topic/example "> Следующий код выводит список записываемых томов хранения и свободное пространство на каждом из них.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var volumes:Vector.&lt;StorageVolume> = new Vector.&lt;StorageVolume>;
volumes = StorageVolumeInfo.storageVolumeInfo.getStorageVolumes();

for (var i:int = 0; i &lt; volumes.length; i++)
{
    if(volumes[i].isWritable)
    {         
        trace(volumes[i].rootDirectory.nativePath, volumes[i].rootDirectory.spaceAvailable);
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="" invalidHref="flash.fileSystem.File.spaceAvailable.xml" class="- topic/link "><linktext class="- topic/linktext ">flash.fileSystem.File.spaceAvailable</linktext></link></related-links></apiValue><apiValue id="flash.filesystem:StorageVolume:name:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
	     Имя тома.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     Имя тома. Если имени нет, это свойство имеет значение <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
	     
	     </apiDesc><example conref="examples\StorageVolume.name.1.as" class="- topic/example "> Следующий код отображает собственный путь для корневого каталога и имя файловой системы (если оно есть) каждого установленного тома хранения.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var volumes:Vector.&lt;StorageVolume> = new Vector.&lt;StorageVolume>;
volumes = StorageVolumeInfo.storageVolumeInfo.getStorageVolumes();
for (var i:int = 0; i &lt; volumes.length; i++)
{
    var name:String = new String();
    if (volumes[i].name)
    {
        name = "(" + volumes[i].name + ")";
    }
    trace(volumes[i].rootDirectory.nativePath, name);
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:StorageVolume:rootDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">rootDirectory</apiName><shortdesc class="- topic/shortdesc ">
	     Объект File, соответствующий корневому каталогу тома.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     Объект File, соответствующий корневому каталогу тома.
	     
	     </apiDesc><example conref="examples\StorageVolume.rootDirectory.1.as" class="- topic/example "> Следующий код отображает собственный путь для корневого каталога каждого установленного тома хранения:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var volumes:Vector.&lt;StorageVolume> = new Vector.&lt;StorageVolume>;
volumes = StorageVolumeInfo.storageVolumeInfo.getStorageVolumes();
for (var i:int = 0; i &lt; volumes.length; i++)
{
    trace(volumes[i].rootDirectory.nativePath);
}
</codeblock></example></apiValueDetail></apiValue></apiClassifier></apiPackage>