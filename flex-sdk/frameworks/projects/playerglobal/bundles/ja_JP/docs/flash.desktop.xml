<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="flash.desktop" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiPackage/apiPackage "><apiName class="- topic/title reference/title apiRef/apiName ">flash.desktop</apiName><apiDetail class="- topic/body reference/refbody apiRef/apiDetail "/><apiClassifier languages="" id="flash.desktop:NativeProcess" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NativeProcess</apiName><shortdesc class="- topic/shortdesc ">
 NativeProcess クラスは、コマンドライン統合機能および一般的な起動機能を提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 NativeProcess クラスは、コマンドライン統合機能および一般的な起動機能を提供します。AIR アプリケーションでは、NativeProcess クラスを使用して、ホストオペレーティングシステム上でネイティブプロセスを実行できます。AIR アプリケーションは、プロセスの標準入力（stdin）ストリームと標準出力（stdout）ストリームおよびプロセスの標準エラー（stderr）ストリームを監視します。
 
 <p class="- topic/p ">NativeProcess クラスとその機能は、ネイティブインストーラー（拡張デスクトッププロファイルアプリケーション）を使用してインストールされた AIR アプリケーションでのみ使用できます。デバッグ時に、ADL に対して <codeph class="+ topic/ph pr-d/codeph ">-profile extendedDesktop</codeph> 引数を渡すことにより、NativeProcess の機能を有効にできます。実行時に、ネイティブプロセスとの通信がサポートされているかどうかを判断するには、<codeph class="+ topic/ph pr-d/codeph ">NativeProcess.isSupported</codeph> プロパティを確認します。 </p>
 
 <p class="- topic/p ">AIR プロファイルのサポート：<i class="+ topic/ph hi-d/i "/>この機能は、ネイティブインストーラーを使用してデスクトップオペレーティングシステムにデプロイされたアプリケーションでサポートされます。この機能はモバイルデバイスまたはテレビ用 AIR デバイスではサポートされません。<codeph class="+ topic/ph pr-d/codeph ">NativeProcess.isSupported</codeph> プロパティを使用して、サポートされているかどうかを実行時にテストすることができます。複数のプロファイル間での API サポートについて詳しくは、<xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">AIR プロファイルのサポート</xref>を参照してください。</p>
 
 <p class="- topic/p ">ネイティブインストーラー（拡張デスクトッププロファイルアプリケーション）を使用してインストールされた AIR アプリケーションでは、<codeph class="+ topic/ph pr-d/codeph ">File.openWithDefaultApplication</codeph> を使用してアプリケーションを開くこともできます。ただし、NativeProcess クラスを使用すれば、標準入力、標準出力および標準エラーのパイプに直接アクセスできます。</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b><codeph class="+ topic/ph pr-d/codeph ">extendedTV</codeph> プロファイルを使用するテレビ用 AIR アプリケーションでは、ActionScript のネイティブ拡張を使用してネイティブプロセスを実行できます。</p> 
 
 </apiDesc><example conref="examples\NativeProcessExample.as" class="- topic/example "> 次の例では、マシン上でネイティブプロセスとの通信がサポートされているかどうかを確認します。サポートされている場合、アプリケーションはネイティブプロセス用のイベントリスナーを設定し、メインアプリケーションディレクトリ内の test.py ファイルを起動します。:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.display.Sprite;
    import flash.desktop.NativeProcess;
    import flash.desktop.NativeProcessStartupInfo;
    import flash.events.Event;
    import flash.events.ProgressEvent;
    import flash.events.IOErrorEvent;
    import flash.events.NativeProcessExitEvent;
    import flash.filesystem.File;
    
    public class NativeProcessExample extends Sprite
    {
        public var process:NativeProcess;

        public function NativeProcessExample()
        {
            if(NativeProcess.isSupported)
            {
                setupAndLaunch();
            }
            else
            {
                trace("NativeProcess not supported.");
            }
        }
        
        public function setupAndLaunch():void
        {     
            var nativeProcessStartupInfo:NativeProcessStartupInfo = new NativeProcessStartupInfo();
            var file:File = File.applicationDirectory.resolvePath("test.py");
            nativeProcessStartupInfo.executable = file;

            var processArgs:Vector.&lt;String> = new Vector.&lt;String>();
            processArgs[0] = "foo";
            nativeProcessStartupInfo.arguments = processArgs;

            process = new NativeProcess();
            process.start(nativeProcessStartupInfo);
            process.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, onOutputData);
            process.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, onErrorData);
            process.addEventListener(NativeProcessExitEvent.EXIT, onExit);
            process.addEventListener(IOErrorEvent.STANDARD_OUTPUT_IO_ERROR, onIOError);
            process.addEventListener(IOErrorEvent.STANDARD_ERROR_IO_ERROR, onIOError);
        }

        public function onOutputData(event:ProgressEvent):void
        {
            trace("Got: ", process.standardOutput.readUTFBytes(process.standardOutput.bytesAvailable)); 
        }
        
        public function onErrorData(event:ProgressEvent):void
        {
            trace("ERROR -", process.standardError.readUTFBytes(process.standardError.bytesAvailable)); 
        }
        
        public function onExit(event:NativeProcessExitEvent):void
        {
            trace("Process exited with ", event.exitCode);
        }
        
        public function onIOError(event:IOErrorEvent):void
        {
             trace(event.toString());
        }
    }
}
</codeblock> 次の Python スクリプトをアプリケーションディレクトリ内の test.py ファイルに追加します（Python がインストールされていることを確認してください）。
 
 <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph "> #!/usr/bin/python
 # ------------------------------------------------------------------------------
 # Sample Python script
 # ------------------------------------------------------------------------------
 
 import sys
 
 for word in sys.argv: #echo the command line arguments
     print word
 
 print "HI FROM PYTHON"
 print "Enter user name" 
 line = sys.stdin.readline()
 
 sys.stdout.write("hello," + line)</codeph></pre>
</example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.external.xml#ExtensionContext" class="- topic/link "><linktext class="- topic/linktext ">flash.external.ExtensionContext</linktext></link></related-links><adobeApiEvent id="flash.desktop:NativeProcess_flash.events.NativeProcessExitEvent_exit" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">exit</apiName><shortdesc class="- topic/shortdesc ">
 ネイティブプロセスが存在していることを通知します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.NativeProcessExitEvent</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.NativeProcessExitEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ネイティブプロセスが存在していることを通知します。<codeph class="+ topic/ph pr-d/codeph ">exitCode</codeph> プロパティには、プロセスの終了時にプロセスからホストオペレーティングシステムに返される値が含まれています。AIR アプリケーションが NativeProcess オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">exit()</codeph> メソッドを呼び出してプロセスを終了すると、<codeph class="+ topic/ph pr-d/codeph ">exitCode</codeph> プロパティは NaN に設定されます。
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.desktop:NativeProcess_flash.events.IOErrorEvent_standardInputIoError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">standardInputIoError</apiName><shortdesc class="- topic/shortdesc ">
 標準入力（stdin）ストリームへの書き込みが失敗したことを通知します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 標準入力（stdin）ストリームへの書き込みが失敗したことを通知します。NativeProcess オブジェクトは、<codeph class="+ topic/ph pr-d/codeph ">closeInput()</codeph> メソッドが失敗したとき、またはランタイムがネイティブプロセスの標準入力パイプにデータを書き込めない場合に、このイベントを送出します。
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.desktop:NativeProcess_flash.events.IOErrorEvent_standardOutputIoError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">standardOutputIoError</apiName><shortdesc class="- topic/shortdesc ">
 stdout ストリームからの読み取りが失敗したことを通知します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 stdout ストリームからの読み取りが失敗したことを通知します。NativeProcess オブジェクトは、ランタイムがネイティブプロセスの標準出力パイプからデータを読み取れない場合に、このイベントを送出することがあります。
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.desktop:NativeProcess_flash.events.IOErrorEvent_standardErrorIoError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">standardErrorIoError</apiName><shortdesc class="- topic/shortdesc ">
 標準エラー（stderror）ストリームからの読み取りが失敗したことを通知します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 標準エラー（stderror）ストリームからの読み取りが失敗したことを通知します。NativeProcess オブジェクトは、ランタイムがネイティブプロセスの標準エラーパイプからデータを読み取れない場合に、このイベントを送出することがあります。
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.desktop:NativeProcess_flash.events.Event_standardInputClose" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">standardInputClose</apiName><shortdesc class="- topic/shortdesc ">
 NativeProcess オブジェクトが closeInput() メソッドを呼び出して、入力ストリームを閉じたことを通知します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 NativeProcess オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">closeInput()</codeph> メソッドを呼び出して、入力ストリームを閉じたことを通知します。実際のネイティブプロセスによって入力ストリームが閉じられた場合には、NativeProcess オブジェクトはこのイベントを送出しません。 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.desktop:NativeProcess_flash.events.ProgressEvent_standardInputProgress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">standardInputProgress</apiName><shortdesc class="- topic/shortdesc ">
 NativeProcess が、子プロセスに対する入力ストリームにデータを書き込んだことを通知します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ProgressEvent</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 NativeProcess が、子プロセスに対する入力ストリームにデータを書き込んだことを通知します。NativeProcess オブジェクトは、データがストリームに書き込まれたときに、このイベントを送出します。このイベントは、子プロセスにデータが読み取られたかどうかを示すものではありません。<i class="+ topic/ph hi-d/i "/>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.desktop:NativeProcess_flash.events.Event_standardErrorClose" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">standardErrorClose</apiName><shortdesc class="- topic/shortdesc ">
 NativeProcess がエラーストリームを閉じたことを通知します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 NativeProcess がエラーストリームを閉じたことを通知します。 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.desktop:NativeProcess_flash.events.ProgressEvent_standardErrorData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">standardErrorData</apiName><shortdesc class="- topic/shortdesc ">
 ネイティブプロセスで読み取り可能なデータが標準エラー（stderror）ストリームにあることを通知します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ProgressEvent</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ネイティブプロセスで読み取り可能なデータが標準エラー（stderror）ストリームにあることを通知します。NativeProcess オブジェクトは、子プロセスが標準エラーストリームをフラッシュしたとき、またはプロセス間通信で使用している内部バッファーが一杯になったときに、このイベントを送出します。この内部バッファーのサイズに依存するようなコードは書かないようにしてください。内部バッファーのサイズはオペレーティングシステムによって異なります。
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.desktop:NativeProcess_flash.events.Event_standardOutputClose" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">standardOutputClose</apiName><shortdesc class="- topic/shortdesc ">
 NativeProcess オブジェクトが出力ストリームを閉じたことを通知します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 NativeProcess オブジェクトが出力ストリームを閉じたことを通知します。 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.desktop:NativeProcess_flash.events.ProgressEvent_standardOutputData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">standardOutputData</apiName><shortdesc class="- topic/shortdesc ">
 ネイティブプロセスで読み取り可能なデータが出力ストリームにあることを通知します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ProgressEvent</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ネイティブプロセスで読み取り可能なデータが出力ストリームにあることを通知します。NativeProcess オブジェクトは、子プロセスが stdout ストリームをフラッシュしたとき、またはプロセス間通信で使用している内部バッファーが一杯になったときに、このイベントを送出します。この内部バッファーのサイズに依存するようなコードは書かないようにしてください。内部バッファーのサイズはオペレーティングシステムによって異なります。
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.desktop:NativeProcess:NativeProcess" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">NativeProcess</apiName><shortdesc class="- topic/shortdesc ">
	初期化されていない NativeProcess オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	初期化されていない NativeProcess オブジェクトを作成します。<codeph class="+ topic/ph pr-d/codeph ">start()</codeph> メソッドを呼び出して、プロセスを開始します。
	
	</apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeProcess/start()" class="- topic/link "><linktext class="- topic/linktext ">start()</linktext></link></related-links></apiConstructor><apiOperation id="flash.desktop:NativeProcess:closeInput" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">closeInput</apiName><shortdesc class="- topic/shortdesc ">
	このプロセスの入力ストリームを閉じます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	このプロセスの入力ストリームを閉じます。一部のコマンドラインアプリケーションには、入力ストリームが閉じてからいくつかの処理を開始するものがあります。一旦閉じられたストリームを再開するには、プロセスを終了してからもう一度開始する必要があります。 
	
	</apiDesc></apiOperationDetail><adobeApiEvent id="flash.desktop:NativeProcess:closeInput_ioErrorStandardInput" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioErrorStandardInput</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">プロセスへの入力ストリームを閉じるのに問題があります。
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">プロセスへの入力ストリームを閉じるのに問題があります。
	
	</shortdesc></adobeApiEvent><adobeApiEvent id="flash.desktop:NativeProcess:closeInput_standardInputClose" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">standardInputClose</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">入力ストリームは閉じています。 
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">入力ストリームは閉じています。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.desktop:NativeProcess:exit" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">exit</apiName><shortdesc class="- topic/shortdesc ">
	ネイティブプロセスの終了を試みます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">force</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">アプリケーションが必要に応じてネイティブプロセスを強制終了するかどうかを示します。
	
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">force</codeph> パラメーターが <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定されている場合、このメソッドは実行中の処理が完了してからネイティブプロセスを終了しようとします。このメソッドからネイティブプロセスの終了が要求されます。この要求はネイティブプロセスによって無視されることがあるので、このメソッドが実際にネイティブプロセスを終了できるかどうかは保証されません。NativeProcess オブジェクトは、ネイティブプロセスが終了した場合にのみ、<codeph class="+ topic/ph pr-d/codeph ">NativeProcessExitEvent</codeph> イベントを送出します。 </p>
	
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">force</codeph> パラメーターが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定されている場合、このメソッドはネイティブプロセスを強制終了しようとします。<codeph class="+ topic/ph pr-d/codeph ">force</codeph> パラメーターを <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定してこのメソッドを呼び出す方法は、最後の手段として使用してください。<codeph class="+ topic/ph pr-d/codeph ">force</codeph> パラメーターを<codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定してこのメソッドを呼び出すと、ネイティブプロセスに関連付けられているシステムリソースの状態に悪影響を及ぼす可能性があります。例えば、開いているファイルが不安定な状態になる可能性があります。ランタイムは、最大限の処理を行い、ネイティブプロセスを強制終了しようとします。ただし、ネイティブプロセスを終了できるどうかは保証されません。NativeProcess オブジェクトは、ネイティブプロセスが終了した場合にのみ、<codeph class="+ topic/ph pr-d/codeph ">NativeProcessExitEvent</codeph> イベントを送出します。</p>  
	
	<p class="- topic/p ">NativeProcess が正常に終了すると、<codeph class="+ topic/ph pr-d/codeph ">NativeProcessExitEvent</codeph> イベントが送出されます。</p>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	ネイティブプロセスの終了を試みます。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.desktop:NativeProcess:start" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">start</apiName><shortdesc class="- topic/shortdesc ">
	指定の起動情報によって特定されているネイティブプロセスを起動します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">NativeProcess が現在実行中の場合。
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">NativeProcessStartupInfo の nativePath プロパティが存在しない場合。
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">NativeProcess が正常に起動しなかった場合。
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">info</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.desktop:NativeProcessStartupInfo</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">NativeProcessStartupInfo では、ネイティブプロセスの起動方法を定義します。 
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	指定の起動情報によって特定されているネイティブプロセスを起動します。プロセスが開始すると、すべての入出力ストリームが開きます。オペレーティングシステムに対して、指定されたプロセスの開始が要求された直後に、このメソッドが返されます。プロセスが現在実行中の場合、NativeProcess オブジェクトは <codeph class="+ topic/ph pr-d/codeph ">IllegalOperationError</codeph> 例外をスローします。NativeProcess オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">running</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返す場合、プロセスは実行中です。オペレーティングシステムがプロセスを開始できない場合は、<codeph class="+ topic/ph pr-d/codeph ">Error</codeph> がスローされます。 
	
	<p class="- topic/p ">
	基礎となるオペレーティングシステム上の単一プロセスに対応する NativeProcess インスタンスです。同じオペレーティングシステムプロセスの複数のインスタンスを同時に実行する場合は、子プロセスごとに NativeProcess インスタンスを作成します。</p>
	
	<p class="- topic/p ">
	NativeProcess オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">running</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返す場合は、常にこのメソッドを呼び出すことができます。つまり、NativeProcess オブジェクトは再利用できます。言い換えれば、NativeProcess インスタンスを作成して、<codeph class="+ topic/ph pr-d/codeph ">start()</codeph> メソッドを呼び出し、<codeph class="+ topic/ph pr-d/codeph ">exit</codeph> イベントを待ってから、<codeph class="+ topic/ph pr-d/codeph ">start()</codeph> を再度呼び出すことができます。後続の <codeph class="+ topic/ph pr-d/codeph ">start()</codeph> メソッドの呼び出しでは、異なる NativeProcessStartupInfo オブジェクトを <codeph class="+ topic/ph pr-d/codeph ">info</codeph> パラメーター値として使用します。</p> 
	
	<p class="- topic/p ">NativeProcess クラスとその機能は、ネイティブインストーラーを使用してインストールされた AIR アプリケーションでのみ使用できます。デバッグ時に、ADL に対して <codeph class="+ topic/ph pr-d/codeph ">-profile extendedDesktop</codeph> 引数を渡すことにより、NativeProcess の機能を有効にできます。ネイティブプロセスとの通信がサポートされているかどうかを確認するには、<codeph class="+ topic/ph pr-d/codeph ">NativeProcess.isSupported</codeph> プロパティを調べます。</p>
	
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">セキュリティに関する重要な考慮事項：</b></p>
	
	<p class="- topic/p ">ネイティブプロセス API は、ユーザーのシステム上で任意の実行可能ファイルを実行できます。コマンドの構築時および実行時には、十分に注意を払ってください。実行されるコマンドが一部でも外部ソースから発行されている場合には、そのコマンドを実行しても安全であるかどうかを慎重に検証してください。同様に、AIR アプリケーションは、実行中のプロセスに渡されるデータを検証する必要があります。</p>
	 
	<p class="- topic/p ">ただし、入力を検証することは難しい場合があります。このような問題を回避するには、特定の API を含むネイティブアプリケーション（Windows 上の EXE ファイルなど）を作成することが最適です。これらの API は、AIR アプリケーションによって明示的に要求される場合にのみこれらのコマンドを処理します。例えば、ネイティブアプリケーションは、標準入力ストリームを通じて、限定された命令セットのみを受け付ける場合があります。</p>
	 
	<p class="- topic/p ">Windows 上の AIR は、ユーザーが .bat ファイルを直接実行することを許可しません。Windows .bat ファイルは、コマンドインタープリターアプリケーション（cmd.exe）によって実行されます。.bat ファイルを呼び出すとき、このコマンドアプリケーションは、コマンドに渡される引数を、起動する追加のアプリケーションとして解釈することができます。引数のストリングに悪質な意図で不要な文字が挿入されている場合、有害または安全ではないアプリケーションを cmd.exe が実行するおそれがあります。例えば、妥当なデータ検証が行われない場合、AIR アプリケーションが <codeph class="+ topic/ph pr-d/codeph ">myBat.bat myArguments c:/evil.exe</codeph> を呼び出す可能性があります。このコマンドアプリケーションは、バッチファイルを実行するときに、一緒に evil.exe アプリケーションを起動することになります。</p>
	
	<p class="- topic/p ">.bat ファイルで <codeph class="+ topic/ph pr-d/codeph ">start()</codeph> メソッドを呼び出すと、NativeProcess オブジェクトは例外をスローします。Error オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">message</codeph> プロパティには、ストリング「Error #3219: The NativeProcess could not be started」が含まれます。</p>
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeProcessStartupInfo" class="- topic/link "><linktext class="- topic/linktext ">NativeProcessStartupInfo</linktext></link></related-links></apiOperation><apiValue id="flash.desktop:NativeProcess:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
	実行中のネイティブプロセスが現在のプロファイルでサポートされているかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	実行中のネイティブプロセスが現在のプロファイルでサポートされているかどうかを示します。extendedDesktop プロファイルで実行している場合のみ、このプロパティは <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返します。また、AIR ファイルとしてインストールされているアプリケーションの場合、<codeph class="+ topic/ph pr-d/codeph ">NativeProcess.isSupported</codeph> は常に <codeph class="+ topic/ph pr-d/codeph ">false</codeph> です。NativeProcess を使用するには、ADT <codeph class="+ topic/ph pr-d/codeph ">-target native</codeph> フラグを使用して API アプリケーションをパッケージ化する必要があります。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:NativeProcess:running:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">running</apiName><shortdesc class="- topic/shortdesc ">
	このネイティブプロセスが現在実行中かどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	このネイティブプロセスが現在実行中かどうかを示します。<codeph class="+ topic/ph pr-d/codeph ">start()</codeph> メソッドを呼び出し、NativeProcess オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">exit</codeph> イベントをまだ送信していない場合、プロセスは実行中です。基礎となるオペレーティングシステム上の単一プロセスに対応する NativeProcess インスタンスです。基礎となるオペレーティングシステムプロセスが実行中の場合（ネイティブプロセスが起動中で、プロセスからオペレーティングシステムに終了コードが返されるまで）、このプロパティは <codeph class="+ topic/ph pr-d/codeph ">true</codeph> のままです。 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:NativeProcess:standardError:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">standardError</apiName><shortdesc class="- topic/shortdesc ">
	このネイティブプロセスから標準エラー出力へのアクセスを提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.utils:IDataInput</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データが存在しない状態で、読み取り操作が試行された場合。
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	このネイティブプロセスから標準エラー出力へのアクセスを提供します。このパイプ上でデータが使用できるようになると、NativeProcess オブジェクトは ProgressEvent オブジェクトを送出します。使用可能なデータが存在しない場合、このストリームからデータを読み取ろうとすると、NativeProcess オブジェクトは EOFError 例外をスローします。 
	
	<p class="- topic/p ">子プロセスの出力ストリームであっても、現在のプロセスから見れば入力データになるので、タイプは IDataInput です。</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#ProgressEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.ProgressEvent</linktext></link><link href="flash.utils.xml#IDataInput" class="- topic/link "><linktext class="- topic/linktext ">flash.utils.IDataInput</linktext></link></related-links></apiValue><apiValue id="flash.desktop:NativeProcess:standardInput:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">standardInput</apiName><shortdesc class="- topic/shortdesc ">
	このネイティブプロセスの標準入力に対するアクセスを提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.utils:IDataOutput</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">この値に書き込んで <codeph class="+ topic/ph pr-d/codeph ">running</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返した場合、または閉じている入力ストリームにデータを書き込もうとした場合。
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	このネイティブプロセスの標準入力に対するアクセスを提供します。このパイプを使用して、このプロセスにデータを送信します。<codeph class="+ topic/ph pr-d/codeph ">input</codeph> プロパティにデータが書き込まれるたびに、そのデータは直ちにネイティブプロセスの入力パイプに書き込まれます。 
	
	<p class="- topic/p ">子プロセスの入力ストリームであっても、現在のプロセスから見れば出力データになるので、タイプは IDataOutput です。</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeProcess/closeInput()" class="- topic/link "><linktext class="- topic/linktext ">closeInput()</linktext></link><link href="flash.utils.xml#IDataOutput" class="- topic/link "><linktext class="- topic/linktext ">IDataOutput</linktext></link></related-links></apiValue><apiValue id="flash.desktop:NativeProcess:standardOutput:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">standardOutput</apiName><shortdesc class="- topic/shortdesc ">
	このネイティブプロセスの標準出力パイプに対するアクセスを提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.utils:IDataInput</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データが存在しない状態で、読み取り操作が試行された場合。
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	このネイティブプロセスの標準出力パイプに対するアクセスを提供します。このパイプを使用して、ネイティブプロセスの標準出力からデータを読み取ります。このパイプ上にデータが存在すると、NativeProcess オブジェクトは ProgressEvent を送出します。使用可能なデータが存在しない場合、このストリームからデータを読み取ろうとすると、NativeProcess オブジェクトは EOFError をスローします。 
	
	<p class="- topic/p ">子プロセスの出力ストリームであっても、現在のプロセスから見れば入力データになるので、タイプは IDataInput です。</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.utils.xml#IDataInput" class="- topic/link "><linktext class="- topic/linktext ">flash.utils.IDataInput</linktext></link><link href="flash.events.xml#ProgressEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.ProgressEvent</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.desktop:InteractiveIcon" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">InteractiveIcon</apiName><shortdesc class="- topic/shortdesc ">
	 InteractiveIcon クラスは、アプリケーションに関連付けられたオペレーティングシステムアイコンの基本クラスです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.desktop:Icon</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 InteractiveIcon クラスは、アプリケーションに関連付けられたオペレーティングシステムアイコンの基本クラスです。 
	 
	 <p class="- topic/p ">アプリケーションアイコンのインスタンスを取得するには、NativeApplication オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">icon</codeph> プロパティを使用します。アイコンのタイプは、InteractiveIcon のサブクラスである DockIcon（Mac OS X<sup class="+ topic/ph hi-d/sup ">®</sup>）または SystemTrayIcon（Windows<sup class="+ topic/ph hi-d/sup ">®</sup>、Linux）のいずれかです。</p>
	 
	 <p class="- topic/p ">InteractiveIcon クラスを直接インスタンス化することはできません。<codeph class="+ topic/ph pr-d/codeph ">new InteractiveIcon()</codeph> コンストラクターを呼び出すと、ArgumentError 例外がスローされます。</p>
	 
	 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/icon" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication.icon</linktext></link><link href="flash.desktop.xml#NativeApplication/supportsDockIcon" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication.supportsDockIcon</linktext></link><link href="flash.desktop.xml#NativeApplication/supportsSystemTrayIcon" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication.supportsSystemTrayIcon</linktext></link></related-links><apiValue id="flash.desktop:InteractiveIcon:bitmaps:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bitmaps</apiName><shortdesc class="- topic/shortdesc ">
		  
	 様々なサイズの BitmapData オブジェクトの配列としてのアイコンイメージです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		  
	 様々なサイズの BitmapData オブジェクトの配列としてのアイコンイメージです。
	   
	 <p class="- topic/p ">指定されたオペレーティングシステムのコンテキストでアイコンを表示する場合、表示するサイズに最も近い配列のビットマップが使用されます（必要に応じて伸縮）。一般的なサイズには、16x16、32x32、48x48 および 128x128 があります （512x512 ピクセルのアイコンは、近い将来にいくつかのオペレーティングシステムアイコンで使用される可能性があります）。</p>
	 
	 <p class="- topic/p ">一部のコンテキストでは、<codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> プロパティに何も割り当てられていない場合、オペレーティングシステムがデフォルトのシステムアイコンを使用することがあります。他のコンテキストでは、アイコンは表示されません。</p>
	 
	 <p class="- topic/p ">アイコンの外観を設定または変更するには、BitmapData オブジェクトの配列を <codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> プロパティに割り当てます。</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 icon.bitmaps = new Array(icon16x16.bitmapData, icon128x128.bitmapData);
	 </codeblock>
	  
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> 配列を直接変更しても効果はありません。</p>
	 
	 <p class="- topic/p ">アイコンイメージを消去するには、<codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> プロパティに空の配列を割り当てます。</p>
	 
	 <p class="- topic/p ">
	 <b class="+ topic/ph hi-d/b ">注意：</b>アイコン用のイメージファイルを読み込む場合、通常、最も適切なアルファブレンドが提供されるのは PNG ファイル形式です。GIF 形式は透明度のオンまたはオフのみをサポートし、ブレンドは行いません。JPG 形式は、透明度をまったくサポートしません。  
	 </p>
	  
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:InteractiveIcon:height:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">height</apiName><shortdesc class="- topic/shortdesc ">
		 アイコンの現在の表示の高さです（ピクセル単位）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 アイコンの現在の表示の高さです（ピクセル単位）。
		 
		 <p class="- topic/p ">一部のアイコンのコンテキストでは、動的なサイズ調整がサポートされます。<codeph class="+ topic/ph pr-d/codeph ">height</codeph> プロパティは、現在のコンテキストの <codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> 配列から選択されたアイコンの高さを示します。オペレーティングシステムによってアイコンが伸縮されている場合は、実際の表示の高さはこれとは異なります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:InteractiveIcon:width:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">width</apiName><shortdesc class="- topic/shortdesc ">
		 アイコンの現在の表示幅です（ピクセル単位）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 アイコンの現在の表示幅です（ピクセル単位）。 
		 
		 <p class="- topic/p ">一部のアイコンのコンテキストでは、動的なサイズ調整がサポートされます。<codeph class="+ topic/ph pr-d/codeph ">width</codeph> プロパティは、現在のコンテキストの <codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> 配列から選択されたアイコンの幅を示します。オペレーティングシステムによってアイコンが伸縮されている場合は、実際の表示幅はこれとは異なります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.desktop:InvokeEventReason" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">InvokeEventReason</apiName><shortdesc class="- topic/shortdesc ">
	 InvokeEventReason クラスには、InvokeEvent オブジェクトの reason プロパティで返される値が列挙されています。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.5.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">オペレーティングシステム経由でアプリケーションを起動する方法を表す定数を定義します。
	 
	 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 InvokeEventReason クラスには、<codeph class="+ topic/ph pr-d/codeph ">InvokeEvent</codeph> オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">reason</codeph> プロパティで返される値が列挙されています。
	 
	 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.events.xml#InvokeEvent/reason" class="- topic/link "><linktext class="- topic/linktext ">flash.events.InvokeEvent.reason</linktext></link></related-links><apiValue id="flash.desktop:InvokeEventReason:LOGIN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LOGIN</apiName><shortdesc class="- topic/shortdesc ">
			ユーザーがログインしたことが理由で InvokeEvent イベントが発生したことを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.5.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">login</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
			ユーザーがログインしたことが理由で InvokeEvent イベントが発生したことを示します。
			
			</apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:InvokeEventReason:STANDARD" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">STANDARD</apiName><shortdesc class="- topic/shortdesc ">
			ログイン以外の理由で InvokeEvent が発生したことを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.5.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">standard</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
			ログイン以外の理由で InvokeEvent が発生したことを示します。
			
			</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.desktop:NativeDragActions" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NativeDragActions</apiName><shortdesc class="- topic/shortdesc ">
NativeDragActions クラスは、ドラッグ &amp; ドロップアクションの名前のストリング定数を定義します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
NativeDragActions クラスは、ドラッグ &amp; ドロップアクションの名前のストリング定数を定義します。
 
 <p class="- topic/p ">NativeDragActions 定数は、NativeDragManager クラスおよび NativeDragEvent クラスの <codeph class="+ topic/ph pr-d/codeph ">dropAction</codeph> プロパティの値として使用されます。</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeDragManager" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeDragManager</linktext></link><link href="flash.events.xml#NativeDragEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NativeDragEvent</linktext></link></related-links><apiValue id="flash.desktop:NativeDragActions:COPY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">COPY</apiName><shortdesc class="- topic/shortdesc ">
	copy アクションに使用するストリングを定義します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">copy</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	copy アクションに使用するストリングを定義します。
	
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:NativeDragActions:LINK" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LINK</apiName><shortdesc class="- topic/shortdesc ">
	link アクションに使用するストリングを定義します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">link</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	link アクションに使用するストリングを定義します。
	
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:NativeDragActions:MOVE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MOVE</apiName><shortdesc class="- topic/shortdesc ">
	 move アクションに使用するストリングを定義します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">move</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 move アクションに使用するストリングを定義します。
      
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:NativeDragActions:NONE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NONE</apiName><shortdesc class="- topic/shortdesc ">
	アクションが指定されていないときに使用するストリングを定義します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">none</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	アクションが指定されていないときに使用するストリングを定義します。
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">nativeDragComplete</codeph> イベントでは、<codeph class="+ topic/ph pr-d/codeph ">none</codeph> アクションはドラッグ＆ドロップ操作がユーザーによって中止されたことを示します。</p>
	 
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.desktop:ClipboardFormats" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ClipboardFormats</apiName><shortdesc class="- topic/shortdesc ">
ClipboardFormats クラスは、Clipboard クラスで使用する標準データ形式の名前の定数を定義します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Clipboard, ClipboardFormats and ClipboardTransferMode were all added to AIR 1.0. These are also being added, with some exceptions listed in this file, to FP10.
</internal></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
ClipboardFormats クラスは、Clipboard クラスで使用する標準データ形式の名前の定数を定義します。Flash Player 10 は、TEXT_FORMAT、RICH_TEXT_FORMAT および HTML_FORMAT のみをサポートします。

</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#Clipboard" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.Clipboard</linktext></link></related-links><apiValue id="flash.desktop:ClipboardFormats:BITMAP_FORMAT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">BITMAP_FORMAT</apiName><shortdesc class="- topic/shortdesc ">
	イメージデータです（AIR のみ）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Not supported in FP10.
	</internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">air:bitmap</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	イメージデータです（AIR のみ）。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:ClipboardFormats:FILE_LIST_FORMAT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">FILE_LIST_FORMAT</apiName><shortdesc class="- topic/shortdesc ">
	ファイルの配列です（AIR のみ）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Not supported in FP10.
	</internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">air:file list</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	ファイルの配列です（AIR のみ）。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:ClipboardFormats:FILE_PROMISE_LIST_FORMAT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">FILE_PROMISE_LIST_FORMAT</apiName><shortdesc class="- topic/shortdesc ">
	ファイルプロミスのリストです（AIR のみ）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Not supported in FP10.
	</internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">air:file promise list</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	ファイルプロミスのリストです（AIR のみ）。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:ClipboardFormats:HTML_FORMAT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">HTML_FORMAT</apiName><shortdesc class="- topic/shortdesc ">
	HTML データです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">air:html</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	HTML データです。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:ClipboardFormats:RICH_TEXT_FORMAT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RICH_TEXT_FORMAT</apiName><shortdesc class="- topic/shortdesc ">
	リッチテキストフォーマットデータです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">air:rtf</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	リッチテキストフォーマットデータです。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:ClipboardFormats:TEXT_FORMAT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">TEXT_FORMAT</apiName><shortdesc class="- topic/shortdesc ">
	ストリングデータです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">air:text</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	ストリングデータです。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:ClipboardFormats:URL_FORMAT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">URL_FORMAT</apiName><shortdesc class="- topic/shortdesc ">
	URL ストリングです（AIR のみ）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Not supported in FP10.
	</internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">air:url</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	URL ストリングです（AIR のみ）。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.desktop:NativeApplication" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NativeApplication</apiName><shortdesc class="- topic/shortdesc ">
	 NativeApplication クラスは、この AIR アプリケーションを表します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 NativeApplication クラスは、この AIR アプリケーションを表します。
	 
	 <p class="- topic/p ">
	 NativeApplication クラスは、アプリケーション情報とアプリケーション全体の関数を提供し、アプリケーションレベルのイベントを送出します。
	 </p>
	 <p class="- topic/p ">
	 NativeApplication オブジェクトは、起動時に自動的に作成されるシングルトンオブジェクトです。静的な <codeph class="+ topic/ph pr-d/codeph ">NativeApplication.nativeApplication</codeph> プロパティを持つアプリケーションの NativeApplication インスタンスを取得します。
	 </p>
	 
	 </apiDesc></apiClassifierDetail><adobeApiEvent id="flash.desktop:NativeApplication_flash.events.KeyboardEvent.KEY_UP_keyUp" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">keyUp</apiName><shortdesc class="- topic/shortdesc ">
	 ユーザーがキーを離したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.KeyboardEvent.KEY_UP</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.KeyboardEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ユーザーがキーを離したときに送出されます。NativeApplication インスタンスは、キーボードアクセラレーターをサポートするためにこのイベントを提供します。このキーボードイベントは最初に NativeApplication に送出されます。このイベントをキャンセルしても、他のオブジェクト（NativeWindow メニューアクセラレーターなど）には何の影響もありません。このイベントは、<codeph class="+ topic/ph pr-d/codeph ">keyDown</codeph> イベントの後に発生します。
	 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/keyUp" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.keyUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.desktop:NativeApplication_flash.events.KeyboardEvent.KEY_DOWN_keyDown" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">keyDown</apiName><shortdesc class="- topic/shortdesc ">
	 ユーザーがキーを押したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.KeyboardEvent.KEY_DOWN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.KeyboardEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ユーザーがキーを押したときに送出されます。NativeApplication インスタンスは、キーボードアクセラレーターをサポートするためにこのイベントを提供します。このキーボードイベントは最初に NativeApplication に送出されます。このイベントをキャンセルすると、NativeWindow メニューアクセラレーターもキャンセルされます。このイベントは、<codeph class="+ topic/ph pr-d/codeph ">keyUp</codeph> イベントの前に発生します。
	 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/keyDown" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.keyDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.desktop:NativeApplication_flash.events.Event.USER_PRESENT_userPresent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">userPresent</apiName><shortdesc class="- topic/shortdesc ">
	 アイドル期間の後にオペレーティングシステムがマウスまたはキーボードの操作を検出すると送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.USER_PRESENT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 アイドル期間の後にオペレーティングシステムがマウスまたはキーボードの操作を検出すると送出されます。
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このイベントはモバイルデバイスまたはテレビ用 AIR デバイスでは送出されません。</p>
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">idleThreshold</codeph> プロパティを使用すると、アイドル状態にあると見なす時間の長さを設定できます。ユーザーがアイドル状態になってからの経過時間は、<codeph class="+ topic/ph pr-d/codeph ">timeSinceLastUserInput</codeph> プロパティで判断できます。</p>
	 
	 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/idleThreshold" class="- topic/link "><linktext class="- topic/linktext ">idleThreshold</linktext></link><link href="flash.desktop.xml#NativeApplication/timeSinceLastUserInput" class="- topic/link "><linktext class="- topic/linktext ">timeSinceLastUserInput</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.desktop:NativeApplication_flash.events.Event.USER_IDLE_userIdle" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">userIdle</apiName><shortdesc class="- topic/shortdesc ">
	 ユーザーがアイドル状態になっているときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.USER_IDLE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ユーザーがアイドル状態になっているときに送出されます。
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">idleThreshold</codeph> プロパティを使用してこのイベントが送出される前に、ユーザーをアイドル状態にする必要がある期間を指定します。ユーザーがアイドル状態になってからの経過時間は、<codeph class="+ topic/ph pr-d/codeph ">timeSinceLastUserInput</codeph> プロパティで判断できます。</p>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このイベントはモバイルデバイスまたはテレビ用 AIR デバイスでは送出されません。</p>
	 
	 
	 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/idleThreshold" class="- topic/link "><linktext class="- topic/linktext ">idleThreshold</linktext></link><link href="flash.desktop.xml#NativeApplication/timeSinceLastUserInput" class="- topic/link "><linktext class="- topic/linktext ">timeSinceLastUserInput</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.desktop:NativeApplication_flash.events.Event.NETWORK_CHANGE_networkChange" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">networkChange</apiName><shortdesc class="- topic/shortdesc ">
	 新しいネットワーク接続が使用可能になるか、既存のネットワーク接続が失われると送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.NETWORK_CHANGE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 新しいネットワーク接続が使用可能になるか、既存のネットワーク接続が失われると送出されます。 
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">networkChange</codeph> イベントは、ホストコンピューターがオンラインまたはオフラインになったことを示しているとは限りません。接続がある種類から別の種類に移行したことを示している場合もあります。 アプリケーションはこのイベントを使用して、リモートリソースの可用性を監視するタスクを最適化できます。<codeph class="+ topic/ph pr-d/codeph ">networkChange</codeph> イベントが送出されたときに、リモートリソースの可用性を確認することをお勧めします。
	 </p> 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b></p> 
	 <ul class="- topic/ul "><li class="- topic/li ">ネットワークに変更が発生してからこのイベントが送出されるまでに少し時間がかかることがあります。</li><li class="- topic/li ">Android では、ネットワーク接続に変化があるたびに、NativeApplication オブジェクトから複数の networkChange イベントが送出されます。</li></ul>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.desktop:NativeApplication_flash.events.Event.EXITING_exiting" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">exiting</apiName><shortdesc class="- topic/shortdesc ">
	 アプリケーションの終了シーケンスが開始されると送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.EXITING</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 アプリケーションの終了シーケンスが開始されると送出されます。 
	 
	 <p class="- topic/p ">オペレーティングシステムによってアプリケーションの終了が開始されると、<codeph class="+ topic/ph pr-d/codeph ">exiting</codeph> イベントが送出されます。例えば、<codeph class="+ topic/ph pr-d/codeph ">Command+Q</codeph> キーが押された場合や（Mac OS X）、NativeApplication オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">autoExit</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定されているとき最後のアプリケーションウィンドウが閉じられた場合などがこれに該当します。このイベントをキャンセルすると、アプリケーションは終了しません。</p>
	 
	 <p class="- topic/p ">テレビ用 AIR デバイスでは、<codeph class="+ topic/ph pr-d/codeph ">exiting</codeph> イベントが送出されることはありません。 
	 </p>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>NativeApplication の <codeph class="+ topic/ph pr-d/codeph ">exit()</codeph> メソッドを呼び出しても、<codeph class="+ topic/ph pr-d/codeph ">exiting</codeph> イベントは送出されません。間もなく終了することをコンポーネントに警告するには、<codeph class="+ topic/ph pr-d/codeph ">exit()</codeph> を呼び出す前に <codeph class="+ topic/ph pr-d/codeph ">exiting</codeph> イベントを送出します。</p>
	 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.desktop:NativeApplication_flash.events.Event.DEACTIVATE_deactivate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">deactivate</apiName><shortdesc class="- topic/shortdesc ">
	 デスクトップのフォーカスが別のアプリケーションに切り替わると送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.DEACTIVATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 デスクトップのフォーカスが別のアプリケーションに切り替わると送出されます。
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.desktop:NativeApplication_flash.events.Event.ACTIVATE_activate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">activate</apiName><shortdesc class="- topic/shortdesc ">
	 このアプリケーションがアクティブデスクトップアプリケーションになると送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.ACTIVATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 このアプリケーションがアクティブデスクトップアプリケーションになると送出されます。
	  
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.desktop:NativeApplication_flash.events.BrowserInvokeEvent.Browser_INVOKE_browserInvoke" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">browserInvoke</apiName><shortdesc class="- topic/shortdesc ">
	 アプリケーションがユーザーのブラウザーを実行している SWF ファイルによって起動されたときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.BrowserInvokeEvent.Browser_INVOKE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.BrowserInvokeEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 アプリケーションがユーザーのブラウザーを実行している SWF ファイルによって起動されたときに送出されます。 
	 
	 <p class="- topic/p ">ブラウザー呼び出しが許可されるのは、アプリケーション記述ファイルで次のように指定されている場合のみです。</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">&lt;allowBrowserInvocation>true&lt;/allowBrowserInvocation></codeblock>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.desktop:NativeApplication_flash.events.InvokeEvent.INVOKE_invoke" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">invoke</apiName><shortdesc class="- topic/shortdesc ">
	 アプリケーションが起動されたときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.InvokeEvent.INVOKE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.InvokeEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 アプリケーションが起動されたときに送出されます。 
	 
	 <p class="- topic/p ">1 つのアプリケーションを 2 回起動しても、そのアプリケーションの別のインスタンスは起動しません。代わりに、最初のインスタンスが追加の invoke イベントを受け取ります。アプリケーションで後続の <codeph class="+ topic/ph pr-d/codeph ">invoke</codeph> イベントを適切に処理する必要があります。</p>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b><codeph class="+ topic/ph pr-d/codeph ">invoke</codeph> イベントはすべてキューに置かれます。このイベントのリスナーは、登録されると、新しいイベントおよびキュー内のすべてのイベントを受け取ります。キューに置かれたイベントは、新しい <codeph class="+ topic/ph pr-d/codeph ">invoke</codeph> イベントの前または後に配信されます。</p>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.desktop:NativeApplication:activate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">activate</apiName><shortdesc class="- topic/shortdesc ">
         このアプリケーションをアクティブ化します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">window</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.display:NativeWindow</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">アプリケーションと共にアクティブ化するウィンドウの NativeWindow オブジェクトです。
		 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         このアプリケーションをアクティブ化します。 
         
		 <p class="- topic/p ">このメソッドは、NativeWindow クラスをサポートしていないプラットフォームでは無効です。</p> 
		  
         <p class="- topic/p ">オペレーティングシステムによって決められた一部の環境下では、このメソッドでアプリケーションはアクティブになりません。ほとんどのオペレーティングシステムでは、アプリケーション自体でアクティブになる機能を制限することにより、誤った操作や悪意のある操作によってユーザーが他のアプリケーションを使用できなくなることを防止しています。</p>
         
         <p class="- topic/p ">オペレーティングシステムでアクティブ化が許可されている場合は、指定したウィンドウがアクティブになり、デスクトップのフォアグラウンド、つまり他のアプリケーションのウィンドウよりも手前に表示されます（<codeph class="+ topic/ph pr-d/codeph ">window</codeph> パラメーターが <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、このアプリケーションの表示ウィンドウがアクティブになります）。</p>
         
         <p class="- topic/p ">アプリケーションに表示ウィンドウがない場合、<codeph class="+ topic/ph pr-d/codeph ">activate()</codeph> メソッドは無効です。</p>
		 
		 <p class="- topic/p ">アクティブ化操作は、同期的です。</p>
		 
		 </apiDesc></apiOperationDetail><adobeApiEvent id="flash.desktop:NativeApplication:activate_activate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">activate</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">アクティブ状態が変化すると送出されます。
         
         </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">アクティブ状態が変化すると送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.desktop:NativeApplication:addEventListener" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addEventListener</apiName><shortdesc class="- topic/shortdesc ">
		
	イベントリスナーオブジェクトを EventDispatcher オブジェクトに登録し、リスナーがイベントの通知を受け取るようにします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">イベントのタイプです。
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">listener</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">イベントを処理するリスナー関数です。この関数は、<ph class="- topic/ph ">次の例のように</ph>、Event オブジェクトを唯一のパラメーターとして受け取り、何も返さないものである必要があります。
	
	
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">function(evt:Event):void</codeblock>
	
	<p class="- topic/p ">関数の名前は任意に付けられます。</p>
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useCapture</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
	<ph class="- topic/ph ">リスナーが、キャプチャ段階、またはターゲットおよびバブリング段階で動作するかどうかを判断します。<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定すると、リスナーはキャプチャ段階のみでイベントを処理し、ターゲット段階またはバブリング段階では処理しません。<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> を <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定すると、リスナーはターゲット段階またはバブリング段階のみでイベントを処理します。3 つの段階すべてでイベントを受け取るには、<codeph class="+ topic/ph pr-d/codeph ">addEventListener</codeph> を 2 回呼び出します。<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定して呼び出し、<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> を <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定してもう一度呼び出します。</ph>
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">priority</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">イベントリスナーの優先度レベルです。優先度は、符号付き 32 ビット整数で指定します。数値が大きくなるほど優先度が高くなります。優先度が <i class="+ topic/ph hi-d/i ">n</i> のすべてのリスナーは、優先度が <i class="+ topic/ph hi-d/i ">n</i>-1 のリスナーよりも前に処理されます。複数のリスナーに対して同じ優先度が設定されている場合、それらは追加された順番に処理されます。デフォルトの優先度は 0 です。
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useWeakReference</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">リスナーへの参照が強参照と弱参照のいずれであるかを判断します。デフォルトである強参照の場合は、リスナーのガベージコレクションが回避されます。弱参照では回避されません。 <p class="- topic/p ">クラスレベルメンバー関数はガベージコレクションの対象外であるため、クラスレベルメンバー関数の <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> は、ガベージコレクションの制限とは無関係に <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定できます。ネストされた内部の関数であるリスナーに対して <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定すると、その関数はガベージコレクションされ、永続的ではなくなります。inner 関数に対する参照を作成（別の変数に保存）した場合、その関数はガベージコレクションされず、永続化された状態のままになります。</p>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		
	イベントリスナーオブジェクトを EventDispatcher オブジェクトに登録し、リスナーがイベントの通知を受け取るようにします。<ph class="- topic/ph ">イベントリスナーは、特定のタイプのイベント、段階、および優先度に関する表示リスト内のすべてのノードに登録できます。</ph>
	
	
	
	<p class="- topic/p ">イベントリスナーが正常に登録された後に、<codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> をさらに呼び出して優先度を変更することはできません。リスナーの優先度を変更するには、最初に <codeph class="+ topic/ph pr-d/codeph ">removeListener()</codeph> を呼び出す必要があります。その後、同じリスナーを新しい優先度レベルで再度登録できます。 </p>
	
	<p class="- topic/p ">リスナーが登録された後に、<codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph>（<codeph class="+ topic/ph pr-d/codeph ">type</codeph> または <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> に別の値を設定）を再度呼び出すと、別のリスナー登録が作成されることに注意してください。<ph class="- topic/ph ">例えば、最初にリスナーを登録するときに <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定すると、そのリスナーはキャプチャ段階のみでリスニングします。同じリスナーオブジェクトを使用して再度 <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> を呼び出すと（このとき、<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> に <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を設定）、異なる 2 つのリスナーが登録されます。1 つはキャプチャ段階でリスニングするリスナーで、もう 1 つはターゲット段階とバブリング段階でリスニングするリスナーです。</ph>
	</p>
	
	<p class="- topic/p ">ターゲット段階またはバブリング段階のみを対象とするイベントリスナーを登録することはできません。登録時にこれらの段階が組み合わされるのは、バブリングはターゲットノードの祖先にしか適用されないためです。</p>
	
	<p class="- topic/p ">イベントリスナーが不要になった場合は、<codeph class="+ topic/ph pr-d/codeph ">removeEventListener()</codeph> を呼び出して、イベントリスナーを削除します。削除しない場合、メモリの問題が発生する可能性があります。ガベージコレクションでは、オブジェクトの送出が行われている限り、リスナーを削除しないので、イベントリスナーは自動的には削除されません（<codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> パラメーターが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定されていない場合）。</p>
		
	<p class="- topic/p ">EventDispatcher インスタンスをコピーしても、それに関連付けられているイベントリスナーはコピーされません。新しく作成したノードにイベントリスナーが必要な場合は、ノードを作成した後に、リスナーを関連付ける必要があります。ただし、EventDispatcher インスタンスを移動した場合は、関連付けられているイベントリスナーも一緒に移動されます。</p>
	
	
	<p class="- topic/p ">イベントがノードで処理されるときに、イベントリスナーがそのノードに登録中であれば、イベントリスナーは現在の段階ではトリガーされません。ただし、バブリング段階など、イベントフローの後の段階でトリガーすることができます。</p>
	
	<p class="- topic/p ">イベントがノードで処理されているときにイベントリスナーがノードから削除された場合でも、イベントは現在のアクションによってトリガーされます。削除された後は、その後の処理で再び登録されない限り、イベントリスナーは二度と呼び出されません。 </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.desktop:NativeApplication:clear" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clear</apiName><shortdesc class="- topic/shortdesc ">
         フォーカスがある表示オブジェクトで内部 delete コマンドを起動します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
         
		 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         フォーカスがある表示オブジェクトで内部 delete コマンドを起動します。
		 
         <p class="- topic/p ">この関数呼び出しは、フォーカスがあるオブジェクトがコマンドを実装しない場合には無視されます。現在このコマンドを実装しているのは、TextField クラスまたは HTMLLoader クラスの下位にある表示コマンドのみです。</p>
         
         <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b><codeph class="+ topic/ph pr-d/codeph ">clear()</codeph> コマンドは、選択したテキストを削除します。何も選択しない場合は、どのテキストもクリアされません。</p>
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.desktop:NativeApplication:copy" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">copy</apiName><shortdesc class="- topic/shortdesc ">
         フォーカスがある表示オブジェクトで内部 copy コマンドを起動します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         フォーカスがある表示オブジェクトで内部 copy コマンドを起動します。
         
         <p class="- topic/p ">この関数呼び出しは、コンポーネントがコマンドを実装しない場合には無視されます。現在このコマンドを実装しているのは、TextField クラスまたは HTMLLoader クラスの下位にある表示コマンドのみです。</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.desktop:NativeApplication:cut" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">cut</apiName><shortdesc class="- topic/shortdesc ">
         フォーカスがある表示オブジェクトで内部 cut コマンドを起動します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
         
		 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         フォーカスがある表示オブジェクトで内部 cut コマンドを起動します。
		 
         <p class="- topic/p ">この関数呼び出しは、コンポーネントがコマンドを実装しない場合には無視されます。現在このコマンドを実装しているのは、TextField クラスまたは HTMLLoader クラスの下位にある表示コマンドのみです。</p>
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.desktop:NativeApplication:dispatchEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">dispatchEvent</apiName><shortdesc class="- topic/shortdesc ">
		
	イベントをイベントフローに送出します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">値が <codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合、イベントは正常に送出されました。値が <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の場合、イベントの送出に失敗したか、イベントで <codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph> が呼び出されたことを示しています。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">event</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">イベントフローに送出されるイベントオブジェクトです。イベントが再度送出されると、イベントのクローンが自動的に作成されます。イベントが送出された後にそのイベントの <codeph class="+ topic/ph pr-d/codeph ">target</codeph> プロパティは変更できないため、再送出処理のためにはイベントの新しいコピーを作成する必要があります。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		
	イベントをイベントフローに送出します。イベントターゲットは EventDispatcher オブジェクトです。これに対して <codeph class="+ topic/ph pr-d/codeph ">dispatchEvent()</codeph> メソッドが呼び出されます。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.desktop:NativeApplication:exit" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">exit</apiName><shortdesc class="- topic/shortdesc ">
		 このアプリケーションを終了します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">errorCode</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このアプリケーションが終了するときにオペレーティングシステムに報告される終了コードです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 このアプリケーションを終了します。 
		 
		 
		 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">exit()</codeph> メソッドの呼び出しによって返されます。現在実行中のコード（現在のイベントハンドラーなど）が完了するまで、シャットダウンシーケンスは開始されません。<i class="+ topic/ph hi-d/i "/> 保留中の非同期操作はキャンセルされ、操作が完了しない場合もあります。</p>
		 
		 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">exiting</codeph> イベントは送出されません。アプリケーションのロジック上 <codeph class="+ topic/ph pr-d/codeph ">exiting</codeph> イベントが必要な場合は、<codeph class="+ topic/ph pr-d/codeph ">NativeApplication.nativeApplication.dispatchEvent()</codeph> を呼び出し、タイプが <codeph class="+ topic/ph pr-d/codeph ">exiting</codeph> の Event オブジェクトを渡します。開いているウィンドウに対して、NativeWindow オブジェクトは <codeph class="+ topic/ph pr-d/codeph ">closing</codeph> イベントと <codeph class="+ topic/ph pr-d/codeph ">close</codeph> イベントを送出します。<codeph class="+ topic/ph pr-d/codeph ">closing</codeph> イベントオブジェクトの <codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph> メソッドを呼び出すと、アプリケーションが終了できなくなります。</p>
		 
		 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このメソッドは iOS オペレーティングシステムでサポートされていません。</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.desktop:NativeApplication:getDefaultApplication" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getDefaultApplication</apiName><shortdesc class="- topic/shortdesc ">
		 指定された拡張子を持つ開始ファイル用のデフォルトのアプリケーションを取得します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">extension</codeph> パラメーターがアプリケーション記述子に宣言されたファイル拡張子を含まない場合。
		 
		 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">デフォルトアプリケーションのパスです。
		 
		 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">extension</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">「.」を除く、対象のファイルタイプの拡張子を含む String です。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 指定された拡張子を持つ開始ファイル用のデフォルトのアプリケーションを取得します。
		 
		 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このメソッドは、アプリケーション記述子の <codeph class="+ topic/ph pr-d/codeph ">fileTypes</codeph> ステートメントに宣言されたファイルタイプでのみ使用できます。</p>
		 
		 <p class="- topic/p ">このメソッドはテレビ用 AIR デバイスでは使用できません。アプリケーション記述子で宣言したファイルタイプを指定して呼び出すと、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> が返されます。</p>
		 
		 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/applicationDescriptor" class="- topic/link "><linktext class="- topic/linktext ">applicationDescriptor</linktext></link></related-links></apiOperation><apiOperation id="flash.desktop:NativeApplication:isSetAsDefaultApplication" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">isSetAsDefaultApplication</apiName><shortdesc class="- topic/shortdesc ">
		 現在このアプリケーションが、指定された拡張子を持つ開始ファイル用のデフォルトのアプリケーションかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">extension</codeph> パラメーターがアプリケーション記述子に宣言されたファイル拡張子を含まない場合。
		 
		 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このアプリケーションがデフォルトである場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph> です。
		 
		 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">extension</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">「.」を除く、対象のファイルタイプの拡張子を含む String です。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 現在このアプリケーションが、指定された拡張子を持つ開始ファイル用のデフォルトのアプリケーションかどうかを指定します。
		 
		 <p class="- topic/p ">AIR プロファイルのサポート：<i class="+ topic/ph hi-d/i "/>この機能はすべてのデスクトップオペレーティングシステムでサポートされますが、モバイルデバイスまたはテレビ用 AIR デバイスではサポートされません。<codeph class="+ topic/ph pr-d/codeph ">NativeApplication.supportsDefaultApplication</codeph> プロパティを使用して、サポートされているかどうかを実行時にテストすることができます。複数のプロファイル間での API サポートについて詳しくは、<xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">AIR プロファイルのサポート</xref>を参照してください。</p>
		 
		 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/applicationDescriptor" class="- topic/link "><linktext class="- topic/linktext ">applicationDescriptor</linktext></link><link href="flash.desktop.xml#NativeApplication/supportsDefaultApplication" class="- topic/link "><linktext class="- topic/linktext ">supportsDefaultApplication</linktext></link></related-links></apiOperation><apiOperation id="flash.desktop:NativeApplication:paste" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">paste</apiName><shortdesc class="- topic/shortdesc ">
         フォーカスがある表示オブジェクトで内部 paste コマンドを起動します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
         
		 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         フォーカスがある表示オブジェクトで内部 paste コマンドを起動します。
		 
         <p class="- topic/p ">この関数呼び出しは、コンポーネントがコマンドを実装しない場合には無視されます。現在このコマンドを実装しているのは、TextField クラスまたは HTMLLoader クラスの下位にある表示コマンドのみです。</p>
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.desktop:NativeApplication:removeAsDefaultApplication" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">removeAsDefaultApplication</apiName><shortdesc class="- topic/shortdesc ">
		 このアプリケーションを、指定された拡張子を持つ開始ファイルに対するデフォルト指定から解除します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">extension</codeph> パラメーターがアプリケーション記述子に宣言されたファイル拡張子を含まない場合。
		 
		 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">extension</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">「.」を除く、対象のファイルタイプの拡張子を含む String です。
         
		 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 このアプリケーションを、指定された拡張子を持つ開始ファイルに対するデフォルト指定から解除します。
		 
		 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このメソッドは、アプリケーション記述子の <codeph class="+ topic/ph pr-d/codeph ">fileTypes</codeph> ステートメントに示されたファイルタイプでのみ使用できます。</p>
		 
		 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/applicationDescriptor" class="- topic/link "><linktext class="- topic/linktext ">applicationDescriptor</linktext></link><link href="flash.desktop.xml#NativeApplication/supportsDefaultApplication" class="- topic/link "><linktext class="- topic/linktext ">supportsDefaultApplication</linktext></link></related-links></apiOperation><apiOperation id="flash.desktop:NativeApplication:removeEventListener" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">removeEventListener</apiName><shortdesc class="- topic/shortdesc ">
		
	EventDispatcher オブジェクトからリスナーを削除します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">イベントのタイプです。
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">listener</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">削除するリスナーオブジェクトです。
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useCapture</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
	<ph class="- topic/ph ">リスナーが、キャプチャ段階、またはターゲットおよびバブリング段階に対して登録されたかどうかを示します。リスナーがキャプチャ段階だけでなくターゲット段階とバブリング段階にも登録されている場合は、<codeph class="+ topic/ph pr-d/codeph ">removeEventListener()</codeph> を 2 回呼び出して両方のリスナーを削除する必要があります。1 回は <codeph class="+ topic/ph pr-d/codeph ">useCapture()</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定し、もう 1 回は <codeph class="+ topic/ph pr-d/codeph ">useCapture()</codeph> を <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定する必要があります。</ph>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		
	EventDispatcher オブジェクトからリスナーを削除します。対応するリスナーが EventDispatcher オブジェクトに登録されていない場合は、このメソッドを呼び出しても効果はありません。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.desktop:NativeApplication:selectAll" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">selectAll</apiName><shortdesc class="- topic/shortdesc ">
         フォーカスがある表示オブジェクトで内部 selectAll コマンドを起動します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
         
		 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         フォーカスがある表示オブジェクトで内部 selectAll コマンドを起動します。
		 
         <p class="- topic/p ">この関数呼び出しは、コンポーネントがコマンドを実装しない場合には無視されます。現在このコマンドを実装しているのは、TextField クラスまたは HTMLLoader クラスの下位にある表示コマンドのみです。</p>
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.desktop:NativeApplication:setAsDefaultApplication" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setAsDefaultApplication</apiName><shortdesc class="- topic/shortdesc ">
		 このアプリケーションを、指定された拡張子を持つ開始ファイル用のデフォルトのアプリケーションとして設定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">extension</codeph> パラメーターがアプリケーション記述子に宣言されたファイル拡張子を含まない場合。
		 
		 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">extension</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">「.」を除く、対象のファイルタイプの拡張子を含む String です。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 このアプリケーションを、指定された拡張子を持つ開始ファイル用のデフォルトのアプリケーションとして設定します。
		 
		 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このメソッドは、アプリケーション記述子の <codeph class="+ topic/ph pr-d/codeph ">fileTypes</codeph> ステートメントに宣言されたファイルタイプでのみ使用できます。</p>
		 
		 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/applicationDescriptor" class="- topic/link "><linktext class="- topic/linktext ">applicationDescriptor</linktext></link><link href="flash.desktop.xml#NativeApplication/supportsDefaultApplication" class="- topic/link "><linktext class="- topic/linktext ">supportsDefaultApplication</linktext></link></related-links></apiOperation><apiValue id="flash.desktop:NativeApplication:activeWindow:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">activeWindow</apiName><shortdesc class="- topic/shortdesc ">
         アクティブなアプリケーションウィンドウです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.display:NativeWindow</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         アクティブなアプリケーションウィンドウです。 
		 
		 <p class="- topic/p ">アクティブなデスクトップウィンドウがこのアプリケーションに属していない場合、またはアクティブなウィンドウがない場合、<codeph class="+ topic/ph pr-d/codeph ">activeWindow</codeph> は <codeph class="+ topic/ph pr-d/codeph ">null</codeph> です。</p>
		 
		 <p class="- topic/p ">このプロパティは、NativeWindow クラスをサポートしていないプラットフォームでは無効です。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:NativeApplication:applicationDescriptor:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">applicationDescriptor</apiName><shortdesc class="- topic/shortdesc "> 
		 この AIR アプリケーション用のアプリケーション記述ファイルの内容です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">XML</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		 この AIR アプリケーション用のアプリケーション記述ファイルの内容です。
		 
		 
		 
		 </apiDesc><example conref="examples\NativeApplication.applicationDescriptor.1.as" class="- topic/example "> 次の例は、アプリケーション記述ファイルから <codeph class="+ topic/ph pr-d/codeph ">copyright</codeph> 要素と <codeph class="+ topic/ph pr-d/codeph ">version</codeph> 要素を読み取ります。アプリケーション記述子 XML に定義されたデフォルトの名前空間を使用する必要があります。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var appDescriptor:XML = NativeApplication.nativeApplication.applicationDescriptor;
var ns:Namespace = appDescriptor.namespace();
var appCopyright:String = appDescriptor.ns::copyright;
var appVersion:String = appDescriptor.ns::version;
trace("appId:", appCopyright);
trace("version:", appVersion);
</codeblock><swfblock conref="examples\NativeApplication.applicationDescriptor.1.swf" xml:space="preserve"/></example></apiValueDetail></apiValue><apiValue id="flash.desktop:NativeApplication:applicationID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">applicationID</apiName><shortdesc class="- topic/shortdesc "> 
		 このアプリケーションのアプリケーション ID です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		 このアプリケーションのアプリケーション ID です。 
		 
		 <p class="- topic/p ">この ID の値は、アプリケーション記述ファイルに設定されます。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:NativeApplication:autoExit:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">autoExit</apiName><shortdesc class="- topic/shortdesc ">
		 すべてのウィンドウを閉じたときにアプリケーションを自動的に終了するかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 すべてのウィンドウを閉じたときにアプリケーションを自動的に終了するかどうかを指定します。  
		 
		 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">autoExit</codeph> がデフォルトの <codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合、すべてのウィンドウを閉じるとアプリケーションが終了します。<codeph class="+ topic/ph pr-d/codeph ">exiting</codeph> イベントと <codeph class="+ topic/ph pr-d/codeph ">exit</codeph> イベントの両方が送出されます。<codeph class="+ topic/ph pr-d/codeph ">autoExit</codeph> が <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の場合、<codeph class="+ topic/ph pr-d/codeph ">NativeApplication.nativeApplication.exit()</codeph> を呼び出してアプリケーションを終了する必要があります。 </p> 
		 
		 <p class="- topic/p ">このプロパティは、NativeWindow クラスをサポートしていないプラットフォームでは無効です。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:NativeApplication:icon:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">icon</apiName><shortdesc class="- topic/shortdesc ">
		 アプリケーションアイコンです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.desktop:InteractiveIcon</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 アプリケーションアイコンです。
		 
		 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">NativeApplication.supportsDockIcon</codeph> と <codeph class="+ topic/ph pr-d/codeph ">NativeApplication.supportsSystemTrayIcon</codeph> を使用して、icon クラスを判別します。タイプは、InteractiveIcon のいずれかのサブクラスです。Mac<sup class="+ topic/ph hi-d/sup ">®</sup> OS X では、<codeph class="+ topic/ph pr-d/codeph ">NativeApplication.icon</codeph> は <codeph class="+ topic/ph pr-d/codeph ">DockIcon</codeph> タイプのオブジェクトです。Windows<sup class="+ topic/ph hi-d/sup ">®</sup> の場合、<codeph class="+ topic/ph pr-d/codeph ">NativeApplication.icon</codeph> はタイプが <codeph class="+ topic/ph pr-d/codeph ">SystemTrayIcon</codeph> のオブジェクトです。アプリケーションアイコンがサポートされていない場合、<codeph class="+ topic/ph pr-d/codeph ">NativeApplication.supportsDockIcon</codeph> および <codeph class="+ topic/ph pr-d/codeph ">NativeApplication.supportsSystemTrayIcon</codeph> は両方とも <codeph class="+ topic/ph pr-d/codeph ">false</codeph> で、<codeph class="+ topic/ph pr-d/codeph ">icon</codeph> プロパティは <codeph class="+ topic/ph pr-d/codeph ">null</codeph> になります。</p>  
		 
		 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">icon</codeph> オブジェクトは自動的に作成されますが、イメージデータで初期化されません。Mac OS X などの一部のオペレーティングシステムでは、デフォルトのイメージが指定されます。一方、Windows などのオペレーティングシステムでは、アイコンにイメージデータが割り当てられない限りアイコンは表示されません。アイコンイメージを割り当てるには、少なくとも 1 つの BitmapData オブジェクトが格納されている配列を <codeph class="+ topic/ph pr-d/codeph ">icon.bitmaps</codeph> プロパティに設定します。配列に複数の BitmapData オブジェクトが格納されている場合、サイズがアイコンの表示サイズに最も近いイメージをオペレーティングシステムが選択し、必要に応じてイメージを伸縮します。</p>  
   		 
         </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/supportsDockIcon" class="- topic/link "><linktext class="- topic/linktext ">supportsDockIcon</linktext></link><link href="flash.desktop.xml#DockIcon" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.DockIcon</linktext></link><link href="flash.desktop.xml#NativeApplication/supportsSystemTrayIcon" class="- topic/link "><linktext class="- topic/linktext ">supportsSystemTrayIcon</linktext></link><link href="flash.desktop.xml#SystemTrayIcon" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.SystemTrayIcon</linktext></link></related-links></apiValue><apiValue id="flash.desktop:NativeApplication:idleThreshold:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">idleThreshold</apiName><shortdesc class="- topic/shortdesc ">
		 ユーザー入力が行われなくなってから userIdle イベントを送出するまでの秒数です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">プロパティに無効な値を設定しようとした場合に発生します。許容される値の範囲は、5（5 秒）以上 86,400（1 日）以下です。
		 
		 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 ユーザー入力が行われなくなってから userIdle イベントを送出するまでの秒数です。 
		 
		 <p class="- topic/p ">デフォルトでは、アイドル時間のしきい値は 300 秒（5 分）に設定されています。許容される値の範囲は、5（5 秒）以上 86,400（1 日）以下です。</p>
		 
		 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/event:userIdle" class="- topic/link "><linktext class="- topic/linktext ">userIdle</linktext></link><link href="flash.desktop.xml#NativeApplication/event:userPresent" class="- topic/link "><linktext class="- topic/linktext ">userPresent</linktext></link></related-links></apiValue><apiValue id="flash.desktop:NativeApplication:menu:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">menu</apiName><shortdesc class="- topic/shortdesc ">
		 アプリケーションメニューです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.display:NativeMenu</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 アプリケーションメニューです。
		 
		 <p class="- topic/p ">アプリケーションメニューは、<codeph class="+ topic/ph pr-d/codeph ">NativeApplication.nativeApplication.supportsMenu</codeph> が <codeph class="+ topic/ph pr-d/codeph ">true</codeph> のときにサポートされます。アプリケーションメニューをサポートしないオペレーティングシステムもあります。例えば、Mac OS X ではアプリケーションメニューがサポートされますが、Windows または Linux ではサポートされません。<codeph class="+ topic/ph pr-d/codeph ">NativeApplication.nativeApplication.supportsMenu</codeph> が <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の場合も、このプロパティに NativeMenu オブジェクトを割り当てることはできますが、効果はありません。使用しているオペレーティングシステムでアプリケーションメニューがサポートされているか確認するには、必ず <codeph class="+ topic/ph pr-d/codeph ">NativeApplication.nativeApplication.supportsMenu</codeph> プロパティを使用してください。その他の方法（<codeph class="+ topic/ph pr-d/codeph ">Capabilities.os</codeph> など）でサポートの有無を判断すると、プログラミングエラーの原因になる可能性があります（ターゲットとなり得るオペレーティングシステムの種類についての配慮が完全でない場合）。</p>
		 
		 <p class="- topic/p ">AIR プロファイルのサポート：<i class="+ topic/ph hi-d/i "/>この機能はモバイルデバイスまたはテレビ用 AIR デバイスではサポートされません。複数のプロファイル間での API サポートについて詳しくは、<xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">AIR プロファイルのサポート</xref>を参照してください。</p>
 
         <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>Mac OS X の場合、<codeph class="+ topic/ph pr-d/codeph ">menu</codeph> プロパティはオペレーティングシステムで指定されたデフォルトのアプリケーションメニューを参照します。アイテムやサブメニューを追加および削除したり、イベントリスナーを追加することで、既存のメニュー構造を変更できます。新しい NativeMenu オブジェクトをこの <codeph class="+ topic/ph pr-d/codeph ">menu</codeph> プロパティに割り当てることによって、デフォルトのメニュー全体を置き換えることもできます。</p>
		 
		 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#NativeMenu" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeMenu</linktext></link><link href="flash.display.xml#NativeWindow/supportsMenu" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeWindow.supportsMenu</linktext></link></related-links></apiValue><apiValue id="flash.desktop:NativeApplication:nativeApplication:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">nativeApplication</apiName><shortdesc class="- topic/shortdesc "> 
		 NativeApplication オブジェクトのシングルトンインスタンスです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.desktop:NativeApplication</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">アプリケーションのセキュリティサンドボックス外部のコンテンツでアクセスした場合。
		 
		 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		 NativeApplication オブジェクトのシングルトンインスタンスです。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:NativeApplication:openedWindows:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">openedWindows</apiName><shortdesc class="- topic/shortdesc ">
		 このアプリケーションの開いているすべてのネイティブウィンドウを含む配列です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 このアプリケーションの開いているすべてのネイティブウィンドウを含む配列です。
		 
		 <p class="- topic/p ">このプロパティは、NativeWindow クラスをサポートしていないプラットフォームでは無効です。</p> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:NativeApplication:publisherID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">publisherID</apiName><shortdesc class="- topic/shortdesc "> 
		 このアプリケーションの発行者 ID です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		 このアプリケーションの発行者 ID です。 
		 
		 <p class="- topic/p ">この ID の値は、アプリケーションの発行者 ID ファイルに設定されます。このファイルは、インストール時に、アプリケーションの署名に使用される証明書チェーンから生成されます。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:NativeApplication:runtimePatchLevel:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">runtimePatchLevel</apiName><shortdesc class="- topic/shortdesc "> 
		 このアプリケーションをホストしているランタイムのパッチレベルです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		 このアプリケーションをホストしているランタイムのパッチレベルです。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:NativeApplication:runtimeVersion:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">runtimeVersion</apiName><shortdesc class="- topic/shortdesc "> 
		 このアプリケーションをホストしているランタイムのバージョン番号です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		 このアプリケーションをホストしているランタイムのバージョン番号です。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:NativeApplication:startAtLogin:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">startAtLogin</apiName><shortdesc class="- topic/shortdesc ">
        現在のユーザーがログインしたときは常にこのアプリケーションを自動的に起動するかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Windows では、同じ名前を持つ（ただし、実行可能ファイルへのパスが異なる）別のアプリケーションが、このユーザーがログインすると起動するように既に設定されている場合。
        
        </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このアプリケーションがインストールされていない場合、AIR Debug Launcher（ADL）によって起動された可能性があります。
        
		</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
        現在のユーザーがログインしたときは常にこのアプリケーションを自動的に起動するかどうかを指定します。
        
	<p class="- topic/p ">AIR プロファイルのサポート：<i class="+ topic/ph hi-d/i "/>この機能はすべてのデスクトップオペレーティングシステムでサポートされますが、モバイルデバイスまたはテレビ用 AIR デバイスではサポートされません。<codeph class="+ topic/ph pr-d/codeph ">NativeApplication.supportsStartAtLogin</codeph> プロパティを使用して、サポートされているかどうかを実行時にテストすることができます。複数のプロファイル間での API サポートについて詳しくは、<xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">AIR プロファイルのサポート</xref>を参照してください。</p>
	
        <p class="- topic/p ">
        <codeph class="+ topic/ph pr-d/codeph ">startAtLogin</codeph> プロパティは、ユーザーがログインするとアプリケーションを自動的に開始することを指定するためにオペレーティングシステムに定義されたメカニズムのステータスを反映します。ユーザーは、オペレーティングシステムのユーザーインターフェイスでこのステータスを変更できます。このプロパティは、AIR アプリケーションまたはオペレーティングシステムによってこのステータスが最近変更されたかどうかについての現在のステータスを反映します。   
        </p>
        </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/supportsStartAtLogin" class="- topic/link "><linktext class="- topic/linktext ">supportsStartAtLogin</linktext></link></related-links></apiValue><apiValue id="flash.desktop:NativeApplication:supportsDefaultApplication:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">supportsDefaultApplication</apiName><shortdesc class="- topic/shortdesc "> 
         setAsDefaultApplication()、removeAsDefaultApplication() および isSetAsDefaultApplication() が現在のプラットフォームでサポートされているかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
         <codeph class="+ topic/ph pr-d/codeph ">setAsDefaultApplication()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">removeAsDefaultApplication()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">isSetAsDefaultApplication()</codeph> が現在のプラットフォームでサポートされているかどうかを示します。
         
         <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合、これらのメソッドは、説明のとおりに機能します。<codeph class="+ topic/ph pr-d/codeph ">false</codeph> の場合、<codeph class="+ topic/ph pr-d/codeph ">setAsDefaultApplication()</codeph> および<codeph class="+ topic/ph pr-d/codeph ">removeDefaultApplication()</codeph> は何もしません。<codeph class="+ topic/ph pr-d/codeph ">isSetAsDefaultApplication()</codeph> は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。</p>
         
         </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/setAsDefaultApplication()" class="- topic/link "><linktext class="- topic/linktext ">setAsDefaultApplication()</linktext></link><link href="flash.desktop.xml#NativeApplication/removeAsDefaultApplication()" class="- topic/link "><linktext class="- topic/linktext ">removeAsDefaultApplication()</linktext></link><link href="flash.desktop.xml#NativeApplication/isSetAsDefaultApplication()" class="- topic/link "><linktext class="- topic/linktext ">isSetAsDefaultApplication()</linktext></link></related-links></apiValue><apiValue id="flash.desktop:NativeApplication:supportsDockIcon:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">supportsDockIcon</apiName><shortdesc class="- topic/shortdesc "> 
	   AIR が、現在のオペレーティングシステムでドック形式のアプリケーションアイコンをサポートするかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	   AIR が、現在のオペレーティングシステムでドック形式のアプリケーションアイコンをサポートするかどうかを示します。
	  
	  <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合、<codeph class="+ topic/ph pr-d/codeph ">NativeApplication.icon</codeph> プロパティは <codeph class="+ topic/ph pr-d/codeph ">DockIcon</codeph> タイプです。</p>
	  
      <p class="- topic/p ">Mac OS X ユーザーインターフェイスには、実行中または頻繁に使用されるアプリケーションのアイコンが入っているアプリケーション「ドック」が用意されています。</p>
	  
	  <p class="- topic/p ">使用しているオペレーティングシステムでアプリケーションのドックアイコンがサポートされているか確認するには、必ず <codeph class="+ topic/ph pr-d/codeph ">NativeApplication.supportsDockIcon</codeph> プロパティを使用してください。その他の方法（<codeph class="+ topic/ph pr-d/codeph ">Capabilities.os</codeph> など）でサポートの有無を判断すると、プログラミングエラーの原因になる可能性があります（ターゲットとなり得るオペレーティングシステムの種類についての配慮が完全でない場合）。</p>
      
      </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/icon" class="- topic/link "><linktext class="- topic/linktext ">icon</linktext></link><link href="flash.desktop.xml#DockIcon" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.DockIcon</linktext></link></related-links></apiValue><apiValue id="flash.desktop:NativeApplication:supportsMenu:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">supportsMenu</apiName><shortdesc class="- topic/shortdesc "> 
	   現在のオペレーティングシステムがグローバルアプリケーションメニューバーをサポートするかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	   現在のオペレーティングシステムがグローバルアプリケーションメニューバーをサポートするかどうかを指定します。
	  
	  <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合、<codeph class="+ topic/ph pr-d/codeph ">NativeApplication.menu</codeph> プロパティを使用してネイティブアプリケーションメニューを定義（またはネイティブアプリケーションメニューにアクセス）できます。</p> 
	  
	  <p class="- topic/p ">使用しているオペレーティングシステムでアプリケーションメニューバーがサポートされているか確認するには、必ず <codeph class="+ topic/ph pr-d/codeph ">NativeApplication.supportsMenu</codeph> プロパティを使用してください。その他の方法（<codeph class="+ topic/ph pr-d/codeph ">Capabilities.os</codeph> など）でサポートの有無を判断すると、プログラミングエラーの原因になる可能性があります（ターゲットとなり得るオペレーティングシステムの種類についての配慮が完全でない場合）。</p>
	  
      </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/menu" class="- topic/link "><linktext class="- topic/linktext ">menu</linktext></link><link href="flash.display.xml#NativeWindow/supportsMenu" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeWindow.supportsMenu</linktext></link></related-links></apiValue><apiValue id="flash.desktop:NativeApplication:supportsStartAtLogin:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">supportsStartAtLogin</apiName><shortdesc class="- topic/shortdesc "> 
         現在のプラットフォームで、startAtLogin がサポートされているかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
         現在のプラットフォームで、startAtLogin がサポートされているかどうかを示します。
         
         <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合、startAtLogin は説明どおりに機能します。<codeph class="+ topic/ph pr-d/codeph ">false</codeph> の場合、startAtLogin には効果はありません。</p>
         
         </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/startAtLogin" class="- topic/link "><linktext class="- topic/linktext ">startAtLogin</linktext></link></related-links></apiValue><apiValue id="flash.desktop:NativeApplication:supportsSystemTrayIcon:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">supportsSystemTrayIcon</apiName><shortdesc class="- topic/shortdesc "> 
	  AIR が現在のオペレーティングシステムのシステムトレイアイコンをサポートするかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	  AIR が現在のオペレーティングシステムのシステムトレイアイコンをサポートするかどうかを指定します。
	  
	  <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合、<codeph class="+ topic/ph pr-d/codeph ">NativeApplication.icon</codeph> プロパティは <codeph class="+ topic/ph pr-d/codeph ">SystemTrayIcon</codeph> タイプです。</p>
	  
      <p class="- topic/p ">Windows ユーザーインターフェイスには、タスクバーの「システムトレイ」領域が用意されています。正式には「<i class="+ topic/ph hi-d/i ">通知領域</i>」と呼ばれ、この領域にアプリケーションアイコンが表示されます。表示されるデフォルトのアイコンはありません。アイコンを表示するには、icon オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> 配列を設定する必要があります。</p>
      
	  <p class="- topic/p ">使用しているオペレーティングシステムでシステムトレイアイコンがサポートされているか確認するには、必ず <codeph class="+ topic/ph pr-d/codeph ">NativeApplication.supportsSystemTrayIcon</codeph> プロパティを使用してください。その他の方法（<codeph class="+ topic/ph pr-d/codeph ">Capabilities.os</codeph> など）でサポートの有無を判断すると、プログラミングエラーの原因になる可能性があります（ターゲットとなり得るオペレーティングシステムの種類についての配慮が完全でない場合）。</p>
      
      </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/icon" class="- topic/link "><linktext class="- topic/linktext ">icon</linktext></link><link href="flash.desktop.xml#SystemTrayIcon" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.SystemTrayIcon</linktext></link></related-links></apiValue><apiValue id="flash.desktop:NativeApplication:systemIdleMode:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">systemIdleMode</apiName><shortdesc class="- topic/shortdesc ">
		 ユーザーインターフェイスが「アイドル」モードに入るのを妨げる手段をアプリケーションに提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 ユーザーインターフェイスが「アイドル」モードに入るのを妨げる手段をアプリケーションに提供します。
		 
		 <p class="- topic/p ">SystemIdleMode クラスの値です。ホストシステムのアイドルモード動作に影響します。このプロパティは、入力フォーカスのあるアプリケーションにのみ影響し、アプリケーションサンドボックス内で実行されるコンテンツからのみアクセスできます。</p>
		 
		 <p class="- topic/p ">AIR プロファイルのサポート：<i class="+ topic/ph hi-d/i "/>この機能はモバイルデバイスでサポートされますが、デスクトップオペレーティングシステムまたはテレビ用 AIR デバイスではサポートされません。複数のプロファイル間での API サポートについて詳しくは、<xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">AIR プロファイルのサポート</xref>を参照してください。</p>
		 
		 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#SystemIdleMode" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.SystemIdleMode</linktext></link></related-links></apiValue><apiValue id="flash.desktop:NativeApplication:timeSinceLastUserInput:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">timeSinceLastUserInput</apiName><shortdesc class="- topic/shortdesc ">
         最後のユーザー入力が行われてからの時間（秒）を示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         最後のユーザー入力が行われてからの時間（秒）を示します。
		 
		 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/event:userIdle" class="- topic/link "><linktext class="- topic/linktext ">userIdle</linktext></link><link href="flash.desktop.xml#NativeApplication/event:userPresent" class="- topic/link "><linktext class="- topic/linktext ">userPresent</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.desktop:Updater" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Updater</apiName><shortdesc class="- topic/shortdesc ">
 Updater クラスは、現在実行しているアプリケーションを別のバージョンに更新するときに使用されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Updater クラスは、現在実行しているアプリケーションを別のバージョンに更新するときに使用されます。このクラスを使用するには、Updater オブジェクトをインスタンス化した後で、その <codeph class="+ topic/ph pr-d/codeph ">update()</codeph> メソッドを呼び出します。
 
 <p class="- topic/p ">Updater クラスは、デスクトッププロファイルでのみサポートされます。拡張デスクトップアプリケーション（ネイティブインストーラーによってインストールされるアプリケーション）ではサポートされません。また、AIR モバイルプロファイルまたは AIR for TV プロファイルではサポートされません。<codeph class="+ topic/ph pr-d/codeph ">Updater.isSupported</codeph> プロパティを確認します。</p>
 
 <p class="- topic/p ">拡張デスクトップアプリケーション（ネイティブインストーラーでインストールされたアプリケーション）は、新しいバージョンのネイティブインストーラーをダウンロードし、<codeph class="+ topic/ph pr-d/codeph ">File.openWithDefaultApplication()</codeph> メソッドを使用してそのインストーラーを起動できます。</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="air.update.xml#ApplicationUpdater" class="- topic/link "><linktext class="- topic/linktext ">air.update.ApplicationUpdater</linktext></link><link href="air.update.xml#ApplicationUpdaterUI" class="- topic/link "><linktext class="- topic/linktext ">air.update.ApplicationUpdaterUI</linktext></link></related-links><apiConstructor id="flash.desktop:Updater:Updater" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Updater</apiName><shortdesc class="- topic/shortdesc ">
     Updater クラスのコンストラクター関数です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Updater クラスのコンストラクター関数です。 <codeph class="+ topic/ph pr-d/codeph ">update()</codeph> メソッドはクラスの静的メンバーではない点に注意してください。Updater オブジェクトをインスタンス化して、その <codeph class="+ topic/ph pr-d/codeph ">update()</codeph> メソッドを呼び出す必要があります。
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.desktop:Updater:update" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">update</apiName><shortdesc class="- topic/shortdesc ">
     現在実行しているアプリケーションを、指定された AIR ファイルにあるアプリケーションのバージョンに更新します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ADL で実行した場合にこのメソッドが呼び出されました。 
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">airFile</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">更新バージョンのアプリケーションが格納されている AIR ファイルを示す File オブジェクトです。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">version</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">新規 AIR ファイル内の必要なバージョンです。更新が成功するには、<codeph class="+ topic/ph pr-d/codeph ">version</codeph> 属性（AIR ファイルにあるアプリケーション記述ファイルのメイン <codeph class="+ topic/ph pr-d/codeph ">application</codeph> エレメントで指定）のストリングが、この値と一致する必要があります。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     現在実行しているアプリケーションを、指定された AIR ファイルにあるアプリケーションのバージョンに更新します。AIR ファイル内のアプリケーションは、現在実行しているアプリケーションと同じアプリケーション識別子（<codeph class="+ topic/ph pr-d/codeph ">appID</codeph>）を持っている必要があります。
	 
     <p class="- topic/p ">このメソッドを呼び出すと、(<codeph class="+ topic/ph pr-d/codeph ">NativeApplication.exit()</codeph> メソッドを呼び出した場合と同じように）現在のアプリケーションが終了します。アプリケーションが実行中になっていると Adobe AIR はそのアプリケーションを更新できないため、この操作が必要になります。新しいバージョンのアプリケーションのインストールが正常に完了すると、そのアプリケーションが起動します。ランタイムで新しいバージョンを正常にインストールできない場合（例えば、アプリケーション ID が既存のバージョンと一致しない場合）、AIR インストーラーによってユーザーにエラーメッセージが表示され、古いバージョンが再起動されます。</p>
	 
	 <p class="- topic/p ">更新処理は更新が成功したかどうかにかかわらずアプリケーションを再起動します。更新は、ユーザーがアプリケーションをインストールする十分な権限を持っていないといったアプリケーションが制御できないなどのさまざまな理由で失敗する可能性があります。アプリケーションでは、失敗を検出し、同じ失敗の更新を繰り返し行わないようにする必要があります。失敗の結果として発生する無限ループは、アプリケーションを事実上無効にすることになります。更新が成功したことを確認する 1 つの方法として、更新を開始する前に現在のバージョン番号をファイルに書き込み、その後、アプリケーションが再起動されるときにそのバージョン番号と比較することがあります。</p>
	 
	 <p class="- topic/p ">AIR Debug Launcher（ADL）アプリケーションを使用してアプリケーションをテストしているときに、<codeph class="+ topic/ph pr-d/codeph ">update()</codeph> メソッドを呼び出すと、IllegalOperationError 例外が発生します。</p>
	 
	 <p class="- topic/p ">Mac OS の場合、アプリケーションの更新されたバージョンをインストールするには、適切なシステム権限を持ってアプリケーションディレクトリにインストールする必要があります。Windows または Linux の場合、管理権限を持っている必要があります。 </p>
	 
	 <p class="- topic/p ">アプリケーションの更新されたバージョンがランタイムの更新されたバージョンを必要とする場合、新しいランタイムバージョンがインストールされます。ランタイムを更新するには、コンピューターの管理権限を持っている必要があります。</p>
	 
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i "/>注意：セキュリティ上の理由から、<codeph class="+ topic/ph pr-d/codeph ">version</codeph> パラメーターを指定する必要があります。AIR ファイルのアプリケーションのバージョン番号の確認を必須とすることで、修正済みのセキュリティ上の脆弱性が含まれている可能性のある、古いバージョンのアプリケーションが誤ってインストールされることがなくなります。</p>
	 
	 </apiDesc><example conref="examples\Updater.update.1.as" class="- topic/example "> <codeph class="+ topic/ph pr-d/codeph ">update()</codeph> メソッドはクラスの静的メソッドではない点に注意してください。<i class="+ topic/ph hi-d/i "/> Updater オブジェクトをインスタンス化して、そのオブジェクトの <codeph class="+ topic/ph pr-d/codeph ">update()</codeph> メソッドを呼び出します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.fileSystem.File;
import flash.desktop.Updater;
 
var updater:Updater = new Updater();
var airFile:File = File.applicationStorageDirectory.resolvePath("Example Application.air");
var version:String = "2.01";
updater.update(airFile, version);
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="air.update.xml#ApplicationUpdater" class="- topic/link "><linktext class="- topic/linktext ">air.update.ApplicationUpdater</linktext></link><link href="air.update.xml#ApplicationUpdaterUI" class="- topic/link "><linktext class="- topic/linktext ">air.update.ApplicationUpdaterUI</linktext></link></related-links></apiOperation><apiValue id="flash.desktop:Updater:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
    現在のプラットフォームで Updater クラスがサポートされている場合、isSupported プロパティは true に設定されます。サポートされていない場合は、false に設定されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    現在のプラットフォームで Updater クラスがサポートされている場合、<codeph class="+ topic/ph pr-d/codeph ">isSupported</codeph> プロパティは <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定されます。サポートされていない場合は、<codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定されます。 
    
    
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.desktop:SystemTrayIcon" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SystemTrayIcon</apiName><shortdesc class="- topic/shortdesc ">
	 SystemTrayIcon クラスは、Windows&amp;#xAE; タスクバーの通知領域（システムトレイ）スタイルのアイコンを表します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">タスクバーアイコンです。
	 
	 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.desktop:InteractiveIcon</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 SystemTrayIcon クラスは、Windows<sup class="+ topic/ph hi-d/sup ">®</sup> タスクバーの通知領域（システムトレイ）スタイルのアイコンを表します。
	 
     <p class="- topic/p ">AIR プロファイルのサポート：<i class="+ topic/ph hi-d/i "/>この機能はデスクトップオペレーティングシステムでサポートされますが、モバイルデバイスまたはテレビ用 AIR デバイスではサポートされません。複数のプロファイル間での API サポートについて詳しくは、<xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">AIR プロファイルのサポート</xref>を参照してください。</p>	 
	 
	 <p class="- topic/p ">デスクトップオペレーティングシステムの種類によっては、システムトレイアイコンがないこともあります。現在のシステムでシステムトレイアイコンがサポートされているかどうかを確認するには、<codeph class="+ topic/ph pr-d/codeph ">NativeApplication.supportsSystemTrayIcon</codeph> を調べます。</p>
	 
	 <p class="- topic/p ">SystemTrayIcon クラスのインスタンスは作成できません。"グローバルな" NativeApplication オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">icon</codeph> プロパティからシステムトレイアイコンを表すオブジェクトを取得します。
	 </p>
	 
	 <p class="- topic/p ">システムトレイアイコンがサポートされている場合は、icon プロパティのタイプが <i class="+ topic/ph hi-d/i ">SystemTrayIcon</i> に設定されています。サポートされていない場合、<codeph class="+ topic/ph pr-d/codeph ">icon</codeph> のタイプは、InteractiveIcon の別のサブクラスである DockIcon などに設定されています。</p>
	 
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">重要：</b>AIR がシステムトレイアイコンをサポートしていないオペレーティングシステムで <codeph class="+ topic/ph pr-d/codeph ">NativeApplication.icon</codeph> オブジェクトの SystemTrayIcon クラスのメソッドを呼び出そうとすると、ランタイム例外が生成されます。</p>
	 
	 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/icon" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication.icon</linktext></link><link href="flash.desktop.xml#NativeApplication/supportsSystemTrayIcon" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication.supportsSystemTrayIcon</linktext></link><link href="flash.desktop.xml#DockIcon" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.DockIcon</linktext></link></related-links><adobeApiEvent id="flash.desktop:SystemTrayIcon_flash.events.ScreenMouseEvent.RIGHT_CLICK_rightClick" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rightClick</apiName><shortdesc class="- topic/shortdesc ">
	 マウスを右クリックしたときに、この SystemTrayIcon オブジェクトによって送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ScreenMouseEvent.RIGHT_CLICK</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ScreenMouseEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 マウスを右クリックしたときに、この SystemTrayIcon オブジェクトによって送出されます。
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.desktop:SystemTrayIcon_flash.events.ScreenMouseEvent.RIGHT_MOUSE_UP_rightMouseUp" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rightMouseUp</apiName><shortdesc class="- topic/shortdesc ">
	 マウスの右ボタンを離したときに、この SystemTrayIcon オブジェクトによって送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ScreenMouseEvent.RIGHT_MOUSE_UP</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ScreenMouseEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 マウスの右ボタンを離したときに、この SystemTrayIcon オブジェクトによって送出されます。
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.desktop:SystemTrayIcon_flash.events.ScreenMouseEvent.RIGHT_MOUSE_DOWN_rightMouseDown" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rightMouseDown</apiName><shortdesc class="- topic/shortdesc ">
	 マウスの右ボタンを押したときに、この SystemTrayIcon オブジェクトによって送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ScreenMouseEvent.RIGHT_MOUSE_DOWN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ScreenMouseEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 マウスの右ボタンを押したときに、この SystemTrayIcon オブジェクトによって送出されます。
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.desktop:SystemTrayIcon_flash.events.ScreenMouseEvent.CLICK_click" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">click</apiName><shortdesc class="- topic/shortdesc ">
 	 マウスをクリックしたときに、この SystemTrayIcon オブジェクトによって送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ScreenMouseEvent.CLICK</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ScreenMouseEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 	 マウスをクリックしたときに、この SystemTrayIcon オブジェクトによって送出されます。
 	 
 	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.desktop:SystemTrayIcon_flash.events.ScreenMouseEvent.MOUSE_UP_mouseUp" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">mouseUp</apiName><shortdesc class="- topic/shortdesc ">
 	 マウスを離したときに、この SystemTrayIcon オブジェクトによって送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ScreenMouseEvent.MOUSE_UP</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ScreenMouseEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 	 マウスを離したときに、この SystemTrayIcon オブジェクトによって送出されます。
 	 
 	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.desktop:SystemTrayIcon_flash.events.ScreenMouseEvent.MOUSE_DOWN_mouseDown" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">mouseDown</apiName><shortdesc class="- topic/shortdesc ">
 	 マウスを押したときに、この SystemTrayIcon オブジェクトによって送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ScreenMouseEvent.MOUSE_DOWN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ScreenMouseEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 	 マウスを押したときに、この SystemTrayIcon オブジェクトによって送出されます。
 	 
 	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiValue id="flash.desktop:SystemTrayIcon:MAX_TIP_LENGTH" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MAX_TIP_LENGTH</apiName><shortdesc class="- topic/shortdesc ">
		 システムトレイアイコンのツールヒントに対して許可されている最大の長さです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">63</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 システムトレイアイコンのツールヒントに対して許可されている最大の長さです。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:SystemTrayIcon:bitmaps:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bitmaps</apiName><shortdesc class="- topic/shortdesc "> 
		
		  
	 様々なサイズの BitmapData オブジェクトの配列としてのアイコンイメージです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		
		  
	 様々なサイズの BitmapData オブジェクトの配列としてのアイコンイメージです。
	   
	 <p class="- topic/p ">指定されたオペレーティングシステムのコンテキストでアイコンを表示する場合、表示するサイズに最も近い配列のビットマップが使用されます（必要に応じて伸縮）。一般的なサイズには、16x16、32x32、48x48 および 128x128 があります （512x512 ピクセルのアイコンは、近い将来にいくつかのオペレーティングシステムアイコンで使用される可能性があります）。</p>
	 
	 <p class="- topic/p ">一部のコンテキストでは、<codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> プロパティに何も割り当てられていない場合、オペレーティングシステムがデフォルトのシステムアイコンを使用することがあります。他のコンテキストでは、アイコンは表示されません。</p>
	 
	 <p class="- topic/p ">アイコンの外観を設定または変更するには、BitmapData オブジェクトの配列を <codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> プロパティに割り当てます。</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 icon.bitmaps = new Array(icon16x16.bitmapData, icon128x128.bitmapData);
	 </codeblock>
	  
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> 配列を直接変更しても効果はありません。</p>
	 
	 <p class="- topic/p ">アイコンイメージを消去するには、<codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> プロパティに空の配列を割り当てます。</p>
	 
	 <p class="- topic/p ">
	 <b class="+ topic/ph hi-d/b ">注意：</b>アイコン用のイメージファイルを読み込む場合、通常、最も適切なアルファブレンドが提供されるのは PNG ファイル形式です。GIF 形式は透明度のオンまたはオフのみをサポートし、ブレンドは行いません。JPG 形式は、透明度をまったくサポートしません。  
	 </p>
	  
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:SystemTrayIcon:height:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">height</apiName><shortdesc class="- topic/shortdesc "> 
		
		 アイコンの現在の表示の高さです（ピクセル単位）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		
		 アイコンの現在の表示の高さです（ピクセル単位）。
		 
		 <p class="- topic/p ">一部のアイコンのコンテキストでは、動的なサイズ調整がサポートされます。<codeph class="+ topic/ph pr-d/codeph ">height</codeph> プロパティは、現在のコンテキストの <codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> 配列から選択されたアイコンの高さを示します。オペレーティングシステムによってアイコンが伸縮されている場合は、実際の表示の高さはこれとは異なります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:SystemTrayIcon:menu:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">menu</apiName><shortdesc class="- topic/shortdesc ">
		 システムトレイアイコンメニューです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.display:NativeMenu</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 システムトレイアイコンメニューです。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:SystemTrayIcon:tooltip:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">tooltip</apiName><shortdesc class="- topic/shortdesc ">
		 システムトレイアイコンにポップアップ表示されるツールヒントです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 システムトレイアイコンにポップアップ表示されるツールヒントです。ストリングが <codeph class="+ topic/ph pr-d/codeph ">SystemTrayIcon.MAX_TIP_LENGTH</codeph> より長い場合、ツールヒントは切り詰められます。
		 
	     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:SystemTrayIcon:width:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">width</apiName><shortdesc class="- topic/shortdesc "> 
		
		 アイコンの現在の表示幅です（ピクセル単位）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		
		 アイコンの現在の表示幅です（ピクセル単位）。 
		 
		 <p class="- topic/p ">一部のアイコンのコンテキストでは、動的なサイズ調整がサポートされます。<codeph class="+ topic/ph pr-d/codeph ">width</codeph> プロパティは、現在のコンテキストの <codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> 配列から選択されたアイコンの幅を示します。オペレーティングシステムによってアイコンが伸縮されている場合は、実際の表示幅はこれとは異なります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.desktop:Clipboard" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Clipboard</apiName><shortdesc class="- topic/shortdesc ">
 Clipboard クラスは、クリップボードを通じてデータとオブジェクトを転送するコンテナを提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>NativeDragManager is AIR only and is not in FP10.
 </internal></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Clipboard クラスは、クリップボードを通じてデータとオブジェクトを転送するコンテナを提供します。オペレーティングシステムクリップボードには、静的 <codeph class="+ topic/ph pr-d/codeph ">generalClipboard</codeph> プロパティを通じてアクセスできます。
 
 <p class="- topic/p ">Clipboard オブジェクトには、同じ情報を複数の形式で格納できます。情報を複数の形式で提供することにより、別のアプリケーションでその情報を使用できる可能性が高くなります。<codeph class="+ topic/ph pr-d/codeph ">setData()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">setDataHandler()</codeph> メソッドを使用して、Clipboard オブジェクトにデータを追加します。</p> 
 
 <p class="- topic/p ">標準形式は次のとおりです。</p>
 <ul class="- topic/ul "><li class="- topic/li ">BITMAP_FORMAT：BitmapData オブジェクト（AIR のみ）</li><li class="- topic/li ">FILE_LIST_FORMAT：File オブジェクトの配列（AIR のみ）</li><li class="- topic/li ">HTML_FORMAT：HTML 形式のストリングデータ</li><li class="- topic/li ">TEXT_FORMAT：ストリングデータ</li><li class="- topic/li ">RICH_TEXT_FORMAT：リッチテキストフォーマットデータを含む ByteArray</li><li class="- topic/li ">URL_FORMAT：URL ストリング（AIR のみ）</li></ul>
 <p class="- topic/p ">ClipboardFormats クラスに標準形式の名前のこれらの定数が定義されます。</p>
 
 <p class="- topic/p ">オペレーティングシステムとの間で転送が行われると、<ph class="- topic/ph "> ActionScript</ph> データ型とネイティブオペレーティングシステムのクリップボード形式との間で標準形式が自動的に変換されます。</p>
 
 <p class="- topic/p ">アプリケーションで定義された形式を使用して、<ph class="- topic/ph ">ActionScript</ph> オブジェクトを Clipboard オブジェクトに追加できます。オブジェクトを直列化できる場合、参照とオブジェクトのクローンの両方を使用できるようになります。オブジェクト参照は、元のアプリケーション内でのみ有効です。</p>
 
 <p class="- topic/p ">転送する情報を特定の形式に変換するための計算の負荷が大きい場合は、変換を実行する関数の名前を指定できます。この関数は、特定の形式が受信側のコンポーネントまたはアプリケーションによって読み取られた場合にのみ呼び出されます。<codeph class="+ topic/ph pr-d/codeph ">setDataHandler()</codeph> メソッドを使用して、遅延レンダリング関数を Clipboard オブジェクトに追加します。場合によっては、ドロップ操作が行われる前に、オペレーティングシステムが関数を呼び出すことがあります。例えば、ハンドラー関数を使用して、AIR アプリケーションからファイルシステムにドラッグされたファイルのデータを提供する場合、オペレーティングシステムでは、ドラッグジェスチャが AIR アプリケーションを離れるとすぐに、データハンドラー関数を呼び出します。その結果、通常はファイルデータのダウンロード中または作成中に、予期せず停止する場合があります。</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">AIR アプリケーションに関する注意：</b>HTML のドラッグ＆ドロップイベントおよびコピー＆ペーストイベントに対して送出されるイベントオブジェクトによって参照されるクリップボードオブジェクトは、AIR Clipboard オブジェクトと同じタイプではありません。JavaScript クリップボードオブジェクトについては、AIR 開発者ガイドを参照してください。</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Flash Player アプリケーションに関する注意：</b>Flash Player 10 では、クリップボードからのペースト操作には最初に「ペースト」コマンドに対応するショートカットキーを押すかコンテキストメニューの「ペースト」コマンドをマウスでクリックするなどのユーザーイベントが必要です。<codeph class="+ topic/ph pr-d/codeph ">Clipboard.getData()</codeph> は、InteractiveObject が paste イベントを受け取り、paste イベントを実行している場合にのみクリップボードのコンテンツを返します。他の環境での <codeph class="+ topic/ph pr-d/codeph ">Clipboard.getData()</codeph> の呼び出しは失敗します。アプリケーションサンドボックスの外部にあるコンテンツには AIR で同じ制限が適用されます。</p> 
 
 <p class="- topic/p ">Linux の場合、クリップボードのデータは AIR アプリケーションが終了すると失われます。</p>
  
 </apiDesc><example conref="examples\ClipboardExample.as" class="- topic/example "> 次の例では、ClipboardExample クラスを使用して、ある変数から別の変数にシステムクリップボードを介してストリングをコピーします（Adobe AIR の場合）。これを行うには、以下の手順を実行します。
 
 <ol class="- topic/ol "><li class="- topic/li ">データ（この例ではストリング）を <codeph class="+ topic/ph pr-d/codeph ">Clipboard.generalClipboard</codeph> に書き込みます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Clipboard.generalClipboard</codeph> からクリップボード定数を読み取ります。</li></ol>
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>クリップボードのデータアクセスに対するセキュリティ上の制限により、この例は Flash Player では機能しません。Flash Player の場合、<codeph class="+ topic/ph pr-d/codeph ">paste</codeph> イベントハンドラーでは Clipboard オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">getData()</codeph> メソッドのみ呼び出すことができます。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.display.Sprite;
    import flash.desktop.Clipboard;
    import flash.desktop.ClipboardFormats;
    import flash.desktop.ClipboardTransferMode;

    public class ClipboardExample extends Sprite
    {
        public function ClipboardExample()
        {
            var sally:String = "Sally";
            var person:String;
            
            copy(sally);
            person = paste();
            trace(person); //traces: "Sally"
        }

        private function copy(text:String):void 
        {
            Clipboard.generalClipboard.clear();
            Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, text);
        }
        
        private function paste():String
        {
            if(Clipboard.generalClipboard.hasFormat(ClipboardFormats.TEXT_FORMAT))
            {
                return String(Clipboard.generalClipboard.getData(ClipboardFormats.TEXT_FORMAT));
            } 
            else 
            {
                return null;
            }
        }
        
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeDragManager" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeDragManager</linktext></link><link href="flash.desktop.xml#ClipboardFormats" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.ClipboardFormats</linktext></link><link href="flash.desktop.xml#ClipboardTransferMode" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.ClipboardTransferMode</linktext></link></related-links><apiConstructor id="flash.desktop:Clipboard:Clipboard" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Clipboard</apiName><shortdesc class="- topic/shortdesc ">
	空の Clipboard オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>the example located at examples\Clipboard.clipboard.1.as should not be displayed with FP10 docs because FP10 will throw an error when new Clipboard() is called.
	</internal></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Flash Player では、オペレーティングシステムのクリップボードのみを使用できるため、<codeph class="+ topic/ph pr-d/codeph ">new Clipboard()</codeph> は、Flash Player ではサポートされていません。オペレーティングシステムのクリップボードを使用するコピー＆ペースト操作に対しては、新しいクリップボードオブジェクトを作成する代わりに Clipboard.generalClipboard オブジェクトを使用します。AIR アプリケーションでは、エラーはスローされません。
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	空の Clipboard オブジェクトを作成します。
	
	<p class="- topic/p ">Clipboard オブジェクトを作成し、Adobe AIR でのネイティブなドラッグ＆ドロップジェスチャのデータを保持します。Clipboard オブジェクトは 1 つのドラッグ＆ドロップジェスチャにのみ使用できます。再利用することはできません。</p>
	
	<p class="- topic/p ">コピー＆ペースト操作用に Clipboard オブジェクトを作成しないでください。代わりに単一の <codeph class="+ topic/ph pr-d/codeph ">Clipboard.generalClipboard</codeph> オブジェクトを使用してください。</p>
	
	</apiDesc><example conref="examples\Clipboard.clipboard.1.as" class="- topic/example "> 次の例では、NativeDragManager クラスで使用する新しいクリップボードを作成します。
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>オペレーティングシステムのクリップボードを使用するコピー &amp; ペースト操作に対しては、新しいクリップボードを作成する代わりに <codeph class="+ topic/ph pr-d/codeph ">Clipboard.generalClipboard</codeph> オブジェクトを使用します。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 import flash.desktop.Clipboard;
 
 var clipboard:Clipboard = new Clipboard();
</codeblock></example></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#Clipboard/generalClipboard" class="- topic/link "><linktext class="- topic/linktext ">generalClipboard</linktext></link></related-links></apiConstructor><apiOperation id="flash.desktop:Clipboard:clearData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clearData</apiName><shortdesc class="- topic/shortdesc ">
	指定された形式のデータ表現を削除します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このコンテキストでは、generalClipboard.clearData() の呼び出しは許可されません。Flash Player では、このメソッドの呼び出しは、キー入力やマウスのクリックなどのユーザーイベントの処理時にのみ成功します。AIR では、この制限はアプリケーションセキュリティサンドボックス外のコンテンツにのみ適用されます。
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">format</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">削除するデータ形式です。
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	指定された形式のデータ表現を削除します。
	
 	</apiDesc><example conref="examples\Clipboard.clearData.1.as" class="- topic/example "> 次の例では、システムクリップボードから、<codeph class="+ topic/ph pr-d/codeph ">ClipboardFormats.TEXT_FORMAT</codeph> 形式のすべてのデータをクリアします。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 import flash.desktop.ClipboardFormats;
 
 Clipboard.generalClipboard.clearData(ClipboardFormats.TEXT_FORMAT);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.desktop:Clipboard:clear" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clear</apiName><shortdesc class="- topic/shortdesc ">
	この Clipboard オブジェクトからすべてのデータ表現を削除します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このコンテキストでは、generalClipboard.clear() の呼び出しは許可されません。Flash Player では、このメソッドの呼び出しは、キー入力やマウスのクリックなどのユーザーイベントの処理時にのみ成功します。AIR では、この制限はアプリケーションセキュリティサンドボックス外のコンテンツにのみ適用されます。
  	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	この Clipboard オブジェクトからすべてのデータ表現を削除します。
	
 	</apiDesc><example conref="examples\Clipboard.clear.1.as" class="- topic/example "> 次の例では、システムクリップボードをクリアします。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 Clipboard.generalClipboard.clear();
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.desktop:Clipboard:getData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getData</apiName><shortdesc class="- topic/shortdesc ">
	指定された形式のデータが存在する場合、クリップボードデータを取得します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">transferMode</codeph> は、ClipboardTransferMode クラスで定義された名前のいずれかではありません。
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">要求された Clipboard オブジェクトは、スコープ内になくなります（AIR のみ）。
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このコンテキストでは、クリップボードからの読み取りまたはクリップボードへの書き込みは許可されません。Flash Playerでは、このメソッドの呼び出しは<codeph class="+ topic/ph pr-d/codeph ">paste</codeph> イベントの処理時にのみ成功します。AIR では、この制限はアプリケーションセキュリティサンドボックス外のコンテンツにのみ適用されます。
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データ形式に対応するタイプのオブジェクトです。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">format</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">返すデータ形式です。フォーマットストリングには、ClipboardFormats クラスに定義された標準の名前のいずれか、またはアプリケーションで定義された名前を含めることができます。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">transferMode</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">originalPreferred</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">アプリケーションで定義されたデータ形式にアクセスするときに、参照または直列化されたコピーを返すかどうかを指定します。この値は、ClipboardTransferMode クラスに定義されている名前のいずれかにする必要があります。標準データ形式では、この値は無視されます。コピーは常に返されます。
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	指定された形式のデータが存在する場合、クリップボードデータを取得します。
	
	<p class="- topic/p ">Flash Playerでは、<codeph class="+ topic/ph pr-d/codeph ">getData()</codeph> の呼び出しは <codeph class="+ topic/ph pr-d/codeph ">paste</codeph> イベントハンドラー内で実行する必要があります。AIR では、この制限はアプリケーションセキュリティサンドボックス外のコンテンツにのみ適用されます。</p>
	
	<p class="- topic/p ">標準のデータ形式にアクセスすると、対応する Flash データタイプの新しいオブジェクトとしてデータが返されます。</p>
	
	<p class="- topic/p ">アプリケーションで定義された形式にアクセスする場合、<codeph class="+ topic/ph pr-d/codeph ">transferMode</codeph> パラメーターの値によって、元のオブジェクトへの参照を返すか、元のオブジェクトの直列化されたコピーが格納された匿名オブジェクトを返すかが決まります。<codeph class="+ topic/ph pr-d/codeph ">originalPreferred</codeph> モードまたは <codeph class="+ topic/ph pr-d/codeph ">clonePreferred</codeph> モードを指定すると、適切なバージョンを使用できない場合に代わりのバージョンが返されます。<codeph class="+ topic/ph pr-d/codeph ">originalOnly</codeph> モードまたは <codeph class="+ topic/ph pr-d/codeph ">cloneOnly</codeph> モードを指定すると、要求されたバージョンを使用できない場合に <codeph class="+ topic/ph pr-d/codeph ">null</codeph> が返されます。</p>
	
	</apiDesc><example conref="examples\Clipboard.getData.1.as" class="- topic/example "> 次の例では、システムクリップボードからテキスト（存在する場合）を読み込みます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 import flash.desktop.ClipboardFormats;

 var pasteData:String = Clipboard.generalClipboard.getData(ClipboardFormats.TEXT_FORMAT) as String;
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#Clipboard/setData()" class="- topic/link "><linktext class="- topic/linktext ">setData()</linktext></link><link href="flash.desktop.xml#ClipboardFormats" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.ClipboardFormats</linktext></link><link href="flash.desktop.xml#ClipboardTransferMode" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.ClipboardTransferMode</linktext></link></related-links></apiOperation><apiOperation id="flash.desktop:Clipboard:hasFormat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasFormat</apiName><shortdesc class="- topic/shortdesc ">
	指定された形式のデータがこの Clipboard オブジェクトに存在するかどうかをチェックします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">要求された Clipboard オブジェクトは、スコープ内になくなります。
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このコンテキストでは、クリップボードからの読み取りまたはクリップボードへの書き込みは許可されません。
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定された形式のデータが存在する場合、<codeph class="+ topic/ph pr-d/codeph ">true</codeph> になります。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">format</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">チェックする形式のタイプです。
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	指定された形式のデータがこの Clipboard オブジェクトに存在するかどうかをチェックします。
	
	<p class="- topic/p ">ClipboardFormats クラスの定数を使用して、標準の形式名を参照します。</p>
	
	</apiDesc><example conref="examples\Clipboard.hasFormat.1.as" class="- topic/example "> 次の例では、システムクリップボードを調べて、テキスト形式のデータを使用できるかどうか判別します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
if(Clipboard.generalClipboard.hasFormat(ClipboardFormats.TEXT_FORMAT)){
    //do something 
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#ClipboardFormats" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.ClipboardFormats</linktext></link></related-links></apiOperation><apiOperation id="flash.desktop:Clipboard:setDataHandler" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setDataHandler</apiName><shortdesc class="- topic/shortdesc ">
	転送用のデータを生成するハンドラー関数に参照を追加します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">format</codeph> または <codeph class="+ topic/ph pr-d/codeph ">handler</codeph> は <codeph class="+ topic/ph pr-d/codeph ">null</codeph> です。
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">要求された Clipboard オブジェクトは、スコープ内になくなります（AIR のみ）。
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このコンテキストでは、クリップボードからの読み取りまたはクリップボードへの書き込みは許可されません。Flash Player では、このメソッドの呼び出しは、キー入力やマウスのクリックなどのユーザーイベントの処理時にのみ成功します。AIR では、この制限はアプリケーションセキュリティサンドボックス外のコンテンツにのみ適用されます。
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ハンドラーが正常に設定された場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph>、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> になります。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">format</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">転送するデータを返す関数です。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">handler</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データ形式です。 
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">serializable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> を指定するのは、<codeph class="+ topic/ph pr-d/codeph ">handler</codeph> で返されるオブジェクトを直列化（および非直列化）できる場合です。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	転送用のデータを生成するハンドラー関数に参照を追加します。
	
	<p class="- topic/p ">ハンドラー関数を使用して、実際にデータにアクセスするまで、データの作成またはレンダリングを遅らせます。</p>
	
	<p class="- topic/p ">ハンドラー関数は、指定された形式に適合するデータ型を返す必要があります。</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">形式</entry><entry class="- topic/entry ">返す型</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ClipboardFormats.TEXT_FORMAT</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">String</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ClipboardFormats.HTML_FORMAT</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">String</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ClipboardFormats.URL_FORMAT</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">String</codeph>（AIR のみ）</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ClipboardFormats.RICH_TEXT_FORMAT</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ByteArray</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ClipboardFormats.BITMAP_FORMAT</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">BitmapData</codeph>（AIR のみ）</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ClipboardFormats.FILE_LIST_FORMAT</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">File</codeph> の配列（AIR のみ）</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ClipboardFormats.FILE_PROMISE_LIST_FORMAT</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">File</codeph> の配列（AIR のみ）</entry></row><row class="- topic/row "><entry class="- topic/entry ">カスタムフォーマット名</entry><entry class="- topic/entry ">void 以外</entry></row></tbody></tgroup></adobetable>
	
	<p class="- topic/p ">指定された形式のデータを読み取る場合にのみ、ハンドラー関数が呼び出されます。場合によっては、ドロップ操作が行われる前に、オペレーティングシステムが関数を呼び出すことがあります。例えば、ハンドラー関数を使用して、AIR アプリケーションからファイルシステムにドラッグされたファイルのデータを提供する場合、オペレーティングシステムでは、ドラッグジェスチャが AIR アプリケーションを離れるとすぐに、データハンドラー関数を呼び出します。その結果、通常はファイルデータのダウンロード中または作成中に、予期せず停止する場合があります。この目的では、URLFilePromise を代わりに使用できます。</p>
	 
	<p class="- topic/p ">基になるデータは、アプリケーションでそのデータを保護する手順を実行しない場合、ハンドラーを追加した時点からデータを読み取る時点までの間変更できます。ハンドラー関数によって表されるクリップボード上のデータが複数回読み取られた場合の動作は保証されません。クリップボードからは、最初の関数呼び出しによって作成されたデータが返される場合もあれば、関数が再度呼び出される場合もあります。いずれの動作にも依存しないでください。</p>
	
	
	<p class="- topic/p ">Adobe AIR のアプリケーションサンドボックスでは、いつでも <codeph class="+ topic/ph pr-d/codeph ">setDataHandler()</codeph> を呼び出すことができます。他のコンテキストでは、キー入力やマウスクリックなどのユーザー操作に応答する場合にのみ、<codeph class="+ topic/ph pr-d/codeph ">setDataHandler()</codeph> を呼び出すことができます。</p>
	
	<p class="- topic/p ">この Clipboard オブジェクトにデータを直接追加するには、代わりに <codeph class="+ topic/ph pr-d/codeph ">setData()</codeph> メソッドを使用します。同じ形式名を使用して <codeph class="+ topic/ph pr-d/codeph ">setData()</codeph> メソッドと <codeph class="+ topic/ph pr-d/codeph ">setDataHandler()</codeph> メソッドの両方を呼び出すと、ハンドラー関数は呼び出されません。</p>
	
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>Mac OS で <codeph class="+ topic/ph pr-d/codeph ">format</codeph> パラメーターに <codeph class="+ topic/ph pr-d/codeph ">ClipboardFormats.URL_FORMAT</codeph> を設定した場合、URL が転送されるのは、ハンドラー関数が有効な URL を返す場合に限られます。それ以外の場合、Clipboard オブジェクトは空になります（<codeph class="+ topic/ph pr-d/codeph ">getData()</codeph> を呼び出すと、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> が返されます）。</p>
	
	</apiDesc><example conref="examples\Clipboard.setDataHandler.1.as" class="- topic/example "> 次の例では、遅延データ関数を使用して、システムクリップボードに乱数を追加します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 import flash.desktop.ClipboardFormats;
 
 Clipboard.generalClipboard.setDataHandler(ClipboardFormats.TEXT_FORMAT, randomNumberGenerator);

 public function randomNumberGenerator():String{
     return Math.random().toString();
 }
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#Clipboard/setData()" class="- topic/link "><linktext class="- topic/linktext ">setData()</linktext></link><link href="flash.desktop.xml#ClipboardFormats" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.ClipboardFormats</linktext></link><link href="" invalidHref="flash.desktop.URLFilePromise.xml" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.URLFilePromise</linktext></link></related-links></apiOperation><apiOperation id="flash.desktop:Clipboard:setData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setData</apiName><shortdesc class="- topic/shortdesc ">
	転送する情報の指定されたデータ形式の表現を追加します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">要求された Clipboard オブジェクトは、スコープ内になくなります（これは、ドラッグ＆ドロップ操作で作成されたクリップボードでのみ発生する可能性があります）。
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このコンテキストでは、クリップボードからの読み取りまたはクリップボードへの書き込みは許可されません。Flash Player では、このメソッドの呼び出しは、キー入力やマウスのクリックなどのユーザーイベントの処理時にのみ成功します。AIR では、この制限はアプリケーションセキュリティサンドボックス外のコンテンツにのみ適用されます。
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">format</codeph> または <codeph class="+ topic/ph pr-d/codeph ">data</codeph> は <codeph class="+ topic/ph pr-d/codeph ">null</codeph> です。
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データが正常に設定された場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph>、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> になります。Flash Player では、<codeph class="+ topic/ph pr-d/codeph ">format</codeph> が ClipboardFormats のサポートされないメンバーである場合、<codeph class="+ topic/ph pr-d/codeph ">false</codeph> が返されます（Flash Player では、<codeph class="+ topic/ph pr-d/codeph ">ClipboardFormats.URL_FORMAT</codeph>、<codeph class="+ topic/ph pr-d/codeph ">ClipboardFormats.FILE_LIST_FORMAT</codeph>、<codeph class="+ topic/ph pr-d/codeph ">ClipboardFormats.FILE_PROMISE_LIST_FORMAT</codeph> または <codeph class="+ topic/ph pr-d/codeph ">ClipboardFormats.BITMAP_FORMAT</codeph> はサポートされていません）。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">format</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データ形式です。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">data</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">追加する情報です。 
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">serializable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">直列化（および非直列化）が可能なオブジェクトの場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を指定します。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	転送する情報の指定されたデータ形式の表現を追加します。
	
	<p class="- topic/p ">Adobe AIR のアプリケーションサンドボックスでは、いつでも <codeph class="+ topic/ph pr-d/codeph ">setData()</codeph> を呼び出すことができます。他のコンテキストでは、キー入力やマウスクリックなどのユーザー操作に応答する場合にのみ、<codeph class="+ topic/ph pr-d/codeph ">setData()</codeph> を呼び出すことができます。</p>
	
	<p class="- topic/p ">同じ情報の別の表現を、異なる形式でクリップボードに追加できます。これにより、他の多くのコンポーネントまたはアプリケーションでもデータを利用できるようになります。例えば、イメージ編集アプリケーション用のビットマップデータ、URL およびネイティブファイルシステムへの転送用のエンコードされた PNG ファイルとしてイメージを追加できます。</p>
	
	<p class="- topic/p ">data パラメーターは、指定された形式に適合するデータ型にする必要があります。</p>
	<adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">形式</entry><entry class="- topic/entry ">型</entry><entry class="- topic/entry ">説明</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ClipboardFormats.TEXT_FORMAT</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">String</codeph></entry><entry class="- topic/entry ">ストリングデータです。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ClipboardFormats.HTML_FORMAT</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">String</codeph></entry><entry class="- topic/entry ">HTML ストリングデータです。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ClipboardFormats.URL_FORMAT</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">String</codeph></entry><entry class="- topic/entry ">URL ストリングです（AIR のみ）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ClipboardFormats.RICH_TEXT_FORMAT</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ByteArray</codeph></entry><entry class="- topic/entry ">リッチテキストフォーマットデータです。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ClipboardFormats.BITMAP_FORMAT</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">BitmapData</codeph></entry><entry class="- topic/entry ">ビットマップデータ（AIR のみ)</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ClipboardFormats.FILE_LIST_FORMAT</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">File</codeph> の配列</entry><entry class="- topic/entry ">ファイルの配列（AIR のみ）</entry></row><row class="- topic/row "><entry class="- topic/entry ">カスタムフォーマット名</entry><entry class="- topic/entry ">すべて</entry><entry class="- topic/entry ">オブジェクト参照および直列化されたクローンです。</entry></row></tbody></tgroup></adobetable>
	
	<p class="- topic/p ">カスタムの形式名の先頭を "air:" または "flash:" にすることはできません。カスタムの形式を使用するときに名前が競合するのを避けるために、アプリケーション ID やパッケージ名を接頭辞として使用して、「com.example.applicationName.dataPacket」のような形式にすることができます。</p>
	
	<p class="- topic/p ">アプリケーション内または AIR アプリケーション間で転送する場合、<codeph class="+ topic/ph pr-d/codeph ">serializable</codeph> パラメーターによって参照とコピーの両方を使用できるのか、オブジェクトへの参照のみを使用できるのかが決まります。<codeph class="+ topic/ph pr-d/codeph ">serializable</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定すると、参照とデータオブジェクトのコピーの両方を使用できるようになります。<codeph class="+ topic/ph pr-d/codeph ">serializable</codeph> を <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定すると、オブジェクト参照のみを使用できるようになります。オブジェクト参照は、現在のアプリケーション内でのみ有効です。そのため、<codeph class="+ topic/ph pr-d/codeph ">serializable</codeph> が <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定されている場合、その形式のデータは、他の Flash Player または AIR アプリケーションで使用できないことも意味します。コンポーネントは、目的の形式のデータにアクセスするときに適切なクリップボード転送モードを設定することにより、参照を取得するかオブジェクトのコピーを取得するかを選択できます。</p>
	
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>標準形式は、サポートされているアプリケーションの外部にデータをペーストまたはドラッグする場合、常にネイティブ形式に変換されます。そのため、<codeph class="+ topic/ph pr-d/codeph ">serializable</codeph> パラメーターの値は、Flash ベース以外のアプリケーションによる標準形式のデータの使用に影響を与えません。</p>
	
	<p class="- topic/p ">ある形式でのデータのレンダリングを遅らせるには、代わりに <codeph class="+ topic/ph pr-d/codeph ">setDataHandler()</codeph> メソッドを使用します。<codeph class="+ topic/ph pr-d/codeph ">setData()</codeph> メソッドと <codeph class="+ topic/ph pr-d/codeph ">setDataHandler()</codeph> メソッドの両方を使用して同じ形式名でデータ表現を追加すると、ハンドラー関数は呼び出されません。</p>
	
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>Mac OS で <codeph class="+ topic/ph pr-d/codeph ">format</codeph> パラメーターに <codeph class="+ topic/ph pr-d/codeph ">ClipboardFormats.URL_FORMAT</codeph> を設定した場合、URL が転送されるのは、その URL が有効である場合に限られます。それ以外の場合、Clipboard オブジェクトは空になります（<codeph class="+ topic/ph pr-d/codeph ">getData()</codeph> を呼び出すと、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> が返されます）。</p> 
	
	</apiDesc><example conref="examples\Clipboard.setData.1.as" class="- topic/example "> 次の例では、コンテンツをテキスト形式と HTML 形式の両方でシステムクリップボードに追加します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 import flash.desktop.ClipboardFormats;
 
 var htmlString:String = "&lt;html>&lt;body>Body content&lt;/body>&lt;/html>";
 Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, urlString);
 Clipboard.generalClipboard.setData(ClipboardFormats.HTML_FORMAT, urlString);
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#Clipboard/setDataHandler()" class="- topic/link "><linktext class="- topic/linktext ">setDataHandler()</linktext></link><link href="flash.desktop.xml#Clipboard/getData()" class="- topic/link "><linktext class="- topic/linktext ">getData()</linktext></link><link href="flash.desktop.xml#ClipboardFormats" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.ClipboardFormats</linktext></link><link href="flash.desktop.xml#ClipboardTransferMode" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.ClipboardTransferMode</linktext></link></related-links></apiOperation><apiValue id="flash.desktop:Clipboard:formats:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">formats</apiName><shortdesc class="- topic/shortdesc ">
	この Clipboard オブジェクトで使用できるデータ形式の名前が含まれたストリングの配列です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	この Clipboard オブジェクトで使用できるデータ形式の名前が含まれたストリングの配列です。
	
	<p class="- topic/p ">ClipboardFormats クラスに標準形式の名前のストリング定数が定義されます。この他の、アプリケーションで定義されたストリングは、データをオブジェクトとして転送する場合、形式名として使用することもできます。</p>
	
	</apiDesc><example conref="examples\Clipboard.formats.1.as" class="- topic/example "> 次の例では、システムクリップボードの <codeph class="+ topic/ph pr-d/codeph ">formats</codeph> 配列を読み取ります。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var availableFormats:Array = Clipboard.generalClipboard.formats;
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#ClipboardFormats" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.ClipboardFormats</linktext></link></related-links></apiValue><apiValue id="flash.desktop:Clipboard:generalClipboard:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">generalClipboard</apiName><shortdesc class="- topic/shortdesc ">
	 オペレーティングシステムクリップボードです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.desktop:Clipboard</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 オペレーティングシステムクリップボードです。
	 
	 <p class="- topic/p ">システムのクリップボードにペーストされたデータは、他のアプリケーションからも利用できます。それには Web ブラウザー内で実行される保護されていないリモートコードも含まれます。</p>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>Flash Player 10 アプリケーションでは、クリップボードからのペースト操作には最初に「ペースト」コマンドに対応するショートカットキーを押すかコンテキストメニューの「ペースト」コマンドをマウスでクリックするなどのユーザーイベントが必要です。<codeph class="+ topic/ph pr-d/codeph ">Clipboard.getData()</codeph> は、InteractiveObject が paste イベントを受け取り、paste イベントを実行している場合にのみクリップボードのコンテンツを返します。他の環境での <codeph class="+ topic/ph pr-d/codeph ">Clipboard.getData()</codeph> の呼び出しは失敗します。アプリケーションサンドボックスの外部にあるコンテンツには AIR で同じ制限が適用されます。</p>
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">generalClipboard</codeph> オブジェクトは自動的に作成されます。このプロパティには Clipboard の別のインスタンスを割り当てることはできません。その代わりに、<codeph class="+ topic/ph pr-d/codeph ">getData()</codeph> メソッドと <codeph class="+ topic/ph pr-d/codeph ">setData()</codeph> メソッドを使用して既存のオブジェクトに対してデータの読み書きを行います。</p>
	 
	 <p class="- topic/p ">クリップボードは、新しいデータを書き込む前に必ずクリアして、すべての形式の古いデータを確実に消去する必要があります。</p>
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">generalClipboard</codeph> オブジェクトを AIR NativeDragManager に渡すことはできません。AIR アプリケーションでのネイティブなドラッグ＆ドロップ操作に対しては、新しい Clipboard オブジェクトを作成してください。</p>
	 
	 </apiDesc><example conref="examples\Clipboard.generalClipboard.1.as" class="- topic/example "> オペレーティングシステムのクリップボードに書き込む場合
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 import flash.desktop.ClipboardFormats;
 
 var copy:String = "A string to copy to the system clipboard.";
 Clipboard.generalClipboard.clear();
 Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, copy);
</codeblock></example><example conref="examples\Clipboard.generalClipboard.2.as" class="- topic/example "> オペレーティングシステムのクリップボードから読み取る場合
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 import flash.desktop.ClipboardFormats;
 
 var pasteData:String  = Clipboard.generalClipboard.getData(ClipboardFormats.TEXT_FORMAT) as String;
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.desktop:Clipboard:supportsFilePromise:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">supportsFilePromise</apiName><shortdesc class="- topic/shortdesc ">
    クライアントシステムでファイルプロミスのクリップボードがサポートされているかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    クライアントシステムでファイルプロミスのクリップボードがサポートされているかどうかを示します。 
    
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.desktop:NotificationType" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NotificationType</apiName><shortdesc class="- topic/shortdesc ">
 NotificationType クラスは、priority パラメーター（DockIcon bounce() メソッドのパラメーター）と type パラメーター（NativeWindow notifyUser() メソッドのパラメーター）で使用する定数を定義します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><Defines>constants for the supported urgency ratings of a notification.
 
 </Defines></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 NotificationType クラスは、<codeph class="+ topic/ph pr-d/codeph ">priority</codeph> パラメーター（DockIcon <codeph class="+ topic/ph pr-d/codeph ">bounce()</codeph> メソッドのパラメーター）と <codeph class="+ topic/ph pr-d/codeph ">type</codeph> パラメーター（NativeWindow <codeph class="+ topic/ph pr-d/codeph ">notifyUser()</codeph> メソッドのパラメーター）で使用する定数を定義します。
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#DockIcon/bounce()" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.DockIcon.bounce()</linktext></link><link href="flash.display.xml#NativeWindow/notifyUser()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeWindow.notifyUser()</linktext></link></related-links><apiValue id="flash.desktop:NotificationType:CRITICAL" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CRITICAL</apiName><shortdesc class="- topic/shortdesc ">
	 通知警告が重要な内容であり、ユーザーは迅速に注意を払う必要があることを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">critical</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 通知警告が重要な内容であり、ユーザーは迅速に注意を払う必要があることを指定します。
	 
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:NotificationType:INFORMATIONAL" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">INFORMATIONAL</apiName><shortdesc class="- topic/shortdesc ">
	 通知警告が実質上情報の通知のみを目的としていて、ユーザーがそれを無視しても問題がないことを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">informational</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 通知警告が実質上情報の通知のみを目的としていて、ユーザーがそれを無視しても問題がないことを指定します。
	 
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.desktop:IFilePromise" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">IFilePromise</apiName><shortdesc class="- topic/shortdesc ">
 IFilePromise インターフェイスでは、AIR ランタイムがファイルプロミス用のデータの読み取りに使用するインターフェイスを定義します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiInterface class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiInterface "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier "/></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 IFilePromise インターフェイスでは、AIR ランタイムがファイルプロミス用のデータの読み取りに使用するインターフェイスを定義します。
 
 <p class="- topic/p ">ファイルプロミスはドラッグ＆ドロップクリップボード形式です。これにより、ユーザーは、まだ存在しないファイルを AIR アプリケーションからドラッグできます。AIR は、IFilePromise インターフェイスで定義されたメソッドおよびプロパティを使用して、ファイルプロミスがドロップされたときに書き込まれるデータにアクセスします。</p>
 
 <p class="- topic/p ">ファイルプロミスが適切なターゲットにドロップされると、AIR は IFilePromise の <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> メソッドを呼び出します。このメソッドを実装すると、データプロバイダーが IDataInput インターフェイスを実装するオブジェクトとして返される必要があります。プロバイダーオブジェクトには、ビルトインクラス（ByteArray、FileStream、Socket、URLStream など）のいずれかまたはカスタムクラスを使用できます。</p>
  
 <p class="- topic/p ">ByteArray などを使用して、データプロバイダーからのデータに同期的にアクセスする場合、AIR は IDataInput の <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> プロパティが示すデータ量を読み取り、それを書き込み先のファイルに書き込みます。</p>
 
 <p class="- topic/p ">Socket などを使用して、データプロバイダーからのデータに非同期的にアクセスする場合、AIR はプロバイダーが送出したイベントを使用し、データの読み取り処理を規制して、データをファイルに書き込みます。データは、complete イベントまたは close イベントを受信するまで、progress イベントごとに読み取られます。実行時に以下のイベントを監視します（ただし、データプロバイダーは必ずしもすべてのイベントを送出する必要はありません）。</p>
 <ul class="- topic/ul "><li class="- topic/li ">Event.OPEN</li><li class="- topic/li ">ProgressEvent.PROGRESS</li><li class="- topic/li ">ProgressEvent.SOCKET_DATA</li><li class="- topic/li ">Event.COMPLETE</li><li class="- topic/li ">Event.CLOSE</li><li class="- topic/li ">IOErrorEvent.IOERROR</li><li class="- topic/li ">SecurityErrorEvent.SECURITY_ERROR</li><li class="- topic/li ">HTTPStatusEvent.HTTP_STATUS</li><li class="- topic/li ">HTTPStatusEvent.HTTP_RESPONSE_STATUS</li></ul>
 
 <p class="- topic/p ">カスタムデータプロバイダーのクラスは、データが使用できるようになると、<codeph class="+ topic/ph pr-d/codeph ">progress</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">socketData</codeph> イベントを送出します。同様に、要求されたデータがすべて読み取られると、<codeph class="+ topic/ph pr-d/codeph ">complete</codeph> または <codeph class="+ topic/ph pr-d/codeph ">close</codeph> のいずれかのイベントが送出されます。エラーイベントは、データ転送が失敗し、処理を中止する必要があることをランタイムに通知します。必要に応じて、他のイベントが送出され、エラー処理やアプリケーションロジックのデバッグに役立ちます。</p>
 
 <p class="- topic/p "> IFilePromise で定義されたメソッドは、ドラッグ＆ドロップ操作の完了後に AIR ランタイムによって呼び出されることを意図しています。通常、開発者がこれらのメソッドをコードから呼び出すことはありません。 </p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>air.desktop の URLFilePromise クラスは IFilePromise インターフェイスを実装し、URLStream をデータプロバイダーとして使用します。air.desktop ライブラリは個別の SWF ファイルおよび SWC ファイルとして、AIR SDK に含まれています。</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#Clipboard" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.Clipboard</linktext></link><link href="flash.desktop.xml#ClipboardFormats" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.ClipboardFormats</linktext></link><link href="flash.desktop.xml#NativeDragManager" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeDragManager</linktext></link></related-links><apiOperation id="flash.desktop:IFilePromise:flash.desktop:IFilePromise:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
    データの読み取りがすべて完了したときに、AIR ランタイムによって呼び出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    データの読み取りがすべて完了したときに、AIR ランタイムによって呼び出されます。
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">close()</codeph> が呼び出された後に、<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> によって返されたオブジェクト参照に対して、メソッドが呼び出されることはありません。データプロバイダーオブジェクトは、破棄しても問題ありません。</p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.desktop:IFilePromise:flash.desktop:IFilePromise:open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><shortdesc class="- topic/shortdesc ">
    データプロバイダーオブジェクトを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">IDataInput インターフェイスを実装している IDataInput オブジェクトです。非同期的にデータが提供される場合、返されるオブジェクトは IEventDispatcher も実装している必要があります。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:IDataInput</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    データプロバイダーオブジェクトを返します。
    
    <p class="- topic/p ">データプロバイダーオブジェクトは、データの読み取りメソッドを定義する IDataInput インターフェイスを実装している必要があります。IFilePromise の <codeph class="+ topic/ph pr-d/codeph ">isAsync</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返す場合、データプロバイダーオブジェクトは IEventDispatcher インターフェイスも実装している必要があります。次のビルトインクラスは、データプロバイダーとして使用できます。</p>
    <ul class="- topic/ul "><li class="- topic/li ">ByteArray（同期）</li><li class="- topic/li ">FileStream（同期または非同期）</li><li class="- topic/li ">Socket（非同期）</li><li class="- topic/li ">URLStream（非同期）</li></ul>
    <p class="- topic/p ">必要なインターフェイスを実装している（または、別のクラスを拡張してインターフェイスを実装する）カスタムクラスのオブジェクトも提供できます。</p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.desktop:IFilePromise:flash.desktop:IFilePromise:reportError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">reportError</apiName><shortdesc class="- topic/shortdesc ">
    AIR ランタイムによって呼び出され、データプロバイダーオブジェクトからデータを読み取る際に発生するエラーを IFilePromise に通知します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">e</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:ErrorEvent</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">エラーの詳細情報が含まれているエラーイベントです。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    AIR ランタイムによって呼び出され、データプロバイダーオブジェクトからデータを読み取る際に発生するエラーを IFilePromise に通知します。
     
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.desktop:IFilePromise:flash.desktop:IFilePromise:isAsync:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isAsync</apiName><shortdesc class="- topic/shortdesc ">
    非同期のデータ転送がサポートされているかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    非同期のデータ転送がサポートされているかどうかを示します。
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合、<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> メソッドによって返されたデータプロバイダーオブジェクトは、IEventDispatcher インターフェイスを実装している（またはクラスを拡張してこのインターフェイスを実装する）必要があります。データ転送は、<codeph class="+ topic/ph pr-d/codeph ">progress</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">socketData</codeph> イベントに基づいて実行されます。AIR は、<codeph class="+ topic/ph pr-d/codeph ">complete</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">close</codeph> イベントが送出されるまで、これらのデータの進行状況を示すイベントを待機します。</p>  
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">isAsync</codeph> が false を返すと、AIR ランタイムは、すべてのデータが直ちに使用可能であるとみなします。この場合、ランタイムはデータプロバイダーオブジェクトの <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> プロパティを読み取って、使用可能なデータ量を判断し、同期的にそのデータ量を読み取ります。</p> 
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:IFilePromise:flash.desktop:IFilePromise:relativePath:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">relativePath</apiName><shortdesc class="- topic/shortdesc ">
    このファイルプロミスによって作成されるファイルの相対パスとファイル名です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">相対パスが短縮形「..」を使用してドロップ先の 1 つ以上の親ディレクトリを辿っている場合。 
	
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    このファイルプロミスによって作成されるファイルの相対パスとファイル名です。
    
    <p class="- topic/p ">このプロパティでは、有効なパスを提供する必要があります。パスが有効でないと、ファイルプロミスがドロップされたときに、引数エラーがスローされます。</p>
    
    <p class="- topic/p ">パスにはサブディレクトリを含めることができ、このサブディレクトリは、ドロップ先に基づいて解決されます。サブディレクトリは必要に応じて作成されます。サブディレクトリを含める場合は、<codeph class="+ topic/ph pr-d/codeph ">File.separator</codeph> 定数を使用して、現在のオペレーティングシステムに対応した適切なパス区切り文字を挿入してください。短縮形「..」を使用して、親ディレクトリへは移動できません。移動しようとすると、引数エラーがスローされます。ファイルシステムで使用できない文字はパスから除去されます。この際、エラーはスローされません。</p>
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>クライアントコードでパスを設定できるようにするには、署名付きの setter 関数（<codeph class="+ topic/ph pr-d/codeph ">function set relativePath( value:String ):void</codeph>）を実装します。</p>
    
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.desktop:NativeProcessStartupInfo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NativeProcessStartupInfo</apiName><shortdesc class="- topic/shortdesc ">
 このクラスでは、ホストオペレーティングシステム上でプロセスの開始に使用する基本情報を提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 このクラスでは、ホストオペレーティングシステム上でプロセスの開始に使用する基本情報を提供します。作成されると、NativeProcess オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">start()</codeph> メソッドに渡されます。
 
 <p class="- topic/p ">ネイティブプロセスには、ネイティブインストーラーを使用してインストールされた AIR アプリケーション（拡張デスクトッププロファイル内のアプリケーション）のみがアクセスできます。 </p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="NativeProcess.html#start()" class="- topic/link "><linktext class="- topic/linktext ">NativeProcess.html#start()</linktext></link></related-links><apiConstructor id="flash.desktop:NativeProcessStartupInfo:NativeProcessStartupInfo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">NativeProcessStartupInfo</apiName><shortdesc class="- topic/shortdesc ">
	空の NativeProcessStartupInfo オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	空の NativeProcessStartupInfo オブジェクトを作成します。
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.desktop:NativeProcessStartupInfo:arguments:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">arguments</apiName><shortdesc class="- topic/shortdesc ">
	起動時にプロセスに渡されるコマンドライン引数です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiType value="Vector$String" name="type" class="- topic/state reference/state apiRef/apiType "/></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	起動時にプロセスに渡されるコマンドライン引数です。 
	
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">arguments</codeph> Vector 内の各ストリングは、含まれている文字列に関係なく、個別の引数として実行可能ファイルに渡されます。つまり、正確に 1 対 1 で対応し、再解釈されることはありません。AIR では、ストリング内でエスケープする必要のある文字（空白文字など）はすべて自動的にエスケープされます。</p>

	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:NativeProcessStartupInfo:executable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">executable</apiName><shortdesc class="- topic/shortdesc ">
    ホストオペレーティングシステム上の実行可能ファイルを参照する File オブジェクトです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">値に <codeph class="+ topic/ph pr-d/codeph ">null</codeph> が指定されている場合、ディレクトリを参照している場合または存在しないファイルを参照している場合。
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ホストオペレーティングシステム上の実行可能ファイルを参照する File オブジェクトです。このプロパティは、実行可能ファイルへのフルパス（必要な拡張子を含む）を示す必要があります。
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>Mac OS で、アプリケーションバンドル内の実行可能ファイルを起動する場合、File オブジェクトのパスには、app ファイルへのパスではなく、（バンドル内の）実行可能ファイルへのフルパスを含むようにしてください。 </p>
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:NativeProcessStartupInfo:workingDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">workingDirectory</apiName><shortdesc class="- topic/shortdesc ">
	新しいネイティブプロセス用の初期作業ディレクトリを参照する File オブジェクトです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">値が存在しないか、ディレクトリ以外の場合
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	新しいネイティブプロセス用の初期作業ディレクトリを参照する File オブジェクトです。<codeph class="+ topic/ph pr-d/codeph ">isDirectory</codeph> が false の場合に値が割り当てられると、ArgumentError がスローされます。
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.desktop:SystemIdleMode" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SystemIdleMode</apiName><shortdesc class="- topic/shortdesc ">
	 SystemIdleMode クラスは、システムのアイドル時の動作に関する定数値を提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 SystemIdleMode クラスは、システムのアイドル時の動作に関する定数値を提供します。これらの定数は NativeApplication クラスの <codeph class="+ topic/ph pr-d/codeph ">systemIdleMode</codeph> プロパティで使用されます。
	 
	 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/systemIdleMode" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication.systemIdleMode</linktext></link></related-links><apiValue id="flash.desktop:SystemIdleMode:KEEP_AWAKE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">KEEP_AWAKE</apiName><shortdesc class="- topic/shortdesc ">
		 システムがアイドルモードに入らないようにします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">keepAwake</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 システムがアイドルモードに入らないようにします。
		 
		 <p class="- topic/p ">Android のアプリケーションでは、アプリケーション記述子の DISABLE_KEYGUARD および WAKE_LOCK に Android 権限を指定する必要があります。そうしないと、Android ではこの設定が無視されます。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:SystemIdleMode:NORMAL" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NORMAL</apiName><shortdesc class="- topic/shortdesc ">
		 システムは、標準の「アイドルユーザー」動作を実行します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">normal</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 システムは、標準の「アイドルユーザー」動作を実行します。
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.desktop:ClipboardTransferMode" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ClipboardTransferMode</apiName><shortdesc class="- topic/shortdesc ">
 ClipboardTransferMode クラスは、transferMode パラメーター（Clipboard.getData() メソッドのパラメーター）の値として使用するモードの定数を定義します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Clipboard, ClipboardFormats and ClipboardTransferMode were all added to AIR 1.0. These are also being added, with some exceptions listed in this file, to FP10.
 </internal></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">クリップボード転送モードの定数を定義します。
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ClipboardTransferMode クラスは、<codeph class="+ topic/ph pr-d/codeph ">transferMode</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">Clipboard.getData()</codeph> メソッドのパラメーター）の値として使用するモードの定数を定義します。
 
 <p class="- topic/p ">転送モードでは、クリップボードに格納されているオブジェクトにアクセスするときに、参照またはコピーを返すかどうかについてのヒントが提供されます。</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#Clipboard/getData()" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.Clipboard.getData()</linktext></link></related-links><apiValue id="flash.desktop:ClipboardTransferMode:CLONE_ONLY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CLONE_ONLY</apiName><shortdesc class="- topic/shortdesc ">
    Clipboard オブジェクトは、コピーのみを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">cloneOnly</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Clipboard オブジェクトは、コピーのみを返します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:ClipboardTransferMode:CLONE_PREFERRED" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CLONE_PREFERRED</apiName><shortdesc class="- topic/shortdesc ">
    Clipboard オブジェクトは、コピーが存在する場合はコピーを返し、存在しない場合は参照を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">clonePreferred</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Clipboard オブジェクトは、コピーが存在する場合はコピーを返し、存在しない場合は参照を返します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:ClipboardTransferMode:ORIGINAL_ONLY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ORIGINAL_ONLY</apiName><shortdesc class="- topic/shortdesc ">
    Clipboard オブジェクトは、参照のみを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">originalOnly</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Clipboard オブジェクトは、参照のみを返します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:ClipboardTransferMode:ORIGINAL_PREFERRED" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ORIGINAL_PREFERRED</apiName><shortdesc class="- topic/shortdesc ">
    Clipboard オブジェクトは、参照が存在する場合は参照を返し、存在しない場合はコピーを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">originalPreferred</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Clipboard オブジェクトは、参照が存在する場合は参照を返し、存在しない場合はコピーを返します。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.desktop:NativeDragManager" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NativeDragManager</apiName><shortdesc class="- topic/shortdesc ">
 NativeDragManager クラスは、ドラッグ＆ドロップ操作を調整します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 NativeDragManager クラスは、ドラッグ＆ドロップ操作を調整します。ネイティブドラッグ＆ドロップ API を使用すると、ユーザーは、AIR アプリケーションとネイティブのオペレーティングシステムとの間、2 つの AIR アプリケーションの間または 1 つのアプリケーション内のコンポーネントの間でデータをドラッグできるようになります。
 
 <p class="- topic/p ">次の種類のデータを転送できます。</p>
 <ul class="- topic/ul "><li class="- topic/li ">ビットマップ</li><li class="- topic/li ">ファイル</li><li class="- topic/li ">テキスト</li><li class="- topic/li ">URL ストリング</li><li class="- topic/li ">直列化されたオブジェクト</li><li class="- topic/li ">オブジェクト参照（元のアプリケーション内でのみ有効）</li></ul>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>すべての NativeDragManager メンバーが静的メンバーです。このクラスのインスタンスを作成する必要はありません。</p>
 
 <p class="- topic/p ">ドラッグ＆ドロップ操作は、ユーザーが表示されたアイテムをクリックして別の場所にドラッグすると開始される、ユーザーインターフェイスのジェスチャです。ドラッグジェスチャを実行している間、AIR アプリケーションウィンドウ内を移動するにつれて、表示リスト上のインタラクティブオブジェクトによってネイティブドラッグイベントが送出されます。これらのイベントのハンドラーで NativeDragManager クラスのメソッドを呼び出すと、ドラッグしたアイテムをオブジェクトにドロップできるかどうかを示すことができます。これに応答してマウスポインターが変わり、ユーザーにフィードバックが提供されます。</p>
 
 <p class="- topic/p ">AIR プロファイルのサポート：<i class="+ topic/ph hi-d/i "/>この機能はテレビ用 AIR デバイスではサポートされません。また、すべてのモバイルデバイスでサポートされません。<codeph class="+ topic/ph pr-d/codeph ">NativeDragManager.isSupported</codeph> プロパティを使用して、サポートされているかどうかを実行時にテストすることができます。複数のプロファイル間での API サポートについて詳しくは、<xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">AIR プロファイルのサポート</xref>を参照してください。
 </p> 
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">ドラッグアクション</b></p>
 <p class="- topic/p ">通常、ドラッグ &amp; ドロップジェスチャは、<i class="+ topic/ph hi-d/i ">アクション</i>と呼ばれる 3 種類の操作に使用されます。これらのアクションの意味はアプリケーションのコンテキストに応じて異なるため、ランタイムではアクションに対して特定の動作は適用されません。ただし、アクションを適切に実装すると、アプリケーションに対するユーザーの操作性が向上します。
 </p> 
 
 <p class="- topic/p ">実行可能なアクションは次のとおりです。</p>
 <ul class="- topic/ul "><li class="- topic/li ">copy — データのコピーを作成し、元のデータには変更を加えません（1 つのアプリケーション内でオブジェクトをドラッグする場合、元のオブジェクトへの参照ではなくそのオブジェクト自体をコピーするときは注意が必要です）。</li><li class="- topic/li ">move — アイテムをあるリストから別のリストに移動する場合のように、元のコンテキストから、ドロップターゲットに定義されたコンテキストにデータを移動します。</li><li class="- topic/li ">link — アイテムを元のコンテキスト内に残したまま、元のデータへの参照またはショートカットを作成します。</li></ul>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">allowedActions</codeph> パラメーターを、ドラッグ操作を開始する <codeph class="+ topic/ph pr-d/codeph ">NativeDragManager.doDrag()</codeph> 呼び出しに指定することにより、実行可能なアクションをドラッグジェスチャに設定できます。<codeph class="+ topic/ph pr-d/codeph ">allowedActions</codeph> パラメーターを指定しない場合は、すべてのアクションが許可されます。NativeDragEvent オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">allowedActions</codeph> プロパティを使用すると、ドラッグ可能ターゲットで実行できるアクションを確認できます。また、実行できるのが互換性のないアクションのみのドロップを受け入れないようにできます（ただし、ランタイムでは適用できません）。</p>
 
 <p class="- topic/p ">ドロップターゲットが単一のアクションのみを実装している場合、オブジェクトは NativeDragManager の <codeph class="+ topic/ph pr-d/codeph ">dropAction</codeph> プロパティを、<codeph class="+ topic/ph pr-d/codeph ">nativeDragEnter</codeph> イベントおよび <codeph class="+ topic/ph pr-d/codeph ">nativeDragOver</codeph> イベントの両方のハンドラーで設定できます。ドロップの前にプロパティを設定することによって、ドラッグマネージャーはマウスポインターを更新してサポートされるアクションを示すことができ、ユーザーが修飾キーを使用して互換性のないアクションを選択することを防止できます。指定したアクションが許可されるアクションのいずれでもない場合、ターゲットが <codeph class="+ topic/ph pr-d/codeph ">acceptDrop()</codeph> メソッドを呼び出しても、ドロップは許可されません。</p>
 
 <p class="- topic/p ">ドロップを受け入れる場合は、<codeph class="+ topic/ph pr-d/codeph ">NativeDragManager.dropAction</codeph> プロパティを設定することにより、ドロップ可能ターゲットが <codeph class="+ topic/ph pr-d/codeph ">nativeDragDrop</codeph> イベントに応答して選択したアクションを指定する必要があります。このアクションは、<codeph class="+ topic/ph pr-d/codeph ">nativeDragComplete</codeph> イベントで元の開始表示オブジェクトに通知されます。ドロップターゲットにアクションが設定されていない場合、デフォルトのアクションが、許可されたアクションから copy、move、link の優先順位に従って選択されます。開始オブジェクトは、選択されたアクションに応じて内部状態を更新する必要があります。</p> 
 
 <p class="- topic/p ">NativeDragActions クラスにアクション名のストリング定数が定義されます。</p>
  
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">イベントの順序</b></p>
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">NativeDragManager.doDrag()</codeph> メソッド（<codeph class="+ topic/ph pr-d/codeph ">mouseDown</codeph> イベントハンドラー内または <codeph class="+ topic/ph pr-d/codeph ">mouseMove</codeph> イベントハンドラー内）を呼び出すことによりドラッグジェスチャが開始され、ユーザーの操作に応答して次のイベントシーケンスが実行されます。</p>
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">nativeDragStart</codeph> イベント：<codeph class="+ topic/ph pr-d/codeph ">NativeDragManager.doDrag()</codeph> が呼び出されると、このメソッドにパラメーターとして渡されたインタラクティブオブジェクトが開始元オブジェクトとなって、<codeph class="+ topic/ph pr-d/codeph ">nativeDragStart</codeph> イベントが送出されます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">nativeDragUpdate</codeph> イベント：ドラッグが進行している間、開始元オブジェクトによって継続的に <codeph class="+ topic/ph pr-d/codeph ">nativeDragUpdate</codeph> イベントが送出されます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">nativeDragEnter</codeph> イベント、<codeph class="+ topic/ph pr-d/codeph ">nativeDragOver</codeph> イベント：ドラッグジェスチャがインタラクティブオブジェクトの上を通ると、<codeph class="+ topic/ph pr-d/codeph ">nativeDragEnter</codeph> イベントが送出されます。ドラッグジェスチャがインタラクティブオブジェクトの上で止まっている間、継続的に <codeph class="+ topic/ph pr-d/codeph ">nativeDragOver</codeph> イベントが送出されます。これらのイベントのいずれかに応答して、ドロップ可能ターゲットとして機能するオブジェクトがイベントオブジェクトのプロパティをチェックし、ドロップを受け入れ可能かどうかを判断します。データ形式と許可されたアクションが適切な場合、これらのイベントのイベントハンドラーで <codeph class="+ topic/ph pr-d/codeph ">NativeDragManager.acceptDrop()</codeph> を呼び出し、ドラッグターゲットとして機能する表示オブジェクト（通常、<codeph class="+ topic/ph pr-d/codeph ">nativeDragEnter</codeph> または <codeph class="+ topic/ph pr-d/codeph ">nativeDragOver</codeph> イベントを送出したオブジェクト）に参照を渡す必要があります。これで、ユーザーはドラッグしたアイテムをターゲットにドロップすることができます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">nativeDragExit</codeph> イベント — ドラッグジェスチャがインタラクティブオブジェクトからなくなると、オブジェクトによって <codeph class="+ topic/ph pr-d/codeph ">nativeDragExit</codeph> イベントが送出されます。オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">NativeDragManager.acceptDrop()</codeph> メソッドに対する前の呼び出しでドラッグターゲットとして指定されていた場合、その呼び出しは無効になり、ジェスチャが再びインタラクティブオブジェクトに入った場合は <codeph class="+ topic/ph pr-d/codeph ">acceptDrop()</codeph> をもう一度呼び出す必要があります。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">nativeDragDrop</codeph> イベント — オブジェクトの上でユーザーがマウスボタンを離すと、ターゲット表示オブジェクトによって <codeph class="+ topic/ph pr-d/codeph ">nativeDragDrop</codeph> イベントが送出されます。このイベントのハンドラーは、イベントオブジェクトの <codeph class="+ topic/ph pr-d/codeph ">transferable</codeph> プロパティのデータにアクセスできます。開始元オブジェクトで実行する必要のあるアクションを通知するには、<codeph class="+ topic/ph pr-d/codeph ">NativeDragManager.dropAction</codeph> プロパティを設定します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">nativeDragComplete</codeph> — ドラッグジェスチャの最後でユーザーがマウスボタンを離すと、開始元オブジェクトによって <codeph class="+ topic/ph pr-d/codeph ">nativeDragComplete</codeph> イベントが送出されます（ドロップ自体が完了したかどうか）。このイベントのハンドラーは、イベントオブジェクトの <codeph class="+ topic/ph pr-d/codeph ">dropAction</codeph> プロパティをチェックして、リストからドラッグされたアイテムの削除など、内部のデータ状態に対して実行する必要のある変更があるかどうかを確認できます。 <codeph class="+ topic/ph pr-d/codeph ">dropAction</codeph> が <codeph class="+ topic/ph pr-d/codeph ">NativeDragActions.NONE</codeph> の場合、ドラッグしたアイテムが適切なターゲットにドロップされなかったことを示します。</li></ul>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">アプリケーション間のジェスチャ</b></p>
 <p class="- topic/p ">ドラッグジェスチャが AIR 以外のアプリケーションから AIR アプリケーションウィンドウに入った場合、<codeph class="+ topic/ph pr-d/codeph ">nativeDragStart</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">nativeDragComplete</codeph> イベントを送出する開始元オブジェクトはありません。その他の点では、ジェスチャを実行中のイベントは、同じ AIR アプリケーション内で開始および終了するジェスチャと同じパターンに従って送出されます。</p>
 
 <p class="- topic/p ">ドラッグジェスチャが AIR アプリケーションウィンドウの外に移動すると、<codeph class="+ topic/ph pr-d/codeph ">nativeDragEnter</codeph>、<codeph class="+ topic/ph pr-d/codeph ">nativeDragOver</codeph> または <codeph class="+ topic/ph pr-d/codeph ">nativeDragDrop</codeph> イベントを送出するターゲットオブジェクトはなくなります。開始元オブジェクトは引き続き <codeph class="+ topic/ph pr-d/codeph ">nativeDragComplete</codeph> イベントを送出し、ネイティブオペレーティングシステムによって設定されたドラッグアクションを通知します（ドロップが受け入れられなかった場合は <codeph class="+ topic/ph pr-d/codeph ">none</codeph>）。</p>
 
 <p class="- topic/p ">ドラッグジェスチャがある AIR アプリケーションから別の AIR アプリケーションに移動すると、開始元オブジェクトとターゲット表示オブジェクトは、それぞれのアプリケーション内で通常と同じイベントを送出します。</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">情報の転送</b></p>
 <p class="- topic/p ">ドラッグ &amp; ドロップジェスチャの実行中に転送されるデータは Clipboard オブジェクトに格納されます。このデータオブジェクトは、<codeph class="+ topic/ph pr-d/codeph ">NativeDragManager.doDrag()</codeph> メソッドを使用して、ドラッグジェスチャを開始したドラッグ操作に追加されます。ドロップ可能ターゲットは、ネイティブドラッグイベントオブジェクトの <codeph class="+ topic/ph pr-d/codeph ">clipboard</codeph> プロパティを使用して Clipboard オブジェクトにアクセスできます。ドラッグ操作が一旦開始されると、Clipboard オブジェクトにアクセスできるのは NativeDragEvent のイベントハンドラーだけになります。その他のハンドラーからこのオブジェクトにアクセスすると、ランタイムエラーが生成されます。</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">セキュリティについての考慮事項</b></p>
 <p class="- topic/p ">開始元オブジェクトおよびターゲットオブジェクトのセキュリティサンドボックスに応じて、ドラッグされているデータへのアクセス方法が決まります。両方のオブジェクトが同じサンドボックス内にある場合は、すべての NativeDragEvent オブジェクトからデータにアクセスできます。一方、開始元オブジェクトとターゲットオブジェクトが異なるサンドボックス内にある場合、データにアクセスできるのは <codeph class="+ topic/ph pr-d/codeph ">nativeDragDrop</codeph> イベントのイベントハンドラー内のターゲットサンドボックスだけです。他のネイティブドラッグイベントハンドラーは、イベントの <codeph class="+ topic/ph pr-d/codeph ">clipboard</codeph> プロパティで参照される Clipboard オブジェクトに引き続きアクセスし、利用可能なデータ形式を確認できますが、<codeph class="+ topic/ph pr-d/codeph ">clipboard.getData()</codeph> メソッドを呼び出すとセキュリティエラーが生成されます。</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.events.xml#NativeDragEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NativeDragEvent</linktext></link><link href="flash.desktop.xml#NativeDragActions" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeDragActions</linktext></link><link href="flash.desktop.xml#NativeDragOptions" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeDragOptions</linktext></link><link href="flash.desktop.xml#Clipboard" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.Clipboard</linktext></link></related-links><apiOperation id="flash.desktop:NativeDragManager:acceptDragDrop" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">acceptDragDrop</apiName><shortdesc class="- topic/shortdesc ">
	 指定されたターゲットのインタラクティブオブジェクトが現在のドラッグイベントに対応するドロップを受け入れ可能であることを、NativeDragManager オブジェクトに通知します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">target</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.display:InteractiveObject</apiOperationClassifier></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 指定されたターゲットのインタラクティブオブジェクトが現在のドラッグイベントに対応するドロップを受け入れ可能であることを、NativeDragManager オブジェクトに通知します。
	 
     <p class="- topic/p ">このメソッドは、指定されたターゲットオブジェクトに、ドラッグしたアイテムの少なくとも 1 つのデータ形式および少なくとも 1 つの許可されたアクションを処理できる <codeph class="+ topic/ph pr-d/codeph ">nativeDragDrop</codeph> ハンドラーがある場合にのみ呼び出す必要があります。</p>
     
	 <p class="- topic/p ">この機能は、<codeph class="+ topic/ph pr-d/codeph ">nativeDragEnter</codeph> イベントハンドラーまたは <codeph class="+ topic/ph pr-d/codeph ">nativeDragOver</codeph> イベントハンドラー内からのみ呼び出すことができます。</p>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.desktop:NativeDragManager:doDrag" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">doDrag</apiName><shortdesc class="- topic/shortdesc ">
	 ドラッグ＆ドロップ操作を開始します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">dragInitiator</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.display:InteractiveObject</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">通常、ドラッグジェスチャを開始したオブジェクトです。<codeph class="+ topic/ph pr-d/codeph ">nativeDragStart</codeph> イベントと <codeph class="+ topic/ph pr-d/codeph ">nativeDragComplete</codeph> イベントを受け取ります。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">clipboard</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.desktop:Clipboard</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ドラッグされているデータのコンテナオブジェクトです。
	 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">dragImage</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.display:BitmapData</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ドラッグジェスチャの実行中にマウスポインターの下に表示される、オプションのプロキシイメージです。<codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、プロキシイメージは表示されません。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">offset</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Point</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">マウスホットスポットとドラッグイメージの左上隅の間のオフセットです。負の座標では、イメージが上方向の、ホットスポットを基準としてその左側に移動します。<codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、ドラッグイメージの左上隅が、マウスホットスポットの位置に配置されます。 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">allowedActions</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.desktop:NativeDragOptions</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">この操作に許可されるドラッグ &amp; ドロップアクションを制限します。<codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、すべてのアクションが許可されます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ドラッグ＆ドロップ操作を開始します。
	 
	 <p class="- topic/p ">ドラッグ操作を開始するには</p>
	 <ol class="- topic/ol "><li class="- topic/li ">新しい Clipboard オブジェクトを作成します。</li><li class="- topic/li ">転送するデータを 1 つ以上の形式で追加します。</li><li class="- topic/li ">オプションで、ドラッグ中にプロキシイメージとして機能する BitmapData オブジェクトを作成します。</li><li class="- topic/li ">オプションで、この操作で許可するアクションを制限する NativeDragOptions オブジェクトを作成します （<codeph class="+ topic/ph pr-d/codeph ">allowedActions</codeph> パラメーターを <codeph class="+ topic/ph pr-d/codeph ">null</codeph> のままにすると、すべてのアクションが許可されます）。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NativeDragManager.doDrag()</codeph> を呼び出します。</li></ol>
	 
     <p class="- topic/p ">開始元オブジェクトは、このメソッドが呼び出された後に <codeph class="+ topic/ph pr-d/codeph ">nativeDragStart</codeph> イベント、ドラッグが進行中の間には <codeph class="+ topic/ph pr-d/codeph ">nativeDragStart</codeph> イベント、ユーザーがマウスボタンを離してドラッグジェスチャを終了したときに <codeph class="+ topic/ph pr-d/codeph ">nativeDragComplete</codeph> イベントを送出します。<codeph class="+ topic/ph pr-d/codeph ">nativeDragComplete</codeph> イベントのハンドラーは、イベントの <codeph class="+ topic/ph pr-d/codeph ">dropAction</codeph> プロパティをチェックして、ドラッグ &amp; ドロップ操作が正常に完了したかどうかを判断できます。 <codeph class="+ topic/ph pr-d/codeph ">dropAction</codeph> が <codeph class="+ topic/ph pr-d/codeph ">NativeDragActions.NONE</codeph> の場合、ドラッグしたアイテムが適切なターゲットにドロップされなかったことを示します。</p>
	 
     <p class="- topic/p ">このメソッドは、<codeph class="+ topic/ph pr-d/codeph ">mouseDown</codeph> イベントハンドラーまたは <codeph class="+ topic/ph pr-d/codeph ">mouseMove</codeph> イベントハンドラー内からのみ呼び出すことができます。（<codeph class="+ topic/ph pr-d/codeph ">mouseMove</codeph> イベントに応答して呼び出す場合は、マウスボタンも押す必要があります）。</p>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeDragActions" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeDragActions</linktext></link></related-links></apiOperation><apiValue id="flash.desktop:NativeDragManager:dragInitiator:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dragInitiator</apiName><shortdesc class="- topic/shortdesc ">
	ドラッグ操作を開始した NativeDragManager.doDrag() 呼び出しに渡されるインタラクティブオブジェクトです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	ドラッグ操作を開始した <codeph class="+ topic/ph pr-d/codeph ">NativeDragManager.doDrag()</codeph> 呼び出しに渡されるインタラクティブオブジェクトです。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:NativeDragManager:dropAction:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dropAction</apiName><shortdesc class="- topic/shortdesc ">
	ドロップターゲットによって指定されているドラッグアクションです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	ドロップターゲットによって指定されているドラッグアクションです。
	 
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">dropAction</codeph> プロパティは、<codeph class="+ topic/ph pr-d/codeph ">nativeDragDrop</codeph> イベントのハンドラーに設定する必要があります。<codeph class="+ topic/ph pr-d/codeph ">dropAction</codeph> が <codeph class="+ topic/ph pr-d/codeph ">nativeDragComplete</codeph> よりも前に設定されていない場合、NativeDragManager はこの値を copy、move、link の順序のリストで最初に許可されているアクションに設定します。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeDragActions" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeDragActions</linktext></link></related-links></apiValue><apiValue id="flash.desktop:NativeDragManager:isDragging:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isDragging</apiName><shortdesc class="- topic/shortdesc ">
	ドラッグ操作が現在進行中かどうかを報告します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	ドラッグ操作が現在進行中かどうかを報告します。
	 
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:NativeDragManager:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
     現在のプラットフォームで NativeDragManager クラスがサポートされている場合、isSupported プロパティは true に設定されます。サポートされていない場合は、false に設定されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">ネイティブのドラッグ＆ドロップ操作がサポートされているかどうかをレポートします。
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     現在のプラットフォームで NativeDragManager クラスがサポートされている場合、<codeph class="+ topic/ph pr-d/codeph ">isSupported</codeph> プロパティは <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定されます。サポートされていない場合は、<codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定されます。 
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.desktop:NativeDragOptions" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NativeDragOptions</apiName><shortdesc class="- topic/shortdesc ">
 NativeDragOptions クラスは、ドラッグ &amp; ドロップ操作で許可されるドラッグ &amp; ドロップアクションの名前の定数を定義します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 NativeDragOptions クラスは、ドラッグ &amp; ドロップ操作で許可されるドラッグ &amp; ドロップアクションの名前の定数を定義します。
 
 <p class="- topic/p ">ドラッグアクションは、開始オブジェクトとターゲットオブジェクトをドラッグ＆ドロップ操作で連動して処理できるようにする、フィードバックメカニズムの一部です。これらのアクションは、オペレーティングシステムに対する単なる<i class="+ topic/ph hi-d/i ">ヒント</i>に過ぎません。適切なビヘイビアーの実装は、トランザクションに含まれる、ドラッグの開始元オブジェクトとターゲットオブジェクトが行います。</p>
 
 <p class="- topic/p ">開始オブジェクトは、そのオブジェクトがサポートするアクションのみを許可します。例えば、開始オブジェクトの内部ロジックで、ターゲットが <i class="+ topic/ph hi-d/i ">move</i> アクションでドロップ操作を受け入れてソースデータを削除するように指定されている場合にのみ、そのオブジェクトは move アクションを許可します。</p>
 
 
 <p class="- topic/p ">新しい NativeDragOptions オブジェクトでは、すべてのプロパティが <codeph class="+ topic/ph pr-d/codeph ">true</codeph>（すべてのアクションを許可）に初期設定されています。</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeDragManager" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeDragManager</linktext></link><link href="flash.events.xml#NativeDragEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NativeDragEvent</linktext></link></related-links><apiOperation id="flash.desktop:NativeDragOptions:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	この NativeDragOptions オブジェクトの現在の設定を含むストリングを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">String このオブジェクトの現在の設定を含むストリング。
	 
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	この NativeDragOptions オブジェクトの現在の設定を含むストリングを作成します。
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.desktop:NativeDragOptions:allowCopy" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">allowCopy</apiName><shortdesc class="- topic/shortdesc ">
	ドロップターゲットでは、ドラッグしたデータのコピーが可能です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	ドロップターゲットでは、ドラッグしたデータのコピーが可能です。
	
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:NativeDragOptions:allowLink" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">allowLink</apiName><shortdesc class="- topic/shortdesc ">
	 ドロップターゲットでは、ドラッグしたデータへのリンクの作成が可能です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ドロップターゲットでは、ドラッグしたデータへのリンクの作成が可能です。
	 
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:NativeDragOptions:allowMove" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">allowMove</apiName><shortdesc class="- topic/shortdesc ">
	ドロップターゲットでは、ドラッグしたデータの移動が可能です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	ドロップターゲットでは、ドラッグしたデータの移動が可能です。
	
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.desktop:DockIcon" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">DockIcon</apiName><shortdesc class="- topic/shortdesc ">
	 DockIcon クラスは Mac OS X&amp;#xAE; スタイルのドックアイコンを表します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Mac OS X スタイルのドックアイコンです。
	 
	 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.desktop:InteractiveIcon</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 DockIcon クラスは、MacOS X<sup class="+ topic/ph hi-d/sup ">®</sup> スタイルのドックアイコンを表します。
	 
	 <p class="- topic/p ">AIR プロファイルのサポート：<i class="+ topic/ph hi-d/i "/>この機能はすべてのデスクトップオペレーティングシステムでサポートされますが、モバイルデバイスまたはテレビ用 AIR デバイスではサポートされません。<codeph class="+ topic/ph pr-d/codeph ">NativeApplication.supportsDockIcon</codeph> プロパティを使用して、サポートされているかどうかを実行時にテストすることができます。複数のプロファイル間での API サポートについて詳しくは、<xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">AIR プロファイルのサポート</xref>を参照してください。</p>
	 
	 <p class="- topic/p ">DockIcon クラスを使用すると、例えば、アイコンをアニメーション化したり内容を表すグラフィックを追加して、標準のアイコンの外観を変更できます。また、ドックアイコンメニューにアイテムを追加することもできます。追加したメニューアイテムは、標準メニューアイテムの上に表示されます。</p>
	 
	 <p class="- topic/p ">DockIcon クラスのインスタンスは作成できません。<codeph class="+ topic/ph pr-d/codeph ">NativeApplication.icon</codeph> からオペレーティングシステムドックアイコンを表すオブジェクトを取得します。
	 </p>
	 
	 <p class="- topic/p ">ドックアイコンのないオペレーティングシステムもあります。現在のシステムでドックアイコンがサポートされているかどうかを確認するには、<codeph class="+ topic/ph pr-d/codeph ">NativeApplication.supportsDockIcon</codeph> を調べます。ドックアイコンがサポートされている場合は、<codeph class="+ topic/ph pr-d/codeph ">NativeApplication.icon</codeph> プロパティのタイプが DockIcon に設定されています。サポートされていない場合、<codeph class="+ topic/ph pr-d/codeph ">NativeApplication.icon</codeph> のタイプは、InteractiveIcon の別のサブクラスである SystemTrayIcon などに設定されています。</p>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">重要：</b> AIR がドックアイコンをサポートしていないオペレーティングシステムで <codeph class="+ topic/ph pr-d/codeph ">NativeApplication.icon</codeph> オブジェクトの DockIcon クラスのメソッドを呼び出そうとすると、ランタイム例外が生成されます。</p>
	 
	 </apiDesc><example conref="examples\DockIconExample.as" class="- topic/example "> 次の例では、一連のイメージをロードし、ドックメニューアイコンを使用してタイマーが起動されたときに、アイコンイメージをアニメーション化します。この例を動作させるには、一連のアイコンイメージを用意し、imageURLs 配列の URL を変更する必要があります。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

 package {
    import flash.desktop.DockIcon;
    import flash.desktop.NativeApplication;
    import flash.display.Loader;
    import flash.display.NativeMenu;
    import flash.display.NativeMenuItem;
    import flash.display.Sprite;
    import flash.events.Event;
    import flash.events.TimerEvent;
    import flash.net.URLRequest;
    import flash.utils.Timer;

    public class AnimatedDockIcon extends Sprite
    {
        private var imageURLs:Array =  ['gfx/frame01.png',
                                        'gfx/frame02.png',
                                        'gfx/frame03.png',
                                        'gfx/frame04.png'];
        
        private var images:Array = new Array();
        private var animTimer:Timer = new Timer(100);
                                        
        public function AnimatedDockIcon()
        {
            NativeApplication.nativeApplication.autoExit = false;
            
            addEventListener(Event.COMPLETE, loadImages);
            loadImages();
            
            animTimer.addEventListener(TimerEvent.TIMER,advanceFrame);
            addMenu();
            stage.nativeWindow.close();
        }
        
        private function addMenu():void{
            var menu:NativeMenu = new NativeMenu();
            var start:NativeMenuItem = menu.addItem(new NativeMenuItem("Start animation"));
            var stop:NativeMenuItem = menu.addItem(new NativeMenuItem("Stop animation"));
            start.addEventListener(Event.SELECT, startTimer);
            stop.addEventListener(Event.SELECT, stopTimer);
            
            var dockIcon:DockIcon =    NativeApplication.nativeApplication.icon as DockIcon;
            dockIcon.menu = menu;
        }
        
        private function startTimer(event:Event):void{
            animTimer.start();
        }

        private function stopTimer(event:Event):void{
            animTimer.stop();
        }

        private var currentFrame:int = 0;
        private function advanceFrame(event:Event):void{
            if(currentFrame &lt; images.length){
                currentFrame++;
            } else {
                currentFrame = 0;
            }
            NativeApplication.nativeApplication.icon.bitmaps = [images[currentFrame]];
        }
        

        private function loadImages(event:Event = null):void{
            if(event != null){
                images.push(event.target.content.bitmapData);
            }
            if(imageURLs.length > 0){
                var urlString:String = imageURLs.pop();
                var loader:Loader = new Loader();
                loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadImages, false, 0, true);
                loader.load(new URLRequest(urlString));
            } else {
                var complete:Event = new Event(Event.COMPLETE,false,false);
                dispatchEvent(complete);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/icon" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication.icon</linktext></link><link href="flash.desktop.xml#NativeApplication/supportsDockIcon" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication.supportsDockIcon</linktext></link><link href="flash.desktop.xml#SystemTrayIcon" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.SystemTrayIcon</linktext></link></related-links><apiOperation id="flash.desktop:DockIcon:bounce" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">bounce</apiName><shortdesc class="- topic/shortdesc ">
		 注意を要するイベントが発生したことをユーザーに通知します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiDefaultValue>NotificationType.Informational
		 
		 </apiDefaultValue><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">priority</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">informational</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ドックがバウンドする緊急度です。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 注意を要するイベントが発生したことをユーザーに通知します。
		 
		 <p class="- topic/p ">アプリケーションがバックグラウンドで動作している場合にのみ、このメソッドを呼び出すとドックアイコンがバウンドします。<codeph class="+ topic/ph pr-d/codeph ">priority</codeph> が <codeph class="+ topic/ph pr-d/codeph ">NotificationType.Informational</codeph> の場合、アイコンが 1 回バウンドします。<codeph class="+ topic/ph pr-d/codeph ">priority</codeph> が <codeph class="+ topic/ph pr-d/codeph ">NotificationType.Critical</codeph> の場合、アプリケーションがフォアグラウンドで実行されるまで、ドックアイコンがバウンドします。</p>
		 
		 </apiDesc><example conref="examples\DockIcon.bounce.1.as" class="- topic/example "> 次の例では、ユーザーがアプリケーションをアクティブ化するまでドックアイコンがバウンドします。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 import flash.display.DockIcon;
 import flash.display.NotificationType;
 import flash.desktop.NativeApplication;

 if(NativeApplication.supportsDockIcon){
     var dockIcon:DockIcon = NativeApplication.nativeApplication.icon As DockIcon;
     dockIcon.bounce(NotificationType.CRITICAL);
 }
 
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NotificationType" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NotificationType</linktext></link><link href="flash.display.xml#NativeWindow/notifyUser()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeWindow.notifyUser()</linktext></link></related-links></apiOperation><apiValue id="flash.desktop:DockIcon:bitmaps:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bitmaps</apiName><shortdesc class="- topic/shortdesc "> 
        
		  
	 様々なサイズの BitmapData オブジェクトの配列としてのアイコンイメージです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">様々なサイズの BitmapData オブジェクトの配列としてのアイコンイメージです。 
        </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
        
		  
	 様々なサイズの BitmapData オブジェクトの配列としてのアイコンイメージです。
	   
	 <p class="- topic/p ">指定されたオペレーティングシステムのコンテキストでアイコンを表示する場合、表示するサイズに最も近い配列のビットマップが使用されます（必要に応じて伸縮）。一般的なサイズには、16x16、32x32、48x48 および 128x128 があります （512x512 ピクセルのアイコンは、近い将来にいくつかのオペレーティングシステムアイコンで使用される可能性があります）。</p>
	 
	 <p class="- topic/p ">一部のコンテキストでは、<codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> プロパティに何も割り当てられていない場合、オペレーティングシステムがデフォルトのシステムアイコンを使用することがあります。他のコンテキストでは、アイコンは表示されません。</p>
	 
	 <p class="- topic/p ">アイコンの外観を設定または変更するには、BitmapData オブジェクトの配列を <codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> プロパティに割り当てます。</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 icon.bitmaps = new Array(icon16x16.bitmapData, icon128x128.bitmapData);
	 </codeblock>
	  
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> 配列を直接変更しても効果はありません。</p>
	 
	 <p class="- topic/p ">アイコンイメージを消去するには、<codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> プロパティに空の配列を割り当てます。</p>
	 
	 <p class="- topic/p ">
	 <b class="+ topic/ph hi-d/b ">注意：</b>アイコン用のイメージファイルを読み込む場合、通常、最も適切なアルファブレンドが提供されるのは PNG ファイル形式です。GIF 形式は透明度のオンまたはオフのみをサポートし、ブレンドは行いません。JPG 形式は、透明度をまったくサポートしません。  
	 </p>
	  
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:DockIcon:height:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">height</apiName><shortdesc class="- topic/shortdesc "> 
		
		 アイコンの現在の表示の高さです（ピクセル単位）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		
		 アイコンの現在の表示の高さです（ピクセル単位）。
		 
		 <p class="- topic/p ">一部のアイコンのコンテキストでは、動的なサイズ調整がサポートされます。<codeph class="+ topic/ph pr-d/codeph ">height</codeph> プロパティは、現在のコンテキストの <codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> 配列から選択されたアイコンの高さを示します。オペレーティングシステムによってアイコンが伸縮されている場合は、実際の表示の高さはこれとは異なります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.desktop:DockIcon:menu:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">menu</apiName><shortdesc class="- topic/shortdesc ">
		 このドックアイコンのシステム指定のメニューです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.display:NativeMenu</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 このドックアイコンのシステム指定のメニューです。
		 
		 <p class="- topic/p ">メニューのすべてのアイテムが、標準アイテムの上に表示されます。標準アイテムは変更および削除できません。</p>
		 
		 </apiDesc><example conref="examples\DockIcon.menu.1.as" class="- topic/example "> 次の例では、アイテムをドックアイコンメニューに追加します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 import flash.desktop.NativeApplication;
 import flash.events.Event;
 
private function createDockIconMenu():void{
    if(NativeApplication.supportsDockIcon){                
        var dockIcon:DockIcon = NativeApplication.nativeApplication.icon as DockIcon;
        
        var dockMenu:NativeMenu = new NativeMenu();
        var command:NativeMenuItem = dockMenu.addItem(new NativeMenuItem("Command"));
        command.addEventListener(Event.SELECT, onCommand);
        
        dockIcon.menu = dockMenu;
    }
}

 private function onCommand(event:Event):void{
     //do command...
 }
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.desktop:DockIcon:width:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">width</apiName><shortdesc class="- topic/shortdesc "> 
		
		 アイコンの現在の表示幅です（ピクセル単位）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		
		 アイコンの現在の表示幅です（ピクセル単位）。 
		 
		 <p class="- topic/p ">一部のアイコンのコンテキストでは、動的なサイズ調整がサポートされます。<codeph class="+ topic/ph pr-d/codeph ">width</codeph> プロパティは、現在のコンテキストの <codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> 配列から選択されたアイコンの幅を示します。オペレーティングシステムによってアイコンが伸縮されている場合は、実際の表示幅はこれとは異なります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.desktop:Icon" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Icon</apiName><shortdesc class="- topic/shortdesc "> 
	 Icon クラスは、オペレーティングシステムアイコンを表します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	 Icon クラスは、オペレーティングシステムアイコンを表します。 
	 
	 <p class="- topic/p ">Icon オブジェクトには、BitmapData オブジェクトの配列の、<codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> という 1 つのプロパティがあります。一度に 1 つのイメージのみ表示されます。オペレーティングシステムはアイコンの現在の表示サイズに最も近いサイズのイメージを選択し、必要に応じて伸縮します。</p>
	 
	 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/icon" class="- topic/link "><linktext class="- topic/linktext ">flash.filesystem.File.icon</linktext></link><link href="flash.display.xml#BitmapData" class="- topic/link "><linktext class="- topic/linktext ">flash.display.BitmapData</linktext></link></related-links><apiValue id="flash.desktop:Icon:bitmaps:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bitmaps</apiName><shortdesc class="- topic/shortdesc "> 
	 様々なサイズの BitmapData オブジェクトの配列としてのアイコンイメージです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	 様々なサイズの BitmapData オブジェクトの配列としてのアイコンイメージです。
	   
	 <p class="- topic/p ">指定されたオペレーティングシステムのコンテキストでアイコンを表示する場合、表示するサイズに最も近い配列のビットマップが使用されます（必要に応じて伸縮）。一般的なサイズには、16x16、32x32、48x48 および 128x128 があります （512x512 ピクセルのアイコンは、近い将来にいくつかのオペレーティングシステムアイコンで使用される可能性があります）。</p>
	 
	 <p class="- topic/p ">一部のコンテキストでは、<codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> プロパティに何も割り当てられていない場合、オペレーティングシステムがデフォルトのシステムアイコンを使用することがあります。他のコンテキストでは、アイコンは表示されません。</p>
	 
	 <p class="- topic/p ">アイコンの外観を設定または変更するには、BitmapData オブジェクトの配列を <codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> プロパティに割り当てます。</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 icon.bitmaps = new Array(icon16x16.bitmapData, icon128x128.bitmapData);
	 </codeblock>
	  
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> 配列を直接変更しても効果はありません。</p>
	 
	 <p class="- topic/p ">アイコンイメージを消去するには、<codeph class="+ topic/ph pr-d/codeph ">bitmaps</codeph> プロパティに空の配列を割り当てます。</p>
	 
	 <p class="- topic/p ">
	 <b class="+ topic/ph hi-d/b ">注意：</b>アイコン用のイメージファイルを読み込む場合、通常、最も適切なアルファブレンドが提供されるのは PNG ファイル形式です。GIF 形式は透明度のオンまたはオフのみをサポートし、ブレンドは行いません。JPG 形式は、透明度をまったくサポートしません。  
	 </p>
	  
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/icon" class="- topic/link "><linktext class="- topic/linktext ">flash.filesystem.File.icon</linktext></link><link href="flash.display.xml#BitmapData" class="- topic/link "><linktext class="- topic/linktext ">flash.display.BitmapData</linktext></link></related-links></apiValue></apiClassifier></apiPackage>