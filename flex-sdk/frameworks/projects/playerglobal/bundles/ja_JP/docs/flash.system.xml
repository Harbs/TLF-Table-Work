<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="flash.system" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiPackage/apiPackage "><apiName class="- topic/title reference/title apiRef/apiName ">flash.system</apiName><apiDetail class="- topic/body reference/refbody apiRef/apiDetail "/><apiClassifier languages="" id="flash.system:ImageDecodingPolicy" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ImageDecodingPolicy</apiName><shortdesc class="- topic/shortdesc ">
 ImageDecodingPolicy クラスは、LoaderContext クラスの imageDecodingPolicy プロパティの値を定義します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">ImageDecodingPolicy クラスは、LoaderContext クラスの imageDecodingPolicy プロパティの値を定義します。
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ImageDecodingPolicy クラスは、LoaderContext クラスの <codeph class="+ topic/ph pr-d/codeph ">imageDecodingPolicy</codeph> プロパティの値を定義します。
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.system.xml#LoaderContext/imageDecodingPolicy" class="- topic/link "><linktext class="- topic/linktext ">LoaderContext.imageDecodingPolicy</linktext></link></related-links><apiValue id="flash.system:ImageDecodingPolicy:ON_DEMAND" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ON_DEMAND</apiName><shortdesc class="- topic/shortdesc ">
	 ロードされるイメージが、必要になるまではデコードされないことを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">onDemand</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ロードされるイメージが、必要になるまではデコードされないことを指定します。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:ImageDecodingPolicy:ON_LOAD" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ON_LOAD</apiName><shortdesc class="- topic/shortdesc ">
	 イメージが、ロード時、complete イベントが送信される前にデコードされることを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">onLoad</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 イメージが、ロード時、complete イベントが送信される前にデコードされることを指定します。 
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:SystemUpdaterType" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SystemUpdaterType</apiName><shortdesc class="- topic/shortdesc ">
	 SystemUpdaterType クラスは、システムの更新に使用される定数を提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 SystemUpdaterType クラスは、システムの更新に使用される定数を提供します。これらの定数は、<codeph class="+ topic/ph pr-d/codeph ">SystemUpdater.update()</codeph> 関数で使用されます。
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>SystemUpdater API はデスクトッププラットフォームでサポートされます。</p>
	 </apiDesc></apiClassifierDetail><apiValue id="flash.system:SystemUpdaterType:DRM" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DRM</apiName><shortdesc class="- topic/shortdesc ">
		DRM モジュールを更新します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">drm</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		DRM モジュールを更新します。
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:SystemUpdaterType:SYSTEM" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SYSTEM</apiName><shortdesc class="- topic/shortdesc ">
		プレーヤーのランタイム自体を更新します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">system</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		プレーヤーのランタイム自体を更新します。
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:IMEConversionMode" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">IMEConversionMode</apiName><shortdesc class="- topic/shortdesc ">
 このクラスには、IME.conversionMode プロパティで使用できる定数があります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 このクラスには、<codeph class="+ topic/ph pr-d/codeph ">IME.conversionMode</codeph> プロパティで使用できる定数があります。<codeph class="+ topic/ph pr-d/codeph ">conversionMode</codeph> を <codeph class="+ topic/ph pr-d/codeph ">ALPHANUMERIC_FULL</codeph> または <codeph class="+ topic/ph pr-d/codeph ">JAPANESE_KATAKANA_FULL</codeph> に設定すると、プレーヤーで全角フォントが使用されます。<codeph class="+ topic/ph pr-d/codeph ">ALPHANUMERIC_HALF</codeph> または <codeph class="+ topic/ph pr-d/codeph ">JAPANESE_KATAKANA_HALF</codeph> を使用すると、半角フォントが使用されます。
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME/conversionMode" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME.conversionMode</linktext></link></related-links><apiValue id="flash.system:IMEConversionMode:ALPHANUMERIC_FULL" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ALPHANUMERIC_FULL</apiName><shortdesc class="- topic/shortdesc ">
	 ストリング "ALPHANUMERIC_FULL"。IME.conversionMode プロパティで使用します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">ALPHANUMERIC_FULL</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ストリング <codeph class="+ topic/ph pr-d/codeph ">"ALPHANUMERIC_FULL"</codeph>。<codeph class="+ topic/ph pr-d/codeph ">IME.conversionMode</codeph> プロパティで使用します。この定数は、すべての IME で使用します。シンタックス <codeph class="+ topic/ph pr-d/codeph ">IMEConversionMode.ALPHANUMERIC_FULL</codeph> を使用します。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME/conversionMode" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:ALPHANUMERIC_HALF" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ALPHANUMERIC_HALF</apiName><shortdesc class="- topic/shortdesc ">
	 ストリング "ALPHANUMERIC_HALF"。IME.conversionMode プロパティで使用します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">ALPHANUMERIC_HALF</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ストリング <codeph class="+ topic/ph pr-d/codeph ">"ALPHANUMERIC_HALF"</codeph>。<codeph class="+ topic/ph pr-d/codeph ">IME.conversionMode</codeph> プロパティで使用します。この定数は、すべての IME で使用します。シンタックス <codeph class="+ topic/ph pr-d/codeph ">IMEConversionMode.ALPHANUMERIC_HALF</codeph> を使用します。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME/conversionMode" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:CHINESE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CHINESE</apiName><shortdesc class="- topic/shortdesc ">
	 ストリング "CHINESE"。IME.conversionMode プロパティで使用します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">CHINESE</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ストリング <codeph class="+ topic/ph pr-d/codeph ">"CHINESE"</codeph>。<codeph class="+ topic/ph pr-d/codeph ">IME.conversionMode</codeph> プロパティで使用します。この定数は、簡体字中国語 IME と繁体字中国語 IME で使用します。シンタックス <codeph class="+ topic/ph pr-d/codeph ">IMEConversionMode.CHINESE</codeph> を使用します。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME/conversionMode" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:JAPANESE_HIRAGANA" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">JAPANESE_HIRAGANA</apiName><shortdesc class="- topic/shortdesc ">
	 ストリング "JAPANESE_HIRAGANA"。IME.conversionMode プロパティで使用します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">JAPANESE_HIRAGANA</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ストリング <codeph class="+ topic/ph pr-d/codeph ">"JAPANESE_HIRAGANA"</codeph>。<codeph class="+ topic/ph pr-d/codeph ">IME.conversionMode</codeph> プロパティで使用します。この定数は、日本語 IME で使用します。シンタックス <codeph class="+ topic/ph pr-d/codeph ">IMEConversionMode.JAPANESE_HIRAGANA</codeph> を使用します。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME/conversionMode" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:JAPANESE_KATAKANA_FULL" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">JAPANESE_KATAKANA_FULL</apiName><shortdesc class="- topic/shortdesc ">
	 ストリング "JAPANESE_KATAKANA_FULL"。IME.conversionMode プロパティで使用します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">JAPANESE_KATAKANA_FULL</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ストリング <codeph class="+ topic/ph pr-d/codeph ">"JAPANESE_KATAKANA_FULL"</codeph>。<codeph class="+ topic/ph pr-d/codeph ">IME.conversionMode</codeph> プロパティで使用します。この定数は、日本語 IME で使用します。シンタックス <codeph class="+ topic/ph pr-d/codeph ">IMEConversionMode.JAPANESE_KATAKANA_FULL</codeph> を使用します。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME/conversionMode" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:JAPANESE_KATAKANA_HALF" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">JAPANESE_KATAKANA_HALF</apiName><shortdesc class="- topic/shortdesc ">
	 ストリング "JAPANESE_KATAKANA_HALF"。IME.conversionMode プロパティで使用します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">JAPANESE_KATAKANA_HALF</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ストリング <codeph class="+ topic/ph pr-d/codeph ">"JAPANESE_KATAKANA_HALF"</codeph>。<codeph class="+ topic/ph pr-d/codeph ">IME.conversionMode</codeph> プロパティで使用します。この定数は、日本語 IME で使用します。シンタックス <codeph class="+ topic/ph pr-d/codeph ">IMEConversionMode.JAPANESE_KATAKANA_HALF</codeph> を使用します。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME/conversionMode" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:KOREAN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">KOREAN</apiName><shortdesc class="- topic/shortdesc ">
	 ストリング "KOREAN"。IME.conversionMode プロパティで使用します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">KOREAN</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ストリング <codeph class="+ topic/ph pr-d/codeph ">"KOREAN"</codeph>。<codeph class="+ topic/ph pr-d/codeph ">IME.conversionMode</codeph> プロパティで使用します。この定数は、韓国語 IME で使用します。シンタックス <codeph class="+ topic/ph pr-d/codeph ">IMEConversionMode.KOREAN</codeph> を使用します。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME/conversionMode" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:UNKNOWN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">UNKNOWN</apiName><shortdesc class="- topic/shortdesc ">
	 ストリング "UNKNOWN"。IME.conversionMode プロパティの呼び出しによって返されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">UNKNOWN</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ストリング <codeph class="+ topic/ph pr-d/codeph ">"UNKNOWN"</codeph>。<codeph class="+ topic/ph pr-d/codeph ">IME.conversionMode</codeph> プロパティの呼び出しによって返されます。この値は設定できず、プレーヤーが現在アクティブな IME を識別できない場合にのみ返されます。シンタックス <codeph class="+ topic/ph pr-d/codeph ">IMEConversionMode.UNKNOWN</codeph> を使用します。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME/conversionMode" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME.conversionMode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:SecurityPanel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SecurityPanel</apiName><shortdesc class="- topic/shortdesc ">
 SecurityPanel クラスは、どのセキュリティ設定パネルを表示するかを指定する値を提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 SecurityPanel クラスは、どのセキュリティ設定パネルを表示するかを指定する値を提供します。
 
 <p class="- topic/p ">このクラスには、<codeph class="+ topic/ph pr-d/codeph ">Security.showSettings()</codeph> メソッドで使用する静的定数があります。SecurityPanel クラスの新しいインスタンスは作成できません。</p>
 
 </apiDesc><example conref="examples\SecurityExample.as" class="- topic/example "> 次の例では、Sprite オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">click</codeph> イベントを使用して、「Flash Player 設定」のローカル記憶領域パネルを表示する方法を示します。オレンジのボックスが <codeph class="+ topic/ph pr-d/codeph ">draw()</codeph> を使用してステージに追加されます。<codeph class="+ topic/ph pr-d/codeph ">draw()</codeph> では、<codeph class="+ topic/ph pr-d/codeph ">click</codeph> イベントリスナーに名前付き <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph> が追加されます。これは <codeph class="+ topic/ph pr-d/codeph ">click</codeph> イベントに応答し、ローカル記憶領域パネルを開くように Flash Player に指示します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.events.*;
    import flash.system.Security;
    import flash.system.SecurityPanel;

    public class SecurityExample extends Sprite {
        private var bgColor:uint = 0xFFCC00;
        private var size:uint = 100;

        public function SecurityExample() {
            draw();
        }

        private function draw():void {
            var child:Sprite = new Sprite();
            child.graphics.beginFill(bgColor);
            child.graphics.drawRect(0, 0, size, size);
            child.graphics.endFill();
            child.buttonMode = true;

            var label:TextField = new TextField();
            label.text = "settings";
            label.selectable = false;
            label.mouseEnabled = false;
            child.addChild(label);

            child.addEventListener(MouseEvent.CLICK, clickHandler);
            addChild(child);
        }

        private function clickHandler(event:MouseEvent):void {
            Security.showSettings(SecurityPanel.LOCAL_STORAGE);
        }
    }
}
</codeblock></example></apiClassifierDetail><apiValue id="flash.system:SecurityPanel:CAMERA" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CAMERA</apiName><shortdesc class="- topic/shortdesc ">
	 Security.showSettings() に渡されると、Flash Player の [設定] の [カメラ] パネルが表示されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, Security.CAMERA, CAMERA
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">camera</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Security.showSettings()</codeph> に渡されると、Flash Player の [設定] の [カメラ] パネルが表示されます。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/showSettings()" class="- topic/link "><linktext class="- topic/linktext ">Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:DEFAULT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DEFAULT</apiName><shortdesc class="- topic/shortdesc ">
	 Security.showSettings() に渡されると、ユーザーが最後に Flash Player の「設定」を閉じたときに開いていたパネルが表示されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, Security.DEFAULT, DEFAULT
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">default</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Security.showSettings()</codeph> に渡されると、ユーザーが最後に Flash Player の「設定」を閉じたときに開いていたパネルが表示されます。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/showSettings()" class="- topic/link "><linktext class="- topic/linktext ">Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:DISPLAY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DISPLAY</apiName><shortdesc class="- topic/shortdesc ">
	 Security.showSettings() に渡されると、Flash Player の [設定] の [Display] パネルが表示されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, Security.DISPLAY, DISPLAY
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">display</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Security.showSettings()</codeph> に渡されると、Flash Player の [設定] の [Display] パネルが表示されます。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/showSettings()" class="- topic/link "><linktext class="- topic/linktext ">Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:LOCAL_STORAGE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LOCAL_STORAGE</apiName><shortdesc class="- topic/shortdesc ">
	 Security.showSettings() に渡されると、Flash Player の [設定] の [ローカル記憶領域] パネルが表示されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, Security.LOCAL_STORAGE, LOCAL_STORAGE
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">localStorage</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Security.showSettings()</codeph> に渡されると、Flash Player の [設定] の [ローカル記憶領域] パネルが表示されます。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/showSettings()" class="- topic/link "><linktext class="- topic/linktext ">Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:MICROPHONE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MICROPHONE</apiName><shortdesc class="- topic/shortdesc ">
	 Security.showSettings() に渡されると、Flash Player の [設定] の [マイク] パネルが表示されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, Security.MICROPHONE, MICROPHONE
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">microphone</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Security.showSettings()</codeph> に渡されると、Flash Player の [設定] の [マイク] パネルが表示されます。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/showSettings()" class="- topic/link "><linktext class="- topic/linktext ">Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:PRIVACY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">PRIVACY</apiName><shortdesc class="- topic/shortdesc ">
	 Security.showSettings() に渡されると、Flash Player の [設定] の [プライバシー設定] パネルが表示されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, Security.PRIVACY, PRIVACY
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">privacy</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Security.showSettings()</codeph> に渡されると、Flash Player の [設定] の [プライバシー設定] パネルが表示されます。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/showSettings()" class="- topic/link "><linktext class="- topic/linktext ">Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:SETTINGS_MANAGER" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SETTINGS_MANAGER</apiName><shortdesc class="- topic/shortdesc ">
	 Security.showSettings() に渡されると、別のブラウザーウィンドウで設定マネージャーが表示されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, Security.SETTINGS_MANAGER, SETTINGS_MANAGER
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">settingsManager</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Security.showSettings()</codeph> に渡されると、別のブラウザーウィンドウで設定マネージャーが表示されます。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/showSettings()" class="- topic/link "><linktext class="- topic/linktext ">Security.showSettings()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:TouchscreenType" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">TouchscreenType</apiName><shortdesc class="- topic/shortdesc ">
 TouchscreenType クラスは、様々な種類のタッチスクリーンを表す値を提供する列挙クラスです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 TouchscreenType クラスは、様々な種類のタッチスクリーンを表す値を提供する列挙クラスです。
 
 <p class="- topic/p ">TouchscreenType クラスによって定義された値を <codeph class="+ topic/ph pr-d/codeph ">Capabilities.touchscreenType</codeph> プロパティで使用します。</p>
 
 </apiDesc><example conref="examples\KeyboardType.as" class="- topic/example "> 次の例は、Num Lock キーと Caps Lock キーの現在の状態と、実行環境のキーボードとタッチスクリーンの種類を表示する簡単なテストです。テストを実行したら、テキストフィールドをクリックして、プロパティの値を確認します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.events.~~;
import flash.display.~~;
import flash.ui.Keyboard;
import flash.system.Capabilities;
import flash.text.TextField;


var keyboardInfoTxt:TextField = new TextField();
keyboardInfoTxt.x = 30;
keyboardInfoTxt.y = 50;
keyboardInfoTxt.width = 300;
keyboardInfoTxt.height = 100;
keyboardInfoTxt.border = true;

addChild(keyboardInfoTxt);

addEventListener (MouseEvent.CLICK, getScreenKeyboardType);

function getScreenKeyboardType(e:MouseEvent):void{
    keyboardInfoTxt.text= "Caps Lock is : " + String(flash.ui.Keyboard.capsLock)+ "\n" + 
    "Num Lock is : " + String(flash.ui.Keyboard.numLock) +"\n" + 
    "Has Virtual Keyboard : " + String(flash.ui.Keyboard.hasVirtualKeyboard) + "\n" + 
    "Physical Keyboard Type : " + flash.ui.Keyboard.physicalKeyboardType + "\n" + 
    "flash.system.Capabilities.touchscreenType is : " + flash.system.Capabilities.touchscreenType;
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Capabilities/touchscreenType" class="- topic/link "><linktext class="- topic/linktext ">Capabilities.touchscreenType</linktext></link><link href="flash.ui.xml#Mouse/supportsCursor" class="- topic/link "><linktext class="- topic/linktext ">flash.ui.Mouse.supportsCursor</linktext></link></related-links><apiValue id="flash.system:TouchscreenType:FINGER" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">FINGER</apiName><shortdesc class="- topic/shortdesc ">
	 指によるタッチに反応するように設計されているタッチスクリーン。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">finger</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 指によるタッチに反応するように設計されているタッチスクリーン。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:TouchscreenType:NONE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NONE</apiName><shortdesc class="- topic/shortdesc ">
	 サポートされているタッチスクリーンがないコンピューターまたはデバイス。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">none</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 サポートされているタッチスクリーンがないコンピューターまたはデバイス。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:TouchscreenType:STYLUS" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">STYLUS</apiName><shortdesc class="- topic/shortdesc ">
	 ペンを使用するように設計されているタッチスクリーン。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">stylus</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ペンを使用するように設計されているタッチスクリーン。
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:ApplicationDomain" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ApplicationDomain</apiName><shortdesc class="- topic/shortdesc ">
 ApplicationDomain クラスは、クラス定義の個別のグループのコンテナです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Security considerations for application domains are discussed in the 
 applicationDomain property entries of URLRequest and LoaderInfo. 
 
 </internal></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ApplicationDomain クラスは、クラス定義の個別のグループのコンテナです。アプリケーションドメインは、同じセキュリティドメイン内にあるクラスを分割するために使用されます。これにより、同じクラスの定義が複数存在すること、および子が親の定義を再利用することが可能になります。
 
 <p class="- topic/p ">アプリケーションドメインは、外部 SWF ファイルが Loader クラスによってロードされる場合に使用されます。ロードされる SWF ファイルのすべての ActionScript 3.0 定義は、アプリケーションドメインに保存されます。アプリケーションドメインは、Loader オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">loadBytes()</codeph> メソッドの <codeph class="+ topic/ph pr-d/codeph ">context</codeph> パラメーターとして渡す LoaderContext オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">applicationDomain</codeph> プロパティによって指定されます。LoaderInfo オブジェクトにも <codeph class="+ topic/ph pr-d/codeph ">applicationDomain</codeph> プロパティがあります。これは読み取り専用です。</p>
 
 <p class="- topic/p ">SWF ファイル内のすべてのコードは、アプリケーションドメイン内に存在するように定義されます。現在のアプリケーションドメインは、メインアプリケーションが実行されている場所です。現在のドメインを含むすべてのアプリケーションドメインはシステムドメインに属します。つまり、システムドメインにはすべての Flash Player クラスが含まれます。</p>
 
 <p class="- topic/p ">システムドメインを除くすべてのアプリケーションドメインには、親ドメインが関連付けられます。メインアプリケーションのアプリケーションドメインに対する親ドメインは、システムドメインです。ロードされるクラスは、その親によってまだ定義されていない場合にのみ定義されます。ロードされるクラスの定義を新しい定義でオーバーライドすることはできません。</p>
 
 <p class="- topic/p ">アプリケーションドメインの使用例については、『ActionScript 3.0 開発ガイド<i class="+ topic/ph hi-d/i "/>』を参照してください。</p>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">ApplicationDomain()</codeph> コンストラクター関数を使用すると、ApplicationDomain オブジェクトを作成できます。</p>
 
 </apiDesc><example conref="examples\ApplicationDomainExample.as" class="- topic/example "> 次の例では、実行時のクラスのロードと、別の SWF に存在するクラスのパブリックメソッドの呼び出し方法を示します。
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b></p>
 <ul class="- topic/ul "><li class="- topic/li ">ClassLoader クラスによって SWF ファイルがロードされるので、ローカルセキュリティはファイルシステムレベルである必要があります。</li><li class="- topic/li ">この例を実行するには、"ApplicationDomainExample.swf" ファイルと同じフォルダーに存在する "RuntimeClasses.swf" という SWF ファイルが存在する必要があります。</li></ul>
 
 <p class="- topic/p ">最初に、以下のコードから "RuntimeClasses.swf" ファイルを作成します。</p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 package {
   import flash.display.Sprite;
   public class RuntimeClasses extends Sprite
   {
     public function RuntimeClasses()
     {}
      
     public function greet():String {
       return("Hello World");
     }
   }
 }
 </codeblock>
 
 <p class="- topic/p ">次に、以下のコードを実装します。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.DisplayObject;
    import flash.display.Sprite;
    import flash.errors.IllegalOperationError;
    import flash.events.Event;
    import flash.text.TextField;

    public class ApplicationDomainExample extends Sprite {
        private var loader:ClassLoader;
        private var tf:TextField = new TextField();

        public function ApplicationDomainExample() {
            addChild(tf);

            loader = new ClassLoader();
            loader.addEventListener(ClassLoader.LOAD_ERROR,loadErrorHandler);
            loader.addEventListener(ClassLoader.CLASS_LOADED,classLoadedHandler);
            loader.load("RuntimeClasses.swf");
        }

        private function loadErrorHandler(e:Event):void {
            tf.text = "Load failed";
            throw new IllegalOperationError("Cannot load the specified file.");
        }

        private function classLoadedHandler(e:Event):void {
            var runtimeClassRef:Class = loader.getClass("RuntimeClasses");
            var greeter:Object = new runtimeClassRef();

            tf.text = greeter.greet();
        }
    }
}

import flash.display.Loader;
import flash.errors.IllegalOperationError;
import flash.events.Event;
import flash.events.EventDispatcher;
import flash.events.IOErrorEvent;
import flash.events.SecurityErrorEvent;
import flash.net.URLRequest;
import flash.system.ApplicationDomain;
import flash.system.LoaderContext;

class ClassLoader extends EventDispatcher {
    public static var CLASS_LOADED:String = "classLoaded";
    public static var LOAD_ERROR:String = "loadError";
    private var loader:Loader;
    private var swfLib:String;
    private var request:URLRequest;
    private var loadedClass:Class;

    public function ClassLoader() {

        loader = new Loader();
        loader.contentLoaderInfo.addEventListener(Event.COMPLETE,completeHandler);
        loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
        loader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR,securityErrorHandler);
    }

    public function load(lib:String):void {
        swfLib = lib;
        request = new URLRequest(swfLib);
        var context:LoaderContext = new LoaderContext();
        context.applicationDomain=ApplicationDomain.currentDomain;
        loader.load(request,context);
    }

    public function getClass(className:String):Class {
        try {
            return loader.contentLoaderInfo.applicationDomain.getDefinition(className)  as  Class;
        } catch (e:Error) {
            throw new IllegalOperationError(className + " definition not found in " + swfLib);
        }
        return null;
    }

    private function completeHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.CLASS_LOADED));
    }

    private function ioErrorHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.LOAD_ERROR));
    }

    private function securityErrorHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.LOAD_ERROR));
    }
}
</codeblock></example><example conref="examples\ApplicationDomainExample.2.as" class="- topic/example "> 複数の SWF ファイルに同じ名前だが異なる実装を提供するコンパイル済みクラスが含まれている場合、次の例に従って、外部からロードする SWF ファイルのクラスをそれぞれのクラスと分割できます。以前の例では、子 SWF が <codeph class="+ topic/ph pr-d/codeph ">ApplicationDomain.currentDomain</codeph> を使用するように指示されました。今回は、新しい <codeph class="+ topic/ph pr-d/codeph ">ApplicationDomain</codeph> が作成されます。これにより、2 番目にロードされる任意の SWF の <codeph class="+ topic/ph pr-d/codeph ">Greeter</codeph> クラスのプロパティおよびメソッドが、最初の <codeph class="+ topic/ph pr-d/codeph ">Greeter</codeph> クラスのプロパティおよびメソッドと置き換わることはありません。これは、<codeph class="+ topic/ph pr-d/codeph ">context.applicationDomain</codeph> プロパティ（<codeph class="+ topic/ph pr-d/codeph ">load</codeph> メソッド）をプロパティを変更してテストできます。このメソッドは <codeph class="+ topic/ph pr-d/codeph ">ClassLoader</codeph> 内のものです。
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b></p>
 <ul class="- topic/ul "><li class="- topic/li ">ClassLoader クラスによって SWF ファイルがロードされるので、ローカルセキュリティはファイルシステムレベルである必要があります。</li><li class="- topic/li ">この例を実行するには、Greeter.swf と呼ばれる 2 つの SWF ファイルがそれぞれ "en" フォルダーおよび "es" フォルダーに存在している必要があります。</li></ul>
 
 <p class="- topic/p ">以下のコードを使用して、Greeter.as ファイルを "en" ディレクトリに作成します。</p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 package {
    import flash.display.Sprite;
    public class Greeter extends Sprite
    {
        public function Greeter()
        {
        }
        
        public function greet():String {
            return("Good Morning");
        }
    }
 }
 </codeblock>
 <p class="- topic/p ">その後、同じ Greeter.as ファイルを "es" ディレクトリに作成します。</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 package {
    import flash.display.Sprite;
    public class Greeter extends Sprite
    {
        public function Greeter()
        {
        }
        
        public function greet():String {
            return("Buenos Dias");
        }
    }
}
 </codeblock>
 
 <p class="- topic/p ">両方の SWF ファイルをコンパイルし、以下のコードを実装します。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.DisplayObject;
    import flash.display.Sprite;
    import flash.errors.IllegalOperationError;
    import flash.events.Event;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;

    public class ApplicationDomainExample2 extends Sprite {
        private var spanishGreeterLoader:ClassLoader;
        private var englishGreeterLoader:ClassLoader;
        private var tf:TextField = new TextField();
        private var greetersLoaded:uint = 0;

        public function ApplicationDomainExample2() {
            tf.autoSize = TextFieldAutoSize.LEFT;
            addChild(tf);

            spanishGreeterLoader = new ClassLoader();
            spanishGreeterLoader.addEventListener(ClassLoader.LOAD_ERROR,loadErrorHandler);
            spanishGreeterLoader.addEventListener(ClassLoader.CLASS_LOADED,classLoadedHandler);
            spanishGreeterLoader.load("es/Greeter.swf");
            
            englishGreeterLoader = new ClassLoader();
            englishGreeterLoader.addEventListener(ClassLoader.LOAD_ERROR,loadErrorHandler);
            englishGreeterLoader.addEventListener(ClassLoader.CLASS_LOADED,classLoadedHandler);
            englishGreeterLoader.load("en/Greeter.swf");
        }

        private function loadErrorHandler(e:Event):void {
            tf.text = "Load failed";
            throw new IllegalOperationError("Cannot load the specified file.");
        }

        private function classLoadedHandler(e:Event):void {
            greetersLoaded++;
            if(greetersLoaded == 2) {
                greet();    
            }
        }
        
        private function greet():void {
            var spanishGreeter:Class = spanishGreeterLoader.getClass("Greeter");
            var englishGreeter:Class = englishGreeterLoader.getClass("Greeter");
            var greeter1 = new spanishGreeter();
            var greeter2 = new englishGreeter();
            
            tf.text = greeter1.greet() + "\n" + greeter2.greet();
        }
    }
}

import flash.display.Loader;
import flash.errors.IllegalOperationError;
import flash.events.Event;
import flash.events.EventDispatcher;
import flash.events.IOErrorEvent;
import flash.events.SecurityErrorEvent;
import flash.net.URLRequest;
import flash.system.ApplicationDomain;
import flash.system.LoaderContext;

class ClassLoader extends EventDispatcher {
    public static var CLASS_LOADED:String = "classLoaded";
    public static var LOAD_ERROR:String = "loadError";
    private var loader:Loader;
    private var swfLib:String;
    private var request:URLRequest;
    private var loadedClass:Class;

    public function ClassLoader() {

        loader = new Loader();
        loader.contentLoaderInfo.addEventListener(Event.COMPLETE,completeHandler);
        loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
        loader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR,securityErrorHandler);
    }

    public function load(lib:String):void {
        swfLib = lib;
        request = new URLRequest(swfLib);
        var context:LoaderContext = new LoaderContext();
//        context.applicationDomain = ApplicationDomain.currentDomain;
        context.applicationDomain = new ApplicationDomain();
        loader.load(request,context);
    }

    public function getClass(className:String):Class {
        try {
            return loader.contentLoaderInfo.applicationDomain.getDefinition(className)  as  Class;
        } catch (e:Error) {
            throw new IllegalOperationError(className + " definition not found in " + swfLib);
        }
        return null;
    }

    private function completeHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.CLASS_LOADED));
    }

    private function ioErrorHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.LOAD_ERROR));
    }

    private function securityErrorHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.LOAD_ERROR));
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.loadBytes()</linktext></link><link href="flash.display.xml#LoaderInfo" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo</linktext></link><link href="flash.net.xml#URLRequest" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLRequest</linktext></link><link href="flash.system.xml#LoaderContext" class="- topic/link "><linktext class="- topic/linktext ">flash.system.LoaderContext</linktext></link></related-links><apiConstructor id="flash.system:ApplicationDomain:ApplicationDomain" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">ApplicationDomain</apiName><shortdesc class="- topic/shortdesc ">
     新しいアプリケーションドメインを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">parentDomain</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.system:ApplicationDomain</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">親ドメインが渡されない場合、このアプリケーションドメインはシステムドメインを親ドメインとします。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     新しいアプリケーションドメインを作成します。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.system:ApplicationDomain:getDefinition" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getDefinition</apiName><shortdesc class="- topic/shortdesc ">
     指定されたアプリケーションドメインから公開定義を取得します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>throws SecurityError The definition belongs to a domain to which
     the calling code does not have access.
     
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定された名前の公開定義は存在しません。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ReferenceError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ReferenceError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">定義に関連付けられたオブジェクトです。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">定義の名前です。
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定されたアプリケーションドメインから公開定義を取得します。定義には、クラス、名前空間、または関数の定義があります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:ApplicationDomain:hasDefinition" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasDefinition</apiName><shortdesc class="- topic/shortdesc ">
     指定されたアプリケーションドメイン内に公開定義が存在するかどうかを確認します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定された定義が存在する場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返します。含まれない場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">定義の名前です。
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定されたアプリケーションドメイン内に公開定義が存在するかどうかを確認します。定義には、クラス、名前空間、または関数の定義があります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.system:ApplicationDomain:MIN_DOMAIN_MEMORY_LENGTH:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MIN_DOMAIN_MEMORY_LENGTH</apiName><shortdesc class="- topic/shortdesc ">
     ApplicationDomain.domainMemory として使用するために必要なメモリオブジェクトの最小の長さを取得します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ApplicationDomain.domainMemory として使用するために必要なメモリオブジェクトの最小の長さを取得します。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:ApplicationDomain:currentDomain:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">currentDomain</apiName><shortdesc class="- topic/shortdesc ">
     コードが実行されている現在のアプリケーションドメインを取得します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Question: Do you call System.currentDomain? or Loader.currentDomain or request.currentDomain?
     
     </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.system:ApplicationDomain</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     コードが実行されている現在のアプリケーションドメインを取得します。
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:ApplicationDomain:domainMemory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">domainMemory</apiName><shortdesc class="- topic/shortdesc ">
     この ApplicationDomain 内でドメイン全般のメモリ処理が実行されるオブジェクトを取得して設定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.utils:ByteArray</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     この ApplicationDomain 内でドメイン全般のメモリ処理が実行されるオブジェクトを取得して設定します。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:ApplicationDomain:parentDomain:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">parentDomain</apiName><shortdesc class="- topic/shortdesc ">
     このアプリケーションドメインの親ドメインを取得します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.system:ApplicationDomain</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このアプリケーションドメインの親ドメインを取得します。
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:Security" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Security</apiName><shortdesc class="- topic/shortdesc ">
 Security クラスによって、異なるドメインに属するコンテンツが互いにどのようにやり取りするかを指定できます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, XMLNode object, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Security クラスによって、異なるドメインに属するコンテンツが互いにどのようにやり取りするかを指定できます。
 
 </apiDesc><example conref="examples\SecurityExample.as" class="- topic/example "> 次の例では、Sprite オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">click</codeph> イベントを使用して、「Flash Player 設定」のローカル記憶領域パネルを表示する方法を示します。オレンジのボックスが <codeph class="+ topic/ph pr-d/codeph ">draw()</codeph> を使用してステージに追加されます。<codeph class="+ topic/ph pr-d/codeph ">draw()</codeph> では、<codeph class="+ topic/ph pr-d/codeph ">click</codeph> イベントリスナーに名前付き <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph> が追加されます。これは <codeph class="+ topic/ph pr-d/codeph ">click</codeph> イベントに応答し、ローカル記憶領域パネルを開くように Flash Player に指示します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.events.*;
    import flash.system.Security;
    import flash.system.SecurityPanel;

    public class SecurityExample extends Sprite {
        private var bgColor:uint = 0xFFCC00;
        private var size:uint = 100;

        public function SecurityExample() {
            draw();
        }

        private function draw():void {
            var child:Sprite = new Sprite();
            child.graphics.beginFill(bgColor);
            child.graphics.drawRect(0, 0, size, size);
            child.graphics.endFill();
            child.buttonMode = true;

            var label:TextField = new TextField();
            label.text = "settings";
            label.selectable = false;
            label.mouseEnabled = false;
            child.addChild(label);

            child.addEventListener(MouseEvent.CLICK, clickHandler);
            addChild(child);
        }

        private function clickHandler(event:MouseEvent):void {
            Security.showSettings(SecurityPanel.LOCAL_STORAGE);
        }
    }
}
</codeblock></example></apiClassifierDetail><apiOperation id="flash.system:Security:allowDomain" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">allowDomain</apiName><shortdesc class="- topic/shortdesc ">
     指定したドメインの SWF ファイルから、allowDomain() 呼び出しを含む SWF ファイルのオブジェクトと変数にアクセスできるようにします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, Security.allowDomain, allowDomain
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">AIR アプリケーションセキュリティサンドボックスのコードからこのメソッドを呼び出すと、SecurityError 例外がスローされます。アプリケーションセキュリティサンドボックス外のコンテンツは、アプリケーションセキュリティサンドボックスのコンテンツをクロススクリプトできません。 
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">domains</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">アクセス元として許可するドメインを指定するストリングまたは URLRequest オブジェクト。特別なドメイン "~~" を指定して、すべてのドメインからのアクセスを許可できます。  
     
     <p class="- topic/p ">Flash Professional で「~~」を指定することは、Flash オーサリングツールで「ローカルでの再生に関するセキュリティ」オプションの「ネットワークにのみアクセスする」を使用してパブリッシュされたローカル SWF ファイルから、ローカル以外の SWF ファイルへのアクセスを許可する唯一の方法です。</p>
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>ワイルドカード値は、サブドメインでは動作しません。例えば、<codeph class="+ topic/ph pr-d/codeph ">domains</codeph> パラメーターで <codeph class="+ topic/ph pr-d/codeph ">~~.foo.com</codeph> を使用することはできません。クロスドメインポリシーファイルについてはワイルドカード値でサブドメインを指定できますが（<codeph class="+ topic/ph pr-d/codeph ">~~.foo.com</codeph> など）、<codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> メソッドではこのようにワイルドカード値を使用することはできません。</p>
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">SWF ファイルおよび HTML ファイルに対して、呼び出し元 SWF ファイルのオブジェクトと変数にアクセスすることを許可します。
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <ph class="- topic/ph ">指定したドメインの SWF ファイルから、<codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> 呼び出しを含む SWF ファイルのオブジェクトと変数にアクセスできるようにします。</ph>
     
     
     
     <p class="- topic/p "><i class="+ topic/ph hi-d/i "/>注意：AIR アプリケーションサンドボックスのコードからこのメソッドを呼び出すと、SecurityError 例外がスローされます。アプリケーションセキュリティドメイン外のコンテンツは、アプリケーションサンドボックスのコンテンツを直接クロススクリプトできません。ただし、アプリケーションサンドボックス外のコンテンツは、サンドボックスブリッジを使用してアプリケーションセキュリティサンドボックス内のコンテンツと通信できます。</p>
     
     <p class="- topic/p ">2 つの SWF ファイルが同じドメインに所属している場合（例えば、http://mysite.com/swfA.swf および http://mysite.com/swfB.swf）、swfA.swf で swfB.swf 内の変数、オブジェクト、プロパティ、メソッドなどを調査、変更でき、swfB.swf でも swfA.swf に対して同様のことを実行できます。これは、クロスムービースクリプトまたはクロススクリプトと呼ばれます。<i class="+ topic/ph hi-d/i "/><i class="+ topic/ph hi-d/i "/></p>
     
     <p class="- topic/p ">2 つの SWF ファイルが異なるドメインに所属している場合（例えば http://siteA.com/swfA.swf および http://siteB.com/swfB.swf）、デフォルトでは、swfA.swf で swfB.swf をスクリプトすることも、swfB.swf で swfA.swf をスクリプトすることも許可されません。SWF ファイルは、<codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph> を呼び出すことで他のドメインの SWF ファイルに許可を付与します。これをクロスドメインスクリプト<i class="+ topic/ph hi-d/i "/>と呼びます。<codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain("siteA.com")</codeph> を呼び出すことで、siteB.swf によって siteA.swf に siteB.swf をスクリプトする許可が付与されます。</p>
     
     <p class="- topic/p ">クロスドメインの場合は、関与する 2 つのドメインを明確にすることが重要です。説明のため、ここでは、クロススクリプトを実行する側をアクセス元<i class="+ topic/ph hi-d/i "/>（通常、アクセスする SWF）と呼び、他をアクセス先<i class="+ topic/ph hi-d/i "/>（通常、アクセスされる SWF ファイル）と呼びます。siteA.swf が siteB.swf をスクリプトする場合、siteA.swf がアクセス元で、siteB.swf がアクセス先となります。</p>
     
     <p class="- topic/p "><adobeimage alt="クロスドメイン図" href="../../images/crossScript_load.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> を使用して確立されるクロスドメイン許可は、非対称です。前の例では、siteA.swf は siteB.swf をスクリプトできますが、siteB.swf は siteA.swf をスクリプトできません。siteA.swf で、siteA.swf をスクリプトする許可を siteB.com の SWF ファイルに付与するための <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> を呼び出していないためです。対称的な許可を設定するには、両方の SWF ファイルで <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> を呼び出すようにする必要があります。</p>
     
     <p class="- topic/p ">Flash Player では、SWF ファイルを他の SWF ファイルによるクロスドメインスクリプトから保護するだけでなく、HTML ファイル によるクロスドメインスクリプトからも保護します。HTML から SWF へのスクリプトは、<codeph class="+ topic/ph pr-d/codeph ">SetVariable</codeph> などの古いブラウザーの関数を使用するか、<codeph class="+ topic/ph pr-d/codeph ">ExternalInterface.addCallback()</codeph> で確立したコールバックを使用することで実行できます。HTML から SWF へのスクリプトがドメインを横切る場合、アクセス先 SWF ファイルは、アクセス元が SWF ファイルの場合と同様に、<codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> を呼び出す必要があります。それ以外の場合、操作は失敗します。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> にパラメーターとして IP アドレスを指定しても、指定された IP アドレスに存在するすべてのアクセス元からのアクセスが許可されるわけではありません。許可されるのは、その IP アドレスにマッピングされるドメイン名ではなく、指定された IP アドレスが URL に含まれるアクセス元からのアクセスだけです。</p> 
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">バージョン固有の相違点</b></p>
     <p class="- topic/p ">Flash Player のクロスドメインセキュリティ規則は、バージョンを追うごとに発展してきました。次の表は、相違点をまとめたものです。</p>
     
     <adobetable class="innertable"><tgroup cols="5" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">クロススクリプトに関係する最新の SWF のバージョン</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> の必要性</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> の必要性</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> を呼び出す必要のある SWF ファイル</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> に指定できる項目</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry align="center" class="- topic/entry ">5 以前</entry><entry class="- topic/entry ">不可</entry><entry align="center" class="- topic/entry ">不可</entry><entry align="center" class="- topic/entry ">N/A</entry><entry align="center" class="- topic/entry ">N/A</entry></row><row class="- topic/row "><entry align="center" class="- topic/entry ">6</entry><entry class="- topic/entry ">はい（スーパードメインが一致しない場合）</entry><entry align="center" class="- topic/entry ">不可</entry><entry class="- topic/entry ">アクセス先 SWF ファイルまたはアクセス先 SWF ファイルと同じスーパードメインにある任意の SWF ファイル</entry><entry class="- topic/entry "><ul class="- topic/ul "><li class="- topic/li ">テキストベースのドメイン（mysite.com）</li><li class="- topic/li ">IP アドレス（192.168.1.1）</li></ul></entry></row><row class="- topic/row "><entry align="center" class="- topic/entry ">7</entry><entry class="- topic/entry ">はい（ドメインが完全に一致しない場合）</entry><entry class="- topic/entry ">はい（HTTP から HTTPS へのアクセスを実行する場合（ドメインが完全に一致する場合でも））</entry><entry class="- topic/entry ">アクセス先 SWF ファイルまたはアクセス先 SWF ファイルとまったく同じドメインにある任意の SWF ファイル</entry><entry class="- topic/entry "><ul class="- topic/ul "><li class="- topic/li ">テキストベースのドメイン（mysite.com）</li><li class="- topic/li ">IP アドレス（192.168.1.1）</li></ul></entry></row><row class="- topic/row "><entry align="center" class="- topic/entry ">8 以降</entry><entry class="- topic/entry ">はい（ドメインが完全に一致しない場合）</entry><entry class="- topic/entry ">はい（HTTP から HTTPS へのアクセスを実行する場合（ドメインが完全に一致する場合でも））</entry><entry class="- topic/entry ">アクセス先 SWF ファイル</entry><entry class="- topic/entry "><ul class="- topic/ul "><li class="- topic/li ">テキストベースのドメイン（mysite.com）</li><li class="- topic/li ">IP アドレス（192.168.1.1）</li><li class="- topic/li ">ワイルドカード（~~）</li></ul></entry></row></tbody></tgroup></adobetable>
      
     <p class="- topic/p ">Flash Player の動作を制御するバージョンは、Flash Player 自身のバージョンでなく、SWF バージョン<i class="+ topic/ph hi-d/i "/>（SWF ファイルのパブリッシュバージョン）です。例えば、Flash Player 8 でバージョン 7 用にパブリッシュされた SWF ファイルを再生する場合、バージョン 7 と一貫した動作が適用されます。これによって、アップグレードしても、デプロイされた SWF ファイル内の <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph> の動作は変更されなくなります。</p>
     
     <p class="- topic/p ">前の表のバージョン列は、クロススクリプト操作に関係する最新の SWF のバージョンを示しています。Flash Player の動作は、アクセス元 SWF ファイルまたはアクセス先 SWF ファイルのバージョンのいずれか新しい方のバージョンによって決まります。</p>
     
     <p class="- topic/p ">次の段落では、<codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph> に関係する Flash Player のセキュリティ機能の変更について詳細に説明します。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">バージョン 5</b> : クロスドメインスクリプトの制限はありません。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">バージョン 6</b> : クロスドメインスクリプトのセキュリティが導入されました。デフォルトでは、クロスドメインスクリプトは禁止されています。<codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph> で許可できます。2 つのファイルが同じドメインに属しているかどうかを判別するため、各ファイルのスーパードメインが使用されます。このスーパードメインは、ファイルの URL の完全なホスト名から最初のセグメントを除き、最低 2 セグメントにまでしたものです。例えば、www.mysite.com のスーパードメインは、mysite.com となります。www.mysite.com の SWF ファイルと store.mysite.com の SWF ファイルは、<codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph> を呼び出さずに、お互いをスクリプトします。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">バージョン 7</b> : スーパードメイン一致が、完全なドメイン一致に変更されました。2 つのファイルでお互いにスクリプトの実行が許可されるのは、それらの URL のホスト名が同じ場合だけです。それ以外の場合は、<codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph> を呼び出す必要があります。デフォルトでは、HTTPS 以外の URL からロードしたファイルは、まったく同じドメインからファイルをロードしたとしても、HTTPS の URL からロードしたファイルをスクリプトできません。この制限は HTTPS ファイルの保護に役立ちます。HTTPS 以外のファイルは、ダウンロード中に変更されやすく、HTTPS 以外のファイルが悪意を持って変更されると、このような不正操作を受けにくい HTTPS ファイルを破損させる可能性があります。アクセス先の HTTPS SWF ファイルが自発的にこの制限を無効にできるように、<codeph class="+ topic/ph pr-d/codeph ">Security.allowInsecureDomain()</codeph> を導入しましたが、<codeph class="+ topic/ph pr-d/codeph ">Security.allowInsecureDomain()</codeph> を使用しないことをお勧めします。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">バージョン 8</b> : 2 つの主要な変更点は次のとおりです。</p>
     
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph> を呼び出した場合、アクセス先 SWF ファイルが <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph> を呼び出した SWF ファイルであるときにのみ、クロススクリプト操作が許可されるようになりました。つまり、<codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph> を呼び出した SWF ファイルのみが、自身へのアクセスを許可できるようになりました。前のバージョンでは、<codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph> を呼び出した場合に、アクセス先 SWF ファイルが <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph> を呼び出した SWF ファイルと同じドメインにある SWF ファイルであれば、クロススクリプト操作が許可されていました。前のバージョンでは、<codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph> を呼び出すと、呼び出し元 SWF ファイルのドメイン全体が開きました。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain("~~")</codeph> および <codeph class="+ topic/ph pr-d/codeph ">Security.allowInsecureDomain("~~")</codeph> では、ワイルドカード値のサポートが追加されました。ワイルドカード（~~）値を使用すると、アクセス元ファイルがどこからロードされたかを問わず、任意のファイルでクロススクリプト操作を許可できます。ワイルドカードは、グローバル許可と考えてください。ワイルドカード許可は、ローカルファイルセキュリティ規則の下で特定の操作を有効にする場合に必要となります。具体的には、ローカル SWF ファイルで、その SWF ファイルにインターネット上の SWF ファイルをスクリプトするネットワークアクセス許可がある場合、アクセス先のインターネット SWF ファイルは、ローカル SWF ファイルの出所が不明であることを反映して、<codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain("~~")</codeph> を呼び出す必要があります。インターネット SWF ファイルが HTTPS URL からロードされる場合は、インターネット SWF ファイルでは、代わりに <codeph class="+ topic/ph pr-d/codeph ">Security.allowInsecureDomain("~~")</codeph> を呼び出す必要があります。</li></ul>
       
     <p class="- topic/p ">場合によっては、他のドメインから子 SWF ファイルをロードし、その子 SWF ファイルで親 SWF ファイルをスクリプトしたいが、子 SWF ファイルの最終的なドメインがわからないという状況になることがあります。例えば、ロードバランシングリダイレクトやサードパーティー製サーバーを使用する場合などです。</p>
     
     <p class="- topic/p ">この状況では、<codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> に渡す URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">url</codeph> プロパティを使用できます。例えば、子 SWF ファイルを 親 SWF にロードする場合、親 SWF の Loader オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">contentLoaderInfo</codeph> プロパティに次のようにアクセスできます。 </p>
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">Security.allowDomain(loader.contentLoaderInfo.url)</codeblock>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">url</codeph> プロパティの正しい値を取得するために、子 SWF ファイルのロードが開始されるまで待つようにしてください。子 SWF のロードがいつ開始されたかを確認するには、<codeph class="+ topic/ph pr-d/codeph ">progress</codeph> イベントを使用します。</p>
     
     <p class="- topic/p ">この反対の状況が発生する場合もあります。つまり、親 SWF ファイルで子 SWF ファイルをスクリプトしたいが、親 SWF ファイルのドメインがわからない場合です。この状況では、SWF のルートオブジェクトである表示オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">loaderInfo</codeph> プロパティにアクセスできます。子 SWF で、<codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain( this.root.loaderInfo.loaderURL)</codeph> を呼び出します。親 SWF ファイルがロードされるまで待つ必要はありません。親 SWF ファイルは子 SWF ファイルがロードされた時点で既にロードされています。</p>
     
     <p class="- topic/p ">Flash Player 8 以降用にパブリッシュする場合、<codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain("~~")</codeph> を呼び出すことによってこのような状況を処理することもできます。ただし、これは危険な近道になりかねません。任意のドメインの任意の他の SWF ファイルから呼び出し元 SWF ファイルにアクセスできるようになるためです。通常、<codeph class="+ topic/ph pr-d/codeph ">_url</codeph> プロパティを使用した方が安全です。</p> 
     
     <p class="- topic/p "> セキュリティについて詳しくは、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.external.xml#ExternalInterface/addCallback()" class="- topic/link "><linktext class="- topic/linktext ">ExternalInterface.addCallback()</linktext></link><link href="flash.events.xml#Event/COMPLETE" class="- topic/link "><linktext class="- topic/linktext ">flash.events.Event.COMPLETE</linktext></link><link href="flash.display.xml#DisplayObject/parent" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.parent</linktext></link><link href="flash.net.xml#URLRequest/url" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLRequest.url</linktext></link><link href="flash.system.xml#Security/allowInsecureDomain()" class="- topic/link "><linktext class="- topic/linktext ">allowInsecureDomain()</linktext></link></related-links></apiOperation><apiOperation id="flash.system:Security:allowInsecureDomain" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">allowInsecureDomain</apiName><shortdesc class="- topic/shortdesc ">
     指定したドメイン内の SWF ファイルおよび HTML ファイルが、HTTPS プロトコルでホストされた呼び出し元 SWF ファイルのオブジェクトと変数にアクセスすることを許可します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, Security.allowInsecureDomain, allowInsecureDomain
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このメソッドを AIR アプリケーションセキュリティサンドボックス内のコードから呼び出すと、SecurityError 例外がスローされます。アプリケーションセキュリティサンドボックス外のコンテンツは、アプリケーションセキュリティサンドボックスのコンテンツをクロススクリプトできません。 
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">domains</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">アクセス元として許可するドメインを指定するストリングまたは URLRequest オブジェクト。特別なドメイン "~~" を指定して、すべてのドメインからのアクセスを許可できます。  
     
     <p class="flashonly">"~~" を指定することは、Flash オーサリングツールで「ローカルでの再生に関するセキュリティ」設定（ファイル／パブリッシュ設定／Flash タブ）の「ネットワークにのみアクセスする」オプションを使用してパブリッシュされたローカル SWF ファイルから、ローカル以外の SWF ファイルへのアクセスを許可する唯一の方法です。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>ワイルドカード値は、サブドメインでは動作しません。例えば、<codeph class="+ topic/ph pr-d/codeph ">domains</codeph> パラメーターで <codeph class="+ topic/ph pr-d/codeph ">~~.foo.com</codeph> を使用することはできません。クロスドメインポリシーファイルについてはワイルドカード値でサブドメインを指定できますが（<codeph class="+ topic/ph pr-d/codeph ">~~.foo.com</codeph> など）、<codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> メソッドではこのようにワイルドカード値を使用することはできません。</p>
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">HTTPS プロトコルでホストされた SWF ファイルおよび HTML ファイルが、呼び出し元 SWF ファイルのオブジェクトと変数にアクセスすることを許可します。
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <ph class="- topic/ph ">指定したドメイン内の SWF ファイルおよび HTML ファイルが、HTTPS プロトコルでホストされた呼び出し元 SWF ファイルのオブジェクトと変数にアクセスすることを許可します。</ph>
     
     
     
     
     <p class="- topic/p ">Flash Player では柔軟性を最大化するために <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> が用意されていますが、このメソッドは呼び出さないことをお勧めします。 HTTPS を介してファイルを提供すると、開発者やユーザーに対して複数の保護機能を提供できますが、<codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain</codeph> の呼び出しによって、これらの保護機能は脆弱になります。</p>
     
     <p class="- topic/p "><i class="+ topic/ph hi-d/i "/>注意：AIR アプリケーションサンドボックスのコードからこのメソッドを呼び出すと、SecurityError 例外がスローされます。アプリケーションセキュリティドメイン外のコンテンツは、アプリケーションサンドボックスのコンテンツを直接クロススクリプトできません。ただし、アプリケーションサンドボックス外のコンテンツは、サンドボックスブリッジを使用してアプリケーションセキュリティサンドボックス内のコンテンツと通信できます。</p>
     
     <p class="- topic/p ">このメソッドは、<codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph> と同様に機能します。ただし、アクセス元が HTTPS 以外のプロトコルでロードされ、アクセス先が HTTPS でロードされる操作も許可します。Flash Player 7 以降では、HTTPS 以外のファイルで、HTTPS ファイルをスクリプトすることは許可されません。アクセス先 HTTPS SWF ファイルで <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> メソッドを使用すると、この制限が解除されます。</p>
     
     <p class="- topic/p ">HTTPS 以外のファイルから HTTPS ファイルへのスクリプトを有効にする場合にのみ、<codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> を使用してください。アクセス元の HTTPS 以外のファイルとアクセス先の HTTPS ファイルが、同じドメインに所属しているときのスクリプト（例えば、http://mysite.com にある SWF ファイルで https://mysite.com にある SWF ファイルをスクリプトする場合）を有効にするために使用します。HTTPS 以外のファイル間でのスクリプト、HTTPS ファイル間でのスクリプトまたは HTTPS ファイルから HTTPS 以外のファイルへのスクリプトを有効にするためには使用しないでください。このような状況では、代わりに <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> を使用します。</p>
     
     次のシナリオでは、<codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> を十分に考慮せずに使用した場合にセキュリティが危険にさらされる状況を説明します。
     
     <p class="- topic/p ">次の情報は、考えられるシナリオのうちの 1 つで、クロススクリプトの実際例を通じて <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> を理解できるように設計されています。セキュリティアーキテクチャに関する問題をすべて取り上げているわけではなく、背景情報としてのみ使用する必要があります。Flash Player デベロッパーセンターには、Flash Player およびセキュリティに関する広範な情報があります。詳細については、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
     
     <p class="- topic/p ">次の 2 つのコンポーネントから構成される e-コマースサイトを構築するシナリオについて考えてみます。1 つはカタログで、公開情報しか含まれていないため、保護する必要はありません。もう 1 つは、ショッピングカート/チェックアウトコンポーネントで、ユーザーの財務情報と個人情報を保護するためにセキュリティで保護する必要があります。ここで、カタログのサービスは http://mysite.com/catalog.swf から、カートのサービスは https://mysite.com/cart.swf から提供するものとします。このサイトの 1 つの要件として、第三者がセキュリティアーキテクチャの脆弱性を利用して、ユーザーのクレジットカード番号を盗むことができないことが挙げられます。</p>
     
     <p class="- topic/p ">ここで、中間当事者である攻撃者がサーバーとユーザーの間に介入して、ユーザーがショッピングカートアプリケーションに入力したクレジットカード番号を盗もうとするとします。中間当事者としては、一部のユーザーが利用している悪質な ISP、ユーザーの職場にいる悪意がある管理者など、パブリックインターネット経由で送信されるネットワークパケットをユーザーとサーバー間で表示または変更できるものが考えられます。この状況は珍しいことではありません。</p> 
     
     <p class="- topic/p ">cart.swf で HTTPS を使用してクレジットカード情報をサーバーに送信している場合、中間当事者の攻撃者は、HTTPS 送信が暗号化されているため、ネットワークパケットから直接この情報を盗むことができません。ただし、攻撃者は別の手法を使用できます。それは、いずれかの SWF ファイルの内容をユーザーへの配信時に変更し、その SWF ファイルを（ユーザー情報を攻撃者が所有する別のサーバーに送信する）改変バージョンと置き換えるという手法です。</p>
     
     <p class="- topic/p ">HTTPS プロトコルは、何よりもまずこの "変更" 攻撃を防止します。暗号化されているだけでなく、HTTPS 送信に不正操作防止機能が付いているためです。中間当事者の攻撃者がパケットを変更すると、受信側はその変更を検出し、パケットを廃棄します。このため、この状況で攻撃者は cart.swf を変更できません。このファイルが HTTPS 経由で配信されるからです。</p>
     
     <p class="- topic/p ">ところで、HTTP 経由で提供される catalog.swf 内のボタンで、HTTP 経由で提供される cart.swf 内のショッピングカートにアイテムを追加できるようにしたいとします。この機能を実現するために、cart.swf で <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> を呼び出します。これで、catalog.swf は cart.swf をスクリプトできます。ただし、このアクションでは、予期しない結果が発生します。この場合、攻撃者は、catalog.swf をユーザーが最初にダウンロードする際、その内容を変更できます。catalog.swf は HTTP で配信され、不正操作防止機能が付いていないためです。攻撃者が変更した catalog.swf は、これで cart.swf をスクリプトできるようになります。cart.swf に <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> への呼び出しが含まれているためです。変更された catalog.swf ファイルは、ActionScript を使用して、cart.swf 内の変数にアクセスできるため、ユーザーのクレジットカード情報やその他の機密データを読み取ることができます。その後、変更された catalog.swf は、このデータを攻撃者のサーバーに送信できます。</p>
     
     <p class="- topic/p ">この実装は明らかに好ましいものではありませんが、サイト上の 2 つの SWF ファイル間でクロススクリプトを許可したい場合があります。次に、この仮想の e-コマースサイトを再設計して <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> を除外する方法として、考えられる方法を 2 つ示します。</p>
     
     <ul class="- topic/ul "><li class="- topic/li ">アプリケーション内のすべての SWF ファイルを HTTPS 経由で提供します。これは最も単純で信頼性が高いソリューションです。説明したシナリオでは、catalog.swf と cart.swf の両方を HTTPS 経由で提供します。catalog.swf などのファイルを HTTP から HTTPS に切り替える際、帯域幅の使用量とサーバーの CPU 負荷が少し上がり、ユーザー側では、アプリケーションのロード時間がやや長くなる可能性があります。実際のサーバーで実験して、これらの影響の重大度を判別する必要があります。通常は、それぞれ 10 ～ 20% 程度で、まったく影響がないこともあります。サーバーにある HTTPS 加速ハードウェアやソフトウェアを使用すると、通常は結果を改善できます。関係するすべての SWF ファイルを HTTPS 経由で提供する主要なメリットは、ブラウザーから内容が混在した警告を生成せずに、HTTPS URL をユーザーのブラウザー内の主要な URL として使用できることです。また、ブラウザーのカギのアイコンが表示されるため、セキュリティに関する共通の信頼できるインジケーターがユーザーに提供されます。</li><li class="- topic/li ">HTTP から HTTPS へのスクリプトでなく、HTTPS から HTTP へのスクリプトを使用します。説明したシナリオでは、ユーザーのショッピングカートの内容を catalog.swf に保存し、cart.swf でチェックアウトプロセスのみ管理させることができます。チェックアウト時に、cart.swf で、catalog.swf 内の ActionScript 変数からカートの内容を取得できます。HTTP から HTTPS へのスクリプトに関する制限は非対称的なものです。HTTP 経由で提供される catalog.swf ファイルが HTTPS 経由で提供される cart.swf ファイルをスクリプトすることは安全上許可されませんが、HTTPS 経由で提供される cart.swf ファイルは HTTP 経由で提供される catalog.swf ファイルをスクリプトできます。このアプローチは、すべて HTTPS 経由のアプローチよりも微妙な点があります。不正操作を受けやすいため、HTTP 経由で提供される SWF ファイルは信頼しないように注意する必要があります。例えば、cart.swf でカートの内容を記述した ActionScript 変数を取得する際、cart.swf 内の ActionScript コードで、この変数の値が期待した形式になっていると信頼することはできません。カートの内容を確認して、cart.swf に好ましくないアクションを実行させる無効なデータが含まれていないことを調べる必要があります。また、中間当事者が catalog.swf を変更して、例えば、ユーザーのカートにアイテムを入れることにより、有効だが不正確なデータを cart.swf に提供する危険性を甘受する必要があります。通常のチェックアウトプロセスでは、カートの内容と合計金額を表示してユーザーに最後の承認を求めることで、この危険性をいくぶん緩和していますが、それでも危険性は残っています。</li></ul>
     
     <p class="- topic/p ">Web ブラウザーでは、長年にわたり HTTPS ファイルと HTTPS 以外のファイルの分離を強制してきました。説明したシナリオでは、この制限が必要であることの 1 つの理由が明確に示されています。Flash Player では、絶対必要な場合、このセキュリティの制限を回避できますが、それを実行する前に結果を慎重に検討する必要があります。</p>
     
     <p class="- topic/p ">セキュリティについて詳しくは、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/allowDomain()" class="- topic/link "><linktext class="- topic/linktext ">allowDomain()</linktext></link></related-links></apiOperation><apiOperation id="flash.system:Security:loadPolicyFile" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">loadPolicyFile</apiName><shortdesc class="- topic/shortdesc ">  
     url パラメーターで指定された場所でポリシーファイルを探します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">url</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">読み込むポリシーファイルの URL の場所。
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">url パラメーターで指定された場所でポリシーファイルを探します。
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">  
     <codeph class="+ topic/ph pr-d/codeph ">url</codeph> パラメーターで指定された場所でポリシーファイルを探します。Adobe AIR および Flash Player は、ポリシーファイルを使用して、アプリケーションが自身のサーバー以外のサーバーからデータをロードしてよいかどうか判断します。メソッド名は <codeph class="+ topic/ph pr-d/codeph ">loadPolicyFile()</codeph> ですが、ネットワー要求によってポリシーファイルが要求されるまではファイルは実際にはロードされません。
     
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">Security.loadPolicyFile()</codeph> によって、Flash Player または AIR では任意の場所からポリシーファイルをロードできるようになります。次に例を示します。</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     Security.loadPolicyFile("http://www.example.com/sub/dir/pf.xml");
     </codeblock>
     
     
     
     <p class="- topic/p ">これにより、Flash Player または AIR は指定された URL からポリシーファイルを取得しようとします。この場所に置かれているポリシーファイルによって得られる許可は、サーバーの仮想ディレクトリ階層で同レベル以下のコンテンツすべてに適用されます。 </p>
     
     <p class="- topic/p ">例えば、前のコードに続くこれらの行によって例外はスローされません。</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock "> import flash.net.~~;
     var request:URLRequest = new URLRequest("http://www.example.com/sub/dir/vars.txt");
     var loader:URLLoader = new URLLoader();
     loader.load(request);
     
     var loader2:URLLoader = new URLLoader();
     var request2:URLRequest = new URLRequest("http://www.example.com/sub/dir/deep/vars2.txt");
     loader2.load(request2);
     </codeblock>
     
     <p class="- topic/p ">ただし、次のコードではセキュリティ例外がスローされます。</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock "> import flash.net.~~;
     var request3:URLRequest = new URLRequest("http://www.example.com/elsewhere/vars3.txt");
     var loader3:URLLoader = new URLLoader();
     loader3.load(request3);
     </codeblock>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">loadPolicyFile()</codeph> を使用して、任意の数のポリシーファイルをロードできます。ポリシーファイルを必要とする要求がある場合、Flash Player または AIR はポリシーファイルのダウンロードがすべて完了するまで必ず待機します。その間に要求が拒否されることはありません。<codeph class="+ topic/ph pr-d/codeph ">loadPolicyFile()</codeph> で指定されたポリシーファイルによって要求が許可されなかった場合は、最終的にデフォルトの場所が参照されます。</p>
     
     <p class="- topic/p ">マスターポリシーファイルのチェックを行うとき、Flash Player はサーバーの応答を 3 秒間待機します。 応答がない場合、Flash Player ではマスターポリシーファイルが存在しないと判断されます。しかし、<codeph class="+ topic/ph pr-d/codeph ">loadPolicyFile()</codeph> の呼び出しのデフォルトタイムアウト値はありません。Flash Player では、呼び出されているファイルが存在するものとして、そのファイルをロードするのに必要なだけ待機します。したがって、マスターポリシーファイルを確実にロードするには、<codeph class="+ topic/ph pr-d/codeph ">loadPolicyFile()</codeph> を使用し、明示的に呼び出します。</p>
     
     <p class="- topic/p ">一般的な予約ポートには接続できません。遮断されたポートの詳しいリストについては、『ActionScript 3.0 開発ガイド<i class="+ topic/ph hi-d/i "/>』の「ネットワーク API の制限」を参照してください。</p>
     
     <p class="- topic/p ">特定のポート番号で <codeph class="+ topic/ph pr-d/codeph ">xmlsocket</codeph> プロトコルを使用することで、直接 XMLSocket サーバーからポリシーファイルを取得することができます。次に例を示します。ソケット接続は、上記のよく予約されるポートに関する制限事項の対象外です。</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     Security.loadPolicyFile("xmlsocket://foo.com:414");
     </codeblock>
     
     
     
     <p class="- topic/p ">このコードを使用すると、Flash Player または AIR は指定されたホストとポートからポリシーファイルを取得しようとします。指定されたポートを使用して接続が確立されると、Flash Player または AIR は <codeph class="+ topic/ph pr-d/codeph ">&lt;policy-file-request /></codeph> を送信します（これは、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> バイトで終了します）。ポリシーファイルを終了するためにサーバーから null バイトを送信し、それ以降の接続を閉じる必要があります。サーバー側で接続を閉じなければ、最後の <codeph class="+ topic/ph pr-d/codeph ">null</codeph> バイトが受信されるとすぐに Flash Player 側または AIR 側で接続が閉じられます。</p>
     
     <p class="- topic/p ">SWF ファイルがこのメソッドを使用しないようにするには、<codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> パラメーター（SWF コンテンツを含んでいる HTML ページの <codeph class="+ topic/ph pr-d/codeph ">object</codeph> タグおよび <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> タグのパラメーター）を設定します。</p>
     
     <p class="- topic/p ">セキュリティについて詳しくは、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:Security:showSettings" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">showSettings</apiName><shortdesc class="- topic/shortdesc ">
     Flash Player のセキュリティ設定パネルを表示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, Security.showSettings(), showSettings()
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">panel</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">default</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">どのセキュリティ設定パネルを表示するかを指定する SecurityPanel クラスの値です。このパラメーターを省略すると、<codeph class="+ topic/ph pr-d/codeph ">SecurityPanel.DEFAULT</codeph> が使用されます。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Flash Player のセキュリティ設定パネルを表示します。このメソッドは Adobe AIR のコンテンツに適用されません。AIR アプリケーションでこのメソッドを呼び出しても無効です。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.system.xml#SecurityPanel" class="- topic/link "><linktext class="- topic/linktext ">SecurityPanel</linktext></link></related-links></apiOperation><apiValue id="flash.system:Security:APPLICATION" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">APPLICATION</apiName><shortdesc class="- topic/shortdesc ">
	 このファイルは AIR アプリケーションで実行され、そのアプリケーションのパッケージ（AIR ファイル）と共にインストールされます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">application</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 このファイルは AIR アプリケーションで実行され、そのアプリケーションのパッケージ（AIR ファイル）と共にインストールされます。このコンテンツは AIR アプリケーションリソースディレクトリ（アプリケーションコンテンツのインストール先）に含まれています。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/sandboxType" class="- topic/link "><linktext class="- topic/linktext ">sandboxType</linktext></link><link href="flash.system.xml#Security/REMOTE" class="- topic/link "><linktext class="- topic/linktext ">REMOTE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_FILE" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_WITH_FILE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_NETWORK" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_WITH_NETWORK</linktext></link><link href="flash.system.xml#Security/LOCAL_TRUSTED" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_TRUSTED</linktext></link></related-links></apiValue><apiValue id="flash.system:Security:LOCAL_TRUSTED" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LOCAL_TRUSTED</apiName><shortdesc class="- topic/shortdesc ">
     このファイルはローカルファイルであり、信頼性があります。このファイルは Flash Player 設定マネージャーまたは FlashPlayerTrust 構成ファイルを使用します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
      
      </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">localTrusted</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このファイルはローカルファイルであり、信頼性があります。このファイルは Flash Player 設定マネージャーまたは FlashPlayerTrust 構成ファイルを使用します。このファイルは、ローカルのデータソースから読み取ることも、インターネットでやり取りすることもできます。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/sandboxType" class="- topic/link "><linktext class="- topic/linktext ">sandboxType</linktext></link><link href="flash.system.xml#Security/REMOTE" class="- topic/link "><linktext class="- topic/linktext ">REMOTE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_FILE" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_WITH_FILE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_NETWORK" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_WITH_NETWORK</linktext></link><link href="flash.system.xml#Security/APPLICATION" class="- topic/link "><linktext class="- topic/linktext ">APPLICATION</linktext></link></related-links></apiValue><apiValue id="flash.system:Security:LOCAL_WITH_FILE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LOCAL_WITH_FILE</apiName><shortdesc class="- topic/shortdesc ">
     このファイルはローカルファイルであり、信頼性はなく、ネットワークを指定してパブリッシュされた SWF ファイルではありません。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
      
      </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">localWithFile</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このファイルはローカルファイルであり、信頼性はなく、ネットワークを指定してパブリッシュされた SWF ファイルではありません。Adobe AIR では、ローカルファイルはアプリケーションリソースディレクトリにはありません。これらのファイルはアプリケーションセキュリティサンドボックスに配置されます。<i class="+ topic/ph hi-d/i "/> ファイルは、ローカルのデータソースから読み取ることはできますが、インターネットでのやり取りはできません。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/sandboxType" class="- topic/link "><linktext class="- topic/linktext ">sandboxType</linktext></link><link href="flash.system.xml#Security/REMOTE" class="- topic/link "><linktext class="- topic/linktext ">REMOTE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_NETWORK" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_WITH_NETWORK</linktext></link><link href="flash.system.xml#Security/LOCAL_TRUSTED" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_TRUSTED</linktext></link><link href="flash.system.xml#Security/APPLICATION" class="- topic/link "><linktext class="- topic/linktext ">APPLICATION</linktext></link></related-links></apiValue><apiValue id="flash.system:Security:LOCAL_WITH_NETWORK" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LOCAL_WITH_NETWORK</apiName><shortdesc class="- topic/shortdesc ">
	 このファイルはローカルファイルであり、信頼性はありませんが、ネットワークを指定してパブリッシュされた SWF ファイルです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
      
      </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">localWithNetwork</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 このファイルはローカルファイルであり、信頼性はありませんが、ネットワークを指定してパブリッシュされた SWF ファイルです。このファイルはインターネットとのやり取りはできますが、ローカルデータソースからの読み取りはできません。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/sandboxType" class="- topic/link "><linktext class="- topic/linktext ">sandboxType</linktext></link><link href="flash.system.xml#Security/REMOTE" class="- topic/link "><linktext class="- topic/linktext ">REMOTE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_FILE" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_WITH_FILE</linktext></link><link href="flash.system.xml#Security/LOCAL_TRUSTED" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_TRUSTED</linktext></link><link href="flash.system.xml#Security/APPLICATION" class="- topic/link "><linktext class="- topic/linktext ">APPLICATION</linktext></link></related-links></apiValue><apiValue id="flash.system:Security:REMOTE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">REMOTE</apiName><shortdesc class="- topic/shortdesc ">
     このファイルはインターネット URL からのものであり、ドメインベースのサンドボックス規則に従って機能します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
      
      </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">remote</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このファイルはインターネット URL からのものであり、ドメインベースのサンドボックス規則に従って機能します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/sandboxType" class="- topic/link "><linktext class="- topic/linktext ">sandboxType</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_FILE" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_WITH_FILE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_NETWORK" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_WITH_NETWORK</linktext></link><link href="flash.system.xml#Security/LOCAL_TRUSTED" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_TRUSTED</linktext></link><link href="flash.system.xml#Security/APPLICATION" class="- topic/link "><linktext class="- topic/linktext ">APPLICATION</linktext></link></related-links></apiValue><apiValue id="flash.system:Security:exactSettings:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">exactSettings</apiName><shortdesc class="- topic/shortdesc ">
     特定の コンテンツ設定に使用するドメインを Flash Player または AIR がどのように選択するかを指定します。設定には、カメラとマイクの許可、記憶領域の割り当て、永続共有オブジェクトの記憶領域などがあります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, Security.exactSettings, exactSettings
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Flash Player または AIR アプリケーションは、プレーヤー設定に関する決定で <codeph class="+ topic/ph pr-d/codeph ">exactSettings</codeph> の値を少なくとも一度使用しました。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     特定の コンテンツ設定に使用するドメインを Flash Player または AIR がどのように選択するかを指定します。設定には、カメラとマイクの許可、記憶領域の割り当て、永続共有オブジェクトの記憶領域などがあります。Flash Player 6 で使用されていた設定と同じ設定を SWF ファイルで使用するには、<codeph class="+ topic/ph pr-d/codeph ">exactSettings</codeph> を <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定します。
     
     
     
     <p class="- topic/p ">Flash Player 6 では、これらのプレーヤー設定に使用されていたドメインは、SWF ファイルのドメインの最後の部分に基づいていました。www.example.com のように SWF ファイルのドメインに 3 つ以上のセグメントが含まれている場合、ドメインの最初のセグメント（"www"）は削除され、ドメインの残りの部分 example.com が使用されます。したがって、Flash Player 6 における www.example.com と store.example.com では、どちらも example.com がこれらの設定のドメインとして使用されます。同様に、www.example.co.uk と store.example.co.uk はどちらも example.co.uk をこれらの設定のドメインとして使用します。Flash Player 7 以降では、プレーヤー設定はデフォルトで SWF ファイルの正確なドメインに従って選択されます。例えば、www.example.com の SWF ファイルは www.example.com のプレーヤー設定を使用し、store.example.com の SWF ファイルはそれとは別の store.example.com のプレーヤー設定を使用します。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">Security.exactSettings</codeph> が <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定された場合、Flash Player または AIR は、プレーヤー設定に対して正確なドメインを使用します。<codeph class="+ topic/ph pr-d/codeph ">exactSettings</codeph> のデフォルト値は <codeph class="+ topic/ph pr-d/codeph ">true</codeph> です。<codeph class="+ topic/ph pr-d/codeph ">exactSettings</codeph> をデフォルト値から変更する場合は、Flash Player または AIR でプレーヤー設定を選択する必要があるイベントが発生する前に、その変更を行う必要があります。例えば、カメラまたはマイクの使用や永続共有オブジェクトの取得などのイベントの前です。</p>
     
     <p class="- topic/p ">バージョン 6 の SWF ファイルをパブリッシュし、そのファイルから永続共有オブジェクトを作成しているときに、バージョン 7 以降にその SWF ファイルを移植した後で SWF ファイルからその永続共有オブジェクトを取得するか、バージョン 7 以降の別の SWF ファイルからその永続共有オブジェクトを取得する必要がある場合は、<codeph class="+ topic/ph pr-d/codeph ">Security.exactSettings</codeph> を <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定してから <codeph class="+ topic/ph pr-d/codeph ">SharedObject.getLocal()</codeph> を呼び出します。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Security:pageDomain:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">pageDomain</apiName><shortdesc class="- topic/shortdesc ">
     SWF を含んでいるページのドメインを取得します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     SWF を含んでいるページのドメインを取得します。セキュリティ上の理由から、このメソッドは完全な URL を返さず、ページのドメインのみ（http://www.example.com など）を返します。 
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Security:sandboxType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">sandboxType</apiName><shortdesc class="- topic/shortdesc ">
     呼び出し元のファイルが動作しているセキュリティサンドボックスのタイプを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     呼び出し元のファイルが動作しているセキュリティサンドボックスのタイプを示します。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">Security.sandboxType</codeph> は、次のいずれかの値になります。</p>
     
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">remote</codeph> (<codeph class="+ topic/ph pr-d/codeph ">Security.REMOTE</codeph>) — この ファイルはインターネット URL からのものであり、ドメインベースのサンドボックス規則に従って機能します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">localWithFile</codeph> (<codeph class="+ topic/ph pr-d/codeph ">Security.LOCAL_WITH_FILE</codeph>) - このファイルはローカルファイルであり、信頼性はなく、ネットワークを指定してパブリッシュされた SWF ファイルではありません。ファイルは、ローカルのデータソースから読み取ることはできますが、インターネットでのやり取りはできません。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">localWithNetwork</codeph> (<codeph class="+ topic/ph pr-d/codeph ">Security.LOCAL_WITH_NETWORK</codeph>) - この SWF ファイルはローカルファイルであり、信頼性はありませんが、ネットワークを指定してパブリッシュされています。この SWF ファイルはインターネットとのやり取りはできますが、ローカルデータソースからの読み取りはできません。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">localTrusted</codeph>（<codeph class="+ topic/ph pr-d/codeph ">Security.LOCAL_TRUSTED</codeph>）- この ファイルはローカルファイルであり、信頼性があります。このファイルは Flash Player 設定マネージャーまたは FlashPlayerTrust 構成ファイルを使用します。 このファイルは、ローカルのデータソースから読み取ることも、インターネットでやり取りすることもできます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">application</codeph>（<codeph class="+ topic/ph pr-d/codeph ">Security.APPLICATION</codeph>）- このファイルは AIR アプリケーションで実行され、そのアプリケーションのパッケージ（AIR ファイル）と共にインストールされます。デフォルトでは、AIR アプリケーションサンドボックスのファイルは、任意のドメインの任意のファイルをクロススクリプトできます（ただし、AIR アプリケーションサンドボックス外のファイルでは、AIR ファイルをクロススクリプトできない場合があります）。デフォルトでは、AIR アプリケーションサンドボックスのファイルは、任意のドメインからコンテンツおよびデータを読み込むことができます。 </li></ul>
     
     <p class="- topic/p ">セキュリティについて詳しくは、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/REMOTE" class="- topic/link "><linktext class="- topic/linktext ">REMOTE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_FILE" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_WITH_FILE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_NETWORK" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_WITH_NETWORK</linktext></link><link href="flash.system.xml#Security/LOCAL_TRUSTED" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_TRUSTED</linktext></link><link href="flash.system.xml#Security/APPLICATION" class="- topic/link "><linktext class="- topic/linktext ">APPLICATION</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:LoaderContext" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">LoaderContext</apiName><shortdesc class="- topic/shortdesc ">
 LoaderContext クラスは、Loader クラスを使用して、SWF ファイルなどのメディアをロードするオプションを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 LoaderContext クラスは、Loader クラスを使用して、SWF ファイルなどのメディアをロードするオプションを指定します。LoaderContext クラスは、Loader クラスの <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> および <codeph class="+ topic/ph pr-d/codeph ">loadBytes()</codeph> メソッドで <codeph class="+ topic/ph pr-d/codeph ">context</codeph> パラメーターとして使用されます。
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> メソッドで SWF ファイルをロードする場合、次の 2 つのことを決定します。ロードした SWF ファイルをどのセキュリティドメインに配置するか、およびそのセキュリティドメイン内のどのアプリケーションドメインに配置するかです。これらの選択の詳細については、<codeph class="+ topic/ph pr-d/codeph ">applicationDomain</codeph> および <codeph class="+ topic/ph pr-d/codeph ">securityDomain</codeph> プロパティを参照してください。</p>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">Loader.loadBytes()</codeph> メソッドで SWF ファイルをロードする場合、<codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> の場合と同じアプリケーションドメイン選択がありますが、セキュリティドメインを指定する必要はありません。<codeph class="+ topic/ph pr-d/codeph ">Loader.loadBytes()</codeph> では、ロードされた SWF ファイルが常にロード元 SWF ファイルのセキュリティドメインに配置されるためです。</p>
 
 <p class="- topic/p ">SWF ファイルではなくイメージ（JPEG、GIF または PNG）をロードする場合、SecurityDomain またはアプリケーションドメインを指定する必要はありません。これらの概念は SWF ファイルに対してのみ意味を持ちます。代わりに、次のことのみを決定します。ロードしたイメージのピクセルにプログラムによってアクセスする必要があるかどうかです。必要がある場合は、<codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> プロパティを参照してください。イメージのロード時に非ブロックを適用する場合は、LoaderContext クラスの代わりに JPEGLoaderContext クラスを使用します。</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.loadBytes()</linktext></link><link href="flash.system.xml#ApplicationDomain" class="- topic/link "><linktext class="- topic/linktext ">flash.system.ApplicationDomain</linktext></link><link href="flash.system.xml#JPEGLoaderContext" class="- topic/link "><linktext class="- topic/linktext ">flash.system.JPEGLoaderContext</linktext></link><link href="flash.system.xml#LoaderContext/applicationDomain" class="- topic/link "><linktext class="- topic/linktext ">flash.system.LoaderContext.applicationDomain</linktext></link><link href="flash.system.xml#LoaderContext/checkPolicyFile" class="- topic/link "><linktext class="- topic/linktext ">flash.system.LoaderContext.checkPolicyFile</linktext></link><link href="flash.system.xml#LoaderContext/securityDomain" class="- topic/link "><linktext class="- topic/linktext ">flash.system.LoaderContext.securityDomain</linktext></link><link href="flash.system.xml#SecurityDomain" class="- topic/link "><linktext class="- topic/linktext ">flash.system.SecurityDomain</linktext></link><link href="flash.system.xml#ImageDecodingPolicy" class="- topic/link "><linktext class="- topic/linktext ">flash.system.ImageDecodingPolicy</linktext></link></related-links><apiConstructor id="flash.system:LoaderContext:LoaderContext" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">LoaderContext</apiName><shortdesc class="- topic/shortdesc ">
     指定された設定で、新しい LoaderContext オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">checkPolicyFile</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">オブジェクトをロードする前に、URL ポリシーファイルの存在を確認するかどうかを指定します。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">applicationDomain</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.system:ApplicationDomain</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Loader オブジェクトで使用する ApplicationDomain オブジェクトを指定します。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">securityDomain</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.system:SecurityDomain</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Loader オブジェクトで使用する SecurityDomain オブジェクトを指定します。
     
     <p class="- topic/p "><i class="+ topic/ph hi-d/i "/>注意：AIR アプリケーションセキュリティサンドボックスのコンテンツでは、他のサンドボックスからその SecurityDomain にコンテンツをロードすることはできません。</p>
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定された設定で、新しい LoaderContext オブジェクトを作成します。これらの設定について詳しくは、このクラスのプロパティの説明を参照してください。
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.loadBytes()</linktext></link><link href="flash.system.xml#ApplicationDomain" class="- topic/link "><linktext class="- topic/linktext ">flash.system.ApplicationDomain</linktext></link><link href="flash.system.xml#SecurityDomain" class="- topic/link "><linktext class="- topic/linktext ">flash.system.SecurityDomain</linktext></link></related-links></apiConstructor><apiValue id="flash.system:LoaderContext:allowCodeImport" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">allowCodeImport</apiName><shortdesc class="- topic/shortdesc ">
     Loader オブジェクトを使用して、呼び出し元のセキュリティサンドボックスに、実行可能コードと共に SWF ファイルなどのコンテンツを読み込むことができるかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">Loader</codeph> オブジェクトを使用して、呼び出し元のセキュリティサンドボックスに、実行可能コードと共に SWF ファイルなどのコンテンツを読み込むことができるかどうかを指定します。影響を受ける読み込み操作が 2 つあります。<codeph class="+ topic/ph pr-d/codeph ">Loader.loadBytes()</codeph> メソッドと、<codeph class="+ topic/ph pr-d/codeph ">LoaderContext.securityDomain = SecurityDomain.currentDomain</codeph> を指定した <codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> メソッドです（後者の操作は、AIR アプリケーションサンドボックスではサポートされません）。<codeph class="+ topic/ph pr-d/codeph ">allowCodeImport</codeph> プロパティを <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定すると、読み込み操作はイメージのロードなどの安全な操作のみに制限されます。通常の、<codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> メソッドでロードされる非読み込み SWF ファイルは、このプロパティの値によって影響されません。
     
     <p class="- topic/p ">このプロパティは、サンドボックスにイメージコンテンツを読み込むときに、必要なのはイメージファイルだけであるが SWF ファイルも読み込んでしまうというセキュリティ上のリスクを避ける場合に有用です。例えば、別のドメインからのイメージをレプリケートまたは処理する場合などがこれに該当します。SWF ファイルには ActionScript コードが含まれているため、SWF ファイルの読み込みは、イメージファイルの読み込みに比べて大きなリスクを伴います。</p>
     
     <p class="- topic/p ">アプリケーションサンドボックスの AIR コンテンツでは、デフォルト値は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> です。アプリケーション以外のコンテンツ（Flash Player 内のすべてのコンテンツを含む）では、デフォルト値は <codeph class="+ topic/ph pr-d/codeph ">true</codeph> です。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">allowCodeImport</codeph> プロパティが、Flash Player 10.1 および AIR 2.0 に追加されました。ただし、Flash ランタイムがこのプロパティをサポートする場合には、このプロパティは SWF ファイルおよびすべてのバージョンの AIR アプリケーションで使用できます。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader/loadBytes()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.loadBytes()</linktext></link><link href="flash.display.xml#Loader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.load()</linktext></link><link href="flash.system.xml#LoaderContext/securityDomain" class="- topic/link "><linktext class="- topic/linktext ">securityDomain</linktext></link></related-links></apiValue><apiValue id="flash.system:LoaderContext:applicationDomain" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">applicationDomain</apiName><shortdesc class="- topic/shortdesc ">
     Loader.load() または Loader.loadBytes() メソッドで使用するアプリケーションドメインを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.system:ApplicationDomain</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">Loader.loadBytes()</codeph> メソッドで使用するアプリケーションドメインを指定します。ActionScript 1.0 や ActionScript 2.0 で記述されたイメージまたは SWF ファイルではなく、ActionScript 3.0 で記述された SWF ファイルをロードする場合にのみ、このプロパティを使用します。
     
     <p class="- topic/p ">すべてのセキュリティドメインは、複数のアプリケーションドメインに分割することもできます。アプリケーションドメインは ApplicationDomain オブジェクトで表されます。アプリケーションドメインの目的はセキュリティではありません。ActionScript コードの協調単位の管理が目的です。別のドメインから SWF ファイルをロードし、別のセキュリティドメインへの配置を許可する場合、ロードされた SWF ファイルが配置されるアプリケーションドメインの選択は制御できません。アプリケーションドメインの選択を指定した場合は、無視されます。ただし、独自のセキュリティドメインに SWF ファイルをロードする場合は、SWF ファイルが独自のドメインから取得されるか、または独自のセキュリティドメインに読み込まれるので、ロードされる SWF ファイルに対するアプリケーションドメインの選択を制御できます。</p>
     
     <p class="- topic/p ">独自のセキュリティドメインからのみ、<codeph class="+ topic/ph pr-d/codeph ">LoaderContext.applicationDomain</codeph> でアプリケーションドメインを渡すことができます。その他のセキュリティドメインからアプリケーションドメインを渡そうとすると、<codeph class="+ topic/ph pr-d/codeph ">SecurityError</codeph> 例外になります。</p>
     
     <p class="- topic/p ">使用する <codeph class="+ topic/ph pr-d/codeph ">ApplicationDomain</codeph> プロパティは、次の 4 種類から選択できます。</p>
     
     <ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">ローダーの ApplicationDomain の子。</b> デフォルト。この選択は、シンタックス <codeph class="+ topic/ph pr-d/codeph ">new ApplicationDomain(ApplicationDomain.currentDomain)</codeph> で明示的に表すことができます。この選択では、ロードされた SWF ファイルは親のクラスを直接使用できます。たとえば、<codeph class="+ topic/ph pr-d/codeph ">new MyClassDefinedInParent()</codeph> を記述します。ただし、親はこのシンタックスを使用できません。親が子のクラスを使用する場合、<codeph class="+ topic/ph pr-d/codeph ">ApplicationDomain.getDefinition()</codeph> を呼び出して取得する必要があります。この選択の利点は、親によって既に定義されているクラスと同じ名前のクラスを子が定義する場合にエラーが発生しないことです。子は、そのクラスの親の定義を継承します。子の競合する定義は、子または親が <codeph class="+ topic/ph pr-d/codeph ">ApplicationDomain.getDefinition()</codeph> メソッドを呼び出してその定義を取得しない限り使用されません。</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">ローダー自体の ApplicationDomain。</b> このアプリケーションドメインは、<codeph class="+ topic/ph pr-d/codeph ">ApplicationDomain.currentDomain</codeph> を使用する場合に使用します。ロードが完了すると、親および子はいずれも互いのクラスの両方を直接使用できます。親が既に定義しているクラスと同じ名前のクラスを子が定義しようとすると、親クラスが使用され、子クラスは無視されます。</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">システム ApplicationDomain の子。</b> このアプリケーションドメインは、<codeph class="+ topic/ph pr-d/codeph ">new ApplicationDomain(null)</codeph> を使用する場合に使用します。ローダーとローディーは完全に分離され、競合や影響を発生させずに同じ名前で別々のバージョンのクラスを定義できます。一方が他方のクラスを参照する唯一の方法は、<codeph class="+ topic/ph pr-d/codeph ">ApplicationDomain.getDefinition()</codeph> メソッドの呼び出しです。</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">他の ApplicationDomain の子。</b>複雑な ApplicationDomain 階層がある場合があります。独自の SecurityDomain から任意の ApplicationDomain に SWF ファイルをロードできます。たとえば、<codeph class="+ topic/ph pr-d/codeph ">new ApplicationDomain(ApplicationDomain.currentDomain.parentDomain.parentDomain)</codeph> では、SWF ファイルは現在のドメインの親の親の新しい子にロードされます。</li></ul>
     
     <p class="- topic/p ">ロードの完了後、<codeph class="+ topic/ph pr-d/codeph ">ApplicationDomain.getDefinition()</codeph> を呼び出すために、ロードする側またはロードされる側のいずれかが独自の ApplicationDomain または他方の ApplicationDomain を見つける必要がある場合があります。いずれの側も、<codeph class="+ topic/ph pr-d/codeph ">ApplicationDomain.currentDomain</codeph> によって独自のアプリケーションドメインの参照を取得できます。ロード元 SWF ファイルは、<codeph class="+ topic/ph pr-d/codeph ">Loader.contentLoaderInfo.applicationDomain</codeph> によって、ロードされた SWF ファイルの ApplicationDomain の参照を取得できます。ロードされた SWF ファイルで、自身がどのようにロードされたかがわかる場合は、ロード元 SWF ファイルの ApplicationDomain オブジェクトを見つけることができます。たとえば、子がデフォルトの方法でロードされた場合、<codeph class="+ topic/ph pr-d/codeph ">ApplicationDomain.currentDomain.parentDomain</codeph> によって、子はロード元 SWF ファイルのアプリケーションドメインを見つけることができます。</p>
     
     <p class="- topic/p ">詳細については、『ActionScript 3.0 開発ガイド<i class="+ topic/ph hi-d/i "/>』の「クライアントのシステム環境」の章にある「ApplicationDomain クラス」を参照してください。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.loadBytes()</linktext></link><link href="flash.system.xml#ApplicationDomain" class="- topic/link "><linktext class="- topic/linktext ">flash.system.ApplicationDomain</linktext></link></related-links></apiValue><apiValue id="flash.system:LoaderContext:checkPolicyFile" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">checkPolicyFile</apiName><shortdesc class="- topic/shortdesc ">
     オブジェクト自体の読み込みを開始する前に、アプリケーションで、読み込まれるオブジェクトのサーバーから URL ポリシーファイルをダウンロードしようとするかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     オブジェクト自体の読み込みを開始する前に、アプリケーションで、読み込まれるオブジェクトのサーバーから URL ポリシーファイルをダウンロードしようとするかどうかを指定します。このフラグは、<codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> メソッドには適用できますが、<codeph class="+ topic/ph pr-d/codeph ">Loader.loadBytes()</codeph> メソッドには適用できません。
     
     <p class="- topic/p ">イメージ（JPEG、GIF または PNG）を呼び出し元 SWF ファイル自体のドメイン外からロードし、そのイメージのコンテンツに ActionScript からアクセスする必要がある場合に、このフラグを <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定します。イメージコンテンツへのアクセスの例には、ビットマップオブジェクトを取得するための <codeph class="+ topic/ph pr-d/codeph ">Loader.content</codeph> プロパティの参照や、ロードされたイメージのピクセルのコピーを取得するための <codeph class="+ topic/ph pr-d/codeph ">BitmapData.draw()</codeph> メソッドの呼び出しなどがあります。読み込み時に、指定された <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> を持たずにこれらの操作のいずれかを試行した場合、<codeph class="+ topic/ph pr-d/codeph ">SecurityError</codeph> 例外を受け取る場合があります。必要なポリシーファイルがまだ読み込まれていないためです。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> メソッドを呼び出す際に <codeph class="+ topic/ph pr-d/codeph ">LoaderContext.checkPolicyFile</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定していると、関連する URL ポリシーファイルが正常にダウンロードされるか、そのようなポリシーファイルが存在しないことがわかるまで、アプリケーションは <codeph class="+ topic/ph pr-d/codeph ">URLRequest.url</codeph> で指定されたオブジェクトのダウンロードを開始しません。Flash Player または AIRでは、最初に既にダウンロードされているポリシーファイルが考慮され、次に <codeph class="+ topic/ph pr-d/codeph ">Security.loadPolicyFile()</codeph> メソッドの呼び出しで指定された保留されているポリシーファイルのダウンロードが試行されます。次に、<codeph class="+ topic/ph pr-d/codeph ">URLRequest.url</codeph> に対応するデフォルトの場所からのポリシーファイルのダウンロードが試行されます。これは、<codeph class="+ topic/ph pr-d/codeph ">URLRequest.url</codeph> と同じサーバーの <codeph class="+ topic/ph pr-d/codeph ">/crossdomain.xml</codeph> です。どのような場合でも、所定のポリシーファイルが、ポリシーファイルの場所に基づいて <codeph class="+ topic/ph pr-d/codeph ">URLRequest.url</codeph> に存在していること、およびそのポリシーファイルの <codeph class="+ topic/ph pr-d/codeph ">&lt;allow-access-from></codeph> タグによってアクセスが許可されていることが必要となります。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定した場合、<codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> メソッドで指定された主要なダウンロードは、ポリシーファイルの処理が完了するまで行われません。 したがって、必要なポリシーファイルが存在している場合には、Loader オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">contentLoaderInfo</codeph> プロパティから <codeph class="+ topic/ph pr-d/codeph ">ProgressEvent.PROGRESS</codeph> または <codeph class="+ topic/ph pr-d/codeph ">Event.COMPLETE</codeph> イベントを受け取るとすぐにポリシーファイルのダウンロードが完了し、ポリシーファイルが必要な操作を安全に開始できます。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定し、関連するポリシーファイルが見つからない場合、<codeph class="+ topic/ph pr-d/codeph ">SecurityError</codeph> 例外をスローする操作を試行するまで、エラーは表示されません。ただし、LoaderInfo オブジェクトによって <codeph class="+ topic/ph pr-d/codeph ">ProgressEvent.PROGRESS</codeph> または <codeph class="+ topic/ph pr-d/codeph ">Event.COMPLETE</codeph> イベントが送出されると、<codeph class="+ topic/ph pr-d/codeph ">LoaderInfo.childAllowsParent</codeph> プロパティの値を確認することによって、関連するポリシーファイルが見つかったかどうかをテストできます。</p>
     
     <p class="- topic/p ">ロードするイメージへのピクセルレベルのアクセスが必要ない場合は、<codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> プロパティを <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定しないようにする必要があります。この場合、ポリシーファイルの確認は時間の浪費になります。ダウンロードの開始が遅れ、ネットワーク帯域幅を不必要に消費する場合があるためです。</p>
     
     <p class="- topic/p ">また、<codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> メソッドを使用して SWF ファイルをダウンロードする場合、<codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定しないでください。これは、SWF から SWF への権限はポリシーファイルではなく <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph> メソッドによって制御され、SWF ファイルをロードする場合は <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> は無効であるためです。この場合、ポリシーファイルの確認は時間の浪費になります。SWF ファイルのダウンロードが遅れ、ネットワーク帯域幅を不必要に消費する場合があるためです。ポリシーファイルのダウンロードは主要なダウンロードの前に行われるので、SWF ファイルとイメージのどちらが主要なダウンロードであるかを Flash Player または AIR で判別することはできません。</p>
     
     <p class="- topic/p ">サーバーサイド HTTP リダイレクトを使用する可能性がある URL からオブジェクトをダウンロードする場合は、<codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> に注意してください。ポリシーファイルは常に、<codeph class="+ topic/ph pr-d/codeph ">URLRequest.url</codeph> で指定された対応する初期 URL から取得されます。 最終的なオブジェクトが HTTP リダイレクトによって別の URL から取得される場合、最初にダウンロードされたポリシーファイルはオブジェクトの最終的な URL に適用できないことがあります。この URL はセキュリティ判定において重要です。このような場合、<codeph class="+ topic/ph pr-d/codeph ">ProgressEvent.PROGRESS</codeph> または <codeph class="+ topic/ph pr-d/codeph ">Event.COMPLETE</codeph> イベントを受け取った後で、<codeph class="+ topic/ph pr-d/codeph ">LoaderInfo.url</codeph> の値を調べることができます。これにより、オブジェクトの最終的な URL がわかります。次に、オブジェクトの最終的な URL に基づくポリシーファイル URL で <codeph class="+ topic/ph pr-d/codeph ">Security.loadPolicyFile()</codeph> メソッドを呼び出します。次に、<codeph class="+ topic/ph pr-d/codeph ">LoaderInfo.childAllowsParent</codeph> の値を、それが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> になるまでポーリングします。</p>
     
         <p class="- topic/p ">このプロパティを、アプリケーションサンドボックスで実行している AIR コンテンツに設定する必要はありません。AIR アプリケーションサンドボックスのコンテンツは、ロードされたイメージコンテンツをソースとして使用し、<codeph class="+ topic/ph pr-d/codeph ">BitmapData.draw()</codeph> メソッドを呼び出すことができます。 </p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#BitmapData/draw()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.BitmapData.draw()</linktext></link><link href="flash.display.xml#Loader/content" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.content</linktext></link><link href="flash.display.xml#Loader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.load()</linktext></link><link href="flash.display.xml#LoaderInfo/childAllowsParent" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo.childAllowsParent</linktext></link><link href="flash.display.xml#LoaderInfo/url" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo.url</linktext></link><link href="flash.system.xml#Security/allowDomain()" class="- topic/link "><linktext class="- topic/linktext ">flash.system.Security.allowDomain()</linktext></link><link href="flash.system.xml#Security/loadPolicyFile()" class="- topic/link "><linktext class="- topic/linktext ">flash.system.Security.loadPolicyFile()</linktext></link></related-links></apiValue><apiValue id="flash.system:LoaderContext:imageDecodingPolicy" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">imageDecodingPolicy</apiName><shortdesc class="- topic/shortdesc ">
     イメージデータのデコードを、使用時またはロード時のどちらで行うかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     イメージデータのデコードを、使用時またはロード時のどちらで行うかを指定します。
     
     <p class="- topic/p ">デフォルトのポリシー <codeph class="+ topic/ph pr-d/codeph ">ImageDecodingPolicy.ON_DEMAND</codeph> では、表示またはその他の目的のためにイメージデータが必要なときに、ランタイムによってデータがデコードされます。このポリシーでは、以前のバージョンのランタイムによって使用されたデコードの動作が維持されます。</p>
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">ImageDecodingPolicy.ON_LOAD</codeph> ポリシーでは、イメージのロード直後で complete イベントの送出前に、ランタイムによってイメージがデコードされます。オンデマンドではなくロード時にイメージをデコードすると、複数のロードされたイメージが立て続けに表示される、スクロールリストやカバーフロー制御などの処理時に、アニメーションや UI のパフォーマンスを向上できます。一方、onLoad ポリシーを無差別に使用すると、onDemand ポリシー適用時に比べて、より多くのデコードされたイメージデータが一度にメモリに格納されるので、アプリケーションのピークメモリ使用量が増加することになります。</p>
	 
     <p class="- topic/p ">両方のポリシーにおいて、同じキャッシュおよびフラッシュの動作がイメージのデコード後に、ランタイムによって適用されます。デコードされたデータはいつでもフラッシュされ、次回必要なときにイメージが再デコードされることが可能です。</p>
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#ImageDecodingPolicy" class="- topic/link "><linktext class="- topic/linktext ">flash.system.ImageDecodingPolicy</linktext></link></related-links></apiValue><apiValue id="flash.system:LoaderContext:parameters" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">parameters</apiName><shortdesc class="- topic/shortdesc ">
     コンテンツの LoaderInfo オブジェクトに渡すパラメーターを含むオブジェクトです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     コンテンツの LoaderInfo オブジェクトに渡すパラメーターを含むオブジェクトです。
     
     <p class="- topic/p ">通常、<codeph class="+ topic/ph pr-d/codeph ">contentLoaderInfo.parameters</codeph> プロパティの値は、要求 URL の解析によって取得されます。<codeph class="+ topic/ph pr-d/codeph ">parameters</codeph> var が設定されている場合、<codeph class="+ topic/ph pr-d/codeph ">contentLoaderInfo.parameters</codeph> は、要求 URL からではなく、LoaderContext オブジェクトから値を取得します。<codeph class="+ topic/ph pr-d/codeph ">parameters</codeph> var は、URL パラメーターと同様に、名前と値のストリングペアを含むオブジェクトのみを受け付けます。オブジェクトに名前と値のストリングペアが含まれていない場合、<codeph class="+ topic/ph pr-d/codeph ">IllegalOperationError</codeph> がスローされます。</p>
     <p class="- topic/p ">この API の目的は、SWF ファイルのロードを有効にして、そのパラメーターをロードされた SWF ファイルに転送することです。この機能は <codeph class="+ topic/ph pr-d/codeph ">loadBytes()</codeph> メソッドを使用する場合に特に便利です。これは、<codeph class="+ topic/ph pr-d/codeph ">LoadBytes</codeph> では URL を介してパラメーターを渡す手段が提供されないためです。パラメーターは別の AS3 SWF ファイルにのみ正常に転送できます。AVM1Movie の AS3 loaderInfo.parameters オブジェクトは転送されるオブジェクトになりますが、AS1 または AS2 SWF ファイルはアクセス可能な形式でパラメーターを受け取ることができません。 </p>
     
     
     <p class="- topic/p ">例えば、次のような URL があるとします。 </p>
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">http://yourdomain/users/jdoe/test01/child.swf?foo=bar;</codeph></p>
     <p class="- topic/p ">次のコードは、LoaderContext.parameters プロパティを使用して、この URL に渡されたパラメーターを複製します。 </p>
     
     <pre xml:space="preserve" class="- topic/pre ">
      import flash.system.LoaderContext; 
      import flash.display.Loader; 
      var l:Loader = new Loader(); 
      var lc:LoaderContext = new LoaderContext; 
      lc.parameters = { "foo": "bar" }; 
      l.load(new URLRequest("child.swf"), lc);
     </pre>
     
     <p class="- topic/p ">パラメーターが適切に渡されたことを確認するには、このコードの実行後に次の trace ステートメントを使用します。</p>
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">trace(loaderInfo.parameters.foo);</codeph></p>
     <p class="- topic/p ">コンテンツが正常にロードされた場合、この trace によって「bar」と表示されます。</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:LoaderContext:requestedContentParent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">requestedContentParent</apiName><shortdesc class="- topic/shortdesc ">
     Loader が試行する、ロードされたコンテンツの追加先となる親です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.display:DisplayObjectContainer</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Loader が試行する、ロードされたコンテンツの追加先となる親です。 
     
     <p class="- topic/p ">コンテンツが完全にロードされると、Loader オブジェクトは、通常そのコンテンツの親となります。<codeph class="+ topic/ph pr-d/codeph ">requestedContentParent</codeph> が設定されている場合、ランタイムエラーによって割り当てが妨害されない限り、これを指定したオブジェクトが親となります。この親の再設定は、<codeph class="+ topic/ph pr-d/codeph ">complete</codeph> イベント後にこのプロパティを使用しないで実行することもできます。ただし、<codeph class="+ topic/ph pr-d/codeph ">LoaderContext.requestedContentParent</codeph> を使用して親を指定すると、必要でないイベントが除外されます。 </p>
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">LoaderContext.requestedContentParent</codeph> は、ロードされたコンテンツ内のフレーム 1 のスクリプトの実行前、コンストラクターの実行後に、目的の親を設定します。<codeph class="+ topic/ph pr-d/codeph ">requestedContentParent</codeph> が null の場合（デフォルト）、Loader オブジェクトがコンテンツの親となります。</p>
     <p class="- topic/p ">ロードされたコンテンツが AVM1Movie オブジェクトの場合、または <codeph class="+ topic/ph pr-d/codeph ">requestedContentParent</codeph> オブジェクトに対して <codeph class="+ topic/ph pr-d/codeph ">addChild()</codeph> が呼び出されたときにエラーがスローされた場合、次のアクションが発生します。
     <ul class="- topic/ul "><li class="- topic/li ">Loader オブジェクトがロードされたコンテンツの親になります。</li><li class="- topic/li ">ランタイムが <codeph class="+ topic/ph pr-d/codeph ">AsyncErrorEvent</codeph> を送出します。</li></ul></p>
     <p class="- topic/p ">要求された親とロードされたコンテンツが異なるセキュリティサンドボックスにある場合で、かつ要求された親がロードされたコンテンツにアクセスできない場合は、次のアクションが発生します。
     <ul class="- topic/ul "><li class="- topic/li ">Loader がロードされたコンテンツの親になります。</li><li class="- topic/li ">ランタイムが <codeph class="+ topic/ph pr-d/codeph ">SecurityErrorEvent</codeph> を送出します。</li></ul></p>
     
     <p class="- topic/p ">次のコードは、<codeph class="+ topic/ph pr-d/codeph ">requestedContentParent</codeph> を使用して、ロードされたコンテンツを Sprite オブジェクト内に配置します。</p>
     <pre xml:space="preserve" class="- topic/pre ">
      import flash.system.LoaderContext; 
      import flash.display.Loader; 
      import flash.display.Sprite; 
     
      var lc:LoaderContext = new LoaderContext(); 
      var l:Loader = new Loader(); 
      var s:Sprite = new Sprite(); 
      lc.requestedContentParent = s; 
      addChild(s); 
      l.load(new URLRequest("child.swf"), lc);
     </pre>
     
     <p class="- topic/p ">このコードを実行すると、子 SWF ファイルがステージ上に表示されます。このことによって、ステージに追加した Sprite オブジェクトがロードされた child.swf ファイルの親であることを確認できます。</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:LoaderContext:securityDomain" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">securityDomain</apiName><shortdesc class="- topic/shortdesc ">
     Loader.load() 操作に使用するセキュリティドメインを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.system:SecurityDomain</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> 操作に使用するセキュリティドメインを指定します。このプロパティは、イメージではなく SWF ファイルをロードする場合にのみ使用します。
     
     <p class="- topic/p ">セキュリティドメインの選択は、ロード元 SWF ファイルとは異なるドメイン（異なるサーバー）から取得される可能性がある SWF ファイルをロードする場合にのみ意味を持ちます。独自のドメインから SWF ファイルをロードする場合は、常に独自のセキュリティドメインに配置されます。ただし、SWF ファイルを別のドメインからロードする場合は、2 つのオプションがあります。ロードされる SWF ファイルを、ロード元 SWF ファイルとは異なる "通常の" セキュリティドメインに配置できます。これはデフォルトの設定です。もう 1 つのオプションでは、<codeph class="+ topic/ph pr-d/codeph ">myLoaderContext.securityDomain</codeph> と <codeph class="+ topic/ph pr-d/codeph ">SecurityDomain.currentDomain</codeph> が等しくなるように設定して、ロードされる SWF ファイルをロード元 SWF ファイルと同じセキュリティドメインに配置するように指定します。これは<i class="+ topic/ph hi-d/i ">読み込みロード</i>と呼ばれます。これは、セキュリティのために、ロードされる SWF ファイルを独自のサーバーにコピーしてそこからロードする場合と同じです。読み込みロードが成功するには、ロードされる SWF ファイルのサーバーに、ロード元 SWF ファイルのドメインを信頼するポリシーファイルが必要です。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">LoaderContext.securityDomain</codeph> で、独自のセキュリティドメインのみを渡すことができます。その他のセキュリティドメインを渡そうとすると、<codeph class="+ topic/ph pr-d/codeph ">SecurityError</codeph> 例外になります。</p>
     
     <p class="- topic/p ">AIR アプリケーションセキュリティサンドボックスのコンテンツでは、他のサンドボックスからその SecurityDomain にコンテンツをロードすることはできません。</p>
     
     <p class="- topic/p ">詳しくは、『ActionScript 3.0 Developer's Guide』の「セキュリティ」の章を参照してください。<i class="+ topic/ph hi-d/i "/></p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.load()</linktext></link><link href="flash.system.xml#SecurityDomain" class="- topic/link "><linktext class="- topic/linktext ">flash.system.SecurityDomain</linktext></link></related-links></apiValue><apiValue id="flash.system:LoaderContext:allowLoadBytesCodeExecution:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">allowLoadBytesCodeExecution</apiName><shortdesc class="- topic/shortdesc ">
     allowCodeImport によって置き換えられたが、互換性のために引き続きサポートされるレガシープロパティ。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">allowCodeImport</codeph> によって置き換えられたが、互換性のために引き続きサポートされるレガシープロパティ。以前は、<codeph class="+ topic/ph pr-d/codeph ">allowLoadBytesCodeExecution</codeph> によって影響される操作は <codeph class="+ topic/ph pr-d/codeph ">Loader.loadBytes()</codeph> メソッドだけでしたが、Flash Player 10.1 および AIR 2.0 では、<codeph class="+ topic/ph pr-d/codeph ">LoaderContext.securityDomain = SecurityDomain.currentDomain</codeph> が指定されている <codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> による読み込みとロード操作も同様に影響されます（後者の操作は、AIR アプリケーションサンドボックスではサポートされません）。このような二重の影響によってプロパティ名 <codeph class="+ topic/ph pr-d/codeph ">allowLoadBytesCodeExecution</codeph> の固有性が過度になるため、現在は <codeph class="+ topic/ph pr-d/codeph ">allowCodeImport</codeph> が推奨されるプロパティ名となっています。<codeph class="+ topic/ph pr-d/codeph ">allowCodeImport</codeph> または <codeph class="+ topic/ph pr-d/codeph ">allowLoadBytesCodeExecution</codeph> のいずれかを設定すると、両方の値に影響します。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">Loader</codeph> オブジェクトを使用して、呼び出し元のセキュリティサンドボックスに、実行可能コードと共に SWF ファイルなどのコンテンツを読み込むことができるかどうかを指定します。このプロパティを <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定すると、読み込み操作はイメージのロードなどの安全な操作のみに制限されます。</p>
     
     <p class="- topic/p ">アプリケーションサンドボックスの AIR コンテンツでは、デフォルト値は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> です。アプリケーションコンテンツ以外では、デフォルト値は <codeph class="+ topic/ph pr-d/codeph ">true</codeph> です。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader/loadBytes()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.loadBytes()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:JPEGLoaderContext" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">JPEGLoaderContext</apiName><shortdesc class="- topic/shortdesc ">
 JPEGLoaderContext クラスには、JPEG 画像のロード時に非ブロックフィルターを有効にするプロパティが含まれています。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.system:LoaderContext</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 JPEGLoaderContext クラスには、JPEG 画像のロード時に非ブロックフィルターを有効にするプロパティが含まれています。非ブロックフィルターは、隣接するセルをスムージングすることによって、高圧縮時の画質を向上させます。JPEG イメージのロード時に非ブロックを適用するには、JPEGLoaderContext オブジェクトを作成して、その <codeph class="+ topic/ph pr-d/codeph ">deblockingFilter</codeph> プロパティを設定します。次に、JPEGLoaderContext オブジェクトの名前を、<codeph class="+ topic/ph pr-d/codeph ">context</codeph> パラメーターの値として、イメージのロードに使用される Loader オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> メソッドで使用します。
 
 <p class="- topic/p ">JPEGLoaderContext クラスは LoaderContext クラスを拡張します。ロードしたイメージのピクセルにプログラムでアクセスする必要がある場合、<codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> プロパティを <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定します（例えば、<codeph class="+ topic/ph pr-d/codeph ">BitmapData.draw()</codeph> メソッドを使用する場合など）。アプリケーションサンドボックス内で実行される AIR コンテンツについては、<codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> プロパティを設定する必要はありません。</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.load()</linktext></link><link href="flash.display.xml#BitmapData/draw()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.BitmapData.draw()</linktext></link></related-links><apiConstructor id="flash.system:JPEGLoaderContext:JPEGLoaderContext" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">JPEGLoaderContext</apiName><shortdesc class="- topic/shortdesc ">
     指定された設定で、新しい JPEGLoaderContext オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">deblockingFilter</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0.0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">非ブロックフィルターの強度を指定します。値を 1.0 にすると、最高強度の非ブロックフィルターが適用され、値を 0.0 にすると、非ブロックフィルターは無効になります。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">checkPolicyFile</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">オブジェクトを読み込む前に、Flash Player が URL ポリシーファイルの存在を確認するかどうかを指定します。アプリケーションセキュリティサンドボックス内で実行される AIR コンテンツには適用されません。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">applicationDomain</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.system:ApplicationDomain</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Loader オブジェクトで使用する ApplicationDomain オブジェクトを指定します。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">securityDomain</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.system:SecurityDomain</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Loader オブジェクトで使用する SecurityDomain オブジェクトを指定します。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定された設定で、新しい JPEGLoaderContext オブジェクトを作成します。 
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.system.xml#LoaderContext" class="- topic/link "><linktext class="- topic/linktext ">flash.system.LoaderContext</linktext></link><link href="flash.display.xml#Loader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.loadBytes()</linktext></link><link href="flash.system.xml#ApplicationDomain" class="- topic/link "><linktext class="- topic/linktext ">flash.system.ApplicationDomain</linktext></link><link href="flash.system.xml#SecurityDomain" class="- topic/link "><linktext class="- topic/linktext ">flash.system.SecurityDomain</linktext></link></related-links></apiConstructor><apiValue id="flash.system:JPEGLoaderContext:deblockingFilter" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">deblockingFilter</apiName><shortdesc class="- topic/shortdesc "> 
	 非ブロックフィルターの強度を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">0.0</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	 非ブロックフィルターの強度を指定します。値を 1.0 にすると、最高強度の非ブロックフィルターが適用され、値を 0.0 にすると、非ブロックフィルターは無効になります。
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:Capabilities" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Capabilities</apiName><shortdesc class="- topic/shortdesc ">
 Capabilities クラスは、アプリケーションをホスティングするシステムとランタイムを記述するプロパティを提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities object, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <ph class="- topic/ph ">Capabilities クラスは、アプリケーションをホスティングするシステムとランタイムを記述するプロパティを提供します。例えば、携帯電話の画面は 100 × 100 ピクセル、モノクロで、PC の画面は 1000 × 1000 ピクセル、カラーである場合があります。Capabilities オブジェクトを使用して、クライアントが備えている機能を特定することによって、できるだけ多数のユーザーに対して適切なコンテンツを提供できます。デバイスの機能がわかると、適切な SWF ファイルを送るようにサーバーに指示したり、表示形式を変更するように SWF ファイルに指示したりすることができます。</ph>
 
 
 
 <p class="- topic/p ">ただし、Adobe AIR の一部の機能は、Capabilities クラスのプロパティとしてリストに示されていません。これらは他のクラスのプロパティです。</p>
 
 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">プロパティ</entry><entry class="- topic/entry ">説明</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NativeApplication.supportsDockIcon</codeph></entry><entry class="- topic/entry ">オペレーティングシステムがアプリケーションドックアイコンをサポートするかどうか。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NativeApplication.supportsMenu</codeph></entry><entry class="- topic/entry ">オペレーティングシステムがグローバルアプリケーションメニューバーをサポートするかどうか。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NativeApplication.supportsSystemTrayIcon</codeph></entry><entry class="- topic/entry ">オペレーティングシステムがシステムトレイアイコンをサポートするかどうか。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NativeWindow.supportsMenu</codeph></entry><entry class="- topic/entry ">オペレーティングシステムがウィンドウメニューをサポートするかどうか。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NativeWindow.supportsTransparency</codeph></entry><entry class="- topic/entry ">オペレーティングシステムが透明なウィンドウをサポートするかどうか。</entry></row></tbody></tgroup></adobetable>
 
 <p class="- topic/p "><i class="+ topic/ph hi-d/i "/><codeph class="+ topic/ph pr-d/codeph ">Capabilities.os</codeph> または <codeph class="+ topic/ph pr-d/codeph ">Capabilities.manufacturer</codeph> を使用して、オペレーティングシステムに基づく機能を判断しないでください。機能をオペレーティングシステムに依存することは、アプリケーションが潜在的なすべてのターゲットオペレーティングシステムを考慮していない場合に問題が発生する可能性があるので、適切ではありません。代わりに、テストしている機能に対応するプロパティを使用します。</p>
 
 <p class="- topic/p ">機能情報（<codeph class="+ topic/ph pr-d/codeph ">Capabilities.serverString</codeph> プロパティに URL エンコードされたストリングとして格納されている）を、<codeph class="+ topic/ph pr-d/codeph ">GET</codeph> または <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> HTTP メソッドを使用して送信できます。次に、MP3 をサポートし、解像度が 1600 × 1200 ピクセルで、Windows XP を実行しており、IME がインストールされているコンピューターに対するサーバーストリングの例を示します。</p>
 
 <pre xml:space="preserve" class="- topic/pre ">A=t&amp;SA=t&amp;SV=t&amp;EV=t&amp;MP3=t&amp;AE=t&amp;VE=t&amp;ACC=f&amp;PR=t&amp;SP=t&amp;
     SB=f&amp;DEB=t&amp;V=WIN%209%2C0%2C0%2C0&amp;M=Adobe%20Windows&amp;
     R=1600x1200&amp;DP=72&amp;COL=color&amp;AR=1.0&amp;OS=Windows%20XP&amp;
     L=en&amp;PT=External&amp;AVD=f&amp;LFD=f&amp;WD=f&amp;IME=t</pre>
 
 <p class="- topic/p ">次の表に、Capabilities クラスのプロパティと、それに対応するサーバーストリングを示します。
 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry align="left" class="- topic/entry ">Capabilities クラスのプロパティ</entry><entry align="left" class="- topic/entry ">サーバーストリング</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">avHardwareDisable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">AVD</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasAccessibility</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ACC</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasAudio</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">A</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasAudioEncoder</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">AE</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasEmbeddedVideo</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">EV</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasIME</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">IME</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasMP3</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">MP3</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasPrinting</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">PR</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasScreenBroadcast</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SB</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasScreenPlayback</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SP</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasStreamingAudio</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SA</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasStreamingVideo</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SV</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasTLS</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">TLS</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasVideoEncoder</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">VE</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isDebugger</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">DEB</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">language</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">L</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localFileReadDisable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">LFD</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">manufacturer</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">M</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">maxLevelIDC</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ML</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">os</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">OS</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">pixelAspectRatio</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">AR</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">playerType</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">PT</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">screenColor</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">COL</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">screenDPI</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">DP</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">screenResolutionX</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">R</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">screenResolutionY</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">R</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">version</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">V</codeph></entry></row></tbody></tgroup></adobetable>
 </p>
  
 <p class="- topic/p ">ウィンドウレスモードが無効化されているかどうかを示す <codeph class="+ topic/ph pr-d/codeph ">WD</codeph> サーバーストリングもあります。Flash Player では、Web ブラウザーまたは mms.cfg ファイルのユーザー設定との不適合という理由でウィンドウレスモードを無効化できます。対応する Capabilities プロパティはありません。</p>
  
 <p class="- topic/p ">Capabilities クラスのプロパティは、すべて読み取り専用です。</p>
 
 </apiDesc><example conref="examples\CapabilitiesExample.as" class="- topic/example "> 次の例では、flash.system.Capabilities オブジェクトで見つかった値を出力します。最初に、テキストフィールドに値を出力します。次に、<codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> の呼び出しを複数個使用して値を出力します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.system.Capabilities;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;

    public class CapabilitiesExample extends Sprite {
        
        public function CapabilitiesExample() {
            showCapabilities();
        }
        
        private function showCapabilities():void {
            var tf:TextField = new TextField();
            tf.height = 600;
            tf.width = 400;
            tf.autoSize = TextFieldAutoSize.LEFT;
            tf.wordWrap = true;
            
            tf.text = "avHardwareDisable: " + Capabilities.avHardwareDisable +
                
                "\nhasAccessibility: " + Capabilities.hasAccessibility +
                "\nhasAudio: " + Capabilities.hasAudio +
                "\nhasAudioEncoder: " + Capabilities.hasAudioEncoder +
                "\nhasEmbeddedVideo: " + Capabilities.hasEmbeddedVideo +
                "\nhasIME: " + Capabilities.hasIME +
                "\nhasMP3: " + Capabilities.hasMP3 +
                "\nhasPrinting: " + Capabilities.hasPrinting +
                "\nhasScreenBroadcast: " + Capabilities.hasScreenBroadcast +
                "\nhasScreenPlayback: " + Capabilities.hasScreenPlayback +
                "\nhasStreamingAudio: " + Capabilities.hasStreamingAudio +
                "\nhasStreamingVideo: " + Capabilities.hasStreamingVideo +
                "\nhasTLS: " + Capabilities.hasTLS +
                "\nhasVideoEncoder: " + Capabilities.hasVideoEncoder +
                "\nisDebugger: " + Capabilities.isDebugger +
                "\nisEmbeddedInAcrobat: " + Capabilities.isEmbeddedInAcrobat +
                "\nlanguage: " + Capabilities.language +
                "\nlocalFileReadDisable: " + Capabilities.localFileReadDisable +
                "\nmanufacturer: " + Capabilities.manufacturer +
                "\nmaxLevelIDC: " + Capabilities.maxLevelIDC +
                "\nos: " + Capabilities.os +
                "\npixelAspectRatio: " + Capabilities.pixelAspectRatio +
                "\nplayerType: " + Capabilities.playerType +
                "\nscreenColor: " + Capabilities.screenColor +
                "\nscreenDPI: " + Capabilities.screenDPI +
                "\nscreenResolutionX: " + Capabilities.screenResolutionX +
                "\nscreenResolutionY: " + Capabilities.screenResolutionY +
                "\nserverString: " + Capabilities.serverString +
                "\ntouchscreenType: " + Capabilities.touchscreenType +
                
                // The following capabilities are supported only when publishing for AIR.
                // If you are publishing for AIR, uncomment the following lines.
                //"\nlanguages: " + Capabilities.languages +
                //"\ncpuArchitecture: " + Capabilities.cpuArchitecture +
                //"\nsupports32BitProcesses: " + Capabilities.supports32BitProcesses +
                //"\nsupports64BitProcesses: " + Capabilities.supports64BitProcesses +    
                                
                "\nversion: " + Capabilities.version;
                
            addChild(tf);   
                
            trace("avHardwareDisable: " + Capabilities.avHardwareDisable);
            trace("hasAccessibility: " + Capabilities.hasAccessibility);
            trace("hasAudio: " + Capabilities.hasAudio);
            trace("hasAudioEncoder: " + Capabilities.hasAudioEncoder);
            trace("hasEmbeddedVideo: " + Capabilities.hasEmbeddedVideo);
            trace("hasIME: " + Capabilities.hasIME);
            trace("hasMP3: " + Capabilities.hasMP3);
            trace("hasPrinting: " + Capabilities.hasPrinting);
            trace("hasScreenBroadcast: " + Capabilities.hasScreenBroadcast);
            trace("hasScreenPlayback: " + Capabilities.hasScreenPlayback);
            trace("hasStreamingAudio: " + Capabilities.hasStreamingAudio);
            trace("hasStreamingVideo: " + Capabilities.hasStreamingVideo);
            trace("hasTLS: " + Capabilities.hasTLS);
            trace("hasVideoEncoder: " + Capabilities.hasVideoEncoder);
            trace("isDebugger: " + Capabilities.isDebugger);
            trace("isEmbeddedInAcrobat: " + Capabilities.isEmbeddedInAcrobat);
            trace("language: " + Capabilities.language);
            trace("localFileReadDisable: " + Capabilities.localFileReadDisable);
            trace("manufacturer: " + Capabilities.manufacturer);
            trace("maxLevelIDC: " + Capabilities.maxLevelIDC);
            trace("os: " + Capabilities.os);
            trace("pixelAspectRatio: " + Capabilities.pixelAspectRatio);
            trace("playerType: " + Capabilities.playerType);
            trace("screenColor: " + Capabilities.screenColor);
            trace("screenDPI: " + Capabilities.screenDPI);
            trace("screenResolutionX: " + Capabilities.screenResolutionX);
            trace("screenResolutionY: " + Capabilities.screenResolutionY);
            trace("serverString: " + Capabilities.serverString);
            trace("touchscreenType: " + Capabilities.touchscreenType);
            
            // The following capabilities are supported only when publishing for AIR.
            // If you are publishing for AIR, uncomment the following lines.       
            //trace("cpuArchitecture: " + Capabilities.cpuArchitecture);
            //trace("languages: " + Capabilities.languages);
            //trace("supports32BitProcesses: " + Capabilities.supports32BitProcesses);
            //trace("supports64BitProcesses: " + Capabilities.supports64BitProcesses);        
                        
            trace("version: " + Capabilities.version);
       
        }
    }
}

</codeblock></example></apiClassifierDetail><apiValue id="flash.system:Capabilities:avHardwareDisable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">avHardwareDisable</apiName><shortdesc class="- topic/shortdesc ">
	 ユーザーのカメラとマイクへのアクセスが管理上禁止されているか（true）、または許可されているか（false）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.avHardwareDisable, avHardwareDisable
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ユーザーのカメラとマイクへのアクセスが管理上禁止されているか（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）、または許可されているか（<codeph class="+ topic/ph pr-d/codeph ">false</codeph>）を指定します。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">AVD</codeph> です。
	 
	 <p class="- topic/p ">Adobe AIR™ のコンテンツでは、このプロパティはアプリケーションセキュリティサンドボックス以外のセキュリティサンドボックス内のコンテンツにのみ適用されます。アプリケーションセキュリティサンドボックス内のコンテンツは常にユーザーのカメラとマイクにアクセスできます。</p>
 	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/getCamera()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Camera.getCamera()</linktext></link><link href="flash.media.xml#Microphone/getMicrophone()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.getMicrophone()</linktext></link><link href="flash.system.xml#Security/showSettings()" class="- topic/link "><linktext class="- topic/linktext ">Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:cpuArchitecture:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">cpuArchitecture</apiName><shortdesc class="- topic/shortdesc ">
	 現在の CPU アーキテクチャを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.0.32" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample>The following example traces the value of this read-only property:
	 <pre xml:space="preserve" class="- topic/pre ">
	 trace(Capabilities.cpuArchitecture);
	 </pre>
	  
	 </oldexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 現在の CPU アーキテクチャを指定します。<codeph class="+ topic/ph pr-d/codeph ">cpuArchitecture</codeph> プロパティは、"<codeph class="+ topic/ph pr-d/codeph ">PowerPC</codeph>"、"<codeph class="+ topic/ph pr-d/codeph ">x86</codeph>"、"<codeph class="+ topic/ph pr-d/codeph ">SPARC</codeph>" および "<codeph class="+ topic/ph pr-d/codeph ">ARM</codeph>" のいずれかのストリングを返します。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">ARCH</codeph> です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasAccessibility:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasAccessibility</apiName><shortdesc class="- topic/shortdesc ">
	 システムがアクセシビリティ補助との通信をサポートしているか（true）、またはサポートしていないか（false）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasAccessibility, hasAccessibility,
	 accessibility
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 システムがアクセシビリティ補助との通信をサポートしているか（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）、またはサポートしていないか（<codeph class="+ topic/ph pr-d/codeph ">false</codeph>）を指定します。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">ACC</codeph> です。 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#Accessibility/active" class="- topic/link "><linktext class="- topic/linktext ">flash.accessibility.Accessibility.active</linktext></link><link href="flash.accessibility.xml#Accessibility/updateProperties()" class="- topic/link "><linktext class="- topic/linktext ">flash.accessibility.Accessibility.updateProperties()</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:hasAudioEncoder:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasAudioEncoder</apiName><shortdesc class="- topic/shortdesc ">
	 システムが、マイクからの入力などのオーディオストリームをエンコードできるか（true）、またはできないか（false）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasAudioEncoder, hasAudioEncoder 
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 システムが、マイクからの入力などのオーディオストリームをエンコードできるか（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）、またはできないか（<codeph class="+ topic/ph pr-d/codeph ">false</codeph>）を指定します。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">AE</codeph> です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasAudio:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasAudio</apiName><shortdesc class="- topic/shortdesc ">
	 システムにオーディオ機能があるかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasAudio, hasAudio
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 システムにオーディオ機能があるかどうかを指定します。このプロパティは常に <codeph class="+ topic/ph pr-d/codeph ">true</codeph> です。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">A</codeph> です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasEmbeddedVideo:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasEmbeddedVideo</apiName><shortdesc class="- topic/shortdesc ">
	 システムが埋め込みビデオをサポートしているか（true）、またはサポートしていないか（false）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasEmbeddedVideo, hasEmbeddedVideo, video
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 システムが埋め込みビデオをサポートしているか（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）、またはサポートしていないか（<codeph class="+ topic/ph pr-d/codeph ">false</codeph>）を指定します。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">EV</codeph> です。 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasIME:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasIME</apiName><shortdesc class="- topic/shortdesc ">
	 システムに IME がインストールされているか（true）、またはインストールされていないか（false）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasIME, hasIME, IME 
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 システムに IME がインストールされているか（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）、またはインストールされていないか（<codeph class="+ topic/ph pr-d/codeph ">false</codeph>）を指定します。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">IME</codeph> です。 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME</linktext></link><link href="flash.system.xml#System/ime" class="- topic/link "><linktext class="- topic/linktext ">flash.system.System.ime</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:hasMP3:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasMP3</apiName><shortdesc class="- topic/shortdesc ">
	 システムに MP3 デコーダが存在するか（true）、または存在しないか（false）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasMP3, hasMP3, MP3, audio
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 システムに MP3 デコーダが存在するか（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）、または存在しないか（<codeph class="+ topic/ph pr-d/codeph ">false</codeph>）を指定します。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">MP3</codeph> です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasPrinting:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasPrinting</apiName><shortdesc class="- topic/shortdesc ">
	 システムが印刷をサポートしているか（true）、またはサポートしていないか（false）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasPrinting, hasPrinting, printing 
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 システムが印刷をサポートしているか（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）、またはサポートしていないか（<codeph class="+ topic/ph pr-d/codeph ">false</codeph>）を指定します。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">PR</codeph> です。 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasScreenBroadcast:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasScreenBroadcast</apiName><shortdesc class="- topic/shortdesc ">
	 Flash Media Server を通して実行されるスクリーンブロードキャストアプリケーションの開発がシステムでサポートされているか（true）、またはサポートされていないか（false）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasScreenBroadcast, hasScreenBroadcast
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Flash Media Server を通して実行されるスクリーンブロードキャストアプリケーションの開発がシステムでサポートされているか（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）、またはサポートされていないか（<codeph class="+ topic/ph pr-d/codeph ">false</codeph>）を指定します。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">SB</codeph> です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasScreenPlayback:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasScreenPlayback</apiName><shortdesc class="- topic/shortdesc ">
	 Flash Media Server を通して実行されているスクリーンブロードキャストアプリケーションの再生がシステムでサポートされているか（true）、またはサポートされていないか（false）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasScreenPlayback, hasScreenPlayback
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Flash Media Server を通して実行されているスクリーンブロードキャストアプリケーションの再生がシステムでサポートされているか（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）、またはサポートされていないか（<codeph class="+ topic/ph pr-d/codeph ">false</codeph>）を指定します。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">SP</codeph> です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasStreamingAudio:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasStreamingAudio</apiName><shortdesc class="- topic/shortdesc ">
	 システムがストリーミングオーディオを再生できるか（true）、またはできないか（false）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasStreamingAudio, hasStreamingAudio, audio
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 システムがストリーミングオーディオを再生できるか（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）、またはできないか（<codeph class="+ topic/ph pr-d/codeph ">false</codeph>）を指定します。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">SA</codeph> です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasStreamingVideo:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasStreamingVideo</apiName><shortdesc class="- topic/shortdesc ">
	 システムがストリーミングビデオを再生できるか（true）、またはできないか（false）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasStreamingVideo, hasStreamingVideo, video
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 システムがストリーミングビデオを再生できるか（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）、またはできないか（<codeph class="+ topic/ph pr-d/codeph ">false</codeph>）を指定します。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">SV</codeph> です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasTLS:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasTLS</apiName><shortdesc class="- topic/shortdesc ">
	 NetConnection によるネイティブ SSL ソケットがサポートされているか（true）、またはサポートされていないか（false）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasTLS, hasTLS, TLS 
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 NetConnection によるネイティブ SSL ソケットがサポートされているか（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）、またはサポートされていないか（<codeph class="+ topic/ph pr-d/codeph ">false</codeph>）を指定します。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">TLS</codeph> です。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/connectedProxyType" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.connectedProxyType</linktext></link><link href="flash.net.xml#NetConnection/proxyType" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.proxyType</linktext></link><link href="flash.net.xml#NetConnection/usingTLS" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.usingTLS</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:hasVideoEncoder:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasVideoEncoder</apiName><shortdesc class="- topic/shortdesc ">
	 システムが、Web カメラからの入力などのビデオストリームをエンコードできるか（true）、またはできないか（false）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasVideoEncoder, hasVideoEncoder
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 システムが、Web カメラからの入力などのビデオストリームをエンコードできるか（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）、またはできないか（<codeph class="+ topic/ph pr-d/codeph ">false</codeph>）を指定します。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">VE</codeph> です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:isDebugger:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isDebugger</apiName><shortdesc class="- topic/shortdesc "> 
	 システムがデバッグ用の特別なバージョンか（true）、または正式にリリースされたバージョンか（false）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.isDebugger, isDebugger, debugging 
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	 システムがデバッグ用の特別なバージョンか（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）、または正式にリリースされたバージョンか（<codeph class="+ topic/ph pr-d/codeph ">false</codeph>）を指定します。 サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">DEB</codeph> です。このプロパティは、Flash Player のデバッグ版または AIR Debug Launcher（ADL）で実行する場合、<codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定されます。<ph class="- topic/ph "/>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:isEmbeddedInAcrobat:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isEmbeddedInAcrobat</apiName><shortdesc class="- topic/shortdesc ">
	 Flash ランタイムが、Acrobat 9.0 以降で開くことができる PDF ファイルに埋め込まれているか（true）、またはそうでないか（false）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.127.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.isEmbeddedInAcrobat, isEmbeddedInAcrobat, Acrobat
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Flash ランタイムが、Acrobat 9.0 以降で開くことができる PDF ファイルに埋め込まれているか（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）、またはそうでないか（<codeph class="+ topic/ph pr-d/codeph ">false</codeph>）を指定します。
	 
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:languages:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">languages</apiName><shortdesc class="- topic/shortdesc ">
		 オペレーティングシステムでユーザーが選択したユーザーインターフェイスの言語に関する情報を含むストリングの配列です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 オペレーティングシステムでユーザーが選択したユーザーインターフェイスの言語に関する情報を含むストリングの配列です。このストリングには、RFC4646（<xref href="http://www.ietf.org/rfc/rfc4646.txt" scope="external" class="- topic/xref ">http://www.ietf.org/rfc/rfc4646.txt</xref>）で定義された言語タグ（および該当する場合はスクリプト情報と地域情報）が格納され、区切り記号としてダッシュが使用されます（例えば<codeph class="+ topic/ph pr-d/codeph ">「en-US」</codeph>、<codeph class="+ topic/ph pr-d/codeph ">「ja-JP」</codeph>など）。オペレーティングシステムの設定により決定される環境設定の順序で言語が配列のリストに含まれます。 
		 
		 <p class="- topic/p ">オペレーティングシステムにより、ロケールストリングで返される地域の情報は異なります。あるオペレーティングシステムでは <codeph class="+ topic/ph pr-d/codeph ">"en-us"</codeph> を返すのに対し、別のオペレーティングシステムでは <codeph class="+ topic/ph pr-d/codeph ">"en"</codeph> を返します。</p>
		 
		 <p class="- topic/p ">返される配列の最初のエントリには一般に、<codeph class="+ topic/ph pr-d/codeph ">Capabilities.language</codeph> プロパティと同じ主言語 ID が含まれます。例えば、<codeph class="+ topic/ph pr-d/codeph ">Capabilities.languages[0]</codeph> が <codeph class="+ topic/ph pr-d/codeph ">"en-US"</codeph> に設定されている場合、<codeph class="+ topic/ph pr-d/codeph ">language</codeph> プロパティは <codeph class="+ topic/ph pr-d/codeph ">"en"</codeph> に設定されます。ただし、<codeph class="+ topic/ph pr-d/codeph ">Capabilities.language</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">"xu"</codeph> に設定されている場合（不明な言語が指定されています）、この配列の最初のエレメントは異なります。こうした理由から、<codeph class="+ topic/ph pr-d/codeph ">Capabilities.languages[0]</codeph> は <codeph class="+ topic/ph pr-d/codeph ">Capabilities.language</codeph> よりも正確になる場合があります。</p>
		 
		 <p class="- topic/p ">サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">LS</codeph> です。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:language:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">language</apiName><shortdesc class="- topic/shortdesc ">
	 コンテンツが実行されているシステムの言語コードを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.language, language
	 
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 コンテンツが実行されているシステムの言語コードを指定します。言語は、ISO 639-1 で規定された小文字 2 文字の言語コードで指定されます。中国語については、簡体字と繁体字を識別するために、ISO 3166 で規定された大文字 2 文字の国コードが追加されます。言語コードは、言語の英語名に基づきます。たとえば、<codeph class="+ topic/ph pr-d/codeph ">hu</codeph> はハンガリー語を示します。
	 
	 <p class="- topic/p ">英語のシステムでは、このプロパティは言語コード（<codeph class="+ topic/ph pr-d/codeph ">en</codeph>）のみを返し、国コードは返しません。Microsoft Windows システムでは、このプロパティはユーザーインターフェイス（UI）言語を返します。UI 言語は、すべてのメニュー、ダイアログボックス、エラーメッセージ、ヘルプファイルなどで使用される言語です。次の表に、指定できる値を示します。
	 
     <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry align="left" class="- topic/entry ">言語</entry><entry align="left" class="- topic/entry ">値</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry ">チェコ語</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cs</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">デンマーク語</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">da</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">オランダ語</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">nl</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">英語</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">en</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">フィンランド語</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">fi</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">フランス語</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">fr</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">ドイツ語</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">de</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">ハンガリー語</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hu</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">イタリア語</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">it</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">日本語</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ja</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">韓国語</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ko</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">ノルウェー語</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">no</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">その他/不明</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">xu</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">ポーランド語</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">pl</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">ポルトガル語</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">pt</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">ロシア語</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ru</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">簡体字中国語</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">zh-CN</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">スペイン語</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">es</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">スウェーデン語</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">sv</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">繁体字中国語</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">zh-TW</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">トルコ語</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">tr</codeph></entry></row></tbody></tgroup></adobetable>
	 </p>
	 
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">注意：</i><codeph class="+ topic/ph pr-d/codeph ">Capabilities.language</codeph> プロパティの値は、このリストの有効な値に制限されています。この制限のために、Adobe AIR アプリケーションではシステムのユーザーインターフェイスの主言語を決定するために <codeph class="+ topic/ph pr-d/codeph ">Capabilities.languages</codeph> 配列の最初のエレメントを使用する必要があります。 </p>
	 
	 <p class="- topic/p ">サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">L</codeph> です。</p>
	 
	 </apiDesc><example conref="examples\Capabilities_languageExample.as" class="- topic/example "> 次の例では、ユーザーのオペレーティングシステムの言語により異なるコンテンツが表示されます。
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">Capabilities.language</codeph> プロパティによって、ISO 639-1 言語コード（例えば、英語の場合は "en"）が返されます。<codeph class="+ topic/ph pr-d/codeph ">switch</codeph> ステートメントによって、言語コードがチェックされ、その言語固有の挨拶文が <codeph class="+ topic/ph pr-d/codeph ">myTextField</codeph> テキストフィールドの内容として設定されます。言語コードがこの例でサポートされていない場合は、デフォルトのエラーストリングが返されます。</p>
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.system.Capabilities;

    public class Capabilities_languageExample extends Sprite {

        public function Capabilities_languageExample()  {
            var myTextField:TextField = new TextField();         
            myTextField.x = 10;
            myTextField.y = 10;
            myTextField.background = true;
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            
            var greetingEnglish:String = "Hello World";
            var greetingGerman:String = "Hallo Welt";
            var greetingFrench:String = "Bonjour Monde";
            var greetingSpanish:String = "Hola Mundo";

            var lang:String = Capabilities.language;
                         
            switch (lang) {
                case "en":
                    myTextField.text = greetingEnglish;
                    break;
                case "de":
                    myTextField.text = greetingGerman;
                    break;
                case "fr":
                    myTextField.text = greetingFrench;
                    break;
                case "es":
                    myTextField.text = greetingSpanish;
                    break;
                default:
                    myTextField.text = "Sorry your system's language is not supported at this time.";               
            }
             
            this.addChild(myTextField);
        }
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Capabilities/languages" class="- topic/link "><linktext class="- topic/linktext ">languages</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:localFileReadDisable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localFileReadDisable</apiName><shortdesc class="- topic/shortdesc ">
	 ユーザーのハードディスクへの読み取りアクセスが管理上禁止されているか（true）、または許可されているか（false）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.localFileReadDisable, localFileReadDisable
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ユーザーのハードディスクへの読み取りアクセスが管理上禁止されているか（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）、または許可されているか（<codeph class="+ topic/ph pr-d/codeph ">false</codeph>）を指定します。Adobe AIR のコンテンツでは、このプロパティはアプリケーションセキュリティサンドボックス以外のセキュリティサンドボックス内のコンテンツにのみ適用されます。（アプリケーションセキュリティサンドボックス内のコンテンツは常にファイルシステムから読み取ることができます。）<ph class="- topic/ph ">このプロパティが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合、Flash Player では、ユーザーのハードディスクからファイル（Flash Player が起動するときの最初のファイルを含む）を読み取ることができません。</ph>このプロパティが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合、アプリケーションセキュリティサンドボックス外の AIR コンテンツでは、ユーザーのハードディスクからファイルを読み取ることができません。 たとえば、ロードメソッドを使用してユーザーのハードディスク上にあるファイルを読み取ろうとしても、このプロパティが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合は、読み取りに失敗します。
	 
	 <p class="- topic/p ">このプロパティが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定されている場合、ランタイム共有ライブラリの読み取りも失敗しますが、ローカル共有オブジェクトはこのプロパティの値に関係なく読み取ることができます。</p>
	 
	 <p class="- topic/p ">サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">LFD</codeph> です。</p>
	 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:manufacturer:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">manufacturer</apiName><shortdesc class="- topic/shortdesc ">
	 Flash Player または AIR ランタイムの実行バージョンの製造会社を "Adobe OSName" の形式で指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.manufacturer, manufacturer
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <ph class="- topic/ph ">Flash Player </ph>または AIR ランタイムの実行バージョンの製造会社を <codeph class="+ topic/ph pr-d/codeph ">"Adobe</codeph> <codeph class="+ topic/ph pr-d/codeph "><i class="+ topic/ph hi-d/i ">OSName</i>"</codeph> の形式で指定します。<codeph class="+ topic/ph pr-d/codeph "><i class="+ topic/ph hi-d/i ">OSName</i></codeph> の値は、<codeph class="+ topic/ph pr-d/codeph ">"Windows"</codeph>、<codeph class="+ topic/ph pr-d/codeph ">"Macintosh"</codeph>、<codeph class="+ topic/ph pr-d/codeph ">"Linux"</codeph> または別のオペレーティングシステム名になります。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">M</codeph> です。
	 
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i "/>より具体的な機能のプロパティが存在する場合に、<codeph class="+ topic/ph pr-d/codeph ">Capabilities.manufacturer</codeph> を使用して、オペレーティングシステムに基づく機能を判断しないでください。機能をオペレーティングシステムに依存することは、アプリケーションが潜在的なすべてのターゲットオペレーティングシステムを考慮していない場合に問題が発生する可能性があるので、適切ではありません。代わりに、テストしている機能に対応するプロパティを使用します。詳細については、Capabilities クラスの説明を参照してください。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:maxLevelIDC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">maxLevelIDC</apiName><shortdesc class="- topic/shortdesc ">
     クライアントハードウェアがサポートする H.264 の最高レベルの IDC を取得します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.maxLevelIDC, maxLevelIDC
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     クライアントハードウェアがサポートする H.264 の最高レベルの IDC を取得します。このレベルでのメディア実行は保証されますが、最高レベルでのメディア実行は最高品質では実行されない場合があります。このプロパティは、クライアントの機能をターゲットとするサーバーに役立ちます。このプロパティを使用すると、サーバーはクライアントに送るビデオのレベルを決定できます。
     
     <p class="- topic/p ">サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">ML</codeph> です。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:os:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">os</apiName><shortdesc class="- topic/shortdesc ">
	 現在のオペレーティングシステムを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.os, os
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 現在のオペレーティングシステムを指定します。<codeph class="+ topic/ph pr-d/codeph ">os</codeph> プロパティは、次のストリングを返すことができます。
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">オペレーティングシステム</entry><entry class="- topic/entry ">値</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry ">Windows 7</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows 7"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows Vista</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows Vista"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows Server 2008 R2</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows Server 2008 R2"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows Server 2008</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows Server 2008"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows Home Server</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows Home Server"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows Server 2003 R2</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows Server 2003 R2"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows Server 2003</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows Server 2003"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows XP 64</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows Server XP 64"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows XP</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows XP"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows 98</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows-98"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows 95</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows 95"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows NT</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows NT"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows 2000</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows 2000"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows ME</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows ME"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows CE</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows CE"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows SmartPhone</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows SmartPhone"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows PocketPC</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows PocketPC"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows CEPC</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows CEPC"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows Mobile</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows Mobile"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Mac OS</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Mac OS X.Y.Z"</codeph>（X.Y.Z はバージョン番号。例：<codeph class="+ topic/ph pr-d/codeph ">"Mac OS 10.5.2"</codeph>）</entry></row><row class="- topic/row "><entry class="- topic/entry ">Linux</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Linux"</codeph>（Flash Player では Linux バージョンが付加されます。例：<codeph class="+ topic/ph pr-d/codeph ">"Linux 2.6.15-1.2054_FC5smp"</codeph>）</entry></row><row class="- topic/row "><entry class="- topic/entry ">iPhone OS 4.1</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"iPhone3,1"</codeph></entry></row></tbody></tgroup></adobetable>
	
	 <p class="- topic/p ">サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">OS</codeph> です。</p>
	 
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i "/>より具体的な機能のプロパティが存在する場合に、<codeph class="+ topic/ph pr-d/codeph ">Capabilities.os</codeph> を使用して、オペレーティングシステムに基づく機能を判断しないでください。機能をオペレーティングシステムに依存することは、アプリケーションが潜在的なすべてのターゲットオペレーティングシステムを考慮していない場合に問題が発生する可能性があるので、適切ではありません。代わりに、テストしている機能に対応するプロパティを使用します。詳細については、Capabilities クラスの説明を参照してください。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:pixelAspectRatio:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">pixelAspectRatio</apiName><shortdesc class="- topic/shortdesc "> 
	 画面のピクセル縦横比を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.pixelAspectRatio, pixelAspectRatio
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	 画面のピクセル縦横比を指定します。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">AR</codeph> です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:playerType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">playerType</apiName><shortdesc class="- topic/shortdesc ">
	 ランタイム環境のタイプを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.playerType, playerType
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ランタイム環境のタイプを指定します。このプロパティに指定できる値は、次のうちのいずれかです。
	 
	 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"ActiveX"</codeph> - Microsoft Internet Explorer で使用される Flash Player ActiveX コントロール</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"Desktop"</codeph> - Adobe AIR ランタイム（<codeph class="+ topic/ph pr-d/codeph ">Capabilities.playerType</codeph> が <codeph class="+ topic/ph pr-d/codeph ">"PlugIn"</codeph> に設定されている HTML ページによりロードされる SWF コンテンツは除く）</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"External"</codeph> - 外部 Flash Player<ph outputclass="flashonly" class="- topic/ph "> またはプレビューモード</ph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"PlugIn"</codeph> - Flash Player ブラウザーのプラグイン（および AIR アプリケーションの HTML ページで読み込まれた SWF コンテンツ）</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"StandAlone"</codeph> - スタンドアローン Flash Player</li></ul>
	 <p class="- topic/p ">サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">PT</codeph> です。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:screenColor:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">screenColor</apiName><shortdesc class="- topic/shortdesc ">
	 画面の色を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.screenColor, screenColor
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 画面の色を指定します。このプロパティの値は、<codeph class="+ topic/ph pr-d/codeph ">"color"</codeph>、<codeph class="+ topic/ph pr-d/codeph ">"gray"</codeph>（グレースケール）または <codeph class="+ topic/ph pr-d/codeph ">"bw"</codeph>（モノクロ）です。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">COL</codeph> です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:screenDPI:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">screenDPI</apiName><shortdesc class="- topic/shortdesc ">
	 画面の 1 インチあたりのドット数（dpi）解像度をピクセル単位で指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.screenDPI, screenDPI
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 画面の 1 インチあたりのドット数（dpi）解像度をピクセル単位で指定します。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">DP</codeph> です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:screenResolutionX:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">screenResolutionX</apiName><shortdesc class="- topic/shortdesc ">
	 画面の最大水平解像度を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.screenResolutionX, screenResolutionY
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 画面の最大水平解像度を指定します。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">R</codeph> で、画面の幅と高さの両方を返します。このプロパティはユーザーの画面解像度で更新されず、代わりに <ph class="- topic/ph ">Flash Player</ph> または Adobe AIR アプリケーションの起動時の解像度だけを示します。 また、この値はメイン画面のみを指定します。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:screenResolutionY:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">screenResolutionY</apiName><shortdesc class="- topic/shortdesc "> 
	 画面の最大垂直解像度を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.screenResolutionY, screenResolutionY
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	 画面の最大垂直解像度を指定します。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">R</codeph> で、画面の幅と高さの両方を返します。このプロパティはユーザーの画面解像度で更新されず、代わりに <ph class="- topic/ph ">Flash Player</ph> または Adobe AIR アプリケーションの起動時の解像度だけを示します。 また、この値はメイン画面のみを指定します。
	 
	 </apiDesc><example conref="examples\Capabilities_ScreenRes.as" class="- topic/example "> 次の例は、現在の画面の解像度とオペレーティングシステムのバージョンを表示する簡単なテストです。テストを実行したら、テキストフィールドをクリックして、プロパティの値を確認します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.events.~;
import flash.display.~;
import flash.system.Capabilities;
import flash.text.TextField;

var screenInfoTxt:TextField = new TextField();
var screenInfoTxt.x = 30;
var screenInfoTxt.y = 50;
var screenInfoTxt.width = 300;
var screenInfoTxt.height = 100;
var screenInfoTxt.border = true;

addChild(screenInfoTxt);

addEventListener(MouseEvent.CLICK, getScreenNVersion);

function getScreenNVersion(e:MouseEvent):void{
    screenInfoTxt.text= "flash.system.Capabilities.screenResolutionX is : " + String(flash.system.Capabilities.screenResolutionX) + "\n" +
    "flash.system.Capabilities.screenResolutionY is : " + String(flash.system.Capabilities.screenResolutionY) + "\n" +
    "flash.system.Capabilities.version is : " + flash.system.Capabilities.version;
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:serverString:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">serverString</apiName><shortdesc class="- topic/shortdesc "> 
	 それぞれの Capabilities プロパティの値を指定する URL エンコードストリングです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.serverString, serverString
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	 それぞれの Capabilities プロパティの値を指定する URL エンコードストリングです。
	 
	 <p class="- topic/p ">URL エンコードストリングの例を次に示します。
	 <pre xml:space="preserve" class="- topic/pre ">A=t&amp;SA=t&amp;SV=t&amp;EV=t&amp;MP3=t&amp;AE=t&amp;VE=t&amp;ACC=f&amp;PR=t&amp;SP=t&amp;
	 SB=f&amp;DEB=t&amp;V=WIN%208%2C5%2C0%2C208&amp;M=Adobe%20Windows&amp;
	 R=1600x1200&amp;DP=72&amp;COL=color&amp;AR=1.0&amp;OS=Windows%20XP&amp;
	 L=en&amp;PT=External&amp;AVD=f&amp;LFD=f&amp;WD=f</pre></p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:supports32BitProcesses:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">supports32BitProcesses</apiName><shortdesc class="- topic/shortdesc ">
	32 ビットプロセスの実行がサポートされているかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.0.32" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample>The following example traces the value of this read-only property:
	<pre xml:space="preserve" class="- topic/pre ">
	trace(Capabilities.supports32BitProcesses);
	</pre>
	 
	</oldexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	32 ビットプロセスの実行がサポートされているかどうかを指定します。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">PR32</codeph> です。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:supports64BitProcesses:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">supports64BitProcesses</apiName><shortdesc class="- topic/shortdesc ">
	64 ビットプロセスの実行がサポートされているかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.0.32" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample>The following example traces the value of this read-only property:
	<pre xml:space="preserve" class="- topic/pre ">
	trace(Capabilities.supports64BitProcesses);
	</pre>
	 
	</oldexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	64 ビットプロセスの実行がサポートされているかどうかを指定します。サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">PR64</codeph> です。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:touchscreenType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">touchscreenType</apiName><shortdesc class="- topic/shortdesc ">
	 タッチスクリーンがサポートされる場合、そのタッチスクリーンの種類を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 タッチスクリーンがサポートされる場合、そのタッチスクリーンの種類を指定します。flash.system.TouchscreenType クラスに定義されている値です。
	 
	 </apiDesc><example conref="examples\Capabilities_touchScreenType.as" class="- topic/example "> 次の例は、現在のタッチスクリーンの種類を表示する簡単なテストです。テストを実行したら、テキストフィールドをクリックして、プロパティの値を確認します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.events.~~;
import flash.display.~~;
import flash.system.Capabilities;
import flash.text.TextField;

var capabilitiesTouchScreenTypeTxt:TextField = new TextField();
capabilitiesTouchScreenTypeTxt.width = 300;
capabilitiesTouchScreenTypeTxt.border = true;

addChild(capabilitiesTouchScreenTypeTxt);

addEventListener(MouseEvent.CLICK, getScreenKeyboardType);

function getScreenKeyboardType(e:MouseEvent):void{
    capabilitiesTouchScreenTypeTxt.text= "flash.system.Capabilities.touchscreenType is : " + flash.system.Capabilities.touchscreenType;
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#TouchscreenType" class="- topic/link "><linktext class="- topic/linktext ">TouchscreenType クラス</linktext></link><link href="flash.ui.xml#Mouse/supportsCursor" class="- topic/link "><linktext class="- topic/linktext ">flash.ui.Mouse.supportsCursor</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:version:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">version</apiName><shortdesc class="- topic/shortdesc "> 
	 Flash Player または Adobe&amp;#xAE; AIR&amp;#xAE; のプラットフォームとバージョン情報を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.version, version
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	 Flash Player または Adobe<sup class="+ topic/ph hi-d/sup ">®</sup> AIR<sup class="+ topic/ph hi-d/sup ">®</sup> のプラットフォームとバージョン情報を指定します。バージョン番号の書式は、<i class="+ topic/ph hi-d/i ">platform majorVersion,minorVersion,buildNumber,internalBuildNumber</i> です。<i class="+ topic/ph hi-d/i ">platform</i> の有効な値は、<codeph class="+ topic/ph pr-d/codeph ">"WIN"</codeph>、<codeph class="+ topic/ph pr-d/codeph ">"MAC"</codeph>、<codeph class="+ topic/ph pr-d/codeph ">"LNX"</codeph> および <codeph class="+ topic/ph pr-d/codeph ">"AND"</codeph> です。バージョン情報の例を次に示します。
	 
	 <pre xml:space="preserve" class="- topic/pre ">
	 WIN 9,0,0,0  // Flash Player 9 for Windows
	 MAC 7,0,25,0   // Flash Player 7 for Macintosh
	 LNX 9,0,115,0  // Flash Player 9 for Linux
	 AND 10,2,150,0 // Flash Player 10 for Android
	 </pre>
	 
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i "/>より具体的な機能のプロパティが存在する場合に、<codeph class="+ topic/ph pr-d/codeph ">Capabilities.version</codeph> を使用して、オペレーティングシステムに基づく機能を判断しないでください。機能をオペレーティングシステムに依存することは、アプリケーションが潜在的なすべてのターゲットオペレーティングシステムを考慮していない場合に問題が発生する可能性があるので、適切ではありません。代わりに、テストしている機能に対応するプロパティを使用します。詳細については、Capabilities クラスの説明を参照してください。</p>
	 
	 <p class="- topic/p ">サーバーストリングは <codeph class="+ topic/ph pr-d/codeph ">V</codeph> です。</p>
	 
	 </apiDesc><example conref="examples\Capabilities_ScreenRes.as" class="- topic/example "> 次の例は、現在の画面の解像度とオペレーティングシステムのバージョンを表示する簡単なテストです。テストを実行したら、テキストフィールドをクリックして、プロパティの値を確認します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.events.~;
import flash.display.~;
import flash.system.Capabilities;
import flash.text.TextField;

var screenInfoTxt:TextField = new TextField();
var screenInfoTxt.x = 30;
var screenInfoTxt.y = 50;
var screenInfoTxt.width = 300;
var screenInfoTxt.height = 100;
var screenInfoTxt.border = true;

addChild(screenInfoTxt);

addEventListener(MouseEvent.CLICK, getScreenNVersion);

function getScreenNVersion(e:MouseEvent):void{
    screenInfoTxt.text= "flash.system.Capabilities.screenResolutionX is : " + String(flash.system.Capabilities.screenResolutionX) + "\n" +
    "flash.system.Capabilities.screenResolutionY is : " + String(flash.system.Capabilities.screenResolutionY) + "\n" +
    "flash.system.Capabilities.version is : " + flash.system.Capabilities.version;
}
</codeblock></example></apiValueDetail></apiValue></apiClassifier><apiOperation id="globalOperation:flash.system:fscommand" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">fscommand</apiName><shortdesc class="- topic/shortdesc ">
 SWF ファイルが、Flash Player または Flash Player のホストプログラム（Web ブラウザーなど）と通信できるようになります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample><p class="- topic/p ">In the following example, the <code>fscommand()</code> function sets Flash Player to 
 scale the SWF file to the full monitor screen size when the <code>fullscreen_btn</code> button or 
 <code>unfullscreen_btn</code> is released:</p>
 
 <pre xml:space="preserve" class="- topic/pre ">this.fullscreen_btn.onRelease = function() {
   fscommand("fullscreen", true);
 };
 this.unfullscreen_btn.onRelease = function() {
   fscommand("fullscreen", false);
 };
 </pre>
 
 <p class="- topic/p ">The following example uses the <code>fscommand()</code> function applied to a button in Flash to 
 open a JavaScript message box in an HTML page. The message itself is sent to JavaScript as the 
 <code>fscommand</code> parameter. </p>
 
 <p class="- topic/p ">You must add a function to the HTML page that contains the SWF file. This function, 
 <code><i class="+ topic/ph hi-d/i ">myDocument</i></code><code>_DoFSCommand</code>, sits in the HTML page and waits for an 
 <code>fscommand()</code> function in Flash. When an <code>fscommand</code> is triggered in Flash 
 (for example, when a user presses the button), the <code>command</code> and <code>args</code> strings 
 are passed to the <code><i class="+ topic/ph hi-d/i ">myDocument</i></code><code>_DoFSCommand </code>function. You can use the 
 passed strings in your JavaScript or VBScript code in any way you like. In this example, the function 
 contains a conditional <code>if</code> statement that checks to see if the command string is 
 "<code>messagebox</code>". If it is, a JavaScript alert box (or "message box") opens 
 and displays the contents of the <code>args</code> string.</p>
 
 <pre xml:space="preserve" class="- topic/pre ">function myDocument_DoFSCommand(command, args) {
   if (command == "messagebox") {
      alert(args);
   }
 
 </pre>
 
 <p class="- topic/p ">In the Flash document, add the <code>fscommand()</code> function to a button:</p>
 
 <pre xml:space="preserve" class="- topic/pre ">fscommand("messagebox", "This is a message box called from within Flash.")
 </pre>
 
 <p class="- topic/p ">You can also use expressions for the <code>fscommand()</code> function and parameters, as in the 
 following example:</p>
 
 <pre xml:space="preserve" class="- topic/pre ">fscommand("messagebox", "Hello, " + name + ", welcome to our website!")
 </pre>
 
 <p class="- topic/p ">To test the SWF file, select File > Publish Preview > HTML.</p>
 
 <p class="- topic/p "><strong>Note: </strong>If you publish your SWF file using the Flash with FSCommand template in the 
 HTML 
 tab of the Publish Settings dialog box, the <code>myDocument_DoFSCommand</code> function is inserted 
 automatically. The SWF file's <code>NAME</code> and <code>ID</code> attributes will be the filename. 
 For example, for the file myDocument.fla, the attributes would be set to <code>myDocument</code>.</p>
 </oldexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">マウスイベントやキー入力イベントなどのユーザー操作に応じて関数が呼び出されない場合。
 
 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">command</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ホストアプリケーションに任意の用途で渡されるストリング、または Flash Player に渡されるコマンドです。
 
 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ホストアプリケーションに任意の用途で渡されるストリング、または Flash Player に渡される値です。
 
 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 SWF ファイルが、Flash Player または Flash Player のホストプログラム（Web ブラウザーなど）と通信できるようになります。<codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> 関数を使用して、Director、または ActiveX コントロールに対応している Visual Basic や Visual C++ などのプログラムにメッセージを渡すこともできます。
 
  
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> 関数を使用すると、SWF ファイルが Web ページ内のスクリプトと通信できるようになります。ただし、スクリプトへのアクセスは、Web ページの <codeph class="+ topic/ph pr-d/codeph ">allowScriptAccess</codeph> 属性の設定により制御されます。この属性は、SWF ファイルが埋め込まれる HTML コード内で設定します。例えば、Internet Explorer の <codeph class="+ topic/ph pr-d/codeph ">PARAM</codeph> タグ内や、Netscape の <codeph class="+ topic/ph pr-d/codeph ">EMBED</codeph> タグ内で設定します。 </p>
  <ul class="- topic/ul "><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">allowScriptAccess</codeph> が<codeph class="+ topic/ph pr-d/codeph ">「sameDomain」</codeph>（デフォルト）に設定されている場合は、Web ページと同じドメインに存在する SWF ファイルからのスクリプト実行のみが許可されます。 </li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">allowScriptAccess</codeph> が<codeph class="+ topic/ph pr-d/codeph ">「always」</codeph>に設定されている場合、SWF ファイルと HTML ページのドメインが異なる場合でも、SWF ファイルは埋め込み先の HTML ページとやり取りできます。 </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">allowScriptAccess</codeph> が<codeph class="+ topic/ph pr-d/codeph ">「never」</codeph>に設定されていると、SWF ファイルはどの HTML ページともやり取りできません。この値の使用はお勧めしません。また、信頼されていない SWF ファイルを独自のドメインから提供していない限り、この値を使用する必要はありません。信頼されていない SWF ファイルを提供する必要がある場合は、区別するためのサブドメインを作成し、信頼されていないコンテンツはすべてそこに配置することをお勧めします。 </li></ul>
 
 <p class="- topic/p ">SWF ファイルがこのメソッドを使用しないようにするには、SWF コンテンツを含んでいる HTML ページに <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">object</codeph> タグおよび <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> タグのパラメーター）を設定します。 </p>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> 関数は、呼び出し元 SWF ファイルがローカルファイルシステムのサンドボックスまたはネットワーク接続したローカルのサンドボックスに置かれ、さらに、含まれている HTML ページが信頼されないページとしてサンドボックスに置かれている場合には、使用できません。</p>
 
 <p class="- topic/p ">セキュリティについて詳しくは、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
 
 <p class="- topic/p ">シンタックス 1：<codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> を使用して Flash Player にメッセージを送るには、定義済みのコマンドとパラメーターを使用します。次の表に、<codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> 関数の <codeph class="+ topic/ph pr-d/codeph ">command</codeph> パラメーターと <codeph class="+ topic/ph pr-d/codeph ">args</codeph> パラメーターに指定できる値を示します。これらの値は、プロジェクターを含め、Flash Player で再生する SWF ファイルを制御します。<i class="+ topic/ph hi-d/i ">プロジェクター</i>は、Flash Player がなくてもスタンドアローンアプリケーションとして実行可能な形式で保存される SWF ファイルです。</p>
 
              <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">コマンド</entry><entry class="- topic/entry ">パラメーター (args) </entry><entry class="- topic/entry ">用途</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">quit</codeph></entry><entry class="- topic/entry ">なし</entry><entry class="- topic/entry ">プロジェクターを終了します。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">fullscreen</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> または <codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> を指定すると、Flash Player はフルスクリーンモードに設定されます。<codeph class="+ topic/ph pr-d/codeph ">false</codeph> を指定すると、プレーヤーはノーマルメニュービューになります。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">allowscale</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> または <codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph> を指定すると、SWF ファイルは常に元のサイズで表示され、拡大 / 縮小されないようにプレーヤーが設定されます。<codeph class="+ topic/ph pr-d/codeph ">true</codeph> を指定すると、SWF ファイルは強制的にプレーヤーのウィンドウサイズに対して 100% に拡大 / 縮小されます。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">showmenu</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> または <codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> を指定すると、すべてのコンテキストメニューアイテムが有効になります。<codeph class="+ topic/ph pr-d/codeph ">false</codeph> を指定すると、[設定] および [Flash Player について] 以外のすべてのコンテキストメニュー項目が非表示になります。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">exec</codeph></entry><entry class="- topic/entry ">アプリケーションへのパス </entry><entry class="- topic/entry ">プロジェクターの内部からアプリケーションを実行します。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">trapallkeys</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> または <codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> を指定すると、アクセラレーターキーを含むすべてのキーイベントが Flash Player の <codeph class="+ topic/ph pr-d/codeph ">onClipEvent(keyDown/keyUp)</codeph> ハンドラーに送られます。 </entry></row></tbody></tgroup></adobetable>
 <p class="- topic/p ">すべてのアプリケーションで、表に記載されているすべてのコマンドを利用できるわけではありません。 
 <ul class="- topic/ul "><li class="- topic/li ">Web プレーヤーでは、コマンドはいずれも利用できません。</li><li class="- topic/li ">すべてのコマンドをスタンドアローンのプロジェクターアプリケーションで利用できます。</li><li class="- topic/li ">AIR アプリケーションでは、同様の関数に対して、flash.desktop.NativeApplication クラス（<codeph class="+ topic/ph pr-d/codeph ">fscommand("quit")</codeph> ではなく <codeph class="+ topic/ph pr-d/codeph ">NativeApplication.nativeApplication.exit()</codeph> など）を使用します。</li><li class="- topic/li ">ムービープレビュープレーヤーでは、<codeph class="+ topic/ph pr-d/codeph ">allowscale</codeph> および <codeph class="+ topic/ph pr-d/codeph ">exec</codeph> のみを利用できます。</li></ul>
 </p>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">exec</codeph> コマンドで使用できる文字は、A ～ Z、a ～ z、0 ～ 9、ピリオド（.）、アンダースコア（_）だけです。<codeph class="+ topic/ph pr-d/codeph ">exec</codeph> コマンドは、fscommand サブディレクトリでのみ実行されます。つまり、<codeph class="+ topic/ph pr-d/codeph ">exec</codeph> コマンドを使ってアプリケーションを呼び出す場合、アプリケーションは fscommand という名前のサブディレクトリ内に存在する必要があります。<codeph class="+ topic/ph pr-d/codeph ">exec</codeph> コマンドは、Flash プロジェクターファイル内だけから実行できます。</p>
 
 <p class="- topic/p ">シンタックス 2：<codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> を使用して、Web ブラウザーの JavaScript などのスクリプト言語にメッセージを送るには、パラメーター <codeph class="+ topic/ph pr-d/codeph ">command</codeph> と <codeph class="+ topic/ph pr-d/codeph ">args</codeph> 内に 2 つのパラメーターを渡します。これらのパラメーターはストリングと式のいずれでもよく、fscommand() 関数を<i class="+ topic/ph hi-d/i ">キャッチする</i>、つまり <codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> 関数を処理する JavaScript 関数側で使用されます。 </p>
 
 <p class="- topic/p ">Web ブラウザーでは、<codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> は、SWF ファイルを含む Web ページ内に存在する JavaScript 関数 <codeph class="+ topic/ph pr-d/codeph ">moviename_DoFScommand</codeph> を呼び出します。<codeph class="+ topic/ph pr-d/codeph ">moviename</codeph> には、<codeph class="+ topic/ph pr-d/codeph ">EMBED</codeph> タグの <codeph class="+ topic/ph pr-d/codeph ">NAME</codeph> 属性または <codeph class="+ topic/ph pr-d/codeph ">OBJECT</codeph> タグの ID プロパティに使用した Flash オブジェクトの名前を指定します。SWF ファイルに "myMovie" という名前を付けている場合、JavaScript 関数 <codeph class="+ topic/ph pr-d/codeph ">myMovie_DoFScommand</codeph> が呼び出されます。 </p>
 
 <p class="- topic/p ">前述のように、SWF ファイルを含む Web ページでは、<codeph class="+ topic/ph pr-d/codeph ">allowScriptAccess</codeph> 属性を設定することで、SWF ファイルによるその Web ページへのアクセスを許可または拒否します。この属性は、SWF ファイルが埋め込まれる HTML コード内で設定します。例えば、Internet Explorer の <codeph class="+ topic/ph pr-d/codeph ">PARAM</codeph> タグ内や、Netscape の <codeph class="+ topic/ph pr-d/codeph ">EMBED</codeph> タグ内で設定します。 </p>
 
 <p class="- topic/p ">ブラウザーで実行される Flash Player 10 以降では、このメソッドをプログラムで使用してポップアップウィンドウを開く方法は有効でない場合があります。ブラウザー（およびブラウザーの設定）によってはポップアップウィンドウがブロックされる場合があり、すべてのポップアップウィンドウが表示される保証はありません。ただし、ユーザー操作の直接の結果として実行されるコード（マウスのクリックやキー入力イベントのイベントハンドラーなど）に限っては、このクラスを使用してポップアップウィンドウを開く方法が有効です。</p>
 
 <p class="- topic/p ">シンタックス 3：<codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> 関数は、メッセージを Director (アドビ システムズ社の Macromedia Director) に送ることができます。これらのメッセージは、Lingo（Director のスクリプト言語）により、ストリング、イベント、実行可能 Lingo コードのいずれかと解釈されます。メッセージがストリングまたはイベントである場合、<codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> 関数からメッセージを受信するための Lingo コードを書き、Director 内でアクションを実行する必要があります。詳細については、<xref href="http://www.adobe.com/jp/support/director/" scope="external" class="- topic/xref ">www.adobe.com/jp/support/director/</xref> の Director サポートセンターを参照してください。</p>
 
 <p class="- topic/p ">シンタックス 4：ActiveX コントロールに対応した VisualBasic や Visual C++ などのプログラムでは、<codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> を使って、その環境のプログラミング言語で処理できる 2 つのストリングを含む VB イベントを送信できます。詳細については、<xref href="http://www.adobe.com/jp/support/flash/" scope="external" class="- topic/xref ">www.adobe.com/jp/support/flash/</xref> の Flash サポートセンターで "Flash メソッド" というキーワードを使用して検索してください。</p>
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>ExternalInterface クラスを使用すると、JavaScript と ActionScript（シンタックス 2）との間、または ActionScript と、VisualBasic や Visual C++ などの ActiveX コントロールに対応した他のプログラム（シンタックス 4）との間の通信機能が向上します。<codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> は、メッセージを Flash Player に送信するため（シンタックス 1）および Director に送信するために（シンタックス 3）引き続き使用する必要があります。</p>
 
 </apiDesc><example conref="examples\FSCommandExample.as" class="- topic/example "> <codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> を使用して Flash Player をフルスクリーンモードにし、拡大 / 縮小を許可しないようにする方法を示します。オレンジのボックスが <codeph class="+ topic/ph pr-d/codeph ">draw()</codeph> を使用してステージに追加されます。<codeph class="+ topic/ph pr-d/codeph ">draw()</codeph> では、<codeph class="+ topic/ph pr-d/codeph ">click</codeph> イベントリスナーに名前付き <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph> が追加されます。これは <codeph class="+ topic/ph pr-d/codeph ">click</codeph> イベントに応答して <codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> の別の呼び出しを使用して Flash Player に終了を指示します。
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">メモ : </b>この例は、Web ブラウザーではなく、スタンドアローン Flash Player で実行する必要があります。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.system.fscommand;
    import flash.events.MouseEvent;

    public class FSCommandExample extends Sprite {
        private var bgColor:uint = 0xFFCC00;
        private var size:uint = 100;

        public function FSCommandExample() {
            fscommand("fullscreen", "true");
            fscommand("allowscale", "false");
            draw();
        }

        private function clickHandler(event:MouseEvent):void {
            fscommand("quit");
            trace("clickHandler");
        }

        private function draw():void {
            var child:Sprite = new Sprite();
            child.graphics.beginFill(bgColor);
            child.graphics.drawRect(0, 0, size, size);
            child.graphics.endFill();
            child.buttonMode = true;
            addEventListener(MouseEvent.CLICK, clickHandler);

            var label:TextField = new TextField();
            label.text = "quit";
            label.selectable = false;
            label.mouseEnabled = false;
            child.addChild(label);

            addChild(child);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication</linktext></link></related-links></apiOperation><apiClassifier languages="" id="flash.system:IME" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">IME</apiName><shortdesc class="- topic/shortdesc ">
 IME クラスを使用すると、クライアントコンピューターで実行されている Flash ランタイムアプリケーションで、オペレーティングシステムの IME を直接操作できます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">オペレーティングシステムの IME を直接操作できます。
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 IME クラスを使用すると、クライアントコンピューターで実行されている Flash ランタイムアプリケーションで、オペレーティングシステムの IME を直接操作できます。IME がインストールされているかどうか、IME が現在有効になっているかどうかおよびどの IME が有効になっているかを調べることができます。アプリケーションで IME を無効または有効にすることができます。また、オペレーティングシステムによっては、その他の限られた機能を使用できます。
 
 
 <p class="- topic/p ">AIR プロファイルのサポート：<i class="+ topic/ph hi-d/i "/>この機能はデスクトップオペレーティングシステムではサポートされますが、すべてのモバイルデバイスではサポートされませんまた、テレビ用 AIR デバイスでもサポートされません。<codeph class="+ topic/ph pr-d/codeph ">IME.isSupported</codeph> プロパティを使用して、サポートされているかどうかを実行時にテストすることができます。複数のプロファイル間での API サポートについて詳しくは、<xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">AIR プロファイルのサポート</xref>を参照してください。</p>
 
 <p class="- topic/p ">IME を使用すると、中国語、日本語、韓国語といったマルチバイトの言語で ASCII 以外の文字を入力できるようになります。IME の使用方法の詳細については、アプリケーションの開発対象である OS のマニュアルを参照してください。追加情報については、次の Web サイトを参照してください。
 <ul class="- topic/ul "><li class="- topic/li "><xref href="http://www.microsoft.com/globaldev/default.mspx" scope="external" class="- topic/xref ">http://www.microsoft.com/globaldev/default.mspx</xref></li><li class="- topic/li "><xref href="http://developer.apple.com/documentation/" scope="external" class="- topic/xref ">http://developer.apple.com/documentation/</xref></li><li class="- topic/li "><xref href="http://java.sun.com" scope="external" class="- topic/xref ">http://java.sun.com</xref></li></ul>
  </p>
 
 <p class="- topic/p ">IME がユーザーのコンピューターでアクティブではない場合、IME のメソッドまたはプロパティの呼び出しは、<codeph class="+ topic/ph pr-d/codeph ">Capabilities.hasIME</codeph> を除き、失敗します。IME を手動でアクティブにすると、それ以降の IME のメソッドまたはプロパティの ActionScript 呼び出しは、意図したとおりに動作します。例えば、日本語 IME を使用する場合、IME のメソッドまたはプロパティを呼び出す前にアクティブにする必要があります。</p>
 
 <p class="- topic/p ">次の表に、このクラスのプラットフォーム別の対応状況を示します。</p>
 
 
 <adobetable class="innertable"><tgroup cols="4" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">機能</entry><entry class="- topic/entry ">Windows</entry><entry class="- topic/entry ">Mac OSX</entry><entry class="- topic/entry ">Linux</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry ">IME がインストールされているかどうかの確認 <codeph class="+ topic/ph pr-d/codeph ">Capabilities.hasIME</codeph></entry><entry class="- topic/entry ">可</entry><entry class="- topic/entry ">可</entry><entry class="- topic/entry ">可</entry></row><row class="- topic/row "><entry class="- topic/entry ">IME のオン / オフ <codeph class="+ topic/ph pr-d/codeph ">IME.enabled</codeph></entry><entry class="- topic/entry ">可</entry><entry class="- topic/entry ">可</entry><entry class="- topic/entry ">可</entry></row><row class="- topic/row "><entry class="- topic/entry ">IME のオン / オフの確認 <codeph class="+ topic/ph pr-d/codeph ">IME.enabled</codeph></entry><entry class="- topic/entry ">可</entry><entry class="- topic/entry ">可</entry><entry class="- topic/entry ">可</entry></row><row class="- topic/row "><entry class="- topic/entry ">IME 変換モードの取得または設定 <codeph class="+ topic/ph pr-d/codeph ">IME.conversionMode</codeph></entry><entry class="- topic/entry ">可</entry><entry class="- topic/entry ">可 ~~~~</entry><entry class="- topic/entry ">不可</entry></row><row class="- topic/row "><entry class="- topic/entry ">変換対象ストリングの IME への送信 <codeph class="+ topic/ph pr-d/codeph ">IME.setCompositionString()</codeph></entry><entry class="- topic/entry ">可 ~~</entry><entry class="- topic/entry ">不可</entry><entry class="- topic/entry ">不可</entry></row><row class="- topic/row "><entry class="- topic/entry ">IME からの変換前のストリングの取得 <codeph class="+ topic/ph pr-d/codeph ">System.ime.addEventListener()</codeph></entry><entry class="- topic/entry ">可 ~~</entry><entry class="- topic/entry ">不可</entry><entry class="- topic/entry ">不可</entry></row><row class="- topic/row "><entry class="- topic/entry ">IME への変換要求の送信 <codeph class="+ topic/ph pr-d/codeph ">IME.doConversion()</codeph></entry><entry class="- topic/entry ">可 ~~</entry><entry class="- topic/entry ">不可</entry><entry class="- topic/entry ">不可</entry></row></tbody></tgroup></adobetable>
 
 <p class="- topic/p ">~~ 一部の Windows IME では、上記のうち一部サポートしていない操作があります。すべての操作をサポートしている IME は、日本語 IME のみです。</p>
 
 <p class="- topic/p ">~~~~ Macintosh の場合は、日本語 IME でのみこれらのメソッドがサポートされており、サードパーティー製の IME ではサポートされていません。</p>
 <p class="- topic/p ">このクラスの ActionScript 3.0 バージョンは Macintosh Classic をサポートしていません。</p>
 
 </apiDesc></apiClassifierDetail><adobeApiEvent id="flash.system:IME_flash.events.IMEEvent.IME_COMPOSITION_imeComposition" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">imeComposition</apiName><shortdesc class="- topic/shortdesc ">
 ユーザーが IME 入力を完了し、読み取りストリングが使用可能になったときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IMEEvent.IME_COMPOSITION</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IMEEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ユーザーが IME 入力を完了し、読み取りストリングが使用可能になったときに送出されます。IME は、通常、日本語、中国語、韓国語など、表音文字ではなく表意文字を持つ言語のテキストを入力するために使用されます。
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.system:IME:compositionAbandoned" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">compositionAbandoned</apiName><shortdesc class="- topic/shortdesc ">
	  進行中の入力はすべてランタイムによって破棄されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	  進行中の入力はすべてランタイムによって破棄されます。入力領域の外側をユーザーがクリックしたとき、またはフォーカスがあるインタラクティブオブジェクトが破棄されたかリセットされたときに、このメソッドを呼び出します。ランタイムは、クライアントで <codeph class="+ topic/ph pr-d/codeph ">confirmComposition()</codeph> を呼び出すことによって、入力を確定します。さらに、ランタイムは IME をリセットして、入力が破棄されたことをオペレーティングシステムに通知します。 
	   
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:IME:compositionSelectionChanged" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">compositionSelectionChanged</apiName><shortdesc class="- topic/shortdesc ">
	  入力内の選択範囲が対話的またはプログラムによって更新されたときに、このメソッドを呼び出します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">start</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">選択範囲の開始位置のオフセットをバイト単位で指定します。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">end</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">選択範囲の終了位置のオフセットをバイト単位で指定します。
	   
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	  入力内の選択範囲が対話的またはプログラムによって更新されたときに、このメソッドを呼び出します。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:IME:doConversion" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">doConversion</apiName><shortdesc class="- topic/shortdesc ">
	 現在の入力ストリングの第 1 候補を選択するように IME に指示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">呼び出しが成功しませんでした。
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 現在の入力ストリングの第 1 候補を選択するように IME に指示します。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:IME:setCompositionString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setCompositionString</apiName><shortdesc class="- topic/shortdesc ">
	 IME への入力ストリングを設定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Need some examples of valid values for the param composition.
	 </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">呼び出しが成功しませんでした。
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">composition</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">IME に送るストリングです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 IME への入力ストリングを設定します。このストリングが設定されると、ユーザーは IME 候補を選択してから、現在フォーカスのあるテキストフィールドの結果を確定できます。
	 <p class="- topic/p ">どのテキストフィールドにもフォーカスがない場合、このメソッドは失敗し、エラーをスローします。</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.system:IME:conversionMode:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">conversionMode</apiName><shortdesc class="- topic/shortdesc ">
	 現在の IME の変換モードです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">設定試行が成功しませんでした。
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 現在の IME の変換モードです。変換モードを示す、次の IME モードストリング定数を指定できます。
	 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ALPHANUMERIC_FULL</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ALPHANUMERIC_HALF</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">CHINESE</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">JAPANESE_HIRAGANA</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">JAPANESE_KATAKANA_FULL</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">JAPANESE_KATAKANA_HALF</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">KOREAN</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">UNKNOWN</codeph>（読み取り専用の値であり、設定できません）</li></ul>
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IMEConversionMode/ALPHANUMERIC_FULL" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IMEConversionMode.ALPHANUMERIC_FULL</linktext></link><link href="flash.system.xml#IMEConversionMode/ALPHANUMERIC_HALF" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IMEConversionMode.ALPHANUMERIC_HALF</linktext></link><link href="flash.system.xml#IMEConversionMode/CHINESE" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IMEConversionMode.CHINESE</linktext></link><link href="flash.system.xml#IMEConversionMode/JAPANESE_HIRAGANA" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IMEConversionMode.JAPANESE_HIRAGANA</linktext></link><link href="flash.system.xml#IMEConversionMode/JAPANESE_KATAKANA_FULL" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IMEConversionMode.JAPANESE_KATAKANA_FULL</linktext></link><link href="flash.system.xml#IMEConversionMode/JAPANESE_KATAKANA_HALF" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IMEConversionMode.JAPANESE_KATAKANA_HALF</linktext></link><link href="flash.system.xml#IMEConversionMode/KOREAN" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IMEConversionMode.KOREAN</linktext></link><link href="flash.system.xml#IMEConversionMode/UNKNOWN" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IMEConversionMode.UNKNOWN</linktext></link></related-links></apiValue><apiValue id="flash.system:IME:enabled:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">enabled</apiName><shortdesc class="- topic/shortdesc ">
	 システム IME が有効になっているか（true）無効になっているか（false）を示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">設定試行が成功しませんでした。
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 システム IME が有効になっているか（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）無効になっているか（<codeph class="+ topic/ph pr-d/codeph ">false</codeph>）を示します。IME が有効であるときはマルチバイト入力になり、IME が無効であるときは英数入力になります。 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:IME:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
    現在のプラットフォームで IME クラスがサポートされている場合、isSupported プロパティは true に設定されます。サポートされていない場合は、false に設定されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    現在のプラットフォームで IME クラスがサポートされている場合、<codeph class="+ topic/ph pr-d/codeph ">isSupported</codeph> プロパティは <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定されます。サポートされていない場合は、<codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定されます。 
    
    
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:System" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">System</apiName><shortdesc class="- topic/shortdesc ">
 System クラスには、ローカル設定と操作に関連するプロパティが含まれています。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">System, System object, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 System クラスには、ローカル設定と操作に関連するプロパティが含まれています。これらのプロパティには、<ph class="- topic/ph ">カメラとマイクの設定、共有オブジェクトの操作、</ph>クリップボードの使用に関するものがあります。
 
 <p class="- topic/p ">追加のプロパティとメソッドが、flash.system パッケージ内のその他のクラス（Capabilities クラス、<ph class="- topic/ph ">IME クラス</ph>、Security クラス）にあります。</p>
 
 <p class="- topic/p ">このクラスには、静的なメソッドとプロパティのみが含まれています。System クラスの新しいインスタンスは作成できません。</p>
 
 </apiDesc><example conref="examples\SystemExample.as" class="- topic/example "> 次の例は、システムの合計メモリに関する情報をシステムクリップボードにコピーする方法を示しています。<codeph class="+ topic/ph pr-d/codeph ">System.setClipboard()</codeph> メソッドの呼び出し内で <codeph class="+ topic/ph pr-d/codeph ">System.totalMemory</codeph> の呼び出しを使用します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.system.System;

    public class SystemExample extends Sprite {
        public function SystemExample() {
            System.setClipboard("System.totalMemory: " + System.totalMemory);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security" class="- topic/link "><linktext class="- topic/linktext ">flash.system.Security</linktext></link><link href="flash.events.xml#IMEEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.IMEEvent</linktext></link></related-links><apiOperation id="flash.system:System:disposeXML" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">disposeXML</apiName><shortdesc class="- topic/shortdesc ">
	 指定した XML オブジェクトを即時にガベージコレクションで処理できるようにします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">node</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ガベージコレクションで処理できるようにする XML 参照です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 指定した XML オブジェクトを即時にガベージコレクションで処理できるようにします。このメソッドを使用すると、指定した XML ノードに対するすべてのノード間の親接続と子接続が削除されます。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:System:exit" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">exit</apiName><shortdesc class="- topic/shortdesc "> 
     Flash Player を閉じます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.115.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">System, System.exit(), exit()             
	 
	 </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">code</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">オペレーティングシステムに渡す値です。通常、処理が正常に終了すると、値は 0 になります。
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
     Flash Player を閉じます。
	 
     <p class="- topic/p "><i class="+ topic/ph hi-d/i ">スタンドアローン Flash Player デバッグ版のみ。</i></p> 
	 
     <p class="- topic/p ">AIR アプリケーションでは、アプリケーションを終了するために <codeph class="+ topic/ph pr-d/codeph ">NativeApplication.exit()</codeph> メソッドを呼び出す必要があります。</p> 
	 
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/exit()" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication.exit()</linktext></link></related-links></apiOperation><apiOperation id="flash.system:System:gc" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">gc</apiName><shortdesc class="- topic/shortdesc ">
     ガベージコレクションプロセスを強制します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.115.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ガベージコレクションプロセスを強制します。
	 
     <p class="- topic/p "><ph class="- topic/ph ">Flash Player デバッグ版および AIR アプリケーションのみ。<i class="+ topic/ph hi-d/i "/></ph>AIR アプリケーションでは、<codeph class="+ topic/ph pr-d/codeph ">System.gc()</codeph> メソッドは AIR Debug Launcher（ADL）で実行しているコンテンツ、またはインストールされているアプリケーションではアプリケーションセキュリティサンドボックスのコンテンツでのみ有効になります。</p>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:System:pause" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">pause</apiName><shortdesc class="- topic/shortdesc "> 
     Flash Player または AIR Debug Launcher（ADL）を一時停止します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.115.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">System, System.pause(), pause()   
	 
	 </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
     <ph class="- topic/ph ">Flash Player または</ph> AIR Debug Launcher（ADL）を一時停止します。 このメソッドを呼び出したときにアプリケーションで実行が続行されるのは、Socket イベントの配信だけです。
	 
     <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Flash Player デバッガー版または AIR Debug Launcher（ADL）のみに対応しています。</i></p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.system.xml#System/resume()" class="- topic/link "><linktext class="- topic/linktext ">resume()</linktext></link></related-links></apiOperation><apiOperation id="flash.system:System:resume" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">resume</apiName><shortdesc class="- topic/shortdesc "> 
     System.pause() を呼び出した後、アプリケーションを再開します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.115.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">System, System.resume(), resume()        
	 
	 </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
     <codeph class="+ topic/ph pr-d/codeph ">System.pause()</codeph> を呼び出した後、アプリケーションを再開します。
	 
     <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Flash Player デバッガー版または AIR Debug Launcher（ADL）のみに対応しています。</i></p>  
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.system.xml#System/pause()" class="- topic/link "><linktext class="- topic/linktext ">pause()</linktext></link></related-links></apiOperation><apiOperation id="flash.system:System:setClipboard" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setClipboard</apiName><shortdesc class="- topic/shortdesc ">
	 クリップボードの内容を、指定されたテキストストリングで置き換えます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">System.setClipboard, setClipboard
	  
	 </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">string</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">システムクリップボードの現在の内容（存在する場合）を置き換えるプレーンテキストストリング文字です。
	 
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">クリップボードの内容を、指定されたテキストストリングで置き換えます。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 クリップボードの内容を、指定されたテキストストリングで置き換えます。このメソッドは、キー入力や入力デバイスのクリックなどのユーザーイベントに応じて呼び出されたときに、任意のセキュリティコンテキストで動作します。
	 
	 <p class="- topic/p ">このメソッドは、Flash Player 9 で実行されている SWF コンテンツに提供されます。クリップボードへのストリング内容の追加のみが許可されます。</p> 
	 
	 <p class="- topic/p ">Flash Player 10 のコンテンツと AIR アプリケーションのアプリケーションセキュリティサンドボックスのコンテンツは、<codeph class="+ topic/ph pr-d/codeph ">Clipboard.setData()</codeph> メソッドを呼び出すことができます。</p>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#Clipboard" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.Clipboard</linktext></link></related-links></apiOperation><apiValue id="flash.system:System:freeMemory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">freeMemory</apiName><shortdesc class="- topic/shortdesc ">
	 Adobe&amp;#xAE; Flash&amp;#xAE; Player または Adobe&amp;#xAE; AIR&amp;#xAE; に割り当てられているが現在使用されていないメモリ量（バイト単位）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <ph class="- topic/ph ">Adobe<sup class="+ topic/ph hi-d/sup ">®</sup> Flash<sup class="+ topic/ph hi-d/sup ">®</sup> Player または </ph>Adobe<sup class="+ topic/ph hi-d/sup ">®</sup> AIR<sup class="+ topic/ph hi-d/sup ">®</sup> に割り当てられているが現在使用されていないメモリ量（バイト単位）です。この割り当て済みメモリの未使用領域（<codeph class="+ topic/ph pr-d/codeph ">System.totalMemory</codeph>）は、ガベージコレクションが行われると変動します。このプロパティを使用して、ガベージコレクションを監視します。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#System/privateMemory" class="- topic/link "><linktext class="- topic/linktext ">privateMemory</linktext></link><link href="flash.system.xml#System/totalMemory" class="- topic/link "><linktext class="- topic/linktext ">totalMemory</linktext></link><link href="flash.system.xml#System/totalMemoryNumber" class="- topic/link "><linktext class="- topic/linktext ">totalMemoryNumber</linktext></link></related-links></apiValue><apiValue id="flash.system:System:ime:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ime</apiName><shortdesc class="- topic/shortdesc ">
	 現在インストールされているシステムの IME です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.system:IME</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 現在インストールされているシステムの IME です。imeComposition イベントに登録するには、このインスタンスで <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> を呼び出します。
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IMEConversionMode" class="- topic/link "><linktext class="- topic/linktext ">IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:System:privateMemory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">privateMemory</apiName><shortdesc class="- topic/shortdesc ">
	 アプリケーションで使用されるメモリ量の合計（バイト単位）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 アプリケーションで使用されるメモリ量の合計（バイト単位）です。これは、プロセス全体の常駐プライベートメモリの量です。
	 
	 <p class="- topic/p ">AIR 開発者は、このプロパティを使用してアプリケーション全体のメモリ消費量を特定します。</p>
	 
	 <p class="- topic/p ">Flash Player の場合は、Web ブラウザーなどのコンテナアプリケーションで使用されるメモリも含まれます。</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#System/freeMemory" class="- topic/link "><linktext class="- topic/linktext ">freeMemory</linktext></link><link href="flash.system.xml#System/totalMemory" class="- topic/link "><linktext class="- topic/linktext ">totalMemory</linktext></link><link href="flash.system.xml#System/totalMemoryNumber" class="- topic/link "><linktext class="- topic/linktext ">totalMemoryNumber</linktext></link></related-links></apiValue><apiValue id="flash.system:System:totalMemoryNumber:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">totalMemoryNumber</apiName><shortdesc class="- topic/shortdesc ">
	Flash Player または AIR によって直接割り当てられている現在使用中のメモリ量（バイト単位）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<ph class="- topic/ph ">Flash Player</ph> または AIR によって直接割り当てられている現在使用中のメモリ量（バイト単位）です。  
	
	<p class="- topic/p ">このプロパティは、int 型の <codeph class="+ topic/ph pr-d/codeph ">System.totalMemory</codeph> プロパティよりも大きい値を許容する Number 型として表現されます。</p>
	
	<p class="- topic/p ">このプロパティは、Adobe AIR アプリケーション、<ph class="- topic/ph ">または Flash Player コンテンツを含むアプリケーション（ブラウザーなど）</ph>によって使用されるすべての<i class="+ topic/ph hi-d/i "/>メモリを返すわけではありません。<ph class="- topic/ph ">ブラウザー</ph>またはオペレーティングシステムは、これ以外にメモリを消費する可能性があります。<codeph class="+ topic/ph pr-d/codeph ">System.privateMemory</codeph> プロパティは、アプリケーションによって使用される<i class="+ topic/ph hi-d/i ">すべて</i>のメモリを反映します。</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#System/freeMemory" class="- topic/link "><linktext class="- topic/linktext ">freeMemory</linktext></link><link href="flash.system.xml#System/privateMemory" class="- topic/link "><linktext class="- topic/linktext ">privateMemory</linktext></link><link href="flash.system.xml#System/totalMemory" class="- topic/link "><linktext class="- topic/linktext ">totalMemory</linktext></link></related-links></apiValue><apiValue id="flash.system:System:totalMemory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">totalMemory</apiName><shortdesc class="- topic/shortdesc ">
	Flash Player または AIR によって直接割り当てられている現在使用中のメモリ量（バイト単位）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<ph class="- topic/ph ">Flash Player</ph> または AIR によって直接割り当てられている現在使用中のメモリ量（バイト単位）です。  
	
	<p class="- topic/p ">このプロパティは、Adobe AIR アプリケーション、<ph class="- topic/ph ">または Flash Player コンテンツを含むアプリケーション（ブラウザーなど）</ph>によって使用されるすべての<i class="+ topic/ph hi-d/i "/>メモリを返すわけではありません。<ph class="- topic/ph ">ブラウザー</ph>またはオペレーティングシステムは、これ以外にメモリを消費する可能性があります。<codeph class="+ topic/ph pr-d/codeph ">System.privateMemory</codeph> プロパティは、アプリケーションによって使用される<i class="+ topic/ph hi-d/i ">すべて</i>のメモリを反映します。</p>
	
	<p class="- topic/p ">割り当てられたメモリ量が、uint オブジェクトの最大値（<codeph class="+ topic/ph pr-d/codeph ">uint.MAX_VALUE</codeph>、または 4,294,967,295）よりも大きい場合、このプロパティは 0 に設定されます。<codeph class="+ topic/ph pr-d/codeph ">System.totalMemoryNumber</codeph> プロパティでは、より大きい値が許容されます。</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#System/freeMemory" class="- topic/link "><linktext class="- topic/linktext ">freeMemory</linktext></link><link href="flash.system.xml#System/privateMemory" class="- topic/link "><linktext class="- topic/linktext ">privateMemory</linktext></link><link href="flash.system.xml#System/totalMemoryNumber" class="- topic/link "><linktext class="- topic/linktext ">totalMemoryNumber</linktext></link></related-links></apiValue><apiValue id="flash.system:System:useCodePage:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">useCodePage</apiName><shortdesc class="- topic/shortdesc ">
	 外部テキストファイルを解釈するときにどのコードページを使用するかを決定するブール値です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">System.useCodepage, useCodepage, Unicode, code page
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 外部テキストファイルを解釈するときにどのコードページを使用するかを決定するブール値です。 このプロパティを <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定すると、外部テキストファイルは Unicode として解釈されます。 これらのファイルは、保存する際に Unicode でエンコードする必要があります。このプロパティを <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定すると、アプリケーションを実行するオペレーティングシステムの通常のコードページを使用して外部テキストファイルが解釈されます。 <codeph class="+ topic/ph pr-d/codeph ">useCodePage</codeph> のデフォルト値は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> です。
	 
	 <p class="- topic/p ">（<codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph>、URLLoader クラスまたは URLStream を使用して）外部ファイルとしてロードするテキストを Unicode として認識するには、そのファイルを Unicode として保存しておく必要があります。 外部ファイルを Unicode でエンコードするには、Unicode をサポートするアプリケーション（Windows のメモ帳など）でファイルを保存します。</p>
	 
	 <p class="- topic/p ">Unicode でエンコードされていない外部テキストファイルをロードする際には、<codeph class="+ topic/ph pr-d/codeph ">useCodePage</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定してください。次の行を、データをロードしているファイルのコードの最初の行として追加します（Flash Professional の場合は、最初のフレームに追加します）。</p>
	 
	 <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph ">System.useCodePage = true;</codeph></pre>
	 
	 <p class="- topic/p ">このコードがあると、外部テキストは、オペレーティングシステムの通常のコードページを使用して解釈されます。 例えば、一般に、英語の Windows オペレーティングシステムでは CP1252 が、日本語のオペレーティングシステムでは Shift-JIS が使用されます。</p> 
	 
	 <p class="- topic/p "><ph class="- topic/ph ">Flash Player 6 以降で <codeph class="+ topic/ph pr-d/codeph ">useCodePage</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定すると、テキストは Flash Player 5 の場合と同様に扱われます。Flash Player 5 では、すべてのテキストは、Flash Player を実行するオペレーティングシステムの通常のコードページを使用して解釈されていました。</ph></p>
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">useCodePage</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定した場合、外部テキストファイル内で使用されている文字がアプリケーションを実行するオペレーティングシステムの通常のコードページに含まれていないと、そのテキストは表示されません。たとえば、中国語を含む外部テキストファイルをロードする場合、CP1252 コードページを使用するシステムでは、これらの文字を表示できません。CP1252 コードページには中国語が含まれていないためです。</p>
	 
	 <p class="- topic/p ">アプリケーションで使用する外部テキストファイルをすべてのプラットフォームのユーザーが表示できるようにするには、すべての外部テキストファイルを Unicode でエンコードし、<codeph class="+ topic/ph pr-d/codeph ">useCodePage</codeph> を <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定します。 これにより、アプリケーション（<ph class="- topic/ph ">Flash Player 6 以降または AIR </ph>）でテキストが Unicode として解釈されます。</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.load()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:SecurityDomain" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SecurityDomain</apiName><shortdesc class="- topic/shortdesc ">
	SecurityDomain クラスは、現在のセキュリティ "サンドボックス" を表し、セキュリティドメインとも呼ばれます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	SecurityDomain クラスは、現在のセキュリティ "サンドボックス" を表し、セキュリティドメインとも呼ばれます。このクラスのインスタンスを <codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> に渡すことによって、ロードされたメディアを特定のサンドボックスに配置することを要求できます。
	</apiDesc></apiClassifierDetail><apiValue id="flash.system:SecurityDomain:currentDomain:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">currentDomain</apiName><shortdesc class="- topic/shortdesc ">
		現在のセキュリティドメインを取得します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.system:SecurityDomain</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		現在のセキュリティドメインを取得します。 
		
		</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.loadBytes()</linktext></link><link href="flash.system.xml#LoaderContext" class="- topic/link "><linktext class="- topic/linktext ">flash.system.LoaderContext</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:SystemUpdater" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SystemUpdater</apiName><shortdesc class="- topic/shortdesc ">
	 
	 SystemUpdater クラスを使用すると、Flash Access 用の DRM モジュールなどの Flash Player のモジュールや、Flash Player 自体を更新できます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 
	 SystemUpdater クラスを使用すると、Flash Access 用の DRM モジュールなどの Flash Player のモジュールや、Flash Player 自体を更新できます。更新可能なモジュールは、SystemUpdaterType クラスにリストされています。
	 
	 <p class="- topic/p ">Flash Player では、NetStatusEvent イベントの送出によって、Flash Access モジュールの更新が必要であることが示されます。イベントには、<codeph class="+ topic/ph pr-d/codeph ">"DRM.UpdateNeeded"</codeph> の値が設定された <codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティがあります。Flash Access モジュールに対する更新では、ユーザーの承諾は必要ありません。イベントを監視し、<codeph class="+ topic/ph pr-d/codeph ">update("DRM")</codeph> を呼び出して、更新を開始します。</p>
	 
	 <p class="- topic/p ">Flash Player では、いくつかの有効な <codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティ値が指定された StatusEvent イベントを送出することによって、プレーヤーの更新が必要であることが示されます（<codeph class="+ topic/ph pr-d/codeph ">status</codeph> を参照)。プレーヤーに対する更新では、ユーザーの承諾は必要ありません。イベントを監視し、更新するオプションをユーザーに表示します。ユーザーは、ユーザーインターフェイス内のボタンをクリックするなどして、実際の更新に対して同意して更新を開始する必要があります。次に、<codeph class="+ topic/ph pr-d/codeph ">update("SYSTEM")</codeph> を呼び出すことによって、ActionScript 内で直接プレーヤーの更新を開始できます。</p>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>SystemUpdater API はすべてのデスクトッププラットフォームでサポートされます。</p>
	 
	 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.system.xml#SystemUpdaterType" class="- topic/link "><linktext class="- topic/linktext ">flash.system.SystemUpdaterType</linktext></link></related-links><adobeApiEvent id="flash.system:SystemUpdater_flash.events.Event.CANCEL_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
	 プレーヤー自体の更新がユーザーによってキャンセルされたときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CANCEL</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 プレーヤー自体の更新がユーザーによってキャンセルされたときに送出されます。<codeph class="+ topic/ph pr-d/codeph ">SystemUpdaterType.SYSTEM</codeph> 型の更新が要求され、ユーザーが更新をキャンセルした場合にのみ、このイベントは送出されます。
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.system:SystemUpdater_flash.events.Event.COMPLETE_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
	 更新が完了したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 更新が完了したときに送出されます。
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.system:SystemUpdater_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><shortdesc class="- topic/shortdesc ">
	 セキュリティエラーが発生したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 セキュリティエラーが発生したときに送出されます。例えば、セキュリティポリシーによって更新が許可されていない場合にプレーヤーが更新を試みると、このイベントを送出する可能性があるセキュリティエラーが発生します。
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.system:SystemUpdater_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
	 I/O エラーが発生したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 I/O エラーが発生したときに送出されます。例えば、このイベントを発生させるエラーの 1 つに、インターネット接続の切断があります。
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.system:SystemUpdater_flash.events.ProgressEvent.PROGRESS_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><shortdesc class="- topic/shortdesc ">
	 ダウンロードの進捗状況を示すために送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ダウンロードの進捗状況を示すために送出されます。このイベントは、Loader クラスと URLLoader クラスの <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> イベントと類似しています。
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.system:SystemUpdater_flash.events.StatusEvent.STATUS_status" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">status</apiName><shortdesc class="- topic/shortdesc ">
	  更新に失敗したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.StatusEvent.STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.StatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	  更新に失敗したときに送出されます。次のいずれかの理由により、更新に失敗することがあります。
	  <p class="- topic/p "><ul class="- topic/ul "><li class="- topic/li ">呼び出し元が、サポートされていないプラットフォーム上またはアーキテクチャ上で実行されています。この場合、<codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティの値は "DRM.UpdateFailedNotSupported" であり、<codeph class="+ topic/ph pr-d/codeph ">level</codeph> プロパティの値は "error" です。</li><li class="- topic/li ">要求された更新パッケージが、サーバー上に見つかりません。この場合、<codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティの値は "DRM.UpdateFailedNotCurrentlyAvailable" であり、<codeph class="+ topic/ph pr-d/codeph ">level</codeph> プロパティの値は "error" です。</li><li class="- topic/li ">Flash Access モジュールがインストールされていません。このエラーは、NetStatusEvent によって送出される "DRM.UpdateNeeded" コードに似ています。ただし、この場合は、Flash Player のバージョンが新しいものから先にダウンロードする必要があります。この場合、<codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティの値は "DRM.UpdateNeededButIncompatible" であり、<codeph class="+ topic/ph pr-d/codeph ">level</codeph> プロパティの値は "error" です。Flash Player の更新を実行するには、<codeph class="+ topic/ph pr-d/codeph ">SystemUpdater.update(SystemUpdaterType.SYSTEM)</codeph> を呼び出します。</li><li class="- topic/li ">新しい DRM モジュールをダウンロードできませんでした。この場合、<codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティの値は "DRM.UpdateFailed" であり、<codeph class="+ topic/ph pr-d/codeph ">level</codeph> プロパティの値は "error" です。</li></ul></p>
	  
	  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.system:SystemUpdater_flash.events.Event.OPEN_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><shortdesc class="- topic/shortdesc ">
	 更新を開始したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.OPEN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 更新を開始したときに送出されます。更新は、'complete' イベントが送信されたとき、または IOErrorEvent、SecurityErrorEvent、あるいは StatusEvent が送信されたときに完了します。
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.system:SystemUpdater:SystemUpdater" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SystemUpdater</apiName><shortdesc class="- topic/shortdesc ">
		 コンストラクターです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 コンストラクターです。
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.system:SystemUpdater:cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
		アクティブな更新をキャンセルします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		アクティブな更新をキャンセルします。
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:SystemUpdater:update" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">update</apiName><shortdesc class="- topic/shortdesc ">
		指定されたタイプの更新を開始します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		指定されたタイプの更新を開始します。更新のタイプは、SystemUpdaterType クラスで定義されているストリング定数の 1 つです。すべてのブラウザーで、一度に 1 つの更新だけが許可されます。
		<p class="- topic/p ">更新が開始された後は、このクラスで定義されているイベントを監視します。次のイベントは更新の終了を示し、<codeph class="+ topic/ph pr-d/codeph ">update()</codeph> 関数の呼び出しと同様に、新しい更新を許可するか更新の試行を続行します。</p>
		<p class="- topic/p "><ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">complete</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">cancel</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">securityError</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ioError</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">status</codeph></li></ul></p>
		
		</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.system.xml#SystemUpdaterType" class="- topic/link "><linktext class="- topic/linktext ">flash.system.SystemUpdaterType</linktext></link></related-links></apiOperation></apiClassifier></apiPackage>