<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="flash.net" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiPackage/apiPackage "><apiName class="- topic/title reference/title apiRef/apiName ">flash.net</apiName><apiDetail class="- topic/body reference/refbody apiRef/apiDetail "/><apiClassifier languages="" id="flash.net:XMLSocket" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">XMLSocket</apiName><shortdesc class="- topic/shortdesc ">
 
 XMLSocket クラスはクライアントソケットを実装しており、Flash Player または AIR アプリケーションはこのソケットを使用して、IP アドレスまたはドメイン名で識別されるサーバーコンピューターと通信できます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLsocket, XMLsocket object, built-in class
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 
 XMLSocket クラスはクライアントソケットを実装しており、<ph class="- topic/ph ">Flash Player</ph> または AIR アプリケーションはこのソケットを使用して、IP アドレスまたはドメイン名で識別されるサーバーコンピューターと通信できます。 XMLSocket クラスは、リアルタイムのチャットシステムなど待ち時間を短くすることが求められるクライアント/サーバーアプリケーションに適しています。従来の HTTP ベースチャットソリューションは頻繁にサーバーをポーリングし、HTTP 要求を使用して新しいメッセージをダウンロードします。それに対して、XMLSocket チャットソリューションはサーバーに対して開いた接続を維持するため、サーバーはクライアントから要求を受けずにただちに着信メッセージを送ることができます。XMLSocket クラスを使用するには、サーバーコンピューターは XMLSocket クラスで使用されるプロトコルに対応したデーモンを実行する必要があります。プロトコルの説明を次の一覧に示します。 
 <ul class="- topic/ul "><li class="- topic/li ">XML メッセージは、全二重 TCP/IP ストリームソケット接続を介して送られます。</li><li class="- topic/li ">個々の XML メッセージは完全な XML ドキュメントであり、ゼロ（0）バイトで終了します。</li><li class="- topic/li ">1 つの XMLSocket 接続を使用して送受信できる XML メッセージの数に制限はありません。</li></ul>
 
 <p class="- topic/p ">XMLSocket オブジェクトと通信するようにサーバーを設定すると、問題が発生する可能性があります。 アプリケーションがリアルタイムのインタラクティブ機能を必要としない場合は、XMLSocket クラスの代わりに、URLLoader クラスを使用します。 </p>
 
 <p class="- topic/p ">XMLSocket クラスのメソッドを使用するには、まず <codeph class="+ topic/ph pr-d/codeph ">new XMLSocket</codeph> コンストラクターを使用して XMLSocket オブジェクトを作成します。</p>
 
 <p class="- topic/p ">ローカルファイルシステムのサンドボックス内の SWF ファイルはソケットを使用できません。</p>
      
  <p class="- topic/p "> ターゲットホスト上のソケットポリシーファイルで、SWF ファイルがソケット接続できるホストと、その接続ができるポートを指定します。<i class="+ topic/ph hi-d/i "/>Flash Player の最近のリリースでは、ソケットポリシーファイルに関するセキュリティ要件が以前より厳密になっています。Flash Player のすべてのバージョンで、ソケットポリシーファイルを使用することをお勧めします。環境によっては、ソケットポリシーファイルの使用が必須となっています。このため、XMLSocket オブジェクトを使用している場合は、必要に応じてターゲットホストがソケットポリシーファイルを提供するようにしてください。 </p>
 
  <p class="- topic/p ">次の一覧は、Flash Player の各バージョンにおけるソケットポリシーファイルの要件をまとめたものです。</p>
 
  <ul class="- topic/ul "><li class="- topic/li "> Flash Player 9.0.124.0 以降のバージョンでは、XMLSocket 接続にソケットポリシーファイルが必要です。つまり、接続しているポートには関係なく、ターゲットホスト上にソケットポリシーファイルが必要ということです。また、SWF ファイルを提供している同じホスト上のポートに接続している場合でも同様です。 </li><li class="- topic/li "> Flash Player 9.0.115.0 以前のバージョンでは、1024 未満のポートに接続するか、SWF ファイルを提供しているホスト以外のホストに接続するときは、ターゲットホスト上にソケットポリシーファイルが必要です。 </li><li class="- topic/li "> Flash Player 9.0.115.0 では、ソケットポリシーファイルが不要な場合でも、ターゲットホストがソケットポリシーファイルを提供していないときに Flash Debug Player を使うと警告が表示されます。 </li></ul>
 
 <p class="- topic/p ">ただし、Adobe AIR では、<codeph class="+ topic/ph pr-d/codeph ">アプリケーション</codeph>セキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p>
 
 <p class="- topic/p ">セキュリティについて詳しくは、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
 
 </apiDesc><example conref="examples\XMLSocketExample.as" class="- topic/example "> 次の例では、クラス XMLSocketExample を使用して、XMLSocket でデータを送信し、XMLSocket イベント時に情報をプリントします。ここでは以下の手順を実行します。
 <ol class="- topic/ol "><li class="- topic/li ">XMLSocketExample コンストラクターが <codeph class="+ topic/ph pr-d/codeph ">socket</codeph> という名前の XMLSocket インスタンスを作成し、<codeph class="+ topic/ph pr-d/codeph ">socket</codeph> を後述の <codeph class="+ topic/ph pr-d/codeph ">ConfigureListeners()</codeph> に渡します。次に XMLSocket の <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> メソッドを呼び出します。この呼び出しには、ホスト名 "localhost" とポート番号 <codeph class="+ topic/ph pr-d/codeph ">8080</codeph> を使用します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">configureListeners()</codeph>メソッドを呼び出して、サポートされる各 XMLSocket イベントのリスナーを追加します。
  <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">closeHandler()</codeph>：<codeph class="+ topic/ph pr-d/codeph ">close</codeph> イベントをリッスンします。このイベントはネットワーク接続が閉じられた後に送出されます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">connectHandler()</codeph>：<codeph class="+ topic/ph pr-d/codeph ">connect</codeph> イベントをリッスンします。このイベントはネットワーク接続が確立されたときに送出されます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">dataHandler()</codeph>：<codeph class="+ topic/ph pr-d/codeph ">data</codeph> イベントをリッスンします。このイベントは XMLSocket が新しいデータを受け取るたびに送出されます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">progressHandler()</codeph>：<codeph class="+ topic/ph pr-d/codeph ">progress</codeph> イベントをリッスンします。このイベントは <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> が呼び出されたとき、送信中に送出されます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">securityErrorHandler()</codeph>：<codeph class="+ topic/ph pr-d/codeph ">securityError</codeph> イベントをリッスンします。このイベントは、ローカルでの再生に関するセキュリティを誤って設定して、または 1024 より小さいポートを使用して、XMLSocket にアクセスしようとしたときに送出されます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ioErrorHandler()</codeph>：<codeph class="+ topic/ph pr-d/codeph ">ioError</codeph> イベントをリッスンします。このイベントはデータの送信または受信操作に失敗すると発生します。</li></ul></li></ol>
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>
 <ul class="- topic/ul "><li class="- topic/li ">「ローカルでの再生に関するセキュリティ」を「ネットワークにのみアクセスする」に設定して SWF ファイルをコンパイルする必要があります。</li><li class="- topic/li ">このコード例が動作するには、ポート 8080 を使用して、ドメイン名上で実行しているサーバーが必要です。</li><li class="- topic/li ">Flash Player 9.0.124.0 以降のバージョンを実行しているときは、ドメインからポート 8080 へのソケット接続を許可するソケットポリシーファイルをサーバー上に置く必要があります。ソケットポリシーファイルの提供については、Flash Player デベロッパーセンターのトピック<xref href="http://www.adobe.com/jp/devnet/flashplayer/articles/socket_policy_files.html" scope="external" class="- topic/xref ">ソケットポリシーファイルサーバーの設定</xref>を参照してください。</li></ul>
 </p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.XMLSocket;

    public class XMLSocketExample extends Sprite {
        private var hostName:String = "localhost";
        private var port:uint = 8080;
        private var socket:XMLSocket;

        public function XMLSocketExample() {
            socket = new XMLSocket();
            configureListeners(socket);
            if (hostName &amp;&amp; port) {
                socket.connect(hostName, port);
            }
        }

        public function send(data:Object):void {
            socket.send(data);
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CLOSE, closeHandler);
            dispatcher.addEventListener(Event.CONNECT, connectHandler);
            dispatcher.addEventListener(DataEvent.DATA, dataHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
        }

        private function closeHandler(event:Event):void {
            trace("closeHandler: " + event);
        }

        private function connectHandler(event:Event):void {
            trace("connectHandler: " + event);
        }

        private function dataHandler(event:DataEvent):void {
            trace("dataHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLLoader.load()</linktext></link><link href="flash.net.xml#URLLoader" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLLoader</linktext></link></related-links><adobeApiEvent id="flash.net:XMLSocket_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><shortdesc class="- topic/shortdesc ">
 XMLSocket.connect() メソッドの呼び出しによって、呼び出し元のセキュリティサンドボックスの外にあるサーバーや 1024 未満のポート番号に対して接続しようとしたときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">XMLSocket.connect()</codeph> メソッドの呼び出しによって、呼び出し元のセキュリティサンドボックスの外にあるサーバーや 1024 未満のポート番号に対して接続しようとしたときに送出されます。
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#XMLSocket/connect()" class="- topic/link "><linktext class="- topic/linktext ">XMLSocket.connect()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:XMLSocket_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 入出力エラーが発生して送信または受信操作が失敗したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 入出力エラーが発生して送信または受信操作が失敗したときに送出されます。 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:XMLSocket_flash.events.DataEvent.DATA_data" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><shortdesc class="- topic/shortdesc ">
 未処理のデータが送受信された後に送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.DataEvent.DATA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.DataEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 未処理のデータが送受信された後に送出されます。
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:XMLSocket_flash.events.Event.CONNECT_connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><shortdesc class="- topic/shortdesc ">
 XMLSocket.connect() メソッドの呼び出しが成功したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CONNECT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">XMLSocket.connect()</codeph> メソッドの呼び出しが成功した後に送出されます。
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:XMLSocket_flash.events.Event.CLOSE_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
 サーバーによりソケット接続が閉じられたときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 サーバーによりソケット接続が閉じられたときに送出されます。<codeph class="+ topic/ph pr-d/codeph ">close</codeph> イベントは、サーバーにより接続が閉じられたときのみ送出されます。<codeph class="+ topic/ph pr-d/codeph ">XMLSocket.close()</codeph> メソッドを呼び出しても送出されません。
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.net:XMLSocket:XMLSocket" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">XMLSocket</apiName><shortdesc class="- topic/shortdesc ">
    新しい XMLSocket オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">host</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">FQDN（完全修飾ドメイン名）、つまり <i class="+ topic/ph hi-d/i ">111.222.333.444</i> という形式の IP アドレスです。Flash Player 9.0.115.0 および AIR 1.0 以降では、rtmp://[2001:db8:ccc3:ffff:0:444d:555e:666f] などの IPv6 アドレスを指定できます。<codeph class="+ topic/ph pr-d/codeph ">null</codeph> を指定して、SWF ファイルが存在するホストサーバーに接続することもできます。呼び出し元の SWF ファイルが Web ブラウザー内で実行されている場合は、<codeph class="+ topic/ph pr-d/codeph ">host</codeph> が SWF ファイルと同じドメイン内に存在する必要があります。
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">port</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">接続の確立に使用するターゲットホスト上の TCP ポート番号です。Flash Player 9.0.124.0 以降のバージョンでは、ターゲットホストは、SWF ファイルを提供するホストから指定のポートへのソケット接続を許可するように指定した、ソケットポリシーファイルを提供する必要があります。以前のバージョンの Flash Player では、1024 番未満のポートに接続するか、SWF ファイルを提供しているホスト以外のホストに接続するときのみ、ソケットポリシーファイルが必要です。
    
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    新しい XMLSocket オブジェクトを作成します。 パラメーターを指定しないと、初期状態では未接続のソケットが作成されます。パラメーターを指定すると、指定したホストおよびポートへの接続が試行されます。
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b><b class="+ topic/ph hi-d/b ">パラメーターを指定せずに</b>コンストラクターフォームを使用し、さらにいずれかのイベントリスナーを追加し、<codeph class="+ topic/ph pr-d/codeph ">connect</codeph> メソッドを呼び出すことを強く推奨します（<codeph class="+ topic/ph pr-d/codeph ">ホスト</codeph>および<codeph class="+ topic/ph pr-d/codeph ">ポート</codeph>をパラメーターに指定する）。このシーケンスによって、すべてのイベントリスナーが正しく動作するようになります。</p>
    
    </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.net.xml#XMLSocket/connect()" class="- topic/link "><linktext class="- topic/linktext ">connect()</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:XMLSocket:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     XMLSocket オブジェクトで指定された接続を閉じます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">xmlsocket.close, close
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     XMLSocket オブジェクトで指定された接続を閉じます。<codeph class="+ topic/ph pr-d/codeph ">close</codeph> イベントは、サーバーにより接続が閉じられたときのみ送出されます。<codeph class="+ topic/ph pr-d/codeph ">close()</codeph> メソッドを呼び出しても送出されません。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#XMLSocket/connect()" class="- topic/link "><linktext class="- topic/linktext ">connect()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:XMLSocket:connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><shortdesc class="- topic/shortdesc ">
     指定された TCP ポートを使用して指定されたインターネットホストへの接続を確立します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">xmlsocket.connect, connect
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">信頼されていないローカルファイルはインターネットへの接続を許可されません。このファイルを local-with-networking または trusted として分類し直すことで、この制限を回避します。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">65535 より大きいソケットポートを指定することはできません。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">host</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">FQDN（完全修飾ドメイン名）、つまり <i class="+ topic/ph hi-d/i ">111.222.333.444</i> という形式の IP アドレスです。<codeph class="+ topic/ph pr-d/codeph ">null</codeph> を指定して、SWF ファイルが存在するホストサーバーに接続することもできます。呼び出し元ファイルが Web ブラウザー内で実行されている SWF ファイルである場合は、<codeph class="+ topic/ph pr-d/codeph ">host</codeph> がこのファイルと同じドメイン内に存在する必要があります。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">port</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">接続の確立に使用するターゲットホスト上の TCP ポート番号です。Flash Player 9.0.124.0 以降のバージョンでは、ターゲットホストは、SWF ファイルを提供するホストから指定のポートへのソケット接続を許可するように指定した、ソケットポリシーファイルを提供する必要があります。以前のバージョンの Flash Player では、1024 番未満のポートに接続するか、SWF ファイルを提供しているホスト以外のホストに接続するときのみ、ソケットポリシーファイルが必要です。
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定された TCP ポートを使用して指定されたインターネットホストへの接続を確立します。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">null</codeph> を <codeph class="+ topic/ph pr-d/codeph ">host</codeph> パラメーターに対して指定した場合は、<codeph class="+ topic/ph pr-d/codeph ">XMLSocket.connect()</codeph> を呼び出すファイルが存在するホストに接続します。例えば、www.adobe.com から呼び出し元ファイルをダウンロードした場合は、host パラメーターに <codeph class="+ topic/ph pr-d/codeph ">null</codeph> を指定することは、www.adobe.com に接続することを意味します。</p>
     
     
     <p class="- topic/p ">ファイルがこのメソッドを使用しないようにするには、SWF コンテンツを含む HTML ページに <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">object</codeph> タグおよび <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> タグ）を設定します。</p>
     
     <p class="- topic/p ">詳細については、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.events.xml#Event/CONNECT" class="- topic/link "><linktext class="- topic/linktext ">flash.events.Event.CONNECT</linktext></link></related-links><adobeApiEvent id="flash.net:XMLSocket:connect_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">接続操作で、呼び出し側のセキュリティサンドボックスの外部のホスト、またはソケットポリシーファイルが必要なポートに接続しようとしました。ターゲットホスト上でソケットポリシーファイルを使用することで、両方の問題を回避します。
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">接続操作で、呼び出し側のセキュリティサンドボックスの外部のホスト、またはソケットポリシーファイルが必要なポートに接続しようとしました。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:XMLSocket:connect_data" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:DataEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">未処理のデータを受信したときに送出されます。
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">未処理のデータを受信したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:XMLSocket:connect_connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ネットワーク接続が確立されたときに送出されます。 
      
      </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ネットワーク接続が確立されたときに送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:XMLSocket:send" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">send</apiName><shortdesc class="- topic/shortdesc ">
     object パラメーターで指定された XML オブジェクトまたはデータをストリングに変換し、その後ろにゼロ（0）バイトを付加してサーバーに転送します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">xmlsocket.send, send
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XMLSocket オブジェクトはサーバーに接続されません。
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">object</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">サーバーに転送する XML オブジェクトまたは他のデータです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">object</codeph> パラメーターで指定された XML オブジェクトまたはデータをストリングに変換し、その後ろにゼロ（0）バイトを付加してサーバーに転送します。<codeph class="+ topic/ph pr-d/codeph ">object</codeph> が XML オブジェクトである場合、ストリングは XML オブジェクトの XML テキスト表現です。送信操作は非同期です。つまり、転送処理はただちに終了しますが、データが転送されるのは、その後です。<codeph class="+ topic/ph pr-d/codeph ">XMLSocket.send()</codeph> メソッドは、データが正常に転送されたかどうかを示す値を返しません。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">XMLSocket.connect()</codeph> を使用して、XMLSocket オブジェクトをサーバーに接続していない場合、<codeph class="+ topic/ph pr-d/codeph ">XMLSocket.send()</codeph> 操作は失敗します。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#XMLSocket/connect()" class="- topic/link "><linktext class="- topic/linktext ">connect()</linktext></link></related-links></apiOperation><apiValue id="flash.net:XMLSocket:connected:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">connected</apiName><shortdesc class="- topic/shortdesc ">
     この XMLSocket オブジェクトが現在、接続されているかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     この XMLSocket オブジェクトが現在、接続されているかどうかを示します。<codeph class="+ topic/ph pr-d/codeph ">connect</codeph> イベントと <codeph class="+ topic/ph pr-d/codeph ">ioError</codeph> イベントに対して登録を行い、接続が成功したかどうかを調べることもできます。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#XMLSocket/event:connect" class="- topic/link "><linktext class="- topic/linktext ">connect</linktext></link><link href="flash.net.xml#XMLSocket/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">ioError</linktext></link></related-links></apiValue><apiValue id="flash.net:XMLSocket:timeout:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">timeout</apiName><shortdesc class="- topic/shortdesc ">
     接続までの待ち時間（ミリ秒数）を示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     接続までの待ち時間（ミリ秒数）を示します。
     
     <p class="- topic/p ">指定した時間内に接続できなかったときは、接続が失敗することになります。デフォルト値は 20,000 (20 秒) です。</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:IPVersion" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">IPVersion</apiName><shortdesc class="- topic/shortdesc ">
	 IPVersion クラスは、様々な IP アドレスのファミリーを表す定数を定義します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 IPVersion クラスは、様々な IP アドレスのファミリーを表す定数を定義します。
	 
 	 </apiDesc></apiClassifierDetail><apiValue id="flash.net:IPVersion:IPV4" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">IPV4</apiName><shortdesc class="- topic/shortdesc ">
		 インターネットプロトコルバージョン 4 （IPv4）アドレス。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">IPv4</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 インターネットプロトコルバージョン 4 （IPv4）アドレス。
		 
		 <p class="- topic/p ">IPv4 アドレスは、ActionScript ではドット区切りの 10 進数のストリングとして表されます（例：<codeph class="+ topic/ph pr-d/codeph ">"192.0.2.0"</codeph>）。</p> 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:IPVersion:IPV6" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">IPV6</apiName><shortdesc class="- topic/shortdesc ">
		 インターネットプロトコルバージョン 6 （IPv6）アドレス。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">IPv6</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 インターネットプロトコルバージョン 6 （IPv6）アドレス。
		 
		 <p class="- topic/p ">IPv6 アドレスは、ActionScript では角括弧で囲まれたコロン区切りの 16 進数のストリングとして表されます（例：<codeph class="+ topic/ph pr-d/codeph ">"[2001:db8:ccc3:ffff:0:444d:555e:666f]"</codeph>）。</p>
		  
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:Socket" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Socket</apiName><shortdesc class="- topic/shortdesc ">
 Socket クラスは、コードでバイナリデータを送受信するための Transport Control Protocol （TCP）ソケット接続を確立できるようにします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseInterface>flash.utils:IDataInput</apiBaseInterface><apiBaseInterface>flash.utils:IDataOutput</apiBaseInterface><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Socket クラスは、コードでバイナリデータを送受信するための Transport Control Protocol （TCP）ソケット接続を確立できるようにします。
 
 <p class="- topic/p ">Socket クラスは、バイナリプロトコルを使用するサーバーとの通信に役立ちます。</p>
 
 <p class="- topic/p ">Socket クラスのメソッドを使用するには、まず <codeph class="+ topic/ph pr-d/codeph ">new Socket</codeph> コンストラクターを使用して Socket オブジェクトを作成する必要があります。</p>
 
 <p class="- topic/p ">ソケットはデータの送信と受信を非同期に行います。 </p>
 
 <p class="- topic/p ">オペレーティングシステムによっては、flush() は実行フレーム間で自動的に呼び出されますが、Windows などのオペレーティングシステムでは、<codeph class="+ topic/ph pr-d/codeph ">flush()</codeph> を明示的に呼び出さない限り、データは送信されません。アプリケーションが確実にすべてのオペレーティングシステムで動作するようにするには、各メッセージ（または関連するデータのグループ）をソケットに書き出した後で、<codeph class="+ topic/ph pr-d/codeph ">flush()</codeph> メソッドを呼び出すことをお勧めします。</p>
 
 <p class="- topic/p ">Adobe AIR では、Socket オブジェクトは、監視中の ServerSocket が外部プロセスからの接続を受信したときにも作成されます。この Socket オブジェクトは、ServerSocketConnectEvent で送出された接続を表します。アプリケーションには、この Socket オブジェクトへの参照を維持する役割があります。維持を行わない場合、この Socket オブジェクトはガベージコレクションの対象となり、警告を表示せずにランタイムによって破棄される可能性があります。</p>
 
 <p class="- topic/p ">local-with-filesystem セキュリティサンドボックスで実行されている SWF コンテンツはソケットを使用できません。</p>
 
  <p class="- topic/p "> ターゲットホスト上のソケットポリシーファイルで、SWF ファイルがソケット接続できるホストと、その接続ができるポートを指定します。<i class="+ topic/ph hi-d/i "/>Flash Player の最近のリリースでは、ソケットポリシーファイルに関するセキュリティ要件が以前より厳密になっています。Flash Player のすべてのバージョンで、ソケットポリシーファイルを使用することをお勧めします。環境によっては、ソケットポリシーファイルの使用が必須となっています。このため、Socket オブジェクトを使用している場合は、必要に応じてターゲットホストがソケットポリシーファイルを提供するようにしてください。 </p>
 
  <p class="- topic/p ">次の一覧は、Flash Player の各バージョンにおけるソケットポリシーファイルの要件をまとめたものです。</p>
 
  <ul class="- topic/ul "><li class="- topic/li "> Flash Player 9.0.124.0 以降のバージョンでは、Socket 接続にソケットポリシーファイルが必要です。つまり、接続しているポートには関係なく、ターゲットホスト上にソケットポリシーファイルが必要ということです。また、SWF ファイルを提供している同じホスト上のポートに接続している場合でも同様です。 </li><li class="- topic/li "> Flash Player 9.0.115.0 以前のバージョンでは、1024 未満のポートに接続するか、SWF ファイルを提供しているホスト以外のホストに接続するときは、ターゲットホスト上にソケットポリシーファイルが必要です。 </li><li class="- topic/li "> Flash Player 9.0.115.0 では、ソケットポリシーファイルが不要な場合でも、ターゲットホストがソケットポリシーファイルを提供していないときに Flash Debug Player を使うと警告が表示されます。 </li><li class="- topic/li ">AIR では、アプリケーションセキュリティサンドボックス内でコンテンツを実行するためにソケットポリシーファイルは必要ありません。AIR アプリケーションセキュリティサンドボックス外で実行されるコンテンツによって確立されるソケット接続には、ソケットポリシーファイルが必要です。</li></ul>
 
 <p class="- topic/p ">セキュリティについて詳しくは、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。
 </p>
 
 </apiDesc><example conref="examples\SocketExample.as" class="- topic/example "> 次の例では、ソケットに対して読み取りおよび書き込みを行い、socket イベント中に転送される情報を出力します。この例のハイライトは、次のとおりです。
 <ol class="- topic/ol "><li class="- topic/li ">コンストラクターが <codeph class="+ topic/ph pr-d/codeph ">CustomSocket</codeph> インスタンスの <codeph class="+ topic/ph pr-d/codeph ">socket</codeph> を作成し、ホスト名 <codeph class="+ topic/ph pr-d/codeph ">localhost</codeph> とポート 80 をパラメーターとして渡します。<codeph class="+ topic/ph pr-d/codeph ">CustomSocket</codeph> は Socket を継承するので、<codeph class="+ topic/ph pr-d/codeph ">super()</codeph> を呼び出すと Socket のコンストラクターが呼び出されます。</li><li class="- topic/li ">次に <codeph class="+ topic/ph pr-d/codeph ">configureListeners()</codeph> メソッドが呼び出され、このメソッドにより Socket イベントのリスナーが追加されます。</li><li class="- topic/li ">最後に、ソケット <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> メソッドがホスト名 <codeph class="+ topic/ph pr-d/codeph ">localhost</codeph>、ポート番号 80 で呼び出されます。</li></ol>
 
 <p class="- topic/p "> <b class="+ topic/ph hi-d/b ">注意：</b>この例を実行するには、SWF が存在するドメインと同じドメインで実行され、ポート 80 でリッスンするサーバー（この例では <codeph class="+ topic/ph pr-d/codeph ">localhost</codeph>）が必要です。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;

    public class SocketExample extends Sprite {

        public function SocketExample() {
            var socket:CustomSocket = new CustomSocket("localhost", 80);
        }
    }
}

import flash.errors.*;
import flash.events.*;
import flash.net.Socket;

class CustomSocket extends Socket {
    private var response:String;

    public function CustomSocket(host:String = null, port:uint = 0) {
        super();
        configureListeners();
        if (host &amp;&amp; port)  {
            super.connect(host, port);
        }
    }

    private function configureListeners():void {
        addEventListener(Event.CLOSE, closeHandler);
        addEventListener(Event.CONNECT, connectHandler);
        addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
        addEventListener(ProgressEvent.SOCKET_DATA, socketDataHandler);
    }

    private function writeln(str:String):void {
        str += "\n";
        try {
            writeUTFBytes(str);
        }
        catch(e:IOError) {
            trace(e);
        }
    }

    private function sendRequest():void {
        trace("sendRequest");
        response = "";
        writeln("GET /");
        flush();
    }

    private function readResponse():void {
        var str:String = readUTFBytes(bytesAvailable);
        response += str;
    }

    private function closeHandler(event:Event):void {
        trace("closeHandler: " + event);
        trace(response.toString());
    }

    private function connectHandler(event:Event):void {
        trace("connectHandler: " + event);
        sendRequest();
    }

    private function ioErrorHandler(event:IOErrorEvent):void {
        trace("ioErrorHandler: " + event);
    }

    private function securityErrorHandler(event:SecurityErrorEvent):void {
        trace("securityErrorHandler: " + event);
    }

    private function socketDataHandler(event:ProgressEvent):void {
        trace("socketDataHandler: " + event);
        readResponse();
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#ServerSocket" class="- topic/link "><linktext class="- topic/linktext ">ServerSocket</linktext></link><link href="flash.net.xml#DatagramSocket" class="- topic/link "><linktext class="- topic/linktext ">DatagramSocket</linktext></link></related-links><adobeApiEvent id="flash.net:Socket_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><shortdesc class="- topic/shortdesc ">
 Socket.connect() への呼び出しが、呼び出し元のセキュリティサンドボックスによって禁止されているサーバーまたは 1024 より下位のポートに接続しようとしたときに、そのような接続を許可するポリシーファイルが存在しない場合に送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">セキュリティエラーが発生したときに送出されます。
  
  </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">Socket.connect()</codeph> への呼び出しが、呼び出し元のセキュリティサンドボックスによって禁止されているサーバーまたは 1024 より下位のポートに接続しようとしたときに、そのような接続を許可するポリシーファイルが存在しない場合に送出されます。
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b> AIR アプリケーションでは、アプリケーションセキュリティサンドボックスで実行されるコンテンツはソケットポリシーファイルなしでサーバーおよびポート番号に接続できません。</p>
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/connect()" class="- topic/link "><linktext class="- topic/linktext ">Socket.connect()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:Socket_flash.events.ProgressEvent.SOCKET_DATA_socketData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">socketData</apiName><shortdesc class="- topic/shortdesc ">
 ソケットがデータを受信したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ProgressEvent.SOCKET_DATA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ソケットがデータを受信したときに送出されます。
 
 <p class="- topic/p ">ソケットが受信するデータは、読み込まれるまでソケットに残ります。このイベントのハンドラーで使用できるすべてのデータを読み込む必要はありません。</p>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">socketData</codeph> タイプのイベントでは、<codeph class="+ topic/ph pr-d/codeph ">ProgressEvent.bytesTotal</codeph> プロパティは使用されません。</p>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:Socket_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 入出力エラーが発生して送信またはロード操作が失敗したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 入出力エラーが発生して送信またはロード操作が失敗したときに送出されます。
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:Socket_flash.events.Event.CONNECT_connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><shortdesc class="- topic/shortdesc ">
 ネットワーク接続が確立されたときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CONNECT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ネットワーク接続が確立されたときに送出されます。
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:Socket_flash.events.Event.CLOSE_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
 サーバーによりソケット接続が閉じられたときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 サーバーによりソケット接続が閉じられたときに送出されます。
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">close</codeph> イベントは、サーバーにより接続が閉じられたときのみ送出されます。<codeph class="+ topic/ph pr-d/codeph ">Socket.close()</codeph> メソッドを呼び出しても送出されません。</p>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.net:Socket:Socket" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Socket</apiName><shortdesc class="- topic/shortdesc ">
    Socket オブジェクトを新規作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>BRS determine if all above events are accurate, and which ones also apply
     </internal></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、SWF コンテンツ内で<ph class="- topic/ph ">次の理由で発生します。</ph>
     
     <ul class="- topic/ul "><li class="- topic/li ">Local-with-filesystem ファイルはインターネットと通信できません。この問題は、この SWF ファイルを local-with-networking または trusted として分類し直すことで回避できます。 この制限は、アプリケーションセキュリティサンドボックス内の AIR アプリケーションコンテンツには適用されません。</li><li class="- topic/li ">65535 より大きいソケットポートを指定することはできません。</li></ul>
     
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">host</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">FQDN（完全修飾ドメイン名）、つまり IP アドレスです。IPv4 アドレスは、<i class="+ topic/ph hi-d/i ">192.0.2.0</i> のようにドット区切りの 10 進数表記で指定されます。 Flash Player 9.0.115.0 および AIR 1.0 以降では、<i class="+ topic/ph hi-d/i ">2001:db8:ccc3:ffff:0:444d:555e::666f</i> のようにコロン区切りの 16 進数表記を使用して IPv6 アドレスを指定できます。<codeph class="+ topic/ph pr-d/codeph ">null</codeph> を指定して、SWF ファイルが存在するホストサーバーに接続することもできます。呼び出し元の SWF ファイルが Web ブラウザー内で実行されている場合は、<codeph class="+ topic/ph pr-d/codeph ">host</codeph> が SWF ファイルが作成された元のドメイン内に存在する必要があります。
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">port</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">接続の確立に使用するターゲットホスト上の TCP ポート番号です。Flash Player 9.0.124.0 以降のバージョンでは、ターゲットホストは、SWF ファイルを提供するホストから指定のポートへのソケット接続を許可するように指定した、ソケットポリシーファイルを提供する必要があります。以前のバージョンの Flash Player では、1024 番未満のポートに接続するか、SWF ファイルを提供しているホスト以外のホストに接続するときのみ、ソケットポリシーファイルが必要です。
    
    
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Socket オブジェクトを新規作成します。パラメーターを指定しないと、初期状態では未接続のソケットが作成されます。パラメーターを指定すると、指定したホストおよびポートへの接続が試行されます。
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b><b class="+ topic/ph hi-d/b ">パラメーターを指定せずに</b>コンストラクターフォームを使用し、さらにいずれかのイベントリスナーを追加し、<codeph class="+ topic/ph pr-d/codeph ">connect</codeph> メソッドを呼び出すことを強く推奨します（<codeph class="+ topic/ph pr-d/codeph ">ホスト</codeph>および<codeph class="+ topic/ph pr-d/codeph ">ポート</codeph>をパラメーターに指定する）。このシーケンスによって、すべてのイベントリスナーが正しく動作するようになります。</p>
    
    </apiDesc></apiConstructorDetail><adobeApiEvent id="flash.net:Socket:Socket_connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ネットワーク接続が確立されたときに送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ネットワーク接続が確立されたときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:Socket:Socket_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">入出力エラーが発生して接続が失敗すると送信されます。
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">入出力エラーが発生して接続が失敗すると送信されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:Socket:Socket_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <ph class="- topic/ph "><codeph class="+ topic/ph pr-d/codeph ">Socket.connect()</codeph> の呼び出しによって、ソケットポリシーファイルを提供しないサーバーや、特定のポートに対して呼び出し元のホストアクセスを許可しないポリシーファイルを持つサーバーに接続しようとしたときに送出されます。ポリシーファイルについて詳しくは、『ActionScript 3.0 開発ガイド<i class="+ topic/ph hi-d/i "/>』の「Web サイトのコントロール（ポリシーファイル）」および Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</ph>
     
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">このエラーは SWF コンテンツで発生します。Socket.connect() の呼び出しによって、ソケットポリシーファイルを提供しないサーバーや、特定のポートに対して呼び出し元のホストアクセスを許可しないポリシーファイルを持つサーバーに接続しようとしたときに送出されます。</shortdesc></adobeApiEvent></apiConstructor><apiOperation id="flash.net:Socket:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     ソケットを閉じます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットを閉じることができないか、またはソケットが開いていません。.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットを閉じます。<codeph class="+ topic/ph pr-d/codeph ">close()</codeph> メソッドが呼び出された後は、データの読み書きはできません。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">close</codeph> イベントは、サーバーにより接続が閉じられたときのみ送出されます。<codeph class="+ topic/ph pr-d/codeph ">close()</codeph> メソッドを呼び出しても送出されません。</p>
     
     <p class="- topic/p ">Socket オブジェクトで <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> メソッドをもう一度呼び出すことで、その Socket オブジェクトを再使用できます。</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><shortdesc class="- topic/shortdesc ">
     指定されたホストおよびポートにソケットを接続します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>BRS compare this entire description with XMLSocket.connect() and make consistent
      
      </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ホストが指定されていないので、接続に失敗しました。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、SWF コンテンツ内で<ph class="- topic/ph ">次の理由で発生します。</ph>
     
          <ul class="- topic/ul "><li class="- topic/li ">信頼されていないローカル SWF ファイルはインターネットへの接続を許可されません。この制限は、このファイルを local-with-networking または trusted として分類し直すことで回避できます。</li><li class="- topic/li ">65535 より大きいソケットポートを指定することはできません。</li><li class="- topic/li ">SWF コンテンツがある HTML ページでは、<codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">object</codeph> タグおよび <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> タグ）は <codeph class="+ topic/ph pr-d/codeph ">"none"</codeph> に設定します。</li></ul>
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">host</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">接続するホストのホスト名または IP アドレスです。ホストを指定しないと、接続するホストは、呼び出す ファイルが存在するホストになります。ホストを指定しない場合は、イベントリスナーを使用して接続が成功したかどうかを判定します。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">port</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">接続先のポート番号です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定されたホストおよびポートにソケットを接続します。
     
     <p class="- topic/p ">直後に接続が失敗した場合、イベントが送出されるか例外がスローされます。ホストが指定されている場合はエラーイベントが送出され、ホストが指定されていない場合は例外がスローされます。接続が成功した場合は、接続のステータスがイベントにより報告されます。ソケットが既に接続済みの場合、最初に既存の接続が閉じられます。</p>
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.net:Socket:connect_connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ネットワーク接続が確立されたときに送出されます。
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ネットワーク接続が確立されたときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:Socket:connect_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ホストが指定されていて、入出力エラーが発生して接続が失敗した場合に送出されます。
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ホストが指定されていて、入出力エラーが発生して接続が失敗した場合に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:Socket:connect_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Socket.connect()</codeph> の呼び出しによって、ソケットポリシーファイルを提供しないサーバーや、特定のポートに対して呼び出し元のホストアクセスを許可しないポリシーファイルを持つサーバーに接続しようとしたときに送出されます。ポリシーファイルについて詳しくは、『ActionScript 3.0 開発ガイド<i class="+ topic/ph hi-d/i "/>』の「Web サイトのコントロール（ポリシーファイル）」および Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Socket.connect() の呼び出しによって、ソケットポリシーファイルを提供しないサーバーや、特定のポートに対して呼び出し元のホストアクセスを許可しないポリシーファイルを持つサーバーに接続しようとしたときに送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:Socket:flush" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">flush</apiName><shortdesc class="- topic/shortdesc ">
     ソケットの出力バッファーに蓄積されたデータをフラッシュします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットの出力バッファーに蓄積されたデータをフラッシュします。
     
	 <p class="- topic/p ">オペレーティングシステムによっては、flush() は実行フレーム間で自動的に呼び出されますが、Windows などのオペレーティングシステムでは、<codeph class="+ topic/ph pr-d/codeph ">flush()</codeph> を明示的に呼び出さない限り、データは送信されません。アプリケーションが確実にすべてのオペレーティングシステムで動作するようにするには、各メッセージ（または関連するデータのグループ）をソケットに書き出した後で、<codeph class="+ topic/ph pr-d/codeph ">flush()</codeph> メソッドを呼び出すことをお勧めします。</p>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readBoolean" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readBoolean</apiName><shortdesc class="- topic/shortdesc ">
     ソケットからブール値を読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">読み取り可能なデータが不足しています。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">読み取られたバイトがゼロ以外の場合に値は <codeph class="+ topic/ph pr-d/codeph ">true</codeph> になり、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> になります。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットからブール値を読み取ります。1 バイトを読み取った後、メソッドはバイトがゼロ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph>、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readByte</apiName><shortdesc class="- topic/shortdesc ">
     ソケットから符号付きバイトを読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">読み取り可能なデータが不足しています。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">値は -128 ～ 127 です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットから符号付きバイトを読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readBytes</apiName><shortdesc class="- topic/shortdesc ">
     ソケットから、length パラメーターで指定したデータバイト数を読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">読み取り可能なデータが不足しています。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bytes</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データの読み込み先の ByteArray オブジェクトです。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">offset</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データの読み取りを開始するバイト配列のオフセットです。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">読み取るバイト数です。デフォルト値の 0 に設定すると、すべてのデータが読み取られます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットから、length パラメーターで指定したデータバイト数を読み取ります。このバイトは、指定したバイト配列の、<codeph class="+ topic/ph pr-d/codeph ">offset</codeph> で指定された位置以降に読み込まれます。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readDouble" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readDouble</apiName><shortdesc class="- topic/shortdesc ">
     ソケットから IEEE 754 倍精度浮動小数点数を読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">読み取り可能なデータが不足しています。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">IEEE 754 倍精度浮動小数点数です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットから IEEE 754 倍精度浮動小数点数を読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readFloat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readFloat</apiName><shortdesc class="- topic/shortdesc ">
     ソケットから IEEE 754 単精度浮動小数点数を読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">読み取り可能なデータが不足しています。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">IEEE 754 単精度浮動小数点数です。
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットから IEEE 754 単精度浮動小数点数を読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readInt</apiName><shortdesc class="- topic/shortdesc ">
     ソケットから符号付き 32 ビット整数を読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">読み取り可能なデータが不足しています。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">値は -2147483648 ～ 2147483647 です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットから符号付き 32 ビット整数を読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readMultiByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readMultiByte</apiName><shortdesc class="- topic/shortdesc ">
     指定した文字セットを使用して、バイトストリームからマルチバイトストリングを読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Socket, Socket.readMultiByte, readMultiByte
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">読み取り可能なデータが不足しています。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">UTF-8 エンコードされたストリングです。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">バイトストリームから読み取るバイト数です。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">charSet</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">バイトの解釈に使用する文字セットを表すストリングです。文字セットのストリングには、<codeph class="+ topic/ph pr-d/codeph ">"shift_jis"</codeph>、<codeph class="+ topic/ph pr-d/codeph ">"CN-GB"</codeph>、および <codeph class="+ topic/ph pr-d/codeph ">"iso-8859-1"</codeph> があります。完全な一覧については、<xref href="../../charset-codes.html" class="- topic/xref ">「サポートされている文字セット」</xref>を参照してください。
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b><codeph class="+ topic/ph pr-d/codeph ">charSet</codeph> パラメーターの値が現在のシステムによって認識されない場合、アプリケーションはシステムのデフォルトコードページを文字セットとして使用します。例えば、<codeph class="+ topic/ph pr-d/codeph ">charSet</codeph> パラメーターの指定で、<codeph class="+ topic/ph pr-d/codeph ">myTest.readMultiByte(22, "iso-8859-01")</codeph> のように、<codeph class="+ topic/ph pr-d/codeph ">01</codeph> を <codeph class="+ topic/ph pr-d/codeph ">1</codeph> の代わりに使用した場合、その文字セットパラメーターは開発マシンでは認識されるかもしれませんが、別のマシンでは認識されない可能性があります。もう一方のマシンでは、アプリケーションがシステムのデフォルトコードページを使用することになります。</p>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定した文字セットを使用して、バイトストリームからマルチバイトストリングを読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readObject" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readObject</apiName><shortdesc class="- topic/shortdesc ">
     ソケットから AMF 直列化形式でエンコードされたオブジェクトを読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">読み取り可能なデータが不足しています。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">非直列化されたオブジェクトです。
     
     </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットから AMF 直列化形式でエンコードされたオブジェクトを読み取ります。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding</linktext></link><link href="../../flash/net/package.html#registerClassAlias()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.registerClassAlias()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:readShort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readShort</apiName><shortdesc class="- topic/shortdesc ">
     ソケットから符号付き 16 ビット整数を読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">読み取り可能なデータが不足しています。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">値は -32768 ～ 32767 です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットから符号付き 16 ビット整数を読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readUTFBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUTFBytes</apiName><shortdesc class="- topic/shortdesc ">
     ソケットから length パラメーターで指定した UTF-8 バイト数を読み取り、ストリングを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">読み取り可能なデータが不足しています。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">UTF-8 ストリング。
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">読み取るバイト数です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットから <codeph class="+ topic/ph pr-d/codeph ">length</codeph> パラメーターで指定した UTF-8 バイト数を読み取り、ストリングを返します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readUTF" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUTF</apiName><shortdesc class="- topic/shortdesc ">
     ソケットから UTF-8 ストリングを読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">読み取り可能なデータが不足しています。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">UTF-8 ストリング。
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットから UTF-8 ストリングを読み取ります。このストリングには、バイト単位の長さを示す符号なし short 型整数が前に付いているものと見なされます。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readUnsignedByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUnsignedByte</apiName><shortdesc class="- topic/shortdesc ">
     ソケットから符号なしバイトを読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">読み取り可能なデータが不足しています。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">値は 0 ～ 255 です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットから符号なしバイトを読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readUnsignedInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUnsignedInt</apiName><shortdesc class="- topic/shortdesc ">
     ソケットから符号なし 32 ビット整数を読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">読み取り可能なデータが不足しています。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">値は 0 ～ 4294967295 です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットから符号なし 32 ビット整数を読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readUnsignedShort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUnsignedShort</apiName><shortdesc class="- topic/shortdesc ">
     ソケットから符号なし 16 ビット整数を読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">読み取り可能なデータが不足しています。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">値は 0 ～ 65535 です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットから符号なし 16 ビット整数を読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:writeBoolean" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeBoolean</apiName><shortdesc class="- topic/shortdesc ">
     ソケットにブール値を書き込みます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットに書き込まれる値は、1（<codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合）または 0（<codeph class="+ topic/ph pr-d/codeph ">false</codeph> の場合）です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットにブール値を書き込みます。このメソッドは 1 バイトを書き込みます。1（<codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合）または 0（<codeph class="+ topic/ph pr-d/codeph ">false</codeph> の場合）のいずれかの値が使用されます。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeByte</apiName><shortdesc class="- topic/shortdesc ">
     ソケットに 1 バイトを書き込みます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットに書き込む値です。値の下位 8 ビットが使用されます。上位 24 ビットは無視されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットに 1 バイトを書き込みます。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeBytes</apiName><shortdesc class="- topic/shortdesc ">
     指定したバイト配列のバイトのシーケンスを書き込みます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">offset</codeph> が <codeph class="+ topic/ph pr-d/codeph ">bytes</codeph> で指定された ByteArray の長さよりも長い場合、または <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> に <codeph class="+ topic/ph pr-d/codeph ">length</codeph> を加えた値によって記述されるように指定されたデータ量が、利用可能なデータを超過した場合に発生します。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bytes</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データの書き込み元の ByteArray オブジェクトです。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">offset</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データの書き込みを開始する、<codeph class="+ topic/ph pr-d/codeph ">bytes</codeph> ByteArray オブジェクトへのゼロから始まるオフセットです。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">書き込むバイト数です。デフォルト値の 0 に設定すると、<codeph class="+ topic/ph pr-d/codeph ">offset</codeph> パラメーターで指定した値以降にバッファー全体が書き込まれます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定したバイト配列のバイトのシーケンスを書き込みます。書き込み操作は、<codeph class="+ topic/ph pr-d/codeph ">offset</codeph> で指定された位置から開始されます。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">length</codeph> パラメーターを省略するとデフォルトの長さ 0 が使用され、<codeph class="+ topic/ph pr-d/codeph ">offset</codeph> の位置からバッファー全体が書き込まれます。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">offset</codeph> パラメーターを省略した場合も、バッファー全体が書き込まれます。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeDouble" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeDouble</apiName><shortdesc class="- topic/shortdesc ">
     ソケットに IEEE 754 倍精度浮動小数点数を書き込みます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットに書き込む値です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットに IEEE 754 倍精度浮動小数点数を書き込みます。
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeFloat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeFloat</apiName><shortdesc class="- topic/shortdesc ">
     ソケットに IEEE 754 単精度浮動小数点数を書き込みます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットに書き込む値です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットに IEEE 754 単精度浮動小数点数を書き込みます。
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeInt</apiName><shortdesc class="- topic/shortdesc ">
     ソケットに 32 ビット符号付き整数を書き込みます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットに書き込む値です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットに 32 ビット符号付き整数を書き込みます。
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeMultiByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeMultiByte</apiName><shortdesc class="- topic/shortdesc ">
     指定した文字セットを使用して、バイトストリームからマルチバイトストリングを書き込みます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Socket, Socket.writeMultiByte, writeMultiByte
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">書き込まれるストリング値です。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">charSet</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">バイトの解釈に使用する文字セットを表すストリングです。文字セットのストリングには、<codeph class="+ topic/ph pr-d/codeph ">"shift_jis"</codeph>、<codeph class="+ topic/ph pr-d/codeph ">"CN-GB"</codeph>、および <codeph class="+ topic/ph pr-d/codeph ">"iso-8859-1"</codeph> があります。完全な一覧については、<xref href="../../charset-codes.html" class="- topic/xref ">「サポートされている文字セット」</xref>を参照してください。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定した文字セットを使用して、バイトストリームからマルチバイトストリングを書き込みます。
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeObject" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeObject</apiName><shortdesc class="- topic/shortdesc ">
     ソケットに AMF 直列化形式でオブジェクトを書き込みます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">object</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">直列化されるオブジェクトです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットに AMF 直列化形式でオブジェクトを書き込みます。
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding</linktext></link><link href="../../flash/net/package.html#registerClassAlias()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.registerClassAlias()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeShort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeShort</apiName><shortdesc class="- topic/shortdesc ">
     ソケットに 16 ビット整数を書き込みます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットに書き込む値です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットに 16 ビット整数を書き込みます。次のようにバイトが書き込まれます。
     
     <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph ">(v >> 8) &amp; 0xff v &amp; 0xff</codeph></pre>
     
     <p class="- topic/p ">パラメーターの下位 16 ビットが使用されます。上位 16 ビットは無視されます。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeUTFBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeUTFBytes</apiName><shortdesc class="- topic/shortdesc ">
     ソケットに UTF-8 ストリングを書き込みます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットに書き込むストリングです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットに UTF-8 ストリングを書き込みます。
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeUTF" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeUTF</apiName><shortdesc class="- topic/shortdesc ">
     指定された UTF-8 ストリングの長さ（バイト単位）を示す 16 ビット符号なし整数をソケットに書き込み、その後にストリング自体を書き込みます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">長さが 65535 を超えています。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットに書き込むストリングです。
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定された UTF-8 ストリングの長さ（バイト単位）を示す 16 ビット符号なし整数をソケットに書き込み、その後にストリング自体を書き込みます。
     
     <p class="- topic/p ">ストリングを書き込む前に、メソッドによってストリングのすべての文字を表すのに必要なバイト数が計算されます。</p>
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeUnsignedInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeUnsignedInt</apiName><shortdesc class="- topic/shortdesc ">
     ソケットに 32 ビット符号なし整数を書き込みます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットで I/O エラーが発生したか、ソケットが開いていません。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットに書き込む値です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットに 32 ビット符号なし整数を書き込みます。
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link></related-links></apiOperation><apiValue id="flash.net:Socket:bytesAvailable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesAvailable</apiName><shortdesc class="- topic/shortdesc ">
     入力バッファーで読み取ることができるデータのバイト数です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     入力バッファーで読み取ることができるデータのバイト数です。
     
     <p class="- topic/p ">コードでは、<codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> にアクセスして入力バッファーの空き容量を確認してから、<codeph class="+ topic/ph pr-d/codeph ">read</codeph> メソッドの 1 つを使用してデータを読み取る必要があります。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:Socket:connected:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">connected</apiName><shortdesc class="- topic/shortdesc ">
     この Socket オブジェクトが現在、接続されているかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     この Socket オブジェクトが現在、接続されているかどうかを示します。このプロパティの呼び出しは、現在ソケットが接続されている場合に値 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:Socket:endian:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">endian</apiName><shortdesc class="- topic/shortdesc ">
     データのバイト順を示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiDefaultValue>Endian.BIG_ENDIAN
     </apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     データのバイト順序を示します。指定できる値は flash.utils.Endian クラスの定数で、<codeph class="+ topic/ph pr-d/codeph ">Endian.BIG_ENDIAN</codeph> または <codeph class="+ topic/ph pr-d/codeph ">Endian.LITTLE_ENDIAN</codeph> です。
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.utils.xml#Endian" class="- topic/link "><linktext class="- topic/linktext ">flash.utils.Endian</linktext></link></related-links></apiValue><apiValue id="flash.net:Socket:localAddress:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localAddress</apiName><shortdesc class="- topic/shortdesc ">
     ローカルマシン上でこのソケットがバインドされている IP アドレス。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ローカルマシン上でこのソケットがバインドされている IP アドレス。

     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/bind()" class="- topic/link "><linktext class="- topic/linktext ">bind()</linktext></link></related-links></apiValue><apiValue id="flash.net:Socket:localPort:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localPort</apiName><shortdesc class="- topic/shortdesc ">
     ローカルマシン上でこのソケットがバインドされているポート。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ローカルマシン上でこのソケットがバインドされているポート。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/bind()" class="- topic/link "><linktext class="- topic/linktext ">bind()</linktext></link></related-links></apiValue><apiValue id="flash.net:Socket:objectEncoding:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">objectEncoding</apiName><shortdesc class="- topic/shortdesc ">
     オブジェクトの書き込みまたは読み取り時に使用される AMF のバージョンを制御します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Property documented; needs review
     </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     オブジェクトの書き込みまたは読み取り時に使用される AMF のバージョンを制御します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding クラス</linktext></link><link href="flash.net.xml#Socket/readObject()" class="- topic/link "><linktext class="- topic/linktext ">readObject()</linktext></link><link href="flash.net.xml#Socket/writeObject()" class="- topic/link "><linktext class="- topic/linktext ">writeObject()</linktext></link></related-links></apiValue><apiValue id="flash.net:Socket:remoteAddress:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">remoteAddress</apiName><shortdesc class="- topic/shortdesc ">
     このソケットが接続されているリモートマシンの IP アドレス。 </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このソケットが接続されているリモートマシンの IP アドレス。 
     
     <p class="- topic/p ">このプロパティを使用して、ServerSocket オブジェクトによって ServerSocketConnectEvent 内に送出されたクライアントソケットの IP アドレスを特定します。必要な場合は、DNSResolver クラスを使用して、IP アドレスをドメイン名に変換します。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/connect()" class="- topic/link "><linktext class="- topic/linktext ">connect()</linktext></link><link href="flash.net.xml#ServerSocket" class="- topic/link "><linktext class="- topic/linktext ">ServerSocket</linktext></link><link href="flash.events.xml#ServerSocketConnectEvent" class="- topic/link "><linktext class="- topic/linktext ">ServerSocketConnectEvent</linktext></link><link href="flash.net.dns.xml#DNSResolver" class="- topic/link "><linktext class="- topic/linktext ">DNSResolver</linktext></link></related-links></apiValue><apiValue id="flash.net:Socket:remotePort:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">remotePort</apiName><shortdesc class="- topic/shortdesc ">
     このソケットが接続されているリモートマシンのポート。 </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このソケットが接続されているリモートマシンのポート。 
     
     <p class="- topic/p ">このプロパティを使用して、ServerSocket オブジェクトによって ServerSocketConnectEvent 内に送出されたクライアントソケットのポート番号を特定します。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/connect()" class="- topic/link "><linktext class="- topic/linktext ">connect()</linktext></link><link href="flash.net.xml#ServerSocket" class="- topic/link "><linktext class="- topic/linktext ">ServerSocket</linktext></link><link href="flash.events.xml#ServerSocketConnectEvent" class="- topic/link "><linktext class="- topic/linktext ">ServerSocketConnectEvent</linktext></link></related-links></apiValue><apiValue id="flash.net:Socket:timeout:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">timeout</apiName><shortdesc class="- topic/shortdesc ">
     接続までの待ち時間（ミリ秒数）を示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     接続までの待ち時間（ミリ秒数）を示します。
     
     <p class="- topic/p ">指定した時間内に接続できなかったときは、接続が失敗することになります。デフォルト値は 20,000 (20 秒) です。</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:ObjectEncoding" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ObjectEncoding</apiName><shortdesc class="- topic/shortdesc ">
 ObjectEncoding クラスを使用すると、オブジェクトを直列化するクラス（FileStream、NetStream、NetConnection、SharedObject、ByteArray など）で直列化の設定を定義する際に、以前のバージョンの ActionScript を使用できます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">ObjectEncoding, ObjectEncoding object, built-in class, AMF, Action Message Format
 
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ObjectEncoding クラスを使用すると、オブジェクトを直列化するクラス（FileStream、NetStream、NetConnection、SharedObject、ByteArray など）で直列化の設定を定義する際に、以前のバージョンの ActionScript を使用できます。
 
 <p class="- topic/p ">オブジェクトエンコーディングは、AMF（Action Message Format）によるオブジェクトの表現方法を制御します。Flash Player は AMF を使用することで、アプリケーションとリモートサーバーとの間で効率的に通信を行えるようにします。AMF では、リモートプロシージャコールはコンパクトなバイナリ表現にエンコードされます。このバイナリ表現は、HTTP/HTTPS プロトコルまたは、Flash Media Server が使用する RTMP/RTMPS プロトコルで転送可能です。オブジェクトとデータ値は、このバイナリ形式内に直列化されます。これは通常、XML などの他の表現よりもコンパクトです。</p>
 
 <p class="- topic/p ">Adobe AIR および Flash Player 9 では、AMF3 および AMF0 の 2 つの異なる形式で直列化を実行できます。 AMF3 はデフォルトの直列化形式で、ActionScript 3.0 で使用されます。ActionScript 1.0 および 2.0 で使用される AMF0 と比べて様々な利点があります。 AMF3 では、ネットワーク経由でのデータの送信が AMF0 より効率化されています。 <ph class="- topic/ph ">AMF3 は、<codeph class="+ topic/ph pr-d/codeph ">int</codeph> オブジェクトと <codeph class="+ topic/ph pr-d/codeph ">uint</codeph> オブジェクトの整数としての送信と、ByteArray、XML、IExternalizable などの、ActionScript 3.0 でのみ使用できるデータ型をサポートしています。AMF3 は、ActionScript 3.0 で、Flex 2 などの AMF3 エンコードを使用するサーバーを使用している場合にのみ使用できます。</ph></p>
 
 <p class="- topic/p ">ByteArray、FileStream、NetConnection、NetStream、<ph class="- topic/ph ">SharedObject、</ph>Socket、URLStream の各クラスには、<codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> プロパティが含まれます。このプロパティには ObjectEncoding クラスから定数が割り当てられます。 <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> プロパティの動作は、オブジェクトによって異なります。各クラスの <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> プロパティの説明に、この動作についての詳細な説明があります。</p>
 
 
 </apiDesc></apiClassifierDetail><apiValue id="flash.net:ObjectEncoding:AMF0" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">AMF0</apiName><shortdesc class="- topic/shortdesc ">
	 オブジェクトが ActionScript 1.0 および 2.0 の Action Message Format 形式を使用して直列化されることを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 オブジェクトが ActionScript 1.0 および 2.0 の Action Message Format 形式を使用して直列化されることを指定します。
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:ObjectEncoding:AMF3" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">AMF3</apiName><shortdesc class="- topic/shortdesc ">
	 オブジェクトが ActionScript 3.0 の Action Message Format 形式を使用して直列化されることを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">3</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 オブジェクトが ActionScript 3.0 の Action Message Format 形式を使用して直列化されることを指定します。
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:ObjectEncoding:DEFAULT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DEFAULT</apiName><shortdesc class="- topic/shortdesc ">
	 現在のランタイムにデフォルト（最新）の形式を指定します（Flash Player または AIR）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">3</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 現在のランタイムにデフォルト（最新）の形式を指定します（Flash Player または AIR）。オブジェクトエンコーディング制御は Flash Player 9 以降および Adobe AIR でのみ使用できるので、使用される最も古い形式は ActionScript 3.0 対応の Action Message Format 形式ということになります。
	 
	 <p class="- topic/p ">例えば、オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.DEFAULT</codeph> に設定されている場合は、AMF3 エンコーディングが使用されます。将来、Flash Player または Adobe AIR の後のバージョンで新しい AMF バージョンが導入され、コンテンツを再パブリッシュすると、アプリケーションはその新しい AMF バージョンを使用します。この定数は、以前のバージョンの Flash Player との相互運用性について特に注意する必要がない場合に限り使用できます。</p>
     
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:ObjectEncoding:dynamicPropertyWriter:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dynamicPropertyWriter</apiName><shortdesc class="- topic/shortdesc ">
	 動的オブジェクトの動的プロパティの直列化をさらに細かく制御できます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.net:IDynamicPropertyWriter</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 動的オブジェクトの動的プロパティの直列化をさらに細かく制御できます。このプロパティがデフォルト値の <codeph class="+ topic/ph pr-d/codeph ">null</codeph> に設定されている場合、動的プロパティはネイティブコードを使用して直列化されます。これにより、値が関数である動的プロパティを除くすべての動的プロパティが書き込まれます。
     <p class="- topic/p ">この値は、ダイナミックオブジェクト（ダイナミッククラス内で宣言したオブジェクト）のプロパティに対して、または <codeph class="+ topic/ph pr-d/codeph ">new</codeph> 演算子を使用して宣言したオブジェクトに対してのみ、呼び出されます。</p>
	 
	 <p class="- topic/p ">このプロパティを使用して、動的オブジェクトのプロパティの直列化からの除外、動的オブジェクトのプロパティへの値の書き込み、または新しいプロパティの作成を実行できます。これらの操作を実行するには、IDynamicPropertyWriter インターフェイスを実装するオブジェクトにこのプロパティを設定します。詳細については、IDynamicPropertyWriter インターフェイスを参照してください。</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#IDynamicPropertyWriter" class="- topic/link "><linktext class="- topic/linktext ">IDynamicPropertyWriter</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetStreamAppendBytesAction" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetStreamAppendBytesAction</apiName><shortdesc class="- topic/shortdesc ">

NetStreamAppendBytesAction クラスは、NetStream.appendBytesAction() メソッドに渡すことができる定数の列挙です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">

NetStreamAppendBytesAction クラスは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.appendBytesAction()</codeph> メソッドに渡すことができる定数の列挙です。

<p class="- topic/p ">定数のうち 2 つは、タイムスケールの不連続性を示します。すべての FLV タグに、タイムスケール内での位置を示すタイムスタンプが含まれます。タイムスタンプを使用して、ビデオ、オーディオおよびスクリプトデータの再生を同期させます。同じ種類（ビデオ、オーディオ、スクリプトデータ）の FLV タグのタイムスタンプは、FLV の進行と共に減少しません。</p>

</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/appendBytesAction()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.appendBytesAction()</linktext></link><link href="flash.net.xml#NetStream/appendBytes()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.appendBytes()</linktext></link></related-links><apiValue id="flash.net:NetStreamAppendBytesAction:END_SEQUENCE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">END_SEQUENCE</apiName><shortdesc class="- topic/shortdesc ">
    メディアストリームデータが完全であること示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">endSequence</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    メディアストリームデータが完全であること示します。H.264 などの一部のコーデックでは、バイトパーサーは、バッファーがある程度埋まるのを待ってから再生を開始します。バイトパーサーに再生を直ちに開始するよう指示するには、<codeph class="+ topic/ph pr-d/codeph ">END_SEQUENCE</codeph> を渡します。
    
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamAppendBytesAction:RESET_BEGIN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RESET_BEGIN</apiName><shortdesc class="- topic/shortdesc ">
    
    タイムスケールの不連続性を示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">resetBegin</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    
    タイムスケールの不連続性を示します。FIFO（不完全な FLV タグで構成）をフラッシュし、タイムスケールをリセットして、付加された次のメッセージのタイムスタンプから開始します。<codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> への次の呼び出しで、バイトパーサーはファイルヘッダーを予期し、ファイルの先頭から開始します。
    
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamAppendBytesAction:RESET_SEEK" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RESET_SEEK</apiName><shortdesc class="- topic/shortdesc ">
    タイムスケールの不連続性を示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">resetSeek</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    タイムスケールの不連続性を示します。FIFO（不完全な FLV タグで構成）をフラッシュし、タイムスケールをリセットして、付加された次のメッセージのタイムスタンプから開始します。<codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> への次の呼び出しで、バイトパーサーは、同じ FLV の位置のシークをユーザーが完了したかのように、タグ境界上の FLV タグの先頭を予期します。
    
    
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetGroupReplicationStrategy" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetGroupReplicationStrategy</apiName><shortdesc class="- topic/shortdesc ">
NetGroupReplicationStrategy クラスは、NetGroup クラスの replicationStrategy プロパティの設定で使用される定数値の列挙です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">NetGroup クラスの replicationStrategy プロパティの設定で使用される定数値の列挙です。
</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
NetGroupReplicationStrategy クラスは、<codeph class="+ topic/ph pr-d/codeph ">NetGroup</codeph> クラスの <codeph class="+ topic/ph pr-d/codeph ">replicationStrategy</codeph> プロパティの設定で使用される定数値の列挙です。

</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/addWantObjects()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.addWantObjects()</linktext></link><link href="flash.net.xml#NetGroup/replicationStrategy" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.replicationStrategy</linktext></link></related-links><apiValue id="flash.net:NetGroupReplicationStrategy:LOWEST_FIRST" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LOWEST_FIRST</apiName><shortdesc class="- topic/shortdesc "> 
    要求を満たすためにネイバーからオブジェクトを取得するときに、最も低いインデックス番号のオブジェクトが最初に要求されるように指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">lowestFirst</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    要求を満たすためにネイバーからオブジェクトを取得するときに、最も低いインデックス番号のオブジェクトが最初に要求されるように指定します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/addWantObjects()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.addWantObjects()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroupReplicationStrategy:RAREST_FIRST" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RAREST_FIRST</apiName><shortdesc class="- topic/shortdesc "> 
    要求を満たすためにネイバーからオブジェクトを取得するときに、すべてのネイバーのうち最も複製の少ないオブジェクトが最初に要求されるように指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">rarestFirst</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    要求を満たすためにネイバーからオブジェクトを取得するときに、すべてのネイバーのうち最も複製の少ないオブジェクトが最初に要求されるように指定します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/addWantObjects()" class="- topic/link "><linktext class="- topic/linktext ">NetGroup.addWantObjects()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:URLLoader" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">URLLoader</apiName><shortdesc class="- topic/shortdesc ">
 URLLoader クラスは、指定した URL からテキスト、バイナリデータ、または URL エンコード形式の変数をダウンロードする際に使用します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 URLLoader クラスは、指定した URL からテキスト、バイナリデータ、または URL エンコード形式の変数をダウンロードする際に使用します。動的なデータ駆動アプリケーションで使用するテキストファイル、XML、その他の情報をダウンロードする場合に便利です。
 
 <p class="- topic/p ">URLLoader オブジェクトは、アプリケーションのコードでデータを使用できるように、事前にすべてのデータを URL からダウンロードします。 URLLoader オブジェクトは、ダウンロードの進捗に関する通知を送信します。この通知は、送出済みのイベントと、<codeph class="+ topic/ph pr-d/codeph ">bytesLoaded</codeph> プロパティおよび <codeph class="+ topic/ph pr-d/codeph ">bytesTotal</codeph> プロパティで監視できます。</p>
 
 <p class="- topic/p ">FLV のように非常に大きなビデオファイルをロードする場合、メモリ不足のエラーが起こることがあります。
 </p>
 

 
 <p class="- topic/p "><ph class="- topic/ph ">Flash Player、および</ph>アプリケーションセキュリティサンドボックス以外のセキュリティサンドボックス内の AIR アプリケーションコンテンツでこのクラスを使用するときは、次のセキュリティモデルを考慮してください。</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">ローカルファイルシステムのサンドボックスの SWF ファイルは、ネットワーク上のサンドボックス内のリソースからデータを読み込んだり、リソースにデータを書き込んだりしないことがあります。 </li><li class="- topic/li "> デフォルトで、呼び出し元の SWF ファイルおよびロードする URL は同じドメインに置かれている必要があります。例えば、www.adobe.com に置かれている SWF ファイルは www.adobe.com に置かれているソースからのみデータをロードできます。 異なるドメインからデータをロードするには、データをホストするサーバーに URL ポリシーファイルを配置します。</li></ul>
 
 <p class="- topic/p ">セキュリティについて詳しくは、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
 
 
 </apiDesc><example conref="examples\URLLoaderExample.as" class="- topic/example "> 次の例では、ローカルテキストファイルで検出されたデータをロードして表示します。また、イベント処理情報も出力します。
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>この例を実行するには、urlLoaderExample.txt ファイルを SWF ファイルと同じディレクトリに配置します。このファイルには、次のテキスト行のみが含まれています。<codeph class="+ topic/ph pr-d/codeph ">answer=42&amp;question=unknown</codeph>
 </p>
 <p class="- topic/p ">コード例では、次の処理が実行されます。</p>
 <ol class="- topic/ol "><li class="- topic/li ">コンストラクター関数が <codeph class="+ topic/ph pr-d/codeph ">loader</codeph> という URLLoader インスタンスと、ロードされるファイルの場所と名前を含む <codeph class="+ topic/ph pr-d/codeph ">request</codeph> という URLRequest インスタンスを作成します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">loader</codeph> オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">configureListeners()</codeph> メソッドに渡されます。このメソッドは、サポートされる各 URLLoader イベントのリスナーを追加します。</li><li class="- topic/li ">次に <codeph class="+ topic/ph pr-d/codeph ">request</codeph> オブジェクトが、テキストファイルをロードする <codeph class="+ topic/ph pr-d/codeph ">loader.load()</codeph> に渡されます。</li><li class="- topic/li ">URLLoader によるテキストファイルのロードが終了すると、<codeph class="+ topic/ph pr-d/codeph ">Event.COMPLETE event</codeph> イベントが発生し、<codeph class="+ topic/ph pr-d/codeph ">completeHandler()</codeph> メソッドがトリガーされます。<codeph class="+ topic/ph pr-d/codeph ">completeHandler()</codeph> メソッドはファイルからロードされたテキストから URLVariables オブジェクトを作成します。URLVariables オブジェクトは、URL エンコードされた名前と値のペアを ActionScript プロパティに変換し、ロードされたデータを操作しやすくします。</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.*;

    public class URLLoaderExample extends Sprite {
        public function URLLoaderExample() {
            var loader:URLLoader = new URLLoader();
            configureListeners(loader);

            var request:URLRequest = new URLRequest("urlLoaderExample.txt");
            try {
                loader.load(request);
            } catch (error:Error) {
                trace("Unable to load requested document.");
            }
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        }

        private function completeHandler(event:Event):void {
            var loader:URLLoader = URLLoader(event.target);
            trace("completeHandler: " + loader.data);
    
            var vars:URLVariables = new URLVariables(loader.data);
            trace("The answer is " + vars.answer);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest" class="- topic/link "><linktext class="- topic/linktext ">URLRequest</linktext></link><link href="flash.net.xml#URLVariables" class="- topic/link "><linktext class="- topic/linktext ">URLVariables</linktext></link><link href="flash.net.xml#URLStream" class="- topic/link "><linktext class="- topic/linktext ">URLStream</linktext></link></related-links><adobeApiEvent id="flash.net:URLLoader_flash.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS_httpResponseStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpResponseStatus</apiName><shortdesc class="- topic/shortdesc ">
 load() メソッドを呼び出し、HTTP を使用してデータにアクセスを試み、Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 load() メソッドを呼び出し、HTTP を使用してデータにアクセスを試み、Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoader/load()" class="- topic/link "><linktext class="- topic/linktext ">load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader_flash.events.HTTPStatusEvent.HTTP_STATUS_httpStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpStatus</apiName><shortdesc class="- topic/shortdesc ">
 URLLoader.load() が HTTP 経由でデータにアクセスしようとすると送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.HTTPStatusEvent.HTTP_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 URLLoader.load() が HTTP 経由でデータにアクセスしようとすると送出されます。<ph class="- topic/ph ">Flash Player で実行されているコンテンツでは、このイベントは、現在の Flash Player 環境が要求のステータスコードを検出して返すことができる場合にのみ送出されます （一部のブラウザー環境ではこの情報を提供できません）。</ph><codeph class="+ topic/ph pr-d/codeph ">httpStatus</codeph> イベントが送出される場合、このイベントは、<codeph class="+ topic/ph pr-d/codeph ">complete</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントの前に、これらのイベントとは別に送信されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoader/load()" class="- topic/link "><linktext class="- topic/linktext ">URLLoader.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><shortdesc class="- topic/shortdesc ">
 URLLoader.load() の呼び出しによってセキュリティサンドボックスの外部にあるサーバーからデータを読み込もうとすると送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 URLLoader.load() の呼び出しによってセキュリティサンドボックスの外部にあるサーバーからデータを読み込もうとすると送出されます。また、<codeph class="+ topic/ph pr-d/codeph ">URLLoader.load()</codeph> の呼び出しによって SWZ ファイルをロードしようとした場合に、証明書が無効であるか、ダイジェストのストリングがコンポーネントと一致しないときに送出されます。
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoader/load()" class="- topic/link "><linktext class="- topic/linktext ">URLLoader.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 URLLoader.load() の呼び出し時に致命的なエラーが発生してダウンロードが終了した場合に送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 URLLoader.load() の呼び出し時に致命的なエラーが発生してダウンロードが終了した場合に送出されます。
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoader/load()" class="- topic/link "><linktext class="- topic/linktext ">URLLoader.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader_flash.events.ProgressEvent.PROGRESS_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><shortdesc class="- topic/shortdesc ">
 ダウンロード処理を実行中にデータを受信したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ダウンロード処理を実行中にデータを受信したときに送出されます。
 
 <p class="- topic/p ">URLLoader オブジェクトでは、完全にデータが受信されるまではデータにアクセスできません。このため、progress イベントの通知でしかダウンロードの進行状況を確認できません。完全にダウンロードされる前にデータにアクセスするには、URLStream オブジェクトを使用します。 </p>
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoader/load()" class="- topic/link "><linktext class="- topic/linktext ">URLLoader.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader_flash.events.Event.COMPLETE_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
 受信したすべてのデータがデコードされ、URLLoader オブジェクトの data プロパティに配置された後に送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 受信したすべてのデータがデコードされ、URLLoader オブジェクトの data プロパティに配置された後に送出されます。このイベントが送出されると、受信したデータにアクセスできます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoader/load()" class="- topic/link "><linktext class="- topic/linktext ">URLLoader.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader_flash.events.Event.OPEN_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><shortdesc class="- topic/shortdesc ">
 URLLoader.load() メソッドの呼び出しによりダウンロード処理が開始されると送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.OPEN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">処理が開始したときに送出されます。
 </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">URLLoader.load()</codeph> メソッドの呼び出しによりダウンロード処理が開始されると送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoader/load()" class="- topic/link "><linktext class="- topic/linktext ">URLLoader.load()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.net:URLLoader:URLLoader" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">URLLoader</apiName><shortdesc class="- topic/shortdesc ">
     URLLoader オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">request</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:URLRequest</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ダウンロードする URL を指定する URLRequest オブジェクトです。このパラメーターを省略すると、ロード操作は開始されません。指定すると、直ちにロード操作が開始されます。詳細については、<codeph class="+ topic/ph pr-d/codeph ">load</codeph> を参照してください。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     URLLoader オブジェクトを作成します。
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoader/load()" class="- topic/link "><linktext class="- topic/linktext ">URLLoader.load()</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:URLLoader:addEventListener" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addEventListener</apiName><shortdesc class="- topic/shortdesc ">
    
	イベントリスナーオブジェクトを EventDispatcher オブジェクトに登録し、リスナーがイベントの通知を受け取るようにします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">イベントのタイプです。
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">listener</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">イベントを処理するリスナー関数です。この関数は、<ph class="- topic/ph ">次の例のように</ph>、Event オブジェクトを唯一のパラメーターとして受け取り、何も返さないものである必要があります。
	
	
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">function(evt:Event):void</codeblock>
	
	<p class="- topic/p ">関数の名前は任意に付けられます。</p>
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useCapture</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
	<ph class="- topic/ph ">リスナーが、キャプチャ段階、またはターゲットおよびバブリング段階で動作するかどうかを判断します。<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定すると、リスナーはキャプチャ段階のみでイベントを処理し、ターゲット段階またはバブリング段階では処理しません。<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> を <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定すると、リスナーはターゲット段階またはバブリング段階のみでイベントを処理します。3 つの段階すべてでイベントを受け取るには、<codeph class="+ topic/ph pr-d/codeph ">addEventListener</codeph> を 2 回呼び出します。<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定して呼び出し、<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> を <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定してもう一度呼び出します。</ph>
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">priority</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">イベントリスナーの優先度レベルです。優先度は、符号付き 32 ビット整数で指定します。数値が大きくなるほど優先度が高くなります。優先度が <i class="+ topic/ph hi-d/i ">n</i> のすべてのリスナーは、優先度が <i class="+ topic/ph hi-d/i ">n</i>-1 のリスナーよりも前に処理されます。複数のリスナーに対して同じ優先度が設定されている場合、それらは追加された順番に処理されます。デフォルトの優先度は 0 です。
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useWeakReference</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">リスナーへの参照が強参照と弱参照のいずれであるかを判断します。デフォルトである強参照の場合は、リスナーのガベージコレクションが回避されます。弱参照では回避されません。 <p class="- topic/p ">クラスレベルメンバー関数はガベージコレクションの対象外であるため、クラスレベルメンバー関数の <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> は、ガベージコレクションの制限とは無関係に <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定できます。ネストされた内部の関数であるリスナーに対して <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定すると、その関数はガベージコレクションされ、永続的ではなくなります。inner 関数に対する参照を作成（別の変数に保存）した場合、その関数はガベージコレクションされず、永続化された状態のままになります。</p>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    
	イベントリスナーオブジェクトを EventDispatcher オブジェクトに登録し、リスナーがイベントの通知を受け取るようにします。<ph class="- topic/ph ">イベントリスナーは、特定のタイプのイベント、段階、および優先度に関する表示リスト内のすべてのノードに登録できます。</ph>
	
	
	
	<p class="- topic/p ">イベントリスナーが正常に登録された後に、<codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> をさらに呼び出して優先度を変更することはできません。リスナーの優先度を変更するには、最初に <codeph class="+ topic/ph pr-d/codeph ">removeListener()</codeph> を呼び出す必要があります。その後、同じリスナーを新しい優先度レベルで再度登録できます。 </p>
	
	<p class="- topic/p ">リスナーが登録された後に、<codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph>（<codeph class="+ topic/ph pr-d/codeph ">type</codeph> または <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> に別の値を設定）を再度呼び出すと、別のリスナー登録が作成されることに注意してください。<ph class="- topic/ph ">例えば、最初にリスナーを登録するときに <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定すると、そのリスナーはキャプチャ段階のみでリスニングします。同じリスナーオブジェクトを使用して再度 <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> を呼び出すと（このとき、<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> に <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を設定）、異なる 2 つのリスナーが登録されます。1 つはキャプチャ段階でリスニングするリスナーで、もう 1 つはターゲット段階とバブリング段階でリスニングするリスナーです。</ph>
	</p>
	
	<p class="- topic/p ">ターゲット段階またはバブリング段階のみを対象とするイベントリスナーを登録することはできません。登録時にこれらの段階が組み合わされるのは、バブリングはターゲットノードの祖先にしか適用されないためです。</p>
	
	<p class="- topic/p ">イベントリスナーが不要になった場合は、<codeph class="+ topic/ph pr-d/codeph ">removeEventListener()</codeph> を呼び出して、イベントリスナーを削除します。削除しない場合、メモリの問題が発生する可能性があります。ガベージコレクションでは、オブジェクトの送出が行われている限り、リスナーを削除しないので、イベントリスナーは自動的には削除されません（<codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> パラメーターが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定されていない場合）。</p>
		
	<p class="- topic/p ">EventDispatcher インスタンスをコピーしても、それに関連付けられているイベントリスナーはコピーされません。新しく作成したノードにイベントリスナーが必要な場合は、ノードを作成した後に、リスナーを関連付ける必要があります。ただし、EventDispatcher インスタンスを移動した場合は、関連付けられているイベントリスナーも一緒に移動されます。</p>
	
	
	<p class="- topic/p ">イベントがノードで処理されるときに、イベントリスナーがそのノードに登録中であれば、イベントリスナーは現在の段階ではトリガーされません。ただし、バブリング段階など、イベントフローの後の段階でトリガーすることができます。</p>
	
	<p class="- topic/p ">イベントがノードで処理されているときにイベントリスナーがノードから削除された場合でも、イベントは現在のアクションによってトリガーされます。削除された後は、その後の処理で再び登録されない限り、イベントリスナーは二度と呼び出されません。 </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLLoader:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     進行中のロード操作は直ちに終了します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     進行中のロード操作は直ちに終了します。進行中のロード操作は直ちに終了します。URL が現在ストリーミングされていない場合、無効なストリームエラーがスローされます。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLLoader:load" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">load</apiName><shortdesc class="- topic/shortdesc ">
     指定された URL からデータを送信およびロードします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">URLRequest.requestHeader</codeph> オブジェクトには、禁止されている特定の HTTP リクエストヘッダーを含めることはできません。詳細については、URLRequestHeader クラスの説明を参照してください。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、次の理由で発生する可能性があります。1) <ph class="- topic/ph ">Flash Player または</ph> AIR では <codeph class="+ topic/ph pr-d/codeph ">URLRequest.data</codeph> パラメーターを UTF8 から MBCS に変換できません。このエラーは、<codeph class="+ topic/ph pr-d/codeph ">load()</codeph> に渡された URLRequest オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> 操作を行うように設定されている場合、および <codeph class="+ topic/ph pr-d/codeph ">System.useCodePage</codeph> が <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定されている場合に発生することがあります。2) <ph class="- topic/ph ">Flash Player または</ph> AIR では <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> データにメモリを割り当てることができません。このエラーは、<codeph class="+ topic/ph pr-d/codeph ">load</codeph> に渡された URLRequest オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> 操作を行うように設定されている場合に発生することがあります。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">MemoryError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:MemoryError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">信頼されていないローカルファイルはインターネットへの接続を許可されません。この問題は、このファイルを local-with-networking または trusted として分類し直すことで回避できます。
     
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一般的な予約ポートに接続しようとしています。遮断されたポートの詳しいリストについては、『ActionScript 3.0 開発ガイド<i class="+ topic/ph hi-d/i "/>』の「ネットワーク API の制限」を参照してください。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">要求パラメーターの値、または渡された URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">URLRequest.url</codeph> プロパティの値は <codeph class="+ topic/ph pr-d/codeph ">null</codeph> です。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">request</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:URLRequest</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ダウンロードする URL を指定する URLRequest オブジェクトです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定された URL からデータを送信およびロードします。<codeph class="+ topic/ph pr-d/codeph ">dataFormat</codeph> プロパティに設定した値に基づき、テキスト、生のバイナリデータ、または URL エンコードされた変数としてデータを受け取ることができます。<codeph class="+ topic/ph pr-d/codeph ">dataFormat</codeph> プロパティのデフォルト値はテキストです。データを指定された URL に送信する場合は、URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティを設定できます。
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>読み込み中のファイルに ASCII 文字以外の文字（英語以外の多くの言語に存在する）が含まれている場合は、ASCII のような非 Unicode 形式ではなく UTF-8 または UTF-16 エンコーディング形式でファイルを保存することをお勧めします。</p>
     
     <p class="- topic/p "> ローカルファイルシステムのサンドボックスの SWF ファイルは、ネットワーク上のサンドボックス内のリソースからデータを読み込んだり、リソースにデータを書き込んだりしないことがあります。</p>
     
     <p class="- topic/p "> デフォルトで、呼び出し元の SWF ファイルおよびロードする URL は同じドメインに置かれている必要があります。例えば、www.adobe.com に置かれている SWF ファイルは www.adobe.com に置かれているソースからのみデータをロードできます。 異なるドメインからデータをロードするには、データをホストするサーバーに URL ポリシーファイルを配置します。</p>
     
     <p class="- topic/p ">一般的な予約ポートには接続できません。遮断されたポートの詳しいリストについては、『ActionScript 3.0 開発ガイド<i class="+ topic/ph hi-d/i "/>』の「ネットワーク API の制限」を参照してください。</p>
     
     <p class="- topic/p "> Flash Player 10 以降では、"multipart/form-data" などのマルチパート Content-Type にアップロードが含まれていると（アップロードが含まれているかどうかは POST ボディ内の "content-disposition" ヘッダーの "filename" パラメーターで示されます）、そのアップロードに適用されるセキュリティ規則によって POST 処理が拘束されます。</p>
     <ul class="- topic/ul "><li class="- topic/li ">POST 処理は、マウスのクリックやキーの押下などのユーザーが開始したアクションに応答して実行する必要があります。</li><li class="- topic/li ">POST 処理がクロスドメインである（POST ターゲットが、POST 要求を送信中の SWF ファイルと同じサーバー上にない）場合は、クロスドメインアクセスを許可する URL ポリシーファイルをターゲットサーバーが提供する必要があります。</li></ul>
     <p class="- topic/p ">また、すべてのマルチパート Content-Type では、RFC2046 標準に準拠した有効なシンタックスを使用する必要があります。シンタックスが有効でない場合は、アップロードに適用されるセキュリティ規則によって POST 処理が拘束されます。</p>
     
     <p class="- topic/p ">セキュリティについて詳しくは、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
     
     
     </apiDesc><example conref="examples\URLLoader_loadExample.as" class="- topic/example "> 次の例は、XML ファイルをロードし、そのエレメントの最初の引数の内容をテキストフィールドに表示します。
 
 <p class="- topic/p ">XML ファイルの場所を示す <codeph class="+ topic/ph pr-d/codeph ">URLRequest</codeph> オブジェクトを作成します。この例では、XML ファイルは SWF ファイルと同じディレクトリにあります。発生する可能性のあるエラーをキャッチするために、<codeph class="+ topic/ph pr-d/codeph ">try...catch</codeph> ブロックにファイルをロードします。この例では、<codeph class="+ topic/ph pr-d/codeph ">SecurityError</codeph> エラーをキャッチします。<codeph class="+ topic/ph pr-d/codeph ">IO_ERROR</codeph> イベントが発生すると、<codeph class="+ topic/ph pr-d/codeph ">errorHandler()</codeph> メソッドを呼び出します。このメソッドは、<codeph class="+ topic/ph pr-d/codeph ">xmlTextField</codeph> テキストフィールドにエラーメッセージを書き込みます。XML ファイルのデータを受信して <codeph class="+ topic/ph pr-d/codeph ">loader</codeph> URLLoader オブジェクトのデータプロパティに格納した後、<codeph class="+ topic/ph pr-d/codeph ">Event.COMPLETE</codeph> イベントを送出し、<codeph class="+ topic/ph pr-d/codeph ">loaderCompleteHandler()</codeph> メソッドを呼び出します。</p>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">loaderCompleteHandler()</codeph> メソッドで、<codeph class="+ topic/ph pr-d/codeph ">try...catch</codeph> ブロックを使用して、ロードしたデータをファイルから XML オブジェクトに変換する際に発生する解析エラーをキャッチします。次に、<codeph class="+ topic/ph pr-d/codeph ">readNodes()</codeph> メソッドで XML ドキュメントのノード内にあるすべてのエレメントを回帰的に読み取り、すべてのエレメントの先頭にある属性のリストを <codeph class="+ topic/ph pr-d/codeph ">xmlTextField</codeph> テキストフィールドに付加します。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.events.Event;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.xml.*;
    import flash.events.IOErrorEvent;
  
    public class URLLoader_loadExample extends Sprite {
        private var xmlTextField:TextField = new TextField();
        private var externalXML:XML;    
        private var loader:URLLoader;

        public function URLLoader_loadExample() {
            var request:URLRequest = new URLRequest("xmlFile.xml");

            loader = new URLLoader();
            
            try {
                loader.load(request);
            }
            catch (error:SecurityError)
            {
                trace("A SecurityError has occurred.");
            }

             loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
            loader.addEventListener(Event.COMPLETE, loaderCompleteHandler);

            xmlTextField.x = 10;
            xmlTextField.y = 10;
            xmlTextField.background = true;
            xmlTextField.autoSize = TextFieldAutoSize.LEFT;

            addChild(xmlTextField);
        }

        private function loaderCompleteHandler(event:Event):void {

                try {
                    externalXML = new XML(loader.data);
                    readNodes(externalXML);    
                } catch (e:TypeError) {
                    trace("Could not parse the XML file.");
                }
        }

        private function readNodes(node:XML):void {

                for each (var element:XML in node.elements()) {
                    xmlTextField.appendText(element.attributes()[0] + "\n");

                    readNodes(element);
                }    
        }

        private function errorHandler(e:IOErrorEvent):void {
            xmlTextField.text = "Had problem loading the XML File.";
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequestHeader" class="- topic/link "><linktext class="- topic/linktext ">URLRequestHeader</linktext></link><link href="flash.net.xml#URLRequest/requestHeaders" class="- topic/link "><linktext class="- topic/linktext ">URLRequest.requestHeaders</linktext></link><link href="flash.net.xml#URLRequest/data" class="- topic/link "><linktext class="- topic/linktext ">URLRequest.data</linktext></link><link href="flash.net.xml#URLRequest/digest" class="- topic/link "><linktext class="- topic/linktext ">URLRequest.digest</linktext></link></related-links><adobeApiEvent id="flash.net:URLLoader:load_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データが正常にロードされた後に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">データが正常にロードされた後に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader:load_httpStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpStatus</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">アクセスが HTTP 経由で、現在の Flash Player 環境がステータスコードの取得をサポートしている場合、<codeph class="+ topic/ph pr-d/codeph ">complete</codeph> または <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントに加えて、これらのイベントを受け取る場合があります。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">アクセスが HTTP 経由で、現在の Flash Player 環境がステータスコードの取得をサポートしている場合、完了イベントやエラーイベントに加えて、これらのイベントを受け取る場合があります。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader:load_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ロード操作を完了できませんでした。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ロード操作を完了できませんでした。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader:load_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ダウンロード処理を実行中にデータを受信したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ダウンロード処理を実行中にデータを受信したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader:load_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">呼び出し元のセキュリティ Sandbox の外部にあるサーバーからデータを取得しようとするロード操作です。これはサーバー上のポリシーファイルを使用すると回避できます。
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">呼び出し元のセキュリティ Sandbox の外部にあるサーバーからデータを取得しようとするロード操作です。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader:load_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ロード操作で SWZ ファイル（Adobe プラットフォームコンポーネント）を読み込もうとしましたが、証明書が無効であるか、ダイジェストがコンポーネントと一致しません。
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ロード操作で SWZ ファイル（Adobe プラットフォームコンポーネント）を読み込もうとしましたが、証明書が無効であるか、ダイジェストがコンポーネントと一致しません。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader:load_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ロード操作が開始したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ロード操作が開始したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader:load_httpResponseStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpResponseStatus</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">load()</codeph> メソッドを呼び出して HTTP を介してデータにアクセスを試み、Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">load() メソッドを呼び出して HTTP を介してデータにアクセスを試み、Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.net:URLLoader:bytesLoaded" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesLoaded</apiName><shortdesc class="- topic/shortdesc ">
     ロード操作中に、既にロード済みのデータのバイト数を示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ロード操作中に、既にロード済みのデータのバイト数を示します。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLLoader:bytesTotal" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesTotal</apiName><shortdesc class="- topic/shortdesc ">
     ダウンロードデータの合計バイト数を示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ダウンロードデータの合計バイト数を示します。このプロパティは、ロード操作の進行中は 0 を格納し、操作が完了した時点で設定されます。また、Content-Length ヘッダーがない場合、bytesTotal の値が不確定になります。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLLoader:dataFormat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dataFormat</apiName><shortdesc class="- topic/shortdesc ">
     ダウンロードしたデータがテキスト（URLLoaderDataFormat.TEXT）生のバイナリデータ （URLLoaderDataFormat.BINARY）、または URL エンコードされた変数（URLLoaderDataFormat.VARIABLES）のいずれであるかを制御します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">text</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiDefaultValue>URLLoaderDataFormat.TEXT
     </apiDefaultValue><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">ダウンロードされたデータの受信方法を制御します。
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ダウンロードしたデータがテキスト（<codeph class="+ topic/ph pr-d/codeph ">URLLoaderDataFormat.TEXT</codeph>）、生のバイナリデータ（<codeph class="+ topic/ph pr-d/codeph ">URLLoaderDataFormat.BINARY</codeph>）、または URL エンコードされた変数（<codeph class="+ topic/ph pr-d/codeph ">URLLoaderDataFormat.VARIABLES</codeph>）のいずれであるかを制御します。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">dataFormat</codeph> プロパティの値が <codeph class="+ topic/ph pr-d/codeph ">URLLoaderDataFormat.TEXT</codeph> の場合、受け取るデータは、ロードされたファイルのテキストを含むストリングです。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">dataFormat</codeph> プロパティの値が <codeph class="+ topic/ph pr-d/codeph ">URLLoaderDataFormat.BINARY</codeph> の場合、受け取るデータは、生のバイナリデータを含む ByteArray オブジェクトです。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">dataFormat</codeph> プロパティの値が <codeph class="+ topic/ph pr-d/codeph ">URLLoaderDataFormat.VARIABLES</codeph> の場合、受け取るデータは、URL エンコードされた変数を含む URLVariables オブジェクトです。</p>
     
     </apiDesc><example conref="examples\URLLoader_dataFormat.as" class="- topic/example "> 次の例は外部テキストファイルをロードする方法を示しています。 URLRequest クラスと URLLoader クラスを使用して、完了イベントを待機します。<xref href="http://actionscriptexamples.com/2008/02/26/loading-text-files-using-the-urlloader-class-in-actionscript-30/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref> で作成された例。 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var PATH:String = "lorem.txt";
var urlRequest:URLRequest = new URLRequest(PATH);
var urlLoader:URLLoader = new URLLoader();
urlLoader.dataFormat = URLLoaderDataFormat.TEXT; // default
urlLoader.addEventListener(Event.COMPLETE, urlLoader_complete);
urlLoader.load(urlRequest);
 
function urlLoader_complete(evt:Event):void {
    textArea.text = urlLoader.data;
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoaderDataFormat" class="- topic/link "><linktext class="- topic/linktext ">URLLoaderDataFormat</linktext></link></related-links></apiValue><apiValue id="flash.net:URLLoader:data" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><shortdesc class="- topic/shortdesc ">
     ロード操作によって受信したデータです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiType value="" name="type" class="- topic/state reference/state apiRef/apiType "/></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ロード操作によって受信したデータです。このプロパティは、ロード操作が完了したときにのみ設定されます。データの形式は、<codeph class="+ topic/ph pr-d/codeph ">dataFormat</codeph> プロパティの設定によって決まります。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">dataFormat</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">URLLoaderDataFormat.TEXT</codeph> の場合、受け取るデータは、ロードされたファイルのテキストを含むストリングです。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">dataFormat</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">URLLoaderDataFormat.BINARY</codeph> の場合、受け取るデータは、生のバイナリデータを含む ByteArray オブジェクトです。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">dataFormat</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">URLLoaderDataFormat.VARIABLES</codeph> の場合、受け取るデータは、URL エンコードされた変数を含む URLVariables オブジェクトです。</p>
     
     </apiDesc><example conref="examples\URLLoader_data.as" class="- topic/example "> 次の例は、URLLoader クラスを使用し、dataFormat プロパティを URLLoaderDataFormat.VARIABLES 定数（「変数」）に設定して、URL エンコードされた変数を含む外部テキストファイルを ActionScript 3.0 ドキュメントにロードする方法を示しています。<xref href="http://actionscriptexamples.com/2008/02/27/loading-url-encoded-variables-into-a-flash-application-using-the-urlloader-class-in-actionscript-30/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref> で作成された例。 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
//params.txt is a local file that includes: firstName=Tom&amp;lastName=Jones
var lbl:TextField = new TextField();
var urlRequest:URLRequest = new URLRequest("params.txt");
var urlLoader:URLLoader = new URLLoader();
urlLoader.dataFormat = URLLoaderDataFormat.VARIABLES;
urlLoader.addEventListener(Event.COMPLETE, urlLoader_complete);
urlLoader.load(urlRequest);
 
function urlLoader_complete(evt:Event):void {
    lbl.text = urlLoader.data.lastName + "," + urlLoader.data.firstName;
    addChild(lbl);
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoaderDataFormat" class="- topic/link "><linktext class="- topic/linktext ">URLLoaderDataFormat</linktext></link><link href="flash.net.xml#URLLoader/dataFormat" class="- topic/link "><linktext class="- topic/linktext ">URLLoader.dataFormat</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:IDynamicPropertyOutput" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">IDynamicPropertyOutput</apiName><shortdesc class="- topic/shortdesc ">
	 このインターフェイスは、ダイナミックオブジェクトのダイナミックプロパティの直列化を制御します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiInterface class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiInterface "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier "/></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 このインターフェイスは、ダイナミックオブジェクトのダイナミックプロパティの直列化を制御します。このインターフェイスは、IDynamicPropertyWriter インターフェイスおよび <codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.dynamicPropertyWriter</codeph> プロパティと組み合わせて使用します。
	 
     </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#IDynamicPropertyWriter" class="- topic/link "><linktext class="- topic/linktext ">IDynamicPropertyWriter</linktext></link><link href="flash.net.xml#ObjectEncoding/dynamicPropertyWriter" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding.dynamicPropertyWriter</linktext></link></related-links><apiOperation id="flash.net:IDynamicPropertyOutput:flash.net:IDynamicPropertyOutput:writeDynamicProperty" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeDynamicProperty</apiName><shortdesc class="- topic/shortdesc ">
		 ダイナミックプロパティを、直列化オブジェクトのバイナリ出力に追加します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">プロパティの名前です。このパラメーターは、ダイナミックオブジェクトの既存のプロパティ名を指定する場合、または新しいプロパティを作成する場合に使用できます。  
		 
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定されたプロパティに書き込む値です。
		 
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 ダイナミックプロパティを、直列化オブジェクトのバイナリ出力に追加します。続いて、<codeph class="+ topic/ph pr-d/codeph ">readObject</codeph> などのメソッドを使用してオブジェクトが読み取られると、新しいプロパティが設定されます。このメソッドを使用して、動的オブジェクトのプロパティの直列化からの除外、動的オブジェクトのプロパティへの値の書き込み、または新しいプロパティの作成を実行できます。
		 
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#IDynamicPropertyWriter" class="- topic/link "><linktext class="- topic/linktext ">IDynamicPropertyWriter</linktext></link><link href="flash.net.xml#ObjectEncoding/dynamicPropertyWriter" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding.dynamicPropertyWriter</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier languages="" id="flash.net:NetStreamPlayOptions" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetStreamPlayOptions</apiName><shortdesc class="- topic/shortdesc ">
 
 NetStreamPlayOptions クラスでは、NetStream.play2() メソッドに渡すことができる様々なオプションを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">NetStreamPlayOptions クラスでは、NetStream.play2() メソッドに渡すことができる様々なオプションを指定します。
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 
 NetStreamPlayOptions クラスでは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> メソッドに渡すことができる様々なオプションを指定します。NetStreamPlayOptions オブジェクトを <codeph class="+ topic/ph pr-d/codeph ">play2()</codeph> に渡し、クラスのプロパティで様々なオプションを指定します。このクラスの主な使用方法は、ストリーム間で動的にトランザクションを実装して、異なるビットレートおよびサイズのストリームに切り替えたり、再生リストの異なるコンテンツに入れ替えたりすることです。
 
 </apiDesc></apiClassifierDetail><apiConstructor id="flash.net:NetStreamPlayOptions:NetStreamPlayOptions" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">NetStreamPlayOptions</apiName><shortdesc class="- topic/shortdesc ">
     
     NetStreamPlayOptions オブジェクトを作成し、NetStream.play2() メソッドに渡すオプションを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     NetStreamPlayOptions オブジェクトを作成し、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> メソッドに渡すオプションを指定します。 
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link></related-links></apiConstructor><apiValue id="flash.net:NetStreamPlayOptions:len" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">len</apiName><shortdesc class="- topic/shortdesc ">
    streamName で指定されているストリームの再生の継続時間（秒単位）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">streamName で指定されているストリームの再生の継続時間（秒単位）。
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph> で指定されているストリームの再生の継続時間（秒単位）。デフォルト値は -1 で、-1 を指定すると Flash Player は使用できなるまでライブストリームを再生するか、記録されているストリームの最後まで再生します。<codeph class="+ topic/ph pr-d/codeph ">len</codeph> に 0 を指定すると、記録されているストリームの最初から <codeph class="+ topic/ph pr-d/codeph ">start</codeph> 秒の単一フレームを再生します（<codeph class="+ topic/ph pr-d/codeph ">start</codeph> に 0 以上が設定されている場合）。
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">len</codeph> に正の値を設定すると、Flash Player はライブストリームが使用可能になった後、<codeph class="+ topic/ph pr-d/codeph ">len</codeph> 秒再生するか、記録されているストリームを <codeph class="+ topic/ph pr-d/codeph ">len</codeph> 秒再生します（ストリームが<codeph class="+ topic/ph pr-d/codeph ">len</codeph> 秒より短い場合は、ストリームが終了した時点で再生は終了します）。</p> 
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">len</codeph> に -1 以外の負の数を指定すると、Flash Player は値に -1 が指定されたものと解釈します。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/start" class="- topic/link "><linktext class="- topic/linktext ">start</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayOptions:offset" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">offset</apiName><shortdesc class="- topic/shortdesc ">
     新しいストリームへの切り替え時のストリーム再生時間（秒単位）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     新しいストリームへの切り替え時のストリーム再生時間（秒単位）。<codeph class="+ topic/ph pr-d/codeph ">offset</codeph> パラメーターは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> 呼び出しが、<codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayTransitions.SWITCH</codeph> トランジションモードで行われるときに使用されます。Flash Media Server は、指定されたオフセット時間後の最も近い切り替えポイントを探して、そのポイントから新しいストリームのストリーミングを開始します。 
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">高速切り替え</b></p>
     
     <p class="- topic/p ">このプロパティが指定されると、Flash Media Server は現在のストリームを先取りし、キーフレームを見つけるまで待機することなく、指定されたインデックス位置からすぐに新しいストリームのストリーミングを開始します。前のストリームからバッファーされているオフセット後のすべてのデータは消去されます。このテクニックでは、古いストリームからバッファされたデータを再生する必要がないので、標準の切り替えよりも迅速に新しいストリームに切り替えることができます。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">offset</codeph> のデフォルト値は -1 です。これは高速切り替えモードです。このモードでは、<codeph class="+ topic/ph pr-d/codeph ">netstream.time + 3</codeph> 後の最初に使用できるキーフレームで切り替えが発生します。これは、再生ポイントの約 3 秒後です。</p>
     
     <p class="- topic/p ">オフセット値は現在の再生時間（<codeph class="+ topic/ph pr-d/codeph ">Netstream.time</codeph>）よりも高い値にする必要があります。この値が小さいと、<codeph class="+ topic/ph pr-d/codeph ">NetStream.Play.Failed</codeph> ステータスイベントが送信されます。</p>
     
     <p class="- topic/p ">詳しくは、『Adobe Flash Media Server デベロッパーズガイド<i class="+ topic/ph hi-d/i "/>』の「<xref href="http://www.adobe.com/go/learn_fms_fastswitch_jp" scope="external" class="- topic/xref ">ストリーミング間の高速切り替え</xref>」を参照してください。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamPlayOptions/start" class="- topic/link "><linktext class="- topic/linktext ">start</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link><link href="flash.net.xml#NetStream/time" class="- topic/link "><linktext class="- topic/linktext ">NetStream.time</linktext></link><link href="flash.net.xml#NetStreamPlayTransitions/SWITCH" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayTransitions.SWITCH</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayOptions:oldStreamName" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">oldStreamName</apiName><shortdesc class="- topic/shortdesc ">
    前のストリームの名前またはトランジション元のストリームの名前。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    前のストリームの名前またはトランジション元のストリームの名前。トランジションは実行せずにストリームを再生するためだけに <codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> を使用するときは、このプロパティの値は null または未定義にしておきます。トランジションを実行するときは、トランジション元のストリームを指定します。   
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamPlayOptions/streamName" class="- topic/link "><linktext class="- topic/linktext ">streamName</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayOptions:start" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">start</apiName><shortdesc class="- topic/shortdesc ">
    streamName の開始時間（秒単位）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">streamName の開始時間（秒単位）。
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph> の開始時間（秒単位）。有効な値は -2、-1、および 0 です。
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">start</codeph> のデフォルト値は -2 で、-2 を指定すると Flash Player は <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph> で指定されているライブストリームを最初に再生しようとします。この名前のライブストリームが見つからない場合、Flash Player は <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph> で指定されている記録されたストリームを再生します。ライブストリームも記録されたストリームも見つからない場合、Flash Player は、だれもパブリッシュしていなくても <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph> という名前のライブストリームを開きます。だれかがそのストリームのパブリッシュを開始すると、Flash Player はそのストリームの再生を開始します。</p>
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">start</codeph> に -1 を指定すると、Flash Player は <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph> で指定されているライブストリームだけを再生します。ライブストリームが見つからない場合で <codeph class="+ topic/ph pr-d/codeph ">len</codeph> が -1 に設定されていると、Flash Player は待ち状態のままになります。<codeph class="+ topic/ph pr-d/codeph ">len</codeph> が -1 以外に設定されていると、Flash Player は <codeph class="+ topic/ph pr-d/codeph ">len</codeph> 秒の間待った後、再生リストの次のアイテムの再生を開始します。</p>
    
    <p class="- topic/p "> <codeph class="+ topic/ph pr-d/codeph ">start</codeph> に 0 または正の値を設定すると、Flash Player は <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph> という名前の記録されたストリームだけを、ストリームの最初から <codeph class="+ topic/ph pr-d/codeph ">start</codeph> 秒の位置から再生を始めます。記録されたストリームが見つからない場合は、Flash Player は直ちに再生リストの次のアイテムの再生を開始します。</p>
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">start</codeph> に -1 および -2 以外の負の数を設定すると、Flash Player は値に -2 が指定されたものと解釈します。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/len" class="- topic/link "><linktext class="- topic/linktext ">長さ</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayOptions:streamName" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">streamName</apiName><shortdesc class="- topic/shortdesc ">
    トランジションまたは再生する新しいストリームの名前。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    トランジションまたは再生する新しいストリームの名前。<codeph class="+ topic/ph pr-d/codeph ">oldStreamName</codeph> が null または未定義のときは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> を呼び出すだけで <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph> の再生が開始されます。<codeph class="+ topic/ph pr-d/codeph ">oldStreamName</codeph> が指定されていると、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> を呼び出すことで、<codeph class="+ topic/ph pr-d/codeph ">oldStreamName</codeph> が <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph> にトランジションされます（<codeph class="+ topic/ph pr-d/codeph ">transition</codeph> プロパティで指定されている移行モードを使用）。 
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamPlayOptions/oldStreamName" class="- topic/link "><linktext class="- topic/linktext ">oldStreamName</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayOptions:transition" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">transition</apiName><shortdesc class="- topic/shortdesc ">
    streamName が再生または移行されるモード。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">streamName が再生または移行されるモード。
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph> が再生または移行されるモード。正の値は、NetStreamPlayTransitions クラスの定数です。<codeph class="+ topic/ph pr-d/codeph ">Netstream.play2()</codeph> が再生のために呼び出されたのか移行のために呼び出されたのかによって、移行モードの動作は異なります。移行モードについて詳しくは、NetStreamPlayTransitions クラスを参照してください。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamPlayTransitions" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayTransitions</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetStreamMulticastInfo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetStreamMulticastInfo</apiName><shortdesc class="- topic/shortdesc ">
NetStreamMulticastInfo クラスは、NetStream オブジェクトの基盤となる RTMFP ピアーツーピアーおよび IP マルチキャストストリーム転送に関する多様なサービス品質（QoS）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
NetStreamMulticastInfo クラスは、NetStream オブジェクトの基盤となる RTMFP ピアーツーピアーおよび IP マルチキャストストリーム転送に関する多様なサービス品質（QoS）を指定します。NetStreamMulticastInfo オブジェクトは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.multicastInfo</codeph> プロパティによって返されます。

<p class="- topic/p ">マルチキャストストリームの始まりから計算された合計を表す数字を返すプロパティ。これらのタイプのプロパティには、送信メディアバイト数や受信メディアフラグメントメッセージ数などがあります。数秒間にわたって平均された現在のレートのスナップショットを表すレートとなるプロパティ。これらのタイプのプロパティには、ローカルノードがデータを受信するレートなどがあります。 </p>

<p class="- topic/p ">NetStreamMulticastInfo オブジェクトに含まれる値のリストを表示するには、<codeph class="+ topic/ph pr-d/codeph ">NetStreamMulticastInfo.toString()</codeph> メソッドを使用します。</p>

</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/toString()" class="- topic/link "><linktext class="- topic/linktext ">toString()</linktext></link><link href="flash.net.xml#NetStream/multicastInfo" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.multicastInfo</linktext></link></related-links><apiOperation id="flash.net:NetStreamMulticastInfo:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
    NetStreamMulticastInfo オブジェクトのプロパティを列挙するストリングを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">NetStreamMulticastInfo オブジェクトのプロパティの値を含むストリング。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    NetStreamMulticastInfo オブジェクトのプロパティを列挙するストリングを返します。
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.net:NetStreamMulticastInfo:bytesPushedFromPeers:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesPushedFromPeers</apiName><shortdesc class="- topic/shortdesc ">
    事前にピアーから転送され、ローカルノードで受信されたメディアバイト数を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    事前にピアーから転送され、ローカルノードで受信されたメディアバイト数を指定します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesRequestedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesRequestedFromPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsPushedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsPushedFromPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsRequestedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsRequestedFromPeers</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:bytesPushedToPeers:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesPushedToPeers</apiName><shortdesc class="- topic/shortdesc ">
    ローカルノードが事前にピアーに転送したメディアバイト数を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ローカルノードが事前にピアーに転送したメディアバイト数を指定します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesRequestedByPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesRequestedByPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsPushedToPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsPushedToPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsRequestedByPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsRequestedByPeers</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:bytesReceivedFromIPMulticast:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesReceivedFromIPMulticast</apiName><shortdesc class="- topic/shortdesc ">
    ローカルノードが IP マルチキャストから受信したメディアバイト数を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ローカルノードが IP マルチキャストから受信したメディアバイト数を指定します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesReceivedFromServer" class="- topic/link "><linktext class="- topic/linktext ">bytesReceivedFromServer</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsReceivedFromIPMulticast" class="- topic/link "><linktext class="- topic/linktext ">fragmentsReceivedFromIPMulticast</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsReceivedFromServer" class="- topic/link "><linktext class="- topic/linktext ">fragmentsReceivedFromServer</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecondFromIPMulticast" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecondFromIPMulticast</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:bytesReceivedFromServer:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesReceivedFromServer</apiName><shortdesc class="- topic/shortdesc ">
    ローカルノードがサーバーから受信したメディアバイト数を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ローカルノードがサーバーから受信したメディアバイト数を指定します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesReceivedFromIPMulticast" class="- topic/link "><linktext class="- topic/linktext ">bytesReceivedFromIPMulticast</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsReceivedFromIPMulticast" class="- topic/link "><linktext class="- topic/linktext ">fragmentsReceivedFromIPMulticast</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsReceivedFromServer" class="- topic/link "><linktext class="- topic/linktext ">fragmentsReceivedFromServer</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecondFromServer" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecondFromServer</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:bytesRequestedByPeers:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesRequestedByPeers</apiName><shortdesc class="- topic/shortdesc ">
    ローカルノードが特定のフラグメントのピアーからの要求に応えて、それらのピアーに送信したメディアバイト数を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ローカルノードが特定のフラグメントのピアーからの要求に応えて、それらのピアーに送信したメディアバイト数を指定します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesPushedToPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesPushedToPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsPushedToPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsPushedToPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsRequestedByPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsRequestedByPeers</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:bytesRequestedFromPeers:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesRequestedFromPeers</apiName><shortdesc class="- topic/shortdesc ">
    ローカルノードが要求して、ピアーから受信したメディアバイト数を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ローカルノードが要求して、ピアーから受信したメディアバイト数を指定します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesPushedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesPushedFromPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsPushedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsPushedFromPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsRequestedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsRequestedFromPeers</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:fragmentsPushedFromPeers:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fragmentsPushedFromPeers</apiName><shortdesc class="- topic/shortdesc ">
    事前にピアーから転送され、ローカルノードで受信されたメディアフラグメントメッセージ数を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    事前にピアーから転送され、ローカルノードで受信されたメディアフラグメントメッセージ数を指定します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesPushedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesPushedFromPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/bytesRequestedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesRequestedFromPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsRequestedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsRequestedFromPeers</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:fragmentsPushedToPeers:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fragmentsPushedToPeers</apiName><shortdesc class="- topic/shortdesc ">
    ローカルノードが事前にピアーに転送したメディアフラグメントメッセージ数を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ローカルノードが事前にピアーに転送したメディアフラグメントメッセージ数を指定します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesPushedToPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesPushedToPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/bytesRequestedByPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesRequestedByPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsRequestedByPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsRequestedByPeers</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:fragmentsReceivedFromIPMulticast:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fragmentsReceivedFromIPMulticast</apiName><shortdesc class="- topic/shortdesc ">
    ローカルノードが IP マルチキャストから受信したメディアフラグメントメッセージ数を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ローカルノードが IP マルチキャストから受信したメディアフラグメントメッセージ数を指定します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesReceivedFromIPMulticast" class="- topic/link "><linktext class="- topic/linktext ">bytesReceivedFromIPMulticast</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/bytesReceivedFromServer" class="- topic/link "><linktext class="- topic/linktext ">bytesReceivedFromServer</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsReceivedFromServer" class="- topic/link "><linktext class="- topic/linktext ">fragmentsReceivedFromServer</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecondFromIPMulticast" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecondFromIPMulticast</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:fragmentsReceivedFromServer:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fragmentsReceivedFromServer</apiName><shortdesc class="- topic/shortdesc ">
    ローカルノードがサーバーから受信したメディアフラグメントメッセージ数を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ローカルノードがサーバーから受信したメディアフラグメントメッセージ数を指定します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesReceivedFromIPMulticast" class="- topic/link "><linktext class="- topic/linktext ">bytesReceivedFromIPMulticast</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/bytesReceivedFromServer" class="- topic/link "><linktext class="- topic/linktext ">bytesReceivedFromServer</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsReceivedFromIPMulticast" class="- topic/link "><linktext class="- topic/linktext ">fragmentsReceivedFromIPMulticast</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecondFromServer" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecondFromServer</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:fragmentsRequestedByPeers:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fragmentsRequestedByPeers</apiName><shortdesc class="- topic/shortdesc ">
    ローカルノードが特定のフラグメントのピアーからの要求に応えて、それらのピアーに送信したメディアフラグメントメッセージ数を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ローカルノードが特定のフラグメントのピアーからの要求に応えて、それらのピアーに送信したメディアフラグメントメッセージ数を指定します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesPushedToPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesPushedToPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/bytesRequestedByPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesRequestedByPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsPushedToPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsPushedToPeers</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:fragmentsRequestedFromPeers:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fragmentsRequestedFromPeers</apiName><shortdesc class="- topic/shortdesc ">
    ローカルノードが要求して、ピアーから受信したメディアフラグメントメッセージ数を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ローカルノードが要求して、ピアーから受信したメディアフラグメントメッセージ数を指定します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesPushedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesPushedFromPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/bytesRequestedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesRequestedFromPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsPushedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsPushedFromPeers</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:receiveControlBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">receiveControlBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
    ローカルノードがピアーから制御オーバーヘッドメッセージを受信するレート（1 秒あたりのバイト数）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ローカルノードがピアーから制御オーバーヘッドメッセージを受信するレート（1 秒あたりのバイト数）を指定します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecond</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecondFromServer" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecondFromServer</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecondFromIPMulticast" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecondFromIPMulticast</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/sendControlBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">sendControlBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:receiveDataBytesPerSecondFromIPMulticast:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">receiveDataBytesPerSecondFromIPMulticast</apiName><shortdesc class="- topic/shortdesc ">
    ローカルノードが IP マルチキャストからデータを受信するレート（1 秒あたりのバイト数）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ローカルノードが IP マルチキャストからデータを受信するレート（1 秒あたりのバイト数）を指定します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/receiveControlBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">receiveControlBytesPerSecond</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecond</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecondFromServer" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecondFromServer</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/sendDataBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">sendDataBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:receiveDataBytesPerSecondFromServer:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">receiveDataBytesPerSecondFromServer</apiName><shortdesc class="- topic/shortdesc ">
    ローカルノードがサーバーからメディアデータを受信するレート（1 秒あたりのバイト数）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ローカルノードがサーバーからメディアデータを受信するレート（1 秒あたりのバイト数）を指定します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/receiveControlBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">receiveControlBytesPerSecond</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecond</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecondFromIPMulticast" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecondFromIPMulticast</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/sendDataBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">sendDataBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:receiveDataBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">receiveDataBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
    ローカルノードがピアーおよびサーバーから、および IP マルチキャスト経由でメディアデータを受信するレート（1 秒あたりのバイト数）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ローカルノードがピアーおよびサーバーから、および IP マルチキャスト経由でメディアデータを受信するレート（1 秒あたりのバイト数）を指定します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/receiveControlBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">receiveControlBytesPerSecond</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecondFromIPMulticast" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecondFromIPMulticast</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecondFromServer" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecondFromServer</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/sendDataBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">sendDataBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:sendControlBytesPerSecondToServer:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">sendControlBytesPerSecondToServer</apiName><shortdesc class="- topic/shortdesc ">
    ローカルノードがサーバーに制御オーバーヘッドメッセージを送信するレート（1 秒あたりのバイト数）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ローカルノードがサーバーに制御オーバーヘッドメッセージを送信するレート（1 秒あたりのバイト数）を指定します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecondFromServer" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecondFromServer</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/sendControlBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">sendControlBytesPerSecond</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/sendDataBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">sendDataBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:sendControlBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">sendControlBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
    ローカルノードがピアーおよびサーバーに制御オーバーヘッドメッセージを送信するレート（1 秒あたりのバイト数）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ローカルノードがピアーおよびサーバーに制御オーバーヘッドメッセージを送信するレート（1 秒あたりのバイト数）を指定します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/receiveControlBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">receiveControlBytesPerSecond</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/sendControlBytesPerSecondToServer" class="- topic/link "><linktext class="- topic/linktext ">sendControlBytesPerSecondToServer</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/sendDataBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">sendDataBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:sendDataBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">sendDataBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
    ローカルノードがピアーにメディアデータを送信するレート（1 秒あたりのバイト数）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ローカルノードがピアーにメディアデータを送信するレート（1 秒あたりのバイト数）を指定します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecond</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/sendControlBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">sendControlBytesPerSecond</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/sendControlBytesPerSecondToServer" class="- topic/link "><linktext class="- topic/linktext ">sendControlBytesPerSecondToServer</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetworkInfo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetworkInfo</apiName><shortdesc class="- topic/shortdesc ">
 NetworkInfo クラスはコンピューター上のネットワークインターフェイスについての情報を提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 NetworkInfo クラスはコンピューター上のネットワークインターフェイスについての情報を提供します。 
 
 <p class="- topic/p ">AIR プロファイルのサポート：<i class="+ topic/ph hi-d/i "/>この機能はすべてのデスクトップオペレーティングシステムおよびテレビ用 AIR デバイスでサポートされますが、モバイルデバイスの種類によってはサポートされません。<codeph class="+ topic/ph pr-d/codeph ">NetworkInfo.isSupported</codeph> プロパティを使用して、サポートされているかどうかを実行時にテストすることができます。複数のプロファイル間での API サポートについて詳しくは、<xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">AIR プロファイルのサポート</xref>を参照してください。</p>
 
 <p class="- topic/p ">NetworkInfo オブジェクトはシングルトンオブジェクトです。NetworkInfo オブジェクトを 1 つ取得するには、静的 <codeph class="+ topic/ph pr-d/codeph ">NetworkInfo.networkInfo</codeph> プロパティを使用します。クラスコンストラクターの <codeph class="+ topic/ph pr-d/codeph ">new NetworkInfo()</codeph> は呼び出さないでください。</p>
 
 <p class="- topic/p ">ほとんどのコンピューターには、有線および無線ネットワークインターフェイスなどの 1 つ以上のインターフェイスがあります。VPN、ループバック、仮想インターフェイスなど、その他のインターフェイスがある場合もあります。</p>
 
 <p class="- topic/p ">NetworkInfo オブジェクトは、利用可能なインターフェイスが変わると、変更イベントを送出します。 最新のネットワーク情報を判別する <codeph class="+ topic/ph pr-d/codeph ">findInterfaces()</codeph> メソッドを呼び出します。</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>NativeApplication オブジェクトも、ネットワーク変更イベントを送出します。</p>
 
 </apiDesc><example conref="examples\NetInfoExample.as" class="- topic/example "/></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetworkInterface" class="- topic/link "><linktext class="- topic/linktext ">NetworkInterface クラス</linktext></link><link href="flash.net.xml#InterfaceAddress" class="- topic/link "><linktext class="- topic/linktext ">InterfaceAddress クラス</linktext></link></related-links><adobeApiEvent id="flash.net:NetworkInfo_flash.events.Event.NETWORK_CHANGE_networkChange" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">networkChange</apiName><shortdesc class="- topic/shortdesc ">
 ネットワークインターフェイスが変更されたときに送出されました。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.NETWORK_CHANGE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ネットワークインターフェイスが変更されたときに送出されました。
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.net:NetworkInfo:findInterfaces" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">findInterfaces</apiName><shortdesc class="- topic/shortdesc ">
     このマシンに関連したネットワークインターフェイスのリストを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">NetworkInterface オブジェクトの配列です。
     
     </apiDesc><apiType value="Vector$flash.net:NetworkInterface" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このマシンに関連したネットワークインターフェイスのリストを返します。 
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.net:NetworkInfo:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
	 ネットワークインターフェイス情報へのアクセスがクライアントシステム上でサポートされているかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><language>3.0 
	 </language></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ネットワークインターフェイス情報へのアクセスがクライアントシステム上でサポートされているかどうかを示します。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetworkInfo:networkInfo:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">networkInfo</apiName><shortdesc class="- topic/shortdesc ">
	 NetworkInfo オブジェクトのシングルトンインスタンスです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.net:NetworkInfo</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">AIR アプリケーションセキュリティサンドボックス外で実行されているコンテンツがこのプロパティにアクセスする場合。
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 NetworkInfo オブジェクトのシングルトンインスタンスです。
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:URLVariables" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">URLVariables</apiName><shortdesc class="- topic/shortdesc ">
 
 URLVariables クラスを使用すると、アプリケーションとサーバーの間で変数を転送できます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">URLVariables, constructor
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 
 URLVariables クラスを使用すると、アプリケーションとサーバーの間で変数を転送できます。URLVariables オブジェクトは、URLLoader クラスのメソッド、URLRequest クラスの <codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティ、および flash.net パッケージ関数で使用します。
 
 </apiDesc><example conref="examples\URLVariablesExample.as" class="- topic/example "> 次の例では、新しいブラウザーウィンドウで http://www.[yourDomain].com/application.jsp でホストされるリモートアプリケーションを開き、URLVariables オブジェクトで捕捉したユーザーセッションに関するデータをアプリケーションに渡します。 
  
 <p class="- topic/p ">この例のハイライトは、次のとおりです。</p>
 <ol class="- topic/ol "><li class="- topic/li ">コンストラクター関数が <codeph class="+ topic/ph pr-d/codeph ">request</codeph> という名前の URLRequest インスタンスを作成します。このとき、リモートアプリケーションの URL をパラメーターとして取ります。</li><li class="- topic/li ">URLVariables オブジェクトが作成され、その 2 つのプロパティに値が割り当てられます。</li><li class="- topic/li ">URLVariables オブジェクトが URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティに割り当てられます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">navigateToURL</codeph> を呼び出して、リモートアプリケーションの URL 用の新しいブラウザーウィンドウを開きます。</li></ol>
 <p class="- topic/p "> <b class="+ topic/ph hi-d/b ">注意：</b>この例を実行するには、この例のリモートアプリケーションの URL を実際の URL に置き換える必要があります。さらに、URLVariables オブジェクトの Flash Player で捕捉した情報を処理するためのサーバーコードが必要です。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.net.URLVariables;

    public class URLVariablesExample extends Sprite {

        public function URLVariablesExample() {
            var url:String = "http://www.[yourDomain].com/application.jsp";
            var request:URLRequest = new URLRequest(url);
            var variables:URLVariables = new URLVariables();
            variables.exampleSessionId = new Date().getTime();
            variables.exampleUserLabel = "guest";
            request.data = variables;
            navigateToURL(request);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoader" class="- topic/link "><linktext class="- topic/linktext ">URLLoader</linktext></link></related-links><apiConstructor id="flash.net:URLVariables:URLVariables" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">URLVariables</apiName><shortdesc class="- topic/shortdesc ">
	 新しい URLVariables オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">source</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">名前と値のペアを含む、URL エンコードされたストリングです。
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 新しい URLVariables オブジェクトを作成します。URLVariables オブジェクトを URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティに渡します。
	 
	 <p class="- topic/p ">ストリングを指定して URLVariables コンストラクターを呼び出すと、<codeph class="+ topic/ph pr-d/codeph ">decode()</codeph> メソッドが自動的に呼び出されて、そのストリングが URLVariables オブジェクトのプロパティに変換されます。</p>
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.net:URLVariables:decode" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">decode</apiName><shortdesc class="- topic/shortdesc ">
	 変数ストリングを、指定された URLVariables オブジェクトのプロパティに変換します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">URLVariables, URLVariables.decode, decode
	 </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">source パラメーターは、名前と値のペアを含む、URL エンコードされたクエリストリングでなければなりません。
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">source</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">名前と値のペアを含む、URL エンコードされたクエリストリングです。	 
	 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 変数ストリングを、指定された URLVariables オブジェクトのプロパティに変換します。
	 <p class="- topic/p ">このメソッドは、URLVariables イベントによって内部的に使用されます。ほとんどの場合、ユーザーが直接このメソッドを呼び出す必要はありません。</p>
	 
	 </apiDesc><example conref="examples\URLVariables_decode.as" class="- topic/example "> 次の例は、URL エンコードされたストリングを解析する方法を示します。<xref href="http://actionscriptexamples.com/2008/02/27/decoding-url-encoded-strings-in-a-flash-application-using-the-urlvariables-class-in-actionscript-30/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref> で作成された例。 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// The first method passes the string to be decoded to the URLVariables class constructor:
var urlVariables:URLVariables = new URLVariables("firstName=Tom&amp;lastName=Jones");
lbl.text = urlVariables.lastName + "," + urlVariables.firstName;

// The second method uses the decode() method to parse the URL encoded string:
var urlVariables:URLVariables = new URLVariables();
urlVariables.decode("firstName=Tom&amp;lastName=Jones");
lbl.text = urlVariables.lastName + "," + urlVariables.firstName;
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLVariables:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 列挙可能な変数をすべて含むストリングを、MIME コンテンツエンコード application/x-www-form-urlencoded で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">URLVariables, URLVariables.toString, toString
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">名前と値のペアを含む、URL エンコードされたストリングです。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 列挙可能な変数をすべて含むストリングを、MIME コンテンツエンコード <i class="+ topic/ph hi-d/i ">application/x-www-form-urlencoded</i> で返します。
	 
	 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier languages="" id="flash.net:IDynamicPropertyWriter" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">IDynamicPropertyWriter</apiName><shortdesc class="- topic/shortdesc ">
     このインターフェイスを IDynamicPropertyOutput インターフェイスと共に使用して、ダイナミックオブジェクトのダイナミックプロパティの直列化を制御します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiInterface class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiInterface "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier "/></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このインターフェイスを IDynamicPropertyOutput インターフェイスと共に使用して、ダイナミックオブジェクトのダイナミックプロパティの直列化を制御します。このインターフェイスを使用するには、IDynamicPropertyWriter インターフェイスを実装するオブジェクトを <codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.dynamicPropertyWriter</codeph> プロパティに割り当てます。
      
     </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#IDynamicPropertyOutput" class="- topic/link "><linktext class="- topic/linktext ">IDynamicPropertyOutput</linktext></link><link href="flash.net.xml#ObjectEncoding/dynamicPropertyWriter" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding.dynamicPropertyWriter</linktext></link></related-links><apiOperation id="flash.net:IDynamicPropertyWriter:flash.net:IDynamicPropertyWriter:writeDynamicProperties" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeDynamicProperties</apiName><shortdesc class="- topic/shortdesc ">
         IDynamicPropertyOutput オブジェクトの名前と値を、ダイナミックプロパティが指定されたオブジェクトに書き込みます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">obj</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">書き込むオブジェクトです。
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">output</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:IDynamicPropertyOutput</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">オブジェクトに動的に書き込む名前と値が含まれる、IDynamicPropertyOutput オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         IDynamicPropertyOutput オブジェクトの名前と値を、ダイナミックプロパティが指定されたオブジェクトに書き込みます。<codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.dynamicPropertyWriter</codeph> が設定されている場合、ダイナミックプロパティが指定されているオブジェクトごとに、このメソッドが呼び出されます。 
		 
		 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#IDynamicPropertyOutput" class="- topic/link "><linktext class="- topic/linktext ">IDynamicPropertyOutput</linktext></link><link href="flash.net.xml#ObjectEncoding/dynamicPropertyWriter" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding.dynamicPropertyWriter</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier languages="" id="flash.net:DatagramSocket" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">DatagramSocket</apiName><shortdesc class="- topic/shortdesc ">
 DatagramSocket クラスはコードで UDP （Universal Datagram Protocol）パケットを送受信できるようにします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 DatagramSocket クラスはコードで UDP （Universal Datagram Protocol）パケットを送受信できるようにします。 
 
 <p class="- topic/p ">AIR プロファイルのサポート：<i class="+ topic/ph hi-d/i "/>この機能はすべてのデスクトップオペレーティングシステムでサポートされますが、モバイルデバイスまたはテレビ用 AIR デバイスではサポートされません。<codeph class="+ topic/ph pr-d/codeph ">DatagramSocket.isSupported</codeph> プロパティを使用して、サポートされているかどうかを実行時にテストすることができます。複数のプロファイル間での API サポートについて詳しくは、<xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">AIR プロファイルのサポート</xref>を参照してください。</p>
 
 <p class="- topic/p ">データグラムパケットはソースとターゲット間で個別に送信されます。 パケットは、送信順序とは異なる順序で受信されることもあります。送信中に消失したパケットは再送信されることも検出されることもありません。</p>
 
 <p class="- topic/p ">データグラムソケットを使用して送信されたデータは、自動的に送信可能なサイズのパケットに分割されることはありません。MTU（Maximum Transmission Unit）のサイズを超える UDP パケットを送信すると、そのパケットはネットワークによって廃棄されます（警告は表示されません）。制限 MTU は、送信パス内のインターフェイス、スイッチ、またはルーターの最小 MTU です。 NetworkInterface クラスを使用して、ローカルインターフェイスの MTU を決めることができますが、ネットワーク内の他のノードが異なる MTU 値を持つ可能性があります。</p>
 
 <p class="- topic/p ">Socket クラスは、保証されたパケット配信を提供し、大きなパケットを自動的に分割してもう一度組み立てる TCP を使用します。TCP はまた、ネットワーク帯域幅の管理に優れています。これらの機能により、TCP ソケットを使用して送信されたデータでレーテンシーが高くなりますが、ほとんどの用途において、TCP を使用するメリットは、そのコストをはるかに上回ります。たいていのネットワーク通信は DatagramSocket クラスではなく、Socket クラスを使用します。</p>
 
 <p class="- topic/p ">DatagramSocket クラスは、小さな転送レーテンシーが重要でパケットの消失を許容できるアプリケーションを操作する場合に便利です。例えば、VoIP （voice-over-IP）アプリケーションのネットワーク操作やリアルタイムのマルチプレイヤーゲームが UDP の恩恵を受ける場合がよくあります。 DatagramSocket クラスは、サーバー側アプリケーションでも便利です。UDP はステートレスプロトコルなので、サーバーは TCP よりも多くのクライアントからの多くの要求を処理できます。</p>
 
 <p class="- topic/p ">DatagramSocket クラスは Adobe AIR アプリケーションでのみ使用でき、アプリケーションセキュリティサンドボックスでのみ使用できます。</p>
 
 <p class="- topic/p ">セキュリティについて詳しくは、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
 
 </apiDesc><example conref="examples\DatagramSocketExample.as" class="- topic/example "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.display.Sprite;
    import flash.events.DatagramSocketDataEvent;
    import flash.events.Event;
    import flash.events.MouseEvent;
    import flash.events.TimerEvent;
    import flash.net.DatagramSocket;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.text.TextFieldType;
    import flash.utils.ByteArray;
    import flash.utils.Timer;
    
    public class DatagramSocketExample extends Sprite
    {
        private var datagramSocket:DatagramSocket = new DatagramSocket();;

        private var localIP:TextField;
        private var localPort:TextField;
        private var logField:TextField;
        private var targetIP:TextField;
        private var targetPort:TextField;
        private var message:TextField;
        
        public function DatagramSocketExample()
        {
            setupUI();
        }

        private function bind( event:Event ):void
        {
            if( datagramSocket.bound ) 
            {
                datagramSocket.close();
                datagramSocket = new DatagramSocket();
                
            }
            datagramSocket.bind( parseInt( localPort.text ), localIP.text );
            datagramSocket.addEventListener( DatagramSocketDataEvent.DATA, dataReceived );
            datagramSocket.receive();
            log( "Bound to: " + datagramSocket.localAddress + ":" + datagramSocket.localPort );
        }
        
        private function dataReceived( event:DatagramSocketDataEvent ):void
        {
            //Read the data from the datagram
            log("Received from " + event.srcAddress + ":" + event.srcPort + "> " + 
                event.data.readUTFBytes( event.data.bytesAvailable ) );
        }
        
        private function send( event:Event ):void
        {
            //Create a message in a ByteArray
            var data:ByteArray = new ByteArray();
            data.writeUTFBytes( message.text );
            
            //Send a datagram to the target
            try
            {
                datagramSocket.send( data, 0, 0, targetIP.text, parseInt( targetPort.text )); 
                log( "Sent message to " + targetIP.text + ":" + targetPort.text );
            }
            catch ( error:Error )
            {
                log( error.message );
            }
        }
        
        private function log( text:String ):void
        {
            logField.appendText( text + "\n" );
            logField.scrollV = logField.maxScrollV;
            trace( text );
        }
        private function setupUI():void
        {
            targetIP = createTextField( 10, 10, "Target IP:", "192.168.0.1" );
            targetPort = createTextField( 10, 35, "Target port:", "8989" );
            message = createTextField( 10, 60, "Message:", "Lucy can't drink milk." );
            localIP = createTextField( 10, 85, "Local IP", "0.0.0.0");
            localPort = createTextField( 10, 110, "Local port:", "0" );
            createTextButton( 250, 135, "Bind", bind );
            createTextButton( 300, 135, "Send", send );
            logField = createTextField( 10, 160, "Log:", "", false, 200 )
                
            this.stage.nativeWindow.activate();
        }
        
        private function createTextField( x:int, y:int, label:String, defaultValue:String = '', editable:Boolean = true, height:int = 20 ):TextField
        {
            var labelField:TextField = new TextField();
            labelField.text = label;
            labelField.type = TextFieldType.DYNAMIC;
            labelField.width = 180;
            labelField.x = x;
            labelField.y = y;
            
            var input:TextField = new TextField();
            input.text = defaultValue;
            input.type = TextFieldType.INPUT;
            input.border = editable;
            input.selectable = editable;
            input.width = 280;
            input.height = height;
            input.x = x + labelField.width;
            input.y = y;
            
            this.addChild( labelField );
            this.addChild( input );
            
            return input;
        }
        
        private function createTextButton( x:int, y:int, label:String, clickHandler:Function ):TextField
        {
            var button:TextField = new TextField();
            button.htmlText = "&lt;u>&lt;b>" + label + "&lt;/b>&lt;/u>";
            button.type = TextFieldType.DYNAMIC;
            button.selectable = false;
            button.width = 180;
            button.x = x;
            button.y = y;
            button.addEventListener( MouseEvent.CLICK, clickHandler );
            
            this.addChild( button );
            return button;
            
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="http://tools.ietf.org/html/rfc768" class="- topic/link "><linktext class="- topic/linktext ">RFC 768</linktext></link><link href="flash.net.xml#Socket" class="- topic/link "><linktext class="- topic/linktext ">Socket クラス</linktext></link><link href="flash.net.xml#XMLSocket" class="- topic/link "><linktext class="- topic/linktext ">XMLSocket クラス</linktext></link><link href="flash.net.xml#ServerSocket" class="- topic/link "><linktext class="- topic/linktext ">ServerSocket クラス</linktext></link></related-links><adobeApiEvent id="flash.net:DatagramSocket_flash.events.IOErrorEvent.IOERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 このソケットが I/O エラーを受信するときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IOERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">このソケットが I/O エラーを受信するときに送出されます。
 </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 このソケットが I/O エラーを受信するときに送出されます。
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:DatagramSocket_flash.events.DatagramSocketDataEvent.DATA_data" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><shortdesc class="- topic/shortdesc ">
 このソケットがデータのパケットを受信するときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.DatagramSocketDataEvent.DATA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.DatagramSocketDataEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 このソケットがデータのパケットを受信するときに送出されます。
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:DatagramSocket_flash.events.Event.CLOSE_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
 オペレーティングシステムがこのソケットを閉じたときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 オペレーティングシステムがこのソケットを閉じたときに送出されます。
  
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">close</codeph> イベントは、DatagramSocket <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> メソッドが呼び出されるときに送出されません。</p>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.net:DatagramSocket:DatagramSocket" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">DatagramSocket</apiName><shortdesc class="- topic/shortdesc ">
     DatagramSocket オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">AIR アプリケーションセキュリティサンドボックス外のコンテンツが DatagramSocket オブジェクトを作成しようとする場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     DatagramSocket オブジェクトを作成します。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.net:DatagramSocket:bind" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">bind</apiName><shortdesc class="- topic/shortdesc ">
     指定されたローカルのアドレスおよびポートにこのソケットをバインドします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、<codeph class="+ topic/ph pr-d/codeph ">localPort</codeph> が 0 未満か、または 65535 より大きい場合に発生します。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、<codeph class="+ topic/ph pr-d/codeph ">localAddress</codeph> が構文的に整形式の IP アドレスになっていない場合に発生します。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、ソケットをバインドできない状況で発生します。例えば、次のような場合です。
     <ol class="- topic/ol "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">localPort</codeph> が既に別のソケットで使用されている場合。</li><li class="- topic/li ">アプリケーションを実行するユーザーアカウントに、指定されたポートへバインドする十分なシステム権限がない場合（権限の問題は、<codeph class="+ topic/ph pr-d/codeph ">localPort &lt; 1024</codeph> の場合に発生する場合があります）。</li><li class="- topic/li ">この DatagramSocket オブジェクトが既にバインドされている場合。</li><li class="- topic/li ">この DatagramSocket オブジェクトが既に閉じている場合。</li></ol>
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、<codeph class="+ topic/ph pr-d/codeph ">localAddress</codeph> が有効なアドレスでない場合に発生します。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localPort</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ローカルコンピューター上でバインドするポートの数。<codeph class="+ topic/ph pr-d/codeph ">localPort</codeph> が 0（デフォルト）に設定されている場合、次に利用可能なシステムポートがバインドされます。1024 より下位のポート番号に接続する権限には、システムのセキュリティポリシーが適用されます。例えば、Mac および Linux システムでは、アプリケーションは 1024 より下位のポートに接続するにはルート権限で実行する必要があります。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localAddress</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0.0.0.0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">バインド先のローカルマシンの IP アドレス。このアドレスは、IPv4 アドレスでも IPv6 アドレスでもかまいません。<codeph class="+ topic/ph pr-d/codeph ">localAddress</codeph> が <codeph class="+ topic/ph pr-d/codeph ">0.0.0.0</codeph>（デフォルト値）に設定されている場合、ソケットは利用可能なすべての IPv4 アドレスを監視します。利用可能なすべての IPv6 アドレスを監視するには、"::" を <codeph class="+ topic/ph pr-d/codeph ">localAddress</codeph> 引数として指定する必要があります。IPv6 アドレスを使用するには、コンピューターとネットワークの両方が IPv6 をサポートするように設定されている必要があります。 さらに、IPv4 アドレスにバインドされたソケットは IPv6 アドレスのソケットに接続できません。同様に、IPv6 アドレスにバインドされたソケットは IPv4 アドレスのソケットに接続できません。アドレスの種類が一致している必要があります。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定されたローカルのアドレスおよびポートにこのソケットをバインドします。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">bind()</codeph> メソッドは、同期的に実行されます。バインド操作は、コードの次の行が実行される前に完了します。</p>
     
	 </apiDesc><example conref="examples\DatagramSocket.bind.1.as" class="- topic/example "> 次の例では、様々な方法で DatagramSocket オブジェクトをバインドする方法を示します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

udpSocket.bind(); //bind to any available port, listen on all IPv4 addresses
udpSocket.bind( 0, "0.0.0.0" ); //same as above
udpSocket.bind( 0, "127.0.0.1" ); //any available port on the localhost address
udpSocket.bind( 8989, "192.168.0.1" ); //port 8989 on a particular IPv4 address
udpSocket.bind( 0, "::" ); //any available port on all IPv6 address
udpSocket.bind( 8989, "::1" ); //port 8989 on the IPv6 localhost address
udpSocket.bind( 8989, "2001:1890:110b:1e19:f06b:72db:7026:3d7a" ); //port 8989 on a particular IPv6 address
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.net:DatagramSocket:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     ソケットを閉じます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">内部エラー、ネットワークエラーまたはオペレーティングシステムエラーが原因でソケットを閉じることができなかった場合、またはソケットが開いていない場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットを閉じます。 
     
     <p class="- topic/p ">ソケットはリモートマシンから切断され、ローカルマシンからバインド解除されます。閉じられたソケットを再利用することはできません。</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:DatagramSocket:connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><shortdesc class="- topic/shortdesc ">
     指定されたリモートアドレスおよびポートにソケットを接続します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、<codeph class="+ topic/ph pr-d/codeph ">localPort</codeph> が 1 未満か、または 65535 より大きい場合に発生します。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、<codeph class="+ topic/ph pr-d/codeph ">localAddress</codeph> が構文的に有効なアドレスになっていない場合に発生します。または、デフォルトのルートアドレス（'0.0.0.0' または '::'）が使用されている場合に発生します。。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、ソケットを接続できない場合に発生します。例えば、<codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> の呼び出しの前に <codeph class="+ topic/ph pr-d/codeph ">bind()</codeph> が呼び出されていなかった場合や、リモートアドレスファミリーへのバインドができない場合などです。 
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">remoteAddress</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">接続を確立するリモートマシンの IP アドレス。 このアドレスは、IPv4 アドレスでも IPv6 アドレスでもかまいません。<codeph class="+ topic/ph pr-d/codeph ">bind()</codeph> が呼び出されなかった場合は、デフォルトの <codeph class="+ topic/ph pr-d/codeph ">bind()</codeph>  を呼び出すときに <codeph class="+ topic/ph pr-d/codeph ">remoteAddress</codeph> のアドレスファミリー（IPv4 または IPv6）が使用されます。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">remotePort</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">接続の確立に使用するリモートマシン上のポート番号です。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定されたリモートアドレスおよびポートにソケットを接続します。 
     
     <p class="- topic/p ">データグラムソケットが「接続されている」場合、データグラムパケットは指定されたターゲットからのみ送受信できます。 その他のソースからのパケットは無視されます。データグラムソケットへの接続は必須ではありません。接続を確立すると、他のソースから不要なパケットを除外する必要がなくなります。ただし、UDP ソケット接続は（TCP 接続用なので）永続的なネットワーク接続ではありません。 ソケットのリモートエンドが存在していない可能性があります。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">bind()</codeph> メソッドが呼び出されなかった場合、ソケットは自動的にデフォルトのローカルのアドレスとポートにバインドされます。</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:DatagramSocket:receive" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">receive</apiName><shortdesc class="- topic/shortdesc ">
     この DatagramSocket オブジェクトが、バインドされている IP アドレスおよびポートで着信パケットを受信できるようにします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     この DatagramSocket オブジェクトが、バインドされている IP アドレスおよびポートで着信パケットを受信できるようにします。
     
     <p class="- topic/p ">関数は直ちに戻ります。データパケットを受信すると、DatagramSocket オブジェクトによって <codeph class="+ topic/ph pr-d/codeph ">data</codeph> イベントが送出されます。</p>
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.net:DatagramSocket:receive_data" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:DatagramSocketDataEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">UDP パケットを受信した場合。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">UDP パケットを受信した場合。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:DatagramSocket:send" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">send</apiName><shortdesc class="- topic/shortdesc ">
     UDP を使用して、ByteArray にバイトを含むパケットを送信します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、<codeph class="+ topic/ph pr-d/codeph ">Port</codeph> が 1 未満か、または 65535 より大きい場合に発生します。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットが接続されておらず、<codeph class="+ topic/ph pr-d/codeph ">address</codeph> が構文的に有効な IP アドレスになっていない場合に発生します。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは次の場合に発生します。 
     <ol class="- topic/ol "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">bind()</codeph> が呼び出されず、宛先アドレスファミリへのデフォルトのバインドができない場合。</li><li class="- topic/li ">一部のオペレーティングシステムでは、ターゲットホストから ICMP による "destination unreachable" メッセージを既に受け取っていた場合に <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> メソッドが呼び出されると、IOError がスローされます。したがって、このエラーはデータ送信の試行が 1 回目に失敗したときではなく、2 回目に失敗したときにスローされます。Windows などのその他のオペレーティングシステムでは、これらの ICMP メッセージが廃棄されるため、エラーはスローされません。</li></ol>
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">bytes</codeph> パラメーターが <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合に発生します。 
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">offset</codeph> が <codeph class="+ topic/ph pr-d/codeph ">bytes</codeph> で指定された ByteArray の長さよりも長い場合、または <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> に <codeph class="+ topic/ph pr-d/codeph ">length</codeph> を加えた値によって記述されるように指定されたデータ量が、利用可能なデータを超過した場合に発生します。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットが既に接続されている場合に、<codeph class="+ topic/ph pr-d/codeph ">address</codeph> または <codeph class="+ topic/ph pr-d/codeph ">port</codeph> パラメーターが指定されたときに発生します。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bytes</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">パケットデータを含む ByteArray。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">offset</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">パケットが始まる <codeph class="+ topic/ph pr-d/codeph ">bytes</codeph> ByteArray オブジェクトへのゼロベースのオフセット。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">パケット内のバイト数。デフォルト値の 0 に設定すると、<codeph class="+ topic/ph pr-d/codeph ">offset</codeph> パラメーターで指定した値以降の ByteArray 全体が送信されます。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">address</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">リモートマシンの IPv4 または IPv6 アドレス。<codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> メソッドを使用してアドレスが指定されていない場合、アドレスを指定する必要があります。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">port</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">リモートマシンのポート番号。<codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> メソッドを使用してポートが指定されていない場合、0 ~ 65536 の値を指定する必要があります。
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     UDP を使用して、ByteArray にバイトを含むパケットを送信します。 
     
     <p class="- topic/p ">ソケットが接続されている場合、パケットは <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> メソッド内に指定されたポートとリモートアドレス宛に送信されるため、送信先 IP アドレスとポートを指定することはできません。ソケットが接続されていない場合、パケットは指定したアドレスとポートに送信されるため、<codeph class="+ topic/ph pr-d/codeph ">address</codeph> と <codeph class="+ topic/ph pr-d/codeph ">port</codeph> に有効な値を指定する必要があります。<codeph class="+ topic/ph pr-d/codeph ">bind()</codeph> メソッドが呼び出されなかった場合、ソケットは自動的にデフォルトのローカルのアドレスとポートにバインドされます。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>ブロードキャストアドレスへのデータの送信はサポートされません。</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.net:DatagramSocket:bound:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bound</apiName><shortdesc class="- topic/shortdesc ">
     このソケットオブジェクトが現在ローカルのアドレスとポートにバインドされているかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このソケットオブジェクトが現在ローカルのアドレスとポートにバインドされているかどうかを示します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#DatagramSocket/bind()" class="- topic/link "><linktext class="- topic/linktext ">bind()</linktext></link></related-links></apiValue><apiValue id="flash.net:DatagramSocket:connected:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">connected</apiName><shortdesc class="- topic/shortdesc ">
     このソケットオブジェクトが現在リモートのアドレスとポートにバインドされているかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このソケットオブジェクトが現在リモートのアドレスとポートにバインドされているかどうかを示します。
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b> 値 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> は、リモートコンピューターが接続されたアドレスとポートで待機しているという意味ではありません。単にこの DataGramSocket オブジェクトがそのアドレスとポートからのみデータを送受信するという意味です。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#DatagramSocket/connect()" class="- topic/link "><linktext class="- topic/linktext ">connect()</linktext></link></related-links></apiValue><apiValue id="flash.net:DatagramSocket:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
     DatagramSocket 機能がランタイム環境でサポートされているかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     DatagramSocket 機能がランタイム環境でサポートされているかどうかを示します。
     
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:DatagramSocket:localAddress:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localAddress</apiName><shortdesc class="- topic/shortdesc ">
     ローカルマシン上でこのソケットがバインドされている IP アドレス。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ローカルマシン上でこのソケットがバインドされている IP アドレス。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#DatagramSocket/bind()" class="- topic/link "><linktext class="- topic/linktext ">bind()</linktext></link></related-links></apiValue><apiValue id="flash.net:DatagramSocket:localPort:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localPort</apiName><shortdesc class="- topic/shortdesc ">
     ローカルマシン上でこのソケットがバインドされているポート。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ローカルマシン上でこのソケットがバインドされているポート。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#DatagramSocket/bind()" class="- topic/link "><linktext class="- topic/linktext ">bind()</linktext></link></related-links></apiValue><apiValue id="flash.net:DatagramSocket:remoteAddress:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">remoteAddress</apiName><shortdesc class="- topic/shortdesc ">
     このソケットが接続されているリモートマシンの IP アドレス。 </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このソケットが接続されているリモートマシンの IP アドレス。 
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#DatagramSocket/connect()" class="- topic/link "><linktext class="- topic/linktext ">connect()</linktext></link></related-links></apiValue><apiValue id="flash.net:DatagramSocket:remotePort:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">remotePort</apiName><shortdesc class="- topic/shortdesc ">
     このソケットが接続されているリモートマシンのポート。 </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このソケットが接続されているリモートマシンのポート。 
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#DatagramSocket/connect()" class="- topic/link "><linktext class="- topic/linktext ">connect()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetGroupSendResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetGroupSendResult</apiName><shortdesc class="- topic/shortdesc ">
NetGroupSendResult クラスは、NetGroup インスタンスに関連付けられた Directed Routing メソッドの戻り値に使用される定数値の列挙です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
NetGroupSendResult クラスは、NetGroup インスタンスに関連付けられた Directed Routing メソッドの戻り値に使用される定数値の列挙です。

</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNearest()</linktext></link><link href="flash.net.xml#NetGroup/sendToNeighbor()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNeighbor()</linktext></link><link href="flash.net.xml#NetGroup/sendToAllNeighbors()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToAllNeighbors()</linktext></link></related-links><apiValue id="flash.net:NetGroupSendResult:ERROR" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ERROR</apiName><shortdesc class="- topic/shortdesc "> 
    Directed Routing メソッドを使用するときに発生したエラー（許可がない、など）を示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">error</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    Directed Routing メソッドを使用するときに発生したエラー（許可がない、など）を示します。
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetGroupSendResult:NO_ROUTE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NO_ROUTE</apiName><shortdesc class="- topic/shortdesc "> 
    要求された宛先にメッセージを配信するためのネイバーが見つからないことを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">no route</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    要求された宛先にメッセージを配信するためのネイバーが見つからないことを示します。
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetGroupSendResult:SENT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SENT</apiName><shortdesc class="- topic/shortdesc "> 
    メッセージにルートが見つかり、メッセージが宛先に配信されたことを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">sent</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    メッセージにルートが見つかり、メッセージが宛先に配信されたことを示します。
    
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:URLRequestDefaults" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">URLRequestDefaults</apiName><shortdesc class="- topic/shortdesc ">
 URLRequestDefaults クラスには、URLRequest クラスのプロパティのデフォルト値を定義するために設定できる静的プロパティが含まれています。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 URLRequestDefaults クラスには、URLRequest クラスのプロパティのデフォルト値を定義するために設定できる静的プロパティが含まれています。また、静的メソッドの <codeph class="+ topic/ph pr-d/codeph ">URLRequestDefaults.setLoginCredentialsForHost()</codeph> も含まれています。このメソッドを使用すると、要求のデフォルトの認証資格情報を定義できます。URLRequest クラスは、HTTP 要求で使用される情報を定義します。 
 
 <p class="- topic/p ">URLRequest オブジェクトで設定されるプロパティは、URLRequestDefaults クラスに対し設定される静的プロパティをオーバーライドします。</p>
 
 <p class="- topic/p ">URLRequestDefault の設定は、呼び出し側のアプリケーションドメイン内にあるコンテンツにのみ適用されますが、1 つ例外があります。<codeph class="+ topic/ph pr-d/codeph ">URLRequestDefaults.setLoginCredentialsForHost()</codeph> を呼び出して行われる設定は、現在実行中のアプリケーションのすべてのアプリケーションドメインに適用されます。</p>
 
 <p class="- topic/p ">アプリケーションセキュリティサンドボックスで実行される Adobe<sup class="+ topic/ph hi-d/sup ">®</sup> AIR<sup class="+ topic/ph hi-d/sup ">®</sup> コンテンツだけが URLRequestDefaults クラスを使用できます。他のコンテンツがこのクラスのメンバーまたはプロパティにアクセスすると、SecurityError がスローされます。</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest" class="- topic/link "><linktext class="- topic/linktext ">URLRequest</linktext></link></related-links><apiOperation id="flash.net:URLRequestDefaults:setLoginCredentialsForHost" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setLoginCredentialsForHost</apiName><shortdesc class="- topic/shortdesc ">
	選択したホストのデフォルトユーザーおよびパスワード情報を設定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">hostname</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ユーザー名およびパスワードを適用する先のホストの名前。これには、<codeph class="+ topic/ph pr-d/codeph ">"www.example.com"</codeph> などのドメインを指定すること、または <codeph class="+ topic/ph pr-d/codeph ">"www.example.com:80"</codeph> など、ドメインとポート番号を指定することができます。<codeph class="+ topic/ph pr-d/codeph ">"example.com"</codeph>、<codeph class="+ topic/ph pr-d/codeph ">"www.example.com"</codeph> および<codeph class="+ topic/ph pr-d/codeph ">"sales.example.com"</codeph> はそれぞれ別のホストと見なされますので注意してください。 
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">user</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定したホストの要求認証で使用するデフォルトユーザー名。
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">password</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定したホストの要求認証で使用するデフォルトパスワード。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	選択したホストのデフォルトユーザーおよびパスワード情報を設定します。これらの設定は、このメソッドを呼び出したオブジェクトのアプリケーションメイン内の URLRequest オブジェクトだけではなく、アプリケーションのすべてのアプリケーションドメイン内の URLRequest オブジェクトに適用されます（一方、URLRequest クラスの静的プロパティは、呼び出し元のアプリケーションドメインにのみ適用されます）。これにより、アプリケーションの別の部分がログインするとき、アプリケーション全体のコンテンツが（コンテンツのアプリケーションドメインに関係なく）ログインできます。
	
	<p class="- topic/p "><i class="+ topic/ph hi-d/i ">Mac OS で実行されるアプリケーションに関する注意：</i>Mac OS では、このメソッドを呼び出すと、アプリケーションは、アプリケーションが閉じられるまで指定したホストのこれらの資格情報を使用します。これは、同じホストに対し <codeph class="+ topic/ph pr-d/codeph ">URLRequestDefaults.setLoginCredentialsForHost()</codeph> を以後に呼び出した場合も同じです。ただし、このメソッドが指定する資格情報をサーバーが拒否した場合、以後の（同じホストに対する）<codeph class="+ topic/ph pr-d/codeph ">URLRequestDefaults.setLoginCredentialsForHost()</codeph> メソッドの呼び出しは認識されます。</p>
	
	<p class="- topic/p "><i class="+ topic/ph hi-d/i "/>注意：このメソッドは、ファイルのアップロードまたは RTMP 要求で使用される URLRequest オブジェクトには適用されません。</p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.net:URLRequestDefaults:authenticate:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">authenticate</apiName><shortdesc class="- topic/shortdesc ">
	URLRequest オブジェクトの authenticate プロパティのデフォルト設定。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
	
	</apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">authenticate</codeph> プロパティのデフォルト設定。URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">authenticate</codeph> プロパティを設定すると、このデフォルト設定がオーバーライドされます。
	
	<p class="- topic/p "><i class="+ topic/ph hi-d/i ">注意：</i>この設定は、ファイルのアップロードまたは RTMP 要求で使用される URLRequest オブジェクトには適用されません。</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest/authenticate" class="- topic/link "><linktext class="- topic/linktext ">URLRequest.authenticate</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequestDefaults:cacheResponse:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">cacheResponse</apiName><shortdesc class="- topic/shortdesc ">
	URLRequest オブジェクトの cacheResponse プロパティのデフォルト設定。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
	
	</apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">cacheResponse</codeph> プロパティのデフォルト設定。URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">cacheResponse</codeph> プロパティを設定すると、このデフォルト設定がオーバーライドされます。<codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定すると、AIR アプリケーションのデフォルト動作では、オペレーティングシステムの HTTP キャッシュが使用されます。この設定は、ファイルのアップロードまたは RTMP 要求で使用される URLRequest オブジェクトには適用されません。
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest/cacheResponse" class="- topic/link "><linktext class="- topic/linktext ">URLRequest.cacheResponse</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequestDefaults:followRedirects:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">followRedirects</apiName><shortdesc class="- topic/shortdesc ">
	URLRequest オブジェクトの followRedirects プロパティのデフォルト設定。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
	
	</apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">followRedirects</codeph> プロパティのデフォルト設定。URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">followRedirects</codeph> プロパティを設定すると、このデフォルト設定がオーバーライドされます。この設定は、ファイルのアップロードまたは RTMP 要求で使用される URLRequest オブジェクトには適用されません。
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest/followRedirects" class="- topic/link "><linktext class="- topic/linktext ">URLRequest.followRedirects</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequestDefaults:idleTimeout:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">idleTimeout</apiName><shortdesc class="- topic/shortdesc ">
	URLRequest オブジェクトおよび HTMLLoader オブジェクトの idleTimeout プロパティのデフォルト設定。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">idleTimeout が負の値です。
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiDefaultValue>0
	
	</apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	URLRequest オブジェクトおよび HTMLLoader オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">idleTimeout</codeph> プロパティのデフォルト設定。
	
	<p class="- topic/p ">アイドルタイムアウトとは、接続が確立された後、要求が廃棄されるまでの間、クライアントがサーバーからの応答を待機する時間（ミリ秒）です。</p>
	
	<p class="- topic/p ">これは、URLRequest または HTMLLoader オブジェクトで使用されるデフォルトアイドルタイムアウトを定義します。URLRequest オブジェクトまたは HTMLLoader オブジェクトで <codeph class="+ topic/ph pr-d/codeph ">idleTimeout</codeph> プロパティを設定すると、このデフォルト設定がオーバーライドされます。</p>
	
	<p class="- topic/p ">このプロパティが 0 （デフォルト）に設定されると、ランタイムはオペレーティングシステムで定義されるデフォルトのタイムアウト値を使用します。デフォルトのアイドルタイムアウト値はオペレーティングシステム（Mac OS、Linux、または Windows）によって変わり、オペレーティングシステムのバージョンによっても変わります。</p>
	
	<p class="- topic/p ">この設定は、ファイルのアップロードまたは RTMP 要求で使用される URLRequest オブジェクトには適用されません。</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="../../flash/html/HTMLLoader.html#idleTimeout" class="- topic/link "><linktext class="- topic/linktext ">HTMLLoader.idleTimeout</linktext></link><link href="flash.net.xml#URLRequest/idleTimeout" class="- topic/link "><linktext class="- topic/linktext ">URLRequest.idleTimeout</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequestDefaults:manageCookies:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">manageCookies</apiName><shortdesc class="- topic/shortdesc ">
	URLRequest オブジェクトの manageCookies プロパティのデフォルト設定。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
	
	</apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">manageCookies</codeph> プロパティのデフォルト設定。URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">manageCookies</codeph> プロパティを設定すると、このデフォルト設定がオーバーライドされます。
	
	<p class="- topic/p "><i class="+ topic/ph hi-d/i ">注意：</i>この設定は、ファイルのアップロードまたは RTMP 要求で使用される URLRequest オブジェクトには適用されません。</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest/manageCookies" class="- topic/link "><linktext class="- topic/linktext ">URLRequest.manageCookies</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequestDefaults:useCache:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">useCache</apiName><shortdesc class="- topic/shortdesc ">
	URLRequest オブジェクトの useCache プロパティのデフォルト設定。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
	
	</apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">useCache</codeph> プロパティのデフォルト設定。URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">useCache</codeph> プロパティを設定すると、このデフォルト設定がオーバーライドされます。この設定は、ファイルのアップロードまたは RTMP 要求で使用される URLRequest オブジェクトには適用されません。
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest/useCache" class="- topic/link "><linktext class="- topic/linktext ">URLRequest.useCache</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequestDefaults:userAgent:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">userAgent</apiName><shortdesc class="- topic/shortdesc ">
	URLRequest オブジェクトの userAgent プロパティのデフォルト設定。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">userAgent</codeph> プロパティのデフォルト設定。URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">userAgent</codeph> プロパティを設定すると、このデフォルト設定がオーバーライドされます。
	
	<p class="- topic/p ">これは、(HTMLLoader オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> メソッドを呼び出すと使用される) すべての HTMLLoader オブジェクトのデフォルトのユーザーエージェントストリングでもあります。HTMLLoader オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">userAgent</codeph> プロパティを設定すると、<codeph class="+ topic/ph pr-d/codeph ">URLRequestDefaults.userAgent</codeph> 設定がオーバーライドされます。</p>
	
	<p class="- topic/p ">このデフォルト値は、次の例に示すように、実行時のオペレーティングシステム（Mac OS、Linux または Windows など）、実行時の言語および実行時のバージョンによって異なります。</p>
	
	<ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"Mozilla/5.0 (Macintosh; U; PPC Mac OS X; en) AppleWebKit/526.9+ (KHTML, like Gecko) AdobeAIR/1.5"</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"Mozilla/5.0 (Windows; U; en) AppleWebKit/526.9+ (KHTML, like Gecko) AdobeAIR/1.5"</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/526.9+ (KHTML, like Gecko) AdobeAIR/1.5"</codeph></li></ul>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest/userAgent" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLRequest.userAgent</linktext></link><link href="../../flash/html/HTMLLoader.html#userAgent" class="- topic/link "><linktext class="- topic/linktext ">flash.html.HTMLLoader.userAgent</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetGroup" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetGroup</apiName><shortdesc class="- topic/shortdesc ">
RTMFP グループ内のメンバーシップを表す NetGroup クラスのインスタンス。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
RTMFP グループ内のメンバーシップを表す NetGroup クラスのインスタンス。このクラスを使用して、次の操作を行います。

<ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">サービスの質（QoS）の監視</b>。<codeph class="+ topic/ph pr-d/codeph ">info</codeph> プロパティには、NetGroupInfo オブジェクトが含まれており、このオブジェクトのプロパティによってこのグループの QoS 統計が提供されます。</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">ポスティング</b>。<codeph class="+ topic/ph pr-d/codeph ">post()</codeph> を呼び出して、グループのすべてのメンバーに ActionScript メッセージをブロードキャストします。</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">転送</b>。<codeph class="+ topic/ph pr-d/codeph ">sendToNearest()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">sendToNeighbor()</codeph>、および <codeph class="+ topic/ph pr-d/codeph ">sendToAllNeighbors()</codeph> を呼び出して、短いデータメッセージを、ピアツーピアグループの指定したメンバーに送信します。送信元と送信先には、直接の接続は必要ありません。</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">オブジェクトレプリケーション</b>。<codeph class="+ topic/ph pr-d/codeph ">addHaveObjects()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">removeHaveObjects()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">addWantObjects()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">removeWantObjects()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">writeRequestedObject()</codeph> および <codeph class="+ topic/ph pr-d/codeph ">denyRequestedObject()</codeph> を呼び出して、大きなデータを細かく分割し、ピアツーピアグループ のすべてのノードにレプリケートします。</li></ul>

<p class="- topic/p ">クライアントサイドの NetGroup クラスでは、NetConnection によって次のイベントが送出されます。</p>

<ul class="- topic/ul "><li class="- topic/li ">NetGroup.Connect.Success</li><li class="- topic/li ">NetGroup.Connect.Failed</li><li class="- topic/li ">NetGroup.Connect.Rejected</li></ul>

<p class="- topic/p ">イベントオブジェクトの <codeph class="+ topic/ph pr-d/codeph ">info.group</codeph> プロパティには、イベントソース（NetGroup）への参照が含まれます。NetGroup によって他のすべてのイベントが送出されます。サーバーサイドの NetGroup クラスでは、NetGroup によってすべてのイベントが送出されます。</p>

<p class="- topic/p ">ピアー対応ネットワークについて詳しくは、Adobe エバンジェリストの Tom Krcha による <xref href="http://www.flashrealtime.com/basics-of-p2p-in-flash/" scope="external" class="- topic/xref ">Basics of P2P in Flash</xref> を参照してください。ピアー対応ネットワークにおけるグループの使用について詳しくは、同じく Tom Krcha による <xref href="http://tv.adobe.com/watch/max-2009-develop/social-media-experiences-with-flash-media-and-rtmfp/" scope="external" class="- topic/xref ">Social Media Experiences with Flash Media and RTMFP</xref> を参照してください。</p>

<p class="- topic/p ">ピアー対応ネットワークの背景にある技術的な詳細については、Adobe コンピューターサイエンティストの Matthew Kaufman による<xref href="http://tv.adobe.com/watch/max-2009-develop/p2p-on-the-flash-platform-with-rtmfp" scope="external" class="- topic/xref ">P2P on the Flash Platform with RTMFP</xref> を参照してください。</p>

</apiDesc><example conref="examples\NetGroupExample.as" class="- topic/example "> これは、ピアーツアーピアーネットワークを使用するシンプルなビデオチャットアプリケーションです。アプリケーションは RTMFP で Flash Media Server に接続します。サーバーは、クライアントアプリケーションのフィンガープリントを保存し、クライアントの接続時にピアーグループを管理します。ただし、すべてのデータはクライアント（ピアー）間でやり取りされ、サーバーへは戻されません。
 <p class="- topic/p ">アプリケーションの実行時に、テキスト入力フィールドに任意のグループ名を入力できます。GroupSpecifier クラスはこのグループ名（および設定済みの GroupSpecifier プロパティ）を使用して、グループの永続的な固有名となるストリングを作成します。他のクライアントをグループに接続するには、そのクライアントも同じグループ名を使用する必要があります。例えば、クライアント A が「firstmesh」というグループ名を使用する場合、クライアント A と通信したい他のクライアントも、グループ名「firstmesh」を使用する必要があります。クライアント B が「kite」というグループ名を使用している場合、接続は成功しますが、新しいグループが作成され、クライアント B はクライアント A および「firstmesh」グループに属する他のクライアントとは通信できません。</p>

 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">


&lt;?xml version="1.0" encoding="utf-8"?>
&lt;mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="100%" height="100%" applicationComplete="OnApplicationComplete()">
    &lt;mx:Script>
        &lt;![CDATA[
            private var netConnection:NetConnection = null;
            private var netStream:NetStream = null;
            private var netGroup:NetGroup = null;
            private var video:Video = null;
            private var sequenceNumber:uint = 0;
            private var resizeTimer:Timer = null;

            private const SERVER:String = "rtmfp://fms.example.com/someapp";

            [Bindable] private var connected:Boolean = false;
            [Bindable] private var joinedGroup:Boolean = false;

            private function OnApplicationComplete():void
            {
                userName.text = "user " + int(Math.random() * 65536);

                groupName.text = "channel" + (int(Math.random() * 899) + 101);

                resizeTimer = new Timer(2000.0);
                resizeTimer.addEventListener(TimerEvent.TIMER, DoResizeVideo);
                resizeTimer.start();
            }

            private function StatusMessage(msg:Object):void
            {
                statusLog.text += msg;
                statusLog.verticalScrollPosition = statusLog.textHeight;
                statusLog.validateNow();
            }

            private function NetStatusHandler(e:NetStatusEvent):void
            {
                StatusMessage(e.info.code);
                switch(e.info.code)
                {
                case "NetConnection.Connect.Success":
                    OnConnect();
                    break;

                case "NetConnection.Connect.Closed":
                case "NetConnection.Connect.Failed":
                case "NetConnection.Connect.Rejected":
                case "NetConnection.Connect.AppShutdown":
                case "NetConnection.Connect.InvalidApp":
                    OnDisconnect();
                    break;

                case "NetStream.Connect.Success": // e.info.stream
                    OnNetStreamConnect();
                    break;

                case "NetStream.Connect.Rejected": // e.info.stream
                case "NetStream.Connect.Failed": // e.info.stream
                    DoDisconnect();
                    break;

                case "NetGroup.Connect.Success": // e.info.group
                    OnNetGroupConnect();
                    break;

                case "NetGroup.Connect.Rejected": // e.info.group
                case "NetGroup.Connect.Failed": // e.info.group
                    DoDisconnect();
                    break;

                case "NetGroup.Posting.Notify": // e.info.message, e.info.messageID
                    OnPosting(e.info.message);
                    break;


                case "NetStream.MulticastStream.Reset":
                case "NetStream.Buffer.Full":
                    DoResizeVideo();
                    break;

                case "NetGroup.SendTo.Notify": // e.info.message, e.info.from, e.info.fromLocal
                case "NetGroup.LocalCoverage.Notify": //
                case "NetGroup.Neighbor.Connect": // e.info.neighbor
                case "NetGroup.Neighbor.Disconnect": // e.info.neighbor
                case "NetGroup.MulticastStream.PublishNotify": // e.info.name
                case "NetGroup.MulticastStream.UnpublishNotify": // e.info.name
                case "NetGroup.Replication.Fetch.SendNotify": // e.info.index
                case "NetGroup.Replication.Fetch.Failed": // e.info.index
                case "NetGroup.Replication.Fetch.Result": // e.info.index, e.info.object
                case "NetGroup.Replication.Request": // e.info.index, e.info.requestID
                default:
                    break;
                }
            }

            private function DoConnect():void
            {
                StatusMessage("Connecting to \"" + SERVER + "\" ...\n");
                netConnection = new NetConnection();
                netConnection.addEventListener(NetStatusEvent.NET_STATUS, NetStatusHandler);
                netConnection.connect(SERVER);
            }

            private function OnConnect():void
            {
                var groupSpecifier:GroupSpecifier;

                StatusMessage("Connected\n");
                connected = true;

                groupSpecifier = new GroupSpecifier("max2009lab/" + groupName.text);
                groupSpecifier.multicastEnabled = true;
                groupSpecifier.postingEnabled = true;
                groupSpecifier.serverChannelEnabled = true;

                netStream = new NetStream(netConnection, groupSpecifier.groupspecWithAuthorizations());
                netStream.addEventListener(NetStatusEvent.NET_STATUS, NetStatusHandler);

                netGroup = new NetGroup(netConnection, groupSpecifier.groupspecWithAuthorizations());
                netGroup.addEventListener(NetStatusEvent.NET_STATUS, NetStatusHandler);

                StatusMessage("Join \"" + groupSpecifier.groupspecWithAuthorizations() + "\"\n");
            }

            private function OnNetStreamConnect():void
            {
                netStream.client = this;

                var mic:Microphone = Microphone.getMicrophone();
                if(mic)
                {
                    mic.codec = SoundCodec.SPEEX;
                    mic.setSilenceLevel(0);

                    netStream.attachAudio(mic);

                    StatusMessage("got microphone\n");
                }

                var camera:Camera = Camera.getCamera();
                if(camera)
                {
                    camera.setMode(320, 240, 10);
                    camera.setQuality(30000, 0);
                    camera.setKeyFrameInterval(15);

                    videoDisplay.attachCamera(camera);
                    videoDisplay.maintainAspectRatio = true;

                    netStream.attachCamera(camera);

                    StatusMessage("got camera\n");
                }

                netStream.publish("stream");
            }

            private function OnNetGroupConnect():void
            {
                joinedGroup = true;
            }

            private function DoDisconnect():void
            {
                if(netConnection)
                    netConnection.close();
                videoDisplay.attachCamera(null);
            }

            private function OnDisconnect():void
            {
                StatusMessage("Disconnected\n");
                netConnection = null;
                netStream = null;
                netGroup = null;
                connected = false;
                joinedGroup = false;
            }

            private function ClearChatText():void
            {
                chatText.text = "";
            }

            private function DoPost():void
            {
                var message:Object = new Object;

                message.user = userName.text;
                message.text = chatText.text;
                message.sequence = sequenceNumber++;
                message.sender = netConnection.nearID;

                netGroup.post(message);

                StatusMessage("==> " + chatText.text + "\n");

                chatText.callLater(ClearChatText);
            }

            private function OnPosting(message:Object):void
            {
                StatusMessage("&lt;" + message.user + "> " + message.text + "\n");
            }

            private function DoResizeVideo(ignored:* = null):void
            {
                if(video)
                {
                    if( (0 == video.videoHeight)
                     || (0 == video.videoWidth)
                    )
                    {
                        video.height = videoDisplay.height;
                        video.width = videoDisplay.width;
                        video.x = 0;
                        video.y = 0;
                    }
                    else
                    {
                        var videoAspect:Number = Number(video.videoWidth) / Number(video.videoHeight);
                        var displayAspect:Number = Number(videoDisplay.width) / Number(videoDisplay.height);
                        var adjustFactor:Number;

                        if(videoAspect >= displayAspect) // video is wider than display
                        {
                            adjustFactor = Number(video.videoWidth) / Number(videoDisplay.width);
                            video.width = videoDisplay.width;
                            video.height = int(Number(video.videoHeight) / adjustFactor);
                            video.x = 0;
                            video.y = int((videoDisplay.height - video.height) / 2);
                        }
                        else
                        {
                            adjustFactor = Number(video.videoHeight) / Number(videoDisplay.height);
                            video.height = videoDisplay.height;
                            video.width = int(Number(video.videoWidth) / adjustFactor);
                            video.x = int((videoDisplay.width - video.width) / 2);
                            video.y = 0;
                        }
                    }
                }
            }

            public function onPlayStatus(info:Object):void {}
            public function onMetaData(info:Object):void {}
            public function onCuePoint(info:Object):void {}
            public function onTextData(info:Object):void {}

            public function ValidateConnectAllowed(isConnected:Boolean, groupNameText:String):Boolean
            {
                return (!isConnected) &amp;&amp; (groupNameText.length > 0);
            }
        ]]&gt;
    &lt;/mx:Script>

    &lt;mx:VBox top="10" right="10" left="10" bottom="10" verticalGap="6">
        &lt;mx:HBox width="100%">
            &lt;mx:Text text="Group:"/>
            &lt;mx:TextInput id="groupName" width="100%" text="default" enabled="{!connected}"/>
            &lt;mx:Button label="Connect" click="DoConnect()" enabled="{ValidateConnectAllowed(connected, groupName.text)}" />
            &lt;mx:Button label="Disconnect" click="DoDisconnect()" enabled="{connected}" />
        &lt;/mx:HBox>
        &lt;mx:VideoDisplay id="videoDisplay" width="320" height="240" resize="DoResizeVideo()"/>
        &lt;mx:TextArea id="statusLog" width="100%" height="100%"/>
        &lt;mx:HBox width="100%">
            &lt;mx:TextInput id="userName" width="160" />
            &lt;mx:TextInput id="chatText" width="100%" enabled="{joinedGroup}" enter="DoPost()"/>
        &lt;/mx:HBox>
    &lt;/mx:VBox>

&lt;/mx:Application>
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier" class="- topic/link "><linktext class="- topic/linktext ">flash.net.GroupSpecifier</linktext></link><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream</linktext></link><link href="flash.events.xml#NetStatusEvent/info" class="- topic/link "><linktext class="- topic/linktext ">「NetGroup」で始まる flash.events.NetStatusEvent info.code 値。</linktext></link></related-links><adobeApiEvent id="flash.net:NetGroup_flash.events.NetStatusEvent.NET_STATUS_netStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">netStatus</apiName><shortdesc class="- topic/shortdesc ">
 NetGroup オブジェクトが、そのステータスまたはエラーの状況をレポートするときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.NetStatusEvent.NET_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.NetStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 NetGroup オブジェクトが、そのステータスまたはエラーの状況をレポートするときに送出されます。<codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> イベントには <codeph class="+ topic/ph pr-d/codeph ">info</codeph> プロパティが含まれます。<codeph class="+ topic/ph pr-d/codeph ">info</codeph> プロパティは、接続試行が成功したかどうかなど、イベントに関する情報を含むオブジェクトです。
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.events.xml#NetStatusEvent/info" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.net:NetGroup:NetGroup" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">NetGroup</apiName><shortdesc class="- topic/shortdesc ">
     指定された NetConnection オブジェクトに新しい NetGroup を構築し、それを groupspec で指定されたグループに結合します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetGroup, constructor
     </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">NetConnection インスタンスは接続されていません。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">groupspec は無効です。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">connection</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:NetConnection</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">NetConnection オブジェクトです。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">groupspec</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">結合する RTMFP ピアーツーピアーグループを指定するストリング（このメンバーの名前、機能、制限、および権限を含む）。
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     new NetGroup(myConnection, myGroupSpecifier.groupspecWithAuthorizations());
     </codeblock>
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">指定された NetConnection オブジェクトに新しい NetGroup を構築し、それを指定されたグループに結合します。
     
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定された NetConnection オブジェクトに新しい NetGroup を構築し、それを <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> で指定されたグループに結合します。
     
     <p class="- topic/p ">ほとんどの場合、<codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> にはローカルシステムでネットワークアップリンクを使用する可能性があります。NetStream または NetGroup オブジェクトが groupspec を使用して構築されている場合、プライバシーダイアログが表示されます。このダイアログにより、この接続をユーザーのピアーとのデータ共有に使用できるかどうかが確認されます。ユーザーが「このドメインでの使用を許可する」をクリックすると、次回ユーザーがこのアプリケーションに接続するときにこのダイアログは表示されません。ピアー対応ネットワークを許可しなかった場合、グループ内のピアー機能（ポスティング、転送、オブジェクトレプリケーションおよびマルチキャスト）はすべて無効になります。許可された場合、<codeph class="+ topic/ph pr-d/codeph ">info</codeph> オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティの <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Connect.Success</codeph> によって、NetStatusEvent が NetConnection のイベントリスナーに送信されます。拒否された場合、<codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティは <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Connect.Rejected</codeph> になります。<codeph class="+ topic/ph pr-d/codeph ">NetGroup.Connect.Success</codeph> イベントが受信されるまで、NetGroup オブジェクトの任意のメソッドを呼び出そうとすると、例外が発生します。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>クライアントがネイティブ IP マルチキャストストリームにサブスクライブした場合、セキュリティダイアログは表示されません。</p>
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.events.xml#NetStatusEvent/code_NetGroup_Connect_Success" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.Connect.Success"</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_Connect_Rejected" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.Connect.Rejected"</linktext></link><link href="flash.net.xml#NetConnection" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection</linktext></link><link href="flash.net.xml#GroupSpecifier" class="- topic/link "><linktext class="- topic/linktext ">flash.net.GroupSpecifier</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:NetGroup:addHaveObjects" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addHaveObjects</apiName><shortdesc class="- topic/shortdesc ">
     このノードがネイバーにアドバタイズするオブジェクト（要求を満たすオブジェクト）のセットに、startIndex から endIndex の範囲に含まれるオブジェクトを追加します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このメソッドに渡される数は 0 より小さいか、9007199254740992 より大きくなります。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Have セットに追加するオブジェクトインデックスの範囲の始まり。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">endIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Have セットに追加するオブジェクトインデックスの範囲の終わり。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">このノードがネイバーにアドバタイズするオブジェクト（要求を満たすオブジェクト）のセットに、オブジェクトを追加します。
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このノードがネイバーにアドバタイズするオブジェクト（要求を満たすオブジェクト）のセットに、<codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> から <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> の範囲に含まれるオブジェクトを追加します。デフォルトでは、Have セットは空です。インデックスは、0 ～ 9007199254740992 の整数である必要があります。
     
     <p class="- topic/p ">オブジェクトのレプリケーションについて詳しくは、『<i class="+ topic/ph hi-d/i ">Flash Media Server Developer’s Guide</i>』の「<xref href="http://www.adobe.com/go/learn_fms_replicate_en" class="- topic/xref ">Replicate an object within a group</xref>」を参照してください。</p>
     
     <p class="- topic/p ">このメソッドは NetStatusEvent を <codeph class="+ topic/ph pr-d/codeph ">info</codeph> オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティの <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Replication.Request</codeph> で NetGroup のイベントリスナーに送信します。 </p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このメソッドを呼び出す前に、<codeph class="+ topic/ph pr-d/codeph ">NetGroup.Neighbor.Connect</codeph> イベントをテストしてください。</p> 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/removeHaveObjects()" class="- topic/link "><linktext class="- topic/linktext ">removeHaveObjects()</linktext></link><link href="flash.net.xml#NetGroup/writeRequestedObject()" class="- topic/link "><linktext class="- topic/linktext ">writeRequestedObject()</linktext></link><link href="flash.net.xml#NetGroup/denyRequestedObject()" class="- topic/link "><linktext class="- topic/linktext ">denyRequestedObject()</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_Replication_Request" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.Replication.Request"</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:addMemberHint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addMemberHint</apiName><shortdesc class="- topic/shortdesc ">
     その peerID がグループのメンバーであることを指定するレコードを手動で追加します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">成功の場合は TRUE、エラーの場合は FALSE。
     
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">peerID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">潜在的なネイバーのセットに追加する peerID。
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">その peerID がグループのメンバーであることを指定するレコードを手動で追加しますが、すぐに接続する必要はありません。
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     その <codeph class="+ topic/ph pr-d/codeph ">peerID</codeph> がグループのメンバーであることを指定するレコードを手動で追加します。トポロジーに必要な場合にのみ、すぐに接続が試行されます。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/addNeighbor()" class="- topic/link "><linktext class="- topic/linktext ">addNeighbor()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:addNeighbor" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addNeighbor</apiName><shortdesc class="- topic/shortdesc ">
     既にグループに存在しているはずの指定された peerID へ直ちに直接接続することによって、手動でネイバーを追加します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">成功の場合は TRUE、エラーの場合は FALSE。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">peerID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">すぐに接続する peerID。
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">指定された peerID にすぐに直接接続することによって、ネイバーを手動で追加します。
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     既にグループに存在しているはずの指定された <codeph class="+ topic/ph pr-d/codeph ">peerID</codeph> へ直ちに直接接続することによって、ネイバーを手動で追加します。この直接接続は、トポロジーに必要ない場合、後で切断される場合があります。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/addMemberHint()" class="- topic/link "><linktext class="- topic/linktext ">addMemberHint()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:addWantObjects" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addWantObjects</apiName><shortdesc class="- topic/shortdesc ">
     取得するオブジェクトのセットに、startIndex から endIndex の範囲にあるオブジェクトを追加します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このメソッドに渡される数は 0 より小さいか、9007199254740992 より大きくなります。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Want セットに追加するオブジェクトインデックスの範囲の始まり。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">endIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Want セットに追加するオブジェクトインデックスの範囲の終わり。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">取得するオブジェクトのセットにオブジェクトを追加します。
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     取得するオブジェクトのセットに、<codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> から <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> の範囲にあるオブジェクトを追加します。インデックスは、0 ～ 9007199254740992 の整数である必要があります。デフォルトでは、Want セットは空です。
     
     <p class="- topic/p ">オブジェクトのレプリケーションについて詳しくは、『<i class="+ topic/ph hi-d/i ">Flash Media Server Developer’s Guide</i>』の「<xref href="http://www.adobe.com/go/learn_fms_replicate_en" class="- topic/xref ">Replicate an object within a group</xref>」を参照してください。</p>
     
     <p class="- topic/p ">このメソッドは、<codeph class="+ topic/ph pr-d/codeph ">info.code</codeph> プロパティで<codeph class="+ topic/ph pr-d/codeph ">NetGroup.Replication.Fetch.SendNotify</codeph> が指定されている NetStatusEvent を、NetGroup のイベントリスナーに送信します。このイベントの後には、<codeph class="+ topic/ph pr-d/codeph ">NetGroup.Replication.Fetch.Failed</codeph> または <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Replication.Fetch.Result</codeph> イベントが続きます。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このメソッドを呼び出す前に、<codeph class="+ topic/ph pr-d/codeph ">NetGroup.Neighbor.Connect</codeph> イベントをテストしてください。</p> 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/removeWantObjects()" class="- topic/link "><linktext class="- topic/linktext ">removeWantObjects()</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_Replication_Fetch_SendNotify" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.Replication.Fetch.SendNotify"</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_Replication_Fetch_Failed" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.Replication.Fetch.Failed"</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_Replication_Fetch_Result" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.Replication.Fetch.Result"</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     グループから切断し、この NetGroup を閉じます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     グループから切断し、この NetGroup を閉じます。この NetGroup はこのメソッドを呼び出した後、使用できません。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:NetGroup:convertPeerIDToGroupAddress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">convertPeerIDToGroupAddress</apiName><shortdesc class="- topic/shortdesc ">
     peerID を sendToNearest() メソッドで使用するために適切なグループアドレスに変換します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">peerID のグループアドレス。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">peerID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">変換する peerID です。
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">peerID を sendToNearest() メソッドで使用するために適切なグループアドレスに変換します。
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     peerID を <codeph class="+ topic/ph pr-d/codeph ">sendToNearest()</codeph> メソッドで使用するために適切なグループアドレスに変換します。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/farID" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.farID</linktext></link><link href="flash.net.xml#NetConnection/nearID" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.nearID</linktext></link><link href="flash.net.xml#NetStream/farID" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.farID</linktext></link><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">sendToNearest()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:denyRequestedObject" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">denyRequestedObject</apiName><shortdesc class="- topic/shortdesc ">
     以前に addHaveObjects() でアドバタイズされたオブジェクトの NetStatusEvent NetGroup.Replication.Request で受信した要求を拒否します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">requestID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">NetGroup.Replication.Request</codeph> イベントで提供される要求識別子。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">以前にアドバタイズされたオブジェクトに対する要求を拒否します。
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     以前に <codeph class="+ topic/ph pr-d/codeph ">addHaveObjects()</codeph> でアドバタイズされたオブジェクトの <codeph class="+ topic/ph pr-d/codeph ">NetStatusEvent NetGroup.Replication.Request</codeph> で受信した要求を拒否します。この要求が Have セットから取り下げられない限り、または取り下げられるまで、要求元によってこのオブジェクトが再び要求される可能性があります。
     
     <p class="- topic/p ">オブジェクトのレプリケーションについて詳しくは、『<i class="+ topic/ph hi-d/i ">Flash Media Server Developer’s Guide</i>』の「<xref href="http://www.adobe.com/go/learn_fms_replicate_en" class="- topic/xref ">Replicate an object within a group</xref>」を参照してください。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このメソッドを呼び出す前に、<codeph class="+ topic/ph pr-d/codeph ">NetGroup.Neighbor.Connect</codeph> イベントをテストしてください。</p> 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/addHaveObjects()" class="- topic/link "><linktext class="- topic/linktext ">addHaveObjects()</linktext></link><link href="flash.net.xml#NetGroup/writeRequestedObject()" class="- topic/link "><linktext class="- topic/linktext ">writeRequestedObject()</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_Replication_Request" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.Replication.Request"</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:post" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">post</apiName><shortdesc class="- topic/shortdesc ">
     グループ内のすべてのメンバーにメッセージを送信します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">アップロードされた場合のメッセージの messageID です。エラーの場合は <codeph class="+ topic/ph pr-d/codeph ">null</codeph> になります。messageID はメッセージを直列化した raw バイトの 16 進数の SHA256 です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">グループ内の他のすべてのメンバーに送信するメッセージ。
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     グループ内のすべてのメンバーにメッセージを送信します。このメソッドを呼び出すには、NetGroup コンストラクターに渡される groupspec 内で、<codeph class="+ topic/ph pr-d/codeph ">GroupSpecifier.postingEnabled</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定されている必要があります。詳細については、『<xref href="http://www.adobe.com/go/learn_fms_post_en" class="- topic/xref ">Flash Media Server Developer’s Guide</xref>』の「<i class="+ topic/ph hi-d/i ">Post messages to a group</i>」を参照してください。
     
     <p class="- topic/p ">すべてのメッセージは一意である必要があり、以前にアップロードされたメッセージと同一のメッセージはアップロードされない場合があります。シーケンス番号を使用して、メッセージを一意にします。</p>
     
     <p class="- topic/p ">メッセージの配信は順序付けられません。メッセージの配信は保証されません。</p>
     
     <p class="- topic/p ">メッセージは AMF でシリアル化されます。メッセージの型は、Object、int、Number、String のいずれかです。メッセージは MovieClip にはできません。</p>
     
     <p class="- topic/p ">このメソッドは NetStatusEvent を <codeph class="+ topic/ph pr-d/codeph ">info.code</codeph> プロパティの <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Posting.Notify</codeph> で NetGroup のイベントリスナーに送信します。「<codeph class="+ topic/ph pr-d/codeph ">NetGroup.Posting.Notify</codeph>」イベントは、クライアント上とサーバー上の両方の NetGroup に送信されます。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このメソッドを呼び出す前に、<codeph class="+ topic/ph pr-d/codeph ">NetGroup.Neighbor.Connect</codeph> イベントをテストしてください。</p> 
     
     </apiDesc><example conref="examples\NetGroupPostExample.as" class="- topic/example "> これは、ピアーツアーピアーネットワークを使用するシンプルなテキストチャットアプリケーションです。アプリケーションは RTMFP で Flash Media Server に接続します。サーバーは、クライアントアプリケーションのフィンガープリントを保存し、クライアントの接続時にピアーグループを管理します。ただし、すべてのデータはクライアント（ピアー）間でやり取りされ、サーバーへは戻されません。
 <p class="- topic/p ">アプリケーションの実行時に、テキスト入力フィールドに任意のグループ名を入力できます。GroupSpecifier クラスはこのグループ名（および設定済みの GroupSpecifier プロパティ）を使用して、グループの永続的な固有名となるストリングを作成します。他のクライアントをグループに接続するには、そのクライアントも同じグループ名を使用する必要があります。例えば、クライアント A が「firstmesh」というグループ名を使用する場合、クライアント A と通信したい他のクライアントも、グループ名「firstmesh」を使用する必要があります。クライアント B が「kite」というグループ名を使用している場合、接続は成功しますが、新しいグループが作成され、クライアント B はクライアント A および「firstmesh」グループに属する他のクライアントとは通信できません。</p>
 <p class="- topic/p ">この例を実行するには、Button、Label、TextInput、TextArea の各コンポーネントを Flash Professional のライブラリに追加します。</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">



package  {

    import flash.display.Sprite;
    import flash.events.TextEvent;
    import flash.events.MouseEvent;
    import flash.events.NetStatusEvent;
    import fl.events.ComponentEvent;
    import fl.controls.Label;
    import fl.controls.Button;
    import fl.controls.TextInput;
    import fl.controls.TextArea;
    import flash.text.TextFieldAutoSize;
    import flash.net.*;

    public class NetGroupPostExample extends Sprite{

        private var connectButton:Button;
        private var disconnectButton:Button;
        private var groupNameText:TextInput;
        private var userNameText:TextInput;
        private var chatText:TextInput;
        private var statusLog:TextArea;
        private var groupLabel:Label;
        private var userLabel:Label;

        private var netConnection:NetConnection = null;
        private var netGroup:NetGroup = null;
        private var sequenceNumber:uint = 0;
        private var connected:Boolean = false;
        private var joinedGroup:Boolean = false;

        private const SERVER:String = "rtmfp://fms.example.com/someapp";

        public function NetGroupPostExample() {
            DoUI();
        }

        // Writes messages to the TextArea.
        private function StatusMessage(msg:Object):void{
            statusLog.text += msg;
            statusLog.verticalScrollPosition = statusLog.textHeight;
            statusLog.validateNow();
        }

        // Handles all NetStatusEvents for the NetConnection and the NetGroup.
        // This code includes cases it doesn't handle so you can see the cases
        // and their info objects for learning purposes.
        private function NetStatusHandler(e:NetStatusEvent):void{
            StatusMessage(e.info.code + "\n");
            switch(e.info.code){
                case "NetConnection.Connect.Success":
                    connectButton.enabled = false;
                    disconnectButton.enabled = true;
                    OnConnect();
                    break;

                case "NetConnection.Connect.Closed":
                    OnDisconnect();
                    break;

                case "NetGroup.Connect.Success": // e.info.group
                    OnNetGroupConnect();
                    break;

                case "NetGroup.Connect.Rejected": // e.info.group
                case "NetGroup.Connect.Failed": // e.info.group
                    break;

                case "NetGroup.Posting.Notify": // e.info.message, e.info.messageID
                    OnPosting(e.info.message);
                    break;

                case "NetStream.MulticastStream.Reset":
                case "NetStream.Buffer.Full":
                    break;

                case "NetGroup.SendTo.Notify": // e.info.message, e.info.from, e.info.fromLocal
                case "NetGroup.LocalCoverage.Notify": //
                case "NetGroup.Neighbor.Connect": // e.info.neighbor
                case "NetGroup.Neighbor.Disconnect": // e.info.neighbor
                case "NetGroup.MulticastStream.PublishNotify": // e.info.name
                case "NetGroup.MulticastStream.UnpublishNotify": // e.info.name
                case "NetGroup.Replication.Fetch.SendNotify": // e.info.index
                case "NetGroup.Replication.Fetch.Failed": // e.info.index
                case "NetGroup.Replication.Fetch.Result": // e.info.index, e.info.object
                case "NetGroup.Replication.Request": // e.info.index, e.info.requestID
                default:
                    break;
                }
            }
        // Creates a NetConnection to Flash Media Server if the app isn't already connected
        // and if there's a group name in the TextInput field.
        private function DoConnect(e:MouseEvent):void{
            if(!connected &amp;&amp; (groupNameText.length > 0)){
                StatusMessage("Connecting to \"" + SERVER + "\" ...\n");
                netConnection = new NetConnection();
                netConnection.addEventListener(NetStatusEvent.NET_STATUS, NetStatusHandler);
                // To connect to Flash Media Server, pass the server name.
                netConnection.connect(SERVER);
            }
            else
            {
                StatusMessage("Enter a group name");
            }
        }

        // Called in the "NetConnection.Connect.Success" case in the NetStatusEvent handler.
        private function OnConnect():void{

            StatusMessage("Connected\n");
            connected = true;

            // Create a GroupSpecifier object to pass to the NetGroup constructor.
            // The GroupSpecifier determines the properties of the group
            var groupSpecifier:GroupSpecifier;
            groupSpecifier = new GroupSpecifier("aslrexample/" + groupNameText.text);
            groupSpecifier.postingEnabled = true;
            groupSpecifier.serverChannelEnabled = true;

            netGroup = new NetGroup(netConnection, groupSpecifier.groupspecWithAuthorizations());
            netGroup.addEventListener(NetStatusEvent.NET_STATUS, NetStatusHandler);

            StatusMessage("Join \"" + groupSpecifier.groupspecWithAuthorizations() + "\"\n");

        }

        private function OnNetGroupConnect():void{
            joinedGroup = true;
        }

        private function DoDisconnect(e:MouseEvent):void{
            if(netConnection){
                netConnection.close();
            }
        }

        private function OnDisconnect():void{
            StatusMessage("Disconnected\n");
            netConnection = null;
            netGroup = null;
            connected = false;
            joinedGroup = false;
            connectButton.enabled = true;
            disconnectButton.enabled = false;
        }

        private function ClearChatText():void{
            chatText.text = "";
        }

        // Called when you the chatText field has focus and you press Enter.
        private function DoPost(e:ComponentEvent):void{
            if(joinedGroup){
                var message:Object = new Object;
                message.user = userNameText.text;
                message.text = chatText.text;
                message.sequence = sequenceNumber++;
                message.sender = netConnection.nearID;

                netGroup.post(message);
                StatusMessage("==> " + chatText.text + "\n");
            } else {
                StatusMessage("Click Connect before sending a chat message");
            }
            ClearChatText();
        }

        private function OnPosting(message:Object):void{
            StatusMessage("&lt;" + message.user + "> " + message.text + "\n");
        }

        private function DoUI():void {

            groupLabel = new Label();
            groupLabel.move(20, 10);
            groupLabel.autoSize = TextFieldAutoSize.LEFT
            groupLabel.text = "Group name:"
            addChild(groupLabel);

            groupNameText = new TextInput();
            groupNameText.move(90, 10);
            groupNameText.text = "channel" + (int(Math.random() * 899) + 101);
            addChild(groupNameText);

            connectButton = new Button();
            connectButton.addEventListener(MouseEvent.CLICK, DoConnect);
            connectButton.move(205, 10);
            connectButton.label = "Connect";
            addChild(connectButton);

            disconnectButton = new Button();
            disconnectButton.addEventListener(MouseEvent.CLICK, DoDisconnect);
            disconnectButton.move(310, 10);
            disconnectButton.label = "Disconnect";
            disconnectButton.enabled = false;
            addChild(disconnectButton);

            statusLog = new TextArea();
            statusLog.move(30, 38);
            statusLog.width = 360;
            statusLog.height = 215;
            statusLog.editable = false;
            addChild(statusLog);

            userLabel = new Label();
            userLabel.move(20, 270);
            userLabel.autoSize = TextFieldAutoSize.LEFT
            userLabel.text = "User name:"
            addChild(userLabel);

            userNameText = new TextInput();
            userNameText.move(80, 270);
            userNameText.text = "user " + int(Math.random() * 65536);
            addChild(userNameText);

            chatText = new TextInput();
            chatText.addEventListener(ComponentEvent.ENTER, DoPost);
            chatText.move(185, 270);
            chatText.maxChars = 255;
            chatText.width = 215;
            addChild(chatText);

        }

        public function onPlayStatus(info:Object):void {}
        public function onMetaData(info:Object):void {}
        public function onCuePoint(info:Object):void {}
        public function onTextData(info:Object):void {}

    }

}




</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.events.xml#NetStatusEvent/code_NetGroup_Posting_Notify" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.Posting.Notify"</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:removeHaveObjects" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">removeHaveObjects</apiName><shortdesc class="- topic/shortdesc ">
     このノードがネイバーにアドバタイズするオブジェクト（要求を満たすオブジェクト）のセットから、startIndex から endIndex の範囲に含まれるオブジェクトを削除します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このメソッドに渡される数は 0 より小さいか、9007199254740992 より大きくなります。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Have セットから削除するオブジェクトインデックスの範囲の始まり。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">endIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Have セットから削除するオブジェクトインデックスの範囲の終わり。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">このノードがネイバーにアドバタイズするオブジェクト（要求を満たすオブジェクト）のセットからオブジェクトを削除します。
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このノードがネイバーにアドバタイズするオブジェクト（要求を満たすオブジェクト）のセットから、<codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> から <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> の範囲に含まれるオブジェクトを削除します。インデックスは、0 ～ 9007199254740992 の整数である必要があります。
     
     <p class="- topic/p ">オブジェクトのレプリケーションについて詳しくは、『<i class="+ topic/ph hi-d/i ">Flash Media Server Developer’s Guide</i>』の「<xref href="http://www.adobe.com/go/learn_fms_replicate_en" class="- topic/xref ">Replicate an object within a group</xref>」を参照してください。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このメソッドを呼び出す前に、<codeph class="+ topic/ph pr-d/codeph ">NetGroup.Neighbor.Connect</codeph> イベントをテストしてください。</p> 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/addHaveObjects()" class="- topic/link "><linktext class="- topic/linktext ">addHaveObjects()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:removeWantObjects" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">removeWantObjects</apiName><shortdesc class="- topic/shortdesc ">
     取得するオブジェクトのセットから、startIndex から endIndex の範囲に含まれるオブジェクトを削除します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このメソッドに渡される数は 0 より小さいか、9007199254740992 より大きくなります。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Want セットから削除するオブジェクトインデックスの範囲の始まり。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">endIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Want セットから削除するオブジェクトインデックスの範囲の終わり。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">取得するオブジェクトのセットからオブジェクトを削除します。
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     取得するオブジェクトのセットから、<codeph class="+ topic/ph pr-d/codeph ">startIndex </codeph> から <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> の範囲に含まれるオブジェクトを削除します。インデックスは、0 ～ 9007199254740992 の整数である必要があります。
     
     <p class="- topic/p ">オブジェクトのレプリケーションについて詳しくは、『<i class="+ topic/ph hi-d/i ">Flash Media Server Developer’s Guide</i>』の「<xref href="http://www.adobe.com/go/learn_fms_replicate_en" class="- topic/xref ">Replicate an object within a group</xref>」を参照してください。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このメソッドを呼び出す前に、<codeph class="+ topic/ph pr-d/codeph ">NetGroup.Neighbor.Connect</codeph> イベントをテストしてください。</p> 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/addWantObjects()" class="- topic/link "><linktext class="- topic/linktext ">addWantObjects()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:sendToAllNeighbors" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sendToAllNeighbors</apiName><shortdesc class="- topic/shortdesc ">
     すべてのネイバーにメッセージを送信します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">送信の成功またはエラーを示す列挙クラス NetGroupSendResult のプロパティ。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">送信するメッセージです。
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     すべてのネイバーにメッセージを送信します。1 つ以上のネイバーが選択された場合、<codeph class="+ topic/ph pr-d/codeph ">NetGroupSendResult.SENT</codeph> を返します。
     
     <p class="- topic/p ">メッセージのルーティングについて詳しくは、『<i class="+ topic/ph hi-d/i ">Flash Media Server Developer’s Guide</i>』の「<xref href="http://www.adobe.com/go/learn_fms_direct_routing_en" class="- topic/xref ">Route messages directly to a peer</xref>」を参照してください。</p>
     
     <p class="- topic/p ">ノードがメッセージを受信すると、NetStatusEvent が <codeph class="+ topic/ph pr-d/codeph ">info</codeph> オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティの <codeph class="+ topic/ph pr-d/codeph ">NetGroup.SendTo.Notify</codeph> オブジェクトで NetGroup のイベントリスナーに送信されます。 </p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このメソッドを呼び出す前に、<codeph class="+ topic/ph pr-d/codeph ">NetGroup.Neighbor.Connect</codeph> イベントをテストしてください。</p> 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/sendToNeighbor()" class="- topic/link "><linktext class="- topic/linktext ">sendToNeighbor()</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_SendTo_Notify" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.SendTo.Notify"</linktext></link><link href="flash.net.xml#NetGroupSendResult" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroupSendResult</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:sendToNearest" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sendToNearest</apiName><shortdesc class="- topic/shortdesc ">
     指定されたグループアドレスに最も近いネイバー（ローカルノード）にメッセージを送信します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">送信の成功またはエラーを示す列挙クラス NetGroupSendResult のプロパティ。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">送信するメッセージです。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">groupAddress</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">メッセージの配信先のグループアドレス。
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定されたグループアドレスに最も近いネイバー（ローカルノード）にメッセージを送信します。リング全体のネイバーを考慮します。メッセージが宛先に正しく送信された場合、<codeph class="+ topic/ph pr-d/codeph ">NetGroupSendResult.SENT</codeph> を返します。 
     
     <p class="- topic/p ">メッセージのルーティングについて詳しくは、『<i class="+ topic/ph hi-d/i ">Flash Media Server Developer’s Guide</i>』の「<xref href="http://www.adobe.com/go/learn_fms_direct_routing_en" class="- topic/xref ">Route messages directly to a peer</xref>」を参照してください。</p>
     
     <p class="- topic/p ">ノードがメッセージを受信すると、NetStatusEvent が <codeph class="+ topic/ph pr-d/codeph ">info</codeph> オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティの <codeph class="+ topic/ph pr-d/codeph ">NetGroup.SendTo.Notify</codeph> オブジェクトで NetGroup のイベントリスナーに送信されます。 </p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このメソッドを呼び出す前に、<codeph class="+ topic/ph pr-d/codeph ">NetGroup.Neighbor.Connect</codeph> イベントをテストしてください。</p> 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/convertPeerIDToGroupAddress()" class="- topic/link "><linktext class="- topic/linktext ">convertPeerIDToGroupAddress()</linktext></link><link href="flash.net.xml#NetGroup/receiveMode" class="- topic/link "><linktext class="- topic/linktext ">receiveMode</linktext></link><link href="flash.net.xml#NetGroupSendResult" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroupSendResult</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_SendTo_Notify" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.SendTo.Notify"</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:sendToNeighbor" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sendToNeighbor</apiName><shortdesc class="- topic/shortdesc ">
     sendMode パラメーターで指定されたネイバーにメッセージを送信します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">送信の成功またはエラーを示す列挙クラス NetGroupSendResult のプロパティ。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">送信するメッセージです。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sendMode</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">メッセージの送信先のネイバーを指定する列挙クラス NetGroupSendMode のプロパティ。
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">sendMode パラメーターで指定されたネイバーにメッセージを送信します。
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">sendMode</codeph> パラメーターで指定されたネイバーにメッセージを送信します。要求された宛先にメッセージが正しく送信された場合、<codeph class="+ topic/ph pr-d/codeph ">NetGroupSendResult.SENT</codeph> を返します。
     
     <p class="- topic/p ">メッセージのルーティングについて詳しくは、『<i class="+ topic/ph hi-d/i ">Flash Media Server Developer’s Guide</i>』の「<xref href="http://www.adobe.com/go/learn_fms_direct_routing_en" class="- topic/xref ">Route messages directly to a peer</xref>」を参照してください。</p>
     
     <p class="- topic/p ">ノードがメッセージを受信すると、NetStatusEvent が <codeph class="+ topic/ph pr-d/codeph ">info</codeph> オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティの <codeph class="+ topic/ph pr-d/codeph ">NetGroup.SendTo.Notify</codeph> オブジェクトで NetGroup のイベントリスナーに送信されます。 </p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このメソッドを呼び出す前に、<codeph class="+ topic/ph pr-d/codeph ">NetGroup.Neighbor.Connect</codeph> イベントをテストしてください。</p> 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/sendToAllNeighbors()" class="- topic/link "><linktext class="- topic/linktext ">sendToAllNeighbors()</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_SendTo_Notify" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.SendTo.Notify"</linktext></link><link href="flash.net.xml#NetGroupSendMode" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroupSendMode</linktext></link><link href="flash.net.xml#NetGroupSendResult" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroupSendResult</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:writeRequestedObject" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeRequestedObject</apiName><shortdesc class="- topic/shortdesc ">
     以前に addHaveObjects() メソッドで通知したオブジェクトの NetStatusEvent NetGroup.Replication.Request で受信した要求を満たします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">requestID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">NetGroup.Replication.Request</codeph> イベントで提供される要求識別子。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">object</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">NetGroup.Replication.Request</codeph> イベントで指定されたインデックスに対応するオブジェクト。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">以前に通知されたオブジェクトの要求を満たします。
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     以前に <codeph class="+ topic/ph pr-d/codeph ">addHaveObjects()</codeph> メソッドで通知したオブジェクトの NetStatusEvent <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Replication.Request</codeph> で受信した要求を満たします。<codeph class="+ topic/ph pr-d/codeph ">object</codeph> には、Object、int、Number、String のいずれかを使用できます。<codeph class="+ topic/ph pr-d/codeph ">object</codeph> には MovieClip は指定できません。
     
     <p class="- topic/p ">オブジェクトのレプリケーションについて詳しくは、『<i class="+ topic/ph hi-d/i ">Flash Media Server Developer’s Guide</i>』の「<xref href="http://www.adobe.com/go/learn_fms_replicate_en" class="- topic/xref ">Replicate an object within a group</xref>」を参照してください。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このメソッドを呼び出す前に、<codeph class="+ topic/ph pr-d/codeph ">NetGroup.Neighbor.Connect</codeph> イベントをテストしてください。</p> 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/addHaveObjects()" class="- topic/link "><linktext class="- topic/linktext ">addHaveObjects()</linktext></link><link href="flash.net.xml#NetGroup/denyRequestedObject()" class="- topic/link "><linktext class="- topic/linktext ">denyRequestedObject()</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_Replication_Request" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.Replication.Request"</linktext></link></related-links></apiOperation><apiValue id="flash.net:NetGroup:estimatedMemberCount:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">estimatedMemberCount</apiName><shortdesc class="- topic/shortdesc ">
     ローカルネイバーフッドの密度に基づき、グループアドレスが均等に分配されることを前提にして、グループの推定メンバー数を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Q for dev: why would someone use this instead of neighborcount? --brs
     </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">グループの推定メンバー数を指定します。
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ローカルネイバーフッドの密度に基づき、グループアドレスが均等に分配されることを前提にして、グループの推定メンバー数を指定します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/neighborCount" class="- topic/link "><linktext class="- topic/linktext ">neighborCount</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroup:info:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">info</apiName><shortdesc class="- topic/shortdesc ">
     NetGroupInfo オブジェクトを返します。このオブジェクトのプロパティに、NetGroup の RTMFP ピアーツーピアーデータ転送に関するサービスの質（QoS）の統計が示されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.net:NetGroupInfo</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">NetGroupInfo オブジェクトを返します。このオブジェクトのプロパティにサービスの質（QoS）の統計が示されます。
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     NetGroupInfo オブジェクトを返します。このオブジェクトのプロパティに、NetGroup の RTMFP ピアーツーピアーデータ転送に関するサービスの質（QoS）の統計が示されます。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroupInfo" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroupInfo</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroup:localCoverageFrom:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localCoverageFrom</apiName><shortdesc class="- topic/shortdesc ">
     このノードが「最も近く」にあって管理しているグループアドレスの範囲の始まりを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このノードが「最も近く」にあって管理しているグループアドレスの範囲の始まりを指定します。この範囲は、増分方向でグループアドレス ring mod 2<sup class="+ topic/ph hi-d/sup ">256</sup> によって指定されます。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/localCoverageTo" class="- topic/link "><linktext class="- topic/linktext ">localCoverageTo</linktext></link><link href="flash.net.xml#NetGroup/receiveMode" class="- topic/link "><linktext class="- topic/linktext ">receiveMode</linktext></link><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">sendToNearest()</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_LocalCoverage_Notify" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.LocalCoverage.Notify"</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroup:localCoverageTo:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localCoverageTo</apiName><shortdesc class="- topic/shortdesc ">
     このノードが「最も近く」にあって管理しているグループアドレスの範囲の終わりを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このノードが「最も近く」にあって管理しているグループアドレスの範囲の終わりを指定します。この範囲は、増分方向でグループアドレス ring mod 2<sup class="+ topic/ph hi-d/sup ">256</sup> によって指定されます。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/localCoverageFrom" class="- topic/link "><linktext class="- topic/linktext ">localCoverageFrom</linktext></link><link href="flash.net.xml#NetGroup/receiveMode" class="- topic/link "><linktext class="- topic/linktext ">receiveMode</linktext></link><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">sendToNearest()</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_LocalCoverage_Notify" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.LocalCoverage.Notify"</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroup:neighborCount:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">neighborCount</apiName><shortdesc class="- topic/shortdesc ">
     このノードが直接接続されているグループメンバーの数を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">このノードが直接接続されているグループメンバーの数を指定します。
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このノードが直接接続されているグループメンバーの数を指定します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/addNeighbor()" class="- topic/link "><linktext class="- topic/linktext ">addNeighbor()</linktext></link><link href="flash.net.xml#NetGroup/estimatedMemberCount" class="- topic/link "><linktext class="- topic/linktext ">estimatedMemberCount</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_Neighbor_Connect" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.Neighbor.Connect"</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_Neighbor_Disconnect" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.Neighbor.Disconnect"</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroup:receiveMode:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">receiveMode</apiName><shortdesc class="- topic/shortdesc ">
     NetGroupReceiveMode enum クラスの値の 1 つとして、ノードの配信受信モードを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     NetGroupReceiveMode enum クラスの値の 1 つとして、ノードの配信受信モードを指定します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/localCoverageFrom" class="- topic/link "><linktext class="- topic/linktext ">localCoverageFrom</linktext></link><link href="flash.net.xml#NetGroup/localCoverageTo" class="- topic/link "><linktext class="- topic/linktext ">localCoverageTo</linktext></link><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">sendToNearest()</linktext></link><link href="flash.net.xml#NetGroupReceiveMode" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroupReceiveMode</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroup:replicationStrategy:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">replicationStrategy</apiName><shortdesc class="- topic/shortdesc ">
     オブジェクトレプリケーションのフェッチ方法を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     オブジェクトレプリケーションのフェッチ方法を指定します。値は、NetGroupReplicationStrategy クラスに列挙された値の 1 つです。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroupReplicationStrategy" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroupReplicationStrategy</linktext></link></related-links></apiValue></apiClassifier><apiOperation id="globalOperation:flash.net:getClassByAlias" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getClassByAlias</apiName><shortdesc class="- topic/shortdesc ">
     registerClassAlias() メソッドの呼び出しを介して以前にエイリアスを登録したクラスを検索します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>includeExample examples\GetClassByAliasExample.as -noswf
      
      </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">エイリアスが登録されていません。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ReferenceError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ReferenceError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定されたエイリアスに関連付けられたクラスです。見つからない場合は、例外がスローされます。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Class</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">aliasName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">検索するエイリアスです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     既に <codeph class="+ topic/ph pr-d/codeph ">registerClassAlias()</codeph> メソッドの呼び出しによってエイリアスが登録されているクラスを検索します。
     <p class="- topic/p ">このメソッドは <codeph class="+ topic/ph pr-d/codeph ">flash.utils.getDefinitionByName()</codeph> メソッドとやり取りを行いません。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#/registerClassAlias()" class="- topic/link "><linktext class="- topic/linktext ">registerClassAlias()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:flash.net:navigateToURL" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">navigateToURL</apiName><shortdesc class="- topic/shortdesc ">
     Flash Player のコンテナを含むアプリケーション（通常はブラウザー）でウィンドウを開くか、置き換えます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>throws IOError The "digest" and "importToSandbox" properties of URLRequest
     are not supported by URLLoader.navigate.
     
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">request</codeph> オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">digest</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ではありません。URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">digest</codeph> プロパティを設定できるのは、<codeph class="+ topic/ph pr-d/codeph ">URLLoader.load()</codeph> メソッドを呼び出して SWZ ファイル（Adobe プラットフォームコンポーネント）を読み込む場合のみです。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Flash Player（および Adobe AIR のアプリケーションサンドボックスコンテンツ以外）では、このエラーは次の条件でスローされます。
     <ul class="- topic/ul "><li class="- topic/li ">信頼されていないローカル SWF ファイルはインターネットへの接続を許可されません。この問題は、この SWF ファイルを local-with-networking または trusted として分類し直すことで回避できます。</li><li class="- topic/li ">スクリプティング疑似 URL を評価するために試行された移動操作です。ただし、含まれるドキュメント（一般にブラウザー内の HTML ドキュメント）はアクセス権限が与えられていないサンドボックスからのものです。この問題は、含まれるドキュメントに <codeph class="+ topic/ph pr-d/codeph ">allowScriptAccess="always"</codeph> を指定することで回避できます。</li><li class="- topic/li ">HTML ファイルと SWF ファイルのドメインが一致しないとき、特別なウィンドウ <codeph class="+ topic/ph pr-d/codeph ">"_self"</codeph>、<codeph class="+ topic/ph pr-d/codeph ">"_top"</codeph>、または <codeph class="+ topic/ph pr-d/codeph ">"_parent"</codeph> の移動は、<codeph class="+ topic/ph pr-d/codeph ">allowScriptAccess</codeph> が <codeph class="+ topic/ph pr-d/codeph ">"none"</codeph> または <codeph class="+ topic/ph pr-d/codeph ">"sameDomain"</codeph> に設定されている HTML ページに SWF ファイルがある場合はできません。</li><li class="- topic/li ">デフォルト以外の名前を持つウィンドウを、ローカルファイルシステムのサンドボックスにある SWF ファイル内から移動することはできません。</li><li class="- topic/li ">一般的な予約ポートには接続できません。遮断されたポートの詳しいリストについては、『ActionScript 3.0 開発ガイド<i class="+ topic/ph hi-d/i "/>』の「ネットワーク API の制限」を参照してください。</li></ul>
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">マウスイベントやキー入力イベントなどのユーザー操作に応じてメソッドが呼び出されない場合。この要件は Flash Player のコンテンツおよび Adobe AIR のアプリケーションサンドボックスコンテンツ以外にのみ適用されます。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">request</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:URLRequest</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">移動先の URL を指定する URLRequest オブジェクトです。
     
     <p class="- topic/p "><ph class="- topic/ph ">Adobe AIR で実行中のコンテンツの場合、</ph><codeph class="+ topic/ph pr-d/codeph ">navigateToURL()</codeph> 関数を使用すると、ランタイムでは、POST メソッドを使用する URLRequest（<codeph class="+ topic/ph pr-d/codeph ">method</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph> に設定されているもの）は、GET メソッドとして処理されます。</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">window</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">request</codeph> パラメーターで指定されたドキュメントを表示するブラウザーウィンドウまたは HTML フレームです。特定のウィンドウの名前を入力するか、次の値のいずれかを使用します。
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"_self"</codeph> は、現在のウィンドウ内の現在のフレームを指定します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"_blank"</codeph> は、新規ウィンドウを指定します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"_parent"</codeph> は、現在のフレームの親を指定します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"_top"</codeph> は、現在のウィンドウ内の最上位のフレームを指定します。</li></ul>
     <p class="- topic/p ">このパラメーターに値を指定しない場合は、新しい空のウィンドウが作成されます。スタンドアローン Flash Player では、新しい（<codeph class="+ topic/ph pr-d/codeph ">"_blank"</codeph>）ウィンドウまたは名前付きのウィンドウのいずれかを指定できます。その他の値は適用されません。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>ローカルファイルシステムのサンドボックスで実行される SWF ファイル内のコードが <codeph class="+ topic/ph pr-d/codeph ">navigateToURL()</codeph> 関数を呼び出して <codeph class="+ topic/ph pr-d/codeph ">window</codeph> パラメーターにカスタムウィンドウ名を指定すると、そのウィンドウ名はランダム名に受け継がれます。<codeph class="+ topic/ph pr-d/codeph ">"_flashXXXXXXXX"</codeph> の形式の名前になります。X はそれぞれがランダム 16 進数字を表します。同じセッション内で（含まれるブラウザーウィンドウを閉じるまでに）再度この関数を呼び出して <codeph class="+ topic/ph pr-d/codeph ">window</codeph> パラメーターに同じ名前を指定した場合は、同じランダムストリングが使用されます。</p>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <ph class="- topic/ph ">Flash Player のコンテナを含むアプリケーション（通常はブラウザー）でウィンドウを開くか、置き換えます。Adobe AIR では、関数によってデフォルトシステム Web ブラウザーで URL が開かれます。</ph>
     
     
      <p class="- topic/p ">  <b class="+ topic/ph hi-d/b ">重要なセキュリティメモ<i class="+ topic/ph hi-d/i "> </i></b> </p>
      <p class="- topic/p ">開発者は URL 値を FlashVars などの外部ソースから取得した <codeph class="+ topic/ph pr-d/codeph ">navigateToURL()</codeph> 関数に渡すことがよくあります。攻撃側は、クロスサイトスクリプティングなどの攻撃を実行するためにこれらの外部ソースを操作しようとする場合があります。したがって、開発者は URL 値をこの関数に渡す前にすべての URL を検証する必要があります。 </p>
      
     <p class="- topic/p ">URL の適切なデータ検証方法は、アプリケーション全体での URL の使用状況によって異なります。最も一般的なデータ検証方法では、URL が適切なスキームかどうかも検証します。例えば、javascript の意図しない許可です。URL はクロスサイトスクリプティングになる場合があります。URL が独自のドメイン内のものであることを検証することにより、フィッシング攻撃を行うユーザーによってオープンリダイレクタとして SWF ファイルが使用されないようにします。さらにセキュリティを強化するには、URL のパスを検証し、URL が RFC のガイドラインに準拠していることを確認することもできます。</p>
     
     <p class="- topic/p ">例えば、次に示す簡単なコードの例では、データの検証として、http:// または https:// で始まっていない URL を拒否し、URL が自分のドメイン名に含まれることを確認しています。すべての Web アプリケーションにこの例が適用できるとは限らないため、URL に対して追加のチェックが必要かどうかを検討することをお勧めします。 </p>
     
      <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     // AS3 Regular expression pattern match for URLs that start with http:// and https:// plus your domain name.
     function checkProtocol (flashVarURL:String):Boolean {
        // Get the domain name for the SWF if it is not known at compile time.
        // If the domain is known at compile time, then the following two lines can be replaced with a hard coded string.
        var my_lc:LocalConnection = new LocalConnection();
        var domainName:String = my_lc.domain;
        // Build the RegEx to test the URL.
        // This RegEx assumes that there is at least one "/" after the
        // domain. http://www.mysite.com will not match.
        var pattern:RegExp = new RegExp("^http[s]?\:\\/\\/([^\\/]+)\\/");
        var result:Object = pattern.exec(flashVarURL);
        if (result == null || result[1] != domainName || flashVarURL.length >= 4096) {
          return (false);
        }
        return (true);
     }  
     
      </codeblock>
     <p class="- topic/p ">ブラウザー内で実行されるローカル<i class="+ topic/ph hi-d/i "/>コンテンツの場合、<codeph class="+ topic/ph pr-d/codeph ">navigateToURL()</codeph> メソッドを呼び出すときに <codeph class="+ topic/ph pr-d/codeph ">"javascript:"</codeph> 擬似プロトコルを（最初のパラメーターとして渡される <codeph class="+ topic/ph pr-d/codeph ">URLRequest</codeph> オブジェクトを介して）指定できるのは、SWF ファイルとそれが含まれる Web ページ（存在する場合）が、信頼できるローカルのセキュリティサンドボックス内にある場合のみです。一部のブラウザーでは、javascript プロトコルを <codeph class="+ topic/ph pr-d/codeph ">navigateToURL()</codeph> メソッドと共に使用することをサポートしていません。代わりに、<codeph class="+ topic/ph pr-d/codeph ">call()</codeph> メソッド（<codeph class="+ topic/ph pr-d/codeph ">ExternalInterface</codeph> API）を使用し、JavaScript メソッドを取り込んでいる HTML ページ内で呼び出すことを検討してください。</p>
     
      <p class="- topic/p ">Flash Player、および Adobe AIR のアプリケーションサンドボックス以外では、一般的な予約ポートに接続することはできません。遮断されたポートの詳しいリストについては、『ActionScript 3.0 開発ガイド<i class="+ topic/ph hi-d/i "/>』の「ネットワーク API の制限」を参照してください。</p>
     
     <p class="- topic/p ">ブラウザーで実行される Flash Player 10 以降では、このメソッドをプログラムで使用してポップアップウィンドウを開く方法は有効でない場合があります。ブラウザー（およびブラウザーの設定）によってはポップアップウィンドウがブロックされる場合があり、すべてのポップアップウィンドウが表示される保証はありません。ただし、ユーザー操作の直接の結果として実行されるコード（マウスのクリックやキー入力イベントのイベントハンドラーなど）に限っては、このクラスを使用してポップアップウィンドウを開く方法が有効です。</p>
     
     <p class="- topic/p "> Flash Player 10 以降では、"multipart/form-data" などのマルチパート Content-Type にアップロードが含まれていると（アップロードが含まれているかどうかは POST ボディ内の "content-disposition" ヘッダーの "filename" パラメーターで示されます）、そのアップロードに適用されるセキュリティ規則によって POST 処理が拘束されます。</p>
     <ul class="- topic/ul "><li class="- topic/li ">POST 処理は、マウスのクリックやキーの押下などのユーザーが開始したアクションに応答して実行する必要があります。</li><li class="- topic/li ">POST 処理がクロスドメインである（POST ターゲットが、POST 要求を送信中の SWF ファイルと同じサーバー上にない）場合は、クロスドメインアクセスを許可する URL ポリシーファイルをターゲットサーバーが提供する必要があります。</li></ul>
     <p class="- topic/p ">また、すべてのマルチパート Content-Type では、RFC2046 標準に準拠した有効なシンタックスを使用する必要があります。シンタックスが有効でない場合は、アップロードに適用されるセキュリティ規則によって POST 処理が拘束されます。</p>
     
     
     
     <p class="- topic/p ">モバイルプラットフォームの AIR では、sms: および tel: URI スキームがサポートされます。Android では、vipaccess:、connectpro: および market: URI スキームがサポートされます。URL 構文は、プラットフォームの規則に従います。例えば、Android では URI スキームを小文字にする必要があります。これらのスキームのいずれかを使用して URL に移動すると、ランタイムによって、スキームを処理するためにデフォルトのアプリケーションで URL が開かれます。そのため、<codeph class="+ topic/ph pr-d/codeph ">tel:+5555555555</codeph> にアクセスすると、入力した指定の番号で電話ダイヤラーが開きます。電話ダイヤラーなどの別のアプリケーションまたはユーティリティは、URL を処理できる必要があります。</p>
     
     <p class="- topic/p ">次のコードは、Android 上で VIP Access アプリケーションと Connect Pro アプリケーションを呼び出す方法を示しています。</p>
     
      <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
       //Invoke the VIP Access Application.
       navigateToURL(new URLRequest("vipaccess://com.verisign.mvip.main?action=securitycode"));
     
       //Invoke the Connect Pro Application.
       navigateToURL(new URLRequest("connectpro://"));
     
      </codeblock>
     
     </apiDesc><example conref="examples\NavigateToURLExample.as" class="- topic/example "> 次の例では、新しいブラウザーウィンドウで URL http://www.adobe.com を開き、URLVariables オブジェクトで捕捉したユーザーセッションに関するデータを Web サーバーに渡します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.net.URLVariables;

    public class NavigateToURLExample extends Sprite {

        public function NavigateToURLExample() {
            var url:String = "http://www.adobe.com";
            var variables:URLVariables = new URLVariables();
            variables.exampleSessionId = new Date().getTime();
            variables.exampleUserLabel = "Your Name";
            var request:URLRequest = new URLRequest(url);
            request.data = variables;
            try {            
                navigateToURL(request);
            }
            catch (e:Error) {
                // handle error here
            }
        }
    }
}
</codeblock></example><example conref="examples\URLRequest_example.as" class="- topic/example "> 次の例は、Flash Player から navigateToURL() メソッドを使用して、新しいブラウザーウィンドウを開く方法を示しています。<xref href="http://actionscriptexamples.com/2008/12/08/opening-urls-in-new-browser-windows-using-actionscript-30-and-actionscript-20/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref> で作成された例。 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// Requires
// - Button symbol on Stage (or a display object, such as a MovieClip) with instance name "buttonSymbol"
//
buttonSymbol.addEventListener(MouseEvent.CLICK, buttonSymbol_click);
 
function buttonSymbol_click(evt:MouseEvent):void {
    var req:URLRequest = new URLRequest("http://www.adobe.com/");
    navigateToURL(req, "_blank");
}
</codeblock></example><example conref="examples\NavigateToURL.tel.1.as" class="- topic/example "> 次の例は、指定した番号を使用してデバイス電話ダイヤラーを起動するための構文を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var request:URLRequest = new URLRequest( "tel:+5555555555" );
navigateToURL( request );
</codeblock></example><example conref="examples\NavigateToURL.sms.1.as" class="- topic/example "> 次の例は、指定した受信者を使用してデバイステキストメッセージアプリケーションを起動するための構文を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var request:URLRequest = new URLRequest( "sms:+5555555555" );
navigateToURL( request );
</codeblock></example><example conref="examples\NavigateToURL.market.1.as" class="- topic/example "> 次の例は、Android Market アプリケーションを起動するための構文を示しています。Flash Player アプリケーションを検索するための search パラメーターが設定されます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var request:URLRequest = new URLRequest( "market://search?q=pname:com.adobe.flashplayer" );
navigateToURL( request );
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.external.xml#ExternalInterface/call()" class="- topic/link "><linktext class="- topic/linktext ">flash.external.ExternalInterface.call()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:flash.net:registerClassAlias" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">registerClassAlias</apiName><shortdesc class="- topic/shortdesc ">
     AMF（Action Message Format）でオブジェクトがエンコードされるとき、オブジェクトのクラス（タイプ）を維持します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">いずれかのパラメーターが <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">aliasName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">使用するエイリアスです。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">classObject</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Class</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定されたエイリアスに関連付けられたクラスです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     AMF（Action Message Format）でオブジェクトがエンコードされるとき、オブジェクトのクラス（タイプ）を維持します。オブジェクトを AMF にエンコードする場合、この関数は、そのクラスのエイリアスを保存し、オブジェクトのデコード時にクラスを復元できるようにします。エンコードコンテキストで、オブジェクトのクラスのエイリアスが登録されていない場合、オブジェクトは匿名オブジェクトとしてエンコードされます。同様に、デコードコンテキストで、同じエイリアスが登録されていない場合、デコードするデータに対して、匿名オブジェクトが作成されます。
     
     <p class="- topic/p ">LocalConnection、ByteArray、SharedObject、NetConnection、および NetStream はすべて、AMF でオブジェクトをエンコードするクラスの例です。</p>
     
     <p class="- topic/p ">エンコードおよびデコードコンテキストでは、エイリアスに同じクラスを使用する必要はありません。エンコード先およびデコード先のクラスに、ソースクラスによって直列化されたすべてのメンバーが含まれている限り、クラスを意図的に変更できます。</p>
     
     </apiDesc><example conref="examples\RegisterClassAliasExample.as" class="- topic/example "> この例では、<codeph class="+ topic/ph pr-d/codeph ">registerClassAlias()</codeph> 関数を使用して、クラス ExampleClass のエイリアス（<codeph class="+ topic/ph pr-d/codeph ">com.example.eg</codeph>）を登録します。クラスのエイリアスが登録されると、オブジェクトを ExampleClass のインスタンスとして非直列化できるようになり、コードは <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を出力します。<codeph class="+ topic/ph pr-d/codeph ">registerClassAlias()</codeph> 呼び出しが削除されると、コードは <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を出力します。 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.net.registerClassAlias;
    import flash.utils.ByteArray;

    public class RegisterClassAliasExample extends Sprite {
        public function RegisterClassAliasExample() {
            registerClassAlias("com.example.eg", ExampleClass);
            var eg1:ExampleClass = new ExampleClass();
            var ba:ByteArray = new ByteArray();
            ba.writeObject(eg1);
            ba.position = 0;
            var eg2:* = ba.readObject();
            trace(eg2 is ExampleClass); // true
        }
    }
}

class ExampleClass {}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding クラス</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:flash.net:sendToURL" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sendToURL</apiName><shortdesc class="- topic/shortdesc ">
     URL リクエストをサーバーに送信しますが、応答は無視します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>throws IOError The "digest" and "importToSandbox" properties of URLRequest
     are not supported by URLLoader.send.
     
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">信頼されていないローカル SWF ファイルはインターネットへの接続を許可されません。この問題は、この SWF ファイルを local-with-networking または trusted として分類し直すことで回避できます。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一般的な予約ポートには接続できません。遮断されたポートの詳しいリストについては、『ActionScript 3.0 開発ガイド<i class="+ topic/ph hi-d/i "/>』の「ネットワーク API の制限」を参照してください。
      
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">request</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:URLRequest</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データの送信先の URL を指定する URLRequest オブジェクトです。
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     URL リクエストをサーバーに送信しますが、応答は無視します。
     <p class="- topic/p ">サーバーの応答を調べるには、代わりに <codeph class="+ topic/ph pr-d/codeph ">URLLoader.load()</codeph> メソッドを使用します。</p>
     
     <p class="- topic/p ">一般的な予約ポートには接続できません。遮断されたポートの詳しいリストについては、『ActionScript 3.0 開発ガイド<i class="+ topic/ph hi-d/i "/>』の「ネットワーク API の制限」を参照してください。</p>
     
     <p class="- topic/p ">SWF ファイルがこのメソッドを使用しないようにするには、SWF コンテンツを含んでいる HTML ページに <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">object</codeph> タグおよび <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> タグのパラメーター）を設定します。</p>
     
     <p class="- topic/p "> Flash Player 10 以降では、"multipart/form-data" などのマルチパート Content-Type にアップロードが含まれていると（アップロードが含まれているかどうかは POST ボディ内の "content-disposition" ヘッダーの "filename" パラメーターで示されます）、そのアップロードに適用されるセキュリティ規則によって POST 処理が拘束されます。</p>
     <ul class="- topic/ul "><li class="- topic/li ">POST 処理は、マウスのクリックやキーの押下などのユーザーが開始したアクションに応答して実行する必要があります。</li><li class="- topic/li ">POST 処理がクロスドメインである（POST ターゲットが、POST 要求を送信中の SWF ファイルと同じサーバー上にない）場合は、クロスドメインアクセスを許可する URL ポリシーファイルをターゲットサーバーが提供する必要があります。</li></ul>
     <p class="- topic/p ">また、すべてのマルチパート Content-Type では、RFC2046 標準に準拠した有効なシンタックスを使用する必要があります。シンタックスが有効でない場合は、アップロードに適用されるセキュリティ規則によって POST 処理が拘束されます。</p>
     
     <p class="- topic/p ">セキュリティについて詳しくは、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
     
     </apiDesc><example conref="examples\SendToURLExample.as" class="- topic/example "> 次の例では、URLVariables オブジェクトで捕捉したユーザーセッションに関するデータを、http://www.yourDomain.com/application.jsp にあるアプリケーションに渡します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 package {
    import flash.display.Sprite;
    import flash.net.URLRequest;
    import flash.net.URLVariables;
    import flash.net.sendToURL;

    public class SendToURLExample extends Sprite {

        public function SendToURLExample() {
            var url:String = "http://www.yourDomain.com/application.jsp";
            var variables:URLVariables = new URLVariables();
            variables.sessionId = new Date().getTime();
            variables.userLabel = "Your Name";

            var request:URLRequest = new URLRequest(url);
            request.data = variables;
            trace("sendToURL: " + request.url + "?" + request.data);
            try {
                sendToURL(request);
            }
            catch (e:Error) {
                // handle error here
            }
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiClassifier languages="" id="flash.net:NetGroupReceiveMode" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetGroupReceiveMode</apiName><shortdesc class="- topic/shortdesc ">
NetGroupReceiveMode クラスは、NetGroup クラスの receiveMode プロパティに使用される定数値の列挙です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">NetGroup クラスの receiveMode プロパティに使用される定数値の列挙。

</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
NetGroupReceiveMode クラスは、NetGroup クラスの <codeph class="+ topic/ph pr-d/codeph ">receiveMode</codeph> プロパティに使用される定数値の列挙です。

</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/receiveMode" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.receiveMode</linktext></link><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNearest()</linktext></link></related-links><apiValue id="flash.net:NetGroupReceiveMode:EXACT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">EXACT</apiName><shortdesc class="- topic/shortdesc "> 
    ネイバーが使用するアドレスがこのノードのアドレスと正確に一致する場合にのみネイバーからのローカルメッセージをこのノードが受け入れることを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">exact</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    ネイバーが使用するアドレスがこのノードのアドレスと正確に一致する場合にのみネイバーからのローカルメッセージをこのノードが受け入れることを指定します。つまり、このノードは <codeph class="+ topic/ph pr-d/codeph ">NetGroup.sendToNearest()</codeph> に渡される <codeph class="+ topic/ph pr-d/codeph ">groupAddress</codeph> パラメーターがこのノードのグループアドレスと正確に一致する場合にのみ <codeph class="+ topic/ph pr-d/codeph ">NetGroup.sendToNearest()</codeph> 呼び出しに最も近いとみなされます。この値はデフォルトの設定です。 
    
    <p class="- topic/p ">分散転送動作を有効にする場合、この値を <codeph class="+ topic/ph pr-d/codeph ">NetGroupReceiveMode.NEAREST</codeph> に設定します。 この値を設定すると、ノードは接続が安定するのを待ってから Directed Routing メッシュに参加します。</p>
    
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNearest()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroupReceiveMode:NEAREST" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NEAREST</apiName><shortdesc class="- topic/shortdesc "> 
    このノードのアドレスと正確に一致しないグループアドレスにメッセージを送信するネイバーからのローカルメッセージをこのノードが受け入れるように指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">nearest</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    このノードのアドレスと正確に一致しないグループアドレスにメッセージを送信するネイバーからのローカルメッセージをこのノードが受け入れるように指定します。メッセージは、受信モードが <codeph class="+ topic/ph pr-d/codeph ">NetGroupReceiveMode.NEAREST</codeph> であるすべてのネイバーの間でこのノードが最も近くにあるときに受信されます。 アドレス管の距離は ring mod 2<sup class="+ topic/ph hi-d/sup ">256</sup> で測定されます。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNearest()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:Responder" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Responder</apiName><shortdesc class="- topic/shortdesc ">
 Responder クラスは、NetConnection.call() で個々の操作の成否に関するサーバーからの戻り値を処理するために使用されるオブジェクトを提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Responder クラスは、<codeph class="+ topic/ph pr-d/codeph ">NetConnection.call()</codeph> で個々の操作の成否に関するサーバーからの戻り値を処理するために使用されるオブジェクトを提供します。<codeph class="+ topic/ph pr-d/codeph ">NetConnection.call()</codeph> を使用すると、現在の操作に固有なネットワーク操作の失敗や現在の接続状態に関する障害が報告されるようになります。エラー処理を容易にする目的から、操作エラーは、NetConnection オブジェクトではなく Responder オブジェクトをターゲットとします。
 
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/call()" class="- topic/link "><linktext class="- topic/linktext ">NetConnection.call()</linktext></link></related-links><apiConstructor id="flash.net:Responder:Responder" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Responder</apiName><shortdesc class="- topic/shortdesc ">
	 新しい Responder オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">result</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">サーバーの呼び出しが成功して結果が返された場合に呼び出される関数です。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">status</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">サーバーがエラーを返したときに呼び出される関数です。
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 新しい Responder オブジェクトを作成します。Responder オブジェクトを <codeph class="+ topic/ph pr-d/codeph ">NetConnection.call()</codeph> に渡して、サーバーからの戻り値を処理します。一方または両方のパラメーターに <codeph class="+ topic/ph pr-d/codeph ">null</codeph> を渡すことができます。
	 
	 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="flash.net:URLRequestHeader" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">URLRequestHeader</apiName><shortdesc class="- topic/shortdesc ">
 URLRequestHeader オブジェクトは 1 つの HTTP のリクエストヘッダーをカプセル化し、名前と値のペアを構成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 URLRequestHeader オブジェクトは 1 つの HTTP のリクエストヘッダーをカプセル化し、名前と値のペアを構成します。URLRequestHeader オブジェクトは URLRequest クラスの <codeph class="+ topic/ph pr-d/codeph ">requestHeaders</codeph> プロパティで使用されます。
 
 <p class="- topic/p ">Adobe<sup class="+ topic/ph hi-d/sup ">®</sup> AIR <sup class="+ topic/ph hi-d/sup ">®</sup> では、アプリケーションセキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツなど）は、どのようなリクエストヘッダーでもエラーなしで使用できます。ただし、異なるセキュリティサンドボックス内の、Adobe AIR で実行されているコンテンツ<ph class="- topic/ph ">または Flash<sup class="+ topic/ph hi-d/sup ">®</sup> Player で実行されているコンテンツでは、</ph>次のリクエストヘッダーを使用するとランタイムエラーがスローされます。これらの制限対象の項では大文字と小文字は区別されません（例えば、<codeph class="+ topic/ph pr-d/codeph ">Get</codeph>、<codeph class="+ topic/ph pr-d/codeph ">get</codeph>、<codeph class="+ topic/ph pr-d/codeph ">GET</codeph> はすべて使用できません）。 </p>
 
 <p class="- topic/p ">Flash Player およびアプリケーションセキュリティサンドボックス外の Adobe AIR コンテンツでは、次のリクエストヘッダーを使用できません。これらの制限対象の項では大文字と小文字は区別されません（例えば、<codeph class="+ topic/ph pr-d/codeph ">Get</codeph>、<codeph class="+ topic/ph pr-d/codeph ">get</codeph>、<codeph class="+ topic/ph pr-d/codeph ">GET</codeph> はすべて使用できません）。また、アンダースコア文字が使用されている場合は、ハイフンのある項が該当します（例えば、<codeph class="+ topic/ph pr-d/codeph ">Content-Length</codeph> と <codeph class="+ topic/ph pr-d/codeph ">Content_Length</codeph> は共に禁止されています）。 </p>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">Accept-Charset</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Accept-Encoding</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Accept-Ranges</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Age</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Allow</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Allowed</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Authorization</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Charge-To</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Connect</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Connection</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Content-Length</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Content-Location</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Content-Range</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Cookie</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Date</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Delete</codeph>、<codeph class="+ topic/ph pr-d/codeph ">ETag</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Expect</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Get</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Head</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Host</codeph>、<codeph class="+ topic/ph pr-d/codeph ">If-Modified-Since</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Keep-Alive</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Last-Modified</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Location</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Max-Forwards</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Options</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Origin</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Post</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Proxy-Authenticate</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Proxy-Authorization</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Proxy-Connection</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Public</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Put</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Range</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Referer</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Request-Range</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Retry-After</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Server</codeph>、<codeph class="+ topic/ph pr-d/codeph ">TE</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Trace</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Trailer</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Transfer-Encoding</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Upgrade</codeph>、<codeph class="+ topic/ph pr-d/codeph ">URI</codeph>、<codeph class="+ topic/ph pr-d/codeph ">User-Agent</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Vary</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Via</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Warning</codeph>、<codeph class="+ topic/ph pr-d/codeph ">WWW-Authenticate</codeph>、<codeph class="+ topic/ph pr-d/codeph ">x-flash-version</codeph>。</p>
 
 <p class="- topic/p ">URLRequestHeader オブジェクトの長さは制限されています。URLRequestHeader オブジェクトの累積長（<codeph class="+ topic/ph pr-d/codeph ">name</codeph> プロパティの長さに <codeph class="+ topic/ph pr-d/codeph ">value</codeph> プロパティの長さを足したもの）または <codeph class="+ topic/ph pr-d/codeph ">URLRequest.requestHeaders</codeph> プロパティで使用する URLRequestHeader オブジェクトの配列が許容長を超えると、例外がスローされます。</p>
 
 <p class="- topic/p ">Adobe AIR で実行されているコンテンツでは、<codeph class="+ topic/ph pr-d/codeph ">ACCEPT</codeph> ヘッダーに以下を設定します。ただし、URLRequest クラスの <codeph class="+ topic/ph pr-d/codeph ">ACCEPT</codeph> ヘッダー（<codeph class="+ topic/ph pr-d/codeph ">requestHeaders</codeph> プロパティ）に設定を指定している場合は除きます。</p>
 
 <codeph class="+ topic/ph pr-d/codeph ">text/xml, application/xml, application/xhtml+xml, text/html;q=0.9, text/plain;q=0.8, image/png, application/x-shockwave-flash, video/mp4;q=0.9, flv-application/octet-stream;q=0.8, video/x-flv;q=0.7, audio/mp4, ~~/~~;q=0.5</codeph>
 <p class="- topic/p ">URLRequest パラメーターを受け取るメッソドすべてが <codeph class="+ topic/ph pr-d/codeph ">requestHeaders</codeph> プロパティをサポートしているわけではありません。呼び出すメソッドのマニュアルを参照してください。例えば、<codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> メソッドおよび <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> メソッドは、<codeph class="+ topic/ph pr-d/codeph ">URLRequest.requestHeaders</codeph> プロパティをサポートしていません。</p>
 <p class="- topic/p ">ブラウザーの制限により、カスタム HTTP リクエストヘッダーは <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> リクエストだけをサポートし、<codeph class="+ topic/ph pr-d/codeph ">GET</codeph> リクエストはサポートしません。</p>  
 
 </apiDesc><example conref="examples\URLRequestHeaderExample.as" class="- topic/example "> 次の例では、単一の HTTP リクエストヘッダー <codeph class="+ topic/ph pr-d/codeph ">header</codeph> を、<codeph class="+ topic/ph pr-d/codeph ">requestHeaders</codeph> プロパティの配列に追加します。ヘッダーは、要求されたものがキャッシュされていても、アプリケーションから元のサーバーに要求を転送する必要があることを示します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.net.URLRequestHeader;
    import flash.net.URLRequestMethod;
    import flash.net.URLVariables;

    public class URLRequestHeaderExample extends Sprite {
        public function URLRequestHeaderExample() {
            var loader:URLLoader = new URLLoader();
            configureListeners(loader);

            var header:URLRequestHeader = new URLRequestHeader("pragma", "no-cache");
            var request:URLRequest = new URLRequest("http://www.[yourdomain].com/greeting.cfm");
            request.data = new URLVariables("name=John+Doe");
            request.method = URLRequestMethod.POST;
            request.requestHeaders.push(header);
            try {
                loader.load(request);
            } catch (error:Error) {
                trace("Unable to load requested document.");
            }
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        }

        private function completeHandler(event:Event):void {
            var loader:URLLoader = URLLoader(event.target);
            trace("completeHandler: " + loader.data);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest" class="- topic/link "><linktext class="- topic/linktext ">URLRequest</linktext></link><link href="flash.net.xml#URLLoader" class="- topic/link "><linktext class="- topic/linktext ">URLLoader</linktext></link></related-links><apiConstructor id="flash.net:URLRequestHeader:URLRequestHeader" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">URLRequestHeader</apiName><shortdesc class="- topic/shortdesc ">
	 1 つの HTTP リクエストヘッダーをカプセル化する新しい URLRequestHeader オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">HTTP リクエストヘッダー名（<codeph class="+ topic/ph pr-d/codeph ">Content-Type</codeph> や <codeph class="+ topic/ph pr-d/codeph ">SOAPAction</codeph> など）です。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">name</codeph> プロパティに関連付けられた値（<codeph class="+ topic/ph pr-d/codeph ">text/plain</codeph> など）です。
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 1 つの HTTP リクエストヘッダーをカプセル化する新しい URLRequestHeader オブジェクトを作成します。URLRequestHeader オブジェクトは URLRequest クラスの <codeph class="+ topic/ph pr-d/codeph ">requestHeaders</codeph> プロパティで使用されます。
     
	 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.net:URLRequestHeader:name" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
	 HTTP リクエストヘッダー名（Content-Type や SOAPAction など）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 HTTP リクエストヘッダー名（<codeph class="+ topic/ph pr-d/codeph ">Content-Type</codeph> や <codeph class="+ topic/ph pr-d/codeph ">SOAPAction</codeph> など）です。
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLRequestHeader:value" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">value</apiName><shortdesc class="- topic/shortdesc ">
	 name プロパティに関連付けられた値（text/plain など）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">name</codeph> プロパティに関連付けられた値（<codeph class="+ topic/ph pr-d/codeph ">text/plain</codeph> など）です。
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:URLRequestMethod" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">URLRequestMethod</apiName><shortdesc class="- topic/shortdesc ">
 URLRequestMethod クラスは、URLRequest オブジェクトが POST または GET のどちらのメソッドを使用するかを指定する値を提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 URLRequestMethod クラスは、URLRequest オブジェクトがデータをサーバーに送信するときに <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> または <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> のどちらのメソッドを使用するかを指定する値を提供します。
 
 </apiDesc><example conref="examples\URLRequestMethodExample.as" class="- topic/example "> 次の例では、ローカルテキストファイルで検出されたデータをロードして表示します。また、イベント処理情報も出力します。
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>この例を実行するには、example.txt ファイルを SWF ファイルと同じディレクトリに配置します。このファイルは、いくつかの単語またはテキスト行を含む単純なテキストファイルとする必要があります。
 </p>
 <p class="- topic/p ">コード例では、次の処理が実行されます。</p>
 <ol class="- topic/ol "><li class="- topic/li ">コンストラクター関数は <codeph class="+ topic/ph pr-d/codeph ">loader</codeph> という URLLoader インスタンスを作成します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">loader</codeph> オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">configureListeners()</codeph> メソッドに渡されます。このメソッドは、サポートされる各 URLLoader イベントのリスナーを追加します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">request</codeph> という URLRequest インスタンスが作成されます。これは、ロードされるファイルの名前を指定します。</li><li class="- topic/li ">要求の <codeph class="+ topic/ph pr-d/codeph ">method</codeph> プロパティは、<codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph> に設定されます。</li><li class="- topic/li ">次に <codeph class="+ topic/ph pr-d/codeph ">request</codeph> オブジェクトが、テキストファイルをロードする <codeph class="+ topic/ph pr-d/codeph ">loader.load()</codeph> に渡されます。</li><li class="- topic/li ">URLLoader によるテキストファイルのロードが終了すると、<codeph class="+ topic/ph pr-d/codeph ">Event.COMPLETE</codeph> イベントが発生し、<codeph class="+ topic/ph pr-d/codeph ">completeHandler()</codeph> メソッドがトリガーされます。<codeph class="+ topic/ph pr-d/codeph ">completeHandler()</codeph> メソッドは、テキストファイルのコンテンツである <codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティを単にトレースします。</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">


package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.*;

    public class URLRequestMethodExample extends Sprite {

        public function URLRequestMethodExample() {
            var loader:URLLoader = new URLLoader();
            configureListeners(loader);

            var request:URLRequest = new URLRequest("example.txt");
            
            request.method = URLRequestMethod.POST;
            loader.load(request);
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        }

        private function completeHandler(event:Event):void {
            var loader:URLLoader = URLLoader(event.target);
            trace("completeHandler: " + loader.data);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest" class="- topic/link "><linktext class="- topic/linktext ">URLRequest</linktext></link><link href="flash.net.xml#URLVariables" class="- topic/link "><linktext class="- topic/linktext ">URLVariables</linktext></link></related-links><apiValue id="flash.net:URLRequestMethod:DELETE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DELETE</apiName><shortdesc class="- topic/shortdesc ">
	 URLRequest オブジェクトが DELETE であることを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">DELETE</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">URLRequest オブジェクトが DELETE であることを指定します。
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 URLRequest オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> であることを指定します。
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLRequestMethod:GET" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">GET</apiName><shortdesc class="- topic/shortdesc ">
	 URLRequest オブジェクトが GET であることを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">GET</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">URLRequest オブジェクトが GET であることを指定します。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 URLRequest オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> であることを指定します。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLRequestMethod:HEAD" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">HEAD</apiName><shortdesc class="- topic/shortdesc ">
	 URLRequest オブジェクトが HEAD であることを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">HEAD</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">URLRequest オブジェクトが HEAD であることを指定します。
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 URLRequest オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">HEAD</codeph> であることを指定します。
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLRequestMethod:OPTIONS" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">OPTIONS</apiName><shortdesc class="- topic/shortdesc ">
	 URLRequest オブジェクトが OPTIONS であることを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">OPTIONS</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">URLRequest オブジェクトが OPTIONS であることを指定します。
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 URLRequest オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">OPTIONS</codeph> であることを指定します。
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLRequestMethod:POST" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">POST</apiName><shortdesc class="- topic/shortdesc ">
	 URLRequest オブジェクトが POST であることを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">POST</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">URLRequest オブジェクトが POST であることを指定します。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 URLRequest オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> であることを指定します。
	 
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i "/>注意：<ph class="- topic/ph ">Adobe AIR で実行中のコンテンツの場合、</ph><codeph class="+ topic/ph pr-d/codeph ">navigateToURL()</codeph> 関数を使用すると、ランタイムでは、POST メソッドを使用する URLRequest（<codeph class="+ topic/ph pr-d/codeph ">method</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph> に設定されているもの）は、GET メソッドとして処理されます。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLRequestMethod:PUT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">PUT</apiName><shortdesc class="- topic/shortdesc ">
	 URLRequest オブジェクトが PUT であることを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">PUT</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">URLRequest オブジェクトが PUT であることを指定します。
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 URLRequest オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">PUT</codeph> であることを指定します。
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:FileReference" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">FileReference</apiName><shortdesc class="- topic/shortdesc ">
  FileReference クラスには、ユーザーのコンピューターとサーバーとの間でファイルをアップロードおよびダウンロードするための手段があります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">FileReference, FileReference.browse, FileReference.download, FileReference.create, browse, download, create
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  FileReference クラスには、ユーザーのコンピューターとサーバーとの間でファイルをアップロードおよびダウンロードするための手段があります。オペレーティングシステムのダイアログボックスを使用して、アップロードするファイルや、ダウンロード先の場所をユーザーが選択できるようにします。各 FileReference オブジェクトはユーザーのディスク上にある 1 つのファイルを参照し、ファイルのサイズ、タイプ、名前、作成日、変更日、クリエータータイプ（Macintosh のみ）に関する情報を保持するプロパティを備えています。 
  
  <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b> Adobe AIR では、FileReference クラスを拡張する File クラスはより多くの機能を提供し、FileReference クラスよりもセキュリティの制限が小さくなっています。</p>
  
  <p class="- topic/p ">FileReference インスタンスは、次の方法で作成できます。</p>
  <ul class="- topic/ul "><li class="- topic/li ">FileReference コンストラクターで <codeph class="+ topic/ph pr-d/codeph ">new</codeph> 演算子を使用する方法：<codeph class="+ topic/ph pr-d/codeph ">var myFileReference = new FileReference();</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> メソッドを呼び出す方法です。これによって FileReference オブジェクトの配列が作成されます。</li></ul>
  
  <p class="- topic/p ">アップロード処理の実行中、FileReference オブジェクトのすべてのプロパティの値が、<codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> メソッドの呼び出しによって設定されます。ダウンロード処理の実行中、<codeph class="+ topic/ph pr-d/codeph ">name</codeph> プロパティの値は <codeph class="+ topic/ph pr-d/codeph ">select</codeph> イベントが送出されたときに設定されます。これ以外のすべてのプロパティの値は、<codeph class="+ topic/ph pr-d/codeph ">complete</codeph> イベントが送出されたときに設定されます。</p>
  
  <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> メソッドはオペレーティングシステムのダイアログボックスを開いて、ユーザーがアップロード対象のファイルを選択できるようにします。<codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph> メソッドを使用すると、ユーザーは単一のファイルを選択できます。<codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> メソッドを使用すると、複数のファイルを選択できます。<codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> メソッドの呼び出しが正常に終了したら、<codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> メソッドを呼び出してファイルを 1 つずつアップロードします。<codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> メソッドは、ファイルの保存先をユーザーに指定させ、リモート URL からのダウンロードを開始します。</p>
  
  <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">download()</codeph> メソッドによって生成されるダイアログボックスでのファイルのデフォルトの場所を、FileReference クラスおよび FileReferenceList クラスを使って設定することはできません。ダイアログボックスに表示されるデフォルトの場所は、最後に参照されたフォルダー（その場所を決定できる場合）またはデスクトップです。これらのクラスを使って、転送ファイルを読み込んだり、転送ファイルに書き込んだりすることはできません。これらのクラスを使用しても、アップロードまたはダウンロードを開始した SWF ファイルが、アップロードファイルやダウンロードファイル、またはユーザーのディスクのファイルの場所にアクセスすることはできません。</p>
  
  <p class="- topic/p ">また FileReference と FileReferenceList クラスは認証方法も提供しません。認証が必要なサーバーでは、Flash<sup class="+ topic/ph hi-d/sup ">®</sup> Player ブラウザープラグインを使ってファイルをダウンロードできますが、すべての Player でのアップロード、およびスタンドアローンまたは外部 Player でのダウンロードは失敗します。FileReference イベントをリッスンして、処理が正常に終了したかどうかを確認して、エラー処理を行います。</p>
  
  <p class="- topic/p "><ph class="- topic/ph ">Flash Player で実行されるコンテンツの場合、または</ph>アプリケーションセキュリティサンドボックス外の、Adobe AIR で実行されるコンテンツの場合、アップロード操作およびダウンロード操作では、それ自身のドメイン内および URL ポリシーファイルが指定するドメイン内のファイルにのみアクセスできます。アップロードまたはダウンロードを開始しているコンテンツが、ファイルサーバーと同じドメインに属していない場合、ファイルサーバーにポリシーファイルを配置します。</p>
  
  <p class="- topic/p ">Flash Player に追加された新しい機能により、Flash Player 10 にパブリッシュする場合は、<codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReference.load()</codeph> および <codeph class="+ topic/ph pr-d/codeph ">FileReference.save()</codeph> の中で、同時に実行できる操作は 1 つのみです。複数の操作を実行すると、Flash Player でランタイムエラー（コード 2174）が発生します。進行中の操作を停止するには、<codeph class="+ topic/ph pr-d/codeph ">FileReference.cancel()</codeph> を使用します。この制限は Flash Player 10 にのみ適用されます。以前のバージョンの Flash Player については、同時に複数の操作を実行しても、この制限には影響されません。</p>
  
  <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph>、または <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> メソッド呼び出しの実行中、Linux および Mac OS X 10.1 以前でのスタンドアローンと外部バージョンの Flash Player および AIR では、SWF ファイルの再生が一時停止します。</p>
  
  <p class="- topic/p ">パラメーターが指定されていない場合は、次のサンプルの HTTP <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> 要求が Flash Player からサーバーサイドスクリプトに送信されます。
  </p>
  
  <pre xml:space="preserve" class="- topic/pre ">
  POST /handler.cfm HTTP/1.1 
  Accept: text/~~
  Content-Type: multipart/form-data; 
  boundary=----------Ij5ae0ae0KM7GI3KM7 
  User-Agent: Shockwave Flash 
  Host: www.example.com 
  Content-Length: 421 
  Connection: Keep-Alive 
  Cache-Control: no-cache
  
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="Filename"
  
  MyFile.jpg
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="Filedata"; filename="MyFile.jpg"
  Content-Type: application/octet-stream
  
  FileDataHere
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="Upload"
  
  Submit Query
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7--
  </pre>
  
  <p class="- topic/p ">Flash Player が次の HTTP <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> 要求を送信するのは、ユーザーが <codeph class="+ topic/ph pr-d/codeph ">"api_sig"</codeph>、<codeph class="+ topic/ph pr-d/codeph ">"api_key"</codeph>、および <codeph class="+ topic/ph pr-d/codeph ">"auth_token"</codeph> パラメーターを指定した場合です。
  </p>
  
  <pre xml:space="preserve" class="- topic/pre ">
  POST /handler.cfm HTTP/1.1 
  Accept: text/~~
  Content-Type: multipart/form-data; 
  boundary=----------Ij5ae0ae0KM7GI3KM7 
  User-Agent: Shockwave Flash 
  Host: www.example.com 
  Content-Length: 421 
  Connection: Keep-Alive 
  Cache-Control: no-cache
  
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="Filename"
  
  MyFile.jpg
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="api_sig"
  
  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="api_key"
  
  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="auth_token"
  
  XXXXXXXXXXXXXXXXXXXXXX
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="Filedata"; filename="MyFile.jpg"
  Content-Type: application/octet-stream
  
  FileDataHere
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="Upload"
  
  Submit Query
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7--
  </pre>
  </apiDesc><example conref="examples\FileReferenceExample.as" class="- topic/example "> 次の例では、実行時にロードされるファイルのデータフォーマットとステータス情報を表示します。  
 <p class="- topic/p "> <b class="+ topic/ph hi-d/b ">注意：</b>この例を実行するには、uploadURL.url プロパティを変更して、例の架空の URL ではなく実際の URL を参照するようにします。この URL は、指定した URL のルート Web ディレクトリ内の <codeph class="+ topic/ph pr-d/codeph ">yourUploadHandlerScript.cfm</codeph> という名前のファイルを参照している必要があります。設定に基づいて、「ローカルでの再生に関するセキュリティ」を「ネットワークにのみアクセスする」に設定して SWF ファイルをコンパイルする必要がある場合もあります。または Flash Player のセキュリティ設定を更新して、このファイルのネットワークアクセスを許可する必要がある場合もあります。
 </p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileFilter;
    import flash.net.FileReference;
    import flash.net.URLRequest;

    public class FileReferenceExample extends Sprite {
        private var uploadURL:URLRequest;
        private var file:FileReference;

        public function FileReferenceExample() {
            uploadURL = new URLRequest();
            uploadURL.url = "http://www.[yourDomain].com/yourUploadHandlerScript.cfm";
            file = new FileReference();
            configureListeners(file);
            file.browse(getTypes());
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CANCEL, cancelHandler);
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(Event.SELECT, selectHandler);
            dispatcher.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA,uploadCompleteDataHandler);
        }

        private function getTypes():Array {
            var allTypes:Array = new Array(getImageTypeFilter(), getTextTypeFilter());
            return allTypes;
        }

        private function getImageTypeFilter():FileFilter {
            return new FileFilter("Images (*.jpg, *.jpeg, *.gif, *.png)", "*.jpg;*.jpeg;*.gif;*.png");
        }

        private function getTextTypeFilter():FileFilter {
            return new FileFilter("Text Files (*.txt, *.rtf)", "*.txt;*.rtf");
        }

        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function uploadCompleteDataHandler(event:DataEvent):void {
            trace("uploadCompleteData: " + event);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
        }
        
        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name + " URL=" + uploadURL.url);
            file.upload(uploadURL);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReferenceList" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReferenceList</linktext></link><link href="flash.filesystem.xml#File" class="- topic/link "><linktext class="- topic/linktext ">flash.filesystem.File</linktext></link></related-links><adobeApiEvent id="flash.net:FileReference_flash.events.DataEvent.UPLOAD_COMPLETE_DATA_uploadCompleteData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">uploadCompleteData</apiName><shortdesc class="- topic/shortdesc ">
    アップロードの正常終了後、サーバーからデータを受信したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.28.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.DataEvent.UPLOAD_COMPLETE_DATA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.DataEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    アップロードの正常終了後、サーバーからデータを受信したときに送出されます。サーバーからデータが返されないと、このイベントは送出されません。
    </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS_httpResponseStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpResponseStatus</apiName><shortdesc class="- topic/shortdesc ">
     upload() または uploadUnencoded() メソッドを呼び出して HTTP を介してデータにアクセスを試み、Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">upload()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">uploadUnencoded()</codeph> メソッドを呼び出して HTTP を介してデータにアクセスを試み、Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます。 
     
     </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/upload()" class="- topic/link "><linktext class="- topic/linktext ">upload()</linktext></link><link href="flash.net.xml#FileReference/uploadUnencoded()" class="- topic/link "><linktext class="- topic/linktext ">uploadUnencoded()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.HTTPStatusEvent.HTTP_STATUS_httpStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpStatus</apiName><shortdesc class="- topic/shortdesc ">
     アップロードに失敗し、HTTP ステータスコードを使用して失敗を記述することができない場合に送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.HTTPStatusEvent.HTTP_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     アップロードに失敗し、HTTP ステータスコードを使用して失敗を記述することができない場合に送出されます。<codeph class="+ topic/ph pr-d/codeph ">httpStatus</codeph> イベントが送出された後、<codeph class="+ topic/ph pr-d/codeph ">ioError</codeph> イベントが送出されます。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">httpStatus</codeph> イベントは、アップロードが失敗した場合にのみ送出されます。Flash Player で実行されるコンテンツの場合、このイベントはダウンロードの失敗には適用されません。HTTP エラーのためにダウンロードが失敗した場合は、I/O エラーとして通知されます。</p>
     
     </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/upload()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.upload()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.Event.SELECT_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><shortdesc class="- topic/shortdesc ">
    ユーザーがアップロードするファイルまたはダウンロードするファイルをファイル参照ダイアログボックスから選択したときに、送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
    </helpid></asCustoms></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.SELECT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ユーザーがアップロードするファイルまたはダウンロードするファイルをファイル参照ダイアログボックスから選択したときに、送出されます。（このダイアログボックスは、<codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph> メソッド、<codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> メソッド、または <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> メソッドを呼び出したときに開かれます。）ユーザーがファイルを選択し、「OK」などをクリックして操作を確認すると、FileReference オブジェクトのプロパティに値が設定されます。
    
    <p class="- topic/p "><ph class="- topic/ph ">Flash Player または </ph><ph class="- topic/ph ">Adobe AIR ランタイム</ph>のアプリケーションセキュリティサンドボックス外で実行されるコンテンツの場合、<codeph class="+ topic/ph pr-d/codeph ">select</codeph> イベントは、どのメソッドがそのイベントを呼び出したかにより、わずかに異なった動作をします。<codeph class="+ topic/ph pr-d/codeph ">select</codeph> イベントが <codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> 呼び出しの後に送出された場合、<ph class="- topic/ph ">Flash Player または </ph>AIR アプリケーションは、FileReference オブジェクトのすべてのプロパティを読み取ることができます。これは、ユーザーが選択したファイルが、ローカルファイルシステムに存在するためです。 <codeph class="+ topic/ph pr-d/codeph ">select</codeph> イベントが <codeph class="+ topic/ph pr-d/codeph ">download()</codeph> 呼び出しの後に発生した場合、<ph class="- topic/ph ">Flash Player または </ph>AIR アプリケーションは、<codeph class="+ topic/ph pr-d/codeph ">name</codeph> プロパティのみを読み取ることができます。これは、<codeph class="+ topic/ph pr-d/codeph ">select</codeph> イベントが送出された時点では、ファイルがまだローカルファイルシステムにダウンロードされていないためです。ファイルがダウンロードされ、<codeph class="+ topic/ph pr-d/codeph ">complete</codeph> イベントが送出された時点で、<ph class="- topic/ph ">Flash Player または </ph>AIR アプリケーションは FileReference オブジェクトの他のすべてのプロパティを読み取ることができます。</p>
    
    </apiDesc><example conref="examples\FileReference_event_select.as" class="- topic/example "> 次の例では、<codeph class="+ topic/ph pr-d/codeph ">select</codeph> イベントオブジェクトの使用方法を示します。この例を実行するには、<codeph class="+ topic/ph pr-d/codeph ">uploadURL.url</codeph> プロパティを変更して、架空の http://www ではなく実際のドメインとファイルを参照するようにします。[yourDomain].com/SomeFile.pdf. 「ローカルでの再生に関するセキュリティ」を「ネットワークにのみアクセスする」に設定して SWF ファイルをコンパイルする必要がある場合もあります。または Flash Player のセキュリティ設定を更新して、このファイルのネットワークアクセスを許可する必要がある場合があります。この例をデスクトップから実行するには、サーバー側にも crossdomain.xml ファイルを置いておく必要があります。<codeph class="+ topic/ph pr-d/codeph ">ioErrorHandler()</codeph> 関数がトリガーされた場合には、問題の <codeph class="+ topic/ph pr-d/codeph ">uploadURL</codeph> を更新して、アップロードを受信するよう設定された有効な URL に 変更する必要があるかもしれません。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 
package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;

    public class FileReference_event_select extends Sprite {
        private var uploadURL:URLRequest;
        private var file:FileReference;

        public function FileReference_event_select() {
            uploadURL = new URLRequest();
            uploadURL.url = "http://www.[yourDomain].com/yourUploadHandlerScript.cfm";
            file = new FileReference();
            file.addEventListener(Event.SELECT, selectHandler);
            file.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            file.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            file.addEventListener(Event.COMPLETE, completeHandler);
            file.browse();
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name + " URL=" + uploadURL.url);
            file.upload(uploadURL);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler: name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }
    }
}
</codeblock></example></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><shortdesc class="- topic/shortdesc ">
     FileReference.upload() または FileReference.download() メソッドの呼び出しによって、サーバーにファイルをアップロードするか、呼び出し元のセキュリティサンドボックスの外部にあるサーバーからファイルを取得しようとしたときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
     
     </helpid></asCustoms></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> メソッドの呼び出しによって、サーバーにファイルをアップロードするか、呼び出し元のセキュリティサンドボックスの外部にあるサーバーからファイルを取得しようとすると、送出されます。発生した特有のエラーを示す text プロパティの値は、通常 <codeph class="+ topic/ph pr-d/codeph ">"securitySandboxError"</codeph> です。呼び出し側の SWF ファイルが自分のドメインの外にある SWF ファイルにアクセスしようとして、アクセス権限がないと発生します。URL ポリシーファイルを使用することで、このエラーに対処できます。
     
     <p class="- topic/p ">Adobe AIR では、これらのセキュリティ制限は、アプリケーションセキュリティサンドボックス内のコンテンツには適用されません。</p>
     
     <p class="- topic/p ">Adobe AIR では、これらのセキュリティ制限は、アプリケーションセキュリティサンドボックス内のコンテンツには適用されません。</p>
     
     </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/download()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.download()</linktext></link><link href="flash.net.xml#FileReference/upload()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.upload()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.ProgressEvent.PROGRESS_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><shortdesc class="- topic/shortdesc ">
    ファイルのアップロード処理中またはダウンロード処理中に定期的に送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
    </helpid></asCustoms></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ファイルのアップロード処理中またはダウンロード処理中に定期的に送出されます。<codeph class="+ topic/ph pr-d/codeph ">progress</codeph> イベントは、Flash Player がバイトをサーバーに転送しているときに送出され、最終的に転送が成功しなくても、転送の実行中は定期的に送出されます。ファイルの転送が実際に成功して完了したかどうか、およびそのタイミングを確認するには、<codeph class="+ topic/ph pr-d/codeph ">complete</codeph> イベントを受け取ります。
    
    <p class="- topic/p ">場合によっては、<codeph class="+ topic/ph pr-d/codeph ">progress</codeph> イベントは受信されません。例えば、転送対象ファイルが非常に小さい場合や、アップロードやダウンロードが非常に短時間に終わる場合、<codeph class="+ topic/ph pr-d/codeph ">progress</codeph> イベントは送出されない場合があります。</p>
    
    <p class="- topic/p ">ファイルのアップロードの進捗状況は、OS X 10.3 より前の Macintosh プラットフォームでは確認できません。<codeph class="+ topic/ph pr-d/codeph ">progress</codeph> イベントは、アップロード処理中に呼び出されますが、progress イベントの <codeph class="+ topic/ph pr-d/codeph ">bytesLoaded</codeph> プロパティの値は、進捗状況を確認できないことを示す -1 です。</p>
    
    </apiDesc><example conref="examples\FileReference_event_progress.as" class="- topic/example "> 次の例では、<codeph class="+ topic/ph pr-d/codeph ">progress</codeph> イベントオブジェクトの使用方法を示します。この例を実行するには、<codeph class="+ topic/ph pr-d/codeph ">downloadURL.url</codeph> プロパティを変更して、架空の http://www ではなく実際のドメインとファイルを参照するようにします。[yourDomain].com/SomeFile.pdf. 「ローカルでの再生に関するセキュリティ」を「ネットワークにのみアクセスする」に設定して SWF ファイルをコンパイルする必要がある場合もあります。または Flash Player のセキュリティ設定を更新して、このファイルのネットワークアクセスを許可する必要がある場合があります。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;

    public class FileReference_event_progress extends Sprite {
        private var downloadURL:URLRequest;
        private var fileName:String = "SomeFile.pdf";
        private var file:FileReference;

        public function FileReference_event_progress() {
            downloadURL = new URLRequest();
            downloadURL.url = "http://www.[yourDomain].com/SomeFile.pdf";
            file = new FileReference();
            file.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            file.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            file.addEventListener(Event.COMPLETE, completeHandler);
            file.download(downloadURL, fileName);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler: name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }
        
        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
        
        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/event:complete" class="- topic/link "><linktext class="- topic/linktext ">FileReference.complete</linktext></link><link href="flash.events.xml#ProgressEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.ProgressEvent</linktext></link><link href="flash.net.xml#FileReference/download()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.download()</linktext></link><link href="flash.net.xml#FileReference/upload()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.upload()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.Event.OPEN_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><shortdesc class="- topic/shortdesc ">
    アップロード処理またはダウンロード処理が開始するときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example shows the usage of the <code>open</code> event.
    It should be made clear that there is no way to actually track the progress
    of a download, just that it hasn't yet finished or failed.
    
    <listing version="2.0">
    import flash.net.FileReference;
    
    var listener:Object = new Object();
    
    listener.onOpen = function(file:FileReference):void {
      trace("onOpen: " + file.name);
    }
    
    var fileRef:FileReference = new FileReference();
    fileRef.addListener(listener);
    var url:String = "http://www.adobe.com/platform/whitepapers/platform_overview.pdf";
    fileRef.download(url, "FlashPlatform.pdf");
    </listing>
    </maelexample></asCustoms></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.OPEN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    アップロード処理またはダウンロード処理が開始するときに送出されます。
    
    
    </apiDesc><example conref="examples\FileReference_download.as" class="- topic/example "> 次の例で、<codeph class="+ topic/ph pr-d/codeph ">download</codeph> イベントオブジェクトの使用方法を示します。この例を実行するには、<codeph class="+ topic/ph pr-d/codeph ">downloadURL.url</codeph> プロパティを変更して、架空の http://www ではなく実際のドメインとファイルを参照するようにします。[yourDomain].com/SomeFile.pdf. 「ローカルでの再生に関するセキュリティ」を「ネットワークにのみアクセスする」に設定して SWF ファイルをコンパイルする必要がある場合もあります。または Flash Player のセキュリティ設定を更新して、このファイルのネットワークアクセスを許可する必要がある場合があります。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;
    import flash.net.FileFilter;

    public class FileReference_download extends Sprite {
        private var downloadURL:URLRequest;
        private var fileName:String = "SomeFile.pdf";
        private var file:FileReference;

        public function FileReference_download() {
            downloadURL = new URLRequest();
            downloadURL.url = "http://www.[yourDomain].com/SomeFile.pdf";
            file = new FileReference();
            configureListeners(file);
            file.download(downloadURL, fileName);
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CANCEL, cancelHandler);
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(Event.SELECT, selectHandler);
        }

        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name + " URL=" + downloadURL.url);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/download()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.download()</linktext></link><link href="flash.net.xml#FileReference/upload()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.upload()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
    アップロードまたはダウンロードが失敗したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example shows the usage of the <code>ioError</code> event. 
    Note that for simplicity, none of the other event types are used in this
    example.
    
    <listing version="2.0">
    import flash.net.FileReference;
    
    var listener:Object = new Object();
    
    listener.onIOError = function(file:FileReference):void {
      trace("onIOError");
    }
    
    var fileRef:FileReference = new FileReference();
    fileRef.addListener(listener);
    fileRef.download("http://www.adobe.com/NonExistentFile.pdf", "NonExistentFile.pdf");
    
    </listing>
    
    </maelexample></asCustoms></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    アップロードまたはダウンロードが失敗したときに送出されます。次のいずれかの理由により、ファイル転送に失敗することがあります。
    
    <ul class="- topic/ul "><li class="- topic/li ">Player でファイルの読み込み中、書き込み中、または転送中に入出力エラーが発生した場合。</li><li class="- topic/li ">ユーザー名とパスワードなど、認証が必要なサーバーに <ph class="- topic/ph ">SWF ファイル</ph>がファイルをアップロードしようとした場合。<ph class="- topic/ph ">Flash Player または </ph>Adobe AIR には、アップロード時にユーザーがパスワードを入力する手段が用意されていません。認証が必要なサーバーに対して <ph class="- topic/ph ">SWF ファイル</ph>がファイルをアップロードしようとすると、アップロードは失敗します。</li><li class="- topic/li ">スタンドアローンまたは外部 Player 内で、認証が必要なサーバーから <ph class="- topic/ph ">SWF ファイル</ph>がファイルをダウンロードしようとした場合。ダウンロードする際、スタンドアローンプレーヤーと外部プレーヤーには、ユーザーがパスワードを入力する手段がありません。認証が必要なサーバーから、これらの Player 内の <ph class="- topic/ph ">SWF ファイル</ph>がファイルをダウンロードしようとすると、ダウンロードは失敗します。<ph class="- topic/ph ">ファイルのダウンロードは、ActiveX コントロール Player、ブラウザープラグイン Player、および Adobe AIR ランタイムでのみ成功する可能性があります。</ph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">url</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">upload()</codeph> メソッド）に渡された値に、無効なプロトコルが含まれている場合。有効なプロトコルは HTTP と HTTPS です。</li></ul>
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">重要：</b>ブラウザー内で実行される、つまり、ブラウザープラグインまたは ActiveX コントロールを使用するアプリケーションと、Adobe AIR で実行されるコンテンツでのみ、認証用のユーザー名とパスワードを入力できるダイアログボックスを表示できます。ただし、それはダウンロードの場合のみです。 Flash Player のプラグインまたは ActiveX コントロールバージョンを使用するアップロードの場合、または、スタンドアローンまたは外部 Player を使用するアップロードまたはダウンロードの場合、ファイル転送は失敗します。</p>
    
    </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/download()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.download()</linktext></link><link href="flash.net.xml#FileReference/upload()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.upload()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.Event.COMPLETE_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
    ダウンロードが完了、またはアップロードで HTTP ステータスコード 200 が生成された場合に送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example shows usage of the <code>complete</code> event 
    listener. It should be made clear that there is no way to actually track the progress
    of a download, just that it hasn't yet finished or failed.
    
    <listing version="2.0">
    import flash.net.FileReference;
    
    var listener:Object = new Object();
    
    listener.onComplete = function(file:FileReference):void {
      trace("onComplete: " + file.name);
    }
    
    var fileRef:FileReference = new FileReference();
    fileRef.addListener(listener);
    var url:String = "http://www.adobe.com/platform/whitepapers/platform_overview.pdf";
    fileRef.download(url, "FlashPlatform.pdf");
    </listing>
    </maelexample></asCustoms></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ダウンロードが完了、またはアップロードで HTTP ステータスコード 200 が生成された場合に送出されます。ファイルのダウンロードの場合、<ph class="- topic/ph ">Flash Player または </ph>Adobe AIR でディスクへのファイル全体のダウンロードが完了すると、このイベントが送出されます。 ファイルのアップロードの場合、転送を受信したサーバーから HTTP ステータスコード 200 を <ph class="- topic/ph ">Flash Player または </ph>Adobe AIR が受け取った後、このイベントが送出されます。
    
    </apiDesc><example conref="examples\FileReference_event_complete.as" class="- topic/example "> 次の例では、<codeph class="+ topic/ph pr-d/codeph ">complete</codeph> イベントオブジェクトの使用方法を示します。この例を実行するには、<codeph class="+ topic/ph pr-d/codeph ">downloadURL.url</codeph> プロパティを変更して、架空の http://www ではなく実際のドメインとファイルを参照するようにします。[yourDomain].com/SomeFile.pdf. 「ローカルでの再生に関するセキュリティ」を「ネットワークにのみアクセスする」に設定して SWF ファイルをコンパイルする必要がある場合もあります。または Flash Player のセキュリティ設定を更新して、このファイルのネットワークアクセスを許可する必要がある場合があります。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;

    public class FileReference_event_complete extends Sprite {
        private var downloadURL:URLRequest;
        private var fileName:String = "SomeFile.pdf";
        private var file:FileReference;

        public function FileReference_event_complete() {
            downloadURL = new URLRequest();
            downloadURL.url = "http://www.[yourDomain].com/SomeFile.pdf";
            file = new FileReference();
            configureListeners(file);
            file.download(downloadURL, fileName);
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CANCEL, cancelHandler);
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(Event.SELECT, selectHandler);
        }

        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name + " URL=" + downloadURL.url);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/download()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.download()</linktext></link><link href="flash.net.xml#FileReference/upload()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.upload()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.Event.CANCEL_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
    ユーザーがアップロードまたはダウンロードするファイルをファイル参照ダイアログボックスからキャンセルしたときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example traces a message if the user dismisses the file-
    browsing dialog box. This method
    is triggered only if the user selects Cancel or presses the escape key after
    the dialog box opens.
    
    <listing version="2.0">
    import flash.net.FileReference;
    
    var listener:Object = new Object();
    
    listener.onCancel = function(file:FileReference):void {
      trace("onCancel");
    }
    
    var fileRef:FileReference = new FileReference();
    fileRef.addListener(listener);
    var url:String = "http://www.adobe.com/platform/whitepapers/platform_overview.pdf";
    if(!fileRef.download(url, "FlashPlatform.pdf")) {
      trace("dialog box failed to open.");
    }
    </listing>
    
    </maelexample></asCustoms></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CANCEL</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ユーザーがアップロードまたはダウンロードするファイルをファイル参照ダイアログボックスからキャンセルしたときに送出されます。ユーザーが他の手段（ブラウザーを閉じたり、現在のアプリケーションを停止したりすること）によってアップロードまたはダウンロードをキャンセルした場合、Flash Player はこのイベントを送出しません。
    
    </apiDesc><example conref="examples\FileReference_event_cancel.as" class="- topic/example "> 次の例では、<codeph class="+ topic/ph pr-d/codeph ">cancel</codeph> イベントオブジェクトの使用方法を示します。この例を実行するには、<codeph class="+ topic/ph pr-d/codeph ">downloadURL.url</codeph> プロパティを変更して、架空の http://www ではなく実際のドメインとファイルを参照するようにします。[yourDomain].com/SomeFile.pdf. 「ローカルでの再生に関するセキュリティ」を「ネットワークにのみアクセスする」に設定して SWF ファイルをコンパイルする必要がある場合もあります。または Flash Player のセキュリティ設定を更新して、このファイルのネットワークアクセスを許可する必要がある場合があります。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;

    public class FileReference_event_cancel extends Sprite {
        private var downloadURL:URLRequest;
        private var fileName:String = "SomeFile.pdf";
        private var file:FileReference;

        public function FileReference_event_cancel() {
            downloadURL = new URLRequest();
            downloadURL.url = "http://www.[yourDomain].com/SomeFile.pdf";
            file = new FileReference();
            file.addEventListener(Event.CANCEL, cancelHandler);
            file.download(downloadURL, fileName);
        }
        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }
    }
}
</codeblock></example></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.net:FileReference:FileReference" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">FileReference</apiName><shortdesc class="- topic/shortdesc ">
    新しい FileReference オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates a new <code>FileReference</code> object and 
    initiates the download of a pdf file.
    <listing version="2.0">
    import flash.net.FileReference;
    
    var listener:Object = new Object();
    listener.onComplete = function(file:FileReference) {
      trace("onComplete : " + file.name);
    }
    
    var url:String = "http://www.adobe.com/platform/whitepapers/platform_overview.pdf";
    var fileRef:FileReference = new FileReference();
    fileRef.addListener(listener);
    fileRef.download(url, "FlashPlatform.pdf");
    </listing>
    
    </maelexample></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    新しい FileReference オブジェクトを作成します。設定されると、FileReference オブジェクトはユーザーのローカルディスク上のファイルを表します。
    
    </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:FileReference:browse" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">browse</apiName><shortdesc class="- topic/shortdesc ">
    アップロードするファイルを選択できるファイル参照ダイアログボックスを表示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">browse, FileReference.browse
  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">次の状況でスローされます。1）他の FileReference ブラウズセッション、または FileReferenceList ブラウズセッションが進行中の場合。ファイルブラウズのセッションは、一度に 1 つのみ実行できます。2）ユーザーの mms.cfg ファイルの設定により、この操作が禁止されている場合。
  
  </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">typeFilter</codeph> 配列に、不正な形式の FileFilter オブジェクトが含まれていると、例外がスローされます。FileFilter オブジェクトの正しい形式の詳細については、<xref href="FileFilter.html" class="- topic/xref ">FileFilter</xref> クラスを参照してください。
  
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">マウスイベントやキー入力イベントなどのユーザー操作に応じてメソッドが呼び出されない場合。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">パラメーターが有効で、ファイル参照ダイアログボックスが表示された場合に、<codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返します。  
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">typeFilter</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ダイアログボックスに表示するファイルをフィルターにかける場合に使用する FileFilter インスタンスの配列です。このパラメーターを省略すると、すべてのファイルが表示されます。詳細については、<xref href="FileFilter.html" class="- topic/xref ">FileFilter</xref> クラスを参照してください。
    
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    アップロードするファイルを選択できるファイル参照ダイアログボックスを表示します。このダイアログボックスは、オペレーティングシステムのネイティブのダイアログボックスです。ユーザーは、例えば Windows の UNC パスを使用して、ローカルコンピューターまたは他のコンピューターからファイルを選択できます。
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>Adobe AIR で利用可能な File クラスにはさらに固有のシステムファイル選択ダイアログボックスにアクセスするためのメソッドが含まれています。 これらのメソッドは <codeph class="+ topic/ph pr-d/codeph ">File.browseForDirectory()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">File.browseForOpen()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">File.browseForOpenMultiple()</codeph>、および <codeph class="+ topic/ph pr-d/codeph ">File.browseForSave()</codeph> です。</p>
    
    <p class="- topic/p ">このメソッドを呼び出して、ユーザーが正常にファイルを選択すると、この FileReference オブジェクトのプロパティにそのファイルのプロパティが設定されます。これ以降 <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph> メソッドが呼び出されるたびに、FileReference オブジェクトのプロパティは、ダイアログボックスでユーザーが選択したファイルに再設定されます。一度に 1 つの <codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> セッションまたは <codeph class="+ topic/ph pr-d/codeph ">download()</codeph> セッションだけを実行できます。これは、一度に 1 つのダイアログボックスしか呼び出せないからです。</p>
    
    <p class="- topic/p ">どのファイルをダイアログボックスに表示するかを決定するために、<codeph class="+ topic/ph pr-d/codeph ">typeFilter</codeph> パラメーターを使用できます。</p>
    
    <p class="- topic/p ">Flash Player 10 および Flash Player 9 Update 5 では、このメソッドの呼び出しは、マウスのクリックやキー入力などのユーザーイベントに応じてイベントハンドラーで呼び出した場合にのみ成功します。それ以外の場合は、このメソッドを呼び出すと、Flash Player から例外がスローされます。</p>
    
    <p class="- topic/p ">Flash Player に追加された新しい機能により、Flash Player 10 にパブリッシュする場合は、<codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReference.load()</codeph> および <codeph class="+ topic/ph pr-d/codeph ">FileReference.save()</codeph> の中で、同時に実行できる操作は 1 つのみです。複数の操作を実行すると、Flash Player でランタイムエラー（コード 2174）が発生します。進行中の操作を停止するには、<codeph class="+ topic/ph pr-d/codeph ">FileReference.cancel()</codeph> を使用します。この制限は Flash Player 10 にのみ適用されます。以前のバージョンの Flash Player については、同時に複数の操作を実行しても、この制限には影響されません。</p> 
 	
	<p class="- topic/p ">Adobe AIR では、ファイル参照ダイアログボックスは他のウィンドウによって「所有されている」（<codeph class="+ topic/ph pr-d/codeph ">owner</codeph> プロパティが null 以外に設定されている）ウィンドウの前面に常に表示されるとは限りません。ウィンドウの表示順序の問題を回避するには、このメソッドを呼び出す前に所有されているウィンドウを非表示にします。</p>
	
  	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReferenceList/event:select" class="- topic/link "><linktext class="- topic/linktext ">select event</linktext></link><link href="flash.net.xml#FileReference/event:cancel" class="- topic/link "><linktext class="- topic/linktext ">cancel event</linktext></link><link href="flash.net.xml#FileReference/download()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.download()</linktext></link><link href="flash.net.xml#FileReferenceList/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.browse()</linktext></link><link href="" invalidHref="flash.filesystem.File.browseForDirectory().xml" class="- topic/link "><linktext class="- topic/linktext ">File.browseForDirectory()</linktext></link><link href="" invalidHref="flash.filesystem.File.browseForOpen().xml" class="- topic/link "><linktext class="- topic/linktext ">File.browseForOpen()</linktext></link><link href="" invalidHref="flash.filesystem.File.browseForOpenMultiple().xml" class="- topic/link "><linktext class="- topic/linktext ">File.browseForOpenMultiple()</linktext></link><link href="" invalidHref="flash.filesystem.File.browseForSave().xml" class="- topic/link "><linktext class="- topic/linktext ">File.browseForSave()</linktext></link></related-links><adobeApiEvent id="flash.net:FileReference:browse_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ユーザーが「参照」ファイル選択からアイテムを正しく選択すると、送出されます。
  </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ユーザーが「参照」ファイル選択からアイテムを正しく選択すると、送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:browse_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ユーザーがファイルアップロードの参照ウィンドウをキャンセルすると、送出されます。
  
  </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ユーザーがファイルアップロードの参照ウィンドウをキャンセルすると、送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:FileReference:cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
  この FileReference オブジェクトで進行中のアップロード処理またはダウンロード処理を取り消します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">cancel, FileReference.cancel
  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">進行中のアップロードまたはダウンロードをキャンセルします。
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  この FileReference オブジェクトで進行中のアップロード処理またはダウンロード処理を取り消します。このメソッドを呼び出しても <codeph class="+ topic/ph pr-d/codeph ">cancel</codeph> イベントは送出されません。このイベントは、ユーザーがファイルアップロードまたはダウンロードのダイアログボックスを閉じて処理をキャンセルした場合にのみ送出されます。
  
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:FileReference:download" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">download</apiName><shortdesc class="- topic/shortdesc ">
    リモートサーバーからファイルをダウンロードするためのダイアログボックスを開きます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">次の状況でスローされます。1）他のブラウズセッションが進行中の場合。ファイルブラウズのセッションは、一度に 1 つのみ実行できます。2) <codeph class="+ topic/ph pr-d/codeph ">request</codeph> に渡された値に、無効なパスまたはプロトコルが含まれている場合。3) ダウンロードするファイルの名前に禁止文字が含まれている場合。4) ユーザーの mms.cfg ファイルの設定により、この操作が禁止されている場合。
    
        </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">信頼されていないローカルコンテンツはインターネットへの接続を許可されません。この問題を回避するには、この SWF ファイルを、ネットワークアクセスを許可されたローカル SWF ファイル、または信頼できる SWF ファイルとして再分類します。この例外がスローされると、ローカルファイルのセキュリティ制限が原因でアクセスできないファイル名および URL を示すメッセージが送信されます。
    
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一般的な予約ポートには接続できません。遮断されたポートの詳しいリストについては、『ActionScript 3.0 開発ガイド<i class="+ topic/ph hi-d/i "/>』の「ネットワーク API の制限」を参照してください。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">url.data</codeph> が ByteArray 型の場合、例外がスローされます。<codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> メソッドおよび <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> メソッドと一緒に使用する場合、<codeph class="+ topic/ph pr-d/codeph ">url.data</codeph> は URLVariables 型または String 型のみになります。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、次の理由で発生する可能性があります。1) Flash Player では <codeph class="+ topic/ph pr-d/codeph ">URLRequest.data</codeph> パラメーターを UTF8 から MBCS に変換できません。このエラーは、<codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> メソッドに渡された URLRequest オブジェクトが GET 操作を行うように設定されている場合、および <codeph class="+ topic/ph pr-d/codeph ">System.useCodePage</codeph> が <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定されている場合に発生することがあります。2) Flash Player では <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> データにメモリを割り当てることができません。このエラーは、<codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> メソッドに渡された URLRequest オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> 操作を行うように設定されている場合に発生することがあります。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">MemoryError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:MemoryError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">マウスイベントやキー入力イベントなどのユーザー操作に応じてメソッドが呼び出されない場合。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">request</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:URLRequest</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">URLRequest オブジェクトです。URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">url</codeph> プロパティには、ローカルコンピューターにダウンロードするファイルの URL を設定する必要があります。このパラメーターが <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、例外がスローされます。URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">requestHeaders</codeph> プロパティは無視されるため、カスタム HTTP リクエストヘッダーはアップロードまたはダウンロードでサポートされません。<codeph class="+ topic/ph pr-d/codeph ">POST</codeph> パラメーターまたは GET パラメーターをサーバーに送信するには、<codeph class="+ topic/ph pr-d/codeph ">URLRequest.data</codeph> の値に任意のパラメーターを設定し、<codeph class="+ topic/ph pr-d/codeph ">URLRequest.method</codeph> に <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph> または <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.GET</codeph> を設定します。
    
        <p class="- topic/p ">一部のブラウザーでは、URL ストリングの長さに制限があるものがあります。長さが 256 文字を超える場合、一部のブラウザーまたはサーバーでは失敗する場合があります。</p>
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">defaultFileName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ダウンロードするファイルとしてダイアログボックスに表示するデフォルトファイル名です。このストリングに、文字 / \ : ~~ ? " &lt; > | % を含めないでください。
    <p class="- topic/p ">このパラメーターを省略すると、リモート URL のファイル名が構文解析されて、デフォルトとして使用されます。 </p>
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    リモートサーバーからファイルをダウンロードするためのダイアログボックスを開きます。<ph class="- topic/ph ">Flash Player ではアップロードまたはダウンロードできるファイルのサイズに制限はありませんが、このプレーヤーが正式にサポートしているアップロードまたはダウンロードのサイズは最大 100 MB です。</ph>
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">download()</codeph> メソッドは、まず、オペレーティングシステムのダイアログボックスを表示して、ユーザーにファイル名を入力してもらった後、ファイルの保存先となるローカルコンピューター上の場所を選択してもらいます。ユーザーが保存場所を選択し、「保存」などをクリックして、ファイルをローカルに保存することを確認すると、リモートサーバーからのダウンロードが開始します。リスナーは、ダウンロードが進行中なのか、成功したのか、失敗したのかを示すイベントを受け取ります。<codeph class="+ topic/ph pr-d/codeph ">download()</codeph> を呼び出した後にダイアログボックスやダウンロード処理の状態を確認するには、コードで <codeph class="+ topic/ph pr-d/codeph ">cancel</codeph>、<codeph class="+ topic/ph pr-d/codeph ">open</codeph>、<codeph class="+ topic/ph pr-d/codeph ">progress</codeph>、<codeph class="+ topic/ph pr-d/codeph ">complete</codeph> などのイベントをリッスンする必要があります。
    </p>
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> 関数と <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> 関数はノンブロッキング処理を行います。これらの関数は呼び出された後、ファイル転送が完了する前に返されます。さらに、FileReference オブジェクトがスコープ外に移動した場合、そのオブジェクトに対して完了していないアップロードまたはダウンロードは、スコープから離れた時点でキャンセルされます。アップロードまたはダウンロードの続行を期待できる限りは、FileReference オブジェクトがスコープ内にあることを確認してください。</p>
    
    <p class="- topic/p ">ファイルが正常にダウンロードされると、FileReference オブジェクトのプロパティにローカルファイルのプロパティが設定されます。ダウンロードが成功した場合、<codeph class="+ topic/ph pr-d/codeph ">complete</codeph> イベントが送出されます。</p>
    
    <p class="- topic/p ">一度に 1 つの <codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> セッションまたは <codeph class="+ topic/ph pr-d/codeph ">download()</codeph> セッションだけを実行できます。これは、一度に 1 つのダイアログボックスしか呼び出せないからです。</p>
    
    <p class="- topic/p ">このメソッドは、どのファイルタイプのダウンロードにも対応しており、HTTP と HTTPS のいずれも使用できます。</p>
    
    <p class="- topic/p ">一般的な予約ポートには接続できません。遮断されたポートの詳しいリストについては、『ActionScript 3.0 開発ガイド<i class="+ topic/ph hi-d/i "/>』の「ネットワーク API の制限」を参照してください。</p>
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>サーバーでユーザー認証が必要な場合、ブラウザー内で実行される、つまり、ブラウザープラグインまたは ActiveX コントロールを使用する SWF ファイルでのみ、認証用のユーザー名とパスワードをユーザーが入力できるダイアログボックスを表示できます。ただし、それはダウンロードの場合のみです。プラグインまたは ActiveX コントロールを使用するアップロードの場合、または、スタンドアローンまたは外部 Player を使用するアップロードとダウンロードの場合、ファイル転送は失敗します。</p>
    
    <p class="- topic/p ">このメソッドを使用するときは、<ph class="- topic/ph ">Flash Player</ph> セキュリティモデルを考慮してください。 </p>
    
    <ul class="- topic/ul "><li class="- topic/li ">呼び出し元 SWF ファイルが信頼されないコードとしてローカルのサンドボックスに置かれている場合、ロード操作は実行できません。</li><li class="- topic/li ">デフォルトの動作では、サンドボックス間のアクセスは拒否されます。URL ポリシーファイルを追加することによって、Web サイトでリソースにアクセスできるようになります。</li><li class="- topic/li ">SWF ファイルがこのメソッドを使用しないようにするには、SWF コンテンツを含んでいる HTML ページに <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">object</codeph> タグおよび <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> タグのパラメーター）を設定します。</li><li class="- topic/li ">Flash Player 10 および Flash Player 9 Update 5 では、このメソッドの呼び出しは、マウスのクリックやキー入力などのユーザーイベントに応じてイベントハンドラーで呼び出した場合にのみ成功します。それ以外の場合は、このメソッドを呼び出すと、Flash Player から例外がスローされます。</li></ul>
    
    <p class="- topic/p ">ただし、<ph class="- topic/ph ">Adobe AIR</ph> では、<codeph class="+ topic/ph pr-d/codeph ">application</codeph> セキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p>
    
    <p class="- topic/p ">セキュリティについて詳しくは、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
    
    
    <p class="- topic/p ">このメソッドを使用してファイルをダウンロードすると、ダウンロードされたファイルにフラグを付けるオペレーティングシステムにダウンロードされたというフラグが付きます。</p>
           
    <ul class="- topic/ul "><li class="- topic/li ">Windows XP Service Pack 2 以降および Windows Vista</li><li class="- topic/li ">Mac OS 10.5 以降</li></ul>
           
    <p class="- topic/p ">Linux などの一部のオペレーティングシステムは、ダウンロードされたファイルにフラグを付けません。</p>
    
    <p class="- topic/p ">Flash Player に追加された新しい機能により、Flash Player 10 にパブリッシュする場合は、<codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReference.load()</codeph> および <codeph class="+ topic/ph pr-d/codeph ">FileReference.save()</codeph> の中で、同時に実行できる操作は 1 つのみです。複数の操作を実行すると、Flash Player でランタイムエラー（コード 2174）が発生します。進行中の操作を停止するには、<codeph class="+ topic/ph pr-d/codeph ">FileReference.cancel()</codeph> を使用します。この制限は Flash Player 10 にのみ適用されます。以前のバージョンの Flash Player については、同時に複数の操作を実行しても、この制限には影響されません。</p> 
    
 	
	<p class="- topic/p ">Adobe AIR では、ダウンロードダイアログボックスは他のウィンドウによって「所有」されている（<codeph class="+ topic/ph pr-d/codeph ">owner</codeph> プロパティが null 以外に設定されている）ウィンドウの前面に常に表示されるとは限りません。ウィンドウの表示順序の問題を回避するには、このメソッドを呼び出す前に所有されているウィンドウを非表示にします。</p>
	 
    </apiDesc><example conref="examples\FileReference_download.as" class="- topic/example "> 次の例で、<codeph class="+ topic/ph pr-d/codeph ">download</codeph> イベントオブジェクトの使用方法を示します。この例を実行するには、<codeph class="+ topic/ph pr-d/codeph ">downloadURL.url</codeph> プロパティを変更して、架空の http://www ではなく実際のドメインとファイルを参照するようにします。[yourDomain].com/SomeFile.pdf. 「ローカルでの再生に関するセキュリティ」を「ネットワークにのみアクセスする」に設定して SWF ファイルをコンパイルする必要がある場合もあります。または Flash Player のセキュリティ設定を更新して、このファイルのネットワークアクセスを許可する必要がある場合があります。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;
    import flash.net.FileFilter;

    public class FileReference_download extends Sprite {
        private var downloadURL:URLRequest;
        private var fileName:String = "SomeFile.pdf";
        private var file:FileReference;

        public function FileReference_download() {
            downloadURL = new URLRequest();
            downloadURL.url = "http://www.[yourDomain].com/SomeFile.pdf";
            file = new FileReference();
            configureListeners(file);
            file.download(downloadURL, fileName);
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CANCEL, cancelHandler);
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(Event.SELECT, selectHandler);
        }

        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name + " URL=" + downloadURL.url);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="../../flash/filesystem/File.html#downloaded" class="- topic/link "><linktext class="- topic/linktext ">File.downloaded</linktext></link><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link><link href="flash.net.xml#FileReferenceList/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.browse()</linktext></link><link href="flash.net.xml#FileReference/upload()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.upload()</linktext></link><link href="flash.net.xml#FileReference/save()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.save()</linktext></link></related-links><adobeApiEvent id="flash.net:FileReference:download_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ダウンロード処理が開始したときに送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ダウンロード処理が開始したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:download_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ファイルのダウンロード処理中に定期的に送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ファイルのダウンロード処理中に定期的に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:download_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ファイルのダウンロード処理が正常に完了したときに送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ファイルのダウンロード処理が正常に完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:download_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ユーザーがダイアログボックスを閉じると、送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ユーザーがダイアログボックスを閉じると、送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:download_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ダウンロードするファイルをユーザーがダイアログボックスから選択すると、送出されます。 
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ダウンロードするファイルをユーザーがダイアログボックスから選択すると、送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:download_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">セキュリティエラーが原因でダウンロードが失敗したときに送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">セキュリティエラーが原因でダウンロードが失敗したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:download_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">次のいずれかの理由で送出されます。
    <ul class="- topic/ul "><li class="- topic/li ">ファイルの読み込み中または転送中に入出力エラーが発生した場合。</li><li class="- topic/li ">Flash Player のスタンドアローンバージョンまたは外部バージョンで実行される SWF コンテンツが、認証が必要なサーバーからファイルをダウンロードしようとした場合。ダウンロードする際、スタンドアローンまたは外部 Player には、ユーザーがパスワードを入力する手段がありません。認証が必要なサーバーに対して、これらの Player 内の SWF がファイルをダウンロードしようとすると、ダウンロードは失敗します。ファイルのダウンロードは、ActiveX コントロール Player やブラウザープラグイン Player でのみ成功する可能性があります。</li></ul>
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">次のいずれかの理由で送出されます。ファイルの読み込み中または転送中に入出力エラーが発生した場合。もしくは、Flash Player のスタンドアローンバージョンまたは外部バージョンで実行される SWF コンテンツが、認証が必要なサーバーからファイルをダウンロードしようとした場合。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:FileReference:load" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">load</apiName><shortdesc class="- topic/shortdesc ">
    ユーザーが選択したローカルファイルの読み込みを開始します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">load, FileReference.load
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">次の状況でスローされます。1）他の FileReference ブラウズセッション、または FileReferenceList ブラウズセッションが進行中の場合。ファイルブラウズのセッションは、一度に 1 つのみ実行できます。2）ユーザーの mms.cfg ファイルの設定により、この操作が禁止されている場合。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、アプリケーションがファイルにメモリを割り当てることができない場合に発生することがあります。ファイルが大きすぎるか、または使用可能なメモリが少なすぎる可能性があります。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">MemoryError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:MemoryError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">ローカルファイルの読み込みを開始します。
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ユーザーが選択したローカルファイルのロードを開始します。<ph class="- topic/ph ">Flash Player ではアップロード、ダウンロード、ロードまたは保存できるファイルのサイズに制限はありませんが、正式にサポートしているサイズは最大 100 MB です。コンテンツを Flash Player で実行する場合は、<codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> メソッドを呼び出してから、<codeph class="+ topic/ph pr-d/codeph ">load()</codeph> メソッドを呼び出す必要があります。一方、コンテンツをアプリケーションサンドボックスの AIR で実行する場合は、File オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> メソッドを呼び出す前に、<codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> メソッドを呼び出す必要はありません。AIR の File クラスが、FileReference クラスを拡張します。</ph>
    
    <p class="- topic/p ">リスナーは、読み込み処理が進行中なのか、成功したのか、失敗したのかを示すイベントを受け取ります。FileReferenceList オブジェクトを使用すると、ユーザーが読み込むファイルを複数選択できるようになりますが、ファイルは 1 つずつ読み込む必要があります。個別にファイルを読み込むには、FileReference オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.fileList</codeph> 配列を繰り返し処理します。</p>
    
    <p class="- topic/p ">Adobe AIR にはまた、ファイルを読み込むためのさらに多くのオプションを提供する FileStream クラスが含まれています。</p>
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> 関数、<codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> 関数、<codeph class="+ topic/ph pr-d/codeph ">FileReference.load()</codeph> 関数および <codeph class="+ topic/ph pr-d/codeph ">FileReference.save()</codeph> 関数はノンブロッキング処理を行います。 これらの関数は呼び出された後、ファイル転送が完了する前に返されます。さらに、FileReference オブジェクトがスコープ外に移動した場合、そのオブジェクトに対して完了していないトランザクションは、スコープから離れた時点でキャンセルされます。アップロード、ダウンロード、読み込みまたは保存の続行を期待できる限りは、FileReference オブジェクトがスコープ内にあることを確認してください。</p>
    
    <p class="- topic/p ">ファイルのロードが正常に終了すると、コンテンツは FileReference オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティにバイト配列として格納されます。</p>
    
    <p class="- topic/p ">次のセキュリティに関する考慮事項が適用されます。</p>
    
    <ul class="- topic/ul "><li class="- topic/li ">呼び出し元 SWF ファイルが信頼されないコードとしてローカルのサンドボックスに置かれている場合、ロード操作は実行できません。</li><li class="- topic/li ">デフォルトの動作では、サンドボックス間のアクセスは拒否されます。クロスドメインポリシーファイルを追加することによって、Web サイトでリソースにアクセスできるようになります。</li><li class="- topic/li ">ファイルがこのメソッドを使用しないようにするには、SWF コンテンツを含む HTML ページに <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">object</codeph> タグおよび <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> タグ）を設定します。</li></ul>
    
    <p class="- topic/p ">ただし、これらの考慮事項はアプリケーションサンドボックス内の AIR コンテンツには適用されません。</p>
    
    <p class="- topic/p ">Flash Player 10 または AIR 1.5 にパブリッシュする場合は、<codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReference.load()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReference.save()</codeph> の中で同時に実行できる操作は 1 つのみです。複数の操作を実行すると、アプリケーションでランタイムエラー（コード 2174）が発生します。進行中の操作を停止するには、<codeph class="+ topic/ph pr-d/codeph ">FileReference.cancel()</codeph> を使用します。この制限は Flash Player 10 および AIR 1.5 にのみ適用されます。Flash Player または AIR の以前のバージョンは同時に複数の操作を実行しても、この制限には影響されません。</p>
    
 	
	<p class="- topic/p ">Adobe AIR では、ファイル参照ダイアログボックスは他のウィンドウによって「所有されている」（<codeph class="+ topic/ph pr-d/codeph ">owner</codeph> プロパティが null 以外に設定されている）ウィンドウの前面に常に表示されるとは限りません。ウィンドウの表示順序の問題を回避するには、このメソッドを呼び出す前に所有されているウィンドウを非表示にします。</p>
	
    </apiDesc><example conref="examples\FileFilter.as" class="- topic/example "> 次の例は、ローカルファイルシステム内の画像をルート表示オブジェクト（この場合はステージ）にアップロードします。例は、<xref href="http://blog.andrevenancio.com/" scope="external" class="- topic/xref ">Andre Venancio</xref> 氏の提供によるものです。
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var buttonShape:Shape = new Shape();
buttonShape.graphics.beginFill(0x336699);
buttonShape.graphics.drawCircle(50, 50, 25);
var button = new SimpleButton(buttonShape, buttonShape, buttonShape, buttonShape);
addChild(button);

var fileRef:FileReference= new FileReference();
button.addEventListener(MouseEvent.CLICK, onButtonClick);

function onButtonClick(e:MouseEvent):void {
fileRef.browse([new FileFilter("Images", "*.jpg;*.gif;*.png")]);
fileRef.addEventListener(Event.SELECT, onFileSelected);
}

function onFileSelected(e:Event):void {
fileRef.addEventListener(Event.COMPLETE, onFileLoaded);
fileRef.load();
}

function onFileLoaded(e:Event):void {
var loader:Loader = new Loader();
loader.loadBytes(e.target.data);
addChild(loader);
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link><link href="flash.net.xml#FileReferenceList/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.browse()</linktext></link><link href="flash.net.xml#FileReference/data" class="- topic/link "><linktext class="- topic/linktext ">FileReference.data</linktext></link><link href="flash.net.xml#FileReferenceList/fileList" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.fileList</linktext></link><link href="flash.net.xml#FileReference/save()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.save()</linktext></link><link href="flash.filesystem.xml#FileStream" class="- topic/link "><linktext class="- topic/linktext ">FileStream</linktext></link></related-links><adobeApiEvent id="flash.net:FileReference:load_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">読み込み処理が開始したときに送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">読み込み処理が開始したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:load_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ファイルの読み込み処理中に定期的に送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ファイルの読み込み処理中に定期的に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:load_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ファイルの読み込み処理が正常に完了したときに送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ファイルの読み込み処理が正常に完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:load_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">アプリケーションによるファイルの読み込み中または書き込み中に入出力エラーにより読み込みが失敗した場合に呼び出されます。
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">アプリケーションによるファイルの読み込み中または書き込み中に入出力エラーにより読み込みが失敗した場合に呼び出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:FileReference:save" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">save</apiName><shortdesc class="- topic/shortdesc ">
    ローカルファイルシステムにファイルを保存するためのダイアログボックスを開きます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">次の状況でスローされます。1）他のブラウズセッションが進行中の場合。ファイルブラウズのセッションは、一度に 1 つのみ実行できます。2）ダウンロードするファイルの名前に禁止文字が含まれている場合。3）ユーザーの mms.cfg ファイルの設定により、この操作が禁止されている場合。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">data</codeph> が ByteArray 型ではなく、<codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> メソッドを持たない場合、例外がスローされます。<codeph class="+ topic/ph pr-d/codeph ">data</codeph> が XML 型ではなく、<codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> メソッドを持たない場合、例外がスローされます。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">マウスイベントやキー入力イベントなどのユーザー操作に応じてメソッドが呼び出されない場合。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、Flash Player がファイルにメモリを割り当てることができない場合に発生することがあります。ファイルが大きすぎるか、または使用可能なメモリが少なすぎる可能性があります。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">MemoryError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:MemoryError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">data</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">保存されるデータです。データは複数の形式のうちのいずれかになり、以下のように適切に処理されます。
    <ul class="- topic/ul "><li class="- topic/li ">値が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> である場合、アプリケーションにより ArgumentError 例外がスローされます。</li><li class="- topic/li ">値が String の場合は、UTF-8 テキストファイルとして保存されます。</li><li class="- topic/li ">値が XML の場合は、XML 形式でテキストファイルに書き込まれます。形式はすべて保持されます。</li><li class="- topic/li ">値が ByteArray オブジェクトの場合は、データファイルにそのまま書き込まれます。</li><li class="- topic/li ">値が上記のいずれでもない場合、<codeph class="+ topic/ph pr-d/codeph ">save()</codeph> メソッドはオブジェクトの <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> メソッドを呼び出し、データをストリングに変換して、データをテキストファイルとして保存します。これに失敗すると、アプリケーションにより ArgumentError 例外がスローされます。</li></ul>
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">defaultFileName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">保存するファイルとしてダイアログボックスに表示するデフォルトファイル名です。このストリングに、文字 / \ : ~~ ? " &lt; > | % を含めないでください。
    <p class="- topic/p ">
    File オブジェクトがこのメソッドを呼び出すと、ファイル名は File オブジェクトが参照するファイルの名前になります（AIR File クラスは FileReference クラスを拡張します）。</p>
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ローカルファイルシステムにファイルを保存するためのダイアログボックスを開きます。<ph class="- topic/ph ">Flash Player ではアップロード、ダウンロード、ロードまたは保存できるファイルのサイズに制限はありませんが、このプレーヤーが正式にサポートしているサイズは最大 100 MB です。</ph>
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">save()</codeph> メソッドは、まず、オペレーティングシステムのダイアログボックスを表示して、ユーザーにファイル名を入力してもらった後、ファイルの保存先となるローカルコンピューター上の場所を選択してもらいます。ユーザーが保存場所を選択し、「保存」などをクリックして、ファイルをローカルに保存することを確認すると、保存処理が開始されます。リスナーは、保存処理が進行中なのか、成功したのか、失敗したのかを示すイベントを受け取ります。<codeph class="+ topic/ph pr-d/codeph ">save()</codeph> を呼び出した後のダイアログボックスや保存処理の状態を確認するには、コードで <codeph class="+ topic/ph pr-d/codeph ">cancel</codeph>、<codeph class="+ topic/ph pr-d/codeph ">open</codeph>、<codeph class="+ topic/ph pr-d/codeph ">progress</codeph> および <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> などのイベントを待機する必要があります。
    </p>
    
    <p class="- topic/p ">Adobe AIR にはまた、ファイルをローカルで保存するためのさらに多くのオプションを提供する FileStream クラスが含まれています。</p>
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> 関数、<codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> 関数、<codeph class="+ topic/ph pr-d/codeph ">FileReference.load()</codeph> 関数および <codeph class="+ topic/ph pr-d/codeph ">FileReference.save()</codeph> 関数はノンブロッキング処理を行います。 これらの関数は呼び出された後、ファイル転送が完了する前に返されます。さらに、FileReference オブジェクトがスコープ外に移動した場合、そのオブジェクトに対して完了していないトランザクションは、スコープから離れた時点でキャンセルされます。アップロード、ダウンロード、読み込みまたは保存の続行を期待できる限りは、FileReference オブジェクトがスコープ内にあることを確認してください。</p>
    
    <p class="- topic/p ">ファイルが正常に保存されると、FileReference オブジェクトのプロパティにローカルファイルのプロパティが設定されます。保存が成功した場合、<codeph class="+ topic/ph pr-d/codeph ">complete</codeph> イベントが送出されます。</p>
    
    <p class="- topic/p ">一度に 1 つの <codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> セッションまたは <codeph class="+ topic/ph pr-d/codeph ">save()</codeph> セッションだけを実行できます。これは、一度に 1 つのダイアログボックスしか呼び出せないからです。</p>
    
    <p class="- topic/p ">Flash Player では、このメソッドの呼び出しは、マウスのクリックやキー入力などのユーザーイベントに応じてイベントハンドラーで呼び出した場合にのみ成功します。それ以外の場合は、このメソッドを呼び出すと、Flash Player から例外がスローされます。この制限は、アプリケーションサンドボックス内の AIR コンテンツには適用されません。</p>
    
 	
	<p class="- topic/p ">Adobe AIR では、保存ダイアログボックスは他のウィンドウによって「所有」されている（<codeph class="+ topic/ph pr-d/codeph ">owner</codeph> プロパティが null 以外に設定されている）ウィンドウの前面に常に表示されるとは限りません。ウィンドウの表示順序の問題を回避するには、このメソッドを呼び出す前に所有されているウィンドウを非表示にします。</p>
	
    </apiDesc><example conref="examples\FileReference_save.as" class="- topic/example "> 次の例は、ファイルのテキストフィールドに入力されるコンテンツを保存します。この例では、編集可能なテキストフィールド（<codeph class="+ topic/ph pr-d/codeph ">MyTextField</codeph>）および編集できない別のテキストフィールド（<codeph class="+ topic/ph pr-d/codeph ">MyButtonField</codeph>）を作成して、マウスクリックに応答する「ボタン」として提供します。ユーザーは最初のテキストフィールドを編集して、テキストフィールドのコンテンツをローカルファイルに保存できます。 マウスクリックのイベントハンドラー <codeph class="+ topic/ph pr-d/codeph ">clickhandler</codeph> は <codeph class="+ topic/ph pr-d/codeph ">FileReference.save()</codeph> メソッド（<codeph class="+ topic/ph pr-d/codeph ">MyFileReference</codeph> という名前の FileReference オブジェクトの場合）を使用して、ユーザーの現在のオペレーティングシステム上でダイアログを開くので、ユーザーはコンテンツをユーザーが付ける名前でローカルファイルに保存できます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var MyTextField:TextField = new TextField();
var MyButtonField:TextField = new TextField();
var MyFile:FileReference = new FileReference();

MyTextField.border = true;
MyTextField.type = TextFieldType.INPUT;

MyButtonField.background = true;
MyButtonField.backgroundColor = 0x339933;
MyButtonField.x = 150;
MyButtonField.height = 20;
MyButtonField.text = "Click here to save";

addChild(MyTextField);
addChild(MyButtonField);
MyButtonField.addEventListener(MouseEvent.CLICK, clickhandler);

function clickhandler(e:MouseEvent): void {
    MyFile.save(MyTextField.text);
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReferenceList/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.browse()</linktext></link><link href="flash.net.xml#FileReference/load()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.load()</linktext></link><link href="flash.net.xml#FileReference/data" class="- topic/link "><linktext class="- topic/linktext ">FileReference.data</linktext></link><link href="flash.net.xml#FileReference/upload()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.upload()</linktext></link><link href="flash.net.xml#FileReference/download()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.download()</linktext></link><link href="flash.filesystem.xml#FileStream" class="- topic/link "><linktext class="- topic/linktext ">FileStream</linktext></link></related-links><adobeApiEvent id="flash.net:FileReference:save_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ダウンロード処理が開始したときに送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ダウンロード処理が開始したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:save_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ファイルのダウンロード処理中に定期的に送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ファイルのダウンロード処理中に定期的に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:save_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ファイルのダウンロード処理が正常に完了したときに送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ファイルのダウンロード処理が正常に完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:save_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ユーザーがダイアログボックスを閉じると、送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ユーザーがダイアログボックスを閉じると、送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:save_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ダウンロードするファイルをユーザーがダイアログボックスから選択すると、送出されます。 
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ダウンロードするファイルをユーザーがダイアログボックスから選択すると、送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:save_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ファイルの読み込み中または転送中に入出力エラーが発生した場合に送出されます。
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ファイルの読み込み中または転送中に入出力エラーが発生した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:FileReference:uploadUnencoded" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">uploadUnencoded</apiName><shortdesc class="- topic/shortdesc ">
    ファイルをエンコードせずに URL へのアップロードを開始します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">信頼されていないローカル SWF ファイルはインターネットへの接続を許可されません。この問題を回避するには、この SWF ファイルを、ネットワークアクセスを許可されたローカル SWF ファイル、または信頼できる SWF ファイルとして再分類します。この例外がスローされると、アクセスできないローカルファイルの名前および URL を示すメッセージが送信されます。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">次の状況でスローされます。1）他の FileReference ブラウズセッション、または FileReferenceList ブラウズセッションが進行中の場合。ファイルブラウズのセッションは、一度に 1 つのみ実行できます。2) URL パラメーターが有効なパスまたはプロトコルでない場合。ファイルのアップロードには HTTP を使用する必要があります。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">request</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:URLRequest</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">URLRequest オブジェクトです。URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">url</codeph> プロパティには、HTTP の <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> 呼び出しを使用してアップロードを処理するように設定したサーバースクリプトの URL を設定する必要があります。一部のブラウザーでは、URL ストリングの長さに制限があるものがあります。長さが 256 文字を超える場合、一部のブラウザーまたはサーバーでは失敗する場合があります。このパラメーターが <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、例外がスローされます。  
     
    <p class="- topic/p ">この URL では、HTTP または HTTPS（セキュアアップロード）を使用できます。HTTPS を使用するには、<codeph class="+ topic/ph pr-d/codeph ">url</codeph> パラメーターで HTTPS url を使用します。<codeph class="+ topic/ph pr-d/codeph ">url</codeph> パラメーターにポート番号を指定しない場合、HTTP の場合はポート 80、HTTPS の場合はポート 443 がデフォルトでは使用されます。</p>
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">POST</codeph> パラメーターまたは <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> パラメーターをサーバーに送信するには、URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティに任意のパラメーターを設定し、<codeph class="+ topic/ph pr-d/codeph ">method</codeph> プロパティを <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph> または <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.GET</codeph> に設定します。</p>
    
    </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">ファイルをエンコードせずにリモートサーバーへのアップロードを開始します。 
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ファイルをエンコードせずに URL へのアップロードを開始します。<codeph class="+ topic/ph pr-d/codeph ">upload()</codeph> メソッドはファイルを form-data エンベロープでエンコードしますが、<codeph class="+ topic/ph pr-d/codeph ">uploadUnencoded()</codeph> メソッドは HTTP 要求の本体でファイルコンテンツをそのまま渡します。送信しようとするデータが、受信するサーバーで理解可能な形式で既にエンコードされている場合、uploadUnencoded() メソッドを使用します。通常、<codeph class="+ topic/ph pr-d/codeph ">uploadeUnencoded()</codeph> メソッドを、<codeph class="+ topic/ph pr-d/codeph ">HTTP/WebDAV PUT</codeph> メソッドと共に使用します。
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link><link href="flash.net.xml#FileReferenceList/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.browse()</linktext></link><link href="flash.net.xml#FileReference/download()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.download()</linktext></link><link href="flash.net.xml#FileReferenceList/fileList" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.fileList</linktext></link><link href="flash.net.xml#FileReference/upload()" class="- topic/link "><linktext class="- topic/linktext ">upload()</linktext></link></related-links><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">アップロード処理が開始したときに送出されます。
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">アップロード処理が開始したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ファイルのアップロード処理中に定期的に送出されます。
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ファイルのアップロード処理中に定期的に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ファイルのアップロード処理が正常に完了したときに送出されます。
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ファイルのアップロード処理が正常に完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_uploadCompleteData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">uploadCompleteData</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:DataEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ファイルアップロードの正常終了後、サーバーからデータを受信したときに送出されます。
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ファイルアップロードの正常終了後、サーバーからデータを受信したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">セキュリティ侵害が原因でアップロードが失敗した場合に送出されます。
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">セキュリティ侵害が原因でアップロードが失敗した場合に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_httpStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpStatus</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">HTTP エラーが原因でアップロードが失敗した場合に送出されます。
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">HTTP エラーが原因でアップロードが失敗した場合に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_httpResponseStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpResponseStatus</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">アップロード操作が正常に完了すると、サーバーは応答 URL と応答ヘッダーを返します。
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">アップロード操作が正常に完了すると、サーバーは応答 URL と応答ヘッダーを返します。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">次のいずれかの場合に呼び出されます。
    <ul class="- topic/ul "><li class="- topic/li ">Adobe AIR によるファイルの読み込み中、書き込み中、または転送中に入出力エラーが発生したためにアップロードが失敗した場合。</li><li class="- topic/li ">ユーザー名とパスワードなど、認証が必要なサーバーにファイルをアップロードしようとしたことが原因でアップロードが失敗した場合。アップロード中、ユーザーがパスワードを入力する方法はありません。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">url</codeph> パラメーターに無効なプロトコルが含まれるために、アップロードが失敗した場合。<codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> は HTTP または HTTPS を使用する必要があります。</li></ul>
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">次のいずれかの場合に呼び出されます。Adobe AIR によるファイルの読み込み中、書き込み中、または転送中に入出力エラーが発生したためにアップロードが失敗した場合。ユーザー名とパスワードなど、認証が必要なサーバーにファイルをアップロードしようとしたことが原因でアップロードが失敗した場合。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:FileReference:upload" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">upload</apiName><shortdesc class="- topic/shortdesc ">
    リモートサーバーへのファイルのアップロードを開始します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">upload, FileReference.upload
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">信頼されていないローカル SWF ファイルはインターネットへの接続を許可されません。この問題を回避するには、この SWF ファイルを、ネットワークアクセスを許可されたローカル SWF ファイル、または信頼できる SWF ファイルとして再分類します。この例外がスローされると、アクセスできないローカルファイルの名前および URL を示すメッセージが送信されます。
    
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一般的な予約ポートには接続できません。遮断されたポートの詳しいリストについては、『ActionScript 3.0 開発ガイド<i class="+ topic/ph hi-d/i "/>』の「ネットワーク API の制限」を参照してください。
     
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">次の状況でスローされます。1）他の FileReference ブラウズセッション、または FileReferenceList ブラウズセッションが進行中の場合。ファイルブラウズのセッションは、一度に 1 つのみ実行できます。2) URL パラメーターが有効なパスまたはプロトコルでない場合。ファイルのアップロードでは HTTP を使用し、ファイルのダウンロードでは FTP または HTTP を使用する必要があります。3) <codeph class="+ topic/ph pr-d/codeph ">uploadDataFieldName</codeph> パラメーターが <codeph class="+ topic/ph pr-d/codeph ">null</codeph> に設定されている場合。4) ユーザーの mms.cfg ファイルの設定により、この操作が禁止されている場合。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">次の状況でスローされます。1) <codeph class="+ topic/ph pr-d/codeph ">uploadDataFieldName</codeph> パラメーターが空のストリングの場合。2) <codeph class="+ topic/ph pr-d/codeph ">url.data</codeph> が ByteArray 型の場合。<codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> メソッドおよび <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> メソッドと一緒に使用する場合、<codeph class="+ topic/ph pr-d/codeph ">url.data</codeph> は URLVariables 型または String 型のみになります。3) AIR ランタイム（アプリケーションセキュリティサンドボックス内）で、URLRequest のメソッドが GET または POST でない場合（代わりに <codeph class="+ topic/ph pr-d/codeph ">uploadEncoded()</codeph> を使用します）。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、次の理由で発生する可能性があります。1) Flash Player では <codeph class="+ topic/ph pr-d/codeph ">URLRequest.data</codeph> パラメーターを UTF8 から MBCS に変換できません。このエラーは、<codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> に渡された URLRequest オブジェクトが GET 操作を行うように設定されている場合、および <codeph class="+ topic/ph pr-d/codeph ">System.useCodePage</codeph> が <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定されている場合に発生することがあります。2) Flash Player では <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> データにメモリを割り当てることができません。このエラーは、<codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> に渡された URLRequest オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> 操作を行うように設定されている場合に発生することがあります。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">MemoryError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:MemoryError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">request</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:URLRequest</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">URLRequest オブジェクトです。URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">url</codeph> プロパティには、HTTP の <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> 呼び出しを使用してアップロードを処理するように設定したサーバースクリプトの URL を設定する必要があります。一部のブラウザーでは、URL ストリングの長さに制限があるものがあります。長さが 256 文字を超える場合、一部のブラウザーまたはサーバーでは失敗する場合があります。このパラメーターが <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、例外がスローされます。URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">requestHeaders</codeph> プロパティは無視されるため、カスタム HTTP リクエストヘッダーはアップロードまたはダウンロードでサポートされません。
     
    <p class="- topic/p ">この URL では、HTTP または HTTPS（セキュアアップロード）を使用できます。HTTPS を使用するには、<codeph class="+ topic/ph pr-d/codeph ">url</codeph> パラメーターで HTTPS url を使用します。<codeph class="+ topic/ph pr-d/codeph ">url</codeph> パラメーターにポート番号を指定しない場合、HTTP の場合はポート 80、HTTPS の場合はポート 443 がデフォルトでは使用されます。</p>
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">POST</codeph> パラメーターまたは <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> パラメーターをサーバーに送信するには、URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティに任意のパラメーターを設定し、<codeph class="+ topic/ph pr-d/codeph ">method</codeph> プロパティを <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph> または <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.GET</codeph> に設定します。</p>
    
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uploadDataFieldName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">Filedata</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">アップロード <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> 操作のファイルデータに先行するフィールド名です。<codeph class="+ topic/ph pr-d/codeph ">uploadDataFieldName</codeph> 値は、null 以外、空白以外のストリングである必要があります。デフォルトでは、<codeph class="+ topic/ph pr-d/codeph ">uploadDataFieldName</codeph> の値は <codeph class="+ topic/ph pr-d/codeph ">"Filedata"</codeph> です。次のサンプル <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> 要求を参照してください。
    <pre xml:space="preserve" class="- topic/pre ">
    Content-Type: multipart/form-data; boundary=AaB03x
    --AaB03x 
    Content-Disposition: form-data; name="Filedata"; filename="example.jpg" 
    Content-Type: application/octet-stream
    ... contents of example.jpg ... 
    --AaB03x-- 
    </pre>
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">testUpload</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">テストファイルアップロードを要求するための設定です。<codeph class="+ topic/ph pr-d/codeph ">testUpload</codeph> が <codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合、10 KB を超えるファイルに対し、Flash Player は、Content-Length を 0 としてテストファイルアップロードの <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> を試行します。 テストアップロードでは、実際のファイルアップロードが成功するかどうか、必要な場合はサーバー認証が成功するかどうかがチェックされます。 テストアップロードは、Windows プレーヤーでのみ使用できます。
    
    
    </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">リモートサーバーへのファイルのアップロードを開始します。
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    リモートサーバーへのファイルのアップロードを開始します。<ph class="- topic/ph ">Flash Player ではアップロードまたはダウンロードできるファイルのサイズに制限はありませんが、このプレーヤーが正式にサポートしているアップロードまたはダウンロードのサイズは最大 100 MB です。</ph>このメソッドを呼び出す前に、<codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> メソッドを呼び出す必要があります。
    
    <p class="- topic/p ">FileReference クラスを拡張する Adobe AIR File クラスの場合は、<codeph class="+ topic/ph pr-d/codeph ">upload()</codeph> メソッドを使用して任意のファイルをアップロードできます。Flash Player で使用される FileReference クラスの場合は、ユーザーは最初にファイルを選択する必要があります。</p>
    
    <p class="- topic/p ">リスナーは、アップロードが進行中なのか、成功したのか、失敗したのかを示すイベントを受け取ります。FileReferenceList オブジェクトを使用すると、ユーザーが複数のファイルを選択してアップロードすることが可能になりますが、ファイルは 1 つずつアップロードする必要があります。この操作を実行するには、FileReference オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.fileList</codeph> 配列で繰り返し処理を実行します。</p>
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> 関数と <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> 関数はノンブロッキング処理を行います。これらの関数は呼び出された後、ファイル転送が完了する前に返されます。さらに、FileReference オブジェクトがスコープ外に移動した場合、そのオブジェクトに対して完了していないアップロードまたはダウンロードは、スコープから離れた時点でキャンセルされます。アップロードまたはダウンロードの続行を期待できる限りは、FileReference オブジェクトがスコープ内にあることを確認してください。</p>
    
    <p class="- topic/p ">ファイルは、<codeph class="+ topic/ph pr-d/codeph ">url</codeph> パラメーターに渡された URL にアップロードされます。URL は、アップロードを許可するよう設定されたサーバースクリプトである必要があります。Flash Player は、HTTP <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> メソッドを使用してファイルをアップロードします。アップロードを処理するサーバースクリプトは、次のエレメントを持つ <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> リクエストを想定しています。</p>
    <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Content-Type</codeph> の <codeph class="+ topic/ph pr-d/codeph ">multipart/form-data</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Content-Disposition</codeph> の <codeph class="+ topic/ph pr-d/codeph ">name</codeph> 属性の設定がデフォルトの <codeph class="+ topic/ph pr-d/codeph ">"Filedata"</codeph>、<codeph class="+ topic/ph pr-d/codeph ">filename</codeph> 属性の設定がオリジナルファイルの名前</li><li class="- topic/li ">ファイルのバイナリコンテンツ</li></ul>
    
     <p class="- topic/p ">一般的な予約ポートには接続できません。遮断されたポートの詳しいリストについては、『ActionScript 3.0 開発ガイド<i class="+ topic/ph hi-d/i "/>』の「ネットワーク API の制限」を参照してください。</p>
     
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">POST</codeph> 要求のサンプルについては、<codeph class="+ topic/ph pr-d/codeph ">uploadDataFieldName</codeph> パラメーターの説明を参照してください。<codeph class="+ topic/ph pr-d/codeph ">POST</codeph> パラメーターまたは <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> パラメーターを、<codeph class="+ topic/ph pr-d/codeph ">upload()</codeph> メソッドを使用してサーバーに送信できます。<codeph class="+ topic/ph pr-d/codeph ">request</codeph> パラメーターの説明を参照してください。</p>
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">testUpload</codeph> パラメーターが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> で、アップロード対象のファイルが約 10 KB を超える場合、Windows 用の Flash Player は、転送が成功するかどうか検証するために、実際のファイルをアップロードする前にテストアップロードとして中身がゼロの <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> 処理を送信します。その後 Flash Player は、実際のファイル内容を含む 2 番目の <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> 処理を送信します。10 KB 未満のファイルの場合、Flash Player は、アップロード対象の実際のファイル内容を含むアップロード <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> を 1 回だけ実行します。Macintosh 用の Flash Player は、テストアップロードの <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> 処理を実行しません。</p>
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>サーバーでユーザー認証が必要な場合、ブラウザー内で実行される、つまり、ブラウザープラグインまたは ActiveX コントロールを使用する SWF ファイルでのみ、認証用のユーザー名とパスワードをユーザーが入力できるダイアログボックスを表示できます。ただし、それはダウンロードの場合のみです。プラグインまたは ActiveX コントロールを使用するアップロードの場合、または、スタンドアローンまたは外部 Player を使用するアップロードとダウンロードの場合、ファイル転送は失敗します。</p>
    
    <p class="- topic/p ">このメソッドを使用するときは、<ph class="- topic/ph ">Flash Player</ph> セキュリティモデルを考慮してください。 </p>
    
    
    <ul class="- topic/ul "><li class="- topic/li ">呼び出し元 SWF ファイルが信頼されないコードとしてローカルのサンドボックスに置かれている場合、ロード操作は実行できません。</li><li class="- topic/li ">デフォルトの動作では、サンドボックス間のアクセスは拒否されます。URL ポリシーファイルを追加することによって、Web サイトでリソースにアクセスできるようになります。</li><li class="- topic/li ">SWF ファイルがこのメソッドを使用しないようにするには、SWF コンテンツを含んでいる HTML ページに <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">object</codeph> タグおよび <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> タグのパラメーター）を設定します。</li></ul>
    
    <p class="- topic/p ">ただし、Adobe AIR では、<codeph class="+ topic/ph pr-d/codeph ">アプリケーション</codeph>セキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p>
    
    <p class="- topic/p ">セキュリティについて詳しくは、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
    
    <p class="- topic/p ">Flash Player に追加された新しい機能により、Flash Player 10 にパブリッシュする場合は、<codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReference.load()</codeph> および <codeph class="+ topic/ph pr-d/codeph ">FileReference.save()</codeph> の中で、同時に実行できる操作は 1 つのみです。複数の操作を実行すると、Flash Player でランタイムエラー（コード 2174）が発生します。進行中の操作を停止するには、<codeph class="+ topic/ph pr-d/codeph ">FileReference.cancel()</codeph> を使用します。この制限は Flash Player 10 にのみ適用されます。以前のバージョンの Flash Player については、同時に複数の操作を実行しても、この制限には影響されません。</p>
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link><link href="flash.net.xml#FileReferenceList/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.browse()</linktext></link><link href="flash.net.xml#FileReference/download()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.download()</linktext></link><link href="flash.net.xml#FileReferenceList/fileList" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.fileList</linktext></link><link href="flash.net.xml#FileReference/load()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.load()</linktext></link></related-links><adobeApiEvent id="flash.net:FileReference:upload_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">アップロード処理が開始したときに送出されます。
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">アップロード処理が開始したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:upload_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ファイルのアップロード処理中に定期的に送出されます。
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ファイルのアップロード処理中に定期的に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:upload_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ファイルのアップロード処理が正常に完了したときに送出されます。
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ファイルのアップロード処理が正常に完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:upload_uploadCompleteData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">uploadCompleteData</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:DataEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ファイルアップロードの正常終了後、サーバーからデータを受信したときに送出されます。
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ファイルアップロードの正常終了後、サーバーからデータを受信したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:upload_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">セキュリティ侵害が原因でアップロードが失敗した場合に送出されます。
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">セキュリティ侵害が原因でアップロードが失敗した場合に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:upload_httpStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpStatus</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">HTTP エラーが原因でアップロードが失敗した場合に送出されます。
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">HTTP エラーが原因でアップロードが失敗した場合に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:upload_httpResponseStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpResponseStatus</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">アップロード操作が正常に完了すると、サーバーは応答 URL と応答ヘッダーを返します。
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">アップロード操作が正常に完了すると、サーバーは応答 URL と応答ヘッダーを返します。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:upload_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">次のいずれかの場合に呼び出されます。
    <ul class="- topic/ul "><li class="- topic/li "><ph class="- topic/ph ">Flash Player または</ph> Adobe AIR によるファイルの読み込み中、書き込み中、または転送中に入出力エラーが発生したためにアップロードが失敗した場合。</li><li class="- topic/li ">ユーザー名とパスワードなど、認証が必要なサーバーにファイルをアップロードしようとしたことが原因でアップロードが失敗した場合。アップロード中、ユーザーがパスワードを入力する方法はありません。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">url</codeph> パラメーターに無効なプロトコルが含まれるために、アップロードが失敗した場合。<codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> は HTTP または HTTPS を使用する必要があります。</li></ul>
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">次のいずれかの場合に呼び出されます。Flash Player または Adobe AIR によるファイルの読み込み中、書き込み中、または転送中に入出力エラーが発生したためにアップロードが失敗した場合。ユーザー名とパスワードなど、認証が必要なサーバーにファイルをアップロードしようとしたことが原因でアップロードが失敗した場合。</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.net:FileReference:creationDate:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">creationDate</apiName><shortdesc class="- topic/shortdesc ">
    ローカルディスク上に存在するファイルの作成日です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">creationDate, FileReference.creationDate
    
    </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Date</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph>、または <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> メソッドの呼び出しが失敗すると、例外がスローされ、関数の呼び出しシーケンスが正しくないこと、または以前の呼び出しが失敗したことを知らせるメッセージが送信されます。この場合、<codeph class="+ topic/ph pr-d/codeph ">creationDate</codeph> プロパティの値は <codeph class="+ topic/ph pr-d/codeph ">null</codeph> です。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ファイル情報にアクセスできない場合、I/O エラーを示すメッセージとともにエラーがスローされます。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">ファイルの作成日を Date オブジェクトとして取得します。
    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ローカルディスク上に存在するファイルの作成日です。オブジェクトに値が設定されていない場合に、このプロパティの値を取得する呼び出しが行われると <codeph class="+ topic/ph pr-d/codeph ">null</codeph> が返されます。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link></related-links></apiValue><apiValue id="flash.net:FileReference:creator:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">creator</apiName><shortdesc class="- topic/shortdesc ">
    Macintosh クリエータータイプのファイルです。このファイルは、Mac OS X より前のバージョンの Mac OS でのみ使用されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">creator, FileReference.creator
    </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Macintosh では、<codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph>、または <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> メソッドの呼び出しが失敗すると、例外がスローされ、関数の呼び出しシーケンスが正しくないこと、または以前の呼び出しが失敗したことを知らせるメッセージが送信されます。この場合、<codeph class="+ topic/ph pr-d/codeph ">creator</codeph> プロパティの値は <codeph class="+ topic/ph pr-d/codeph ">null</codeph> です。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Macintosh クリエータータイプです。
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ファイルの Macintosh クリエータータイプです。Macintosh クリエータータイプは、Mac OS X より前のバージョンの Mac OS でのみ使用されます。Windows または Linux では、このプロパティは <codeph class="+ topic/ph pr-d/codeph ">null</codeph> です。FileReference オブジェクトに値が設定されていない場合に、このプロパティの値を取得する呼び出しが行われると <codeph class="+ topic/ph pr-d/codeph ">null</codeph> を返します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link><link href="flash.net.xml#FileReference/extension" class="- topic/link "><linktext class="- topic/linktext ">FileReference.extension</linktext></link></related-links></apiValue><apiValue id="flash.net:FileReference:data:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><shortdesc class="- topic/shortdesc ">
    load() メソッドの呼び出しが成功した後に読み込まれるファイルからのデータを表す ByteArray オブジェクト。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
    </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.utils:ByteArray</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">load()</codeph> メソッドの呼び出しが失敗すると、例外がスローされ、関数の呼び出しシーケンスが正しくないこと、または以前の呼び出しが失敗したことを知らせるメッセージが送信されます。この場合、<codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティの値は <codeph class="+ topic/ph pr-d/codeph ">null</codeph> です。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ファイルを開くことや読み取ることができない場合、またはファイルへのアクセスで同様のエラーが発生した場合、例外がスローされ、ファイルの I/O エラーを知らせるメッセージが送信されます。この場合、<codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティの値は <codeph class="+ topic/ph pr-d/codeph ">null</codeph> です。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">ファイルの読み込まれた ByteArray データです。
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> メソッドの呼び出しが成功した後に読み込まれるファイルからのデータを表す ByteArray オブジェクト。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link><link href="flash.net.xml#FileReference/load()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.load()</linktext></link></related-links></apiValue><apiValue id="flash.net:FileReference:extension:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">extension</apiName><shortdesc class="- topic/shortdesc ">
     ファイル名拡張子です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">参照が初期化されていない場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ファイル名拡張子です。
     
     <p class="- topic/p ">ファイルの拡張子は、名前内の最後のドット（"."）の後の部分です（ドットは含みません）。ファイル名内にドットがない場合、拡張子は <codeph class="+ topic/ph pr-d/codeph ">null</codeph> です。</p>
     
     <p class="- topic/p "><i class="+ topic/ph hi-d/i "/>注意：ファイルのタイプを確認するには、<codeph class="+ topic/ph pr-d/codeph ">extension</codeph> プロパティを使用する必要があります。<codeph class="+ topic/ph pr-d/codeph ">creator</codeph> プロパティまたは <codeph class="+ topic/ph pr-d/codeph ">type</codeph> プロパティは使用しないでください。<codeph class="+ topic/ph pr-d/codeph ">creator</codeph> プロパティと <codeph class="+ topic/ph pr-d/codeph ">type</codeph> プロパティは非推奨のプロパティと考えてください。これらのプロパティは、Mac OS の古いバージョンに適用されます。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:FileReference:modificationDate:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">modificationDate</apiName><shortdesc class="- topic/shortdesc ">
   ローカルディスク上に存在するファイルの最終変更日です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">modificationDate, FileReference.modificationDate
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Date</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph>、または <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> メソッドの呼び出しが失敗すると、例外がスローされ、関数の呼び出しシーケンスが正しくないこと、または以前の呼び出しが失敗したことを知らせるメッセージが送信されます。この場合、<codeph class="+ topic/ph pr-d/codeph ">modificationDate</codeph> プロパティの値は <codeph class="+ topic/ph pr-d/codeph ">null</codeph> です。
   
   </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ファイル情報にアクセスできない場合、I/O エラーを示すメッセージとともにエラーがスローされます。
   
   </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">ファイルの修正日を Date オブジェクトとして取得します。
   </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
   ローカルディスク上に存在するファイルの最終変更日です。FileReference オブジェクトに値が設定されていない場合に、このプロパティの値を取得する呼び出しが行われると <codeph class="+ topic/ph pr-d/codeph ">null</codeph> を返します。
   
   </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link></related-links></apiValue><apiValue id="flash.net:FileReference:name:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
   ローカルディスク上に存在するファイルの名前です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
   </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> メソッドの呼び出しが失敗すると、例外がスローされ、関数の呼び出しシーケンスが正しくないこと、または以前の呼び出しが失敗したことを知らせるメッセージが送信されます。
   
   </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">ファイルの名前をストリングとして取得します。
   </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
   ローカルディスク上に存在するファイルの名前です。(<codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> または <codeph class="+ topic/ph pr-d/codeph "> FileReference.browse()</codeph> の有効な呼び出しにより) FileReference オブジェクトに値が設定されていない場合にこのプロパティの値を取得しようとすると、Flash Player はエラーをスローします。
   <p class="- topic/p ">FileReference オブジェクトのすべてのプロパティの値は、<codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> メソッドを呼び出すことにより設定されます。<codeph class="+ topic/ph pr-d/codeph ">download()</codeph> メソッドを呼び出した場合、FileReference の他のプロパティと異なり、<codeph class="+ topic/ph pr-d/codeph ">name</codeph> プロパティの値は <codeph class="+ topic/ph pr-d/codeph ">select</codeph> イベントが送出されたときに設定されます。</p>
   
   </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link></related-links></apiValue><apiValue id="flash.net:FileReference:size:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">size</apiName><shortdesc class="- topic/shortdesc ">
  ローカルディスク上に存在するファイルのサイズ（バイト単位）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
  </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> メソッドの呼び出しが失敗すると、例外がスローされ、関数の呼び出しシーケンスが正しくないこと、または以前の呼び出しが失敗したことを知らせるメッセージが送信されます。
  
  </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ファイルを開くことや読み取ることができない場合、またはファイルへのアクセスで同様のエラーが発生した場合、例外がスローされ、ファイルの I/O エラーを知らせるメッセージが送信されます。
  
  </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">バイト単位のファイルサイズです。
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  ローカルディスク上に存在するファイルのサイズ（バイト単位）です。<ph class="- topic/ph "><codeph class="+ topic/ph pr-d/codeph ">size</codeph> が 0 の場合、例外がスローされます。</ph>
  
  <p class="- topic/p "><i class="+ topic/ph hi-d/i "/>注意：ActionScript 3.0 の初期のバージョンでは、<codeph class="+ topic/ph pr-d/codeph ">size</codeph> プロパティは、4 GB 程度までのサイズのファイルをサポートする uint オブジェクトとして定義されていました。現在では、それよりも大きいファイルをサポートする Number オブジェクトとして実装されています。 </p>
  
  </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link></related-links></apiValue><apiValue id="flash.net:FileReference:type:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">type</apiName><shortdesc class="- topic/shortdesc ">
  ファイル形式です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">type, FileReference.type
  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph>、または <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> メソッドの呼び出しが失敗すると、例外がスローされ、関数の呼び出しシーケンスが正しくないこと、または以前の呼び出しが失敗したことを知らせるメッセージが送信されます。この場合、<codeph class="+ topic/ph pr-d/codeph ">type</codeph> プロパティの値は <codeph class="+ topic/ph pr-d/codeph ">null</codeph> です。
  
  </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">ファイルのタイプまたは拡張子を取得します。
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  ファイル形式です。 
  
  <p class="- topic/p ">Windows または Linux の場合、このプロパティはファイル拡張子になります。Macintosh では、このプロパティは 4 文字のファイルタイプです。これは、Mac OS X より前のバージョンの Mac OS でのみ使用されます。FileReference オブジェクトに値が設定されていない場合に、このプロパティの値を取得する呼び出しを行うと、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> が返されます。</p>
    
    <p class="- topic/p ">Windows、Linux および Mac OS X の場合、ファイル拡張子（<codeph class="+ topic/ph pr-d/codeph ">name</codeph> プロパティの、最後のドット（.）の後の部分）でファイル形式を示します。</p>
    
  </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/extension" class="- topic/link "><linktext class="- topic/linktext ">FileReference.extension</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:FileReferenceList" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">FileReferenceList</apiName><shortdesc class="- topic/shortdesc ">
 FileReferenceList クラスは、ユーザーがアップロードするファイルを選択する手段を提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">FileReferenceList
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">1 つまたは複数のファイルをアップロードする手段を提供します。
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 FileReferenceList クラスは、ユーザーがアップロードするファイルを選択する手段を提供します。FileReferenceList オブジェクトは、ユーザーのディスク上にあるローカルファイルを FileReference オブジェクトの配列として表現します。FileReference オブジェクトと FileReference クラスの詳細および重要な考慮事項については、FileReference クラスを参照してください。これらは FileReferenceList で使用します。
 
 <p class="- topic/p ">FileReferenceList クラスを使用するには</p>
 <ul class="- topic/ul "><li class="- topic/li ">このクラスのインスタンスを作成します。<codeph class="+ topic/ph pr-d/codeph ">var myFileRef = new FileReferenceList();</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> メソッドを呼び出して、アップロードするファイルをユーザーが選択できるダイアログボックスを開きます。<codeph class="+ topic/ph pr-d/codeph ">myFileRef.browse();</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> メソッドが正常に呼び出された後、FileReferenceList オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">fileList</codeph> プロパティに FileReference オブジェクトの配列が設定されます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> を <codeph class="+ topic/ph pr-d/codeph ">fileList</codeph> 配列のエレメントごとに呼び出します。</li></ul>
 
 <p class="- topic/p ">FileReferenceList クラスには、<codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> メソッドや、複数のファイルを扱うための <codeph class="+ topic/ph pr-d/codeph ">fileList</codeph> プロパティなどが含まれます。<codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> の呼び出しが実行されている間に、SWF ファイル再生は Linux および Mac OS X 10.1 以前の Flash Player のスタンドアローンバージョンと外部バージョンおよび AIR で一時停止します。</p>
 
 </apiDesc><example conref="examples\FileReferenceListExample.as" class="- topic/example "> 次の例は、イベントを使用して複数ファイルのアップロードを管理する方法を示しています。CustomFileReferenceList クラスは FileReferenceList を継承し、<codeph class="+ topic/ph pr-d/codeph ">complete</codeph> イベントを含んでいます。このイベントは、FileReferenceList オブジェクト内の個々のファイルがアップロードされるたびに送出されます。FileReferenceListExample クラスの <codeph class="+ topic/ph pr-d/codeph ">LIST_COMPLETE</codeph> イベントは、FileReferenceList オブジェクト内のすべてのファイルがアップロードされると送出されます。
 
 <p class="- topic/p ">この例を実行するには、ファイルアップロードの受け取り処理を記述したスクリプトを、http://www.[yourDomain].com/yourUploadHandlerScript.cfm に配置します。SWF ファイルの場所とファイルのアップロード先によっては、「ローカルでの再生に関するセキュリティ」を「ネットワークにのみアクセスする」に設定して SWF ファイルをコンパイルするか、Flash<sup class="+ topic/ph hi-d/sup ">®</sup> Player のセキュリティ設定を更新してこのファイルのネットワークアクセスを許可する必要がある場合もあります。アップロードサーバーがリモートで、この例をデスクトップコンピューターから実行する場合、サーバーには "crossdomain.xml" ファイルが必要です。</p>
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.FileReferenceList;
 
    public class FileReferenceListExample extends Sprite {
        public static var LIST_COMPLETE:String = "listComplete";
        public function FileReferenceListExample() {
            initiateFileUpload();
        }

        private function initiateFileUpload():void {
            var fileRef:CustomFileReferenceList = new CustomFileReferenceList();
            fileRef.addEventListener(FileReferenceListExample.LIST_COMPLETE, listCompleteHandler);
            fileRef.browse(fileRef.getTypes());
        }

        private function listCompleteHandler(event:Event):void {
            trace("listCompleteHandler");
        }
    }
}
 
import flash.events.*;
import flash.net.FileReference;
import flash.net.FileReferenceList;
import flash.net.FileFilter;
import flash.net.URLRequest;
 
class CustomFileReferenceList extends FileReferenceList {
    private var uploadURL:URLRequest;
    private var pendingFiles:Array;

    public function CustomFileReferenceList() {
        uploadURL = new URLRequest();
        uploadURL.url = "http://www.[yourDomain].com/yourUploadHandlerScript.cfm";
        initializeListListeners();
    }

    private function initializeListListeners():void {
        addEventListener(Event.SELECT, selectHandler);
        addEventListener(Event.CANCEL, cancelHandler);
    }

    public function getTypes():Array {
        var allTypes:Array = new Array();
        allTypes.push(getImageTypeFilter());
        allTypes.push(getTextTypeFilter());
        return allTypes;
    }
 
    private function getImageTypeFilter():FileFilter {
        return new FileFilter("Images (*.jpg, *.jpeg, *.gif, *.png)", "*.jpg;*.jpeg;*.gif;*.png");
    }
 
    private function getTextTypeFilter():FileFilter {
        return new FileFilter("Text Files (*.txt, *.rtf)", "*.txt;*.rtf");
    }
 
    private function doOnComplete():void {
        var event:Event = new Event(FileReferenceListExample.LIST_COMPLETE);
        dispatchEvent(event);
    }
 
    private function addPendingFile(file:FileReference):void {
        trace("addPendingFile: name=" + file.name);
        pendingFiles.push(file);
        file.addEventListener(Event.OPEN, openHandler);
        file.addEventListener(Event.COMPLETE, completeHandler);
        file.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        file.addEventListener(ProgressEvent.PROGRESS, progressHandler);
        file.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
        file.upload(uploadURL);
    }
 
    private function removePendingFile(file:FileReference):void {
        for (var i:uint; i &lt; pendingFiles.length; i++) {
            if (pendingFiles[i].name == file.name) {
                pendingFiles.splice(i, 1);
                if (pendingFiles.length == 0) {
                    doOnComplete();
                }
                return;
            }
        }
    }
 
    private function selectHandler(event:Event):void {
        trace("selectHandler: " + fileList.length + " files");
        pendingFiles = new Array();
        var file:FileReference;
        for (var i:uint = 0; i &lt; fileList.length; i++) {
            file = FileReference(fileList[i]);
            addPendingFile(file);
        }
    }
 
    private function cancelHandler(event:Event):void {
        var file:FileReference = FileReference(event.target);
        trace("cancelHandler: name=" + file.name);
    }
 
    private function openHandler(event:Event):void {
        var file:FileReference = FileReference(event.target);
        trace("openHandler: name=" + file.name);
    }
 
    private function progressHandler(event:ProgressEvent):void {
        var file:FileReference = FileReference(event.target);
        trace("progressHandler: name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
    }
 
    private function completeHandler(event:Event):void {
        var file:FileReference = FileReference(event.target);
        trace("completeHandler: name=" + file.name);
        removePendingFile(file);
    }
 
    private function httpErrorHandler(event:Event):void {
        var file:FileReference = FileReference(event.target);
        trace("httpErrorHandler: name=" + file.name);
    }
 
    private function ioErrorHandler(event:Event):void {
        var file:FileReference = FileReference(event.target);
        trace("ioErrorHandler: name=" + file.name);
    }
 
    private function securityErrorHandler(event:Event):void {
        var file:FileReference = FileReference(event.target);
        trace("securityErrorHandler: name=" + file.name + " event=" + event.toString());
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference" class="- topic/link "><linktext class="- topic/linktext ">FileReference</linktext></link></related-links><adobeApiEvent id="flash.net:FileReferenceList_flash.events.Event.SELECT_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><shortdesc class="- topic/shortdesc ">
 ユーザーがアップロードするファイルをファイル参照ダイアログボックスから 1 つ以上選択したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example demonstrates the usage of the <code>select</code> event.
 <listing version="2.0">
 import flash.net.FileReferenceList;
 import flash.net.FileReference;
 
 var listener:Object = new Object();
 
 listener.onSelect = function(fileRefList:FileReferenceList) {
 	trace("onSelect");
 	var list:Array = fileRefList.fileList;
 	var item:FileReference;
 	for(var i:Number = 0; i &lt; list.length; i++) {
 		item = list[i];
 		trace("name: " + item.name);
 		trace(item.addListener(this));
 		item.upload("http://www.yourdomain.com/");
 	}
 }
 
 listener.onComplete = function(file:FileReference):void {
 	trace("onComplete: " + file.name);
 }
 
 var fileRef:FileReferenceList = new FileReferenceList();
 fileRef.addListener(listener);
 fileRef.browse();
 </listing>
 </maelexample></asCustoms></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.SELECT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ユーザーがアップロードするファイルをファイル参照ダイアログボックスから 1 つ以上選択したときに送出されます。（このダイアログボックスは、<codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> メソッド、<codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph> メソッド、または <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> メソッドを呼び出したときに開かれます。）ユーザーがファイルを選択し、「保存」などをクリックして操作を確定すると、ユーザーが選択したファイルを表す FileReference オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList</codeph> オブジェクトに設定されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReferenceList/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.browse()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReferenceList_flash.events.Event.CANCEL_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
 ユーザーがファイル参照ダイアログボックスを閉じると、送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
 </helpid></asCustoms></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CANCEL</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ユーザーがファイル参照ダイアログボックスを閉じると、送出されます。（このダイアログボックスは、<codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> メソッド、<codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph> メソッド、または <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> メソッドを呼び出したときに開かれます。）
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReferenceList/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.browse()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.net:FileReferenceList:FileReferenceList" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">FileReferenceList</apiName><shortdesc class="- topic/shortdesc ">
 	 新しい FileReferenceList オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates a new <code>FileReferenceList</code> object,
	 iterates over each selected file, and outputs their names.
	 <listing version="2.0">
	 import flash.net.FileReferenceList;
	 
	 var listener:Object = new Object();
	 listener.onSelect = function(fileRefList:FileReferenceList) {
	 	trace("onSelect");
	 	var arr:Array = fileRefList.fileList;
	 	for(var i:Number = 0; i &lt; arr.length; i++) {
	 		trace("name: " + arr[i].name);
	 	}
	 }
	 
	 var fileRef:FileReferenceList = new FileReferenceList();
	 fileRef.addListener(listener);
	 fileRef.browse();
	 </listing>
  	 
  	 </maelexample></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 	 新しい FileReferenceList オブジェクトを作成します。FileReferenceList オブジェクトで <codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> メソッドが呼び出され、ユーザーがファイルを選択するまでは、FileReferenceList オブジェクトには何も含まれません。FileReference オブジェクトで <codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> を呼び出すと、このオブジェクトの <codeph class="+ topic/ph pr-d/codeph ">fileList</codeph> プロパティに <codeph class="+ topic/ph pr-d/codeph ">FileReference</codeph> オブジェクトの配列が設定されます。
	 
	 </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference" class="- topic/link "><linktext class="- topic/linktext ">FileReference</linktext></link><link href="flash.net.xml#FileReferenceList/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.browse()</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:FileReferenceList:browse" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">browse</apiName><shortdesc class="- topic/shortdesc ">
	 アップロードするローカルファイルを 1 つ以上選択できるファイル参照ダイアログボックスを表示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample><pre xml:space="preserve" class="- topic/pre ">
	 // ask the user to choose an image file for upload
	 var fileRef = new FileReference();
	 if (fileRef.browse(["Images", "jpg;gif;png", "Flash Movies", "swf"])) {
	   trace("Opened " + fileRef.name);
	 } else {
	   trace("User canceled");
	 }
	 </pre>
	 
	 
	 </oldexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">次の理由によりスローされます。1）他の FileReference ブラウズセッション、または FileReferenceList ブラウズセッションが進行中の場合。ファイルブラウズのセッションは、一度に 1 つのみ実行できます。2）ユーザーの mms.cfg ファイルの設定により、この操作が禁止されている場合。 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">typeFilter</codeph> 配列に、正しい形式の FileFilter オブジェクトが含まれていないと、例外がスローされます。正しいフィルター形式について詳しくは、FileFilter の説明を参照してください。
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">マウスイベントやキー入力イベントなどのユーザー操作に応じてメソッドが呼び出されない場合。
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">パラメーターが有効で、ファイル参照ダイアログボックスが表示された場合に、<codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返します。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">typeFilter</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ダイアログボックスに表示するファイルをフィルターにかける場合に使用する FileFilter インスタンスの配列です。このパラメーターを省略すると、すべてのファイルが表示されます。詳細については、<xref href="FileFilter.html" class="- topic/xref ">FileFilter</xref> クラスを参照してください。 
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">アップロードするローカルファイルを選択できるファイル参照ダイアログボックスを表示します。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 アップロードするローカルファイルを 1 つ以上選択できるファイル参照ダイアログボックスを表示します。このダイアログボックスは、オペレーティングシステムのネイティブのダイアログボックスです。
	 
	 <p class="- topic/p ">Flash Player 10 以降では、このメソッドの呼び出しは、マウスのクリックやキー入力などのユーザーイベントに応じてイベントハンドラーで呼び出した場合にのみ成功します。それ以外の場合は、このメソッドを呼び出すと、Flash Player から例外がスローされます。</p>
	 
	 <p class="- topic/p ">このメソッドが呼び出されて、ユーザーが正常にファイルを選択すると、この FileReferenceList オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">fileList</codeph> プロパティに FileReference オブジェクトの配列が設定されます。ユーザーが選択したファイル 1 つにつき 1 つの FileReference オブジェクトになります。これ以降 FileReferenceList.browse() メソッドが呼び出されるたびに、<codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.fileList</codeph> プロパティは、ダイアログボックスでユーザーが選択したファイルに再設定されます。</p>
	 
	 <p class="- topic/p ">どのファイルをダイアログボックスに表示するかを決定するために、<codeph class="+ topic/ph pr-d/codeph ">typeFilter</codeph> パラメーターを使用できます。</p>
	 
	 <p class="- topic/p ">FileReferenceList オブジェクトでは、一度に 1 つの <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph> セッション、<codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> セッション、または <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> セッションだけを実行できます。これは、一度に 1 つのダイアログボックスしか開けないからです。</p>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link><link href="flash.net.xml#FileReference" class="- topic/link "><linktext class="- topic/linktext ">FileReference クラス</linktext></link><link href="flash.net.xml#FileFilter" class="- topic/link "><linktext class="- topic/linktext ">FileFilter class</linktext></link></related-links><adobeApiEvent id="flash.net:FileReferenceList:browse_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">アップロード対象の項目をユーザーがダイアログボックスで正常に選択したときに呼び出されます。
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">アップロード対象の項目をユーザーがダイアログボックスで正常に選択したときに呼び出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReferenceList:browse_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ユーザーが「キャンセル」をクリックするかダイアログボックスを閉じたときに呼び出されます。
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ユーザーが「キャンセル」をクリックするかダイアログボックスを閉じたときに呼び出されます。</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.net:FileReferenceList:fileList:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fileList</apiName><shortdesc class="- topic/shortdesc ">
	 FileReference オブジェクトの配列です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample>The following example demonstrates the <code>fileList</code> property.
	 <listing version="2.0">
	 import flash.net.FileReferenceList;
	 import flash.net.FileReference;
	 
	 var listener:Object = new Object();
	 listener.onSelect = function(fileRefList:FileReferenceList) {
	 	trace("onSelect");
	 	var list:Array = fileRefList.fileList;
	 	var item:FileReference;
	 	for(var i:Number = 0; i &lt; list.length; i++) {
	 		item = list[i];
	 		trace("name: " + item.name);
	 	}
	 }
	 
	 var fileRef:FileReferenceList = new FileReferenceList();
	 fileRef.addListener(listener);
	 fileRef.browse();
	 </listing>
	 
	 </oldexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">FileReference オブジェクトの配列です。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">FileReference</codeph> オブジェクトの配列です。
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> メソッドが呼び出され、<codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> メソッドが開いたダイアログボックスからユーザーがファイルを選択すると、このプロパティに FileReference オブジェクトの配列が設定されます。FileReference オブジェクトのそれぞれが、ユーザーが選択したファイルを表します。その後、この配列を使用して、<codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> メソッドで各ファイルをアップロードできます。一度に 1 つのファイルをアップロードする必要があります。</p>
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">fileList</codeph> プロパティは、browse() が FileReferenceList オブジェクトで呼び出されるたびに新しく設定されます。</p>
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">FileReference</codeph> オブジェクトのプロパティについては、FileReference クラスの説明を参照してください。</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference" class="- topic/link "><linktext class="- topic/linktext ">FileReference</linktext></link><link href="flash.net.xml#FileReference/upload()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.upload()</linktext></link><link href="flash.net.xml#FileReferenceList/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.browse()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetworkInterface" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetworkInterface</apiName><shortdesc class="- topic/shortdesc ">
 NetworkInterface クラスは、ネットワークインターフェイスを記述します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 NetworkInterface クラスは、ネットワークインターフェイスを記述します。
 
 <p class="- topic/p ">NetworkInfo オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">findInterfaces()</codeph> メソッドを呼び出すことによってネットワークインターフェイスのリストを取得できます。</p>
 
 </apiDesc><example conref="examples\NetworkInterfaceExample.as" class="- topic/example "/></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetworkInfo" class="- topic/link "><linktext class="- topic/linktext ">NetworkInfo</linktext></link><link href="flash.net.xml#InterfaceAddress" class="- topic/link "><linktext class="- topic/linktext ">InterfaceAddress</linktext></link></related-links><apiValue id="flash.net:NetworkInterface:active:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">active</apiName><shortdesc class="- topic/shortdesc ">
     このインターフェイスがアクティブかどうかをレポートします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このインターフェイスがアクティブかどうかをレポートします。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetworkInterface:addresses:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">addresses</apiName><shortdesc class="- topic/shortdesc ">
     このネットワークインターフェイスにバインドされるアドレスのリストです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiType value="Vector$flash.net:InterfaceAddress" name="type" class="- topic/state reference/state apiRef/apiType "/></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このネットワークインターフェイスにバインドされるアドレスのリストです。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetworkInterface:displayName:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">displayName</apiName><shortdesc class="- topic/shortdesc ">
     このネットワークインターフェイスの表示名です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このネットワークインターフェイスの表示名です。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetworkInterface:hardwareAddress:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hardwareAddress</apiName><shortdesc class="- topic/shortdesc ">
     このネットワークインターフェイスのハードウェアアドレスです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このネットワークインターフェイスのハードウェアアドレスです。
     
     <p class="- topic/p ">ハードウェアアドレスは、通常、ネットワークアダプターまたはインターフェイスカードの MAC （Media Access Control） アドレスです。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetworkInterface:mtu:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">mtu</apiName><shortdesc class="- topic/shortdesc ">
     このネットワークインターフェイスの最大転送単位（MTU）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このネットワークインターフェイスの最大転送単位（MTU）です。 
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">mtu</codeph> 値が <codeph class="+ topic/ph pr-d/codeph ">-1</codeph> と報告される場合、実際に MTU は不明です。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetworkInterface:name:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
     このネットワークインターフェイスの名前です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このネットワークインターフェイスの名前です。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetworkInterface:parent:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">parent</apiName><shortdesc class="- topic/shortdesc ">
     親インターフェイスを表す NetworkInterface オブジェクト（このインターフェイスに親がある場合）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.net:NetworkInterface</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     親インターフェイスを表す NetworkInterface オブジェクト（このインターフェイスに親がある場合）です。
     
     <p class="- topic/p ">このインターフェイスがサブインターフェイスである場合、このインターフェイスが親を持つ場合があります。このインターフェイスが親を持たない場合、<codeph class="+ topic/ph pr-d/codeph ">parent</codeph> プロパティは <codeph class="+ topic/ph pr-d/codeph ">null</codeph> です。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetworkInterface:subInterfaces:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">subInterfaces</apiName><shortdesc class="- topic/shortdesc ">
     このネットワークインターフェイスに接続されているサブインターフェイスのリストです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiType value="Vector$flash.net:NetworkInterface" name="type" class="- topic/state reference/state apiRef/apiType "/></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このネットワークインターフェイスに接続されているサブインターフェイスのリストです。
     
     <p class="- topic/p ">サブインターフェイスは仮想インターフェイスの場合がよくあります。このインターフェイスがサブインターフェイスを持たない場合、<codeph class="+ topic/ph pr-d/codeph ">subInterfaces</codeph> プロパティは <codeph class="+ topic/ph pr-d/codeph ">null</codeph> です。</p>
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:SharedObjectFlushStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SharedObjectFlushStatus</apiName><shortdesc class="- topic/shortdesc ">
 SharedObjectFlushStatus クラスは、SharedObject.flush() メソッドの呼び出しから返されるコードの値を提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 SharedObjectFlushStatus クラスは、<codeph class="+ topic/ph pr-d/codeph ">SharedObject.flush()</codeph> メソッドの呼び出しから返されるコードの値を提供します。
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/flush()" class="- topic/link "><linktext class="- topic/linktext ">SharedObject.flush()</linktext></link></related-links><apiValue id="flash.net:SharedObjectFlushStatus:FLUSHED" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">FLUSHED</apiName><shortdesc class="- topic/shortdesc ">
 フラッシュが正常に完了したことを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">flushed</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 フラッシュが正常に完了したことを示します。
 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/flush()" class="- topic/link "><linktext class="- topic/linktext ">SharedObject.flush()</linktext></link></related-links></apiValue><apiValue id="flash.net:SharedObjectFlushStatus:PENDING" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">PENDING</apiName><shortdesc class="- topic/shortdesc ">
 フラッシュが実行できるように、共有オブジェクトのディスク領域を増やすことを促すメッセージがユーザーに対して表示されることを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">pending</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 フラッシュが実行できるように、共有オブジェクトのディスク領域を増やすことを促すメッセージがユーザーに対して表示されることを示します。
 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/flush()" class="- topic/link "><linktext class="- topic/linktext ">SharedObject.flush()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:SecureSocket" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SecureSocket</apiName><shortdesc class="- topic/shortdesc ">
 SecureSocket クラスを使用すると、コード内のソケット接続で、Secure Sockets Layer（SSL）プロトコルおよび Transport Layer Security（TLS）プロトコルを利用することができます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.net:Socket</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 SecureSocket クラスを使用すると、コード内のソケット接続で、Secure Sockets Layer（SSL）プロトコルおよび Transport Layer Security（TLS）プロトコルを利用することができます。 
 
 <p class="- topic/p ">AIR プロファイルのサポート：<i class="+ topic/ph hi-d/i "/>この機能はすべてのデスクトップオペレーティングシステムでサポートされますが、一部のテレビ用 AIR デバイスではサポートされません。また、モバイルデバイスではサポートされません。<codeph class="+ topic/ph pr-d/codeph ">SecureSocket.isSupported</codeph> プロパティを使用して、サポートされているかどうかを実行時にテストすることができます。複数のプロファイル間での API サポートについて詳しくは、<xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">AIR プロファイルのサポート</xref>を参照してください。</p>
 
 <p class="- topic/p ">SSL/TLS プロトコルによって、証明書を使用してホストの ID を認証するためのメカニズムが提供されます。また、ソケット経由の暗号化通信も利用できるようになります。SSLv3 および TLSv1 がサポートされます。サーバー証明書の検証は、信頼ストアとクライアントプラットフォームの証明書検証サポートを使用して実行されます。</p> 
 
 <p class="- topic/p ">SecureSocket クラスは、信頼できる有効な証明書を備えたサーバーにのみ接続します。サーバーの証明書に問題がある場合には、そのサーバーへの接続を選択することはできません。例えば、サーバーの証明書の有効期限が切れていたり、信頼できるルート証明書にサーバーの証明書がチェーンしていない場合、その証明書が有効であっても接続はできません。</p>
 
 <p class="- topic/p ">SecureSocket クラスは、信頼できるサーバーに対して暗号化通信を行う場合に役立ちます。その他の点では、SecureSocket オブジェクトは、通常の Socket オブジェクトと同様に動作します。</p>
 
 <p class="- topic/p ">SecureSocket クラスのメソッドを使用するには、まず <codeph class="+ topic/ph pr-d/codeph ">new SecureSocket()</codeph> コンストラクターを使用して SecureSocket オブジェクトを作成します。サーバーに接続するときに、サーバー証明書が検証されます。証明書が有効で信頼されている場合、接続が確立され、ソケットは <codeph class="+ topic/ph pr-d/codeph ">connect</codeph> イベントを送出します。証明書を検証できなかった場合、ソケットは <codeph class="+ topic/ph pr-d/codeph ">IOError</codeph> イベントを送出します。</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">重要：</b>OCSP（Online Certificate Status Protocol）は、一部のオペレーティングシステムではサポートされません。また、ユーザーは、個々のコンピューターで OCSP チェックを無効にすることができます。OCSP がサポートされていないか無効になっていて、さらに、CRL（証明書失効リスト）を使用して行われる失効確認に必要な情報が証明書に含まれていない場合、証明書失効の確認は行われません。失効以外の内容が有効であれば、証明書は受け入れられます。その結果、失効した証明書の使用をサーバーが許可するおそれがあります。</p>
 
 </apiDesc><example conref="examples\SecureSocketExample.as" class="- topic/example "> 次の例では、SecureSocket オブジェクトを作成および接続する方法を示します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">package
{
    import flash.display.Sprite;
    import flash.errors.IOError;
    import flash.events.Event;
    import flash.events.IOErrorEvent;
    import flash.net.SecureSocket;
    
    public class SecureSocketExample extends Sprite
    {
        private var secureSocket:SecureSocket = new SecureSocket();
        
        public function SecureSocketExample()
        {
            secureSocket.addEventListener( Event.CONNECT, onConnect )
            secureSocket.addEventListener( IOErrorEvent.IO_ERROR, onError );
            
            try
            {
                secureSocket.connect( "208.77.188.166", 443 );
            }
            catch ( error:Error )
            {
                trace ( error.toString() );
            }
        }
        
        private function onConnect( event:Event ):void
        {
            trace("Connected.");
        }
        
        private function onError( error:IOErrorEvent ):void
        {
            trace( error.text + ", " + secureSocket.serverCertificateStatus );
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket" class="- topic/link "><linktext class="- topic/linktext ">Socket クラス</linktext></link></related-links><adobeApiEvent id="flash.net:SecureSocket_flash.events.ProgressEvent.SOCKET_DATA_socketData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">socketData</apiName><shortdesc class="- topic/shortdesc ">
 ソケットがデータを受信したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ProgressEvent.SOCKET_DATA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ソケットがデータを受信したときに送出されます。<codeph class="+ topic/ph pr-d/codeph ">socketData</codeph> タイプのイベントでは、<codeph class="+ topic/ph pr-d/codeph ">ProgressEvent.bytesTotal</codeph> プロパティは使用されません。 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:SecureSocket_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 入出力エラーが発生して送信または受信操作が失敗したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 入出力エラーが発生して送信または受信操作が失敗したときに送出されます。
 
 <p class="- topic/p ">サーバー証明書を検証できない場合、送出されるエラーイベントは IOError です。この場合は、<codeph class="+ topic/ph pr-d/codeph ">serverCertificateStatus</codeph> プロパティをチェックして、問題の原因を確認できます。</p>
  
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:SecureSocket_flash.events.Event.CONNECT_connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><shortdesc class="- topic/shortdesc ">
 ネットワーク接続が確立されたときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CONNECT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ネットワーク接続が確立されたときに送出されます。 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:SecureSocket_flash.events.Event.CLOSE_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
 サーバーによりソケット接続が閉じられたときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 サーバーによりソケット接続が閉じられたときに送出されます。 
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">close</codeph> イベントは、サーバーにより接続が閉じられたときにのみ送出されます。<codeph class="+ topic/ph pr-d/codeph ">SecureSocket.close()</codeph> メソッドを呼び出しても送出されません。</p>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.net:SecureSocket:SecureSocket" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SecureSocket</apiName><shortdesc class="- topic/shortdesc ">
    新しい SecureSocket オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、SSLv3 または TLSv1 がサポートされない場合に発生します。
	
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    新しい SecureSocket オブジェクトを作成します。
	
	<p class="- topic/p ">SecureSocket インスタンスを作成する前に、<codeph class="+ topic/ph pr-d/codeph ">SecureSocket.isSupported</codeph> をチェックします。SSLv3 ソケットまたは TLSv1 ソケットがサポートされない場合、ランタイムは IllegalOperationError をスローします。</p>
    
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.net:SecureSocket:connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><shortdesc class="- topic/shortdesc ">
     ソケットを、SSL または TLS を使用する指定されたホストおよびポートに接続します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>BRS compare this entire description with XMLSocket.connect() and make consistent
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ホストが指定されていないので、接続に失敗しました。
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、0 未満または 65535 を超えるソケットポートを指定した場合に発生します。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">host</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">接続するホストのホスト名または IP アドレスです。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">port</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">接続先のポート番号です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットを、SSL または TLS を使用する指定されたホストおよびポートに接続します。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> メソッドを呼び出すときに、サーバー証明書が検証されます。SSL/TLS ハンドシェイクに成功し、証明書が有効で信頼できる場合、接続が確立され、ソケットにより <codeph class="+ topic/ph pr-d/codeph ">connect</codeph> イベントが送出されます。ハンドシェイクに失敗するか、証明書を検証できなかった場合は、<codeph class="+ topic/ph pr-d/codeph ">IOError</codeph> イベントが送出されます。これらのイベントのいずれかが送出された後、<codeph class="+ topic/ph pr-d/codeph ">serverCertificateStatus</codeph> プロパティを読み取ることによって証明書の検証結果を確認できます（<codeph class="+ topic/ph pr-d/codeph ">connect</codeph> イベントが送出される場合、証明書ステータスは常に <codeph class="+ topic/ph pr-d/codeph ">trusted</codeph> です）。</p>
	 
     <p class="- topic/p ">ソケットが既に接続済みの場合、最初に既存の接続が閉じられます。</p>
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.net:SecureSocket:connect_connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ネットワーク接続が確立されたときに送出されます。
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ネットワーク接続が確立されたときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:SecureSocket:connect_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ホストが指定されていて、入出力エラーが発生して接続が失敗した場合に送出されます。これには、SSL/TLS ハンドシェイクエラーや、ホストのサーバー証明書の検証の失敗が含まれます。
	 
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ホストが指定されていて、入出力エラーが発生して接続が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.net:SecureSocket:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
     現在のシステムでセキュアソケットがサポートされているかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     現在のシステムでセキュアソケットがサポートされているかどうかを示します。
     
     <p class="- topic/p ">セキュアソケットは、すべてのプラットフォームでサポートされているわけではありません。新しい SecureSocket インスタンスを作成する前に、このプロパティをチェックします。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:SecureSocket:serverCertificateStatus:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">serverCertificateStatus</apiName><shortdesc class="- topic/shortdesc ">
     サーバーの証明書のステータスです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     サーバーの証明書のステータスです。
     
     <p class="- topic/p ">ソケットがサーバーに接続しようと試みるまでは、ステータスは <codeph class="+ topic/ph pr-d/codeph ">CertificateStatus.UNKNOWN</codeph> です。検証後、ステータスは、CertificateStatus クラスによって列挙されたストリングのいずれかになります。接続は、証明書が有効で信頼されている場合にのみ、成功します。つまり、<codeph class="+ topic/ph pr-d/codeph ">connect</codeph> イベントの後は、ステータスは常に <codeph class="+ topic/ph pr-d/codeph ">trusted</codeph> です。 </p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>いったん証明書が検証されるか拒否された後は、次に <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> メソッドを呼び出すまではステータス値は更新されません。<codeph class="+ topic/ph pr-d/codeph ">close()</codeph> を呼び出しても、ステータス値は "unknown" にリセットされません。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.security.xml#CertificateStatus" class="- topic/link "><linktext class="- topic/linktext ">CertificateStatus クラス</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:ServerSocket" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ServerSocket</apiName><shortdesc class="- topic/shortdesc ">
 ServerSocket クラスを使用して、コードを Transport Control Protocol（TCP）接続用サーバーとして動作させることができます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ServerSocket クラスを使用して、コードを Transport Control Protocol（TCP）接続用サーバーとして動作させることができます。 
 
 <p class="- topic/p ">AIR プロファイルのサポート：<i class="+ topic/ph hi-d/i "/>この機能はすべてのデスクトップオペレーティングシステムでサポートされますが、モバイルデバイスまたはテレビ用 AIR デバイスではサポートされません。<codeph class="+ topic/ph pr-d/codeph ">ServerSocket.isSupported</codeph> プロパティを使用して、サポートされているかどうかを実行時にテストすることができます。複数のプロファイル間での API サポートについて詳しくは、<xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">AIR プロファイルのサポート</xref>を参照してください。</p>
 
 <p class="- topic/p ">TCP サーバーはリモートクライアントからの受信接続を待機します。クライアントが接続しようとすると、ServerSocket が <codeph class="+ topic/ph pr-d/codeph ">connect</codeph> イベントを送出します。このイベントで送出される ServerSocketConnectEvent オブジェクトはサーバーとクライアント間の TCP 接続を表す Socket オブジェクトを提供します。接続したクライアントとのその後の通信で、この Socket オブジェクトを使用します。必要な場合は、Socket オブジェクトからクライアントアドレスとポートを取得できます。</p> 
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>アプリケーションは、クライアント Socket·オブジェクトへの参照を維持します。維持を行わない場合、このオブジェクトはガベージコレクションの対象となり、警告を表示せずにランタイムによって破棄される可能性があります。</p>
 
 <p class="- topic/p ">ServerSocket オブジェクトを待機状態にするには、<codeph class="+ topic/ph pr-d/codeph ">listen()</codeph> メソッドを呼び出します。待機状態では、TCP プロトコルを使用するクライアントがバインドされたアドレスおよびポートに接続しようとするたびに、サーバーソケットオブジェクトが <codeph class="+ topic/ph pr-d/codeph ">connect</codeph> イベントを送出します。ServerSocket オブジェクトは <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> メソッドを呼び出すまで追加の接続を待機し続けます。</p>
 
 <p class="- topic/p ">TCP 接続は永続的であり、接続の一端が閉じられるまで（あるいは重大なネットワークエラーが発生するまで）維持されます。この接続を経由して送信されるデータは、伝送可能なパケットに分割され、接続の終端でもう一度組み立てられます。すべてのパケットは妥当な範囲で到着することが保証され、消失パケットは再送信されません。 通常、TCP プロトコルによる利用可能なネットワーク帯域幅の管理は UDP プロトコルよりも優れています。ソケット通信を必要とするほとんどの AIR アプリケーションは、DatagramSocket クラスではなく ServerSocket および Socket クラスを使用しているはずです。</p>
 
 <p class="- topic/p ">ServerSocket クラスは Adobe AIR アプリケーションでのみ使用でき、アプリケーションセキュリティサンドボックスでのみ使用できます。</p>
 
 <p class="- topic/p ">セキュリティについて詳しくは、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
 
 </apiDesc><example conref="examples\ServerSocketExample.as" class="- topic/example "> 次の例では、ソケットサーバーを作成します。サーバーを使用するには、ソケットをローカルポートにバインドし、他のアプリケーションからそのポートに接続します。サーバーは UTF-8 ストリングのみを認識します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.display.Sprite;
    import flash.events.Event;
    import flash.events.MouseEvent;
    import flash.events.ProgressEvent;
    import flash.events.ServerSocketConnectEvent;
    import flash.net.ServerSocket;
    import flash.net.Socket;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.utils.ByteArray;
        
    public class ServerSocketExample extends Sprite
    {
        private var serverSocket:ServerSocket = new ServerSocket();
        private var clientSocket:Socket;

        private var localIP:TextField;
        private var localPort:TextField;
        private var logField:TextField;
        private var message:TextField;

        public function ServerSocketExample()
        {
            setupUI();
        }
        
        private function onConnect( event:ServerSocketConnectEvent ):void
        {
            clientSocket = event.socket;
            clientSocket.addEventListener( ProgressEvent.SOCKET_DATA, onClientSocketData );
            log( "Connection from " + clientSocket.remoteAddress + ":" + clientSocket.remotePort );
        }
        
        private function onClientSocketData( event:ProgressEvent ):void
        {
            var buffer:ByteArray = new ByteArray();
            clientSocket.readBytes( buffer, 0, clientSocket.bytesAvailable );
            log( "Received: " + buffer.toString() );
        }

        private function bind( event:Event ):void
        {
            if( serverSocket.bound ) 
            {
                serverSocket.close();
                serverSocket = new ServerSocket();
                
            }
            serverSocket.bind( parseInt( localPort.text ), localIP.text );
            serverSocket.addEventListener( ServerSocketConnectEvent.CONNECT, onConnect );
            serverSocket.listen();
            log( "Bound to: " + serverSocket.localAddress + ":" + serverSocket.localPort );
        }
        
        private function send( event:Event ):void
        {
            try
            {
                if( clientSocket != null &amp;&amp; clientSocket.connected )
                {
                    clientSocket.writeUTFBytes( message.text );
                    clientSocket.flush(); 
                    log( "Sent message to " + clientSocket.remoteAddress + ":" + clientSocket.remotePort );
                }
                else log("No socket connection.");
            }
            catch ( error:Error )
            {
                log( error.message );
            }
        }

        private function log( text:String ):void
        {
            logField.appendText( text + "\n" );
            logField.scrollV = logField.maxScrollV;
            trace( text );
        }

        private function setupUI():void
        {
            localIP = createTextField( 10, 10, "Local IP", "0.0.0.0");
            localPort = createTextField( 10, 35, "Local port", "0" );
            createTextButton( 170, 60, "Bind", bind );
            message = createTextField( 10, 85, "Message", "Lucy can't drink milk." );
            createTextButton( 170, 110, "Send", send );
            logField = createTextField( 10, 135, "Log", "", false, 200 )
            
            this.stage.nativeWindow.activate();
        }
        
        private function createTextField( x:int, y:int, label:String, defaultValue:String = '', editable:Boolean = true, height:int = 20 ):TextField
        {
            var labelField:TextField = new TextField();
            labelField.text = label;
            labelField.type = TextFieldType.DYNAMIC;
            labelField.width = 100;
            labelField.x = x;
            labelField.y = y;
            
            var input:TextField = new TextField();
            input.text = defaultValue;
            input.type = TextFieldType.INPUT;
            input.border = editable;
            input.selectable = editable;
            input.width = 280;
            input.height = height;
            input.x = x + labelField.width;
            input.y = y;
            
            this.addChild( labelField );
            this.addChild( input );
            
            return input;
        }
        
        private function createTextButton( x:int, y:int, label:String, clickHandler:Function ):TextField
        {
            var button:TextField = new TextField();
            button.htmlText = "&lt;u>&lt;b>" + label + "&lt;/b>&lt;/u>";
            button.type = TextFieldType.DYNAMIC;
            button.selectable = false;
            button.width = 180;
            button.x = x;
            button.y = y;
            button.addEventListener( MouseEvent.CLICK, clickHandler );
            
            this.addChild( button );
            return button;
        }        
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.events.xml#ServerSocketConnectEvent" class="- topic/link "><linktext class="- topic/linktext ">ServerSocketConnectEvent クラス</linktext></link><link href="flash.net.xml#Socket" class="- topic/link "><linktext class="- topic/linktext ">Socket クラス</linktext></link><link href="flash.net.xml#XMLSocket" class="- topic/link "><linktext class="- topic/linktext ">XMLSocket クラス</linktext></link><link href="flash.net.xml#DatagramSocket" class="- topic/link "><linktext class="- topic/linktext ">DatagramSocket クラス</linktext></link></related-links><adobeApiEvent id="flash.net:ServerSocket_flash.events.ServerSocketConnectEvent.CONNECT_connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><shortdesc class="- topic/shortdesc ">
 リモートソケットがこのサーバーソケットに接続しようとするときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ServerSocketConnectEvent.CONNECT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ServerSocketConnectEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 リモートソケットがこのサーバーソケットに接続しようとするときに送出されます。
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:ServerSocket_flash.events.Event.CLOSE_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
 オペレーティングシステムがこのソケットを閉じたときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 オペレーティングシステムがこのソケットを閉じたときに送出されます。
  
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">close</codeph> イベントは、ServerSocket  <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> メソッドが呼び出されるときに送出されません。アプリケーション内の他のオブジェクトは <codeph class="+ topic/ph pr-d/codeph ">close</codeph> イベントに依存し、<codeph class="+ topic/ph pr-d/codeph ">close()</codeph> メソッドを呼び出す前に手動でイベントを送出できます。</p>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.net:ServerSocket:ServerSocket" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">ServerSocket</apiName><shortdesc class="- topic/shortdesc ">
     ServerSocket オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">コンテンツの呼び出しが AIR アプリケーションセキュリティサンドボックス外で実行される場合にこのエラーが発生します。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ServerSocket オブジェクトを作成します。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.net:ServerSocket:bind" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">bind</apiName><shortdesc class="- topic/shortdesc ">
     指定されたローカルのアドレスおよびポートにこのソケットをバインドします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、<codeph class="+ topic/ph pr-d/codeph ">localPort</codeph> が 0 未満か、または 65535 より大きい場合に発生します。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、<codeph class="+ topic/ph pr-d/codeph ">localAddress</codeph> が構文的に整形式の IP アドレスになっていない場合に発生します。
     
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソケットがバインドできないとき。例えば、次のような場合です。
     <ul class="- topic/ul "><li class="- topic/li ">基になるネットワークソケット（IP とポート）が、他のオブジェクトまたはプロセスによって既にバインドされている場合。</li><li class="- topic/li ">アプリケーションを実行するユーザーアカウントに、ポートにバインドする十分なシステム権限がない場合（権限の問題は、通常、ウェルノウンポート <codeph class="+ topic/ph pr-d/codeph ">localPort &lt; 1024</codeph> にバインドしようとした場合に発生します）。</li><li class="- topic/li ">この ServerSocket オブジェクトが既にバインドされている場合（別のソケットにバインドする前に、<codeph class="+ topic/ph pr-d/codeph ">close()</codeph> を呼び出してください)。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">localAddress</codeph> が有効なローカルアドレスでない場合。</li></ul>
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localPort</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ローカルコンピューター上でバインドするポートの数。<codeph class="+ topic/ph pr-d/codeph ">localPort</codeph> が 0（デフォルト）に設定されている場合、次に利用可能なシステムポートがバインドされます。1024 より下位のポート番号に接続する権限には、システムのセキュリティポリシーが適用されます。例えば、Mac および Linux システムでは、アプリケーションは 1024 より下位のポートに接続するにはルート権限で実行する必要があります。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localAddress</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0.0.0.0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">バインド先のローカルマシンの IP アドレス。このアドレスは、IPv4 アドレスでも IPv6 アドレスでもかまいません。<codeph class="+ topic/ph pr-d/codeph ">localAddress</codeph> が <codeph class="+ topic/ph pr-d/codeph ">0.0.0.0</codeph>（デフォルト値）に設定されている場合、ソケットは利用可能なすべての IPv4 アドレスを監視します。利用可能なすべての IPv6 アドレスを監視するには、"::" を <codeph class="+ topic/ph pr-d/codeph ">localAddress</codeph> 引数として指定する必要があります。IPv6 アドレスを使用するには、コンピューターとネットワークの両方が IPv6 をサポートするように設定されている必要があります。 さらに、IPv4 アドレスにバインドされたソケットは IPv6 アドレスのソケットに接続できません。同様に、IPv6 アドレスにバインドされたソケットは IPv4 アドレスのソケットに接続できません。アドレスの種類が一致している必要があります。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定されたローカルのアドレスおよびポートにこのソケットをバインドします。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:ServerSocket:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     ソケットを閉じて、接続の待機を停止します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーはソケットを開くことができなかった場合、またはソケットが開いていなかった場合に発生します。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットを閉じて、接続の待機を停止します。
     
	 <p class="- topic/p ">閉じたソケットを再び開くことはできません。代わりに新しい ServerSocket インスタンスを作成します。</p>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:ServerSocket:listen" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">listen</apiName><shortdesc class="- topic/shortdesc ">
     バインドされた IP アドレスおよびポートで TCP 接続の待機を開始します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーはソケットが開いていないか、バインドされていない場合に発生します。このエラーは、<codeph class="+ topic/ph pr-d/codeph ">listen()</codeph> の呼び出しがその他の理由で失敗したときにも発生します。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、<codeph class="+ topic/ph pr-d/codeph ">backlog</codeph> パラメーターが 0 より小さい場合に発生します。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">backlog</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">待機接続のキューの最大の長さです。<codeph class="+ topic/ph pr-d/codeph ">backlog</codeph> が 0 の場合、このキューの長さはシステムに最大値に設定されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     バインドされた IP アドレスおよびポートで TCP 接続の待機を開始します。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">listen()</codeph> メソッドは直ちに戻ります。<codeph class="+ topic/ph pr-d/codeph ">listen()</codeph> を呼び出すと、接続が試みられたときに必ず、ServerSocket オブジェクトによって <codeph class="+ topic/ph pr-d/codeph ">connect</codeph> イベントが送出されます。ServerSocketConnectEvent イベントオブジェクトの <codeph class="+ topic/ph pr-d/codeph ">socket</codeph> プロパティは、サーバークライアント接続を表す Socket オブジェクトを参照します。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">backlog</codeph> パラメーターは <codeph class="+ topic/ph pr-d/codeph ">connect</codeph> イベントがアプリケーションで処理されている間にキューで待機する接続の数を指定します。キューがいっぱいの場合、追加の接続は <codeph class="+ topic/ph pr-d/codeph ">connect</codeph> イベントが送出されることなく拒否されます。デフォルトの値 0 が指定されると、システムの最大のキューの長さが使用されます。この長さはプラットフォームによって異なり、コンピューター別に設定できます。 指定された値がシステムの最大の長さを超えると、代わりにシステムの最大の長さが使用されます。 実際のバックログ値を検出する手段が提供されていません。（システムの最大値は、ホストコンピューター上の TCP ネットワークサブシステムの SOMAXCONN 設定によって決まります。）</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.net:ServerSocket:bound:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bound</apiName><shortdesc class="- topic/shortdesc ">
     ソケットが現在ローカルのアドレスとポートにバインドされているかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットが現在ローカルのアドレスとポートにバインドされているかどうかを示します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#ServerSocket/bind()" class="- topic/link "><linktext class="- topic/linktext ">bind()</linktext></link></related-links></apiValue><apiValue id="flash.net:ServerSocket:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
     ServerSocket 機能がランタイム環境でサポートされているかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ServerSocket 機能がランタイム環境でサポートされているかどうかを示します。
     
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:ServerSocket:listening:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">listening</apiName><shortdesc class="- topic/shortdesc ">
     サーバーソケットが受信接続を待機しているかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     サーバーソケットが受信接続を待機しているかどうかを示します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#ServerSocket/listen()" class="- topic/link "><linktext class="- topic/linktext ">listen()</linktext></link></related-links></apiValue><apiValue id="flash.net:ServerSocket:localAddress:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localAddress</apiName><shortdesc class="- topic/shortdesc ">
     ソケットが待機している IP アドレス。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットが待機している IP アドレス。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#ServerSocket/bind()" class="- topic/link "><linktext class="- topic/linktext ">bind()</linktext></link></related-links></apiValue><apiValue id="flash.net:ServerSocket:localPort:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localPort</apiName><shortdesc class="- topic/shortdesc ">
     ソケットが待機しているポート。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットが待機しているポート。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#ServerSocket/bind()" class="- topic/link "><linktext class="- topic/linktext ">bind()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:FileFilter" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">FileFilter</apiName><shortdesc class="- topic/shortdesc ">
 FileFilter クラスは、FileReference.browse() メソッド、FileReferenceList.browse() メソッド、または File オブジェクト、FileReference オブジェクト、FileReferenceList オブジェクトの browse メソッドを呼び出したときに表示されるファイル参照ダイアログボックスに、ユーザーのシステム上のどのファイルを表示するかを示すために使用します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 FileFilter クラスは、<codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph> メソッド、<codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> メソッド、または File オブジェクト、FileReference オブジェクト、FileReferenceList オブジェクトの browse メソッドを呼び出したときに表示されるファイル参照ダイアログボックスに、ユーザーのシステム上のどのファイルを表示するかを示すために使用します。 FileFilter インスタンスは、オプションの <codeph class="+ topic/ph pr-d/codeph ">typeFilter</codeph> パラメーターの値としてメソッドに渡されます。 FileFilter インスタンスを使用する場合、FileFilter インスタンスに指定されていない拡張子およびファイルタイプは除外されます。つまり、ユーザーはそれらを選択できません。 FileFilter オブジェクトをメソッドに渡さないと、すべてのファイルがダイアログボックスに表示されます。
 
 <p class="- topic/p ">FileFilter インスタンスは次の 2 つの方法で使用できます。</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">説明と ファイル拡張子のみ</li><li class="- topic/li ">説明と ファイル拡張子および Macintosh ファイルタイプ</li></ul>
 
 <p class="- topic/p ">これら 2 つの形式を browse メソッドの 1 回の呼び出しの中に混在させることはできません。 どちらか一方を使用する必要があります。</p>
 
 <p class="- topic/p ">次の例のように、browse メソッドには 1 つ以上の FileFilter インスタンスを渡すことができます。</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var imagesFilter:FileFilter = new FileFilter("Images", "~~.jpg;~~.gif;~~.png");
 var docFilter:FileFilter = new FileFilter("Documents", "~~.pdf;~~.doc;~~.txt");
 var myFileReference:FileReference = new FileReference();
 myFileReference.browse([imagesFilter, docFilter]);
 </codeblock>
 
 <p class="- topic/p ">AIR アプリケーションでは次のようになります。</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var imagesFilter:FileFilter = new FileFilter("Images", "~~.jpg;~~.gif;~~.png");
 var docFilter:FileFilter = new FileFilter("Documents", "~~.pdf;~~.doc;~~.txt");
 var myFile:File = new File();
 myFile.browseForOpen("Open", [imagesFilter, docFilter]);
 </codeblock>
 
 
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">FileFilter.extension</codeph> プロパティの拡張子リストを使用して、ファイル参照ダイアログに表示されるファイルをフィルターにかけます。このリストは、ダイアログボックスに実際に表示されるわけではありません。ファイルタイプをユーザーに表示するには、拡張子リストのほか、説明用ストリングにもファイルタイプをリストする必要があります。説明用ストリングは、Windows および Linux のダイアログボックスに表示されます。(これは、Macintosh<sup class="+ topic/ph hi-d/sup ">®</sup> では使用されません)。Macintosh で、Macintosh ファイルタイプのリストを指定する場合、このリストはファイルにフィルターをかけるために使用されます。これを指定しない場合は、ファイル拡張子リストが使用されます。 </p> 
 
 </apiDesc></apiClassifierDetail><apiConstructor id="flash.net:FileFilter:FileFilter" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">FileFilter</apiName><shortdesc class="- topic/shortdesc ">
	 新しい FileFilter インスタンスを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">description</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ユーザーがアップロードするファイルを選択するときに表示される説明用ストリングです。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">extension</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ユーザーがアップロードするファイルを選択するときに表示される ファイル形式を示すファイル拡張子のリストです。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">macType</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ユーザーがアップロードするファイルを選択したときに表示されるファイルタイプを示す Macintosh ファイルタイプのリストです。値を指定しないと、このパラメーターは <codeph class="+ topic/ph pr-d/codeph ">null</codeph> に設定されます。
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 新しい FileFilter インスタンスを作成します。
	 </apiDesc><example conref="examples\FileFilter.as" class="- topic/example "> 次の例は、ローカルファイルシステム内の画像をルート表示オブジェクト（この場合はステージ）にアップロードします。例は、<xref href="http://blog.andrevenancio.com/" scope="external" class="- topic/xref ">Andre Venancio</xref> 氏の提供によるものです。
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var buttonShape:Shape = new Shape();
buttonShape.graphics.beginFill(0x336699);
buttonShape.graphics.drawCircle(50, 50, 25);
var button = new SimpleButton(buttonShape, buttonShape, buttonShape, buttonShape);
addChild(button);

var fileRef:FileReference= new FileReference();
button.addEventListener(MouseEvent.CLICK, onButtonClick);

function onButtonClick(e:MouseEvent):void {
fileRef.browse([new FileFilter("Images", "*.jpg;*.gif;*.png")]);
fileRef.addEventListener(Event.SELECT, onFileSelected);
}

function onFileSelected(e:Event):void {
fileRef.addEventListener(Event.COMPLETE, onFileLoaded);
fileRef.load();
}

function onFileLoaded(e:Event):void {
var loader:Loader = new Loader();
loader.loadBytes(e.target.data);
addChild(loader);
}
</codeblock></example></apiConstructorDetail></apiConstructor><apiValue id="flash.net:FileFilter:description:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">description</apiName><shortdesc class="- topic/shortdesc ">
	 フィルターの説明用ストリングです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 フィルターの説明用ストリングです。説明は、<codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> が呼び出されたときに開くダイアログボックスに表示されます。説明用ストリングには、<codeph class="+ topic/ph pr-d/codeph ">"Images (~~.gif, ~~.jpg, ~~.png)"</codeph> などのストリングが含まれ、ユーザーにアップロードまたはダウンロード可能なファイルタイプを指示できます。FileReference オブジェクトでサポートされる実際のファイルタイプは <codeph class="+ topic/ph pr-d/codeph ">extension</codeph> プロパティに格納されます。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:FileFilter:extension:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">extension</apiName><shortdesc class="- topic/shortdesc ">
	 ファイル拡張子のリストです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ファイル拡張子のリストです。このリストは、ファイル参照ダイアログボックスに表示するファイルの種類を示します。(リストは表示されません。ユーザーには <codeph class="+ topic/ph pr-d/codeph ">description</codeph> プロパティの値のみが表示されます)。<codeph class="+ topic/ph pr-d/codeph ">extension</codeph> プロパティには、<codeph class="+ topic/ph pr-d/codeph ">"~~.jpg;~~.gif;~~.png"</codeph> のように、セミコロンで区切った ファイル拡張子のリストが含まれ、各拡張子の前にはワイルドカード（~~）を付けます。
	 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:FileFilter:macType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">macType</apiName><shortdesc class="- topic/shortdesc ">
	 Macintosh ファイルタイプのリストです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Macintosh ファイルタイプのリストです。このリストは、ファイル参照ダイアログボックスに表示するファイルの種類を示します。（このリスト自体は表示されません。ユーザーには <codeph class="+ topic/ph pr-d/codeph ">description</codeph> プロパティの値のみが表示されます）。<codeph class="+ topic/ph pr-d/codeph ">macType</codeph> プロパティには、<codeph class="+ topic/ph pr-d/codeph ">"JPEG;jp2_;GIFF"</codeph> のように、Macintosh ファイルタイプをセミコロンで区切ったリストが含まれます。
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:URLRequest" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">URLRequest</apiName><shortdesc class="- topic/shortdesc ">
  URLRequest クラスは、すべての情報を 1 つの HTTP 要求にキャプチャします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>The above include is not a mistake, but rather code re-use.
 
  </internal></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  URLRequest クラスは、すべての情報を 1 つの HTTP 要求にキャプチャします。URLRequest のオブジェクトは、Loader、URLStream、URLLoader の各クラスの <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> メソッド、およびその他のロード処理に渡され、URL のダウンロードが開始されます。また、FileReference クラスの <codeph class="+ topic/ph pr-d/codeph ">upload()</codeph> メソッドおよび <codeph class="+ topic/ph pr-d/codeph ">download()</codeph> メソッドにも渡されます。
 
  <p class="- topic/p ">ローカルファイルシステムのサンドボックスの SWF ファイルは、ネットワーク上のサンドボックス内のリソースからデータを読み込んだり、リソースにデータを書き込んだりしないことがあります。 </p>
 
  <p class="- topic/p ">デフォルトで、呼び出し元の <ph class="- topic/ph ">SWF</ph> ファイルおよびロードする URL は、同じドメインにある必要があります。例えば www.adobe.com に置かれている <ph class="- topic/ph ">SWF</ph> ファイルは、www.adobe.com に置かれているソースからのみデータをロードできます。<ph class="- topic/ph ">異なるドメインからデータをロードするには、データをホストするサーバーに URL ポリシーファイルを配置します。</ph></p>
 
  <p class="- topic/p "> ただし、Adobe AIR では、アプリケーションセキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。Adobe AIR で実行中のコンテンツの場合、アプリケーションセキュリティサンドボックス内のファイルは、次のいずれかの URL スキームを使って URL にアクセスできます。</p>

  
 
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">http</codeph> および <codeph class="+ topic/ph pr-d/codeph ">https</codeph> </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">file</codeph> </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">app-storage</codeph> </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">app</codeph> </li></ul>
 
  <p class="- topic/p ">アプリケーションセキュリティサンドボックスにない、<ph class="- topic/ph ">Adobe AIR で実行される</ph>コンテンツには、<ph class="- topic/ph ">（Flash Player の)</ph>ブラウザーで実行されるコンテンツと同じ制限が適用され、コンテンツのドメイン<ph class="- topic/ph ">と URL ポリシーファイルで付与されたアクセス許可によりロード操作が管理されます</ph>。</p>
 
 <p class="- topic/p ">セキュリティについて詳しくは、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
 
 
 </apiDesc><example conref="examples\URLRequestExample.as" class="- topic/example "> 次の例では、新しい Loader オブジェクトを作成し、それに XML ファイルへのパスを含む URLRequest オブジェクトを渡します。ロード処理が成功した場合、<codeph class="+ topic/ph pr-d/codeph ">complete</codeph> イベントが送出され、XML ファイル内のデータが出力されます。追加のイベントハンドラーはエラーイベントを含む他のイベントをキャプチャします。
 <p class="- topic/p ">この例を実行するには、XMLFile.xml というファイルを SWF ファイルと同じディレクトリに配置します。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.*;

    public class URLRequestExample extends Sprite {

        public function URLRequestExample() {
            var loader:URLLoader = new URLLoader();
            configureListeners(loader);

            var request:URLRequest = new URLRequest("XMLFile.xml");
            try {
                loader.load(request);
            } catch (error:Error) {
                trace("Unable to load requested document.");
            }
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        }

        private function completeHandler(event:Event):void {
            var loader:URLLoader = URLLoader(event.target);
            trace("completeHandler: " + loader.data);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference" class="- topic/link "><linktext class="- topic/linktext ">FileReference</linktext></link><link href="flash.net.xml#URLRequestHeader" class="- topic/link "><linktext class="- topic/linktext ">URLRequestHeader</linktext></link><link href="flash.net.xml#URLRequestDefaults" class="- topic/link "><linktext class="- topic/linktext ">URLRequestDefaults</linktext></link><link href="flash.net.xml#URLLoader" class="- topic/link "><linktext class="- topic/linktext ">URLLoader</linktext></link><link href="flash.net.xml#URLStream" class="- topic/link "><linktext class="- topic/linktext ">URLStream</linktext></link><link href="../../flash/html/HTMLLoader.html" class="- topic/link "><linktext class="- topic/linktext ">HTMLLoader クラス</linktext></link></related-links><apiConstructor id="flash.net:URLRequest:URLRequest" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">URLRequest</apiName><shortdesc class="- topic/shortdesc ">
     URLRequest オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">url</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">リクエストされる URL です。<codeph class="+ topic/ph pr-d/codeph ">url</codeph> プロパティを使用して、URL を後から設定できます。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     URLRequest オブジェクトを作成します。<codeph class="+ topic/ph pr-d/codeph ">System.useCodePage</codeph> が <codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合、リクエストは Unicode ではなく、システムのコードページを使ってエンコードされます。<codeph class="+ topic/ph pr-d/codeph ">System.useCodePage</codeph> が <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の場合、リクエストはシステムのコードページではなく、Unicode を使ってエンコードされます。
     
     </apiDesc><example conref="examples\URLRequest_example.as" class="- topic/example "> 次の例は、Flash Player から navigateToURL() メソッドを使用して、新しいブラウザーウィンドウを開く方法を示しています。<xref href="http://actionscriptexamples.com/2008/12/08/opening-urls-in-new-browser-windows-using-actionscript-30-and-actionscript-20/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref> で作成された例。 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// Requires
// - Button symbol on Stage (or a display object, such as a MovieClip) with instance name "buttonSymbol"
//
buttonSymbol.addEventListener(MouseEvent.CLICK, buttonSymbol_click);
 
function buttonSymbol_click(evt:MouseEvent):void {
    var req:URLRequest = new URLRequest("http://www.adobe.com/");
    navigateToURL(req, "_blank");
}
</codeblock></example></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.system.xml#System/useCodePage" class="- topic/link "><linktext class="- topic/linktext ">flash.system.System.useCodePage</linktext></link></related-links></apiConstructor><apiValue id="flash.net:URLRequest:authenticate:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">authenticate</apiName><shortdesc class="- topic/shortdesc ">
    この要求に関する認証要求を処理するかどうかを指定します（true または false）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
    </apiDefaultValue><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">この要求に関する認証要求を処理するかどうかを指定します。
    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    この要求に関する認証要求を処理するかどうかを指定します（<codeph class="+ topic/ph pr-d/codeph ">true</codeph> または <codeph class="+ topic/ph pr-d/codeph ">false</codeph>）。<codeph class="+ topic/ph pr-d/codeph ">false</codeph> の場合、認証チャレンジは HTTP エラーを返します。
    
    <p class="- topic/p ">以下の認証メソッドがサポートされています。</p>
    
    <ul class="- topic/ul "><li class="- topic/li ">Windows — HTTP 認証（基本 / ダイジェスト）、Windows 統合認証（NTLM および Kerberos を含む）、SSL 証明書認証</li><li class="- topic/li ">Mac — HTTP 認証（基本 / ダイジェスト）、NTLM 認証、SSL 証明書認証</li></ul>
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b "/>注意：<codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph>、および <codeph class="+ topic/ph pr-d/codeph ">HTMLLoader.load()</codeph> の各メソッドは、<codeph class="+ topic/ph pr-d/codeph ">URLRequest.authenticate</codeph> プロパティをサポートしていません。</p>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequestDefaults/authenticate" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLRequestDefaults.authenticate</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:cacheResponse:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">cacheResponse</apiName><shortdesc class="- topic/shortdesc ">
    この要求に対する正常な応答データをキャッシュするかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
    
    </apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    この要求に対する正常な応答データをキャッシュするかどうかを指定します。<codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定すると、AIR アプリケーションはオペレーティングシステムの HTTP キャッシュを使用します。
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b "/>注意：<codeph class="+ topic/ph pr-d/codeph ">HTMLLoader.load()</codeph> メソッドは <codeph class="+ topic/ph pr-d/codeph ">URLRequest.cacheResponse</codeph> プロパティをサポートしていません。</p>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequestDefaults/cacheResponse" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLRequestDefaults.cacheResponse</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:contentType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">contentType</apiName><shortdesc class="- topic/shortdesc ">
     data プロパティのコンテンツの MIME コンテンツタイプです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">data プロパティのコンテンツの MIME コンテンツタイプです。
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティのコンテンツの MIME コンテンツタイプです。
     
     <p class="- topic/p ">デフォルト値は <codeph class="+ topic/ph pr-d/codeph ">application/x-www-form-urlencoded</codeph> です。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b><codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> および <codeph class="+ topic/ph pr-d/codeph ">HTMLLoader.load()</codeph> の各メソッドは、<codeph class="+ topic/ph pr-d/codeph ">URLRequest.contentType</codeph> プロパティをサポートしていません。</p>
     
     <p class="- topic/p ">POST リクエストを送信する場合、<codeph class="+ topic/ph pr-d/codeph ">contentType</codeph> プロパティと <codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティの値が正しく対応している必要があります。<codeph class="+ topic/ph pr-d/codeph ">contentType</codeph> プロパティの値は、<codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティの値を解釈する方法をサーバーに指示します。 </p>
     
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティの値が URLVariables オブジェクトの場合、<codeph class="+ topic/ph pr-d/codeph ">contentType</codeph> の値は <codeph class="+ topic/ph pr-d/codeph ">application/x-www-form-urlencoded</codeph> である必要があります。 </li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティの値が他の型の場合、<codeph class="+ topic/ph pr-d/codeph ">contentType</codeph> の値は送信される POST データ（<codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティの値に含まれるバイナリまたはストリングのデータ）の型を示す必要があります。 </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> の場合、リクエストの Content-Type は自動的に <codeph class="+ topic/ph pr-d/codeph ">multipart/form-data</codeph> に設定され、<codeph class="+ topic/ph pr-d/codeph ">contentType</codeph> プロパティの値は無視されます。</li></ul>
     
     <p class="- topic/p "> Flash Player 10 以降では、"multipart/form-data" などのマルチパート Content-Type にアップロードが含まれていると（アップロードが含まれているかどうかは POST ボディ内の "content-disposition" ヘッダーの "filename" パラメーターで示されます）、そのアップロードに適用されるセキュリティ規則によって POST 処理が拘束されます。</p>
     <ul class="- topic/ul "><li class="- topic/li ">POST 処理は、マウスのクリックやキーの押下などのユーザーが開始したアクションに応答して実行する必要があります。</li><li class="- topic/li ">POST 処理がクロスドメインである（POST ターゲットが、POST 要求を送信中の SWF ファイルと同じサーバー上にない）場合は、クロスドメインアクセスを許可する URL ポリシーファイルをターゲットサーバーが提供する必要があります。</li></ul>
     <p class="- topic/p ">また、すべてのマルチパート Content-Type では、RFC2046 標準に準拠した有効なシンタックスを使用する必要があります。シンタックスが有効でない場合は、アップロードに適用されるセキュリティ規則によって POST 処理が拘束されます。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest/data" class="- topic/link "><linktext class="- topic/linktext ">data</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:data:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><shortdesc class="- topic/shortdesc ">
     URL リクエストで送信されるデータを含むオブジェクトです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     URL リクエストで送信されるデータを含むオブジェクトです。
     
     <p class="- topic/p ">このプロパティは<codeph class="+ topic/ph pr-d/codeph ">メソッド</codeph>プロパティと一緒に使用します。<codeph class="+ topic/ph pr-d/codeph ">method</codeph> の値が <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> のときは、HTTP クエリ文字列シンタックスを使って、<codeph class="+ topic/ph pr-d/codeph ">data</codeph> の値は <codeph class="+ topic/ph pr-d/codeph ">URLRequest.url</codeph> の値に追加されます。<codeph class="+ topic/ph pr-d/codeph ">method</codeph> の値が <codeph class="+ topic/ph pr-d/codeph ">POST</codeph>（または <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> 以外の値）のときは、<codeph class="+ topic/ph pr-d/codeph ">data</codeph> の値は、HTTP 要求の本文に送信されます。</p>
     
     <p class="- topic/p ">URLRequest API は、ストリング以外に、バイナリ <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> と URL エンコード変数もサポートします。データオブジェクトには、ByteArray、URLVariables、または String オブジェクトを指定できます。</p>
     
     <p class="- topic/p ">データが使用される方法は、使用されるオブジェクトの型によって異なります。</p>
     
     <ul class="- topic/ul "><li class="- topic/li ">オブジェクトが ByteArray オブジェクトの場合、ByteArray オブジェクトのバイナリデータは <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> データとして使用されます。<codeph class="+ topic/ph pr-d/codeph ">GET</codeph> の場合、ByteArray 型のデータはサポートされません。<codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> および <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> の場合も、ByteArray 型のデータはサポートされません。</li><li class="- topic/li ">オブジェクトが URLVariables オブジェクトで、メソッドが <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> の場合、変数は <i class="+ topic/ph hi-d/i ">x-www-form-urlencoded</i> 形式を使用してエンコードされ、結果のストリングが <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> データとして使用されます。例外は <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> の呼び出しです。この場合、変数は、<codeph class="+ topic/ph pr-d/codeph ">multipart/form-data</codeph> ポストの個別のフィールドとして送信されます。</li><li class="- topic/li ">オブジェクトが URLVariables オブジェクトで、メソッドが <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> の場合、URLVariables オブジェクトは URLRequest オブジェクトによって送信される変数を定義します。</li><li class="- topic/li ">それ以外の場合、オブジェクトはストリングに変換され、そのストリングが <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> または <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> データとして使用されます。</li></ul>
     
     <p class="- topic/p ">このデータは、<codeph class="+ topic/ph pr-d/codeph ">navigateToURL()</codeph> や <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> などのメソッドで URLRequest オブジェクトが使用されるまで送信されません。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b><codeph class="+ topic/ph pr-d/codeph ">contentType</codeph> の値は、<codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティのデータ型に対応させる必要があります。<codeph class="+ topic/ph pr-d/codeph ">contentType</codeph> プロパティの説明の注意を参照してください。</p>
     
     </apiDesc><example conref="examples\URLVariablesExample.as" class="- topic/example "> 次の例では、新しいブラウザーウィンドウで http://www.[yourDomain].com/application.jsp でホストされるリモートアプリケーションを開き、URLVariables オブジェクトで捕捉したユーザーセッションに関するデータをアプリケーションに渡します。 
  
 <p class="- topic/p ">この例のハイライトは、次のとおりです。</p>
 <ol class="- topic/ol "><li class="- topic/li ">コンストラクター関数が <codeph class="+ topic/ph pr-d/codeph ">request</codeph> という名前の URLRequest インスタンスを作成します。このとき、リモートアプリケーションの URL をパラメーターとして取ります。</li><li class="- topic/li ">URLVariables オブジェクトが作成され、その 2 つのプロパティに値が割り当てられます。</li><li class="- topic/li ">URLVariables オブジェクトが URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティに割り当てられます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">navigateToURL</codeph> を呼び出して、リモートアプリケーションの URL 用の新しいブラウザーウィンドウを開きます。</li></ol>
 <p class="- topic/p "> <b class="+ topic/ph hi-d/b ">注意：</b>この例を実行するには、この例のリモートアプリケーションの URL を実際の URL に置き換える必要があります。さらに、URLVariables オブジェクトの Flash Player で捕捉した情報を処理するためのサーバーコードが必要です。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.net.URLVariables;

    public class URLVariablesExample extends Sprite {

        public function URLVariablesExample() {
            var url:String = "http://www.[yourDomain].com/application.jsp";
            var request:URLRequest = new URLRequest(url);
            var variables:URLVariables = new URLVariables();
            variables.exampleSessionId = new Date().getTime();
            variables.exampleUserLabel = "guest";
            request.data = variables;
            navigateToURL(request);
        }
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest/method" class="- topic/link "><linktext class="- topic/linktext ">URLRequest.method</linktext></link><link href="flash.net.xml#URLRequestMethod" class="- topic/link "><linktext class="- topic/linktext ">URLRequestMethod</linktext></link><link href="flash.net.xml#URLVariables" class="- topic/link "><linktext class="- topic/linktext ">URLVariables</linktext></link><link href="flash.utils.xml#ByteArray" class="- topic/link "><linktext class="- topic/linktext ">flash.utils.ByteArray</linktext></link><link href="flash.net.xml#URLRequest/contentType" class="- topic/link "><linktext class="- topic/linktext ">contentType</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:digest:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">digest</apiName><shortdesc class="- topic/shortdesc ">
     Flash Player キャッシュに保存される（または Flash Player キャッシュから取得される）署名付き Adobe プラットフォームコンポーネントを一意に識別するストリングです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.115.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">提供されるダイジェストは、ダウンロードされた署名付きファイルから抽出されたファイルのダイジェスト、またはキャッシュからロードされた署名付きファイルから抽出されたファイルのダイジェストとは一致しません。提供されたダイジェストの長さが誤っている場合、または提供されたダイジェストに無効な（16 進数以外の）文字が含まれている場合にも、このエラーがスローされます。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Flash Player キャッシュに保存される（または Flash Player キャッシュから取得される）署名付き Adobe プラットフォームコンポーネントを一意に識別するストリングです。<ph class="- topic/ph "> Adobe プラットフォームコンポーネントは、ユーザーのコンピューターに永続的にキャッシュされる SWF コンテンツを含む署名付きファイル（SWZ ファイル）です。すべての SWZ ファイルはアドビ システムズ社によって署名されます。ダイジェストは単一のキャッシュされているファイルに対応します。ファイルを何らかの方法で変更すると、ダイジェストは予期しない方法で変更されます。ダイジェストを使用することにより、複数のドメインにまたがってキャッシュされているファイルを確認できます。同じダイジェストを持つ 2 つのファイルは同じファイルで、異なるダイジェストを持つ 2 つのファイルは同じファイルではありません。 ダイジェストに「なりすます」ファイル、ダイジェストを装うファイルを作成することは（実質的に）できません。 </ph>
     
     <p class="- topic/p ">ダイジェストは、SHA-256 メッセージダイジェストアルゴリズム（16 進数形式で 64 文字長）に基づきます。</p>
     
     <p class="- topic/p ">例えば、Flex SDK は Flex フレームワークの SWZ を含みます（また、その SWZ ファイルのダイジェストストリングを提供します）。この SWZ を Web サーバーにポストし、それを URLLoader オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> メソッドを使用して SWF ファイルにロードすることができます。エンドユーザーのコンピューターに一致する SWZ ファイルが既にキャッシュされている場合は、そのキャッシュされている SWZ ファイルが使用されます。SWZ ファイルの <codeph class="+ topic/ph pr-d/codeph ">digest</codeph> と提供したダイジェストが一致すると、SWZ ファイルは一致します。それ以外の場合は、指定した URL から SWZ ファイルがアプリケーションによってダウンロードされます。 </p>
     
     <p class="- topic/p ">URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">digest</codeph> パラメーターは、<codeph class="+ topic/ph pr-d/codeph ">URLLoader.load()</codeph> メソッドを呼び出して SWZ ファイルをロードする場合にのみ設定します。URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">digest</codeph> パロパティが、他のメソッドで設定済みである場合は、IOError 例外がスローされます。</p>
     
     </apiDesc><example conref="examples\URLRequest_digest.as" class="- topic/example "> 次の例では、キャッシュにリモートファイルをロードしています。ロードの最後で、バイト配列に（署名付きファイルでない）実際のファイルが格納されます。 この例では、<codeph class="+ topic/ph pr-d/codeph ">loadBytes()</codeph> を呼び出すことでロード操作を完了しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 
var myURLReq:URLRequest = new URLRequest();
myURLReq.url = "http://yourdomain/users/jdoe/test01/_rsc/Automated/AssetCaching_rsc/test01/rsl.swz";
myURLReq.digest = "3B0AA28C7A990385E044D80F5637FB036317BB41E044D80F5637FB036317BB41";
var myURLLoader:URLLoader = new URLLoader();
myURLLoader.dataFormat = URLLoaderDataFormat.BINARY;
myURLLoader.addEventListener("complete", onC);

myURLLoad.load(myURLReq);

function onC(e) {
    var someLoader:Loader = new Loader();
    addChild(someLoader);
    someLoader.loadBytes((ByteArray)(myURLLoad.data)); 
}

</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.net:URLRequest:followRedirects:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">followRedirects</apiName><shortdesc class="- topic/shortdesc ">
    リダイレクトを続行するか（true）、続行しないか（false）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
    
    </apiDefaultValue><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">リダイレクトを続行するかどうかを指定します。
    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    リダイレクトを続行するか（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）、続行しないか（<codeph class="+ topic/ph pr-d/codeph ">false</codeph>）を指定します。
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b "/>注意：<codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph>、および <codeph class="+ topic/ph pr-d/codeph ">HTMLLoader.load()</codeph> の各メソッドは、<codeph class="+ topic/ph pr-d/codeph ">URLRequest.followRedirects</codeph> プロパティをサポートしていません。</p>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequestDefaults/followRedirects" class="- topic/link "><linktext class="- topic/linktext ">URLRequestDefaults.followRedirects</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:idleTimeout:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">idleTimeout</apiName><shortdesc class="- topic/shortdesc ">
	    この要求のアイドルタイムアウト値をミリ秒単位で指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
	    
	    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiDefaultValue>initialized from the URLRequestDefaults.idleTimeout property
	    
	    </apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	    この要求のアイドルタイムアウト値をミリ秒単位で指定します。
	    
	    <p class="- topic/p ">アイドルタイムアウトとは、接続が確立された後、要求が廃棄されるまでの間、クライアントがサーバーからの応答を待機する時間です。</p>
	    
	    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b><codeph class="+ topic/ph pr-d/codeph ">HTMLLoader.load()</codeph> メソッドは <codeph class="+ topic/ph pr-d/codeph ">URLRequest.idleTimeout</codeph> プロパティをサポートしていません。HTMLLoader クラスは、このクラス自体の <codeph class="+ topic/ph pr-d/codeph ">idleTimeout</codeph> プロパティを定義します。</p>
	    
	    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequestDefaults/idleTimeout" class="- topic/link "><linktext class="- topic/linktext ">URLRequestDefaults.idleTimeout</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:manageCookies:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">manageCookies</apiName><shortdesc class="- topic/shortdesc ">
    HTTP プロトコルスタックでこの要求のクッキーを管理するかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
    
    </apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    HTTP プロトコルスタックでこの要求のクッキーを管理するかどうかを指定します。<codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合、cookie が要求に追加され、応答 cookie が記憶されます。<codeph class="+ topic/ph pr-d/codeph ">false</codeph> の場合、cookie は要求に追加されず 応答 cookie は記憶されませんが、ユーザーは直接ヘッダーを操作することで cookie 自体を管理できます。<i class="+ topic/ph hi-d/i "/><i class="+ topic/ph hi-d/i "/><b class="+ topic/ph hi-d/b ">注意：</b>Windows では、<codeph class="+ topic/ph pr-d/codeph ">manageCookies</codeph> が <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定されている場合、URL 要求に手動で cookie を追加することはできません。他のオペレーティングシステムでは、<codeph class="+ topic/ph pr-d/codeph ">manageCookies</codeph> が <codeph class="+ topic/ph pr-d/codeph ">true</codeph>、<codeph class="+ topic/ph pr-d/codeph ">false</codeph> のどちらに設定されているかに関わらず、要求に cookie を追加することができます。cookie の追加が許可されている場合、cookie のデータを格納している <codeph class="+ topic/ph pr-d/codeph ">URLRequestHeader</codeph> オブジェクトを <codeph class="+ topic/ph pr-d/codeph ">requestHeaders</codeph> 配列に手動で追加することで、要求に cookie を追加できます。
    
    <p class="- topic/p ">Mac OS では、cookie は Safari と共有されます。Mac OS でクッキーを消去するには：</p>
    
    <ol class="- topic/ol "><li class="- topic/li ">Safari を開きます。</li><li class="- topic/li ">Safari／Preferences を選択し、Security パネルをクリックします。</li><li class="- topic/li ">「Show Cookies」ボタンをクリックします。</li><li class="- topic/li ">「Remove All」ボタンをクリックします。</li></ol>
    
    <p class="- topic/p ">Windows でクッキーを消去するには：</p>
    
    <ol class="- topic/ol "><li class="- topic/li ">インターネットのプロパティコントロールパネルを開き、「全般」タブをクリックします。</li><li class="- topic/li ">「Cookie の削除」ボタンをクリックします。 </li></ol>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequestDefaults/manageCookies" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLRequestDefaults.manageCookies</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:method:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">method</apiName><shortdesc class="- topic/shortdesc ">
     HTTP フォーム送信メソッドを制御します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">value</codeph> パラメーターが <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.GET</codeph> でも <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph> でもない場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiDefaultValue>URLRequestMethod.GET
     
     </apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     HTTP フォーム送信メソッドを制御します。
     
     <p class="- topic/p "><ph class="- topic/ph ">（ブラウザーの）Flash Player で実行される SWF コンテンツの場合、このプロパティは GET 操作または POST 操作に制限されます。有効な値は <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.GET</codeph> または <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph> です。</ph></p>
     
     <p class="- topic/p "><ph class="- topic/ph ">Adobe AIR で実行されるコンテンツの場合、</ph>そのコンテンツがアプリケーションセキュリティボックス内にあれば、どのストリング値も使用可能です。それ以外の場合、<ph class="- topic/ph ">コンテンツが Flash Player で実行されるときと同様に、</ph>GET 操作または POST 操作の使用に制限されます。</p>
     
     <p class="- topic/p "><ph class="- topic/ph ">Adobe AIR で実行中のコンテンツの場合、</ph><codeph class="+ topic/ph pr-d/codeph ">navigateToURL()</codeph> 関数を使用すると、ランタイムでは、POST メソッドを使用する URLRequest（<codeph class="+ topic/ph pr-d/codeph ">method</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph> に設定されているもの）は、GET メソッドとして処理されます。</p>
     
     <p class="- topic/p "><ph class="- topic/ph "><b class="+ topic/ph hi-d/b ">注意：</b>Flash Player で実行されているときに、参照されるフォームに本文がない場合、Flash Player では自動的に GET 操作が使用されます。これは、メソッドが <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph> に設定されている場合でも同じです。このため、正しいメソッドが使用されるように、ダミーの body を必ず含めることをお勧めします。</ph></p>
     
     </apiDesc><example conref="examples\URLRequest_method.as" class="- topic/example "> 次の例では、新しいブラウザーウィンドウで http://www.[yourDomain].com/application.jsp でホストされるリモートアプリケーションを開き、URLVariables オブジェクトで捕捉したユーザーセッションに関するデータをアプリケーションに渡します。<codeph class="+ topic/ph pr-d/codeph ">URLRequest.method</codeph> プロパティの値を、<codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph> に明示的に設定します。
 <p class="- topic/p ">この例のハイライトは、次のとおりです。</p>
 <ol class="- topic/ol "><li class="- topic/li ">コンストラクター関数が <codeph class="+ topic/ph pr-d/codeph ">request</codeph> という名前の URLRequest インスタンスを作成します。このとき、リモートアプリケーションの URL をパラメーターとして取ります。</li><li class="- topic/li ">URLVariables オブジェクトが作成され、その 2 つのプロパティに値が割り当てられます。</li><li class="- topic/li ">URLVariables オブジェクトが URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティに割り当てられます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">URLRequest.method</codeph> プロパティの値が <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph> に設定されます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">navigateToURL</codeph> を呼び出して、リモートアプリケーションの URL 用の新しいブラウザーウィンドウを開きます。</li></ol>
 <p class="- topic/p "> <b class="+ topic/ph hi-d/b ">注意：</b>この例を実行するには、この例のリモートアプリケーションの URL を実際の URL に置き換える必要があります。さらに、URLVariables オブジェクトの Flash Player で捕捉した情報を処理するためのサーバーコードが必要です。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.net.URLRequestMethod;
    import flash.net.URLVariables;

    public class URLRequest_method extends Sprite {

        public function URLRequest_method() {
            var url:String = "http://www.[yourDomain].com/application.jsp";
            var request:URLRequest = new URLRequest(url);
            
            var variables:URLVariables = new URLVariables();
            variables.exampleSessionId = new Date().getTime();
            variables.exampleUserLabel = "guest";
            request.data = variables;
            request.method = URLRequestMethod.POST;
            
            navigateToURL(request);
        }
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequestMethod" class="- topic/link "><linktext class="- topic/linktext ">URLRequestMethod class</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:requestHeaders:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">requestHeaders</apiName><shortdesc class="- topic/shortdesc ">
     HTTP リクエストヘッダーの配列が HTTP リクエストに追加されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     HTTP リクエストヘッダーの配列が HTTP リクエストに追加されます。配列は URLRequestHeader オブジェクトから構成されます。配列の各オブジェクトは、次のように名前ストリングと値ストリングを含む URLRequestHeader オブジェクトである必要があります。
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var rhArray:Array = new Array(new URLRequestHeader("Content-Type", "text/html"));
     </codeblock>
     
     <p class="- topic/p "><ph class="- topic/ph ">Flash Player および AIR ランタイム</ph>には、リクエストヘッダーに一定の制限があります。詳しくは、URLRequestHeader クラスの説明を参照してください。</p>
     
     <p class="- topic/p ">URLRequest パラメーターを受け取るメッソドすべてが <codeph class="+ topic/ph pr-d/codeph ">requestHeaders</codeph> プロパティをサポートしているわけではありません。呼び出すメソッドのマニュアルを参照してください。例えば、<codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> メソッドおよび <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> メソッドは、<codeph class="+ topic/ph pr-d/codeph ">URLRequest.requestHeaders</codeph> プロパティをサポートしていません。</p>
     <p class="- topic/p ">ブラウザーの制限により、カスタム HTTP リクエストヘッダーは <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> リクエストだけをサポートし、<codeph class="+ topic/ph pr-d/codeph ">GET</codeph> リクエストはサポートしません。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequestHeader" class="- topic/link "><linktext class="- topic/linktext ">URLRequestHeader</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:url:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">url</apiName><shortdesc class="- topic/shortdesc ">
     リクエストされる URL です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     リクエストされる URL です。
     
     <p class="- topic/p ">Uniform Resource Locator 仕様で危険と説明されている文字（http://www.faqs.org/rfcs/rfc1738.html を参照）や、URLRequest オブジェクトの URL スキームで予約されている文字（予約されている目的以外に使用する場合）は、必ずエンコードしてください。例えば、パーセント（%）記号の場合は <codeph class="+ topic/ph pr-d/codeph ">"%25"</codeph> を、番号記号の場合は <codeph class="+ topic/ph pr-d/codeph ">"%23"</codeph> を使用し、<codeph class="+ topic/ph pr-d/codeph ">"http://www.example.com/orderForm.cfm?item=%23B-3&amp;discount=50%25"</codeph> などと示します。</p>
     
      <p class="- topic/p ">デフォルトで、URL は呼び出し元のファイルと同じドメインにある必要があります。ただし、コンテンツが <ph class="- topic/ph ">Adobe AIR</ph> アプリケーションセキュリティボックスで実行中の場合を除きます。<ph class="- topic/ph ">異なるドメインからデータをロードする必要があるときは、データをホストするサーバーに URL ポリシーファイルを配置します。</ph>詳細については、URLRequest クラスの説明を参照してください。</p>
     
     <p class="- topic/p "><ph class="- topic/ph ">Adobe AIR で実行されるコンテンツの場合、アプリケーションセキュリティサンドボックス内のファイル</ph>（AIR アプリケーションと共にインストールされるファイル）は、次の URL スキームのいずれかを使用して URL にアクセスできます。</p>
     
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">http</codeph> および <codeph class="+ topic/ph pr-d/codeph ">https</codeph> </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">file</codeph> </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">app-storage</codeph> </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">app</codeph> </li></ul>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>IPv6（Internet Protocol version 6）は<ph class="- topic/ph "> AIR および Flash Player 9.0.115.0 以降のバージョン</ph>でサポートされています。IPv6 は、128 ビットのアドレスをサポートするインターネットプロトコルのバージョンです（32 ビットのアドレスをサポートする、以前の IPv4 プロトコルの機能を向上したものです）。ネットワークインターフェイスでの IPv6 のアクティブ化が必要になる場合があります。詳細については、データをホストするオペレーティングシステムのヘルプを参照してください。ホストしているシステムで IPv6 がサポートされる場合、<ph class="- topic/ph ">次に示すように</ph>、角括弧（[]）内に URL の IPv6 数値リテラルアドレスを指定できます。 </p>
     
     <ph class="- topic/ph ">
     <pre xml:space="preserve" class="- topic/pre ">
     rtmp://[2001:db8:ccc3:ffff:0:444d:555e:666f]:1935/test
     </pre>
     </ph>
     
     </apiDesc><example conref="examples\Loader_load_url.as" class="- topic/example "> 次の例は、ActionScript 3.0 の Loader クラスを使用して、イメージを動的にロードする方法を示しています。<xref href="http://actionscriptexamples.com/2008/03/02/dynamically-loading-an-image-in-actionscript-20-and-actionscript-30/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref> によって提供される例。 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var url:String = "http://www.helpexamples.com/flash/images/image2.jpg";
var urlRequest:URLRequest = new URLRequest(url);
var loader:Loader = new Loader();
loader.load(urlRequest);
addChild(loader);
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.net:URLRequest:useCache:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">useCache</apiName><shortdesc class="- topic/shortdesc ">
    この URLRequest がデータを取得する前に、ローカルキャッシュを参照するかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
    
    </apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    この URLRequest がデータを取得する前に、ローカルキャッシュを参照するかどうかを指定します。
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b "/>注意：<codeph class="+ topic/ph pr-d/codeph ">HTMLLoader.load()</codeph> メソッドは <codeph class="+ topic/ph pr-d/codeph ">URLRequest.useCache</codeph> プロパティをサポートしていません。</p>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequestDefaults/useCache" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLRequestDefaults.useCache</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:userAgent:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">userAgent</apiName><shortdesc class="- topic/shortdesc ">
    HTTP 要求で使用されるユーザーエージェントストリングを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    HTTP 要求で使用されるユーザーエージェントストリングを指定します。
    
    <p class="- topic/p ">デフォルト値は、Flash Player で使用されるユーザーエージェントストリングと同じです。これは、Macintosh、Linux、Windows で異なります。</p>
    
    <p class="- topic/p "><i class="+ topic/ph hi-d/i "/>注意：HTMLLoader オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> メソッドで URLRequest オブジェクトが使用される場合、このプロパティはユーザーエージェントストリングに影響しません。HTMLLoader オブジェクトに対しユーザーエージェントストリングを設定するには、HTMLLoader オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">userAgent</codeph> プロパティを設定するか、静的な <codeph class="+ topic/ph pr-d/codeph ">URLRequestDefaults.userAgent</codeph> プロパティを設定します。</p>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequestDefaults/userAgent" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLRequestDefaults.userAgent</linktext></link><link href="../../flash/html/HTMLLoader.html#userAgent" class="- topic/link "><linktext class="- topic/linktext ">flash.html.HTMLLoader.userAgent</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:InterfaceAddress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">InterfaceAddress</apiName><shortdesc class="- topic/shortdesc ">
 InterfaceAddress クラスは、ネットワークインターフェイスアドレスのプロパティをレポートします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 InterfaceAddress クラスは、ネットワークインターフェイスアドレスのプロパティをレポートします。
 
 </apiDesc><example conref="examples\InterfaceAddressExample.as" class="- topic/example "/></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetworkInfo" class="- topic/link "><linktext class="- topic/linktext ">NetworkInfo クラス</linktext></link><link href="flash.net.xml#NetworkInterface" class="- topic/link "><linktext class="- topic/linktext ">NetworkInterface クラス</linktext></link></related-links><apiValue id="flash.net:InterfaceAddress:address:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">address</apiName><shortdesc class="- topic/shortdesc ">
     Internet Protocol（IP）アドレスです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Internet Protocol（IP）アドレスです。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:InterfaceAddress:broadcast:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">broadcast</apiName><shortdesc class="- topic/shortdesc ">
     ローカルネットワークセグメントのブロードキャストアドレス。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ローカルネットワークセグメントのブロードキャストアドレス。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:InterfaceAddress:ipVersion:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ipVersion</apiName><shortdesc class="- topic/shortdesc ">
	 IP アドレスの種類（IPv4 または IPv6）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 IP アドレスの種類（IPv4 または IPv6）です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:InterfaceAddress:prefixLength:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">prefixLength</apiName><shortdesc class="- topic/shortdesc ">
     このアドレスの接頭辞の長さです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このアドレスの接頭辞の長さです。 
     
     <p class="- topic/p ">IPv4 アドレスの場合、これはサブネットマスクです。8（255.0.0.0）、16（255.255.0.0）および 24（255.255.255.0）など、IPv4 値のプレフィックス長の例。128（::1/128）および 32（2001:db8::/32）など、IPv6 値のプレフィックス長の例。 </p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このアドレスのプレフィックス長が利用できない場合、<codeph class="+ topic/ph pr-d/codeph ">prefixLength</codeph> の値は <codeph class="+ topic/ph pr-d/codeph ">-1</codeph> です。プレフィックス値は、常に特定のクライアントコンピューターのネットワーク実装によって返されるとは限りません。</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:GroupSpecifier" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">GroupSpecifier</apiName><shortdesc class="- topic/shortdesc ">
     GroupSpecifier クラスは、NetStream および NetGroup コンストラクターに渡される不透明な groupspec ストリングを構築するために使用されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">NetStream および NetGroup コンストラクターに渡される不透明な groupspec ストリングを構築します。
     </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     GroupSpecifier クラスは、NetStream および NetGroup コンストラクターに渡される不透明<codeph class="+ topic/ph pr-d/codeph "/>な groupspec ストリングを構築するために使用されます。<codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> は、<codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> を使用するメンバーの機能、制限、および権限を含めた RTMFP ピアーツーピアーグループを指定します。
     
     <p class="- topic/p ">デフォルトではすべての機能が無効で、ピアーツーピアー接続が許可されています。</p>
     
     </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup</linktext></link><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream</linktext></link></related-links><apiConstructor id="flash.net:GroupSpecifier:GroupSpecifier" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">GroupSpecifier</apiName><shortdesc class="- topic/shortdesc ">
         新しい GroupSpecifier オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">name</codeph> が空または <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合。
         
         </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">すべてのメンバーが同意するグループの名前です。
         
         </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         新しい GroupSpecifier オブジェクトを作成します。デフォルトではすべての機能が無効で、ピアーツーピアー接続が許可されています。
         
         </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup</linktext></link><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:GroupSpecifier:addBootstrapPeer" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addBootstrapPeer</apiName><shortdesc class="- topic/shortdesc ">
         関連付けられた NetStream または NetGroup が指定された peerID への初期ネイバー接続を確立できるようにします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">peerID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">初期ネイバー接続を確立する peerID は、ピアーツーピアーメッシュへのブートストラップにする必要があります。
         
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         関連付けられた NetStream または NetGroup が指定された peerID への初期ネイバー接続を確立できるようにします。
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/encodeBootstrapPeerIDSpec()" class="- topic/link "><linktext class="- topic/linktext ">encodeBootstrapPeerIDSpec()</linktext></link><link href="flash.net.xml#NetGroup/addMemberHint()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.addMemberHint()</linktext></link><link href="flash.net.xml#NetGroup/addNeighbor()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.addNeighbor()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:GroupSpecifier:addIPMulticastAddress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addIPMulticastAddress</apiName><shortdesc class="- topic/shortdesc ">
         関連付けられた NetStream または NetGroup が指定された IP マルチキャストグループに参加して、指定された UDP ポートを待機するようにします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">address</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">参加する IPv4または IPv6 マルチキャストグループのアドレスを指定するストリングの後には、必要に応じて、コロン（「:」）および UDP ポート番号が付きます。IPv6 アドレスとポートを指定する場合、IPv6 アドレスは角括弧で囲む必要があります<i class="+ topic/ph hi-d/i "/>。例：<codeph class="+ topic/ph pr-d/codeph ">"224.0.0.254"</codeph>、 <codeph class="+ topic/ph pr-d/codeph ">"224.0.0.254:30000"</codeph>、 <codeph class="+ topic/ph pr-d/codeph ">"ff03::ffff"</codeph>、 <codeph class="+ topic/ph pr-d/codeph ">"[ff03::ffff]:30000"</codeph>。
         
         </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">port</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">IP マルチキャストデータグラムを受信する UDP ポート。<codeph class="+ topic/ph pr-d/codeph ">port</codeph> が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、UDP ポートは、<codeph class="+ topic/ph pr-d/codeph ">address</codeph> で指定する必要があります<i class="+ topic/ph hi-d/i "/>。<codeph class="+ topic/ph pr-d/codeph ">null</codeph> でない場合、UDP ポートを <codeph class="+ topic/ph pr-d/codeph ">address</codeph> で指定しないでください<i class="+ topic/ph hi-d/i "/>。
         
         </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">source</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">null</codeph> でない場合は、ソース固有のマルチキャスト（SSM）のソース IP アドレスを指定するストリングです。
         
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         関連付けられた NetStream または NetGroup が指定された IP マルチキャストグループに参加して、指定された UDP ポートを待機するようにします。
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/encodeIPMulticastAddressSpec()" class="- topic/link "><linktext class="- topic/linktext ">encodeIPMulticastAddressSpec()</linktext></link><link href="flash.net.xml#GroupSpecifier/ipMulticastMemberUpdatesEnabled" class="- topic/link "><linktext class="- topic/linktext ">ipMulticastMemberUpdatesEnabled</linktext></link></related-links></apiOperation><apiOperation id="flash.net:GroupSpecifier:authorizations" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">authorizations</apiName><shortdesc class="- topic/shortdesc ">
         IP マルチキャストパブリッシングおよびアップロード用のパスワードを表すストリングを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         IP マルチキャストパブリッシングおよびアップロード用のパスワードを表すストリングを返します。権限のない <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> にストリングを付加して、パスワードを設定されている機能を有効にすることができます。
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/encodePostingAuthorization()" class="- topic/link "><linktext class="- topic/linktext ">encodePostingAuthorization()</linktext></link><link href="flash.net.xml#GroupSpecifier/encodePublishAuthorization()" class="- topic/link "><linktext class="- topic/linktext ">encodePublishAuthorization()</linktext></link><link href="flash.net.xml#GroupSpecifier/groupspecWithAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">groupspecWithAuthorizations()</linktext></link><link href="flash.net.xml#GroupSpecifier/groupspecWithoutAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">groupspecWithoutAuthorizations()</linktext></link><link href="flash.net.xml#GroupSpecifier/setPostingPassword()" class="- topic/link "><linktext class="- topic/linktext ">setPostingPassword()</linktext></link><link href="flash.net.xml#GroupSpecifier/setPublishPassword()" class="- topic/link "><linktext class="- topic/linktext ">setPublishPassword()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:GroupSpecifier:encodeBootstrapPeerIDSpec" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">encodeBootstrapPeerIDSpec</apiName><shortdesc class="- topic/shortdesc ">
         ブートストラップ peerID を表すストリングをエンコードして返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">peerID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">初期ネイバー接続を確立する peerID は、ピアーツーピアーメッシュへのブートストラップにする必要があります。
         
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         ブートストラップ peerID を表すストリングをエンコードして返します。<codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> にストリングを付加すると、関連 NetStream または NetGroup が指定された peerID への初期ネイバー接続を行います。
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/addBootstrapPeer()" class="- topic/link "><linktext class="- topic/linktext ">addBootstrapPeer()</linktext></link><link href="flash.net.xml#NetGroup/addMemberHint()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.addMemberHint()</linktext></link><link href="flash.net.xml#NetGroup/addNeighbor()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.addNeighbor()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:GroupSpecifier:encodeIPMulticastAddressSpec" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">encodeIPMulticastAddressSpec</apiName><shortdesc class="- topic/shortdesc ">
         IP マルチキャストソケットアドレスを表すストリングをエンコードして返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">address</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">参加する IPv4 または IPv6 マルチキャストグループのアドレスを指定するストリングの後には、必要に応じて、コロン（「:」）および UDP ポート番号が付きます。IPv6 アドレスと<i class="+ topic/ph hi-d/i "/>ポートを指定する場合、IPv6 アドレスは角括弧で囲む必要があります<i class="+ topic/ph hi-d/i "/>。例：<codeph class="+ topic/ph pr-d/codeph ">"224.0.0.254"</codeph>、 <codeph class="+ topic/ph pr-d/codeph ">"224.0.0.254:30000"</codeph>、 <codeph class="+ topic/ph pr-d/codeph ">"ff03::ffff"</codeph>、 <codeph class="+ topic/ph pr-d/codeph ">"[ff03::ffff]:30000"</codeph>。
         
         </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">port</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">IP マルチキャストデータグラムを受信する UDP ポート。<codeph class="+ topic/ph pr-d/codeph ">port</codeph> が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、UDP ポートは、<codeph class="+ topic/ph pr-d/codeph ">address</codeph> で指定する必要があります<i class="+ topic/ph hi-d/i "/>。<codeph class="+ topic/ph pr-d/codeph ">null</codeph> でない場合、UDP ポートを <codeph class="+ topic/ph pr-d/codeph ">address</codeph> で指定しないでください<i class="+ topic/ph hi-d/i "/>。
         
         </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">source</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">null</codeph> でない場合は、ソース固有のマルチキャスト（SSM）のソース IP アドレスを指定するストリングです。
         
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         IP マルチキャストソケットアドレスを表すストリングをエンコードして返します。<codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> にストリングを付加すると、関連付けられている NetStream または NetGroup が指定された IP マルチキャストグループに参加し、指定された UDP ポートを待機します。
         
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/addIPMulticastAddress()" class="- topic/link "><linktext class="- topic/linktext ">addIPMulticastAddress()</linktext></link><link href="flash.net.xml#GroupSpecifier/ipMulticastMemberUpdatesEnabled" class="- topic/link "><linktext class="- topic/linktext ">ipMulticastMemberUpdatesEnabled</linktext></link></related-links></apiOperation><apiOperation id="flash.net:GroupSpecifier:encodePostingAuthorization" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">encodePostingAuthorization</apiName><shortdesc class="- topic/shortdesc ">
         アップロード用パスワードを表すストリングをエンコードして返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">password</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">エンコードするパスワードは、<codeph class="+ topic/ph pr-d/codeph ">NetGroup.post()</codeph> を有効にするアップロード用パスワードと一致する必要があります（パスワードが設定されている場合）。
         
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         アップロード用パスワードを表すストリングをエンコードして返します。アップロードがパスワード保護されている場合、アップロードできるようにするために <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> にストリングを連結します。
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/groupspecWithoutAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">groupspecWithoutAuthorizations()</linktext></link><link href="flash.net.xml#GroupSpecifier/setPostingPassword()" class="- topic/link "><linktext class="- topic/linktext ">setPostingPassword()</linktext></link><link href="flash.net.xml#NetGroup/post()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.post()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:GroupSpecifier:encodePublishAuthorization" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">encodePublishAuthorization</apiName><shortdesc class="- topic/shortdesc ">
         マルチキャストパブリッシング用パスワードを表すストリングをエンコードして返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">password</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">エンコードするパスワードは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.publish()</codeph> を有効にするパブリッシング用パスワードと一致する必要があります（パスワードが設定されている場合）。
         
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         マルチキャストパブリッシング用パスワードを表すストリングをエンコードして返します。マルチキャストパブリッシングがパスワード保護されている場合、パブリッシングできるようにするために <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> にストリングを連結します。
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/groupspecWithoutAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">groupspecWithoutAuthorizations()</linktext></link><link href="flash.net.xml#GroupSpecifier/setPublishPassword()" class="- topic/link "><linktext class="- topic/linktext ">setPublishPassword()</linktext></link><link href="flash.net.xml#NetStream/publish()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.publish()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:GroupSpecifier:groupspecWithAuthorizations" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">groupspecWithAuthorizations</apiName><shortdesc class="- topic/shortdesc ">
         NetStream および NetGroup コンストラクターに渡すことができる権限を含めた不透明な groupspec ストリングを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         NetStream および NetGroup コンストラクターに渡すことができる権限を含めた不透明な <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> ストリングを返します。
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/authorizations()" class="- topic/link "><linktext class="- topic/linktext ">authorizations()</linktext></link><link href="flash.net.xml#GroupSpecifier/groupspecWithoutAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">groupspecWithoutAuthorizations()</linktext></link><link href="flash.net.xml#GroupSpecifier/setPostingPassword()" class="- topic/link "><linktext class="- topic/linktext ">setPostingPassword()</linktext></link><link href="flash.net.xml#GroupSpecifier/setPublishPassword()" class="- topic/link "><linktext class="- topic/linktext ">setPublishPassword()</linktext></link><link href="flash.net.xml#GroupSpecifier/toString()" class="- topic/link "><linktext class="- topic/linktext ">toString()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:GroupSpecifier:groupspecWithoutAuthorizations" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">groupspecWithoutAuthorizations</apiName><shortdesc class="- topic/shortdesc ">
         NetStream および NetGroup コンストラクターに渡すことができる権限を含まない不透明な groupspec ストリングを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">NetStream および NetGroup コンストラクターに渡すことができる権限を含まない不透明な groupspec ストリングを返します。
         </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         NetStream および NetGroup コンストラクターに渡すことができる権限を含まない不透明な <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> ストリングを返します。
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/authorizations()" class="- topic/link "><linktext class="- topic/linktext ">authorizations()</linktext></link><link href="flash.net.xml#GroupSpecifier/encodePostingAuthorization()" class="- topic/link "><linktext class="- topic/linktext ">encodePostingAuthorization()</linktext></link><link href="flash.net.xml#GroupSpecifier/encodePublishAuthorization()" class="- topic/link "><linktext class="- topic/linktext ">encodePublishAuthorization()</linktext></link><link href="flash.net.xml#GroupSpecifier/groupspecWithAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">groupspecWithAuthorizations()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:GroupSpecifier:makeUnique" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">makeUnique</apiName><shortdesc class="- topic/shortdesc ">
         groupspec を一意なものにするために強力な疑似乱数タグを追加します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">groupspec を一意なものにするために強力な疑似乱数タグを追加します。
         </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> を一意なものにするために強力な疑似乱数タグを追加します。次に、グループの他の潜在的なメンバーが問題なくグループに参加する場合、不透明な <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> ストリングをこれらのメンバーに逐語的に渡す必要があります。
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:GroupSpecifier:setPostingPassword" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setPostingPassword</apiName><shortdesc class="- topic/shortdesc ">
         NetGroup にアップロードするためパスワードが必要かどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">password</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">NetGroup.post()</codeph> を使用するために提供する必要があるパスワードです。 <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、アップロードするためにパスワードは不要です。
         
         </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">salt</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">推測を難しくするために、パスワードのハッシュを変更します。セキュリティを強力にするためには、このパラメーターをランダムな値に設定してください。
         
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         NetGroup にアップロードするためパスワードが必要かどうかを指定します。
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/encodePostingAuthorization()" class="- topic/link "><linktext class="- topic/linktext ">encodePostingAuthorization()</linktext></link><link href="flash.net.xml#GroupSpecifier/groupspecWithAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">groupspecWithAuthorizations()</linktext></link><link href="flash.net.xml#GroupSpecifier/groupspecWithoutAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">groupspecWithoutAuthorizations()</linktext></link><link href="flash.net.xml#NetGroup/post()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.post()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:GroupSpecifier:setPublishPassword" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setPublishPassword</apiName><shortdesc class="- topic/shortdesc ">
         NetStream にマルチキャストストリームをパブリッシュするためにパスワードが必要かどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">password</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">NetStream.publish()</codeph> を使用するために提供する必要があるパスワードです。 <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、パブリッシュするためにパスワードは不要です。
         
         </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">salt</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">推測を難しくするために、パスワードのハッシュを変更します。セキュリティを強力にするためには、このパラメーターをランダムな値に設定してください。
         
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         NetStream にマルチキャストストリームをパブリッシュするためにパスワードが必要かどうかを指定します。
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/encodePublishAuthorization()" class="- topic/link "><linktext class="- topic/linktext ">encodePublishAuthorization()</linktext></link><link href="flash.net.xml#GroupSpecifier/groupspecWithAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">groupspecWithAuthorizations()</linktext></link><link href="flash.net.xml#GroupSpecifier/groupspecWithoutAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">groupspecWithoutAuthorizations()</linktext></link><link href="flash.net.xml#NetStream/publish()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.publish()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:GroupSpecifier:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
         groupspecWithAuthorizations() メソッドと同じです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">groupspecWithAuthorizations() メソッドと同じです。
         </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         <codeph class="+ topic/ph pr-d/codeph ">groupspecWithAuthorizations()</codeph> メソッドと同じです。NetStream および NetGroup コンストラクターに渡すことができる、権限を含めた不透明な <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> ストリングを返す Convenience メソッド。
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/groupspecWithAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">groupspecWithAuthorizations()</linktext></link></related-links></apiOperation><apiValue id="flash.net:GroupSpecifier:ipMulticastMemberUpdatesEnabled:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ipMulticastMemberUpdatesEnabled</apiName><shortdesc class="- topic/shortdesc ">
         グループメンバーシップに関する情報を IP マルチキャストソケットで交換できるかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         グループメンバーシップに関する情報を IP マルチキャストソケットで交換できるかどうかを指定します。IP マルチキャストサーバーでグループメンバーシップの更新を送信して、P2P メッシュまたは修復パーティションをブートストラップすることができます。ピアーを使用して LAN 上でメンバーシップの更新を送信し、LAN P2P メッシュをブートストラップし、他の LAN 上のネイバーが存在するグローバルメッシュ内のLAN 上のネイバーに通知することができます。これらの更新により、P2P のパフォーマンスを高めることができます。
         
         </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/addIPMulticastAddress()" class="- topic/link "><linktext class="- topic/linktext ">addIPMulticastAddress()</linktext></link><link href="flash.net.xml#GroupSpecifier/peerToPeerDisabled" class="- topic/link "><linktext class="- topic/linktext ">peerToPeerDisabled</linktext></link></related-links></apiValue><apiValue id="flash.net:GroupSpecifier:multicastEnabled:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">multicastEnabled</apiName><shortdesc class="- topic/shortdesc ">
         NetGroup でストリーミングを有効にするかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         NetGroup でストリーミングを有効にするかどうかを指定します。ストリーミングに使用するメソッドは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.publish()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph>、および <codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> です。 デフォルトでは、このプロパティは FALSE （ストリーミングは無効）です。
         
         </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/setPublishPassword()" class="- topic/link "><linktext class="- topic/linktext ">setPublishPassword()</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.play2()</linktext></link><link href="flash.net.xml#NetStream/publish()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.publish()</linktext></link></related-links></apiValue><apiValue id="flash.net:GroupSpecifier:objectReplicationEnabled:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">objectReplicationEnabled</apiName><shortdesc class="- topic/shortdesc ">
         NetGroup でオブジェクトレプリケーションを有効にするかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         NetGroup でオブジェクトレプリケーションを有効にするかどうかを指定します。デフォルトでは、このプロパティは FALSE（オブジェクトレプリケーションは無効）になっています。
         
         </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/addHaveObjects()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.addHaveObjects()</linktext></link><link href="flash.net.xml#NetGroup/addWantObjects()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.addWantObjects()</linktext></link><link href="flash.net.xml#NetGroup/denyRequestedObject()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.denyRequestedObject()</linktext></link><link href="flash.net.xml#NetGroup/removeHaveObjects()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.removeHaveObjects()</linktext></link><link href="flash.net.xml#NetGroup/removeWantObjects()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.removeWantObjects()</linktext></link><link href="flash.net.xml#NetGroup/writeRequestedObject()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.writeRequestedObject()</linktext></link></related-links></apiValue><apiValue id="flash.net:GroupSpecifier:peerToPeerDisabled:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">peerToPeerDisabled</apiName><shortdesc class="- topic/shortdesc ">
         NetGroup または NetStream でピアーツーピアー接続を無効にするかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         NetGroup または NetStream でピアーツーピアー接続を無効にするかどうかを指定します。デフォルトでは、このプロパティは FALSE （P2P 接続が有効）です。
         
         <p class="- topic/p ">P2P 接続が無効の場合（このプロパティを TRUE に設定）、P2P 警告ダイアログボックスが表示されません。この場合、ネイバー接続を確立することができず、グループメンバーがアップストリーム帯域幅を使用できません。このようにして P2P 接続を無効にすることは、通常、マルチキャストストリームを純粋な IP マルチキャスト経由で受信する場合にのみ有用です。</p>
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:GroupSpecifier:postingEnabled:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">postingEnabled</apiName><shortdesc class="- topic/shortdesc ">
         NetGroup でアップロードを有効にするかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         NetGroup でアップロードを有効にするかどうかを指定します。デフォルトでは、このプロパティは FALSE （アップロードが無効になっている）です。
         
         </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/post()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.post()</linktext></link></related-links></apiValue><apiValue id="flash.net:GroupSpecifier:routingEnabled:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">routingEnabled</apiName><shortdesc class="- topic/shortdesc ">
         NetGroup で転送メソッドを有効にするかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         NetGroup で転送メソッドを有効にするかどうかを指定します。デフォルトでは、このプロパティは FALSE（転送メソッドは無効）になっています。
         
         </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNearest()</linktext></link></related-links></apiValue><apiValue id="flash.net:GroupSpecifier:serverChannelEnabled:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">serverChannelEnabled</apiName><shortdesc class="- topic/shortdesc ">
         NetGroup のメンバーがサーバーへのチャンネルを開くことができるかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         NetGroup のメンバーがサーバーへのチャンネルを開くことができるかどうかを指定します。デフォルトでは、このプロパティは FALSE です。
         
         <p class="- topic/p ">サーバーがグループメンバーにサポート機能を提供するには、サーバーへのチャンネルを開く必要があります。サーバーの設定に応じて、サポート機能がこのチャンネル経由で提供されたり、提供されなかったりします。</p>
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:LocalConnection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">LocalConnection</apiName><shortdesc class="- topic/shortdesc ">
 LocalConnection クラスを使用すると、別の LocalConnection オブジェクトのメソッドを呼び出すことができる LocalConnection オブジェクトを作成できます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">LocalConnection
 
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 LocalConnection クラスを使用すると、別の LocalConnection オブジェクトのメソッドを呼び出すことができる LocalConnection オブジェクトを作成できます。 次の通信が可能です。
 
 <ul class="- topic/ul "><li class="- topic/li ">単一の SWF ファイル内での通信</li><li class="- topic/li ">複数の SWF ファイル間の通信</li><li class="- topic/li ">AIR アプリケーションのコンテンツ（SWF ベースまたは HTML ベース）間の通信</li><li class="- topic/li ">AIR アプリケーションのコンテンツ（SWF ベースまたは HTML ベース）とブラウザーで実行されている SWF コンテンツ間の通信</li></ul>
 
 <p class="- topic/p ">AIR プロファイルのサポート：<i class="+ topic/ph hi-d/i "/>この機能はすべてのデスクトップオペレーティングシステムおよびすべてのテレビ用 AIR デバイスでサポートされますが、モバイルデバイスではサポートされません。<codeph class="+ topic/ph pr-d/codeph ">LocalConnection.isSupported</codeph> プロパティを使用して、サポートされているかどうかを実行時にテストすることができます。複数のプロファイル間での API サポートについて詳しくは、<xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">AIR プロファイルのサポート</xref>を参照してください。</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>テレビ用 AIR デバイスでは、AIR アプリケーションの SWF ベースのコンテンツ間でのみ通信がサポートされます。</p>
 
 <p class="- topic/p ">ローカル接続では、SWF ファイル間のこの種の通信は <codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> または JavaScript を使用しなくても可能です。LocalConnection オブジェクトを使って通信できるのは、同じクライアントコンピューター上で実行中のファイル間だけです。ただし、これらは異なるアプリケーションで実行されていてもかまいません。例えば、ブラウザーで実行されているファイルと、Adobe AIR で実行されている SWF ファイルとの間で通信することができます。 </p>
 
 <p class="- topic/p ">ActionScript 3.0 で作成された LocalConnection オブジェクトは、ActionScript 1.0 または 2.0 で作成された LocalConnection オブジェクトと通信できます。また、その逆も可能です。ActionScript 1.0 または 2.0 で作成された LocalConnection オブジェクトは、ActionScript 3.0 で作成された LocalConnection オブジェクトと通信できます。Flasn Player では、このようなバージョンの異なる LocalConnection オブジェクト間の通信が自動的に処理されます。</p>
 
 <p class="- topic/p ">LocalConnection オブジェクトにコールバックメソッドを追加するには、次の 3 つの方法があります。</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">LocalConnection クラスのサブクラスを作成してメソッドを追加する方法</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">LocalConnection.client</codeph> プロパティを、メソッドを実装したオブジェクトに設定する方法</li><li class="- topic/li ">LocalConnection を拡張した動的なクラスを作成し、動的にメソッドを追加する方法</li></ul>
 
 <p class="- topic/p ">各ファイルで使用されるコマンドを確認することで、2 つのファイル間で通信を行うための LocalConnection オブジェクトの使用方法が理解しやすくなります。一方のファイルを<i class="+ topic/ph hi-d/i ">受信側</i>ファイルと呼びます。呼び出されるメソッドが含まれるファイルです。受信側ファイルには、LocalConnection オブジェクトと <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> メソッドの呼び出しが含まれている必要があります。もう一方のファイルを<i class="+ topic/ph hi-d/i ">送信側</i>ファイルと呼びます。メソッドを呼び出すファイルです。送信側ファイルには、もう 1 つの LocalConnection オブジェクトと <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> メソッドの呼び出しが含まれている必要があります。</p>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">send()</codeph> と <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> の使い方は、両方のファイルが同じドメインにある場合、予測可能なドメイン名を持つ異なるドメインにある場合、予測不可能または動的なドメイン名を持つ異なるドメインにある場合により異なります。次の段落では、上記の 3 つの場合それぞれについて、サンプルコードを使用して説明します。</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">同じドメインの場合</b>：この場合は、同じドメイン内の LocalConnection オブジェクト間だけで通信を許可します。同一ドメイン通信はデフォルトで許可されているので、これは LocalConnection オブジェクトの最も簡単な使用方法です。 同じドメインにある 2 つの ファイル間で通信を行う場合は、特別なセキュリティ対策を実装する必要はありません。<codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> パラメーターの値をそのまま <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> メソッドと <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> メソッドに渡すだけです。</p>
 
 <p class="- topic/p "><adobeimage alt="同じドメインからのロード" href="../../images/localconnection_samedomains.gif" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// receivingLC is in http://www.domain.com/receiving.swf
receivingLC.connect('myConnection');

// sendingLC is in http://www.domain.com/sending.swf
// myMethod() is defined in sending.swf
sendingLC.send('myConnection', 'myMethod');
</codeblock>
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">予測可能なドメイン名を持つ異なるドメインの場合</b>：異なるドメインに存在する 2 つの SWF ファイル間で通信を行う場合は、<codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> メソッドを呼び出して、2 つのドメイン間の通信を許可する必要があります。また、<codeph class="+ topic/ph pr-d/codeph ">send()</codeph> メソッドの接続名を、受信側 LocalConnection オブジェクトのドメイン名で修飾する必要があります。</p>
 
 <p class="- topic/p "><adobeimage alt="別個のドメインからのロード" href="../../images/localconnection_differentdomains.gif" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// receivingLC is in http://www.domain.com/receiving.swf
receivingLC.allowDomain('www.anotherdomain.com');
receivingLC.connect('myConnection');

// sendingLC is in http://www.anotherdomain.com/sending.swf
sendingLC.send('www.domain.com:myConnection', 'myMethod');
</codeblock>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">予測不可能なドメイン名を持つ異なるドメインの場合</b>：受信側の LocalConnection オブジェクトを含むファイルをドメイン間で移植しやすくしたい場合があります。<codeph class="+ topic/ph pr-d/codeph ">send()</codeph> メソッドでドメイン名を指定せずに受信側と送信側の LocalConnection オブジェクトが同じドメインにないことを Flash Player に認識させるには、<codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> 呼び出しと <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> 呼び出しの両方で、接続名の前にアンダースコア（_）を付けます。 2 つのドメイン間の通信を許可するには、<codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> メソッドを呼び出して、LocalConnection の呼び出しを許可するドメインを渡します。または、ワイルドカード（~~）を引数に渡して、すべてのドメインからの呼び出しを許可します。</p>
 
 <p class="- topic/p "><adobeimage alt="ドメイン名が不明のときのロード" href="../../images/localconnection_unknowndomains.gif" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// receivingLC is in http://www.domain.com/receiving.swf
receivingLC.allowDomain('~~');
receivingLC.connect('_myConnection');

// sendingLC is in http://www.anotherdomain.com/sending.swf
sendingLC.send('_myConnection', 'myMethod');
</codeblock>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Flash Player から AIR アプリケーション</b>：AIR アプリケーションサンドボックスで作成された LocalConnection オブジェクトでは特別なストリングが使用されます。これはドメイン名ではなく接続接頭辞だからです。ストリングのフォームは <codeph class="+ topic/ph pr-d/codeph ">app#appID.pubID</codeph> で、appID はアプリケーション ID、pubID はアプリケーションの発行者 ID です（発行者 ID は、AIR アプリケーションで発行者 ID が使用されている場合にのみ含めます）。例えば、AIR アプリケーションのアプリケーション ID が「com.example」で、発行者 ID がない場合は、<codeph class="+ topic/ph pr-d/codeph ">app#com.example:myConnection</codeph> をローカル接続ストリングとして使用できます。また、AIR アプリケーションでは <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> メソッドを呼び出して、呼び出し側 SWF ファイルの元のドメインで渡す必要があります。 </p>
 
 <p class="- topic/p "><adobeimage alt="Flash Player から AIR への接続" href="../../images/localconnection_flash2AIR.gif" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// receivingLC is an AIR application with app ID = com.example (and no publisher ID)
receivingLC.allowDomain('www.domain.com');
receivingLC.connect('myConnection');

// sendingLC is in http://www.domain.com/sending.swf
sendingLC.send('app#com.example:myConnection', 'myMethod');
</codeblock>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b> AIR アプリケーションが AIR アプリケーションサンドボックス外で SWF をロードする場合、その SWF とローカル接続を確立する際の規則は、Flash Player で実行されている SWF との接続を確立する規則と同じです。</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">AIR アプリケーションから Flash Player</b>：AIR アプリケーションが、Flash Player ランタイムで実行されている SWF と通信するときは、<codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> メソッドを呼び出して、AIR アプリケーションの接続接頭辞で渡すことで、この 2 つの間の通信を許可する必要があります。例えば、AIR アプリケーションのアプリケーション ID が「com.example」で、発行者 ID がない場合は、ストリング <codeph class="+ topic/ph pr-d/codeph ">app#com.example</codeph> を <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> メソッドに渡します。また、<codeph class="+ topic/ph pr-d/codeph ">send()</codeph> メソッドの接続名を、受信側 LocalConnection オブジェクトのドメイン名で修飾する必要もあります（ローカルファイルシステムからロードされた SWF ファイルのドメインとして「localhost」を使用します）。</p>
 
 <p class="- topic/p "><adobeimage alt="AIR から Flash Player への通信" href="../../images/localconnection_AIR2flash.gif" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// receivingLC is in http://www.domain.com/receiving.swf
receivingLC.allowDomain('app#com.example');
receivingLC.connect('myConnection');

// sendingLC is an AIR application with app ID = com.example (and no publisher ID)
sendingLC.send('www.domain.com:myConnection', 'myMethod');
</codeblock>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">AIR アプリケーションから他の AIR アプリケーション</b>：2 つの AIR アプリケーション間を通信するには、<codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> メソッドを呼び出して、送信側 AIR アプリケーションの接続接頭辞で渡すことで、この 2 つの間の通信を許可する必要があります。例えば、送信側アプリケーションのアプリケーション ID が「com.example」で、発行者 ID がない場合は、ストリング <codeph class="+ topic/ph pr-d/codeph ">app#com.example</codeph> を受信側アプリケーションの <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> メソッドに渡します。また、<codeph class="+ topic/ph pr-d/codeph ">send()</codeph> メソッドの接続名を、受信側 LocalConnection オブジェクトの接続接頭辞で修飾する必要もあります。</p>
 
 <p class="- topic/p "><adobeimage alt="AIR 間の通信" href="../../images/localconnection_AIR2AIR.gif" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// receivingLC is an AIR application with app ID = com.sample (and no publisher ID)
receivingLC.allowDomain('app#com.example');
receivingLC.connect('myConnection');

// sendingLC is an AIR application with app ID = com.example (and no publisher ID)
sendingLC.send('app#com.sample:myConnection', 'myMethod');
</codeblock>
 
 <p class="- topic/p ">LocalConnection オブジェクトを使用して、1 つのファイル内でデータを送受信することもできますが、これは一般的な方法ではありません。</p>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">send()</codeph> メソッドと <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> メソッドの詳細については、<codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">LocalConnection.send()</codeph> エントリおよび <codeph class="+ topic/ph pr-d/codeph ">LocalConnection.connect()</codeph> エントリ）の説明を参照してください。また、<codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> エントリおよび <codeph class="+ topic/ph pr-d/codeph ">domain</codeph> エントリも参照してください。</p>
 
 </apiDesc><example conref="examples\LocalConnectionSenderExample.as" class="- topic/example "> このサンプルは、2 つの異なる SWF ファイルにコンパイルする必要のある 2 つの ActionScript クラスから構成されています。
 
 <p class="- topic/p ">LocalConnectionSenderExample SWF ファイルでは LocalConnection インスタンスが作成され、ボタンが押されると <codeph class="+ topic/ph pr-d/codeph ">call()</codeph> メソッドを使用して SWF ファイル内の <codeph class="+ topic/ph pr-d/codeph ">lcHandler</codeph> というメソッドが呼び出されます。このとき接続名 "myConnection" が使用され、パラメーターとして TextField の内容が渡されます。</p>
 
 <p class="- topic/p ">LocalConnectionReceiverExample SWF ファイルでは LocalConnection インスタンスが作成され、<codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> メソッドが呼び出されて、この SWF ファイルが接続名 "myConnection" 宛のメッセージの受信者に指定されます。さらにこのクラスには、<codeph class="+ topic/ph pr-d/codeph ">lcHandler()</codeph> というパブリックメソッドが含まれています。これは、LocalConnectionSenderExample SWF ファイルによって呼び出されるメソッドです。メソッドが呼び出されると、パラメーターとして渡されるテキストがステージ上の TextField に追加されます。</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>この例をテストするには、両方の SWF ファイルを同じコンピューター上に同時にロードする必要があります。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

// Code in LocalConnectionSenderExample.as
package {
    import flash.display.Sprite;
    import flash.events.MouseEvent;
    import flash.net.LocalConnection;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.events.StatusEvent;
    import flash.text.TextFieldAutoSize;

    public class LocalConnectionSenderExample extends Sprite {
        private var conn:LocalConnection;
        
        // UI elements
        private var messageLabel:TextField;
        private var message:TextField;
        private var sendBtn:Sprite;
        
        public function LocalConnectionSenderExample() {
            buildUI();
            sendBtn.addEventListener(MouseEvent.CLICK, sendMessage);
            conn = new LocalConnection();
            conn.addEventListener(StatusEvent.STATUS, onStatus);
        }
        
        private function sendMessage(event:MouseEvent):void {
            conn.send("myConnection", "lcHandler", message.text);
        }
        
        private function onStatus(event:StatusEvent):void {
            switch (event.level) {
                case "status":
                    trace("LocalConnection.send() succeeded");
                    break;
                case "error":
                    trace("LocalConnection.send() failed");
                    break;
            }
        }
        
        private function buildUI():void {
            const hPadding:uint = 5;
            // messageLabel
            messageLabel = new TextField();
            messageLabel.x = 10;
            messageLabel.y = 10;
            messageLabel.text = "Text to send:";
            messageLabel.autoSize = TextFieldAutoSize.LEFT;
            addChild(messageLabel);
            
            // message
            message = new TextField();
            message.x = messageLabel.x + messageLabel.width + hPadding;
            message.y = 10;
            message.width = 120;
            message.height = 20;
            message.background = true;
            message.border = true;
            message.type = TextFieldType.INPUT;
            addChild(message);
            
            // sendBtn
            sendBtn = new Sprite();
            sendBtn.x = message.x + message.width + hPadding;
            sendBtn.y = 10;
            var sendLbl:TextField = new TextField();
            sendLbl.x = 1 + hPadding;
            sendLbl.y = 1;
            sendLbl.selectable = false;
            sendLbl.autoSize = TextFieldAutoSize.LEFT;
            sendLbl.text = "Send";
            sendBtn.addChild(sendLbl);
            sendBtn.graphics.lineStyle(1);
            sendBtn.graphics.beginFill(0xcccccc);
            sendBtn.graphics.drawRoundRect(0, 0, (sendLbl.width + 2 + hPadding + hPadding), (sendLbl.height + 2), 5, 5);
            sendBtn.graphics.endFill();
            addChild(sendBtn);
        }
    }
}
</codeblock></example><example conref="examples\LocalConnectionReceiverExample.as" class="- topic/example "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// Code in LocalConnectionReceiverExample.as
package {
    import flash.display.Sprite;
    import flash.net.LocalConnection;
    import flash.text.TextField;

    public class LocalConnectionReceiverExample extends Sprite {
        private var conn:LocalConnection;
        private var output:TextField;
        
        public function LocalConnectionReceiverExample()     {
            buildUI();
            
            conn = new LocalConnection();
            conn.client = this;
            try {
                conn.connect("myConnection");
            } catch (error:ArgumentError) {
                trace("Can't connect...the connection name is already being used by another SWF");
            }
        }
        
        public function lcHandler(msg:String):void {
            output.appendText(msg + "\n");
        }
        
        private function buildUI():void {
            output = new TextField();
            output.background = true;
            output.border = true;
            output.wordWrap = true;
            addChild(output);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#LocalConnection/send()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.send()</linktext></link><link href="flash.net.xml#LocalConnection/allowDomain()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.allowDomain()</linktext></link><link href="flash.net.xml#LocalConnection/domain" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.domain</linktext></link></related-links><adobeApiEvent id="flash.net:LocalConnection_flash.events.StatusEvent.STATUS_status" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">status</apiName><shortdesc class="- topic/shortdesc ">
 LocalConnection オブジェクトがステータスを報告するときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.StatusEvent.STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.StatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 LocalConnection オブジェクトがステータスを報告するときに送出されます。<codeph class="+ topic/ph pr-d/codeph ">LocalConnection.send()</codeph> が正常に実行された場合、<codeph class="+ topic/ph pr-d/codeph ">status</codeph> イベントオブジェクトの <codeph class="+ topic/ph pr-d/codeph ">level</codeph> プロパティの値は <codeph class="+ topic/ph pr-d/codeph ">"status"</codeph> になります。また、呼び出しに失敗した場合、<codeph class="+ topic/ph pr-d/codeph ">level</codeph> プロパティの値は <codeph class="+ topic/ph pr-d/codeph ">"error"</codeph> になります。受信側ファイルで接続が拒否されると、送信側ファイルへの通知なしで呼び出しが失敗する可能性があります。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#LocalConnection/send()" class="- topic/link "><linktext class="- topic/linktext ">LocalConnection.send()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:LocalConnection_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><shortdesc class="- topic/shortdesc ">
 LocalConnection.send() の呼び出しで、異なるセキュリティサンドボックスにデータを送信しようとしたときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">LocalConnection.send()</codeph> の呼び出しで、異なるセキュリティサンドボックスにデータを送信しようとすると送出されます。
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#LocalConnection/send()" class="- topic/link "><linktext class="- topic/linktext ">send()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:LocalConnection_flash.events.AsyncErrorEvent.ASYNC_ERROR_asyncError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">asyncError</apiName><shortdesc class="- topic/shortdesc ">
 非同期形式で、つまりネイティブ非同期コードから例外がスローされると送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.AsyncErrorEvent.ASYNC_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.AsyncErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 非同期形式で、つまりネイティブ非同期コードから例外がスローされると送出されます。
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.net:LocalConnection:LocalConnection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">LocalConnection</apiName><shortdesc class="- topic/shortdesc ">
     LocalConnection オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample>The following example shows how receiving and sending files create LocalConnnection objects.
     The two files can use the same name or different names for their respective LocalConnection objects.
     In this example they use different names.
     
     <listing>
     // Code in the receiving file
     this.createTextField("result_txt", 1, 10, 10, 100, 22);
     result_txt.border = true;
     var receiving_lc:LocalConnection = new LocalConnection();
     receiving_lc.methodToExecute = function(param1:Number, param2:Number) {
       result_txt.text = param1+param2;
     };
     receiving_lc.connect("lc_name");
     </listing>
     
     <p class="- topic/p ">The following file sends the request to the first file.</p>
     
     <listing>
     // Code in the sending file
     var sending_lc:LocalConnection = new LocalConnection();
     sending_lc.send("lc_name", "methodToExecute", 5, 7);
     </listing>
     
     </oldexample></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     LocalConnection オブジェクトを作成します。LocalConnection オブジェクトを使用すると、同じクライアントコンピューター上で実行されている異なるファイル間で通信できるようになります。
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.net.xml#LocalConnection/connect()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.connect()</linktext></link><link href="flash.net.xml#LocalConnection/send()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.send()</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:LocalConnection:allowDomain" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">allowDomain</apiName><shortdesc class="- topic/shortdesc ">
     この LocalConnection インスタンスに LocalConnection 呼び出しを送信できる 1 つ以上のドメインを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Change the first example in the listing.
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定されたすべてのパラメーターは、null 以外にする必要があります。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">domains</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">LocalConnection 呼び出しを許可するドメインを指定するストリングです。このパラメーターには次の 2 つの特殊なケースがあります。
     
     <ul class="- topic/ul "><li class="- topic/li ">ワイルドカード文字 "~~" を使用して、すべてのドメインからの呼び出しを許可できます。</li><li class="- topic/li ">"<codeph class="+ topic/ph pr-d/codeph ">localhost</codeph>" というストリングを指定して、ローカル環境にインストールされているファイルからこのファイルへの呼び出しを許可することができます。<ph class="- topic/ph ">Flash Player 8 から、ローカルファイルに関するセキュリティ制限が導入されました。デフォルトでは、Flash Player で実行されている、インターネットへのアクセスを許可された SWF ファイルは、ローカルファイルシステムにアクセスできません。 Flash Player では、"<codeph class="+ topic/ph pr-d/codeph ">localhost</codeph>" を指定すると、すべてのローカル SWF ファイルがこの SWF ファイルにアクセスできます。</ph> </li></ul>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     この LocalConnection インスタンスに LocalConnection 呼び出しを送信できる 1 つ以上のドメインを指定します。
     
     <p class="- topic/p ">このメソッドを使用して、セキュアでないプロトコルでホストされているファイルから、セキュアなプロトコル（HTTPS）を使用してホストされているファイルへのアクセスを許可することはできません。この場合は、<codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> メソッドを使用してくだい。</p>
     
     <p class="- topic/p ">場合によっては、このメソッドを使用して、ドメインの異なる子ファイルから親ファイルへの LocalConnection 呼び出しを、子ファイルの最終的なドメインが不明な状態でも実行できるようにしたいことがあります。 例えば、ロードバランシングリダイレクトやサードパーティー製サーバーを使用する場合などです。このような場合、ロードに使用される LoaderInfo オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">url</codeph> プロパティを使用すれば、<codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> メソッドで使用するドメインを取得できます。例えば、Loader オブジェクトを使用して子ファイルをロードする場合は、ファイルがロードされた後、Loader オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">contentLoaderInfo.url</codeph> プロパティをチェックすることにより、完全な URL ストリングから子 SWF ファイルのドメインを解析できます。この場合、ファイルがロードされるまで待つようにしてください。ファイルが完全にロードされるまで、<codeph class="+ topic/ph pr-d/codeph ">contentLoaderInfo.url</codeph> プロパティが最終的な正しい値に設定されないためです。 </p>
     
     <p class="- topic/p ">また、これとは反対に、ドメインの不明な親からの LocalConnection 呼び出しを子ファイルに受け入れさせたい場合もあります。この場合は、ドメインパラメーターが、ロードされたファイルの <codeph class="+ topic/ph pr-d/codeph ">loaderInfo.url</codeph> プロパティのドメインに一致するかどうかをチェックすることにより、このメソッドを実装できます。この場合も、<codeph class="+ topic/ph pr-d/codeph ">loaderInfo.url</codeph> に含まれている完全な URL からドメインを解析する必要があります。この状況では、親ファイルがロードされるまで待つ必要はありません。親 SWF ファイルは子 SWF ファイルがロードされた時点で既にロードされているからです。</p>
     
     <p class="- topic/p ">このメソッドを使用するときは、Flash Player セキュリティモデルを考慮してください。デフォルトでは、LocalConnection オブジェクトはそれを作成したファイルのサンドボックスに関連付けられ、LocalConnection オブジェクトのクロスドメイン呼び出しは、受信側ファイルで <codeph class="+ topic/ph pr-d/codeph ">LocalConnection.allowDomain()</codeph> メソッドが呼び出されていない限り許可されません。ただし、Adobe AIR では、<codeph class="+ topic/ph pr-d/codeph ">アプリケーション</codeph>セキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p>
     
     <p class="- topic/p ">セキュリティについて詳しくは、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b><codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> メソッドは、ActionScript 1.0 および 2.0 での形式から変更されています。これらの以前のバージョンでは、<codeph class="+ topic/ph pr-d/codeph ">allowDomain</codeph> は実装するコールバックメソッドでした。ActionScript 3.0 では、<codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> は LocalConnection のビルトインメソッドとして呼び出されます。変更された <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> は <codeph class="+ topic/ph pr-d/codeph ">flash.system.Security.allowDomain()</codeph> とほぼ同じように作用します。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#LocalConnection/allowInsecureDomain()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.allowInsecureDomain()</linktext></link><link href="flash.display.xml#LoaderInfo/url" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo.url</linktext></link><link href="flash.system.xml#Security/allowDomain()" class="- topic/link "><linktext class="- topic/linktext ">flash.system.Security.allowDomain()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:LocalConnection:allowInsecureDomain" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">allowInsecureDomain</apiName><shortdesc class="- topic/shortdesc ">
     この LocalConnection オブジェクトに LocalConnection 呼び出しを送信できる 1 つ以上のドメインを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Seems like a security note is in order here.
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定されたすべてのパラメーターは、null 以外にする必要があります。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">domains</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">LocalConnection 呼び出しを許可するドメインを指定するストリングです。このパラメーターには 2 つの特殊なケースがあります。
     <ul class="- topic/ul "><li class="- topic/li ">ワイルドカード文字 "~~" を指定して、すべてのドメインからの呼び出しを許可できます。"~~" を指定する場合、ローカルホストは含まれません。</li><li class="- topic/li ">"<codeph class="+ topic/ph pr-d/codeph ">localhost</codeph>" というストリングを指定して、ローカル環境にインストールされている SWF ファイルからこの SWF ファイルへの呼び出しを許可することができます。Flash Player 8 から、ローカル SWF ファイルに関するセキュリティ制限が導入されました。これにより、インターネットへのアクセスを許可された SWF ファイルは、ローカルファイルシステムにはアクセスできません。"<codeph class="+ topic/ph pr-d/codeph ">localhost</codeph>" を指定すると、どのローカル SWF ファイルもこの SWF ファイルにアクセスできます。オーサリング時に、呼び出し元の SWF ファイルを local-with-networking タイプの SWF ファイルとして指定する必要もあります。</li></ul>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     この LocalConnection オブジェクトに LocalConnection 呼び出しを送信できる 1 つ以上のドメインを指定します。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> メソッドは <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> メソッドと同じように作用しますが、<codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> メソッドは、HTTPS 以外でロードされたファイルが HTTPS でロードされた SWF ファイルに LocalConnection 呼び出しを送信することも許可する点が異なります。この違いは、HTTPS を使用してロードされたファイルから <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> メソッドを呼び出す場合にのみ意味があります。同じドメイン内の非 HTTPS と HTTPS の境界を越える場合でも、<codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> メソッドを呼び出す必要があります。デフォルトでは、同じドメイン内でも 非 HTTPS ファイルから HTTPS ファイルへの LocalConnection 呼び出しは許可されません。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> を呼び出すことは、HTTPS によるセキュリティが損なわれる恐れがあるので、お勧めできません。HTTPS によってファイルをロードする場合は、ほぼ確実に、ファイルがネットワークでの配信中に不正操作を受けることはありません。 非 HTTPS ファイルから HTTPS ファイルへの LocalConnection 呼び出しを許可した場合、配信中に不正操作された可能性のあるファイルからの呼び出しを受け入れることになります。この場合は、HTTPS ファイルに送られてきた LocalConnection 呼び出しの正当性を信頼できないので、一般に特別な警戒を必要とします。</p>
     
     <p class="- topic/p ">デフォルトでは、HTTPS プロトコルを使用してホストされたファイルは、HTTPS プロトコルを使用してホストされた他のファイルにのみアクセスできます。 この実装方法により、HTTPS プロトコルが提供する整合性が保たれます。</p>
     
     <p class="- topic/p ">このメソッドでデフォルトの動作を変更することはお勧めできません。デフォルトの動作を変更すると、HTTPS のセキュリティが損なわれます。ただし、デフォルトの動作を変更せざるをえない場合もあります。例えば、Flash Player 9 以降用にパブリッシュされた HTTPS SWF ファイルに対して、Flash Player 6 以前のバージョン用にパブリッシュされた HTTP SWF ファイルからのアクセスを許可しなければならない場合などです。</p>
     
     <p class="- topic/p ">セキュリティについて詳しくは、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#LocalConnection/allowDomain()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.allowDomain()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:LocalConnection:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     LocalConnection オブジェクトを閉じます（切断します）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">LocalConnection, LocalConnection.close, close
     
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">LocalConnection インスタンスが接続されていないので、閉じることができません。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     LocalConnection オブジェクトを閉じます（切断します）。このコマンドは、LocalConnection オブジェクトがもうコマンドを受け入れないようにする場合に実行します。例えば、<codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> コマンドを、別の SWF ファイルで同じ <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> パラメーターを使用して実行する場合などです。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#LocalConnection/connect()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.connect()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:LocalConnection:connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><shortdesc class="- topic/shortdesc ">
     send() コマンド（送信側 LocalConnection オブジェクト）から送信されたコマンドを受け入れるように LocalConnection オブジェクトを準備します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">LocalConnection, LocalConnection.connect, connect
     
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> パラメーターに渡される値は null 以外にする必要があります。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、次の 3 つの理由によって発生する可能性があります。1) <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> パラメーターに渡されたストリング値が null だった場合。null 以外の値を渡します。2) <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> パラメーターに渡された値にコロン（:）が含まれていた場合。コロンは、スーパードメインと <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> ストリングを区切る特殊文字として <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> メソッドで使用されます。<codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> メソッドでは使用しません。3) LocalConnection インスタンスが既に接続されている場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">connectionName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">受信側 LocalConnection オブジェクトと通信する、<codeph class="+ topic/ph pr-d/codeph ">send()</codeph> コマンドで指定された接続名に対応するストリングです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> コマンド（<i class="+ topic/ph hi-d/i ">送信側 LocalConnection オブジェクト</i>）から送信されたコマンドを受け入れるように LocalConnection オブジェクトを準備します。 <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> メソッドで使用されるオブジェクトは、<i class="+ topic/ph hi-d/i ">受信側 LocalConnection オブジェクト</i>と呼ばれます。受信側と送信側のオブジェクトは、同じクライアントコンピューター上で実行されている必要があります。
     
     <p class="- topic/p ">競合状況を避けるため、このメソッドを呼び出す前に、受信側の LocalConnection オブジェクトに関連付けられるメソッドを定義します（LocalConnection クラスの例を参照）。 </p>
     
     <p class="- topic/p ">デフォルトでは、<codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> 引数は <codeph class="+ topic/ph pr-d/codeph ">"<i class="+ topic/ph hi-d/i ">superdomain</i>:connectionName"</codeph> の値に解決されます。ここで <codeph class="+ topic/ph pr-d/codeph "><i class="+ topic/ph hi-d/i ">superdomain</i></codeph> は、<codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> コマンドを含むファイルのスーパードメインを表します。 例えば、受信側 LocalConnection オブジェクトを含むファイルが www.someDomain.com に配置されている場合、<codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> は <codeph class="+ topic/ph pr-d/codeph ">"someDomain.com:connectionName"</codeph> に解決されます。（Flash Player で実行されているファイルがクライアントコンピューターに配置されている場合、<codeph class="+ topic/ph pr-d/codeph ">superdomain</codeph> には <codeph class="+ topic/ph pr-d/codeph ">"localhost"</codeph> が割り当てられます。）</p>
     
     <p class="- topic/p ">Adobe AIR の<codeph class="+ topic/ph pr-d/codeph ">アプリケーション</codeph>セキュリティサンドボックスで実行されているコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）では、スーパードメインの代わりに、<codeph class="+ topic/ph pr-d/codeph ">app#</codeph> + AIR アプリケーションのアプリケーション ID（アプリケーション記述ファイルで定義）が使用されます。 <codeph class="+ topic/ph pr-d/codeph "/>例えば、アプリケーション ID が <codeph class="+ topic/ph pr-d/codeph ">com.example.air.MyApp</codeph> のアプリケーションでは、<codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> は <codeph class="+ topic/ph pr-d/codeph ">"app#com.example.air.MyApp:connectionName"</codeph> に解決されます。</p>
     
     <p class="- topic/p ">またデフォルトでは、受信側 LocalConnection オブジェクトは、接続名が <codeph class="+ topic/ph pr-d/codeph ">"</codeph><codeph class="+ topic/ph pr-d/codeph "><i class="+ topic/ph hi-d/i ">superdomain</i></codeph><codeph class="+ topic/ph pr-d/codeph ">:connectionName"</codeph> の値に解決される送信側 LocalConnection オブジェクトからのコマンドだけを受け入れます。このため、同じドメインに置かれているファイル間の通信は簡単です。</p>
     
     <p class="- topic/p ">同じドメインのファイル間のみの通信を実装する場合は、先頭がアンダースコア（_）でなくドメイン名を含まないストリングを <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> に指定します（<codeph class="+ topic/ph pr-d/codeph ">"myDomain:connectionName"</codeph> など）。<codeph class="+ topic/ph pr-d/codeph ">connect(connectionName)</codeph> メソッドと同じストリングを使用してください。</p>
     
     <p class="- topic/p ">異なるドメイン内のファイル間の通信を実装する場合は、アンダースコア（_）で始まるストリングを <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> に指定すると、受信側 LocalConnection オブジェクトを含むファイルをドメイン間で移植しやすくなります。考えられる 2 つの状況を次に示します。</p>
     
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> のストリングがアンダースコア（_）で始まっていない場合は、<codeph class="+ topic/ph pr-d/codeph ">"myDomain:connectionName"</codeph> のように、スーパードメインとコロンが前に追加されます。 これにより、他のドメインの同じ名前を持つ接続との競合は回避できますが、送信側 LocalConnection オブジェクトでも必ずこのスーパードメインを指定する必要があります（<codeph class="+ topic/ph pr-d/codeph ">"myDomain:connectionName"</codeph> など）。受信側 LocalConnection オブジェクトを含むファイルが別のドメインに移動された場合は、<codeph class="+ topic/ph pr-d/codeph ">"anotherDomain:connectionName"</codeph> のように、新しいスーパードメインに応じて接頭辞が変更されます。すべての送信側 LocalConnection オブジェクトは、新しいスーパードメインを参照するように手動で編集する必要があります。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> のストリングがアンダースコア（_）で始まっている場合（<codeph class="+ topic/ph pr-d/codeph ">"_connectionName"</codeph> など）は、ストリングに接頭辞は追加されません。 つまり、受信側と送信側の LocalConnection オブジェクトは、<codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> にまったく同じストリングを使用します。受信側オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> を使用し、すべてのドメインからの通信を受け入れるように指定した場合は、送信側 LocalConnection オブジェクトを変更せずに、受信側 LocalConnection オブジェクトを含むファイルを別のドメインに移動させることができます。</li></ul>
     
     <p class="- topic/p ">詳細については、クラスの概要の説明、<codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph>（<codeph class="+ topic/ph pr-d/codeph ">send()</codeph>）の説明、および <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> エントリと <codeph class="+ topic/ph pr-d/codeph ">domain</codeph> エントリを参照してください。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>コロンは、<codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> のストリングとスーパードメインを区切る特殊文字として使用されます。<codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> にコロンを含むストリングを指定するのは無効です。</p>
     
     <p class="- topic/p ">このメソッドを使用するときは、<ph class="- topic/ph ">Flash Player</ph> セキュリティモデルを考慮してください。 デフォルトでは、LocalConnection オブジェクトはそれを作成したファイルのサンドボックスに関連付けられ、LocalConnection オブジェクトのクロスドメイン呼び出しは、受信側ファイルで <codeph class="+ topic/ph pr-d/codeph ">LocalConnection.allowDomain()</codeph> メソッドが呼び出されていない限り許可されません。<ph class="- topic/ph ">ファイルがこのメソッドを使用しないようにするには、SWF コンテンツを含む HTML ページに <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">object</codeph> タグおよび <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> タグ）を設定します。</ph>ただし、Adobe AIR では、<codeph class="+ topic/ph pr-d/codeph ">application</codeph> セキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p>
     
     <p class="- topic/p ">セキュリティについて詳しくは、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#LocalConnection/send()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.send()</linktext></link><link href="flash.net.xml#LocalConnection/allowDomain()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.allowDomain()</linktext></link><link href="flash.net.xml#LocalConnection/domain" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.domain</linktext></link></related-links></apiOperation><apiOperation id="flash.net:LocalConnection:send" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">send</apiName><shortdesc class="- topic/shortdesc ">
     connect(connectionName) メソッド（受信側 LocalConnection オブジェクト）で確立した接続を使用して、methodName で指定されたメソッドを呼び出します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">LocalConnection, LocalConnection.send, send
     
     
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> または <codeph class="+ topic/ph pr-d/codeph ">methodName</codeph> のいずれかの値が null です。これらのパラメーターに null 以外の値を渡します。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、次のうちいずれかの理由で発生する可能性があります。1) <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> または <codeph class="+ topic/ph pr-d/codeph ">methodName</codeph> のいずれかの値が空ストリングである場合。これらのパラメーターに有効なストリングを渡します。2) <codeph class="+ topic/ph pr-d/codeph ">methodName</codeph> で指定されているメソッドが制限されている場合。3) 送信された直列化メッセージが大きすぎる場合（40 K 以上）。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">connectionName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">送信側 LocalConnection オブジェクトと通信する、<codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> コマンドで指定された接続名に対応します。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">methodName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">受信側 LocalConnection オブジェクト内で呼び出されるメソッドの名前。次のメソッド名を使用すると、このコマンドは失敗します。<codeph class="+ topic/ph pr-d/codeph ">send</codeph>、<codeph class="+ topic/ph pr-d/codeph ">connect</codeph>、<codeph class="+ topic/ph pr-d/codeph ">close</codeph>、<codeph class="+ topic/ph pr-d/codeph ">allowDomain</codeph>、<codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain</codeph>、<codeph class="+ topic/ph pr-d/codeph ">client</codeph>、および <codeph class="+ topic/ph pr-d/codeph ">domain</codeph>。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">arguments</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定するメソッドに渡す追加のパラメーター。このパラメーターはオプションです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">connect(connectionName)</codeph> メソッド（<i class="+ topic/ph hi-d/i ">受信側 LocalConnection オブジェクト</i>）で確立した接続を使用して、<codeph class="+ topic/ph pr-d/codeph ">methodName</codeph> で指定されたメソッドを呼び出します。<codeph class="+ topic/ph pr-d/codeph ">send()</codeph> メソッドで使用されるオブジェクトは、<i class="+ topic/ph hi-d/i ">送信側 LocalConnection オブジェクト</i>と呼ばれます。送信側オブジェクトと受信側オブジェクトを含む SWF ファイルは、同じクライアントコンピューター上で実行されている必要があります。
     
     <p class="- topic/p ">このコマンドにパラメーターとして渡すことができるデータの量は 40 KB に制限されます。シンタックスが正しいにもかかわらず、<codeph class="+ topic/ph pr-d/codeph ">send()</codeph> が <codeph class="+ topic/ph pr-d/codeph ">ArgumentError</codeph> をスローする場合は、<codeph class="+ topic/ph pr-d/codeph ">send()</codeph> 要求を複数のコマンドに分割してそれぞれのデータを 40 KB より小さくしてみてください。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> の項目で説明したように、<codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> にはデフォルトで現在のスーパードメインが追加されます。 異なるドメイン間の通信を実装する場合は、送信側と受信側の両方の LocalConnection オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> を、現在のスーパードメインが <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> に追加されないように定義する必要があります。 これには、次の 2 つの方法があります。</p>
     
     <ul class="- topic/ul "><li class="- topic/li ">送信側と受信側の両方の LocalConnection オブジェクトで、<codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> の先頭にアンダースコア（_）を使用します。受信側オブジェクトを含むファイルでは、<codeph class="+ topic/ph pr-d/codeph ">LocalConnection.allowDomain()</codeph> を使用して、どのドメインからの接続も受け入れるように指定します。この方法では、送信側と受信側のファイルを任意のドメインに配置できます。</li><li class="- topic/li ">送信側 LocalConnection オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> にスーパードメインを含めます。例えば、<codeph class="+ topic/ph pr-d/codeph ">myDomain.com:myConnectionName</codeph> と指定します。受信側オブジェクトでは、<codeph class="+ topic/ph pr-d/codeph ">LocalConnection.allowDomain()</codeph> を使用して、指定したスーパードメイン（この例では myDomain.com）からの接続を受け入れるか、またはすべてのドメインからの接続を受け入れるように指定します。</li></ul>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>受信側 LocalConnection オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> ではスーパードメインを指定できません。スーパードメインを指定できるのは送信側 LocalConnection オブジェクトだけです。</p>
     
     <p class="- topic/p ">このメソッドを使用するときは、<ph class="- topic/ph ">Flash Player</ph> セキュリティモデルを考慮してください。 デフォルトでは、LocalConnection オブジェクトはそれを作成したファイルのサンドボックスに関連付けられ、LocalConnection オブジェクトのクロスドメイン呼び出しは、受信側ファイルで <codeph class="+ topic/ph pr-d/codeph ">LocalConnection.allowDomain()</codeph> メソッドが呼び出されていない限り許可されません。ブラウザーで実行されている SWF コンテンツで、ファイルがこのメソッドを使用しないようにするには、SWF コンテンツを含む HTML ページに <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">object</codeph> タグおよび <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> タグ）を設定します。 ただし、Adobe AIR では、<codeph class="+ topic/ph pr-d/codeph ">アプリケーション</codeph>セキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p>
     
     <p class="- topic/p ">セキュリティについて詳しくは、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#LocalConnection/allowDomain()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.allowDomain()</linktext></link><link href="flash.net.xml#LocalConnection/connect()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.connect()</linktext></link><link href="flash.net.xml#LocalConnection/domain" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.domain</linktext></link></related-links><adobeApiEvent id="flash.net:LocalConnection:send_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">LocalConnection.send()</codeph> は、呼び出し元のコードがアクセスできないセキュリティ Sandbox から SWF ファイルと通信しようとしました。この問題は、受信側が <codeph class="+ topic/ph pr-d/codeph ">LocalConnection.allowDomain()</codeph> を実装することで回避できます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">LocalConnection.send() は、呼び出し元のコードがアクセスできないセキュリティ Sandbox から SWF ファイルと通信しようとしました。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:LocalConnection:send_status" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">status</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:StatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Level</codeph> プロパティの値が <codeph class="+ topic/ph pr-d/codeph ">"status"</codeph> の場合は呼び出しが成功したことを示し、<codeph class="+ topic/ph pr-d/codeph ">"error"</codeph> の場合は呼び出しが失敗したことを示します。受信側の SWF ファイルが接続を拒否した場合、呼び出しは失敗する可能性があります。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Level プロパティの値が "status" の場合は呼び出しが成功したことを示し、"error" の場合は呼び出しが失敗したことを示します。</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.net:LocalConnection:client:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">client</apiName><shortdesc class="- topic/shortdesc ">
     コールバックメソッドが呼び出されるオブジェクトを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">client</codeph> プロパティは、null 以外のオブジェクトに設定する必要があります。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     コールバックメソッドが呼び出されるオブジェクトを示します。デフォルトのオブジェクトは、作成されるローカル接続 <codeph class="+ topic/ph pr-d/codeph ">this</codeph> です。<codeph class="+ topic/ph pr-d/codeph ">client</codeph> プロパティを別のオブジェクトに設定すると、その別のオブジェクトでコールバックメソッドを呼び出すことができます。
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:LocalConnection:domain:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">domain</apiName><shortdesc class="- topic/shortdesc ">
     現在のファイルが存在するドメインを表すストリングです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">LocalConnection, LocalConnection.domain, domain
     
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     現在のファイルが存在するドメインを表すストリングです。
     
     <p class="- topic/p ">Adobe AIR の<codeph class="+ topic/ph pr-d/codeph ">アプリケーション</codeph>セキュリティサンドボックスで実行されているコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）では、スーパードメインの代わりに、<codeph class="+ topic/ph pr-d/codeph ">app#</codeph> + AIR アプリケーションのアプリケーション ID（アプリケーション記述ファイルで定義）が使用されます。 <codeph class="+ topic/ph pr-d/codeph "/>例えば、アプリケーション ID が <codeph class="+ topic/ph pr-d/codeph ">com.example.air.MyApp</codeph> のアプリケーションでは、<codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> は <codeph class="+ topic/ph pr-d/codeph ">"app#com.example.air.MyApp:connectionName"</codeph> に解決されます。</p>
     
     <p class="- topic/p ">Flash Player 9 以降用にパブリッシュされた SWF ファイルでは、ファイルのサブドメインを含む正確なドメインを示すストリングを返します。 例えば、現在のファイルが www.adobe.com にある場合は、<codeph class="+ topic/ph pr-d/codeph ">"www.adobe.com"</codeph> を返します。 </p>
     
     <p class="- topic/p ">現在のファイルが、Flash Player で実行されているクライアントコンピューター上のローカルファイルである場合は、<codeph class="+ topic/ph pr-d/codeph ">"localhost"</codeph> を返します。</p>
     
     <p class="- topic/p ">このプロパティの最も一般的な使用方法としては、送信側 LocalConnection オブジェクトのドメイン名を、受信側 LocalConnection オブジェクトで呼び出すメソッドのパラメーターとして組み込みます。あるいは、<codeph class="+ topic/ph pr-d/codeph ">LocalConnection.allowDomain()</codeph> と組み合わせて使用して、特定のドメインからのコマンドを受け入れます。同じドメイン内にある LocalConnection オブジェクト間でのみ通信する場合は、通常、このプロパティを使用する必要はありません。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#LocalConnection/allowDomain()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.allowDomain()</linktext></link><link href="flash.net.xml#LocalConnection/connect()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.connect()</linktext></link></related-links></apiValue><apiValue id="flash.net:LocalConnection:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
    現在のプラットフォームで LocalConnection クラスがサポートされている場合、isSupported プロパティは true に設定されます。サポートされていない場合は、false に設定されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    現在のプラットフォームで LocalConnection クラスがサポートされている場合、<codeph class="+ topic/ph pr-d/codeph ">isSupported</codeph> プロパティは <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定されます。サポートされていない場合は、<codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定されます。
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:LocalConnection:isPerUser:set" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isPerUser</apiName><shortdesc class="- topic/shortdesc "/><prolog class="- topic/prolog "/><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetStream" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetStream</apiName><shortdesc class="- topic/shortdesc ">
 NetStream クラスは NetConnection 経由で単方向ストリーミングチャンネルを開きます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 NetStream クラスは NetConnection 経由で単方向ストリーミングチャンネルを開きます。
 
 <p class="- topic/p "> NetStream クラスを使用して、次の操作を行います。</p>
 
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> を呼び出して、ローカルディスク、Web サーバーまたは Flash Media Server からメディアファイルを再生します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NetStream.publish()</codeph> を呼び出して、ビデオ、オーディオおよびデータストリームを Flash Media Server にパブリッシュします。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NetStream.send()</codeph> を呼び出して、サブスクライブされたすべてのクライアントにデータメッセージを送信します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NetStream.send()</codeph> を呼び出して、メタデータをライブストリームに追加します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NetStream.appendBytes()</codeph> を呼び出して、ByteArray データを NetStream に渡します。</li></ul>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>同じ NetStream オブジェクトでは、ストリームを再生およびパブリッシュできません。</p>
 
 <p class="- topic/p ">Adobe AIR および Flash Player 9.0.115.0 以降のバージョンでは、標準の MPEG-4 コンテナ形式から派生したファイルがサポートされます。H.264 ビデオまたは HE-AAC v2 エンコードオーディオ、あるいはその両方が含まれている場合、このようなファイルには F4V、MP4、M4A、MOV、MP4V、3GP および 3G2 があります。H.264 では、Sorenson または On2 の同じエンコードプロファイルと比較して、低いビットレートで高品質のビデオが配信されます。AAC は、MPEG-4 ビデオ標準で定義された標準オーディオ形式です。AAC の拡張である HE-AAC v2 は、スペクトルバンドレプリケーション（SBR）およびパラメトリックステレオ（PS）技法を使用して、低いビットレートでのコーディング効率を向上させます。</p>
 
 <p class="- topic/p ">サポートされているコーデックおよびファイル形式について詳しくは、以下を参照してください。</p>
 
 <ul class="- topic/ul "><li class="- topic/li "><xref href="http://www.adobe.com/go/learn_fms_fileformats_jp" scope="external" class="- topic/xref ">ADOBE FLASH MEDIA SERVER 3.5 
技術概要</xref></li><li class="- topic/li "><xref href="http://www.adobe.com/go/hardware_scaling_jp" scope="external" class="- topic/xref ">Exploring Flash Player support for high-definition H.264 video and AAC audio</xref></li><li class="- topic/li "><xref href="http://www.adobe.com/go/video_file_format_jp" scope="external" class="- topic/xref ">FLV/F4V オープン仕様のドキュメント</xref></li></ul>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Flash Media Server ストリーム、プログレッシブ F4V ファイル、またはプログレッシブ FLV ファイルからデータを受け取る</b></p>
 
 <p class="- topic/p ">Flash Media Server、F4V ファイル、および FLV ファイルは、ストリーミング中または再生中に特定のデータポイントで、データが含まれているイベントオブジェクトを送信できます。再生中は、2 つの方法でストリームまたは FLV ファイルからのデータを処理できます。</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">
 client プロパティをイベントハンドラーと関連付けてデータオブジェクトを受信します。<codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph> プロパティを使用して、特定のデータ処理関数の呼び出しにオブジェクトを割り当てます。<codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph> プロパティに割り当てられたオブジェクトは、<codeph class="+ topic/ph pr-d/codeph ">onCuePoint()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">onImageData()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">onMetaData()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">onPlayStatus()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">onSeekPoint()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">onTextData()</codeph> および <codeph class="+ topic/ph pr-d/codeph ">onXMPData()</codeph> の各データポイントを監視できます。これらの関数内にプロシージャを書き込んで、再生中にストリームから返されたデータオブジェクトを処理します。詳しくは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph> プロパティを参照してください。
 </li><li class="- topic/li ">
 client プロパティを NetStream クラスのサブクラスに関連付けて、データオブジェクトを受信するイベントハンドラーを書き込みます。Netstream は sealed クラスで、実行時にプロパティまたはメソッドを Netstream オブジェクトに追加できないことを意味します。ただし、NetStream のサブクラスを作成し、そのサブクラス内にイベントハンドラーを定義することはできます。また、そのサブクラスをダイナミックにしてイベントハンドラーをサブクラスのインスタンスに追加することもできます。
 </li></ul>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">NetGroup.Neighbor.Connect</codeph> イベントの受信を待ってから、オブジェクトレプリケーション、ダイレクトルーティングまたはポスティング API を使用します。</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>MP3 などのオーディオファイルでデータを送信するには、Sound クラスを使用してオーディオファイルと Sound オブジェクトを関連付けます。次に、<codeph class="+ topic/ph pr-d/codeph ">Sound.id3</codeph> プロパティを使用してサウンドファイルからメタデータを読み込みます。</p>
 
 </apiDesc><example conref="examples\NetConnectionExample.as" class="- topic/example "> 次の例では、Video オブジェクトを NetConnection クラスおよび NetStream クラスと共に使用して、FLV ファイルをロードして再生します。 
 <p class="- topic/p ">この例では、Video オブジェクトと NetStream オブジェクトを作成し、<codeph class="+ topic/ph pr-d/codeph ">Video.attachNetStream()</codeph> メソッドと <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> メソッドを呼び出すコードがハンドラー関数に配置されます。ハンドラーは、NetConnection オブジェクトとの接続が成功した場合にのみ呼び出されます。つまり、<codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> イベントが返す <codeph class="+ topic/ph pr-d/codeph ">info</codeph> オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティが成功を示しているときです。接続に成功するまで待ってから、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> を呼び出すことをお勧めします。 </p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.events.NetStatusEvent;
    import flash.events.SecurityErrorEvent;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;
    import flash.events.Event;

    public class NetConnectionExample extends Sprite {
        private var videoURL:String = "http://www.helpexamples.com/flash/video/cuepoints.flv";
        private var connection:NetConnection;
        private var stream:NetStream;
        private var video:Video = new Video();        

        public function NetConnectionExample() {
            connection = new NetConnection();
            connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            connection.connect(null);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Stream not found: " + videoURL);
                    break;
            }
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function connectStream():void {
            var stream:NetStream = new NetStream(connection);
            stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            stream.client = new CustomClient();
            video.attachNetStream(stream);
            stream.play(videoURL);
            addChild(video);
        }
    }
}

class CustomClient {
    public function onMetaData(info:Object):void {
        trace("metadata: duration=" + info.duration + " width=" + info.width + " height=" + info.height + " framerate=" + info.framerate);
    }
    public function onCuePoint(info:Object):void {
        trace("cuepoint: time=" + info.time + " name=" + info.name + " type=" + info.type);
    }
}
</codeblock></example><example conref="examples\NetConnectionExample.2.as" class="- topic/example "> カスタムクラスを作成しなくても、関数を使用してメタデータを取得することができます。次の例は <xref href="http://www.sandlight.com" scope="external" class="- topic/xref ">Bill Sanders</xref> 氏によるアイデアですが、前述の NetConnectionExample のコードを編集して、関数内でメタデータを呼び出す方法を示しています。この例では、<codeph class="+ topic/ph pr-d/codeph ">mdata</codeph> オブジェクトを使用して <codeph class="+ topic/ph pr-d/codeph ">video</codeph> ビデオインスタンスの幅と高さを設定しています。
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
  //Place the following in the connectStream() function
  //in the NetConnectionExample code
  var metaSniffer:Object=new Object();  
  stream.client=metaSniffer; //stream is the NetStream instance  
  metaSniffer.onMetaData=getMeta;  
      
   
  // Add the following function within the NetConnectionExample class  
  private function getMeta (mdata:Object):void  
  {  
     video.width=mdata.width/2;  
     video.height=mdata.height/2;  
  }  
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Video" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Video</linktext></link><link href="flash.net.xml#NetConnection" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection</linktext></link><link href="flash.net.xml#NetStream/appendBytes()" class="- topic/link "><linktext class="- topic/linktext ">appendBytes()</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.net.xml#NetStream/publish()" class="- topic/link "><linktext class="- topic/linktext ">publish()</linktext></link><link href="flash.net.xml#NetStream/send()" class="- topic/link "><linktext class="- topic/linktext ">send()</linktext></link><link href="flash.net.xml#NetStream/event:onImageData" class="- topic/link "><linktext class="- topic/linktext ">onImageData</linktext></link><link href="flash.net.xml#NetStream/event:onMetaData" class="- topic/link "><linktext class="- topic/linktext ">onMetaData</linktext></link></related-links><adobeApiEvent id="flash.net:NetStream_flash.events.NetDataEvent_mediaTypeData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">mediaTypeData</apiName><shortdesc class="- topic/shortdesc ">
 ビデオコンテンツの再生時と、一部の種類のメッセージが処理されたときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="3.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.NetDataEvent</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.NetDataEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ビデオコンテンツの再生時と、一部の種類のメッセージが処理されたときに送出されます。
 
 <p class="- topic/p ">NetDataEvent は次のメッセージのために送出されます。</p>
 <ul class="- topic/ul "><li class="- topic/li ">onCuePoint</li><li class="- topic/li ">onImageData</li><li class="- topic/li ">onMetaData</li><li class="- topic/li ">onPlayStatus（NetStream.Play.Complete コードの場合）</li><li class="- topic/li ">onTextData</li><li class="- topic/li ">onXMPData</li></ul>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このイベントは、Android および Blackberry Tablet OS 上のブラウザー内の Flash Player で実行しているコンテンツ、または iOS 上の AIR で実行しているコンテンツからは送出されません。</p>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onSeekPoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">onSeekPoint</apiName><shortdesc class="- topic/shortdesc ">
 シーク可能ポイントと見なされるポイント（例えば、ビデオキーフレーム）が付加バイトパーサーによって検出されたときに、appendBytes() から同期的に呼び出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier "/><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 シーク可能ポイントと見なされるポイント（例えば、ビデオキーフレーム）が付加バイトパーサーによって検出されたときに、<codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> から同期的に呼び出されます。このイベントを使用して、シークポイントテーブルを作成できます。<codeph class="+ topic/ph pr-d/codeph ">byteCount</codeph> は、シークポイントに対する解析可能なメッセージの最初のバイトの <codeph class="+ topic/ph pr-d/codeph ">byteCount</codeph> に対応しています。前述のとおり、この値は 0 にリセットされます。シークするには、<codeph class="+ topic/ph pr-d/codeph ">NetStream.Seek.Notify</codeph> イベントで、シーク可能ポイントから始まるバイトを見つけ、<codeph class="+ topic/ph pr-d/codeph ">appendBytes(bytes)</codeph> を呼び出します。<codeph class="+ topic/ph pr-d/codeph ">bytes</codeph> 引数が、シーク可能ポイントから始まるバイトで構成される <codeph class="+ topic/ph pr-d/codeph ">ByteArray</codeph> である場合は、ビデオはそのシークポイントから再生されます。
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このコールバック内からの <codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> への呼び出しは無視されます。</p>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">onSeekPoint</codeph> は <codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph> オブジェクトのプロパティです。このプロパティは <codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> メソッドが受け取るデータに応答するので、「イベント」セクションにリストされています。NetStream クラスの説明について詳しくは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph> プロパティを参照してください。<codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> メソッドまたはその他の EventDispatcher メソッドを使用して、<codeph class="+ topic/ph pr-d/codeph ">onSeekPoint</codeph> をイベントとして受け取ったり、処理したりすることはできません。<codeph class="+ topic/ph pr-d/codeph ">onSeekPoint</codeph> を使用するには、1 つのコールバック関数を定義して、以下のオブジェクトのいずれかをアタッチする必要があります。</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">Netstream インスタンスの <codeph class="+ topic/ph pr-d/codeph ">client</codeph> プロパティで参照されるオブジェクトです。</li><li class="- topic/li ">Netstream サブクラスのインスタンスです。Netstream は sealed クラスで、実行時にプロパティまたはメソッドを Netstream オブジェクトに追加できないことを意味します。ただし、NetStream のサブクラスを作成し、そのサブクラス内にイベントハンドラーを定義することはできます。また、サブクラスをダイナミックにしてイベントハンドラー関数をサブクラスのインスタンスに追加することもできます。</li></ul>
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/client" class="- topic/link "><linktext class="- topic/linktext ">client</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream_flash.events.DRMStatusEvent.DRM_STATUS_drmStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">drmStatus</apiName><shortdesc class="- topic/shortdesc ">
 DRM（デジタル著作権管理）で暗号化されたコンテンツの再生が開始されるときに送出されます（ユーザーが認証されてコンテンツの再生が許可された場合）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.DRMStatusEvent.DRM_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.DRMStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 DRM（デジタル著作権管理）で暗号化されたコンテンツの再生が開始されるときに送出されます（ユーザーが認証されてコンテンツの再生が許可された場合）。
 <p class="- topic/p ">
 DRMStatusEvent オブジェクトには、コンテンツがオフラインでも使用可能になっているか、またはバウチャーの期限が切れたときにコンテンツを表示できなくなるかなど、バウチャーに関連する情報が含まれています。
 </p>
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.events.xml#DRMStatusEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.DRMStatusEvent</linktext></link><link href="flash.net.drm.xml#DRMManager/resetDRMVouchers()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMManager.resetDRMVouchers()</linktext></link><link href="flash.net.xml#NetStream/setDRMAuthenticationCredentials()" class="- topic/link "><linktext class="- topic/linktext ">setDRMAuthenticationCredentials()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream_flash.events.DRMErrorEvent.DRM_ERROR_drmError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">drmError</apiName><shortdesc class="- topic/shortdesc ">
 NetStream オブジェクトが DRM（デジタル著作権管理）で暗号化されたファイルを再生しようとして、DRM に関連したエラーを検出したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.DRMErrorEvent.DRM_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.DRMErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 NetStream オブジェクトが DRM（デジタル著作権管理）で暗号化されたファイルを再生しようとして、DRM に関連したエラーを検出したときに送出されます。例えば、DRMErrorEvent オブジェクトは、ユーザー承認に失敗したときに送出されます。これは、ユーザーがコンテンツを表示する権利を購入していないためや、コンテンツプロバイダーが表示アプリケーションをサポートしていないためなどで発生します。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.events.xml#DRMErrorEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.DRMErrorEvent</linktext></link><link href="flash.net.drm.xml#DRMManager/resetDRMVouchers()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMManager.resetDRMVouchers()</linktext></link><link href="flash.net.xml#NetStream/setDRMAuthenticationCredentials()" class="- topic/link "><linktext class="- topic/linktext ">setDRMAuthenticationCredentials()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream_flash.events.DRMAuthenticateEvent.DRM_AUTHENTICATE_drmAuthenticate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">drmAuthenticate</apiName><shortdesc class="- topic/shortdesc ">
 NetStream オブジェクトが、再生の前にユーザーの認証資格情報を要求する、DRM（デジタル著作権管理）で暗号化されたコンテンツを再生しようとすると送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.DRMAuthenticateEvent.DRM_AUTHENTICATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.DRMAuthenticateEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 NetStream オブジェクトが、再生の前にユーザーの認証資格情報を要求する、DRM（デジタル著作権管理）で暗号化されたコンテンツを再生しようとすると送出されます。
 
 <p class="- topic/p ">
 NetStream オブジェクトの<codeph class="+ topic/ph pr-d/codeph "> setDRMAuthenticationCredentials()</codeph> メソッドを使用してユーザーを認証します。ユーザー認証に失敗した場合、認証が再試行され、NetStream オブジェクトの新しい DRMAuthenticateEvent イベントが送出されます。
 </p>
 
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.events.xml#DRMAuthenticateEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.DRMAuthenticateEvent</linktext></link><link href="flash.net.drm.xml#DRMManager/resetDRMVouchers()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMManager.resetDRMVouchers()</linktext></link><link href="flash.net.xml#NetStream/setDRMAuthenticationCredentials()" class="- topic/link "><linktext class="- topic/linktext ">setDRMAuthenticationCredentials()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onDRMContentData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">onDRMContentData</apiName><shortdesc class="- topic/shortdesc ">
 AIR がメディアファイル内に埋め込まれた DRM コンテンツメタデータを抽出したときに応答するリスナーを定義します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier "/><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 AIR がメディアファイル内に埋め込まれた DRM コンテンツメタデータを抽出したときに応答するリスナーを定義します。
 
 <p class="- topic/p ">DRMContentData オブジェクトには、DRM で保護されたメディアファイルの再生に求められるバウチャーを取得するために必要な情報が含まれています。DRMManager クラスを使用して、この情報でバウチャーをダウンロードします。</p>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">onDRMContentData</codeph> は <codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph> オブジェクトのプロパティです。このプロパティは、ローカルメディアファイルから埋め込みデータをプリロードするときにデータイベントに応答するので、「イベント」セクションにリストされています。詳しくは、NetStream クラスの説明を参照してください。<codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> メソッドまたはその他の EventDispatcher メソッドを使用して、<codeph class="+ topic/ph pr-d/codeph ">onDRMContentData</codeph> をイベントとして受け取ったり、処理したりすることはできません。代わりに、1 つのコールバック関数を定義して、以下のオブジェクトのいずれかを直接アタッチする必要があります。</p>
 <ul class="- topic/ul "><li class="- topic/li ">Netstream インスタンスの <codeph class="+ topic/ph pr-d/codeph ">client</codeph> プロパティで参照されるオブジェクトです。</li><li class="- topic/li ">Netstream サブクラスのインスタンスです。Netstream は sealed クラスで、実行時にプロパティまたはメソッドを Netstream オブジェクトに追加できないことを意味します。ただし、NetStream のサブクラスを作成し、そのサブクラス内にイベントハンドラーを定義することや、サブクラスをダイナミックにしてイベントハンドラー関数をサブクラスのインスタンスに追加することは可能です。</li></ul>
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.drm.xml#DRMContentData" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMContentData</linktext></link><link href="flash.net.xml#NetStream/preloadEmbeddedData()" class="- topic/link "><linktext class="- topic/linktext ">preloadEmbeddedData()</linktext></link><link href="flash.net.drm.xml#DRMManager" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMManager</linktext></link><link href="flash.net.drm.xml#DRMVoucher" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMVoucher</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onPlayStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">onPlayStatus</apiName><shortdesc class="- topic/shortdesc ">
 NetStream オブジェクトによるストリームの再生が終了した場合に応答するリスナーを定義します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier "/><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 NetStream オブジェクトによるストリームの再生が終了した場合に応答するリスナーを定義します。関連付けられたイベントオブジェクトは、<codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> イベントによって返される内容に加えて情報を提供します。このプロパティを使用すると、NetStream オブジェクトが再生リスト内のストリームを切り替えたとき（情報オブジェクト <codeph class="+ topic/ph pr-d/codeph ">NetStream.Play.Switch</codeph> で示される）、または NetStream オブジェクトが終わりまで再生したときに（情報オブジェクト <codeph class="+ topic/ph pr-d/codeph ">NetStream.Play.Complete</codeph> で示される）、コード内のアクションをトリガーできます。
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">onPlayStaus</codeph> は、実際は <codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph> オブジェクトのプロパティです。このプロパティは、Flash Media Server を使用したメディアのストリーミング時または FLV ファイルの再生中にデータイベントに応答するので、「イベント」セクションにリストされています。詳しくは、NetStream クラスの説明を参照してください。<codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> メソッドまたはその他の EventDispatcher メソッドを使用して、<codeph class="+ topic/ph pr-d/codeph ">onPlayStatus</codeph> をイベントとして受け取ったり、処理したりすることはできません。1 つのコールバック関数を定義して、以下のオブジェクトのいずれかをアタッチする必要があります。</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">Netstream インスタンスの <codeph class="+ topic/ph pr-d/codeph ">client</codeph> プロパティで参照されるオブジェクトです。</li><li class="- topic/li ">Netstream サブクラスのインスタンスです。Netstream は sealed クラスで、実行時にプロパティまたはメソッドを Netstream オブジェクトに追加できないことを意味します。NetStream のサブクラスを作成し、そのサブクラス内にイベントハンドラーを定義します。また、サブクラスをダイナミックにしてイベントハンドラー関数をサブクラスのインスタンスに追加することもできます。</li></ul>
 
 <p class="- topic/p ">このイベントでは、次のプロパティが指定された情報オブジェクトを返すことができます。</p>

 <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">code プロパティ</entry><entry class="- topic/entry ">level プロパティ</entry><entry class="- topic/entry ">説明</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NetStream.Play.Switch</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">status</codeph></entry><entry class="- topic/entry ">サブスクライバが、再生リストでストリームを切り替えています。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NetStream.Play.Complete</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">status</codeph></entry><entry class="- topic/entry ">再生が終了しました。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NetStream.Play.TransitionComplete</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">status</codeph></entry><entry class="- topic/entry ">ストリームのビットレートを切り替えた結果、サブスクライバは新しいストリームに切り替えています。</entry></row></tbody></tgroup></adobetable>
 
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/client" class="- topic/link "><linktext class="- topic/linktext ">client</linktext></link><link href="flash.events.xml#NetStatusEvent/NET_STATUS" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.NET_STATUS</linktext></link><link href="flash.net.xml#NetStream/event:asyncError" class="- topic/link "><linktext class="- topic/linktext ">asyncError</linktext></link><link href="flash.net.xml#NetStream/event:onMetaData" class="- topic/link "><linktext class="- topic/linktext ">onMetaData</linktext></link><link href="flash.net.xml#NetStream/event:onCuePoint" class="- topic/link "><linktext class="- topic/linktext ">onCuePoint</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onCuePoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">onCuePoint</apiName><shortdesc class="- topic/shortdesc ">
 ビデオファイルの再生中に埋め込まれたキューポイントに達した場合に応答するリスナーを定義します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier "/><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ビデオファイルの再生中に埋め込まれたキューポイントに達した場合に応答するリスナーを定義します。このリスナーを使用して、ビデオが特定のキューポイントに達したときにコード内のアクションをトリガーすることができます。これにより、アプリケーションの他のアクションとビデオ再生イベントと同期させることができます。Flash Media Serverのサポートするビデオファイル形式について詳しくは、<xref href="http://www.adobe.com/go/learn_fms_fileformats_jp" scope="external" class="- topic/xref ">www.adobe.com/go/learn_fms_fileformats_jp</xref> を参照してください。

 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">onCuePoint</codeph> は実際は <codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph> オブジェクトのプロパティです。このプロパティは、Flash Media Server を使用したメディアのストリーミング時または FLV ファイルの再生中にデータイベントに応答するので、「イベント」セクションにリストされています。詳しくは、NetStream クラスの説明を参照してください。<codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> メソッドまたはその他の EventDispatcher メソッドを使用して、<codeph class="+ topic/ph pr-d/codeph ">onCuePoint</codeph> をイベントとして受け取ったり、処理したりすることはできません。1 つのコールバック関数を定義して、以下のオブジェクトのいずれかをアタッチする必要があります。</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">Netstream インスタンスの <codeph class="+ topic/ph pr-d/codeph ">client</codeph> プロパティで参照されるオブジェクトです。</li><li class="- topic/li ">Netstream サブクラスのインスタンスです。Netstream は sealed クラスで、実行時にプロパティまたはメソッドを Netstream オブジェクトに追加できないことを意味します。NetStream のサブクラスを作成し、そのサブクラス内にイベントハンドラーを定義します。また、サブクラスをダイナミックにしてイベントハンドラー関数をサブクラスのインスタンスに追加することもできます。</li></ul>
 
 <p class="- topic/p ">関連付けられたイベントリスナーは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> メソッドの呼び出し後、ただしビデオ再生ヘッドが進むよりは前にトリガーされます。</p>
 
 <p class="- topic/p ">次のタイプのキューポイントをビデオファイルに埋め込むことができます。</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">ナビゲーションキューポイントは、ビデオファイル内のキーフレームと、その厳密に一致するキーフレームに対応するキューポイントの <codeph class="+ topic/ph pr-d/codeph ">time</codeph> プロパティを指定します。ナビゲーションキューポイントは、ビデオファイル内の移動に使用できるブックマークやエントリポイントとしてよく使われます。</li><li class="- topic/li ">時間を指定するイベントキューポイント。時間は、特定のキーフレームに対応していることも、対応していないこともあります。イベントキューポイントは、通常ビデオ内で何か処理が行われるときの時間を表し、他のアプリケーションイベントのトリガーに使用できます。</li></ul>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">onCuePoint</codeph> イベントオブジェクトには、次のプロパティが含まれます。</p>
 
 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">プロパティ</entry><entry class="- topic/entry ">説明</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">name</codeph></entry><entry class="- topic/entry ">キューポイントがビデオファイル内に埋め込まれたときに、キューポイントに指定された名前です。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">parameters</codeph></entry><entry class="- topic/entry ">このキューポイントに指定された名前と値のペアのストリングの結合配列です。パラメーター名または値には、任意の有効なストリングを使用できます。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">time</codeph></entry><entry class="- topic/entry ">ビデオファイルの再生時にキューポイントが発生した時間（秒数）です。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">type</codeph></entry><entry class="- topic/entry ">到達したキューポイントの種類です。ナビゲーションまたはイベントのいずれかです。</entry></row></tbody></tgroup></adobetable>
 
 <p class="- topic/p ">最初にビデオファイルをエンコードするとき、または Flash オーサリングツールでビデオの読み込みウィザードを使用してビデオクリップを読み込むときに、ビデオファイルにキューポイントを定義できます。</p>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> イベントも、ビデオファイル内のキューポイントに関する情報を取得します。ただし、<codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> イベントは、ビデオの再生が開始される前に、すべてのキューポイントに関する情報を取得します。<codeph class="+ topic/ph pr-d/codeph ">onCuePoint</codeph> イベントは、1 つのキューポイントについて、再生時のそのキューポイントに指定された時間での情報を取得します。</p>
 
 <p class="- topic/p ">一般に、コードで特定のキューポイントの発生時に応答するには、<codeph class="+ topic/ph pr-d/codeph ">onCuePoint</codeph> イベントを使用して、コード内の特定のアクションをトリガーします。</p>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> イベントに指定されたキューポイントのリストを使用すると、ビデオストリームの事前に定義されたポイントでユーザーにビデオの再生を開始させることができます。キューポイントの <codeph class="+ topic/ph pr-d/codeph ">time</codeph> プロパティの値を <codeph class="+ topic/ph pr-d/codeph ">NetStream.seek()</codeph> メソッドに渡して、そのキューポイントからビデオを再生します。</p>
 
 </apiDesc><example conref="examples\NetStream_onCuePoint.as" class="- topic/example "> 次の例は、外部 FLV ファイルをロードして、メタデータおよびキューポイントに応答する方法を示しています。<xref href="http://actionscriptexamples.com/2008/02/26/loading-flv-files-in-actionscript-30-using-the-netconnection-and-netstream-classes/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref> で作成された例。 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var video:Video = new Video();
addChild(video);
 
var nc:NetConnection = new NetConnection();
nc.connect(null);
 
var ns:NetStream = new NetStream(nc);
ns.client = {};
ns.client.onMetaData = ns_onMetaData;
ns.client.onCuePoint = ns_onCuePoint;
ns.play("http://www.helpexamples.com/flash/video/cuepoints.flv");
 
video.attachNetStream(ns);
 
function ns_onMetaData(item:Object):void {
    trace("metaData");
    // Resize video instance.
    video.width = item.width;
    video.height = item.height;
    // Center video instance on Stage.
    video.x = (stage.stageWidth - video.width) / 2;
    video.y = (stage.stageHeight - video.height) / 2;
}
 
function ns_onCuePoint(item:Object):void {
    trace("cuePoint");
    trace(item.name + "\t" + item.time);
}
</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/client" class="- topic/link "><linktext class="- topic/linktext ">client</linktext></link><link href="flash.net.xml#NetStream/event:onMetaData" class="- topic/link "><linktext class="- topic/linktext ">onMetaData</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onTextData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">onTextData</apiName><shortdesc class="- topic/shortdesc ">
  Flash Player が再生中のメディアファイルに埋め込まれたテキストデータを受信したときに応答するリスナーを定義します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.115.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier "/><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Flash Player が再生中のメディアファイルに埋め込まれたテキストデータを受信したときに応答するリスナーを定義します。テキストデータは UTF-8 形式で、3GP timed text 仕様に基づいて形式に関する情報を含めることができます。
  <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">onTextData</codeph> は実際は <codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph> オブジェクトのプロパティです。このプロパティは、Flash Media Server を使用したメディアのストリーミング時または FLV ファイルの再生中にデータイベントに応答するので、「イベント」セクションにリストされています。詳しくは、NetStream クラスの説明を参照してください。<codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> メソッドまたはその他の EventDispatcher メソッドを使用して、<codeph class="+ topic/ph pr-d/codeph ">onTextData</codeph> をイベントとして受け取ったり、処理したりすることはできません。1 つのコールバック関数を定義して、以下のオブジェクトのいずれかをアタッチする必要があります。</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">Netstream インスタンスの <codeph class="+ topic/ph pr-d/codeph ">client</codeph> プロパティで参照されるオブジェクトです。</li><li class="- topic/li ">Netstream サブクラスのインスタンスです。Netstream は sealed クラスで、実行時にプロパティまたはメソッドを Netstream オブジェクトに追加できないことを意味します。NetStream のサブクラスを作成し、そのサブクラス内にイベントハンドラーを定義します。また、サブクラスをダイナミックにしてイベントハンドラー関数をサブクラスのインスタンスに追加することもできます。</li></ul>
 
 <p class="- topic/p ">関連付けられたイベントリスナーは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> メソッドの呼び出し後、ただしビデオ再生ヘッドが進むよりは前にトリガーされます。</p>
  
  <p class="- topic/p ">onTextData イベントオブジェクトには、テキストデータごとに 1 つのプロパティが含まれます。</p>
  
  </apiDesc><example conref="examples\OnTextDataExample.as" class="- topic/example "> この例のコードでは、<codeph class="+ topic/ph pr-d/codeph ">Netstream.client</codeph> プロパティを使用して、<codeph class="+ topic/ph pr-d/codeph ">onTextData</codeph> および <codeph class="+ topic/ph pr-d/codeph ">onImageData</codeph> のコールバック関数を処理しています。<codeph class="+ topic/ph pr-d/codeph ">onImageDataHandler()</codeph> 関数は、onImageData イベントオブジェクト <codeph class="+ topic/ph pr-d/codeph ">imageData</codeph> を使用してバイト配列を格納します。また、<codeph class="+ topic/ph pr-d/codeph ">onTextDataHandler()</codeph> 関数は、onTextData イベントオブジェクト <codeph class="+ topic/ph pr-d/codeph ">textData</codeph> を使用して複数のテキストデータを格納します（各データは、<codeph class="+ topic/ph pr-d/codeph ">textData</codeph> オブジェクトのプロパティです）。
 <p class="- topic/p ">コード中の場所 <codeph class="+ topic/ph pr-d/codeph ">yourURL</codeph> を、テキストまたはイメージメタデータを含むメディアファイルの実際の場所で置き換える必要があります。</p>
 <p class="- topic/p "> カスタムクラスを使用してイメージデータやテキストデータを処理することもできます。詳細および例については、記事「<xref href="http://www.adobe.com/devnet/flash/quickstart" scope="external" class="- topic/xref ">Flash Video のメタデータおよびキューポイントの処理（英語）</xref>」を参照してください。</p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.*;
    import flash.net.*;
    import flash.media.*;
    import flash.system.*;
    import flash.events.*;

        public class OnTextDataExample extends Sprite {
                                              
            public function OnTextDataExample():void {

                var customClient:Object = new Object();
                customClient.onImageData = onImageDataHandler;           
                customClient.onTextData = onTextDataHandler;               

                var my_nc:NetConnection = new NetConnection();
                my_nc.connect(null);
                var my_ns:NetStream = new NetStream(my_nc);
                my_ns.play("yourURL");
                my_ns.client = customClient;

                var my_video:Video = new Video();
                my_video.attachNetStream(my_ns);
                addChild(my_video);

            }

            public function onImageDataHandler(imageData:Object):void {

                trace("imageData length: " + imageData.data.length);
                var imageloader:Loader = new Loader();           
                imageloader.loadBytes(imageData.data); // imageData.data is a ByteArray object.
                addChild(imageloader);
            }

    
            public function onTextDataHandler(textData:Object):void {

                trace("--- textData properties ----");
                var key:String;

                for (key in textData) {
                    trace(key + ": " + textData[key]);
                }
            }

        }

}

</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection" class="- topic/link "><linktext class="- topic/linktext ">NetConnection</linktext></link><link href="flash.net.xml#NetStream/client" class="- topic/link "><linktext class="- topic/linktext ">client</linktext></link><link href="flash.net.xml#NetStream/event:asyncError" class="- topic/link "><linktext class="- topic/linktext ">asyncError</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.net.xml#NetStream/event:onImageData" class="- topic/link "><linktext class="- topic/linktext ">onImageData</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onImageData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">onImageData</apiName><shortdesc class="- topic/shortdesc ">
 再生中のメディアファイルにバイト配列として埋め込まれているイメージデータを Flash Player が受け取ったときに応答するリスナーを定義します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.115.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier "/><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 再生中のメディアファイルにバイト配列として埋め込まれているイメージデータを Flash Player が受け取ったときに応答するリスナーを定義します。イメージデータは、JPEG、PNG または GIF のいずれかのコンテンツを作成できます。表示オブジェクトにバイト配列を読み込むには、<codeph class="+ topic/ph pr-d/codeph ">flash.display.Loader.loadBytes()</codeph> メソッドを使用します。
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">onImageData</codeph> は実際は <codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph> オブジェクトのプロパティです。このプロパティは、Flash Media Server を使用したメディアのストリーミング時または FLV ファイルの再生中にデータイベントに応答するので、「イベント」セクションにリストされています。詳しくは、NetStream クラスの説明を参照してください。<codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> メソッドまたはその他の EventDispatcher メソッドを使用して、<codeph class="+ topic/ph pr-d/codeph ">onImageData</codeph> をイベントとして受け取ったり、処理したりすることはできません。1 つのコールバック関数を定義して、以下のオブジェクトのいずれかをアタッチする必要があります。</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">Netstream インスタンスの <codeph class="+ topic/ph pr-d/codeph ">client</codeph> プロパティで参照されるオブジェクトです。</li><li class="- topic/li ">Netstream サブクラスのインスタンスです。Netstream は sealed クラスで、実行時にプロパティまたはメソッドを Netstream オブジェクトに追加できないことを意味します。NetStream のサブクラスを作成し、そのサブクラス内にイベントハンドラーを定義します。また、サブクラスをダイナミックにしてイベントハンドラー関数をサブクラスのインスタンスに追加することもできます。</li></ul>
 
 <p class="- topic/p ">関連付けられたイベントリスナーは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> メソッドの呼び出し後、ただしビデオ再生ヘッドが進むよりは前にトリガーされます。</p>
 
 <p class="- topic/p ">onImageData イベントオブジェクトは、イメージデータを AMF0 データチャンネルを介して送信されるバイト配列として格納します。</p>
 
 </apiDesc><example conref="examples\OnTextDataExample.as" class="- topic/example "> この例のコードでは、<codeph class="+ topic/ph pr-d/codeph ">Netstream.client</codeph> プロパティを使用して、<codeph class="+ topic/ph pr-d/codeph ">onTextData</codeph> および <codeph class="+ topic/ph pr-d/codeph ">onImageData</codeph> のコールバック関数を処理しています。<codeph class="+ topic/ph pr-d/codeph ">onImageDataHandler()</codeph> 関数は、onImageData イベントオブジェクト <codeph class="+ topic/ph pr-d/codeph ">imageData</codeph> を使用してバイト配列を格納します。また、<codeph class="+ topic/ph pr-d/codeph ">onTextDataHandler()</codeph> 関数は、onTextData イベントオブジェクト <codeph class="+ topic/ph pr-d/codeph ">textData</codeph> を使用して複数のテキストデータを格納します（各データは、<codeph class="+ topic/ph pr-d/codeph ">textData</codeph> オブジェクトのプロパティです）。
 <p class="- topic/p ">コード中の場所 <codeph class="+ topic/ph pr-d/codeph ">yourURL</codeph> を、テキストまたはイメージメタデータを含むメディアファイルの実際の場所で置き換える必要があります。</p>
 <p class="- topic/p "> カスタムクラスを使用してイメージデータやテキストデータを処理することもできます。詳細および例については、記事「<xref href="http://www.adobe.com/devnet/flash/quickstart" scope="external" class="- topic/xref ">Flash Video のメタデータおよびキューポイントの処理（英語）</xref>」を参照してください。</p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.*;
    import flash.net.*;
    import flash.media.*;
    import flash.system.*;
    import flash.events.*;

        public class OnTextDataExample extends Sprite {
                                              
            public function OnTextDataExample():void {

                var customClient:Object = new Object();
                customClient.onImageData = onImageDataHandler;           
                customClient.onTextData = onTextDataHandler;               

                var my_nc:NetConnection = new NetConnection();
                my_nc.connect(null);
                var my_ns:NetStream = new NetStream(my_nc);
                my_ns.play("yourURL");
                my_ns.client = customClient;

                var my_video:Video = new Video();
                my_video.attachNetStream(my_ns);
                addChild(my_video);

            }

            public function onImageDataHandler(imageData:Object):void {

                trace("imageData length: " + imageData.data.length);
                var imageloader:Loader = new Loader();           
                imageloader.loadBytes(imageData.data); // imageData.data is a ByteArray object.
                addChild(imageloader);
            }

    
            public function onTextDataHandler(textData:Object):void {

                trace("--- textData properties ----");
                var key:String;

                for (key in textData) {
                    trace(key + ": " + textData[key]);
                }
            }

        }

}

</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection" class="- topic/link "><linktext class="- topic/linktext ">NetConnection</linktext></link><link href="flash.display.xml#Loader/loadBytes()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.loadBytes()</linktext></link><link href="flash.net.xml#NetStream/client" class="- topic/link "><linktext class="- topic/linktext ">client</linktext></link><link href="flash.net.xml#NetStream/event:asyncError" class="- topic/link "><linktext class="- topic/linktext ">asyncError</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.net.xml#NetStream/event:onTextData" class="- topic/link "><linktext class="- topic/linktext ">onTextData</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onMetaData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">onMetaData</apiName><shortdesc class="- topic/shortdesc ">
 再生中のビデオに埋め込まれた記述的情報を Flash Player が受け取ったときに応答するリスナーを定義します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier "/><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 再生中のビデオに埋め込まれた記述的情報を Flash Player が受け取ったときに応答するリスナーを定義します。Flash Media Serverのサポートするビデオファイル形式について詳しくは、<xref href="http://www.adobe.com/go/learn_fms_fileformats_jp" scope="external" class="- topic/xref ">www.adobe.com/go/learn_fms_fileformats_jp</xref> を参照してください。
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> は実際は <codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph> オブジェクトのプロパティです。このプロパティは、Flash Media Server を使用したメディアのストリーミング時または FLV ファイルの再生中にデータイベントに応答するので、「イベント」セクションにリストされています。NetStream クラスの説明について詳しくは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph> プロパティを参照してください。<codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> メソッドまたはその他の EventDispatcher メソッドを使用して、<codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> をイベントとして受け取ったり、処理したりすることはできません。1 つのコールバック関数を定義して、以下のオブジェクトのいずれかをアタッチする必要があります。</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">Netstream インスタンスの <codeph class="+ topic/ph pr-d/codeph ">client</codeph> プロパティで参照されるオブジェクトです。</li><li class="- topic/li ">Netstream サブクラスのインスタンスです。Netstream は sealed クラスで、実行時にプロパティまたはメソッドを Netstream オブジェクトに追加できないことを意味します。NetStream のサブクラスを作成し、そのサブクラス内にイベントハンドラーを定義することができます。また、サブクラスをダイナミックにしてイベントハンドラー関数をサブクラスのインスタンスに追加することもできます。</li></ul>
 
 <p class="- topic/p ">Flash Video Exporter ユーティリティ（バージョン 1.1 以降）は、ビデオの継続時間、作成日付、データレート、その他の情報をビデオファイルに埋め込みます。各ビデオエンコーダーは、それぞれ異なるメタデータのセットを埋め込みます。</p>
 
 <p class="- topic/p ">関連付けられたイベントリスナーは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> メソッドの呼び出し後、ただしビデオ再生ヘッドが進むよりは前にトリガーされます。</p>
 
 <p class="- topic/p ">多くの場合、ストリームメタデータに埋め込まれた継続期間の値は実際の継続時間に近似したものになりますが、正確な値ではありません。つまり、再生ヘッドがビデオストリームの末尾にある場合、FLV メタデータに埋め込まれた継続期間の値は <codeph class="+ topic/ph pr-d/codeph ">NetStream.time</codeph> プロパティの値と必ずしも一致するわけではありません。</p>
 <p class="- topic/p ">onMetaData イベントハンドラーに渡されるイベントオブジェクトには、各データに 1 つのプロパティが含まれています。</p>
 
 </apiDesc><example conref="examples\NetStream_onCuePoint.as" class="- topic/example "> 次の例は、外部 FLV ファイルをロードして、メタデータおよびキューポイントに応答する方法を示しています。<xref href="http://actionscriptexamples.com/2008/02/26/loading-flv-files-in-actionscript-30-using-the-netconnection-and-netstream-classes/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref> で作成された例。 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var video:Video = new Video();
addChild(video);
 
var nc:NetConnection = new NetConnection();
nc.connect(null);
 
var ns:NetStream = new NetStream(nc);
ns.client = {};
ns.client.onMetaData = ns_onMetaData;
ns.client.onCuePoint = ns_onCuePoint;
ns.play("http://www.helpexamples.com/flash/video/cuepoints.flv");
 
video.attachNetStream(ns);
 
function ns_onMetaData(item:Object):void {
    trace("metaData");
    // Resize video instance.
    video.width = item.width;
    video.height = item.height;
    // Center video instance on Stage.
    video.x = (stage.stageWidth - video.width) / 2;
    video.y = (stage.stageHeight - video.height) / 2;
}
 
function ns_onCuePoint(item:Object):void {
    trace("cuePoint");
    trace(item.name + "\t" + item.time);
}
</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection" class="- topic/link "><linktext class="- topic/linktext ">NetConnection</linktext></link><link href="flash.net.xml#NetStream/client" class="- topic/link "><linktext class="- topic/linktext ">client</linktext></link><link href="flash.net.xml#NetStream/event:asyncError" class="- topic/link "><linktext class="- topic/linktext ">asyncError</linktext></link><link href="flash.net.xml#NetStream/event:onCuePoint" class="- topic/link "><linktext class="- topic/linktext ">onCuePoint</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.net.xml#NetStream/time" class="- topic/link "><linktext class="- topic/linktext ">time</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onXMPData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">onXMPData</apiName><shortdesc class="- topic/shortdesc ">
 再生中のビデオに埋め込まれている Adobe Extensible Metadata Platform（XMP）独自の情報を Flash Player が受け取ったときに応答するリスナーを定義します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier "/><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 再生中のビデオに埋め込まれている Adobe Extensible Metadata Platform（XMP）独自の情報を Flash Player が受け取ったときに応答するリスナーを定義します。Flash Media Serverのサポートするビデオファイル形式について詳しくは、<xref href="http://www.adobe.com/go/learn_fms_fileformats_jp" scope="external" class="- topic/xref ">www.adobe.com/go/learn_fms_fileformats_jp</xref> を参照してください。
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">onXMPData</codeph> は実際は <codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph> オブジェクトのプロパティです。このプロパティは、Flash Media Server を使用したメディアのストリーミング時または FLV ファイルの再生中にデータイベントに応答するので、「イベント」セクションにリストされています。NetStream クラスの説明について詳しくは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph> プロパティを参照してください。<codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> メソッドまたはその他の EventDispatcher メソッドを使用して、<codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> をイベントとして受け取ったり、処理したりすることはできません。1 つのコールバック関数を定義して、以下のオブジェクトのいずれかをアタッチする必要があります。</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">Netstream インスタンスの <codeph class="+ topic/ph pr-d/codeph ">client</codeph> プロパティで参照されるオブジェクトです。</li><li class="- topic/li ">Netstream サブクラスのインスタンスです。Netstream は sealed クラスで、実行時にプロパティまたはメソッドを Netstream オブジェクトに追加できないことを意味します。ただし、NetStream のサブクラスを作成し、そのサブクラス内にイベントハンドラーを定義することはできます。また、サブクラスをダイナミックにしてイベントハンドラー関数をサブクラスのインスタンスに追加することもできます。</li></ul>
 
 <p class="- topic/p ">関連付けられたイベントリスナーは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> メソッドの呼び出し後、ただしビデオ再生ヘッドが進むよりは前にトリガーされます。</p>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">onXMPData()</codeph> イベント処理機能に渡されるオブジェクトは、1 つの<codeph class="+ topic/ph pr-d/codeph ">データ</codeph>プロパティ（ストリング）を持ちます。このストリングは最上位の UUID ボックスから生成されます（最上位ボックスの 128 ビット UUID は <codeph class="+ topic/ph pr-d/codeph ">BE7ACFCB-97A9-42E8-9C71-999491E3AFAC</codeph>）。この最上位 UUID ボックスには、null を持たない UTF-8 ストリングとして表される XML ドキュメントが 1 つだけ含まれます。</p>
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection</linktext></link><link href="flash.net.xml#NetStream/client" class="- topic/link "><linktext class="- topic/linktext ">client</linktext></link><link href="flash.net.xml#NetStream/event:asyncError" class="- topic/link "><linktext class="- topic/linktext ">asyncError</linktext></link><link href="flash.net.xml#NetStream/event:onCuePoint" class="- topic/link "><linktext class="- topic/linktext ">onCuePoint</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.net.xml#NetStream/time" class="- topic/link "><linktext class="- topic/linktext ">time</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream_flash.events.NetStatusEvent.NET_STATUS_netStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">netStatus</apiName><shortdesc class="- topic/shortdesc ">
 NetStream オブジェクトが、そのステータスまたはエラーの状態をレポートすると送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.NetStatusEvent.NET_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.NetStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 NetStream オブジェクトが、そのステータスまたはエラーの状態をレポートすると送出されます。<codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> イベントには、<codeph class="+ topic/ph pr-d/codeph ">info</codeph> プロパティが含まれます。このプロパティは、接続試行が成功したかどうかなど、イベントに関する特定の情報を含む情報オブジェクトです。
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.events.xml#NetStatusEvent/info" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 入出力エラーが発生してネットワーク処理が失敗したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 入出力エラーが発生してネットワーク処理が失敗したときに送出されます。
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:NetStream_flash.events.AsyncErrorEvent.ASYNC_ERROR_asyncError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">asyncError</apiName><shortdesc class="- topic/shortdesc ">
 非同期形式で、つまりネイティブ非同期コードから例外がスローされると送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.AsyncErrorEvent.ASYNC_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.AsyncErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 非同期形式で、つまりネイティブ非同期コードから例外がスローされると送出されます。このイベントは、サーバーが定義されていないメソッドをクライアント上で呼び出したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/event:onPlayStatus" class="- topic/link "><linktext class="- topic/linktext ">onPlayStatus</linktext></link><link href="flash.net.xml#NetStream/event:onMetaData" class="- topic/link "><linktext class="- topic/linktext ">onMetaData</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream_flash.events.StatusEvent.STATUS_status" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">status</apiName><shortdesc class="- topic/shortdesc ">
 アプリケーションが NetStream.play() メソッドを呼び出して DRM（デジタル著作権管理）で暗号化されたコンテンツを再生しようとすると送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.StatusEvent.STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.StatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 アプリケーションが <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> メソッドを呼び出して DRM（デジタル著作権管理）で暗号化されたコンテンツを再生しようとすると送出されます。ステータスコードプロパティの値は <codeph class="+ topic/ph pr-d/codeph ">"DRM.encryptedFLV"</codeph> です。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.net:NetStream:NetStream" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">NetStream</apiName><shortdesc class="- topic/shortdesc ">
     メディアファイルを再生するときに使用できるストリームを作成し、NetConnection オブジェクトにデータを送信します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream, constructor
     
      </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">NetConnection インスタンスは接続されていません。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">connection</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:NetConnection</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">NetConnection オブジェクトです。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">peerID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">connectToFMS</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このオプションのパラメーターは Flash Player 10 以降で、RTMFP 接続して使用する場合に利用可能です。（<codeph class="+ topic/ph pr-d/codeph ">NetConnection.protocol</codeph> プロパティの値が <codeph class="+ topic/ph pr-d/codeph ">"rtmfp"</codeph> でない場合、このパラメーターは無視されます。）次の値のいずれかを使用します。
     
     <ul class="- topic/ul "><li class="- topic/li ">Flash Media Server に接続するには、<codeph class="+ topic/ph pr-d/codeph ">NetStream.CONNECT_TO_FMS</codeph> を指定します。 </li><li class="- topic/li ">ピアーに直接パブリッシュするには、<codeph class="+ topic/ph pr-d/codeph ">NetStream.DIRECT_CONNECTIONS</codeph> を指定します。</li><li class="- topic/li ">特定のピアーから直接再生するには、ピアーの識別子を指定します（「<codeph class="+ topic/ph pr-d/codeph ">NetConnection.nearID</codeph>」および「<codeph class="+ topic/ph pr-d/codeph ">NetStream.farID</codeph>」を参照）。</li><li class="- topic/li ">（Flash Player 10.1 または AIR 2 以降）ピアーツーピアーマルチキャストグループでストリームをパブリッシュまたは再生するには、<codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> ストリングを指定します（「GroupSpecifier クラス」を参照）。</li></ul>
     
     <p class="- topic/p ">ほとんどの場合、<codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> にはローカルシステムでネットワークアップリンクを使用する可能性があります。 この場合、ユーザーはコンピューターのネットワークリソースを使用する権限を求められています。 ユーザーがこの使用を許可する場合は、<codeph class="+ topic/ph pr-d/codeph ">NetStream.Connect.Success</codeph> NetStatusEvent が NetConnection のイベントリスナーに送信されます。ユーザーが許可を拒否する場合、<codeph class="+ topic/ph pr-d/codeph ">NetStream.Connect.Rejected</codeph> イベントが送信されます。<codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> を指定する場合、<codeph class="+ topic/ph pr-d/codeph ">NetStream.Connect.Success</codeph> イベントが受信されるまで、NetStream オブジェクトのメソッドを使用するエラーになり、例外が発生します。</p>
     
     
     <p class="- topic/p ">このパラメーターをコンストラクターのステートメントに含めて <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の値を渡すと、その値は「<codeph class="+ topic/ph pr-d/codeph ">connectToFMS</codeph>」に設定されます。</p>
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     メディアファイルを再生するときに使用できるストリームを作成し、NetConnection オブジェクトにデータを送信します。
     
     </apiDesc><example conref="examples\NetStreamExample_constructor.as" class="- topic/example "> 次のコードは、変数 <codeph class="+ topic/ph pr-d/codeph ">videoURL</codeph> に割り当てられたビデオを連続的にダウンロードし、表示する接続を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
            var my_nc:NetConnection = new NetConnection();
            my_nc.connect(null);
            var my_ns:NetStream = new NetStream(my_nc);
            my_ns.play(videoURL);
            var my_video:Video = new Video();
            my_video.attachNetStream(my_ns);
            addChild(my_video);
</codeblock></example><example conref="examples\NetStreamExample_constructor2.as" class="- topic/example "> 次のコードは、（変数 <codeph class="+ topic/ph pr-d/codeph ">videoURL</codeph> に割り当てられた）ビデオを、<codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> コマンドで指定されているリモート Flash Media Server インスタンスでストリーミングし、表示する接続を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
            var my_nc:NetConnection = new NetConnection();
            my_nc.connect("rtmp://www.yourfmsserver.com/someappname");
            var my_ns:NetStream = new NetStream(my_nc, NetStream.CONNECT_TO_FMS);
            my_ns.play(videoURL);
            var my_video:Video = new Video();
            my_video.attachNetStream(my_ns);
            addChild(my_video);
</codeblock></example></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/CONNECT_TO_FMS" class="- topic/link "><linktext class="- topic/linktext ">CONNECT_TO_FMS</linktext></link><link href="flash.net.xml#NetStream/DIRECT_CONNECTIONS" class="- topic/link "><linktext class="- topic/linktext ">DIRECT_CONNECTIONS</linktext></link><link href="flash.net.xml#NetStream/farID" class="- topic/link "><linktext class="- topic/linktext ">farID</linktext></link><link href="flash.media.xml#Video/attachCamera()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Video.attachCamera()</linktext></link><link href="flash.net.xml#GroupSpecifier" class="- topic/link "><linktext class="- topic/linktext ">flash.net.GroupSpecifier</linktext></link><link href="flash.net.xml#GroupSpecifier/groupspecWithAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.GroupSpecifier.groupspecWithAuthorizations()</linktext></link><link href="flash.net.xml#GroupSpecifier/groupspecWithoutAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.GroupSpecifier.groupspecWithoutAuthorizations()</linktext></link><link href="flash.net.xml#GroupSpecifier/multicastEnabled" class="- topic/link "><linktext class="- topic/linktext ">flash.net.GroupSpecifier.multicastEnabled</linktext></link><link href="flash.net.xml#NetConnection" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection</linktext></link><link href="flash.net.xml#NetConnection/nearID" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.nearID</linktext></link><link href="flash.net.xml#NetConnection/protocol" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.protocol</linktext></link><link href="flash.net.xml#NetGroup" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetStream_Connect_Rejected" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetStream.Connect.Rejected"</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetStream_Connect_Success" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetStream.Connect.Success"</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:NetStream:appendBytesAction" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">appendBytesAction</apiName><shortdesc class="- topic/shortdesc ">
     タイムスケールの不連続性を示し、FIFO をフラッシュして、ファイルヘッダーまたは FLV タグの先頭を予期するようバイトパーサーに指示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">netStreamAppendBytesAction</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     タイムスケールの不連続性を示し、FIFO をフラッシュして、ファイルヘッダーまたは FLV タグの先頭を予期するようバイトパーサーに指示します。
     
     <p class="- topic/p ">
     <codeph class="+ topic/ph pr-d/codeph ">NetStream.seek()</codeph> を呼び出すと、NetStream バッファーがフラッシュされます。バイトパーサーは、<codeph class="+ topic/ph pr-d/codeph ">appendBytesAction()</codeph> を呼び出して <codeph class="+ topic/ph pr-d/codeph ">RESET_BEGIN</codeph> または <codeph class="+ topic/ph pr-d/codeph ">RESET_SEEK</codeph> 引数を渡すまでフラッシュモードのままです。「<codeph class="+ topic/ph pr-d/codeph ">NetStream.Seek.Notify</codeph>」イベントをキャプチャして、シーク後に <codeph class="+ topic/ph pr-d/codeph ">appendBytesAction()</codeph> を呼び出します。新しいファイルヘッダーは、再生リストおよび <codeph class="+ topic/ph pr-d/codeph ">NetStream.seek()</codeph> を呼び出さないシークをサポートできます。
     </p>
     
     <p class="- topic/p ">
     このメソッドを呼び出して、<codeph class="+ topic/ph pr-d/codeph ">onSeekPoint()</codeph> コールバックのバイトカウンターをリセットすることもできます。
     </p>
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/appendBytes()" class="- topic/link "><linktext class="- topic/linktext ">appendBytes()</linktext></link><link href="flash.net.xml#NetStream/seek()" class="- topic/link "><linktext class="- topic/linktext ">seek()</linktext></link><link href="flash.net.xml#NetStreamAppendBytesAction" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStreamAppendBytesAction</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:appendBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">appendBytes</apiName><shortdesc class="- topic/shortdesc ">
     ByteArray をプレイアウトのために NetStream に渡します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bytes</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ByteArray をプレイアウトのために NetStream に渡します。「データ生成モード」の NetStream に対してこのメソッドを呼び出します。NetStream をデータ生成モードにするには、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> に接続されている NetConnection 上に作成された NetStream に対して <codeph class="+ topic/ph pr-d/codeph ">NetStream.play(null)</codeph> を呼び出します。データ生成モードになっていない NetStream に対して <codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> を呼び出すとエラーになり、例外が発生します。
     
     <p class="- topic/p ">
     バイトパーサーは、ヘッダー付きの FLV ファイルを認識します。ヘッダーが解析された後、<codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> は、今後のすべての呼び出しが同じ実際のファイルまたは仮想ファイルの連続であると予期します。<codeph class="+ topic/ph pr-d/codeph ">appendBytesAction(NetStreamAppendBytesAction.RESET_BEGIN)</codeph> が呼び出さるまでは、別のヘッダーは予期されません。
     </p>
     
     <p class="- topic/p ">
     NetStream オブジェクトには、<codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> から NetStream への FIFO と、プレイアウトバッファーの 2 つのバッファーがあります。FIFO は部分 FLV タグ再アセンブリバッファで、不完全な FLV タグが 1 つしか含まれません。<codeph class="+ topic/ph pr-d/codeph ">NetStream.seek()</codeph> を呼び出すと、両方のバッファーがフラッシュされます。<codeph class="+ topic/ph pr-d/codeph ">seek()</codeph> を呼び出してから、<codeph class="+ topic/ph pr-d/codeph ">appendBytesAction()</codeph> を呼び出してタイムスケールをリセットし、付加された次のメッセージのタイムスタンプから開始します。
     </p>
     
     <p class="- topic/p ">
     FLV タグが完全になるまで、<codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> を呼び出すたびに、バイトが FIFO に追加されます。FLV タグが完全になったら、そのタグはプレイアウトバッファーに移動します。<codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> を呼び出すことで、複数の FLV タグを書き込むことができます。既存の FLV タグは、最初のバイトによって完全になります（この FLV タグはプレイアウトバッファーに移動します）。完全な FLV タグはプレイアウトバッファーに移動します。完全な FLV タグの形成に使用されなかった残りのバイトは FIFO に移動します。FIFO 内のバイトは、<codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> への呼び出しによって完全になるか、<codeph class="+ topic/ph pr-d/codeph ">RESET_SEEK</codeph> または <codeph class="+ topic/ph pr-d/codeph ">RESET_BEGIN</codeph> 引数を指定して <codeph class="+ topic/ph pr-d/codeph ">appendBytesAction()</codeph> を呼び出すことでフラッシュされます。
     </p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>バイトパーサーは、以降の <codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> への呼び出しが行われるまで、その <codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> への呼び出しを完全にはデコードできない場合があります。 </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/appendBytesAction()" class="- topic/link "><linktext class="- topic/linktext ">appendBytesAction()</linktext></link><link href="flash.net.xml#NetStream/seek()" class="- topic/link "><linktext class="- topic/linktext ">seek()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:attachAudio" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attachAudio</apiName><shortdesc class="- topic/shortdesc ">
     ソースとして渡された Microphone オブジェクトからのオーディオストリームを、NetStream オブジェクトに接続します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiDefaultValue>"null"
     </apiDefaultValue><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">microphone</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.media:Microphone</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">送信するオーディオストリームのソースです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソースとして渡された Microphone オブジェクトからのオーディオストリームを、NetStream オブジェクトに接続します。このメソッドは、指定されたストリームの発行者だけが使用できます。
     
     <p class="- topic/p ">このメソッドを Flash Media Server で使用し、ライブオーディオをサーバーに送信します。このメソッドは、<codeph class="+ topic/ph pr-d/codeph ">publish()</codeph> メソッドを呼び出す前、または呼び出した後に呼び出します。
     </p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">Microphone.rate</codeph> プロパティを、サウンドキャプチャデバイスのレートに合わせて設定します。<codeph class="+ topic/ph pr-d/codeph ">setSilenceLevel()</codeph> を呼び出して、無音レベルのしきい値を設定します。オーディオストリームのサウンドプロパティ（ボリュームとパン）を制御するには、<codeph class="+ topic/ph pr-d/codeph ">Microphone.soundTransform</codeph> プロパティを使用します。</p>
     
     <pre xml:space="preserve" class="- topic/pre ">
     var nc:NetConnection = new NetConnection();
     nc.connect("rtmp://server.domain.com/app");
     var ns:NetStream = new NetStream(nc);
     
     var live_mic:Microphone = Microphone.get();
     live_mic.rate = 8;
     live_mic.setSilenceLevel(20,200);
     
     var soundTrans:SoundTransform = new SoundTransform();
     soundTrans.volume = 6;
     live_mic.soundTransform = soundTrans;
     
     ns.attachAudio(live_mic);
     ns.publish("mic_stream","live")
     </pre>
     
     <p class="- topic/p "> オーディオを聞くには、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> メソッドを呼び出し、<codeph class="+ topic/ph pr-d/codeph ">DisplayObjectContainer.addChild()</codeph> を呼び出して、オーディオを表示リストのオブジェクトに転送します。
     </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.media.xml#Microphone" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone</linktext></link><link href="flash.display.xml#DisplayObjectContainer/addChild()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObjectContainer.addChild()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:attachCamera" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attachCamera</apiName><shortdesc class="- topic/shortdesc ">
     カメラからビデオのキャプチャを開始します。または、theCamera が null に設定されると、キャプチャを停止します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">theCamera</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.media:Camera</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ビデオ転送のソースです。有効な値は、ビデオのキャプチャを開始する Camera オブジェクトと <codeph class="+ topic/ph pr-d/codeph ">null</codeph> です。<codeph class="+ topic/ph pr-d/codeph ">null</codeph> を渡すと、ビデオのキャプチャが停止され、ユーザーが送信した追加パラメーターはどれも無視されます。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">snapshotMilliseconds</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">-1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ビデオストリームが連続的、単一のフレーム、コマ撮り写真の作成に使用する一連の単一フレームのいずれであるかを指定します。
     
     <ul class="- topic/ul "><li class="- topic/li ">このパラメーターを省略すると、値 <codeph class="+ topic/ph pr-d/codeph ">null</codeph> を <codeph class="+ topic/ph pr-d/codeph ">attachCamera</codeph> に渡すまで、すべてのビデオがキャプチャされます。</li><li class="- topic/li ">0 を渡すと、単一のビデオフレームのみがキャプチャされます。既存のストリーム内に "スナップショット" を転送するには、この値を使用します。<ph class="- topic/ph ">Flash Player または </ph> AIR では、無効なパラメーター、負のパラメーター、または非数値パラメーターは 0 と解釈されます。</li><li class="- topic/li ">正の値を渡すと、単一のビデオフレームがキャプチャされた後、スナップショットのトレーラーとして、指定の長さの一時停止が追加されます。コマ撮り写真の効果を作成するには、この値を使用します。</li></ul>
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     カメラからビデオのキャプチャを開始します。または、<codeph class="+ topic/ph pr-d/codeph ">theCamera</codeph> が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> に設定されると、キャプチャを停止します。このメソッドは、指定されたストリームの発行者だけが使用できます。
     
     <p class="- topic/p ">このメソッドは、Flash Media Server で使用することを目的としています。詳細については、クラスの説明を参照してください。</p>
     
     <p class="- topic/p "> ビデオソースのアタッチ後に、<codeph class="+ topic/ph pr-d/codeph ">NetStream.publish()</codeph> を呼び出して転送を開始する必要があります。ビデオを表示するサブスクライバは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> と <codeph class="+ topic/ph pr-d/codeph ">Video.attachCamera()</codeph> の各メソッドを呼び出して、ステージ上にビデオを表示する必要があります。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">snapshotMilliseconds</codeph> を使用して値 0 を指定すると、単一のスナップショットを送信できます。また、正の数を指定して、ビデオフィードに指定のミリ秒数のトレーラーを追加すると、一連のスナップショット、つまり事実上のコマ落としビデオを送信することができます。 トレーラーは、ビデオメッセージの表示時間を拡張します。<codeph class="+ topic/ph pr-d/codeph ">attachCamera()</codeph> を、<codeph class="+ topic/ph pr-d/codeph ">snapshotMilliseconds</codeph> に正の値を指定して繰り返し呼び出すと、スナップショットとトレーラーが交互に繰り返されるシーケンスになり、コマ落としビデオが作成されます。例えば、毎日 1 フレームずつキャプチャして、ビデオファイルに追加することができます。サブスクライバがファイルを再生すると、各フレームが指定のミリ秒間画面上に表示され、その後、次のフレームが表示されます。</p>
     
     <p class="- topic/p ">この <codeph class="+ topic/ph pr-d/codeph ">snapshotMilliseconds</codeph> パラメーターの目的は、<codeph class="+ topic/ph pr-d/codeph ">fps</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">Camera.setMode()</codeph> で設定可能）とは異なります。<codeph class="+ topic/ph pr-d/codeph ">snapshotMilliseconds</codeph> は、記録されたフレーム間の経過時間を制御するために指定します。<codeph class="+ topic/ph pr-d/codeph ">fps</codeph> は、記録時と再生時の経過時間を制御するために <codeph class="+ topic/ph pr-d/codeph ">Camera.setMode()</codeph> を使用して指定します。</p>
     
     <p class="- topic/p ">例えば、5 分ごとにスナップショットを 1 枚撮り、合計で 100 枚のスナップショットを撮るとします。この操作を行うには、次の 2 つの方法があります。</p>
     
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NetStream.attachCamera(myCamera, 500)</codeph> コマンドを 5 分に 1 回、合計 100 回実行できます。この場合、記録に 500 分かかりますが、生成されるファイルは 50 秒（100 フレーム、各フレーム間 500 ミリ秒）で再生されます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Camera.setMode()</codeph> コマンドを、<codeph class="+ topic/ph pr-d/codeph ">fps</codeph> に 1/300（300 秒ごとに 1 回、つまり 5 分に 1 回）の値を指定して発行してから <codeph class="+ topic/ph pr-d/codeph ">NetStream.attachCamera(source)</codeph> コマンドを発行すると、カメラは 500 分間連続してキャプチャするようになります。生成されるファイルは、500 分、つまり記録に要した時間と同じ長さで再生され、各フレームは 5 分間表示されます。</li></ul>

     <p class="- topic/p ">どちらの手法でも、同じ 500 個のフレームがキャプチャされます。どちらのアプローチも有用ですが、使用するアプローチは、主に再生要件によって異なります。例えば、後者の場合、始めから最後までオーディオを録音し続けることができます。また、どちらの場合もファイルサイズはほとんど同じです。</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:NetStream:attach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attach</apiName><shortdesc class="- topic/shortdesc ">
    新規 NetConnection オブジェクトにストリームを接続します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>uncomment the following line after offset is added to the file
    </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">connection</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:NetConnection</apiOperationClassifier></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    新規 NetConnection オブジェクトにストリームを接続します。接続が中断された後に再接続してから、このメソッドを呼び出して、NetStream を新しい NetConnection オブジェクトに関連付けます。Flash Player および AIR は、接続が切断されたときの再生ポイントからストリーミングを再開します。また、このメソッドを使用して、負荷分散を実装することもできます。
    
    <p class="- topic/p ">このメソッドでは、Flash Media Server バージョン 3.5.3 以降が必要です。</p>
    
    <p class="- topic/p ">このメソッドを使用して <b class="+ topic/ph hi-d/b ">ストリームの再接続</b>を実装するには、<xref href="http://www.adobe.com/go/learn_fms_docs_jp" scope="external" class="- topic/xref ">Flash Media Server 3.5.3 のマニュアル</xref>を参照してください。</p>
    
    <p class="- topic/p "> このメソッドを使用して<b class="+ topic/ph hi-d/b ">負荷分散</b>を実装するには、以下の手順を実行します。 </p>
    
    <ol class="- topic/ol "><li class="- topic/li "> 接続されたストリームを別のサーバーの NetConnection オブジェクトに接続します。 </li><li class="- topic/li ">ストリームが新しい接続に正しく接続されたら、データが漏れ出すのを防ぐために、以前の接続で <codeph class="+ topic/ph pr-d/codeph ">NetConnection.close()</codeph> を呼び出します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> を呼び出して、<codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayOptions.transition</codeph> の値を RESUME に設定します。残りの NetStreamPlayOptions プロパティを、最初に <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> を呼び出したときと同じ値に設定して、ストリームを開始します。</li></ol>
    
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">play2()</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/transition" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayOptions.transition</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     ストリーム上のすべてのデータの再生を停止し、time プロパティを 0 に設定して、他の用途でストリームにアクセスできるようにします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream.close, close
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ストリーム上のすべてのデータの再生を停止し、<codeph class="+ topic/ph pr-d/codeph ">time</codeph> プロパティを 0 に設定して、他のユーザーがストリームにアクセスできるようにします。また、このメソッドは、HTTP を使用してダウンロードされたビデオファイルのローカルコピーを削除します。アプリケーションでは、アプリケーションで作成したファイルのローカルコピーは削除されますが、コピーがキャッシュディレクトリに残る場合があります。ビデオファイルをキャッシュやローカル記憶域に一切残さないようにする必要がある場合には、Flash Media Server を使用してください。
     
     <p class="- topic/p ">
     Flash Media Server を使用している場合、パブリッシュしているストリームから <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> を呼び出すか、サブスクライブしているストリームから <codeph class="+ topic/ph pr-d/codeph ">NetStream.publish()</codeph> を呼び出すときに、このメソッドが暗黙的に呼び出されます。次の点に注意してください。
     </p>
     
     <ul class="- topic/ul "><li class="- topic/li ">
     パブリッシュしているストリームから <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> を呼び出すと、ストリームのパブリッシュが停止し、発行者は別の目的でストリームを使用できるようになります。ストリームのパブリッシュが停止するため、サブスクライバはストリームでパブリッシュされた内容を受信できなくなります。
     </li><li class="- topic/li ">
     サブスクライブしているストリームから <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> を呼び出すと、サブスクライバに対するストリームの再生が停止し、サブスクライバは別の目的でストリームを使用できるようになります。他のサブスクライバの再生は停止しません。
     </li><li class="- topic/li ">
     サブスクライブしているストリームは、そのストリームを閉じたり、<codeph class="+ topic/ph pr-d/codeph ">flash.net.NetStream.play(false)</codeph> を使用してストリームの種類を変更したりせずに、再生を停止できます。
     </li></ul>
     
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/pause()" class="- topic/link "><linktext class="- topic/linktext ">pause()</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.net.xml#NetStream/publish()" class="- topic/link "><linktext class="- topic/linktext ">publish()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:onPeerConnect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">onPeerConnect</apiName><shortdesc class="- topic/shortdesc ">
     
     ピアーがパブリッシュするストリームが、ピアーがサブスクライブするストリームに一致する場合に呼び出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">subscriber</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:NetStream</apiOperationClassifier></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     ピアーがパブリッシュするストリームが、ピアーがサブスクライブするストリームに一致する場合に呼び出されます。サブスクライバが発行者に接続する前にこのメソッドを呼び出すと、ActionScript コードはピアーツーピアーパブリッシュに対するアクセスを細かく制御できます。次のコードは、このメソッドのコールバック関数の作成方法の例です。
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var c:Object = new Object;
     c.onPeerConnect = function(subscriber:NetStream):Boolean {
      if (accept)
          return true;
      else
          return false;
      };
      m_netStream.client = c;
     </codeblock>
     
     <p class="- topic/p ">ピアーの発行者がこのメソッドを実装していない場合、すべてのピアーはパブリッシュされたすべてのコンテンツを再生できます。</p>
     
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:NetStream:pause" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">pause</apiName><shortdesc class="- topic/shortdesc ">
     ビデオストリームの再生を一時停止します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream.pause, pause
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ビデオストリームの再生を一時停止します。ビデオが既に一時停止している場合は、このメソッドを呼び出しても何も実行されません。ビデオを一時停止した後で再生を再開するには、<codeph class="+ topic/ph pr-d/codeph ">resume()</codeph> を呼び出します。一時停止と再生を切り替える（最初にビデオを一時停止し、次に再開する）には、<codeph class="+ topic/ph pr-d/codeph ">togglePause()</codeph> を呼び出します。
     
     <p class="- topic/p ">Flash Player 9.0.115.0 以降、Flash Player では、<codeph class="+ topic/ph pr-d/codeph ">NetStream.pause()</codeph> が呼び出されたときにバッファーをクリアしなくなりました。この動作を「スマート一時停止」と呼びます。Flash Player 9.0.115.0 以前は、Flash Player はバッファーが満杯になるまで待機してから再生を開始していましたが、このため遅延がよく発生していました。 </p>
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>後方互換性を確保する目的で現在も <codeph class="+ topic/ph pr-d/codeph ">"NetStream.Buffer.Flush"</codeph> イベント（<codeph class="+ topic/ph pr-d/codeph ">NetStatusEvent.info</codeph> プロパティを参照）は送出されますが、サーバーでバッファのフラッシュ処理は行われません。</p>
     <p class="- topic/p ">1 回の一時停止の場合、<codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferLength</codeph> プロパティには 60 秒または <codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferTime</codeph> の値の 2 倍のうち、いずれか大きい方の値という制限があります。例えば、<codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> が 20 秒の場合、Flash Player は <codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferLength</codeph> が 20~~2（40）または 60 のうち、大きい方の値になるまでバッファーするため、この場合は、<codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> が 60 秒になるまでバッファーします。<codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> が 40 秒の場合、Flash Player は <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> が 40~~2 (80) または 60 のうち、大きい方の値になるまでバッファーするため、この場合は、<codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> が 80 秒になるまでバッファーします。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> プロパティにも絶対制限があります。<codeph class="+ topic/ph pr-d/codeph ">pause()</codeph> の呼び出しによって <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> が 600 秒または<codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> ~~ 2 の値のいずれか大きい方の値を超えた場合、Flash Player はバッファーをフラッシュし、<codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> を 0 にリセットします。例えば、<codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> が 120 秒の場合は、<codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> が 600 秒に達すると、Flash Player はバッファーをフラッシュします。<codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> が 360 秒の場合は、<codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> が 720 秒に達すると、Flash Player はバッファーをフラッシュします。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">ヒント</b>：例えば、コードで <codeph class="+ topic/ph pr-d/codeph ">NetStream.pause()</codeph> を使用し、閲覧者がコマーシャルを見ている間、データをバッファーし、メインのビデオが開始されたときに一時停止を解除することができます。</p>
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.net.xml#NetStream/resume()" class="- topic/link "><linktext class="- topic/linktext ">resume()</linktext></link><link href="flash.net.xml#NetStream/togglePause()" class="- topic/link "><linktext class="- topic/linktext ">togglePause()</linktext></link><link href="flash.net.xml#NetStream/bufferLength" class="- topic/link "><linktext class="- topic/linktext ">bufferLength</linktext></link><link href="flash.net.xml#NetStream/bufferTime" class="- topic/link "><linktext class="- topic/linktext ">bufferTime</linktext></link><link href="flash.events.xml#NetStatusEvent/info" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:play2" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">play2</apiName><shortdesc class="- topic/shortdesc ">
     マルチビットレートのファイル間をシームレスに切り替え、接続が中断し再接続されたときに、NetStream が再開できるようにします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">param</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:NetStreamPlayOptions</apiOperationClassifier></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     マルチビットレートのファイル間をシームレスに切り替え、接続が中断し再接続されたときに、NetStream が再開できるようにします。
     
     <p class="- topic/p ">このメソッドは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> を拡張したものです。<codeph class="+ topic/ph pr-d/codeph ">play()</codeph> メソッドと同様に、<codeph class="+ topic/ph pr-d/codeph ">play2()</codeph> メソッドは、メディアファイルの再生を開始したり、メディアファイルをキューに追加して再生リストを作成したりします。Flash Media Server で使用する場合、サーバーに要求を出して別のメディアファイルに切り替えることもできます。切り替えはクライアントアプリケーションでシームレスに実行されます。次の機能は、<codeph class="+ topic/ph pr-d/codeph ">play2()</codeph> ストリームの切り替えを使用します。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">動的ストリーミング</b></p>
     
     <p class="- topic/p ">Flash Media Server 3.5 以降でサポートされる動的ストリーミングにより、マルチビットレートで暗号化されたストリームを使用できます。ビューアーのネットワーク状態の変化に伴って、最適な表示エクスペリエンスを提供するビットレートを受信します。<codeph class="+ topic/ph pr-d/codeph ">NetStreamInfo</codeph> クラスを使用して、ネットワーク条件を監視したり、データに基づいたストリームを切り替えたりします。異なる機能でクライアントのストリームを切り替えることもできます。詳しくは、『Adobe Flash Media Server 開発者ガイド』の「<xref href="http://www.adobe.com/go/learn_fms_dynstream_jp" scope="external" class="- topic/xref ">動的ストリーミング</xref>」を参照してください。</p>
     
     <p class="- topic/p ">Adobe では、NetStream クラスを拡張する DynamicStream と呼ばれるカスタム ActionScript クラスを作成しました。DynamicStream クラスを使用すると、ネットワーク状態を検出するための独自のコードを作成する代わりに、アプリケーションでダイナミックストリーミングを実装できます。 独自のダイナミックストリーミングコードの作成を選択した場合でも、DynamicStream クラスを参照実装として使用してください。<xref href="http://www.adobe.com/go/fms_tools_jp" scope="external" class="- topic/xref ">Flash Media Server のツールとダウンロード</xref>ページから、このクラスとこのクラスに関するド ュメントをダウンロードしてください。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">ストリームの再接続</b></p>
     
     <p class="- topic/p ">Flash Media Server 3.5.3 以降でサポートされるストリームの再接続を使用すると、接続が失われたときも、メディアの中断が発生しません。ActionScript ロジックが Flash Media Server に再接続を試みる間、メディアはバッファーを使用して再生を続けます。再接続後、新しい NetConnection で同じ NetStream オブジェクトを使用するために <codeph class="+ topic/ph pr-d/codeph ">NetStream.attach()</codeph> を呼び出します。ストリームへの再接続には、<codeph class="+ topic/ph pr-d/codeph ">NetStream.attach()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayTransitions.RESUME</codeph>、および <codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayTrasitions.APPEND_AND_WAIT</codeph> の各 API を使用します。詳しくは、<xref href="http://www.adobe.com/go/learn_fms_docs_jp" scope="external" class="- topic/xref ">Flash Media Server 3.5.3 のマニュアル</xref>を参照してください。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.net.xml#NetStream/attach()" class="- topic/link "><linktext class="- topic/linktext ">attach()</linktext></link><link href="flash.net.xml#NetStreamPlayOptions" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayOptions</linktext></link><link href="flash.net.xml#NetStreamPlayTransitions" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayTransitions</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:play" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">play</apiName><shortdesc class="- topic/shortdesc ">
     ローカルディレクトリまたは Web サーバーからメディアファイルを再生します。Flash Media Server からメディアファイルまたはライブストリームを再生します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>"at"see flash.media.Video#attachVideo()  This method no longer exists.  Replace with new method.
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">信頼されていないローカル SWF ファイルはインターネットへの接続を許可されません。この制限は、この SWF ファイルを local-with-networking または trusted として分類し直すことで回避できます。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">少なくとも 1 つのパラメーターを指定する必要があります。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">NetStream オブジェクトが無効です。このエラーは、NetConnection の失敗によって発生する場合があります。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">arguments</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">ローカルファイルの再生</b></p>
     
     
     <p class="- topic/p ">
     メディアファイルの場所。引数には、String、<codeph class="+ topic/ph pr-d/codeph ">URLRequest.url</codeph> プロパティ、またはこのどちらかを参照する変数を使用できます。アプリケーションセキュリティサンドボックス外にある <ph class="- topic/ph ">Flash Player および</ph> AIR コンテンツの場合、SWF ファイルまたはサブディレクトリと同じディレクトリに保存されているローカルビデオファイルを再生できます。ただし、上位レベルのディレクトリに移動することはできません。
     </p>
     
     <p class="- topic/p ">
     アプリケーションセキュリティサンドボックス内の AIR コンテンツの場合、メディアファイルに指定するパスは、SWF ファイルのディレクトリに相対します。ただし、SWF ファイルのディレクトリより上位に移動することはできません。AIR でパスを相対パスとして処理するため、完全なパスは指定しないでください。      
     </p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Flash Media Server からのメディアファイルの再生</b></p>
     
     <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">名前</entry><entry class="- topic/entry ">必須</entry><entry class="- topic/entry ">説明</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">name:Object</codeph></entry><entry class="- topic/entry ">必須 </entry><entry class="- topic/entry "> 記録されたファイルの名前、<codeph class="+ topic/ph pr-d/codeph ">NetStream.publish()</codeph> を使用してパブリッシュされたライブデータの識別子、または <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。<codeph class="+ topic/ph pr-d/codeph ">false</codeph> の場合は、ストリームの再生が停止し、他のパラメーターは無視されます。ファイル名の構文の詳細については、この表の次にあるファイル形式一覧を参照してください。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">start:Number</codeph></entry><entry class="- topic/entry ">オプション</entry><entry class="- topic/entry "> 開始時間（秒単位）。指定可能な値は、-2、-1、0、または正の数値です。デフォルト値は -2 です。この値のときは、ライブストリームを検索し、次に、記録されたストリームを検索します。いずれのストリームも検出されない場合は、ライブストリームが開きます。-1 の場合は、ライブストリームだけが再生されます。0 または正の数値の場合は、記録されたストリームの再生が、<codeph class="+ topic/ph pr-d/codeph ">start</codeph> に指定された秒数から開始されます。
       </entry></row><row class="- topic/row "><entry class="- topic/entry "> <codeph class="+ topic/ph pr-d/codeph ">len:Number</codeph> </entry><entry class="- topic/entry "> オプション（<codeph class="+ topic/ph pr-d/codeph ">start</codeph> が指定されている場合） </entry><entry class="- topic/entry "> 再生の継続時間（秒単位）。指定可能な値は、-1、0、または正の数値です。デフォルト値は -1 です。この値のときは、ライブストリームまたは記録されたストリームが最後まで再生されます。0 の場合、記録されたストリームの先頭を基準として、<codeph class="+ topic/ph pr-d/codeph ">start</codeph> で指定された秒数の位置にある単一のフレームが再生されます。正の数値の場合、ライブストリームまたは記録されたストリームが、<codeph class="+ topic/ph pr-d/codeph ">len</codeph> で指定された秒数だけ再生されます。
       </entry></row><row class="- topic/row "><entry class="- topic/entry "> <codeph class="+ topic/ph pr-d/codeph ">reset:Object</codeph> </entry><entry class="- topic/entry "> オプション（<codeph class="+ topic/ph pr-d/codeph ">len</codeph> が指定されている場合） </entry><entry class="- topic/entry "> 再生リストを消去するかどうか。デフォルト値は 1 または <codeph class="+ topic/ph pr-d/codeph ">true</codeph> です。この値の場合、以前に <codeph class="+ topic/ph pr-d/codeph ">play</codeph> で呼び出したファイルが消去され、<codeph class="+ topic/ph pr-d/codeph ">name</codeph> で指定したファイルが即座に再生されます。0 または <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の場合、再生リストにストリームが追加されます。2 の場合、再生リストが維持され、間隔をおいて順次返されるのではなく、すべてのストリームメッセージが一度に返されます。3 の場合、再生リストが消去され、すべてのストリームメッセージが一度に返されます。  </entry></row></tbody></tgroup></adobetable>
     
     
     <p class="- topic/p ">
     次の表に記載されているファイル形式を再生できます。構文は、ファイル形式によって異なります。
     </p>
     
     <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">ファイル形式</entry><entry class="- topic/entry ">シンタックス</entry><entry class="- topic/entry ">例</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry ">FLV</entry><entry class="- topic/entry ">（"samples" ディレクトリで）ストリーム名をストリングとして指定します。ファイル名の拡張子は含めません。</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ns.play("samples/myflvstream");</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">mp3 または ID3</entry><entry class="- topic/entry ">（"samples" ディレクトリで）ストリーム名をストリングとして指定します。接頭辞として <codeph class="+ topic/ph pr-d/codeph ">mp3:</codeph> または <codeph class="+ topic/ph pr-d/codeph ">id3:</codeph> を使用し、ファイル名の拡張子は含めません。</entry><entry class="- topic/entry "><p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">ns.play("mp3:samples/mymp3stream");</codeph></p>
            <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">ns.play("id3:samples/myid3data");</codeph></p></entry></row><row class="- topic/row "><entry class="- topic/entry ">MPEG-4 対応ファイル（F4V、MP4 など）</entry><entry class="- topic/entry ">（"samples" ディレクトリで）ストリーム名をストリングとして指定します。接頭辞として <codeph class="+ topic/ph pr-d/codeph ">mp4:</codeph> を使用します。この接頭辞は、ファイルが MPEG-4 Part 14 コンテナ形式内に H.264 でエンコードされたビデオと AAC でエンコードされたオーディオを含んでいることをサーバーに示します。サーバー上のファイルがファイル拡張子を含む場合は、それを指定します。 </entry><entry class="- topic/entry "><p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">ns.play("mp4:samples/myvideo.f4v");</codeph></p>
            <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">ns.play("mp4:samples/myvideo.mp4");</codeph></p>
          <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">ns.play("mp4:samples/myvideo");</codeph></p>
          <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">ns.play("mp4:samples/myvideo.mov");</codeph></p></entry></row><row class="- topic/row "><entry class="- topic/entry ">RAW</entry><entry class="- topic/entry ">（"samples" ディレクトリで）ストリーム名をストリングとして指定します。接頭辞として <codeph class="+ topic/ph pr-d/codeph ">raw:</codeph> を使用します。</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ns.play("raw:samples/myvideo");</codeph></entry></row></tbody></tgroup></adobetable>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">データ生成モードの有効化</b></p>
     
     <p class="- topic/p ">
     「データ生成モード」を有効にするには、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> に接続されている NetConnection 上で作成された NetStream に·<codeph class="+ topic/ph pr-d/codeph ">null</codeph> 値を渡します。このモードでは、<codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> を呼び出して、データを NetStream に配信します（また、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> を渡すと、<codeph class="+ topic/ph pr-d/codeph ">onSeekPoint()</codeph> コールバックに対するバイトカウンターがリセットされます）。
     </p>
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ローカルディレクトリまたは Web サーバーからメディアファイルを再生します。Flash Media Server からメディアファイルまたはライブストリームを再生します。<codeph class="+ topic/ph pr-d/codeph ">NetStatusEvent</codeph> オブジェクトを送出して、ステータスおよびエラーメッセージをレポートします。
     
     <p class="- topic/p ">サポートされているコーデックおよびファイル形式について詳しくは、以下を参照してください。</p>
     
     <ul class="- topic/ul "><li class="- topic/li "><xref href="http://www.adobe.com/go/learn_fms_fileformats_jp" scope="external" class="- topic/xref ">ADOBE FLASH MEDIA SERVER 3.5 
技術概要</xref></li><li class="- topic/li "><xref href="http://www.adobe.com/go/hardware_scaling_jp" scope="external" class="- topic/xref ">Exploring Flash Player support for high-definition H.264 video and AAC audio</xref></li><li class="- topic/li "><xref href="http://www.adobe.com/go/video_file_format_jp" scope="external" class="- topic/xref ">FLV/F4V オープン仕様のドキュメント</xref></li></ul>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">ファイルまたはライブストリームを再生するためのワークフロー</b></p>
     
     <ol class="- topic/ol "><li class="- topic/li ">NetConnection オブジェクトを作成し、<codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> を呼び出します。
     <p class="- topic/p ">ローカルディレクトリまたは Web サーバーからファイルを再生するには、null を渡します。</p>
     <p class="- topic/p ">記録されたファイルまたはライブストリームを Flash Media Server から再生するには、Flash Media Server アプリケーションの URI を渡します。</p></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NetConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler)</codeph> を呼び出して、NetStatusEvent イベントを待機します。</li><li class="- topic/li ">「<codeph class="+ topic/ph pr-d/codeph ">NetConnection.Connect.Success</codeph>」で、NetStream オブジェクトを作成し、NetConnection オブジェクトをコンストラクターに渡します。</li><li class="- topic/li ">Video オブジェクトを作成し、<codeph class="+ topic/ph pr-d/codeph ">Video.attachNetStream()</codeph> を呼び出して NetStream オブジェクトを渡します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> を呼び出します。
     <p class="- topic/p ">ライブストリームを再生するには、<codeph class="+ topic/ph pr-d/codeph ">NetStream.publish()</codeph> メソッドに渡されたストリーム名を渡します。</p>
     <p class="- topic/p ">記録されたファイルを再生するには、ファイル名を渡します。</p></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">addChild()</codeph> を呼び出して、Video オブジェクトを渡し、ビデオを表示します。</li></ol>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>サンプルコードを確認するには、このページの下部の例にスクロールしてください。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">データ生成モードの有効化</b></p>
     
     <p class="- topic/p ">
     「データ生成モード」を有効化するには、<codeph class="+ topic/ph pr-d/codeph ">play(null)</codeph> を呼び出します。このモードでは、<codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> メソッドを呼び出して、データを NetStream に配信します。データ生成モードを使用して、Apache HTTP Server 上の Adobe HTTP ダイナミックストリーミングモジュールからのコンテンツを HTTP 経由でストリーミングします。HTTP ダイナミックストリーミングを使用することで、クライアントはファイル内の任意のポイントをすばやくシークできます。Open Source Media Framework（OSMF）は、VOD（ビデオオンデマンド）とライブストリームの再生用に、HTTP ダイナミックストリーミングをサポートします。NetStream のデータ生成モードを使用する方法の例については、<xref href="http://www.opensourcemediaframework.com" scope="external" class="- topic/xref ">OSMF</xref> ソースをダウンロードしてください。HTTP ダイナミックストリーミングについて詳しくは、<xref href="http://www.adobe.com/go/learn_fms_http_jp" scope="external" class="- topic/xref ">HTTP ダイナミックストリーミング</xref>を参照してください。
     </p>
     
     <p class="- topic/p ">
     Flash Media Server を使用しないでこのメソッドを使用する場合、セキュリティに関する考慮事項があります。信頼できるローカルのサンドボックスまたはネットワークアクセスを許可されたローカルのサンドボックスのファイルは、リモートサンドボックスからビデオファイルをロードおよび再生することができますが、URL ポリシーファイルで明示的な許可が与えられていない限り、リモートファイルのデータにアクセスできません。<ph class="- topic/ph ">また、Flash Player で実行されている SWF ファイルがこのメソッドを使用しないようにするには、SWF コンテンツが含まれる HTML ページの <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">object</codeph> タグおよび <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> タグ）を設定します。</ph>セキュリティについて詳しくは、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。
     </p>
     
     </apiDesc><example class="- topic/example "><b class="+ topic/ph hi-d/b ">Flash Media Server</b> この例では、"samples" ディレクトリから記録された F4V ファイルを、先頭から開始して最大 100 秒まで再生します。MPEG-4 ファイルの場合、サーバー上のファイルにファイル名拡張子がある場合、<codeph class="+ topic/ph pr-d/codeph ">play()</codeph> メソッドでファイル名拡張子を指定する必要があります。
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     ns.play("mp4:samples/record1.f4v", 0, 100, true);
     </codeblock>
     
     </example><example class="- topic/example "><b class="+ topic/ph hi-d/b ">Flash Media Server</b> この例は、クライアントがパブリッシュしたライブ FLV ストリームの先頭から最後までの再生をただちに開始します。
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     ns.play("livestream");
     </codeblock>
     
     
     </example><example conref="examples\Video_new.as" class="- topic/example "> 次の例は、外部 FLV ファイルをロードする方法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var MyVideo:Video = new Video();
addChild(MyVideo);
 
var MyNC:NetConnection = new NetConnection();
MyNC.connect(null);
 
var MyNS:NetStream = new NetStream(MyNC);
MyNS.play("http://www.helpexamples.com/flash/video/clouds.flv");

MyVideo.attachNetStream(MyNS);

//the clouds.flv video has metadata we're not using, so create
//an error handler to ignore the message generated by the runtime
//about the metadata
MyNS.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler); 

function asyncErrorHandler(event:AsyncErrorEvent):void 
{ 
   //ignore metadata error message
} 
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObjectContainer/addChild()" class="- topic/link "><linktext class="- topic/linktext ">DisplayObjectContainer.addChild()</linktext></link><link href="flash.net.xml#NetStream/checkPolicyFile" class="- topic/link "><linktext class="- topic/linktext ">checkPolicyFile</linktext></link><link href="flash.net.xml#NetStream/appendBytes()" class="- topic/link "><linktext class="- topic/linktext ">appendBytes()</linktext></link></related-links><adobeApiEvent id="flash.net:NetStream:play_status" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">status</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:StatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">DRM（デジタル著作権管理）で暗号化されたコンテンツを再生しようとすると送出されます。<codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティの値は <codeph class="+ topic/ph pr-d/codeph ">"DRM.encryptedFLV"</codeph> です。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">DRM（デジタル著作権管理）で暗号化されたコンテンツを再生しようとすると送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:NetStream:preloadEmbeddedData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">preloadEmbeddedData</apiName><shortdesc class="- topic/shortdesc ">
     ローカルに保存されたメディアファイルから DRM メタデータを抽出します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">param</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:NetStreamPlayOptions</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">コンテンツファイルを処理中に使用するオプションを説明する NetStreamPlayOptions。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ローカルに保存されたメディアファイルから DRM メタデータを抽出します。
     
     <p class="- topic/p ">オフライン再生に必要な DRM バウチャーをダウンロードおよびキャッシュする際に最初の手順として <codeph class="+ topic/ph pr-d/codeph ">preloadEmbeddedMetaData()</codeph> を使用します。埋め込み DRM メタデータがメディアファイル内で検出されると、DRMContentData オブジェクトは NetStream クライアントの <codeph class="+ topic/ph pr-d/codeph ">onDRMContentData</codeph> 関数に渡されます。この DRMContentData オブジェクトには、コンテンツの再生に求められるバウチャーを取得するために必要な情報が含まれています。バウチャーをダウンロードするには、DRMContentDataObject を DRMManager <codeph class="+ topic/ph pr-d/codeph ">loadVoucher()</codeph> メソッドに渡します。</p>
     
     <p class="- topic/p ">DRM バウチャーをプリロードする手順には、次のものが含まれます。</p>
     <ul class="- topic/ul "><li class="- topic/li ">
     <p class="- topic/p ">メタデータをプリロードする新しい NetStream オブジェクトを作成します。</p>
     </li><li class="- topic/li ">コールバック関数を NetStream <codeph class="+ topic/ph pr-d/codeph ">client</codeph> の <codeph class="+ topic/ph pr-d/codeph ">onDRMContentData</codeph> プロパティに割り当てます。</li><li class="- topic/li ">新しい NetStreamPlayOptions オブジェクトを作成して、その <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph> プロパティをローカルビデオファイルの URL ストリングに設定します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">preloadEmbeddedMetadata()</codeph> を呼び出して、NetStreamPlayOptions オブジェクトに渡します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">onDRMContentData</codeph> コールバックに応答して、DRMManager <codeph class="+ topic/ph pr-d/codeph ">loadVoucher()</codeph> メソッドを呼び出し、DRMContentData オブジェクトに渡します。DRMContentData オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">authenticationMethod</codeph> プロパティに値 <codeph class="+ topic/ph pr-d/codeph ">userNameAndPassWord</codeph> がある場合、バウチャーをロードする前に Media Rights Server 上のユーザーを認証する必要があります。</li><li class="- topic/li ">プリロードに使用した NetStream を閉じます。</li></ul>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>メタデータのプリロードとコンテンツの再生の両方で同じ NetStream オブジェクトを使用するには、プリロード操作が生成する <codeph class="+ topic/ph pr-d/codeph ">onPlayStatus</codeph> 呼び出しを待機してから再生を開始します。</p>
     
     <p class="- topic/p ">ダウンロードされたバウチャーは、ローカルキャッシュに保存されます。オンラインでコンテンツを再生すると、バウチャーのダウンロードおよびキャッシュを行うことができます。DRM で保護されたコンテンツファイルが表示されると、キャッシュされたバウチャーはローカルストアから自動的に取得されます。DRMManager を使用すると、バウチャーキャッシュを管理します。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>HTTP、HTTPS または RTMP 接続を使用した DRM メタデータのプリロードはサポートされていません。ファイルシステム上に保存されたファイルからのみメタデータのプリロードは可能です。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/event:onDRMContentData" class="- topic/link "><linktext class="- topic/linktext ">onDRMContentData</linktext></link><link href="flash.net.drm.xml#DRMContentData" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMContentData</linktext></link><link href="flash.net.drm.xml#DRMManager/loadVoucher()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMManager.loadVoucher()</linktext></link><link href="flash.net.drm.xml#DRMVoucher" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMVoucher</linktext></link><link href="flash.net.xml#NetStream/client" class="- topic/link "><linktext class="- topic/linktext ">client</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:publish" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">publish</apiName><shortdesc class="- topic/shortdesc ">
     クライアントから Flash Media Server へ、ストリーミングオーディオ、ビデオ、およびデータメッセージを送信します。送信中にストリームを記録することもできます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリームを識別するストリングです。このストリームをサブスクライブしているクライアントは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> を呼び出す場合に、この同じ名前を渡します。ストリーム名の後にスラッシュ（/）を指定しないでください。たとえば、<codeph class="+ topic/ph pr-d/codeph ">"bolero/"</codeph> というストリーム名は使用しないでください。
     
     <p class="- topic/p ">
     次の表に示す形式でファイルを記録できます（<codeph class="+ topic/ph pr-d/codeph ">publish()</codeph> は MP3 形式のファイルには使用できません）。構文は、ファイル形式によって異なります。</p>
     <p class="- topic/p ">
     <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">ファイル形式</entry><entry class="- topic/entry ">シンタックス</entry><entry class="- topic/entry ">例</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry ">FLV</entry><entry class="- topic/entry ">ストリーム名を、ファイル名拡張子なしのストリングとして指定します。</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ns.publish("myflvstream");</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">MPEG-4 対応ファイル（F4V または MP4 など）</entry><entry class="- topic/entry ">ストリーム名をストリングとして指定します。接頭辞として <codeph class="+ topic/ph pr-d/codeph ">mp4:</codeph> を使用し、ファイル名の拡張子は必要に応じて指定します。Flash Player は H.264 を使用してエンコードしませんが、Flash Media Server は F4V コンテナ内に任意のコーデックを記録できます。Flash Media Live Encoder は、H.264 を使用してエンコードできます。
     </entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ns.publish("mp4:myvideo.f4v")</codeph> <codeph class="+ topic/ph pr-d/codeph ">ns.publish("mp4:myvideo");</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">RAW</entry><entry class="- topic/entry ">ストリーム名をストリングとして指定します。接頭辞として <codeph class="+ topic/ph pr-d/codeph ">raw:</codeph> を使用します。</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ns.publish("raw:myvideo");</codeph></entry></row></tbody></tgroup></adobetable>
     </p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリームのパブリッシュ方法を指定するストリングです。有効な値は、「<codeph class="+ topic/ph pr-d/codeph ">record</codeph>」、「<codeph class="+ topic/ph pr-d/codeph ">append</codeph>」、「<codeph class="+ topic/ph pr-d/codeph ">appendWithGap</codeph>」および「<codeph class="+ topic/ph pr-d/codeph ">live</codeph>」です。デフォルト値は "<codeph class="+ topic/ph pr-d/codeph ">live</codeph>" です。
     <ul class="- topic/ul "><li class="- topic/li ">「<codeph class="+ topic/ph pr-d/codeph ">record</codeph>」を渡すと、サーバーはライブデータをパブリッシュして記録し、記録したデータを、<codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターに渡された値と名前が一致する新しいファイルに保存します。このファイルが存在する場合は、上書きされます。</li><li class="- topic/li ">「<codeph class="+ topic/ph pr-d/codeph ">append</codeph>」を渡すと、サーバーはライブデータをパブリッシュして記録し、記録したデータを、<codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターに渡された値と名前が一致するファイルに追加します。<codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターと一致するファイルが見つからない場合は、ファイルが作成されます。 </li><li class="- topic/li ">「<codeph class="+ topic/ph pr-d/codeph ">appendWithGap</codeph>」を渡すと、時間のコーディネーションに関する補足情報が渡され、動的ストリーミングの際にサーバーが正しい移行ポイントを決定できるよう支援します。</li><li class="- topic/li ">このパラメーターを省略するか、「<codeph class="+ topic/ph pr-d/codeph ">live</codeph>」を渡した場合、サーバーはライブデータを記録せずにパブリッシュします。<codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターに渡された値と名前が一致するファイルが存在する場合は、そのファイルが削除されます。</li></ul>
     
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     クライアントから Flash Media Server へ、ストリーミングオーディオ、ビデオ、およびデータメッセージを送信します。送信中にストリームを記録することもできます。このメソッドは、ストリームに関する情報を含む NetStatusEvent オブジェクトを送出します。<codeph class="+ topic/ph pr-d/codeph ">NetStream.publish()</codeph> を呼び出す前に、「<codeph class="+ topic/ph pr-d/codeph ">NetConnection.Connect.Success</codeph>」イベントをキャプチャして、アプリケーションが Flash Media Server に正常に接続できたかどうかを確認します。
     
     <p class="- topic/p ">パブリッシュ中に、FLV または F4V 形式でファイルを記録できます。ファイルを F4V 形式で記録した場合は、分割・統合ツールを使用して編集するか、別のアプリケーションでファイルを再生する必要があります。ツールのダウンロード方法については、<xref href="http://www.adobe.com/go/fms_tools_jp" scope="external" class="- topic/xref ">www.adobe.com/go/fms_tools_jp</xref> を参照してください。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このメソッドを使用してストリームを再生しないでください。ストリームを再生するには、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> メソッドを呼び出します。</p>
     
     <p class="- topic/p ">ストリームをパブリッシュするためのワークフロー</p>
     
     <ol class="- topic/ol "><li class="- topic/li ">NetConnection オブジェクトを作成し、<codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> を呼び出します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NetConnection.addEventListener()</codeph> を呼び出して、NetStatusEvent イベントを待機します。</li><li class="- topic/li ">「<codeph class="+ topic/ph pr-d/codeph ">NetConnection.Connect.Success</codeph>」イベントで、NetStream オブジェクトを作成し、NetConnection オブジェクトをコンストラクターに渡します。</li><li class="- topic/li ">オーディオとビデオをキャプチャするには、<codeph class="+ topic/ph pr-d/codeph ">NetStream.attachAudio()</codeph> メソッドと <codeph class="+ topic/ph pr-d/codeph ">NetStream.attachCamera()</codeph> メソッドを呼び出します。</li><li class="- topic/li ">ストリームをパブリッシュするには、<codeph class="+ topic/ph pr-d/codeph ">NetStream.publish()</codeph> メソッドを呼び出します。データを記録しながらパブリッシュすることができます。記録すると、ユーザーがデータを後で再生できるようになります。</li></ol>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b> NetStream で可能なのはストリームのパブリッシュまたは再生のいずれかです。両方を行うことはできません。ストリームをパブリッシュしてサーバーから再生を表示するには、2 つの NetStream オブジェクトを作成します。複数の NetStream オブジェクトを 1 つの NetConnection オブジェクトに送信できます。</p>
     
     <p class="- topic/p ">Flash Media Server では、ストリームの記録時にファイルが作成されます。デフォルトでは、<codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> に渡されたアプリケーションインスタンス名が付いたディレクトリが作成され、そのディレクトリにファイルが保存されます。例えば、次のコードでは「lectureseries」アプリケーションのデフォルトのインスタンスに接続し、「lecture」というストリームを記録します。applications/lectureseries/streams/_definst_ ディレクトリに「lecture.flv」というファイルが記録されます。
     </p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var nc:NetConnection = new NetConnection();
     nc.connect("rtmp://fms.example.com/lectureseries");
     nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
     
     function netStatusHandler(event:NetStatusEvent):void{
       if (event.info.code == "NetConnection.Connect.Success"){
            var ns:NetStream = new NetStream(nc);
            ns.publish("lecture", "record");
       }
     }
     </codeblock>
     
     <p class="- topic/p ">次の例では、同じアプリケーションの「monday」インスタンスに接続します。/applications/lectureseries/streams/monday ディレクトリに lecture.flv というファイルが記録されます。</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var nc:NetConnection = new NetConnection();
     nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
     nc.connect("rtmp://fms.example.com/lectureseries/monday");
     
     function netStatusHandler(event:NetStatusEvent):void{
       if (event.info.code == "NetConnection.Connect.Success"){
            var ns:NetStream = new NetStream(nc);
            ns.publish("lecture", "record");
       }
     }
     </codeblock>
     
     </apiDesc><example conref="examples\NetStream_publish.as" class="- topic/example "> 次の例では、カメラからビデオをキャプチャし、そのビデオを NetStream 経由で Flash Media Server にパブリッシュします。この例では、Flash Media Server でビデオが再生されると、ビデオが表示されます。
 <p class="- topic/p ">この例を実行するには、コンピューターに接続されているカメラが必要です。さらに、Button コンポーネントと Label コンポーネントをライブラリに追加する必要があります。</p>
 <p class="- topic/p ">アプリケーションには、アプリケーションが正常にサーバーに接続された場合にのみ、ストリームをパブリッシュする（Flash Media Server に送信する）ボタンがあります。アプリケーションは、ストリームが正常にパブリッシュされた場合にのみ、サーバーから配信されたそのストリームを再生します。<codeph class="+ topic/ph pr-d/codeph ">NetStatusEvent</codeph> は、これらのいずれかの場合を示す <codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティが指定された <codeph class="+ topic/ph pr-d/codeph ">info</codeph> オブジェクトを返します。<codeph class="+ topic/ph pr-d/codeph ">netStatusHandler</codeph> 関数は、NetConnection クラスと NetStream クラスに関するこれらのイベントを処理します。</p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.media.Video;
    import flash.media.Camera;
    import flash.net.NetConnection;
    import flash.net.NetStream;
    import fl.controls.Button;
    import fl.controls.Label;

    public class NetStream_publish extends Sprite {
        private var connectionURL:String = "rtmp://localhost/live/";
        private var videoURL:String = "liveVideo";
        private var nc:NetConnection;
        private var ns_publish:NetStream;
        private var ns_playback:NetStream;
        private var video_publish:Video;
        private var video_playback:Video;
        private var cam:Camera;
        private var b:Button;
        private var l:Label;

        public function NetStream_publish() {
            setUpUI();
            
            nc = new NetConnection();
            nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            
            // Add bandwidth detection handlers on the NetConnection Client to
            // prevent Reference Errors at runtime when using the "live" and "vod" applications.          
            var clientObj:Object = new Object();
            clientObj.onBWDone = onBWDone;
            clientObj.onBWCheck = onBWCheck;
            nc.client = clientObj;
            
            // Connect to the "live" application on Flash Media Server.
            nc.connect(connectionURL);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            trace(event.info.code + " | " + event.info.description);
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    // Enable the "Publish" button after the client connects to the server.
                    b.enabled = true;
                    break;
                case "NetStream.Publish.Start":
                    playbackVideo();
                    break;
            }
        }
    
        private function publishVideo(event:MouseEvent):void{
            // Disable the button so that you can only publish once.
            b.enabled = false;
            // Create a NetStream to send video to FMS.
            ns_publish = new NetStream(nc);
            ns_publish.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            // Publish (send) the video to FMS.
            cam = Camera.getCamera();
            ns_publish.attachCamera(cam);
               ns_publish.publish(videoURL);
        }

        private function playbackVideo():void {
            // Create a NetStream to receive the video from FMS.
            ns_playback = new NetStream(nc);
            ns_playback.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            ns_playback.play(videoURL);    
            // Display the video that was published to FMS.
            video_playback = new Video(cam.width, cam.height);
            video_playback.x = cam.width + 20;
            video_playback.y = 10;
            video_playback.attachNetStream(ns_playback);
            addChild(video_playback);
        }
        
        
        private function setUpUI():void { 
            b = new Button(); 
            b.addEventListener(MouseEvent.CLICK, publishVideo);
            b.width = 150;
            b.label = "Publish video to server";
            b.move(10, 150);
            b.enabled = false;
            
            l = new Label();
            l.width = 150;
            l.text = "Playing back from server"
            l.move(190, 150);
            
            addChild(b);
            addChild(l);
        }
        
        // Handlers called by the Flash Media Server "live" and "vod" applications.
        public function onBWDone(... rest):Boolean {
            return true;
        }
        
        public function onBWCheck(... rest):Number {
            return 0;
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/connect()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.connect()</linktext></link><link href="flash.events.xml#NetStatusEvent/info" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:receiveAudio" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">receiveAudio</apiName><shortdesc class="- topic/shortdesc ">
     ストリーム上で着信オーディオが再生されるかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">flag</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリーム上で着信オーディオを再生するかどうかを指定します。再生する場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph>、再生しない場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を指定します。デフォルト値は <codeph class="+ topic/ph pr-d/codeph ">true</codeph> です。指定したストリームに音声データのみが含まれる場合、<codeph class="+ topic/ph pr-d/codeph ">false</codeph> を渡すときに <codeph class="+ topic/ph pr-d/codeph ">NetStream.time</codeph> のインクリメントが停止されます。
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ストリーム上で着信オーディオが再生されるかどうかを示します。このメソッドは、指定されたストリームにサブスクライブしているクライアントだけが使用できます。ストリームの発行者には使用できません。このメソッドは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> メソッドを呼び出す前、または呼び出した後に呼び出します。例えば、ボタンにこのメソッドをアタッチすると、ユーザーは音声のミュートとミュート解除を実行できます。このメソッドを使用するのは、Flash Media Server から再生されるユニキャストストリームのみです。このメソッドは、RTMFP マルチキャストストリーム、または <codeph class="+ topic/ph pr-d/codeph ">NetStream.appendBytes()</codeph> メソッドを使用する場合は機能しません。
     
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:NetStream:receiveVideoFPS" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">receiveVideoFPS</apiName><shortdesc class="- topic/shortdesc ">
     着信ビデオのフレームレートを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">FPS</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">着信ビデオ再生時の 1 秒あたりのフレームレートを指定します。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     着信ビデオのフレームレートを指定します。このメソッドは、指定されたストリームにサブスクライブしているクライアントだけが使用できます。ストリームの発行者には使用できません。このメソッドは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> メソッドを呼び出す前、または呼び出した後に呼び出します。例えば、ユーザーがビデオフレームレートを設定できるようにこのメソッドを呼び出します。現在のフレームレートを確認するには、<codeph class="+ topic/ph pr-d/codeph ">NetStream.currentFPS</codeph> を使用します。ビデオの受信を停止するには、<codeph class="+ topic/ph pr-d/codeph ">0</codeph> を渡します。
	 <p class="- topic/p ">FPS パラメーターに値を渡してビデオのフレームレートを制限すると、Flash Media Server は、ビデオの完全性を維持する一方で、フレームを減らそうとします。2 つのキーフレームごとに、目的のレートを満たすために必要なフレームの最小数がサーバーから送信されます。I フレーム（または中間フレーム）を連続して送信する必要があります。そうしないと、ビデオは破損します。したがって、キーフレームに続いて、必要な数のフレームが直ちに連続的に送信されます。フレームは均等には配信されないので、待機により中断されたセグメントにおいてもモーションはスムーズに表示されます。</p>
	 <p class="- topic/p ">このメソッドを使用するのは、Flash Media Server から再生されるユニキャストストリームのみです。このメソッドは、RTMFP マルチキャストストリーム、または <codeph class="+ topic/ph pr-d/codeph ">NetStream.appendBytes()</codeph> メソッドを使用する場合は機能しません。</p>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:NetStream:receiveVideo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">receiveVideo</apiName><shortdesc class="- topic/shortdesc ">
     ストリーム上で着信ビデオが再生されるかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">flag</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このストリーム上で着信ビデオを再生するかどうかを指定します。再生する場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph>、再生しない場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を指定します。デフォルト値は <codeph class="+ topic/ph pr-d/codeph ">true</codeph> です。指定したストリームにビデオデータのみが含まれる場合、<codeph class="+ topic/ph pr-d/codeph ">false</codeph> を渡すときに <codeph class="+ topic/ph pr-d/codeph ">NetStream.time</codeph> のインクリメントが停止されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ストリーム上で着信ビデオが再生されるかどうかを示します。このメソッドは、指定されたストリームにサブスクライブしているクライアントだけが使用できます。ストリームの発行者には使用できません。このメソッドは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> メソッドを呼び出す前、または呼び出した後に呼び出します。例えば、ボタンにこのメソッドをアタッチすると、ユーザーはビデオの表示と非表示を実行できます。このメソッドを使用するのは、Flash Media Server から再生されるユニキャストストリームのみです。このメソッドは、RTMFP マルチキャストストリーム、または <codeph class="+ topic/ph pr-d/codeph ">NetStream.appendBytes()</codeph> メソッドを使用する場合は機能しません。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:NetStream:resetDRMVouchers" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">resetDRMVouchers</apiName><shortdesc class="- topic/shortdesc ">
     ローカルにキャッシュされたすべての DRM（デジタル著作権管理）バウチャーデータを削除します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream, resetDRMVouchers
     
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">バウチャーデータを削除できません。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ローカルにキャッシュされたすべての DRM（デジタル著作権管理）バウチャーデータを削除します。
     <p class="- topic/p ">
     アプリケーションで、保護されたコンテンツにユーザーがアクセスできる media rights server から必要なバウチャーを再ダウンロードする必要があります。この関数の呼び出しは、DRMManager オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">resetDRMVouchers()</codeph> 関数を呼び出すことと同じです。</p>
     
     </apiDesc><example conref="examples\NetStream.resetDRMVouchers.1.as" class="- topic/example "> 次の例では、すべての DRM バウチャーをリセットします。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

NetStream.resetDRMVouchers();
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.drm.xml#DRMManager/resetDRMVouchers()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMManager.resetDRMVouchers()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:resume" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">resume</apiName><shortdesc class="- topic/shortdesc ">
     再生を一時停止していたビデオストリームを再開します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream.resume, resume
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     再生を一時停止していたビデオストリームを再開します。ビデオが既に再生中である場合は、このメソッドを呼び出しても何も実行されません。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link><link href="flash.net.xml#NetStream/pause()" class="- topic/link "><linktext class="- topic/linktext ">pause()</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.net.xml#NetStream/togglePause()" class="- topic/link "><linktext class="- topic/linktext ">togglePause()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:seek" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">seek</apiName><shortdesc class="- topic/shortdesc ">
     
     指定された位置に最も近いキーフレーム（ビデオ業界では I フレームとも呼ばれます）をシークします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream.seek, seek
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">offset</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ビデオファイルにおける、再生ヘッドのおおよその移動時間（秒単位）です。Flash Media Server で、Application.xml 設定ファイルの <codeph class="+ topic/ph pr-d/codeph ">&lt;EnhancedSeek></codeph> が <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定されている場合（これがデフォルトの設定です）、サーバーは<codeph class="+ topic/ph pr-d/codeph ">オフセット</codeph>にキーフレームを生成します。
     
     <ul class="- topic/ul "><li class="- topic/li ">ストリームの先頭に移動するには、<codeph class="+ topic/ph pr-d/codeph ">offset</codeph> に 0 を指定します。</li><li class="- topic/li ">ストリームの先頭から前方にシークするには、進めたい秒数をパラメーターに指定します。例えば、先頭から 15 秒の位置（または15 秒前のキーフレーム）に再生ヘッドを移動するには、<codeph class="+ topic/ph pr-d/codeph ">myStream.seek(15)</codeph> にします。</li><li class="- topic/li ">現在位置を基準としてシークを行う場合、<codeph class="+ topic/ph pr-d/codeph ">NetStream.time + n</codeph>、または <codeph class="+ topic/ph pr-d/codeph ">NetStream.time - n</codeph> と指定すると、それぞれ現在位置から <codeph class="+ topic/ph pr-d/codeph ">n</codeph> 秒分だけ前方または後方へシークが行われます。例えば、現在位置から 20 秒巻き戻すには、<codeph class="+ topic/ph pr-d/codeph ">NetStream.seek(NetStream.time - 20)</codeph> にします。</li></ul>
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     指定された位置に最も近いキーフレーム（ビデオ業界では I フレームとも呼ばれます）をシークします。キーフレームは、ストリームの先頭から秒単位のオフセット位置に配置されます。
     
     <p class="- topic/p ">
     通常、ビデオストリームは、キーフレーム（または I フレーム）と P フレームの 2 種類のフレームでエンコードされます。キーフレームにはイメージ全体が格納されています。一方、P フレームは、キーフレーム間の追加のビデオ情報を提供する中間フレームです。通常、ビデオストリームには 10 ～ 50 フレームごとにキーフレームがあります。
     </p>
     
     <p class="- topic/p ">Flash Media Server には、強化されたシークとスマートシークなど、各種のシーク動作が用意されています。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">強化されたシーク</b></p>
     
     <p class="- topic/p "> 強化されたシークは、デフォルトで有効になっています。強化されたシークを無効にするには、Flash Media Server で <codeph class="+ topic/ph pr-d/codeph ">Application.xml</codeph> 構成ファイルの <codeph class="+ topic/ph pr-d/codeph ">EnhancedSeek</codeph> 要素を <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定します。
     </p>
     
     <p class="- topic/p ">強化されたシークが有効になっている場合、サーバーは前のキーフレームとすべての中間 P フレームに基づいて、<codeph class="+ topic/ph pr-d/codeph ">オフセット</codeph>位置に新しいキーフレームを生成します。ただし、キーフレームの生成によりサーバーの処理の負荷が高くなり、生成されるキーフレームに歪みが発生することがあります。ビデオコーデックが On2 の場合、シーク位置の前のキーフレームと、そのキーフレームとシーク位置の間にあるすべての P フレームがクライアントに送信されます。
     </p>
     
     <p class="- topic/p ">
     強化されたシークが無効になっている場合、サーバーは一番近いキーフレームからストリーミングを開始します。例えば、ビデオ内の 0 秒と 10 秒の時点にキーフレームがあるとします。4 秒に対してシークを実行すると、0 秒のキーフレームを使用して 4 秒から再生が開始されます。10 秒の位置にある次のキーフレームに到達するまで、ビデオはフリーズされたままになります。シークの操作性を向上するには、キーフレームの間隔を短くする必要があります。通常のシークモードでは、キーフレーム間の位置からビデオを開始することはできません。
     </p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">スマートシーク</b></p>
     
     <p class="- topic/p ">スマートシークを有効にするには、<codeph class="+ topic/ph pr-d/codeph ">NetStream.inBufferSeek</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定します。</p>
     
     <p class="- topic/p ">スマートシークを使用すると、Flash Player で既存の巻き戻し用バッファーおよび早送り用バッファー内をシークできるようになります。スマートシークが無効になっている場合、<codeph class="+ topic/ph pr-d/codeph ">seek()</codeph> が呼び出されるたびに、Flash Player ではバッファーがフ ッシュされ、サーバー内のデータが要求されます。詳しくは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.inBufferSeek</codeph>を参照してください。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">データ生成モードのシーク</b></p>
     
     <p class="- topic/p ">データ生成モードの NetStream に対して <codeph class="+ topic/ph pr-d/codeph ">seek()</codeph> を呼び出すと、<codeph class="+ topic/ph pr-d/codeph ">appendBytesAction(NetStreamAppendBytesAction.RESET_BEGIN</codeph> または <codeph class="+ topic/ph pr-d/codeph ">appendBytesAction(NetStreamAppendBytesAction.RESET_SEEK)</codeph> を呼び出してパーサーをリセットするまで、<codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> に渡されるすべてのバイトが廃棄されます（バッファーに格納されず、部分的なメッセージ FIFO に累積されるか、シークポイントに対して解析されます）。データ生成モードについて詳しくは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> を参照してください。</p>
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/inBufferSeek" class="- topic/link "><linktext class="- topic/linktext ">inBufferSeek</linktext></link><link href="flash.net.xml#NetStream/backBufferLength" class="- topic/link "><linktext class="- topic/linktext ">backBufferLength</linktext></link><link href="flash.net.xml#NetStream/backBufferTime" class="- topic/link "><linktext class="- topic/linktext ">backBufferTime</linktext></link><link href="flash.net.xml#NetStream/step()" class="- topic/link "><linktext class="- topic/linktext ">step()</linktext></link><link href="flash.net.xml#NetStream/time" class="- topic/link "><linktext class="- topic/linktext ">time</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:send" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">send</apiName><shortdesc class="- topic/shortdesc ">
     パブリッシュされたストリーム上で、サブスクライブしているすべてのクライアントにメッセージを送信します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">handlerName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">送信するメッセージです。メッセージを受け取る ActionScript ハンドラーの名前でもあります。ハンドラー名の深さは 1 レベルのみで（つまり、親子形式を取ることができません）、ストリームオブジェクトに相対します。ハンドラー名には予約語を使用しないでください。例えば、ハンドラー名として「<codeph class="+ topic/ph pr-d/codeph ">close</codeph>」を使用すると、このメソッドは失敗します。Flash Media Server で、<codeph class="+ topic/ph pr-d/codeph ">@setDataFrame</codeph> を使用してメタデータのキーフレームをライブストリームに追加したり、<codeph class="+ topic/ph pr-d/codeph ">@clearDataFrame</codeph> を使用してキーフレームを削除したりします。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">arguments</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">オプションのパラメーターで、任意のデータ型を指定できます。それらは直列化され、接続を介して送信されます。受信側のハンドラーは同じ順番でそれらを受け取ります。パラメーターが循環オブジェクト（循環するリンクされたリストなど）である場合、シリアライザは参照を正しく処理します。Flash Media Server で、<codeph class="+ topic/ph pr-d/codeph ">@setDataFrame</codeph> が最初の引数の場合、<codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> を 2 番目の引数として使用します。3 番目の引数には、メタデータがプロパティとして設定された <codeph class="+ topic/ph pr-d/codeph ">Object</codeph> または <codeph class="+ topic/ph pr-d/codeph ">Array</codeph> のインスタンスを渡します。設定可能なプロパティ名のリストについては、<xref href="http://www.adobe.com/go/learn_fms_devguide_jp" scope="external" class="- topic/xref ">Flash Media Server 開発者ガイド</xref>を参照してください。<codeph class="+ topic/ph pr-d/codeph ">@clearDataFrame</codeph> を最初の引数、<codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> を 2 番目の引数として使用し、3 番目の引数はありません。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     パブリッシュされたストリーム上で、サブスクライブしているすべてのクライアントにメッセージを送信します。このメソッドは、指定されたストリームの発行者だけが使用できます。このメソッドは、Flash Media Server にのみ使用できます。このメッセージを処理して応答するには、<codeph class="+ topic/ph pr-d/codeph ">NetStream</codeph> オブジェクトにハンドラーを作成します。このオブジェクトの例には、<codeph class="+ topic/ph pr-d/codeph ">ns.HandlerName</codeph> があります。
     
     <p class="- topic/p ">
     <ph class="- topic/ph ">Flash Player または </ph> AIR は、メソッドやそれらのデータ、オブジェクトプロトタイプ変数、または列挙不可能な変数を直列化しません。表示オブジェクトの場合、<ph class="- topic/ph ">Flash Player または</ph> AIR はパスを直列化しますが、データは直列化しません。
     </p>
     
     <p class="- topic/p ">
     <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> メソッドを呼び出し、Flash Media Server にパブリッシュするライブストリームにデータキーフレームを追加できます。データキーフレームは、発行者がライブストリームに追加するメッセージです。通常、データキーフレームは、カメラやマイクロホンからストリーム用のデータをキャプチャする前に、ライブストリームにメタデータを追加するために使用されます。発行者は、ライブストリームのパブリッシュ中にいつでもデータキーフレームを追加できます。発行者がサーバーに接続している限り、データキーフレームはサーバーのメモリに保存されます。
     </p>
     <p class="- topic/p ">
     データキーフレームが追加される前のライブストリームにサブスクライブしているクライアントは、データキーフレームが追加されるとすぐにそのキーフレームを受信します。データキーフレームが追加された後のライブストリームにサブスクライブしているクライアントは、サブスクライブするときにキーフレームを受信します。
     </p>
     <p class="- topic/p ">
     Flash Media Server に送信するライブストリームにメタデータのキーフレームを追加するには、次の例に示すように、<codeph class="+ topic/ph pr-d/codeph ">@setDataFrame</codeph> をハンドラー名として使用し、続いて 2 つの引数を指定します。
     </p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var ns:NetStream = new NetStream(nc);
     ns.send("@setDataFrame", "onMetaData", metaData);
     </codeblock>
     
     
     
     <p class="- topic/p ">
     <codeph class="+ topic/ph pr-d/codeph ">@setDataFrame</codeph> 引数は、Flash Media Server に組み込まれている特別なハンドラーを表します。<codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> 引数は、<codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> イベントを監視してメタデータを取得する、クライアントアプリケーションのコールバック関数の名前です。3 番目の <codeph class="+ topic/ph pr-d/codeph ">metaData</codeph> は、メタデータ値を定義したプロパティを持つ <codeph class="+ topic/ph pr-d/codeph ">Object</codeph> または <codeph class="+ topic/ph pr-d/codeph ">Array</codeph> のインスタンスです。
     </p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">@clearDataFrame</codeph> を使用して、ストリームに設定されているメタデータのキーフレームを消去します。
     </p>
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     ns.send("@clearDataFrame", "onMetaData");
     </codeblock>
     
     
     </apiDesc><example conref="examples\NetStream.send.1.as" class="- topic/example "> 次の例は、2 つの <codeph class="+ topic/ph pr-d/codeph ">NetStream</codeph> オブジェクトを作成します。1 つのオブジェクトはサーバーへのライブストリームのパブリッシュに使用し、もう 1 つはストリームへのサブスクライブに使用します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
   import flash.display.Sprite;
   import flash.net.NetConnection;
   import flash.net.NetStream;
   import flash.events.NetStatusEvent;
   import flash.media.Video;
   import flash.utils.setTimeout;

 
   public class TestExample extends Sprite
   {
     var nc:NetConnection = new NetConnection();
     var ns1:NetStream;
     var ns2:NetStream;
     var vid:Video = new Video(300,300);
     var obj:Object = new Object();
 
     public function TestExample() {
        nc.objectEncoding = 0;
        nc.addEventListener("netStatus", onNCStatus);
        nc.connect("rtmp://localhost/FlashVideoApp");
        addChild(vid); 
     }
  
     function onNCStatus(event:NetStatusEvent):void {
       switch (event.info.code) {
           case "NetConnection.Connect.Success":
               trace("You've connected successfully");
               ns1 = new NetStream(nc);
               ns2 = new NetStream(nc);
               
               ns1.client = new CustomClient();
               ns1.publish("dummy", "live");
    
               ns2.play("dummy");
               ns2.client = new CustomClient();
               vid.attachNetStream(ns2);
               setTimeout(sendHello, 3000);
               break;
              
           case "NetStream.Publish.BadName":
               trace("Please check the name of the publishing stream" );
               break;
        }   
     }

     function sendHello():void {
         ns1.send("myFunction", "hello");
     }       
   }
 }
 
 class CustomClient {
    public function myFunction(event:String):void {
       trace(event);
    }
 }
</codeblock></example><example conref="examples\NetStream.send.2.as" class="- topic/example "> 次の例は、メタデータを作成してライブストリームに追加します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
private function netStatusHandler(event:NetStatusEvent):void {
     switch (event.info.code) {  
        case "NetStream.Publish.Start":
            var metaData:Object = new Object();
            metaData.title = "myStream";
            metaData.width = 400;
            metaData.height = 200;
            ns.send("&amp;#64;setDataFrame", "onMetaData", metaData);
            ns.attachCamera( Camera.getCamera() );
            ns.attachAudio( Microphone.getMicrophone() );        
    }
}
</codeblock></example><example conref="examples\NetStream.send.3.as" class="- topic/example "> ビデオに追加されているデータキーフレームに応答するには、クライアントが <codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> イベントハンドラーを定義する必要があります。次の例では、<codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> イベントハンドラーは <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> に登録されていませんが、代わりに <codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> という名前のコールバック関数が登録されています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 public function onMetaData(info:Object):void {
    trace("width: " + info.width);
    trace("height: " + info.height);
 }
</codeblock></example><example conref="examples\NetStream.send.4.as" class="- topic/example "> 次の例は、サーバーに再生リストを作成する方法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 // Create a NetStream for playing
 var my_ns:NetStream = new NetStream(my_nc);
 my_video.attachNetStream(my_ns);
 
 // Play the stream record1
 my_ns.play("record1", 0, -1, true);
 
 // Switch to the stream live1 and play for 5 seconds.  
 // Since reset is false, live1 will start to play after record1 is done.
 my_ns.play("live1", -1 , 5, false);
</codeblock></example><example conref="examples\NetStream.send.5.as" class="- topic/example "> 録画済みのビデオファイルにデータメッセージだけが含まれている場合、録画したときの速度でビデオファイルを再生するか、すべてのデータメッセージを一度に取得することができます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 //To play at normal speed
 var my_ns:NetStream = new NetStream(my_nc);
 my_ns.play("log", 0, -1);
 
 //To get the data messages all at once
 my_ns.play("log", 0, -1, 3);
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/client" class="- topic/link "><linktext class="- topic/linktext ">client</linktext></link><link href="flash.net.xml#NetStream/dataReliable" class="- topic/link "><linktext class="- topic/linktext ">dataReliable</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:setDRMAuthenticationCredentials" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setDRMAuthenticationCredentials</apiName><shortdesc class="- topic/shortdesc ">
     基になる暗号化コンテンツを表示するために必要な DRM 認証資格情報を設定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream, setDRMAuthenticationCredentials
     
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">userName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">有効なユーザー名情報。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">password</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定したユーザー名に対応するパスワード情報。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定する認証資格情報のタイプを指定するストリング。 有効な値は <codeph class="+ topic/ph pr-d/codeph ">"drm"</codeph> と <codeph class="+ topic/ph pr-d/codeph ">"proxy"</codeph> です。 デフォルト値は <codeph class="+ topic/ph pr-d/codeph ">"drm"</codeph> です。
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"drm"</codeph> 認証タイプの場合、提供された資格情報は Flash Access に対して認証されます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"proxy"</codeph> 認証タイプの場合、資格情報は プロキシサーバーで認証され、プロキシサーバーが要求する資格情報と一致する必要があります。例えば、<codeph class="+ topic/ph pr-d/codeph ">"proxy"</codeph> オプションを使用すると、ユーザーがインターネットにアクセスする前にプロキシサーバーで認証を受けるように企業が要求する場合、アプリケーションにそのような手順を設定できます。匿名認証を使用する場合を除き、プロキシ認証の後にも、ユーザーは証明書を取得してコンテンツを再生するために、Flash Access に対して認証する必要があります。<codeph class="+ topic/ph pr-d/codeph ">"drm"</codeph> オプションを指定して <codeph class="+ topic/ph pr-d/codeph ">setDRMAuthenticationcredentials()</codeph> を 2 回使用すると、Flash Access に対して認証することができます。</li></ul>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     基になる暗号化コンテンツを表示するために必要な DRM 認証資格情報を設定します。
     <p class="- topic/p ">
     <codeph class="+ topic/ph pr-d/codeph ">setDRMAuthenticationCredentials()</codeph> メソッドは、コンテンツプロバイダーまたはプロキシサーバーに知られていて承認されている資格情報に一致する資格情報を提供する必要があります。これらは、ユーザーがコンテンツの表示許可を取得するときに使用する資格情報と同じものです。
     </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.events.xml#DRMAuthenticateEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.DRMAuthenticateEvent</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:step" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">step</apiName><shortdesc class="- topic/shortdesc ">
    現在表示されているフレームに対して、指定された数のフレーム分、前後に進みます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">frames</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    現在表示されているフレームに対して、指定された数のフレーム分、前後に進みます。前に進む場合は正の数、後ろに進む場合は負の数を指定します。このメソッドを呼び出して、正確かつ高速な早送りまたは巻き戻し機能を作成します。
    
    <p class="- topic/p ">このメソッドは、データが Flash Media Server 3.5.3 以降からストリーミングされ、<codeph class="+ topic/ph pr-d/codeph ">NetStream.inBufferSeek</codeph> が <codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合にのみ使用可能です。さらに、ターゲットフレームがバッファーに格納されている必要があります。例えば、現在表示されているフレームがフレーム番号 120 で値 1000 を指定する場合、フレーム番号 1120 がバッファーにない場合、メソッドはエラーになります。</p>
    
    <p class="- topic/p ">このメソッドは、<codeph class="+ topic/ph pr-d/codeph ">pause()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">togglePause()</codeph>メソッドと共に使用されることを想定しています。再生中に、停止せずに 10 個のフレームを前または後ろに進めた場合、その操作に気付かないか、異常が発生しているかのように見えます。さらに、<codeph class="+ topic/ph pr-d/codeph ">pause()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">togglePause</codeph> を呼び出したときにオーディオは出力されません。</p>
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">NetStream.step()</codeph> の呼び出しが成功すると、info オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティの値として「NetStream.Step.Notify」が指定された NetStatusEvent が送信されます。 </p>
    
    <p class="- topic/p ">  </p>
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/inBufferSeek" class="- topic/link "><linktext class="- topic/linktext ">inBufferSeek</linktext></link><link href="flash.net.xml#NetStream/backBufferTime" class="- topic/link "><linktext class="- topic/linktext ">backBufferTime</linktext></link><link href="flash.net.xml#NetStream/backBufferLength" class="- topic/link "><linktext class="- topic/linktext ">backBufferLength</linktext></link><link href="flash.net.xml#NetStream/bufferTime" class="- topic/link "><linktext class="- topic/linktext ">bufferTime</linktext></link><link href="flash.net.xml#NetStream/bufferLength" class="- topic/link "><linktext class="- topic/linktext ">bufferLength</linktext></link><link href="flash.net.xml#NetStream/step()" class="- topic/link "><linktext class="- topic/linktext ">step()</linktext></link><link href="flash.net.xml#NetStream/seek()" class="- topic/link "><linktext class="- topic/linktext ">seek()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:togglePause" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">togglePause</apiName><shortdesc class="- topic/shortdesc ">
     ストリームの再生を一時停止または再開します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream.resume, resume
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ストリームの再生を一時停止または再開します。このメソッドを呼び出すと最初は再生を一時停止し、次に呼び出したときには再生を再開します。このメソッドを使用して、ユーザーが 1 つのボタンを押すだけで再生を一時停止または再生できるようにすることができます。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.net.xml#NetStream/pause()" class="- topic/link "><linktext class="- topic/linktext ">pause()</linktext></link><link href="flash.net.xml#NetStream/resume()" class="- topic/link "><linktext class="- topic/linktext ">resume()</linktext></link></related-links></apiOperation><apiValue id="flash.net:NetStream:CONNECT_TO_FMS" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CONNECT_TO_FMS</apiName><shortdesc class="- topic/shortdesc ">
     NetStream インスタンスのコンストラクターに対するパラメーターとして使用される静的オブジェクト。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">connectToFMS</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     NetStream インスタンスのコンストラクターに対するパラメーターとして使用される静的オブジェクト。これは NetStream コントラクタの 2 番目のパラメーターのデフォルト値です。アプリケーションが使用してメディアをプログレッシブ再生することはありません。このパラメーターを使用すると、コントラクタが Flash Media Server インスタンスに接続します。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:DIRECT_CONNECTIONS" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DIRECT_CONNECTIONS</apiName><shortdesc class="- topic/shortdesc ">
     ピアーツーピアーの発行者接続を作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">directConnections</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ピアーツーピアーの発行者接続を作成します。2 番目の（オプション）パラメーターのこのストリングを、NetStream インスタンスのコンストラクターに渡します。アプリケーションはこのストリングを使用して、クライアントにオーディオおよびビデオをパブリッシュするための NetStream 接続を作成します。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:audioReliable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">audioReliable</apiName><shortdesc class="- topic/shortdesc ">
     
     RTMFP 接続の場合、音声が完全な信頼性を備えて送信されるかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     RTMFP 接続の場合、音声が完全な信頼性を備えて送信されるかどうかを指定します。TRUE の場合、この NetStream 経由で送信されるすべての音声は完全に信頼できます。FALSE の場合、送信される音声は完全には信頼できませんが、一定の時間再送信された後、消失します。FALSE 値を使用すれば、音声品質を犠牲にして、レーテンシーを低減できます。
     
     <p class="- topic/p ">部分信頼性をサポートしていないネットワークプロトコルでプロパティを FALSE に設定しようとすると、この試行は無視され、プロパティは TRUE に設定されます。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/dataReliable" class="- topic/link "><linktext class="- topic/linktext ">dataReliable</linktext></link><link href="flash.net.xml#NetStream/videoReliable" class="- topic/link "><linktext class="- topic/linktext ">videoReliable</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:audioSampleAccess:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">audioSampleAccess</apiName><shortdesc class="- topic/shortdesc ">
     
     RTMFP 接続の場合、この NetStream 上のピアーツーピアーサブスクライバーに音声ストリームのキャプチャを許可するかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     RTMFP 接続の場合、この NetStream 上のピアーツーピアーサブスクライバーに音声ストリームのキャプチャを許可するかどうかを指定します。FALSE の場合、音声ストリームをキャプチャしようとするサブスクライバーには権限エラーが表示されます。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/videoSampleAccess" class="- topic/link "><linktext class="- topic/linktext ">videoSampleAccess</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:backBufferLength:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">backBufferLength</apiName><shortdesc class="- topic/shortdesc ">
    巻戻しおよび再生のために現在キャッシュされている、以前に表示されたデータの秒数。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    巻戻しおよび再生のために現在キャッシュされている、以前に表示されたデータの秒数。
    
    <p class="- topic/p ">このプロパティは、データが Flash Media Server 3.5.3 以降のストリーミングの場合にのみ使用可能です。Flash Media Server について詳しくは、このクラスの説明を参照してください。</p>
    
    <p class="- topic/p ">以前に表示されたデータをどれだけキャッシュするかを指定するには、<codeph class="+ topic/ph pr-d/codeph ">Netstream.backBufferTime</codeph> プロパティを使用します。 </p>
    
    <p class="- topic/p "> データがキャッシュされるのを防ぐために、<codeph class="+ topic/ph pr-d/codeph ">Netstream.inBufferSeek</codeph> プロパティを FALSE に設定します。</p>
    
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/backBufferTime" class="- topic/link "><linktext class="- topic/linktext ">backBufferTime</linktext></link><link href="flash.net.xml#NetStream/inBufferSeek" class="- topic/link "><linktext class="- topic/linktext ">inBufferSeek</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:backBufferTime:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">backBufferTime</apiName><shortdesc class="- topic/shortdesc ">
    巻き戻しと再生のために Flash Player がキャッシュする、以前に表示されたデータの量を秒単位で指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    巻き戻しと再生のために Flash Player がキャッシュする、以前に表示されたデータの量を秒単位で指定します。デフォルト値は、デスクトップアプリケーションの場合は 30 秒、モバイルアプリケーションの場合は 3 秒です。
    
    <p class="- topic/p ">このプロパティは、Flash Media Server 3.5.3 以降でデータをストリーミングする場合にのみ使用できます。Flash Media Server について詳しくは、このクラスの説明を参照してください。</p>
    
    <p class="- topic/p ">このプロパティを使用すると、既に表示されたデータをもう一度サーバーから取得することがないので、巻戻し操作のパフォーマンスが向上します。 その代わり、ストリームはバッファーから再生を開始します。再生中、データはバッファーがいっぱいになるまでストリーミングを続けます。 </p>
    
    <p class="- topic/p ">巻戻し位置がキャッシュ内のデータよりも前の場合、バッファーはフラッシュされ、データは要求された位置でサーバーからストリーミングを開始します。 </p>
    
    <p class="- topic/p ">このプロパティを使用するには、<codeph class="+ topic/ph pr-d/codeph ">Netstream.inBufferSeek</codeph> プロパティを TRUE に設定します。</p>
    
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/backBufferLength" class="- topic/link "><linktext class="- topic/linktext ">backBufferLength</linktext></link><link href="flash.net.xml#NetStream/bufferTime" class="- topic/link "><linktext class="- topic/linktext ">bufferTime</linktext></link><link href="flash.net.xml#NetStream/inBufferSeek" class="- topic/link "><linktext class="- topic/linktext ">inBufferSeek</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:bufferLength:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bufferLength</apiName><shortdesc class="- topic/shortdesc ">
     バッファーに現在格納されているデータの秒数です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream.bufferLength, bufferLength
     
     </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     バッファーに現在格納されているデータの秒数です。このプロパティを <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> プロパティと組み合わせることにより、あとどれくらいの時間でバッファーが満たされるかを見積もることができます。例えば、バッファーにデータがロードされるのを待つユーザーに対してフィードバック情報を提供することが可能になります。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/backBufferLength" class="- topic/link "><linktext class="- topic/linktext ">backBufferLength</linktext></link><link href="flash.net.xml#NetStream/bufferTime" class="- topic/link "><linktext class="- topic/linktext ">bufferTime</linktext></link><link href="flash.net.xml#NetStream/bytesLoaded" class="- topic/link "><linktext class="- topic/linktext ">bytesLoaded</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:bufferTimeMax:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bufferTimeMax</apiName><shortdesc class="- topic/shortdesc ">
    ライブストリーミングコンテンツ用に、最大バッファー長を秒単位で指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ライブストリーミングコンテンツ用に、最大バッファー長を秒単位で指定します。デフォルト値は 0 です。バッファー長は、ネットワークとデバイスの問題（送信側と受信側のクロックの誤差など）により、時間の経過と共に長くなることがあります。このプロパティを設定すると、ミーティングや調査などのライブアプリケーション用のバッファー長の上限を設定することができます。
    
    <p class="- topic/p "> <codeph class="+ topic/ph pr-d/codeph ">bufferTimeMax > 0</codeph> および <codeph class="+ topic/ph pr-d/codeph ">bufferLength >= bufferTimeMax</codeph> の場合、<codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> が <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> に到達するまで、オーディオは早く再生されます。ライブストリームがビデオのみの場合は、ビデオは <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> が <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> に達するまで高速で再生されます。</p>
    
    <p class="- topic/p ">再生の遅延の程度（<codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> と <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> の差異）に応じて、Flash Player は、キャッチアップレートを 1.5％～6.25％の間で制御します。ストリームにオーディオが含まれている場合、高速な再生は、ドメインで音声の歪みを最小化するダウンサンプリング周波数を使用することにより実現されます。</p>
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">bufferTimeMax</codeph> プロパティを設定すると、次の場合にライブバッファーストリームのキャッチアップが有効になります。</p>
    
    <ul class="- topic/ul "><li class="- topic/li ">Flash Media Server からライブメディアをストリーミングする場合。</li><li class="- topic/li ">Data Generation Mode Flash Mode（<codeph class="+ topic/ph pr-d/codeph ">NetStream.appendBytes()</codeph>）でライブメディアをストリーミングする場合。</li></ul>
    
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/bufferLength" class="- topic/link "><linktext class="- topic/linktext ">bufferLength</linktext></link><link href="flash.net.xml#NetStream/bufferTime" class="- topic/link "><linktext class="- topic/linktext ">bufferTime</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:bufferTime:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bufferTime</apiName><shortdesc class="- topic/shortdesc ">
     ストリームの表示を開始するまでにメッセージをどの程度の時間バッファリングしておくかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream.setBufferTime, setBufferTime
     
     </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ストリームの表示を開始するまでにメッセージをどの程度の時間バッファリングしておくかを指定します。
     
     <p class="- topic/p ">デフォルト値は 0.1（1/10 秒）です。バッファー内の現在の秒数を調べるには、<codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> プロパティを使用します。</p>
     
     <p class="- topic/p ">サーバーサイド再生リストを再生するには、<codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> に少なくとも 1 秒指定する必要があります。再生中に問題が発生した場合は、<codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> の長さを増やしてください。
     </p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">記録されているコンテンツ</b> 記録されている（ライブではない）コンテンツをストリーミングするときにひずみが生じないようにするには、<codeph class="+ topic/ph pr-d/codeph ">Netstream.bufferTime</codeph> の値を 0 に設定しないようにします。記録されているコンテンツの場合、デフォルトでは入力バッファーが使用され、メディアデータがキューに置かれてメディアが適切に再生されます。記録されているコンテンツでは、デフォルト値を使用するか、バッファー時間を延長します。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">ライブコンテンツ</b> ライブコンテンツをストリーミングする場合は、<codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> プロパティを 0 に設定します。</p>
     
     <p class="- topic/p ">Flash Player 9.0.115.0 以降、Flash Player では、<codeph class="+ topic/ph pr-d/codeph ">NetStream.pause()</codeph> が呼び出されたときにバッファーをクリアしなくなりました。Flash Player 9.0.115.0 以前は、Flash Player はバッファーが満杯になるまで待機してから再生を開始していましたが、このため遅延がよく発生していました。</p>
         
         <p class="- topic/p ">1 回の一時停止の場合、<codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferLength</codeph> プロパティには 60 秒または <codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferTime</codeph> の値の 2 倍のうち、いずれか大きい方の値という制限があります。例えば、<codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> が 20 秒の場合、Flash Player は <codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferLength</codeph> が 20~~2 (40) または 60 のうち、大きい方の値になるまでバッファリングするため、この場合は、<codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> が 60 秒になるまでバッファリングします。<codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> が 40 秒の場合、Flash Player は <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> が 40~~2 (80) または 60 のうち、大きい方の値になるまでバッファリングするため、この場合は、<codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> が 80 秒になるまでバッファリングします。</p>
         
         <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> プロパティにも絶対制限があります。<codeph class="+ topic/ph pr-d/codeph ">pause()</codeph> の呼び出しによって <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> が 600 秒または<codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> ~~ 2 の値のいずれか大きい方の値を超えた場合、Flash Player はバッファーをフラッシュし、<codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> を 0 にリセットします。例えば、<codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> が 120 秒の場合は、<codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> が 600 秒に達すると、Flash Player はバッファーをフラッシュします。<codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> が 360 秒の場合は、<codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> が 720 秒に達すると、Flash Player はバッファーをフラッシュします。</p>
         
         <p class="- topic/p "><b class="+ topic/ph hi-d/b ">ヒント</b>：例えば、コードで <codeph class="+ topic/ph pr-d/codeph ">NetStream.pause()</codeph> を使用し、閲覧者がコマーシャルを見ている間、データをバッファーし、メインのビデオが開始されたときに一時停止を解除することができます。</p>
         
         <p class="- topic/p ">一時停止の新しい動作の詳細については、<xref href="http://www.adobe.com/go/learn_fms_smartpause_jp" scope="external" class="- topic/xref ">http://www.adobe.com/go/learn_fms_smartpause_jp</xref> を参照してください。</p>
     <p class="- topic/p ">
     <b class="+ topic/ph hi-d/b ">Flash Media Server</b>。バッファーの動作は、パブリッシュするストリームまたはサブスクライブするストリームにバッファー時間が設定されているかどうかによって異なります。パブリッシュするストリームの場合、<codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> には、送信バッファーに蓄積されたフレームの送信を開始するまでの時間の長さを指定します。高速接続の場合は、バッファー時間を考慮する必要はありません。データは、アプリケーションがバッファリングすると即座に送信されます。一方、低速接続では、アプリケーションがデータをバッファリングする速度とクライアントに送信できる速度に大きな差が生じることがあります。
     </p>
     
     <p class="- topic/p ">
     サブスクライブするストリームの場合、<codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> には、受信データをバッファリングして、ストリームの表示を開始するまでの時間を指定します。
     </p>
     
     <p class="- topic/p ">
     記録されたストリームを再生するときに、<codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> が 0 の場合、Flash はバッファー時間を小さな値（約 10 ミリ秒）に設定します。ライブストリームを後で再生する場合（例えば、再生リストから再生）、このバッファー時間が保持されます。つまり、<codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> はストリームに対して 0 以外の値のままになります。
     </p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/backBufferTime" class="- topic/link "><linktext class="- topic/linktext ">backBufferTime</linktext></link><link href="flash.net.xml#NetStream/bufferLength" class="- topic/link "><linktext class="- topic/linktext ">bufferLength</linktext></link><link href="flash.net.xml#NetStream/bufferTimeMax" class="- topic/link "><linktext class="- topic/linktext ">bufferTimeMax</linktext></link><link href="flash.net.xml#NetStream/time" class="- topic/link "><linktext class="- topic/linktext ">time</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:bytesLoaded:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesLoaded</apiName><shortdesc class="- topic/shortdesc ">
     既にアプリケーションにロードされているデータのバイト数です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream.bytesLoaded, bytesLoaded
     
     </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     既にアプリケーションにロードされているデータのバイト数です。このプロパティを <codeph class="+ topic/ph pr-d/codeph ">bytesTotal</codeph> プロパティと組み合わせることにより、あとどれくらいの時間でバッファーが満たされるかを見積もることができます。例えば、バッファーにデータがロードされるのを待つユーザーに対してフィードバック情報を提供することが可能になります。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/bytesTotal" class="- topic/link "><linktext class="- topic/linktext ">bytesTotal</linktext></link><link href="flash.net.xml#NetStream/bufferLength" class="- topic/link "><linktext class="- topic/linktext ">bufferLength</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:bytesTotal:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesTotal</apiName><shortdesc class="- topic/shortdesc ">
     アプリケーションにロードされるファイルの総バイト数。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream.bytesTotal, bytesTotal
     </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     アプリケーションにロードされるファイルの総バイト数。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/bytesLoaded" class="- topic/link "><linktext class="- topic/linktext ">bytesLoaded</linktext></link><link href="flash.net.xml#NetStream/bufferTime" class="- topic/link "><linktext class="- topic/linktext ">bufferTime</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:checkPolicyFile:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">checkPolicyFile</apiName><shortdesc class="- topic/shortdesc ">
     ビデオファイルのロードを開始する前に、アプリケーションが、ロードするビデオファイルのサーバーからクロスドメインポリシーファイルをダウンロードしようとするかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>: please review at same time: checkPolicyFile property in LoaderContext
     </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ビデオファイルのロードを開始する前に、アプリケーションが、ロードするビデオファイルのサーバーからクロスドメインポリシーファイルをダウンロードしようとするかどうかを指定します。このプロパティは、プログレッシブビデオのダウンロードと、呼び出し元の SWF ファイル自体のドメインの外部にあるファイルのロードに使用します。このプロパティは、RTMP を使用している場合は無視されます。
     
     <p class="- topic/p ">このプロパティを <codeph class="+ topic/ph pr-d/codeph "> true</codeph> に設定して、呼び出し元の SWF の外部にあるドメインからロードしたビデオファイル上の <codeph class="+ topic/ph pr-d/codeph ">BitmapData.draw()</codeph> を呼び出します。<codeph class="+ topic/ph pr-d/codeph ">BitmapData.draw()</codeph> メソッドを使用すると、ビデオにピクセルレベルでアクセスできます。ロード時に <codeph class="+ topic/ph pr-d/codeph ">BitmapData.draw()</codeph> を呼び出すときに <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> プロパティを <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定していないと、<codeph class="+ topic/ph pr-d/codeph ">SecurityError</codeph> 例外を受け取る場合があります。これは、必要なポリシーファイルがダウンロードされていないためです。</p>
     
     <p class="- topic/p ">ロードしているビデオに対するピクセルレベルのアクセスが必要ない場合は、このプロパティを true に設定しないでください。ポリシーファイルを確認すると、ネットワーク帯域幅が消費されるため、ダウンロードの開始が遅れる場合があります。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> メソッドを呼び出すときに <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> の設定が <codeph class="+ topic/ph pr-d/codeph ">true</codeph> になっていると、<ph class="- topic/ph ">Flash Player または</ph> AIR ランタイムで該当するクロスドメインポリシーファイルが正常にダウンロードされるか、NetStream.play() によるダウンロードが開始される前にそのようなポリシーファイルは存在しないと判定されるか、いずれかになります。ポリシーファイルの存在を確認するため、<ph class="- topic/ph ">Flash Player または</ph> AIR ランタイムは次のアクションをこの順番で実行します。</p>
     
     <ol class="- topic/ol "><li class="- topic/li ">アプリケーションは、既にダウンロードされているポリシーファイルを考慮します。</li><li class="- topic/li ">アプリケーションは、<codeph class="+ topic/ph pr-d/codeph ">Security.loadPolicyFile()</codeph> メソッドの呼び出しで指定された保留中ポリシーファイルをダウンロードしようとします。</li><li class="- topic/li ">アプリケーションは <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> に渡された URL に対応するデフォルトの場所からポリシーファイルをダウンロードしようとします。その URL と同じサーバー上の <codeph class="+ topic/ph pr-d/codeph ">/crossdomain.xml</codeph> がデフォルトの場所です。</li></ol>
     
     <p class="- topic/p ">どのような場合も、<ph class="- topic/ph ">Flash Player</ph> または Adobe AIR では、該当するポリシーファイルがビデオのサーバー上に存在しており、ポリシーファイルの場所に基づいて <codeph class="+ topic/ph pr-d/codeph ">play()</codeph> に渡された URL にあるオブジェクトへのアクセスを提供し、<codeph class="+ topic/ph pr-d/codeph ">&lt;allow-access-from></codeph> タグによって呼び出し元コードのファイルのドメインがビデオにアクセスできるようにする必要があります。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定した場合、アプリケーションはビデオをダウンロードする前に、ポリシーファイルが検証されるまで待機します。<codeph class="+ topic/ph pr-d/codeph ">BitmapData.draw()</codeph> の呼び出しなど、ビデオデータに対するピクセルレベルの操作は、NetStream オブジェクトから <codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">NetStatus</codeph> イベントを受け取るまで実行を待つ必要があります。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定したが関連ポリシーファイルが見つからない場合、エラーになって SecurityError 例外がスローされるのは、ポリシーファイルを必要とする操作を実行してからです。</p>
     
     <p class="- topic/p ">サーバーサイド HTTP リダイレクトを使用する URL からファイルをダウンロードする場合は、<codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> に注意してください。アプリケーションは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> で指定する初期 URL に対応するポリシーファイルを取得しようとします。最終的なファイルが HTTP リダイレクトによって別の URL から取得される場合、最初にダウンロードされたポリシーファイルはファイルの最終的な URL（セキュリティ判定においてはこの URL が重要となります）に適用できないことがあります。</p>
     
     <p class="- topic/p ">ポリシーファイルについて詳しくは、『ActionScript 3.0 開発ガイド<i class="+ topic/ph hi-d/i "/>』の「Web サイトのコントロール（ポリシーファイル）」および Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#BitmapData/draw()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.BitmapData.draw()</linktext></link><link href="flash.system.xml#Security/loadPolicyFile()" class="- topic/link "><linktext class="- topic/linktext ">flash.system.Security.loadPolicyFile()</linktext></link><link href="flash.net.xml#NetStream/event:netStatus" class="- topic/link "><linktext class="- topic/linktext ">netStatus</linktext></link><link href="flash.net.xml#NetStream/event:onMetaData" class="- topic/link "><linktext class="- topic/linktext ">onMetaData</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:client:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">client</apiName><shortdesc class="- topic/shortdesc ">
     F4V または FLV ファイルデータのストリーミングの処理で、コールバックメソッドの呼び出し元となるオブジェクトを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">client</codeph> プロパティは、null 以外のオブジェクトに設定する必要があります。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     F4V または FLV ファイルデータのストリーミングの処理で、コールバックメソッドの呼び出し元となるオブジェクトを指定します。デフォルトのオブジェクトは、作成される NetStream オブジェクト <codeph class="+ topic/ph pr-d/codeph ">this</codeph> です。<codeph class="+ topic/ph pr-d/codeph ">client</codeph> プロパティを別のオブジェクトに設定すると、コールバックメソッドはその別のオブジェクトで呼び出されます。<codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph> オブジェクトは、関数 <codeph class="+ topic/ph pr-d/codeph ">onCuePoint()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">onImageData()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">onMetaData()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">onPlayStatus()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">onSeekPoint()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">onTextData()</codeph> および <codeph class="+ topic/ph pr-d/codeph ">onXMPData()</codeph> を呼び出して、関連付けられたデータオブジェクトを受け取ることができます。
     <p class="- topic/p "><b class="+ topic/ph hi-d/b "><codeph class="+ topic/ph pr-d/codeph ">client</codeph> プロパティをイベントハンドラーに関連付けるには：</b></p>
     <p class="- topic/p "><ol class="- topic/ol "><li class="- topic/li ">オブジェクトを作成し、NetStream オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">client</codeph> プロパティに割り当てます。
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var customClient:Object = new Object();
     my_netstream.client = customClient;
     </codeblock>
     </li><li class="- topic/li ">必要なデータイベントに対するハンドラー関数をクライアントオブジェクトのプロパティとして割り当てます。
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     customClient.onImageData = onImageDataHandler;
     </codeblock>
     </li><li class="- topic/li ">以下のようなデータイベントオブジェクトを受け取るハンドラー関数を記述します。
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
      public function onImageDataHandler(imageData:Object):void {
              trace("imageData length: " + imageData.data.length);
      }
     </codeblock></li></ol></p>
     <p class="- topic/p ">データがストリームを通るとき、または再生中、データイベントオブジェクト（この場合は <codeph class="+ topic/ph pr-d/codeph ">imageData</codeph> オブジェクト）にデータが取り込まれます。 <codeph class="+ topic/ph pr-d/codeph ">onImageData</codeph> の説明を参照してください。<codeph class="+ topic/ph pr-d/codeph ">client</codeph> プロパティに関連付けられたオブジェクトの例がすべて記載されています。</p>
     <p class="- topic/p "><b class="+ topic/ph hi-d/b "><codeph class="+ topic/ph pr-d/codeph ">client</codeph> プロパティをサブクラスに関連付けるには：</b></p>
     <p class="- topic/p "><ol class="- topic/ol "><li class="- topic/li ">ハンドラー関数を伴うサブクラスがデータイベントオブジェクトを受け取るように作成します。
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     class CustomClient {
        public function onMetaData(info:Object):void {
            trace("metadata: duration=" + info.duration + " framerate=" + info.framerate);
     }
     </codeblock>
     </li><li class="- topic/li ">サブクラスのインスタンスを NetStream オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">client</codeph> プロパティに割り当てます。
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     my_netstream.client = new CustomClient();
     </codeblock>
     </li></ol></p>
     <p class="- topic/p ">データがストリームを通るとき、または再生中、データイベントオブジェクト（この場合は <codeph class="+ topic/ph pr-d/codeph ">info</codeph> オブジェクト）にデータが取り込まれます。 NetStream クラスの最後にあるクラス例を参照してください。<codeph class="+ topic/ph pr-d/codeph ">client</codeph> プロパティへのサブクラスインスタンスの割り当てが記載されています。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/event:onCuePoint" class="- topic/link "><linktext class="- topic/linktext ">onCuePoint</linktext></link><link href="flash.net.xml#NetStream/event:onImageData" class="- topic/link "><linktext class="- topic/linktext ">onImageData</linktext></link><link href="flash.net.xml#NetStream/event:onMetaData" class="- topic/link "><linktext class="- topic/linktext ">onMetaData</linktext></link><link href="flash.net.xml#NetStream/event:onPlayStatus" class="- topic/link "><linktext class="- topic/linktext ">onPlayStatus</linktext></link><link href="flash.net.xml#NetStream/event:onSeekPoint" class="- topic/link "><linktext class="- topic/linktext ">onSeekPoint</linktext></link><link href="flash.net.xml#NetStream/event:onTextData" class="- topic/link "><linktext class="- topic/linktext ">onTextData</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:currentFPS:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">currentFPS</apiName><shortdesc class="- topic/shortdesc ">
     1 秒あたりの表示フレーム数です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream.currentFPS, currentFPS
     
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     1 秒あたりの表示フレーム数です。複数のシステム上で再生できるようにビデオファイルを書き出す場合、テスト中にこの値をチェックすることで、ファイルの書き出し時にどの程度の圧縮が必要かを見極めることができます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:dataReliable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dataReliable</apiName><shortdesc class="- topic/shortdesc ">
     
     RTMFP 接続の場合、NetStream.send() 呼び出しが完全な信頼性を備えて送信されるかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     RTMFP 接続の場合、<codeph class="+ topic/ph pr-d/codeph ">NetStream.send()</codeph> 呼び出しが完全な信頼性を備えて送信されるかどうかを指定します。TRUE の場合、この NetStream 経由で送信された <codeph class="+ topic/ph pr-d/codeph ">NetStream.send()</codeph> 呼び出しは完全に信頼できます。FALSE の場合、<codeph class="+ topic/ph pr-d/codeph ">NetStream.send()</codeph> 呼び出しは完全な信頼性を備えて送信されることはありませんが、一定の時間再送信された後、消失します。値を FALSE に設定すれば、データ品質を犠牲にして、レーテンシーを低減できます。
     
     <p class="- topic/p ">部分信頼性をサポートしていないネットワークプロトコルでプロパティを FALSE に設定しようとすると、この試行は無視され、プロパティは TRUE に設定されます。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/audioReliable" class="- topic/link "><linktext class="- topic/linktext ">audioReliable</linktext></link><link href="flash.net.xml#NetStream/send()" class="- topic/link "><linktext class="- topic/linktext ">send()</linktext></link><link href="flash.net.xml#NetStream/videoReliable" class="- topic/link "><linktext class="- topic/linktext ">videoReliable</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:farID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">farID</apiName><shortdesc class="- topic/shortdesc ">
     RTMFP 接続の場合、この NetStream インスタンスに接続されている相手側の識別子です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     RTMFP 接続の場合、この NetStream インスタンスに接続されている相手側の識別子です。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:farNonce:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">farNonce</apiName><shortdesc class="- topic/shortdesc ">
     RTMFP および RTMPE 接続の場合、値は基本的にこのストリームの向こう側で選択され、この接続に固有です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     RTMFP および RTMPE 接続の場合、値は基本的にこのストリームの向こう側で選択され、この接続に固有です。この値は、ストリームの向こう側では <codeph class="+ topic/ph pr-d/codeph ">nearNonce</codeph> 値となります。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:inBufferSeek:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">inBufferSeek</apiName><shortdesc class="- topic/shortdesc ">
    表示されたデータがスマートシーク用にキャッシュされているか（TRUE）、キャッシュされていないか（FALSE）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>The following links work only if qualified with NetStream. We don't know why.
    </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    表示されたデータがスマートシーク用にキャッシュされているか（<codeph class="+ topic/ph pr-d/codeph ">TRUE</codeph>）、キャッシュされていないか（<codeph class="+ topic/ph pr-d/codeph ">FALSE</codeph>）を指定します。デフォルト値は FALSE です
    
    <p class="- topic/p "> Flash Media Server 3.5.3 および Flash Player 10.1 は連携してスマートシークをサポートします。スマートシークは、サーバー内のデータを要求せずに、巻き戻しと再生用のバッファーを使用します。標準のシークでは、バッファー済みのデータをフラッシュし、シーク時間に基づいて新しいデータを送信するようにサーバーに要求します。</p>
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">NetStream.step()</codeph> を呼び出して、指定した数のフレームを進めるか巻き戻します。<codeph class="+ topic/ph pr-d/codeph ">NetStream.seek()</codeph> を呼び出して、指定した数のフレームを前方へまたは後方へシークします。</p>
    
    <p class="- topic/p ">スマートシークにより、サーバーの負荷が減少し、シークのパフォーマンスが向上します。<codeph class="+ topic/ph pr-d/codeph ">inBufferSeek=true</codeph> に設定し、<codeph class="+ topic/ph pr-d/codeph ">step()</codeph> および<codeph class="+ topic/ph pr-d/codeph ">seek()</codeph> を呼び出して以下のものを作成します。</p>
    
    <ul class="- topic/ul "><li class="- topic/li ">クライアント側 DVR 機能。新しいビデオの配信をサーバーに要求する代わりに、クライアント側のバッファー内をシークします。</li><li class="- topic/li ">トリックモード。フレームのコマ送り再生、早送り、巻き戻り、スローモーション再生中の早送りなどを実行するプレーヤーを作成します。</li></ul>
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">inBufferSeek=true</codeph> と設定されていて、<codeph class="+ topic/ph pr-d/codeph ">NetStream.seek()</codeph> の呼び出しに成功した場合、NetStatusEvent の <codeph class="+ topic/ph pr-d/codeph ">info.description</codeph> プロパティには、ストリング <codeph class="+ topic/ph pr-d/codeph ">"client-inBufferSeek"</codeph> が含まれます。</p>
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">NetStream.step()</codeph> の呼び出しに成功した場合、NetStatusEvent の <codeph class="+ topic/ph pr-d/codeph ">info.code</codeph> プロパティにはストリング <codeph class="+ topic/ph pr-d/codeph ">"NetStream.Step.Notify"</codeph> が含まれます。</p>
    
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/backBufferTime" class="- topic/link "><linktext class="- topic/linktext ">backBufferTime</linktext></link><link href="flash.net.xml#NetStream/backBufferLength" class="- topic/link "><linktext class="- topic/linktext ">backBufferLength</linktext></link><link href="flash.net.xml#NetStream/bufferTime" class="- topic/link "><linktext class="- topic/linktext ">bufferTime</linktext></link><link href="flash.net.xml#NetStream/bufferLength" class="- topic/link "><linktext class="- topic/linktext ">bufferLength</linktext></link><link href="flash.net.xml#NetStream/step()" class="- topic/link "><linktext class="- topic/linktext ">step()</linktext></link><link href="flash.net.xml#NetStream/seek()" class="- topic/link "><linktext class="- topic/linktext ">seek()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:info:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">info</apiName><shortdesc class="- topic/shortdesc ">
     サービスの質に関する統計情報をプロパティが持つ NetStreamInfo オブジェクトを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.net:NetStreamInfo</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     サービスの質に関する統計情報をプロパティが持つ NetStreamInfo オブジェクトを返します。このオブジェクトは現在の状態のスナップショットです。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamInfo" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStreamInfo</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:liveDelay:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">liveDelay</apiName><shortdesc class="- topic/shortdesc ">
     ライブ（バッファリングされていない）モードでサブスクライブしているストリームバッファー内にあるデータの秒数です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><category class="- topic/category ">Property
     
     </category></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ライブ（バッファリングされていない）モードでサブスクライブしているストリームバッファー内にあるデータの秒数です。このプロパティは、現在のネットワーク転送の遅延時間を示します。
     
     <p class="- topic/p ">このプロパティは、主に Flash Media Server などのサーバーで使用することを目的としています。詳細については、クラスの説明を参照してください。</p>
     
     <p class="- topic/p ">このプロパティの値を取得して、ストリームの転送品質を大まかに判断し、それをユーザーに伝えることができます。 </p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:maxPauseBufferTime:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">maxPauseBufferTime</apiName><shortdesc class="- topic/shortdesc ">
     一時停止モード中にメッセージをバッファリングしておく時間を秒単位で指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     一時停止モード中にメッセージをバッファリングしておく時間を秒単位で指定します。このプロパティを使用して、一時停止モード中に行うバッファリングの量を制限できます。<codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferLength</codeph> の値がこの制限に達するとバッファリングが停止します。
     
     <p class="- topic/p ">この値を設定しない場合は、デフォルトの 60 秒または各一時停止の <codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferTime</codeph> の値の 2 倍のいずれか高いほうに設定されます。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/bufferTime" class="- topic/link "><linktext class="- topic/linktext ">bufferTime</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:multicastAvailabilitySendToAll:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">multicastAvailabilitySendToAll</apiName><shortdesc class="- topic/shortdesc ">
     RTMFP 接続の場合、ピアーツーピアーマルチキャストフラグメント可用性メッセージがすべてのピアーに送信されるか、1 つのピアーにのみ送信されるかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     RTMFP 接続の場合、ピアーツーピアーマルチキャストフラグメント可用性メッセージがすべてのピアーに送信されるか、1 つのピアーにのみ送信されるかを指定します。値が TRUE の場合、メッセージが指定した間隔ですべてのピアーに一度だけ送信されることを指定します。値が FALSE の場合、メッセージが指定した間隔で 1 つのピアーにのみ送信されることを指定します。間隔は <codeph class="+ topic/ph pr-d/codeph ">multicastAvailabilityUpdatePeriod</codeph> プロパティによって決まります。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/multicastAvailabilityUpdatePeriod" class="- topic/link "><linktext class="- topic/linktext ">multicastAvailabilityUpdatePeriod</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:multicastAvailabilityUpdatePeriod:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">multicastAvailabilityUpdatePeriod</apiName><shortdesc class="- topic/shortdesc ">
     RTMFP 接続の場合、メッセージがピアーに送信される間隔を秒単位で指定し、ローカルノードで新しいピアーツーピアーマルチキャストメディアフラグメントを使用できることをピアーに通知します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     RTMFP 接続の場合、メッセージがピアーに送信される間隔を秒単位で指定し、ローカルノードで新しいピアーツーピアーマルチキャストメディアフラグメントを使用できることをピアーに通知します。この値を大きくすると、バッチ効率が向上し、制御オーバーヘッドは減少しますが、フラグメントが消失するまでにそれらのフラグメントを取得する時間が短縮されることにより、受信側での品質が低下する可能性があります。値を小さくすると、レーテンシーが下がり、制御オーバーヘッドが増加します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/multicastAvailabilitySendToAll" class="- topic/link "><linktext class="- topic/linktext ">multicastAvailabilitySendToAll</linktext></link><link href="flash.net.xml#NetStream/multicastFetchPeriod" class="- topic/link "><linktext class="- topic/linktext ">multicastFetchPeriod</linktext></link><link href="flash.net.xml#NetStream/multicastWindowDuration" class="- topic/link "><linktext class="- topic/linktext ">multicastWindowDuration</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:multicastFetchPeriod:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">multicastFetchPeriod</apiName><shortdesc class="- topic/shortdesc ">
     RTMFP 接続の場合、ピアーツーピアーマルチキャストメディアフラグメントが利用可能になったことをローカルノードが認識してから、これらのフラグメントをピアーから取得するまでの時間を秒単位で指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     RTMFP 接続の場合、ピアーツーピアーマルチキャストメディアフラグメントが利用可能になったことをローカルノードが認識してから、これらのフラグメントをピアーから取得するまでの時間を秒単位で指定します。この値によって、フラグメントをピアーから取得する前に、事前にローカルノードに移動させることができます。また、複数のピアーにフラグメントの提供を通知できるので、取得のための負荷を複数のピアーに分散できます。
     
     <p class="- topic/p ">この値を大きくすると、ピアーツーピアーメッシュ内の負荷バランスと公平性が向上しますが、利用可能な <codeph class="+ topic/ph pr-d/codeph ">multicastWindowDuration</codeph> が減り、レーテンシーが低下します。 この値を小さくすると、取得が要求されるときにレーテンシーが低下しますが、重複したデータ受信が増え、ピアーツーピアーメッシュの負荷バランスが低下します。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/multicastAvailabilityUpdatePeriod" class="- topic/link "><linktext class="- topic/linktext ">multicastAvailabilityUpdatePeriod</linktext></link><link href="flash.net.xml#NetStream/multicastWindowDuration" class="- topic/link "><linktext class="- topic/linktext ">multicastWindowDuration</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:multicastInfo:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">multicastInfo</apiName><shortdesc class="- topic/shortdesc ">
     RTMFP 接続の場合、プロパティにサービス品質に関する統計が含まれる NetStreamMulticastInfo オブジェクトを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.net:NetStreamMulticastInfo</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     RTMFP 接続の場合、プロパティにサービス品質に関する統計が含まれる NetStreamMulticastInfo オブジェクトを返します。このオブジェクトは現在の状態のスナップショットです。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStreamMulticastInfo</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:multicastPushNeighborLimit:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">multicastPushNeighborLimit</apiName><shortdesc class="- topic/shortdesc ">
     RTMFP 接続の場合、マルチキャストメディアを事前に移動するピアーの最大数を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     RTMFP 接続の場合、マルチキャストメディアを事前に移動するピアーの最大数を指定します。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:multicastRelayMarginDuration:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">multicastRelayMarginDuration</apiName><shortdesc class="- topic/shortdesc ">
     RTMFP 接続の場合、指定された継続時間が過ぎてもピアーツーピアーマルチキャストデータを要求するピアーに対してデータを送信できるよう、データを利用できる継続時間を秒単位で指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     RTMFP 接続の場合、指定された継続時間が過ぎてもピアーツーピアーマルチキャストデータを要求するピアーに対してデータを送信できるよう、データを利用できる継続時間を秒単位で指定します。この継続時間は <codeph class="+ topic/ph pr-d/codeph ">multicastWindowDuration</codeph> プロパティで指定されます。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/multicastWindowDuration" class="- topic/link "><linktext class="- topic/linktext ">multicastWindowDuration</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:multicastWindowDuration:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">multicastWindowDuration</apiName><shortdesc class="- topic/shortdesc ">
     RTMFP 接続の場合、ピアーツーピアーマルチキャスト再構築ウィンドウの継続時間を秒単位で指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     RTMFP 接続の場合、ピアーツーピアーマルチキャスト再構築ウィンドウの継続時間を秒単位で指定します。値を小さくすると、レーテンシーは小さくなりますが、すべてのフラグメントを取得するために十分な時間がなくなり、品質が低下する場合があります。逆に時間を大きくすると、すべてのフラグメントを取得するための時間が十分とれるので、品質は向上しますが、それに伴って、レーテンシーが増加します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/multicastRelayMarginDuration" class="- topic/link "><linktext class="- topic/linktext ">multicastRelayMarginDuration</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:nearNonce:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">nearNonce</apiName><shortdesc class="- topic/shortdesc ">
     RTMFP および RTMPE 接続の場合、値は基本的にこのストリームのこちら側で選択され、この接続に固有です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     RTMFP および RTMPE 接続の場合、値は基本的にこのストリームのこちら側で選択され、この接続に固有です。この値は、ストリームの向こう側では <codeph class="+ topic/ph pr-d/codeph ">farNonce</codeph> 値となります。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:objectEncoding:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">objectEncoding</apiName><shortdesc class="- topic/shortdesc ">
     この NetStream オブジェクトのエンコード（AMF バージョン）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     この NetStream オブジェクトのエンコード（AMF バージョン）です。NetStream オブジェクトは、関連付けされた NetConnection オブジェクトからその <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> 値を継承します。ActionScript 3.0 SWF ファイルで Flash Player 9 以前にリリースされたサーバーと通信する必要がある場合は、このプロパティを理解することが重要です。詳細については、NetConnection クラスの <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> プロパティに関する説明を参照してください。
     
     <p class="- topic/p ">このプロパティの値は、ローカルストリームかリモートストリームかによって異なります。<codeph class="+ topic/ph pr-d/codeph ">null</codeph> が <codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> メソッドに渡されたローカルストリームでは、<codeph class="+ topic/ph pr-d/codeph ">NetConnection.defaultObjectEncoding</codeph> の値が返されます。サーバーに接続しているリモートストリームでは、このサーバーとの接続のオブジェクトエンコーディングが返されます。</p>
     
     <p class="- topic/p ">接続されていない場合にこのプロパティを読み取ろうとするか、このプロパティを変更しようとすると、アプリケーションにより例外がスローされます。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/objectEncoding" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.objectEncoding</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:peerStreams:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">peerStreams</apiName><shortdesc class="- topic/shortdesc ">
     
     パブリッシュするこの NetStream インスタンスを監視している、サブスクライブするすべての NetStream インスタンスを保持するオブジェクト。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     パブリッシュするこの NetStream インスタンスを監視している、サブスクライブするすべての NetStream インスタンスを保持するオブジェクト。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:soundTransform:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">soundTransform</apiName><shortdesc class="- topic/shortdesc ">
     この NetStream オブジェクトのサウンドを制御します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.media:SoundTransform</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     この NetStream オブジェクトのサウンドを制御します。詳細については、SoundTransform クラスを参照してください。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#SoundTransform" class="- topic/link "><linktext class="- topic/linktext ">flash.media.SoundTransform</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:time:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">time</apiName><shortdesc class="- topic/shortdesc ">
     再生ヘッドの位置（秒単位）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream.time, time
     
     </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     再生ヘッドの位置（秒単位）です。
     <p class="- topic/p ">
     <b class="+ topic/ph hi-d/b ">Flash Media Server</b> サブスクライブするストリームの場合、ストリームを再生した秒数です。パブリッシュするストリームの場合、ストリームをパブリッシュした秒数です。この数値は、小数点以下 3 桁までの精度があります。この数値に 1000 を掛けると、ストリームを再生したミリ秒単位の時間数になります。
     </p>
     <p class="- topic/p ">
     サブスクライブするストリームでは、サーバーがデータの送信を停止してもストリームが開いたままになっている場合、<codeph class="+ topic/ph pr-d/codeph ">time</codeph> プロパティの値の増加が止まります。サーバーがデータの送信を再開すると、値の増加が止まった個所から値の増加が続けられます。
     </p>
     <p class="- topic/p ">
     再生リストの要素間でストリームを切り替えても、<codeph class="+ topic/ph pr-d/codeph ">time</codeph> の値は増加を続けます。呼び出した <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> の <codeph class="+ topic/ph pr-d/codeph ">reset</codeph> が <codeph class="+ topic/ph pr-d/codeph ">1</codeph> または <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定されている場合、または <codeph class="+ topic/ph pr-d/codeph ">NetStream.close()</codeph> を呼び出した場合、このプロパティは 0 に設定されます。
     </p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/bufferLength" class="- topic/link "><linktext class="- topic/linktext ">bufferLength</linktext></link><link href="flash.net.xml#NetStream/bytesLoaded" class="- topic/link "><linktext class="- topic/linktext ">bytesLoaded</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:videoReliable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">videoReliable</apiName><shortdesc class="- topic/shortdesc ">
     
     RTMFP 接続の場合、ビデオが完全な信頼性を備えて送信されるかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     RTMFP 接続の場合、ビデオが完全な信頼性を備えて送信されるかどうかを指定します。TRUE の場合、この NetStream 経由で送信されるすべてのビデオは完全に信頼できます。FALSE の場合、送信されるビデオは完全には信頼できませんが、一定の時間再送信されてから、消失します。FALSE 値を使用すれば、ビデオ品質を犠牲にして、レーテンシーを低減できます。
     
     <p class="- topic/p ">部分信頼性をサポートしていないネットワークプロトコルでプロパティを FALSE に設定しようとすると、この試行は無視され、プロパティは TRUE に設定されます。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/audioReliable" class="- topic/link "><linktext class="- topic/linktext ">audioReliable</linktext></link><link href="flash.net.xml#NetStream/dataReliable" class="- topic/link "><linktext class="- topic/linktext ">dataReliable</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:videoSampleAccess:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">videoSampleAccess</apiName><shortdesc class="- topic/shortdesc ">
     
     RTMFP 接続の場合、この NetStream 上のピアーツーピアーサブスクライバーにビデオストリームのキャプチャを許可するかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     RTMFP 接続の場合、この NetStream 上のピアーツーピアーサブスクライバーにビデオストリームのキャプチャを許可するかどうかを指定します。FALSE の場合、ビデオストリームをキャプチャしようとするサブスクライバーには権限エラーが表示されます。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/audioSampleAccess" class="- topic/link "><linktext class="- topic/linktext ">audioSampleAccess</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetMonitor" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetMonitor</apiName><shortdesc class="- topic/shortdesc ">
 NetMonitor クラスにより、アプリケーションで使用される NetStream オブジェクトを監視できます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="2.7" name="Flash" version="AIR" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 NetMonitor クラスにより、アプリケーションで使用される NetStream オブジェクトを監視できます。
 
 <p class="- topic/p ">NetMonitor クラスを使用して、アプリケーションで使用中の NetStream オブジェクトの現在のリストを取得します。このクラスのインスタンスは、新しい NetStream オブジェクトが作成されるたびに、<codeph class="+ topic/ph pr-d/codeph ">netStreamCreate</codeph> イベントを送出します。</p>
 
 <p class="- topic/p ">NetMonitor クラスを使用すると、どのビデオプレーヤーを使用中であるかを問わず、ビデオ再生および関連するイベントを追跡できます。この機能はメディアの測定、分析および使用状況追跡ライブラリを実装する際に役立ちます。</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b "/></p>
 
 </apiDesc><example conref="examples\NetMonitorExample.as" class="- topic/example "> この例では、使用中の特定のビデオプレーヤーに関する詳細情報を持たずに、NetMonitor クラスを使用して NetStream 情報にアクセスできることを示しています。ここでは、Open Screen Media Framework（OSMF）プロジェクトの MediaPlayerSprite クラスが使用されていますが、どのビデオプレーヤーにも置き換えることができます。
 
 <p class="- topic/p ">例のビデオの一時停止と再開にはスペースバーを使用し、30 秒送りまたは 30 秒戻しには右向き矢印と左向き矢印を使用して、送出されたイベントに対するこれらの操作の影響を確認できます。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.display.Sprite;
    import flash.display.StageAlign;
    import flash.display.StageScaleMode;
    import flash.events.KeyboardEvent;
    import flash.events.NetDataEvent;
    import flash.events.NetMonitorEvent;
    import flash.events.NetStatusEvent;
    import flash.net.NetMonitor;
    import flash.net.NetStream;
    import flash.ui.Keyboard;
    
    import org.osmf.elements.VideoElement;
    import org.osmf.media.MediaPlayer;
    import org.osmf.media.MediaPlayerSprite;
    import org.osmf.net.DynamicStreamingItem;
    import org.osmf.net.DynamicStreamingResource;

    public class NetMonitorExample extends Sprite
    {
        private var netmon:NetMonitor;
        private var mediaPlayer:MediaPlayer;
        
        public function NetMonitorExample()
        {
            //Configure stage
            this.stage.align = StageAlign.TOP_LEFT;
            this.stage.scaleMode = StageScaleMode.NO_SCALE;
             
            //Create NetMonitor object
            netmon = new flash.net.NetMonitor();
            netmon.addEventListener(NetMonitorEvent.NET_STREAM_CREATE, newNetStream );    
            
            //Setup video player
            var mediaPlayerSprite:MediaPlayerSprite = new MediaPlayerSprite();
            var videoElement:VideoElement = new VideoElement();
            var dynResource:DynamicStreamingResource = new DynamicStreamingResource( "rtmp://cp67126.edgefcs.net/ondemand" );
            
            dynResource.streamItems = Vector.&lt;DynamicStreamingItem>(
                [     new DynamicStreamingItem( "mp4:mediapm/ovp/content/demo/video/elephants_dream/elephants_dream_768x428_24.0fps_408kbps.mp4", 408, 768, 428 )
                    , new DynamicStreamingItem( "mp4:mediapm/ovp/content/demo/video/elephants_dream/elephants_dream_768x428_24.0fps_608kbps.mp4", 608, 768, 428 )
                    , new DynamicStreamingItem( "mp4:mediapm/ovp/content/demo/video/elephants_dream/elephants_dream_1024x522_24.0fps_908kbps.mp4", 908, 1024, 522 )
                    , new DynamicStreamingItem( "mp4:mediapm/ovp/content/demo/video/elephants_dream/elephants_dream_1024x522_24.0fps_1308kbps.mp4", 1308, 1024, 522 )
                    , new DynamicStreamingItem( "mp4:mediapm/ovp/content/demo/video/elephants_dream/elephants_dream_1280x720_24.0fps_1708kbps.mp4", 1708, 1280, 720 )
                ]);
            
            videoElement.resource = dynResource;
            
            addChild( mediaPlayerSprite );
            mediaPlayerSprite.media = videoElement;  
            mediaPlayer = mediaPlayerSprite.mediaPlayer;
            this.stage.addEventListener( KeyboardEvent.KEY_DOWN, keyControl ); 
        }    
        
        //On new NetStream
        private function newNetStream( event:NetMonitorEvent ):void
        {
            trace( "New Netstream object ");
            var stream:NetStream = event.netStream;
            stream.addEventListener(NetDataEvent.MEDIA_TYPE_DATA, onStreamData);
            stream.addEventListener(NetStatusEvent.NET_STATUS, onStatus);
        }
        
        //On data events from a NetStream object 
        private function onStreamData( event:NetDataEvent ):void
        {
            trace( "Data event at " + event.timestamp );
            var netStream:NetStream = event.target as NetStream;
            switch( event.info.handler )
            {
                case "onMetaData":
                    trace( "--MetaData: " +  stringify( netStream.info.metaData ));
                    break;
                case "onXMPData":
                    trace( "--XMPData: " + stringify( netStream.info.xmpData ));
                    break;
                default:
                    trace( "--" + event.info.handler + ": " + stringify(event.info.args[0]) );
                    
            }
        }
        
        //On status events from a NetStream object
        private function onStatus( event:NetStatusEvent ):void
        {
            trace( "Status: " + stringify( event.info ) );
        }
        
        //Utility function to print out object properties
        private function stringify( object:Object ):String
        {
            var string:String = "";
            
            var prop:String;
            var comma:Boolean = false;
            for ( prop in object )
            {
                if( comma ) string += ", ";
                else comma = true;
                
                if( typeof(object[prop]) == "object" ) 
                {
                    stringify( object[prop] )
                } else    string +=  prop + " = " + object[prop];
            }
            return string;
        }
        
        //Simple keyboard control for the video player
        private function keyControl( event:KeyboardEvent ):void
        {
            switch ( event.keyCode )
            {
                case Keyboard.SPACE:
                    if( mediaPlayer.paused ) mediaPlayer.play();
                    else mediaPlayer.pause();
                    break;
                case Keyboard.RIGHT:
                    mediaPlayer.seek( mediaPlayer.currentTime + 30 );
                    break;
                case Keyboard.LEFT:
                    mediaPlayer.seek( mediaPlayer.currentTime - 30 );
                    break;
                default:
                    //do nothing
            }
        }    
    }
} 
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">NetStream</linktext></link></related-links><adobeApiEvent id="flash.net:NetMonitor_flash.events.NetMonitorEvent.NET_STREAM_CREATE_netStreamCreate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">netStreamCreate</apiName><shortdesc class="- topic/shortdesc ">
 この NetMonitor インスタンスのセキュリティコンテキスト内部で新しい NetStream オブジェクトが作成されたときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="2.7" name="Flash" version="AIR" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.NetMonitorEvent.NET_STREAM_CREATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.NetMonitorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 この NetMonitor インスタンスのセキュリティコンテキスト内部で新しい NetStream オブジェクトが作成されたときに送出されます。
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>NetStream 監視機能が現在のプラットフォームでサポートされていない場合、<codeph class="+ topic/ph pr-d/codeph ">netStreamCreate</codeph> イベントは送出されません。</p>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.net:NetMonitor:listStreams" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">listStreams</apiName><shortdesc class="- topic/shortdesc ">
	 この NetMonitor オブジェクトのセキュリティコンテキストに属するすべての NetStream オブジェクトを取得します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="2.7" name="Flash" version="AIR" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">NetStream オブジェクトのベクター
 	</apiDesc><apiType value="Vector$flash.net:NetStream" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 この NetMonitor オブジェクトのセキュリティコンテキストに属するすべての NetStream オブジェクトを取得します。
 	 
 	 <p class="- topic/p ">NetStream オブジェクトのリストのキャッシュを回避します。</p>
 	  
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>NetStream 監視機能が現在のプラットフォームでサポートされていない場合、この関数によって返されるリストは常に空です。</p>
	 
 	 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier languages="" id="flash.net:NetStreamInfo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetStreamInfo</apiName><shortdesc class="- topic/shortdesc ">
 
 NetStreamInfo クラスでは、NetStream オブジェクトと、その下層のオーディオ、ビデオ、データ用ストリーミングバッファーに関連する、サービスの質（QOS）の各種統計情報およびその他の情報を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 
 NetStreamInfo クラスでは、NetStream オブジェクトと、その下層のオーディオ、ビデオ、データ用ストリーミングバッファーに関連する、サービスの質（QOS）の各種統計情報およびその他の情報を指定します。NetStreamInfo オブジェクトは、現在の QOS の状態のスナップショットを取得する <codeph class="+ topic/ph pr-d/codeph ">NetStream.info</codeph> の呼出しに応答して返され、NetStreamInfo のプロパティを介して QOS の統計情報を提供します。
 
 </apiDesc></apiClassifierDetail><apiOperation id="flash.net:NetStreamInfo:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
     NetStreamInfo オブジェクトのプロパティを列挙するテキスト値を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">NetStreamInfo オブジェクトのプロパティの値を含むストリング。
     
     
      </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">この NetStreamInfo オブジェクトのプロパティを列挙するテキスト値を返します。
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     NetStreamInfo オブジェクトのプロパティを列挙するテキスト値を返します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.net:NetStreamInfo:SRTT:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SRTT</apiName><shortdesc class="- topic/shortdesc ">
     NetStream セッションの平滑化往復時間（SRTT）（ミリ秒単位）</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     NetStream セッションの平滑化往復時間（SRTT）（ミリ秒単位）このプロパティには、RTMFP ストリームに対してのみ有効な値が含まれます。RTMP ストリームの場合、値は 0 です。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamInfo:audioBufferByteLength:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">audioBufferByteLength</apiName><shortdesc class="- topic/shortdesc ">
     NetStream オーディオバッファーのサイズ（バイト数）を提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     NetStream オーディオバッファーのサイズ（バイト数）を提供します。ストリーミングメディア内の、ライブおよび録音両方のオーディオデータのバッファーサイズを指定します。このプロパティは、プログレッシブダウンロードで使用する <codeph class="+ topic/ph pr-d/codeph ">Netstream.bytesLoaded</codeph> に似ています。
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:audioBufferLength:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">audioBufferLength</apiName><shortdesc class="- topic/shortdesc ">
     NetStream オーディオバッファーのサイズ（秒単位）を提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     NetStream オーディオバッファーのサイズ（秒単位）を提供します。このプロパティは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferLength</codeph> プロパティを拡張したもので、時間単位のオーディオデータ専用バッファー長を提供します。
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:audioByteCount:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">audioByteCount</apiName><shortdesc class="- topic/shortdesc ">
     再生またはフラッシュされたバイト数とは関係なく、キューが受信した総オーディオバイト数を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     再生またはフラッシュされたバイト数とは関係なく、キューが受信した総オーディオバイト数を指定します。この値は、タイマーを作成し、タイマーを連続して呼び出した場合の値の差を計算することによって、選択したメトリックを使って、オーディオデータ受信速度を計算する場合に使用します。または、<codeph class="+ topic/ph pr-d/codeph ">audioBytesPerSecond</codeph> を使用します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamInfo/audioBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">audioBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamInfo:audioBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">audioBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     NetStream オーディオバッファーがデータを受信する速度（1 秒あたりのバイト数）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     NetStream オーディオバッファーがデータを受信する速度（1 秒あたりのバイト数）を指定します。この値は、最後の 1 秒に受信したオーディオデータの平滑化平均として計算されます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:audioLossRate:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">audioLossRate</apiName><shortdesc class="- topic/shortdesc ">
     NetStream セッションのオーディオの損失を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     NetStream セッションのオーディオの損失を指定します。この値は、RTMFP ストリームの場合のみ有効な値を返し、RTMP ストリームの場合は 0 を返します。 損失率は、全メッセージ数に対する損失メッセージ数の比率で表されます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:byteCount:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">byteCount</apiName><shortdesc class="- topic/shortdesc ">
     再生またはフラッシュされたバイト数とは関係なく、キューが受信した総バイト数を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     再生またはフラッシュされたバイト数とは関係なく、キューが受信した総バイト数を指定します。この値は、タイマーを作成し、タイマーを連続して呼び出した場合の値の差を計算することによって、選択したメトリックを使って、データ受信速度を計算する場合に使用します。または、<codeph class="+ topic/ph pr-d/codeph ">currentBytesPerSecond</codeph> を使用します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamInfo/currentBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">currentBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamInfo:currentBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">currentBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     NetStream バッファーがデータを受信する速度（1 秒あたりのバイト数）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     NetStream バッファーがデータを受信する速度（1 秒あたりのバイト数）を指定します。この値は、最後の 1 秒に受信した全データの平滑化平均として計算されます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:dataBufferByteLength:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dataBufferByteLength</apiName><shortdesc class="- topic/shortdesc ">
     NetStream データバッファーのサイズ（バイト数）を提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     NetStream データバッファーのサイズ（バイト数）を提供します。ストリーミングメディア内の、ライブおよび記録両方のデータメッセージのバッファーサイズを指定します。このプロパティは、プログレッシブダウンロードで使用する <codeph class="+ topic/ph pr-d/codeph ">Netstream.bytesLoaded</codeph> に似ています。
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:dataBufferLength:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dataBufferLength</apiName><shortdesc class="- topic/shortdesc ">
     NetStream データバッファーのサイズ（秒単位）を提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     NetStream データバッファーのサイズ（秒単位）を提供します。このプロパティは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferLength</codeph> プロパティを拡張したもので、時間単位のデータメッセージ専用バッファー長を提供します。
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:dataByteCount:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dataByteCount</apiName><shortdesc class="- topic/shortdesc ">
     再生またはフラッシュされたバイト数とは関係なく、キューが受信したデータメッセージの総バイト数を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     再生またはフラッシュされたバイト数とは関係なく、キューが受信したデータメッセージの総バイト数を指定します。この値は、タイマーを作成し、タイマーを連続して呼び出した場合の値の差を計算することによって、選択したメトリックを使って、データメッセージ受信速度を計算する場合に使用します。または、<codeph class="+ topic/ph pr-d/codeph ">dataBytesPerSecond</codeph> を使用します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamInfo/dataBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">dataBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamInfo:dataBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dataBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     NetStream データバッファーがデータを受信する速度（1 秒あたりのバイト数）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     NetStream データバッファーがデータを受信する速度（1 秒あたりのバイト数）を指定します。この値は、最後の 1 秒に受信したデータメッセージの平滑化平均として計算されます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:droppedFrames:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">droppedFrames</apiName><shortdesc class="- topic/shortdesc ">
     現在の NetStream 再生セッションで脱落したビデオフレームの数を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     現在の NetStream 再生セッションで脱落したビデオフレームの数を返します。
     <p class="- topic/p ">記録されたストリーミングやプログレッシブダウンロードでは、システム CPU のリソースが十分でない場合、高品質または高解像度で高ビットレートのビデオの、1 秒あたりに必要なフレーム数をデコードする際に、デコーダの動作が遅くなることがあります。ライブストリーミングでは、待ち時間が長すぎる場合、バッファーはビデオフレームを脱落させます。このプロパティでは、脱落して正常には存在していないフレームの数を指定します。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:isLive:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isLive</apiName><shortdesc class="- topic/shortdesc ">
      再生中のメディアが収録されたものであるか、ライブであるかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      再生中のメディアが収録されたものであるか、ライブであるかを示します。このプロパティは RTMP ストリーミングのみと関連しています。プログレッシブダウンロードおよび HTTP ダイナミックストリーミングの場合、このプロパティは常に <codeph class="+ topic/ph pr-d/codeph ">false</codeph> です。
      
 	  <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このプロパティは Android および Blackberry Tablet OS 上のブラウザー内の Flash Player、または iOS 上の AIR では、常に <codeph class="+ topic/ph pr-d/codeph ">false</codeph> です。</p>
	  
      </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:maxBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">maxBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     NetStream バッファーがデータを受信する最高速度（1 秒あたりのバイト数）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     NetStream バッファーがデータを受信する最高速度（1 秒あたりのバイト数）を指定します。この値は、<codeph class="+ topic/ph pr-d/codeph ">NetStream</codeph> オブジェクトが受信した最後のメッセージを基に、クライアントのネットワーク容量に関する情報を提供します。<codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferTime</codeph> で指定されているバッファーサイズとクライアントで利用可能な帯域幅によっては、Flash Media Server はバーストでバッファーにデータを受信します。このプロパティを使用すると、クライアントのバッファーがデータを受信する最大速度が得られます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:metaData:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">metaData</apiName><shortdesc class="- topic/shortdesc ">
      再生中のメディアに関連付けられた、最新のメタデータオブジェクト。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      再生中のメディアに関連付けられた、最新のメタデータオブジェクト。
      
 	  <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このプロパティは Android および Blackberry Tablet OS 上のブラウザー内の Flash Player、または iOS 上の AIR では、常に <codeph class="+ topic/ph pr-d/codeph ">null</codeph> です。</p>
	  
      </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:playbackBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">playbackBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     ストリーム再生速度（1 秒あたりのバイト数）を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ストリーム再生速度（1 秒あたりのバイト数）を返します。再生バッファーには、様々な再生リストのコンテンツを格納できます。このプロパティを使用すると、現在再生されているストリームのビットレートに近い再生速度が得られます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:resourceName:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">resourceName</apiName><shortdesc class="- topic/shortdesc ">
      NetStream.play() の呼び出し時に使用されたリソース名。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">NetStream.play() の呼び出し時に使用されたリソース名。
      </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> の呼び出し時に使用されたリソース名。このプロパティは、プログレッシブダウンロードの場合は完全な URL、RTMP ストリーミングの場合はリソース名、HTTP ストリーミングの場合は <codeph class="+ topic/ph pr-d/codeph ">null</codeph> で構成されます。
      
 	  <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このプロパティは Android および Blackberry Tablet OS 上のブラウザー内の Flash Player、または iOS 上の AIR では、常に <codeph class="+ topic/ph pr-d/codeph ">null</codeph> です。</p>
	  
	  </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="" invalidHref="flash.media.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.NetStream.play()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamInfo:uri:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">uri</apiName><shortdesc class="- topic/shortdesc ">
      NetConnection.connect() の呼び出し時に使用された URI。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">NetConnection.connect() の呼び出し時に使用された URI。
	  
      </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      <codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> の呼び出し時に使用された URI。この値は、プログレッシブダウンロードまたは HTTP ストリーミングの場合には <codeph class="+ topic/ph pr-d/codeph ">null</codeph> です。
      
 	  <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このプロパティは Android および Blackberry Tablet OS 上のブラウザー内の Flash Player、または iOS 上の AIR では、常に <codeph class="+ topic/ph pr-d/codeph ">null</codeph> です。</p>
	  
	  </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="" invalidHref="flash.media.xml#NetConnection/uri" class="- topic/link "><linktext class="- topic/linktext ">flash.media.NetConnection.uri</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamInfo:videoBufferByteLength:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">videoBufferByteLength</apiName><shortdesc class="- topic/shortdesc ">
     NetStream ビデオバッファーのサイズ（バイト数）を提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     NetStream ビデオバッファーのサイズ（バイト数）を提供します。ストリーミングメディア内の、ライブおよび録画両方のビデオデータのバッファーサイズを指定します。このプロパティは、プログレッシブダウンロードで使用する <codeph class="+ topic/ph pr-d/codeph ">Netstream.bytesLoaded</codeph> に似ています。
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:videoBufferLength:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">videoBufferLength</apiName><shortdesc class="- topic/shortdesc ">
     NetStream ビデオバッファーのサイズ（秒単位）を提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     NetStream ビデオバッファーのサイズ（秒単位）を提供します。このプロパティは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferLength</codeph> プロパティを拡張したもので、時間単位のビデオデータ専用バッファー長を提供します。
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:videoByteCount:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">videoByteCount</apiName><shortdesc class="- topic/shortdesc ">
     再生またはフラッシュされたバイト数とは関係なく、キューが受信したビデオの総バイト数を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     再生またはフラッシュされたバイト数とは関係なく、キューが受信したビデオの総バイト数を指定します。この値は、タイマーを作成し、タイマーを連続して呼び出した場合の値の差を計算することによって、選択したメトリックを使って、ビデオデータ受信速度を計算する場合に使用します。または、<codeph class="+ topic/ph pr-d/codeph ">videoBytesPerSecond</codeph> を使用します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamInfo/videoBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">videoBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamInfo:videoBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">videoBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     NetStream ビデオバッファーがデータを受信する速度（1 秒あたりのバイト数）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     NetStream ビデオバッファーがデータを受信する速度（1 秒あたりのバイト数）を指定します。この値は、最後の 1 秒に受信したビデオデータの平滑化平均として計算されます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:videoLossRate:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">videoLossRate</apiName><shortdesc class="- topic/shortdesc ">
     NetStream ビデオ非可逆圧縮率（消失したメッセージと合計メッセージの比率）を提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     NetStream ビデオ非可逆圧縮率（消失したメッセージと合計メッセージの比率）を提供します。
     
     <p class="- topic/p ">メッセージサイズが最大転送単位（MTU）よりも小さい場合、この値はネットワークパケット消失率に対応します。</p>
     
     <p class="- topic/p ">このプロパティは、RTMFP ストリームに対してのみ有効な値を返します。RTMP ストリームの場合、0 の値を返します。詳しくは、<xref href="http://www.adobe.com/go/learn_fms_docs_jp" scope="external" class="- topic/xref ">Flash Media Server のマニュアル</xref>を参照してください。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:xmpData:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">xmpData</apiName><shortdesc class="- topic/shortdesc ">
      再生中のメディアに関連付けられた、最新の XMP オブジェクト。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      再生中のメディアに関連付けられた、最新の XMP オブジェクト。 
      
 	  <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このプロパティは Android および Blackberry Tablet OS 上のブラウザー内の Flash Player、または iOS 上の AIR では、常に <codeph class="+ topic/ph pr-d/codeph ">null</codeph> です。</p>
	  
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:URLStream" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">URLStream</apiName><shortdesc class="- topic/shortdesc ">
 URLStream クラスはダウンロード用 URL への低レベルのアクセスを提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseInterface>flash.utils:IDataInput</apiBaseInterface><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 URLStream クラスはダウンロード用 URL への低レベルのアクセスを提供します。データはダウンロードされるとすぐにアプリケーションコードで使用できるようになります。URLLoader の場合のように、ファイル全体がダウンロードされるまで待つ必要はありません。URLStream クラスでは、ダウンロードの完了前にストリームを閉じることもできます。ダウンロードされたファイルの内容は、生のバイナリデータとして利用できます。
 
 <p class="- topic/p ">URLStream の読み取り操作で、ブロッキングは発生しません。つまり、読み取るデータが十分にあるかどうかを <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> プロパティを使用して確認してから、データを読み取る必要があります。データが十分にない場合は、<codeph class="+ topic/ph pr-d/codeph ">EOFError</codeph> 例外がスローされます。</p>
 
 <p class="- topic/p ">すべてのバイナリデータは、ビッグエンディアン形式がデフォルトのエンコーディングです。ビッグエンディアンでは、最上位バイトが最初になります。</p>
 
 <p class="- topic/p ">URLStream クラスでダウンロードしている URL に適用されるセキュリティルールは、URLLoader オブジェクトに適用されるルールと同一です。ポリシーファイルは、必要に応じてダウンロードされます。ローカルファイルのセキュリティルールが適用され、必要に応じてセキュリティ警告が発生します。</p>

 
 </apiDesc><example conref="examples\URLStreamExample.as" class="- topic/example "> 次の例では、SWF ファイルをロードして、そのヘッダーの先頭を解析し、圧縮とバージョン番号の情報を示します。 
 <p class="- topic/p ">例を実行するために、URLStreamExample.swf という名前のファイルを SWF ファイルと同じディレクトリに配置してください。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.errors.*;
    import flash.events.*;
    import flash.net.URLRequest;
    import flash.net.URLStream;

    public class URLStreamExample extends Sprite {
        private static const ZLIB_CODE:String = "CWS";
        private var stream:URLStream;

        public function URLStreamExample() {
            stream = new URLStream();
            var request:URLRequest = new URLRequest("URLStreamExample.swf");
            configureListeners(stream);
            try {
                stream.load(request);
            } catch (error:Error) {
                trace("Unable to load requested URL.");
            }
        }

        private function configureListeners(dispatcher:EventDispatcher):void {
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
        }

        private function parseHeader():void {
            trace("parseHeader");
            trace("isCompressed: " + isCompressed());
            trace("version: " + stream.readByte());
        }

        private function isCompressed():Boolean {
            return (stream.readUTFBytes(3) == ZLIB_CODE);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
            parseHeader();
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:Event):void {
            trace("progressHandler: " + event);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoader" class="- topic/link "><linktext class="- topic/linktext ">URLLoader</linktext></link><link href="flash.net.xml#URLRequest" class="- topic/link "><linktext class="- topic/linktext ">URLRequest</linktext></link></related-links><adobeApiEvent id="flash.net:URLStream_flash.events.ProgressEvent.PROGRESS_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><shortdesc class="- topic/shortdesc ">
 ダウンロード処理を実行中にデータを受信したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ダウンロード処理を実行中にデータを受信したときに送出されます。受け取ったデータは、URLStream クラスのメソッドを使用してすぐに読み取ることができます。
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLStream/load()" class="- topic/link "><linktext class="- topic/linktext ">URLStream.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLStream_flash.events.Event.OPEN_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><shortdesc class="- topic/shortdesc ">
 ロード操作が開始したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.OPEN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ロード操作が開始したときに送出されます。
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLStream/load()" class="- topic/link "><linktext class="- topic/linktext ">URLStream.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLStream_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 入出力エラーが発生してロード操作が失敗したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 入出力エラーが発生してロード操作が失敗したときに送出されます。 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLStream/load()" class="- topic/link "><linktext class="- topic/linktext ">URLStream.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLStream_flash.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS_httpResponseStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpResponseStatus</apiName><shortdesc class="- topic/shortdesc ">
 URLStream.load() メソッドを呼び出して HTTP を介してデータにアクセスを試み、Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">URLStream.load()</codeph> メソッドを呼び出して HTTP を介してデータにアクセスを試み、Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます。 
 
 <p class="- topic/p ">URLStream オブジェクトに <codeph class="+ topic/ph pr-d/codeph ">httpStatusEvent</codeph> イベントを登録すると、エラー応答がコンテンツであるかのように配信されます。このため、URLStream は、エラーデータが URLStream にロードされると、<codeph class="+ topic/ph pr-d/codeph ">ioError</codeph> イベントを送出する代わりに <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> イベントおよび <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> イベントを送出します。</p>
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLStream/load()" class="- topic/link "><linktext class="- topic/linktext ">URLStream.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLStream_flash.events.HTTPStatusEvent.HTTP_STATUS_httpStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpStatus</apiName><shortdesc class="- topic/shortdesc ">
 URLStream.load() を呼び出して HTTP を介してデータにアクセスを試み、Flash Player または Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.HTTPStatusEvent.HTTP_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">URLStream.load()</codeph> を呼び出して HTTP を介してデータにアクセスを試み、<ph class="- topic/ph ">Flash Player または </ph>Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます（一部のブラウザー環境ではこの情報を提供できません）。<codeph class="+ topic/ph pr-d/codeph ">httpStatus</codeph> が発生した場合は、<codeph class="+ topic/ph pr-d/codeph ">complete</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントの前に、これらのイベントとは別に送信されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLStream/load()" class="- topic/link "><linktext class="- topic/linktext ">URLStream.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLStream_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><shortdesc class="- topic/shortdesc ">
 URLStream.load() の呼び出しによってセキュリティサンドボックスの外部にあるサーバーからデータをロードしようとすると送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">URLStream.load()</codeph> の呼び出しによってセキュリティサンドボックスの外部にあるサーバーからデータをロードしようとすると送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLStream/load()" class="- topic/link "><linktext class="- topic/linktext ">URLStream.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLStream_flash.events.Event.COMPLETE_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
 データが正常にロードされたときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 データが正常にロードされたときに送出されます。 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.net:URLStream:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     すぐにストリームを閉じ、ダウンロード処理をキャンセルします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリームを閉じることができないか、またはストリームが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     すぐにストリームを閉じ、ダウンロード処理をキャンセルします。<codeph class="+ topic/ph pr-d/codeph ">close()</codeph> メソッドの呼び出し後は、ストリームからデータを読み込みません。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:load" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">load</apiName><shortdesc class="- topic/shortdesc ">
     request パラメーターで指定された URL でのダウンロードを開始します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">URLRequest.requestHeader</codeph> オブジェクトには、禁止されている特定の HTTP リクエストヘッダーを含めることはできません。詳細については、URLRequestHeader クラスの説明を参照してください。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このエラーは、次の理由で発生する可能性があります。
     
     <ol class="- topic/ol "><li class="- topic/li ">Flash Player または Adobe AIR では <codeph class="+ topic/ph pr-d/codeph ">URLRequest.data</codeph> パラメーターを UTF8 から MBCS に変換できません。 このエラーは、<codeph class="+ topic/ph pr-d/codeph ">load()</codeph> に渡された URLRequest オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> 操作を行うように設定されている場合、および <codeph class="+ topic/ph pr-d/codeph ">System.useCodePage</codeph> が <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定されている場合に発生することがあります。</li><li class="- topic/li ">Flash Player または Adobe AIR では <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> データにメモリを割り当てることができません。このエラーは、load に渡された URLRequest オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> 操作を行うように設定されている場合に発生することがあります。</li></ol>
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">MemoryError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:MemoryError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">信頼されていないローカル SWF ファイルはインターネットへの接続を許可されません。これは、ネットワークアクセスを許可されたローカル SWF ファイル、または信頼できる SWF ファイルとして再分類すると回避できる場合があります。
     
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一般的な予約ポートに接続しようとしています。遮断されたポートの詳しいリストについては、『ActionScript 3.0 開発ガイド<i class="+ topic/ph hi-d/i "/>』の「ネットワーク API の制限」を参照してください。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">request</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:URLRequest</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ダウンロードする URL を指定する URLRequest オブジェクトです。このパラメーターの値、または渡された URLRequest オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">URLRequest.url</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、アプリケーションは null ポインターエラーをスローします。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">request</codeph> パラメーターで指定された URL でのダウンロードを開始します。
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>ロード中のファイルに ASCII 文字以外の文字（英語以外の多くの言語に存在する）が含まれている場合は、ASCII のような非 Unicode 形式ではなく UTF-8 または UTF-16 エンコーディング形式でファイルを保存することをお勧めします。</p>
     
     <p class="- topic/p ">ロード処理がすぐに失敗すると、エラーについて説明する IOError または SecurityError（ローカルファイルのセキュリティエラーを含む）例外がスローされます。その他に、URL ダウンロードでダウンロードが正常に開始した場合は <codeph class="+ topic/ph pr-d/codeph ">open</codeph> イベントが送出され、エラーが発生した場合はエラーイベントが送出されます。</p>
     
     <p class="- topic/p ">デフォルトで、呼び出し元の SWF ファイルおよびロードする URL は同じドメインに置かれている必要があります。例えば、www.adobe.com に置かれている SWF ファイルは www.adobe.com に置かれているソースからのみデータをロードできます。 異なるドメインからデータをロードするには、データをホストするサーバーに URL ポリシーファイルを配置します。</p>
     
     <p class="- topic/p ">Flash Player では、一般的な予約ポートへは接続できません。遮断されたポートの詳しいリストについては、『ActionScript 3.0 開発ガイド<i class="+ topic/ph hi-d/i "/>』の「ネットワーク API の制限」を参照してください。</p>
     
     <p class="- topic/p ">Flash Player では、SWF ファイルがこのメソッドを使用しないようにすることができます。そのためには、SWF コンテンツを含んでいる HTML ページに <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">object</codeph> タグおよび <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> タグ）を設定します。</p>
     
     <p class="- topic/p "> Flash Player 10 以降および AIR 1.5 以降では、"multipart/form-data" などのマルチパート Content-Type にアップロードが含まれていると（アップロードが含まれているかどうかは POST ボディ内の "content-disposition" ヘッダーの "filename" パラメーターで示されます）、そのアップロードに適用されるセキュリティ規則によって POST 処理が拘束されます。</p>
     <ul class="- topic/ul "><li class="- topic/li ">POST 処理は、マウスのクリックやキーの押下などのユーザーが開始したアクションに応答して実行する必要があります。</li><li class="- topic/li ">POST 処理がクロスドメインである（POST ターゲットが、POST 要求を送信中の SWF ファイルと同じサーバー上にない）場合は、クロスドメインアクセスを許可する URL ポリシーファイルをターゲットサーバーが提供する必要があります。</li></ul>
     <p class="- topic/p ">また、すべてのマルチパート Content-Type では、RFC2046 標準に準拠した有効なシンタックスを使用する必要があります。シンタックスが有効でない場合は、アップロードに適用されるセキュリティ規則によって POST 処理が拘束されます。</p>
     
     <p class="- topic/p ">これらのルールは、アプリケーションサンドボックス内にない AIR コンテンツにも適用されます。ただし、Adobe AIR では、アプリケーションサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p>
     
     <p class="- topic/p ">セキュリティについて詳しくは、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
     
     <p class="- topic/p ">AIR では、URLRequest オブジェクトを <codeph class="+ topic/ph pr-d/codeph ">httpResponse</codeph> ステータスイベントに登録できます。<codeph class="+ topic/ph pr-d/codeph ">httpStatus</codeph> イベントと異なり、<codeph class="+ topic/ph pr-d/codeph ">httpResponseStatus</codeph> イベントは応答データの前に配信されます。また、<codeph class="+ topic/ph pr-d/codeph ">httpResponseStatus</codeph> イベントには <codeph class="+ topic/ph pr-d/codeph ">responseHeaders</codeph> プロパティと <codeph class="+ topic/ph pr-d/codeph ">responseURL</codeph> プロパティの値が含まれます（これらは <codeph class="+ topic/ph pr-d/codeph ">httpStatus</codeph> イベントでは定義されていません）。<codeph class="+ topic/ph pr-d/codeph ">httpResponseStatus</codeph> イベントは、発生した場合、<codeph class="+ topic/ph pr-d/codeph ">complete</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントの前に、これらのイベントとは別に送信されます。 
     </p>
     
     
     <p class="- topic/p "><i class="+ topic/ph hi-d/i "/><codeph class="+ topic/ph pr-d/codeph ">httpResponseStatus</codeph> イベントリスナーがある場合、応答メッセージの本文は<i class="+ topic/ph hi-d/i ">常に</i>送信され、HTTP ステータスコードの応答結果は常に <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> イベントになります。これは、HTTP 応答ステータスコードが成功またはエラーを示しているかどうかにかかわらず当てはまります。</p> 
     
     <p class="- topic/p "><ph class="- topic/ph ">AIR では、</ph>このイベントリスナーが存在しない<i class="+ topic/ph hi-d/i "/>（つまり、<codeph class="+ topic/ph pr-d/codeph ">httpResponseStatus</codeph> イベントリスナーが存在しない）場合、<ph class="- topic/ph ">SWF</ph> の AIR のバージョンによって動作が異なります。</p>
     
     <ul class="- topic/ul "><li class="- topic/li "><ph class="- topic/ph ">SWF 9 コンテンツでは</ph>、HTTP 応答のステータスコードが成功を示している場合のみ<i class="+ topic/ph hi-d/i "/>、HTTP 応答メッセージの本文が送信されます。それ以外（エラーがある場合）は、本文は送信されずに、URLRequest オブジェクトによって IOError イベントが送出されます。</li><li class="- topic/li "><ph class="- topic/ph ">SWF 10 コンテンツでは</ph>、HTTP 応答メッセージの本文は必ず<i class="+ topic/ph hi-d/i "/>送信されます。エラーがある場合は、URLRequest オブジェクトによって IOError イベントが送出されます。</li></ul>
     
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.net:URLStream:load_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データが正常にロードされた後に送出されます。<codeph class="+ topic/ph pr-d/codeph ">httpResponseStatus</codeph> イベントリスナーが存在する場合、URLRequest オブジェクトは、HTTP 応答のステータスコードが成功または<i class="+ topic/ph hi-d/i "/>エラーのいずれを示しているかを通知する <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> イベントも送出します。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">データが正常にロードされた後に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLStream:load_httpStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpStatus</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">アクセスが HTTP 経由で、<ph class="- topic/ph ">現在の環境がステータスコードの取得をサポートしている場合</ph>、<codeph class="+ topic/ph pr-d/codeph ">complete</codeph> イベントや <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントに加えて、これらのイベントを受け取る場合があります。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">アクセスが HTTP 経由で、現在の環境がステータスコードの取得をサポートしている場合、complete イベントや error イベントに加えて、これらのイベントを受け取る場合があります。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLStream:load_httpResponseStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpResponseStatus</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">load()</codeph> メソッドを呼び出して HTTP を介してデータにアクセスを試み、Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます。 
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">load() メソッドを呼び出して HTTP を介してデータにアクセスを試み、Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLStream:load_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ロード操作を完了できませんでした。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ロード操作を完了できませんでした。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLStream:load_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ロード操作が開始したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ロード操作が開始したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLStream:load_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">呼び出し元のセキュリティ Sandbox の外部にあるサーバーからデータを取得しようとするロード操作です。これはサーバー上のポリシーファイルを使用すると回避できます。
      
      </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">呼び出し元のセキュリティ Sandbox の外部にあるサーバーからデータを取得しようとするロード操作です。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:URLStream:readBoolean" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readBoolean</apiName><shortdesc class="- topic/shortdesc ">
     ストリームからブール値を読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> プロパティは 0 を返します。</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリームで I/O エラーが発生したか、ストリームが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">バイトがゼロ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph>、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> が返されます。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ストリームからブール値を読み取ります。1 バイトが読み取られ、バイトがゼロ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph>、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> が返されます。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readByte</apiName><shortdesc class="- topic/shortdesc ">
     ストリームから符号付きバイトを読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> プロパティは 0 を返します。</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリームで I/O エラーが発生したか、ストリームが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">-128 ～ 127 の範囲の値。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ストリームから符号付きバイトを読み取ります。
     <p class="- topic/p ">返される値は -128 ～ 127 の範囲です。</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readBytes</apiName><shortdesc class="- topic/shortdesc ">
     ストリームから length バイトのデータを読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> プロパティは 0 を返します。</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリームで I/O エラーが発生したか、ストリームが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bytes</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データの読み込み先の ByteArray オブジェクトです。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">offset</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">bytes</codeph> でのデータ読み込み開始位置を指定するためのオフセットです。デフォルト値は 0 です。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">読み取るバイト数です。デフォルト値の 0 に設定すると、すべてのデータが読み取られます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ストリームから <codeph class="+ topic/ph pr-d/codeph ">length</codeph> バイトのデータを読み取ります。このバイトは、<codeph class="+ topic/ph pr-d/codeph ">bytes</codeph> で指定した ByteArray オブジェクトに読み込まれます。ByteArray オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> バイトの位置から読み込みが開始されます。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readDouble" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readDouble</apiName><shortdesc class="- topic/shortdesc ">
     ストリームから IEEE 754 倍精度浮動小数点数を読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> プロパティは 0 を返します。</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリームで I/O エラーが発生したか、ストリームが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリームから返される IEEE 754 倍精度浮動小数点数。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ストリームから IEEE 754 倍精度浮動小数点数を読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readFloat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readFloat</apiName><shortdesc class="- topic/shortdesc ">
     ストリームから IEEE 754 単精度浮動小数点数を読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> プロパティは 0 を返します。</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリームで I/O エラーが発生したか、ストリームが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリームから返される IEEE 754 単精度浮動小数点数。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ストリームから IEEE 754 単精度浮動小数点数を読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readInt</apiName><shortdesc class="- topic/shortdesc ">
     ストリームから符号付き 32 ビット整数を読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> プロパティは 0 を返します。</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリームで I/O エラーが発生したか、ストリームが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">-2147483648 ～ 2147483647 の範囲の値。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ストリームから符号付き 32 ビット整数を読み取ります。
     <p class="- topic/p ">返される値は -2147483648 ～ 2147483647 の範囲です。</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readMultiByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readMultiByte</apiName><shortdesc class="- topic/shortdesc ">
     指定した文字セットを使用して、バイトストリームから指定した長さのマルチバイトストリングを読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">URLStream, URLStream.readMultiByte, readMultiByte
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> プロパティは 0 を返します。</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">UTF-8 エンコードされたストリングです。
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">バイトストリームから読み取るバイト数です。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">charSet</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">バイトの解釈に使用する文字セットを表すストリングです。文字セットのストリングには、<codeph class="+ topic/ph pr-d/codeph ">"shift_jis"</codeph>、<codeph class="+ topic/ph pr-d/codeph ">"CN-GB"</codeph>、および <codeph class="+ topic/ph pr-d/codeph ">"iso-8859-1"</codeph> などがあります。完全な一覧については、<xref href="../../charset-codes.html" class="- topic/xref ">「サポートされている文字セット」</xref>を参照してください。    
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b><codeph class="+ topic/ph pr-d/codeph ">charSet</codeph> パラメーターの値が現在のシステムによって認識されない場合、アプリケーションはシステムのデフォルトコードページを文字セットとして使用します。例えば、<codeph class="+ topic/ph pr-d/codeph ">charSet</codeph> パラメーターの指定で、<codeph class="+ topic/ph pr-d/codeph ">myTest.readMultiByte(22, "iso-8859-01")</codeph> のように、<codeph class="+ topic/ph pr-d/codeph ">01</codeph> を <codeph class="+ topic/ph pr-d/codeph ">1</codeph> の代わりに使用した場合、その文字セットパラメーターは開発マシンでは認識されるかもしれませんが、別のマシンでは認識されない可能性があります。もう一方のマシンでは、アプリケーションがシステムのデフォルトコードページを使用することになります。</p>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定した文字セットを使用して、バイトストリームから指定した長さのマルチバイトストリングを読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readObject" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readObject</apiName><shortdesc class="- topic/shortdesc ">
     ソケットから Action Message Format（AMF）形式でエンコードされたオブジェクトを読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> プロパティは 0 を返します。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリームで I/O エラーが発生したか、ストリームが開いていません。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">非直列化されたオブジェクトです。
     </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソケットから Action Message Format（AMF）形式でエンコードされたオブジェクトを読み取ります。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding</linktext></link></related-links></apiOperation><apiOperation id="flash.net:URLStream:readShort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readShort</apiName><shortdesc class="- topic/shortdesc ">
     ストリームから符号付き 16 ビット整数を読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> プロパティは 0 を返します。</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリームで I/O エラーが発生したか、ストリームが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">-32768 ～ 32767 の範囲の値。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ストリームから符号付き 16 ビット整数を読み取ります。
     <p class="- topic/p ">返される値は -32768 ～ 32767 の範囲です。</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readUTFBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUTFBytes</apiName><shortdesc class="- topic/shortdesc ">
     ストリームから length の UTF-8 バイトを読み取り、ストリングを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> プロパティは 0 を返します。</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリームで I/O エラーが発生したか、ストリームが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定した長さの文字のバイト表現で作成された UTF-8 ストリングです。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">UTF-8 バイトのシーケンスです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ストリームから <codeph class="+ topic/ph pr-d/codeph ">length</codeph> の UTF-8 バイトを読み取り、ストリングを返します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readUTF" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUTF</apiName><shortdesc class="- topic/shortdesc ">
     ストリームから UTF-8 ストリングを読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> プロパティは 0 を返します。</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリームで I/O エラーが発生したか、ストリームが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">UTF-8 ストリング。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ストリームから UTF-8 ストリングを読み取ります。このストリングには、バイト単位の長さを示す符号なし short が前に付いているものと見なされます。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readUnsignedByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUnsignedByte</apiName><shortdesc class="- topic/shortdesc ">
     ストリームから符号なしバイトを読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> プロパティは 0 を返します。</ph>
     

     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリームで I/O エラーが発生したか、ストリームが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 255 の範囲の値。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ストリームから符号なしバイトを読み取ります。
     <p class="- topic/p ">返される値は 0 ～ 255 の範囲です。 </p>     
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readUnsignedInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUnsignedInt</apiName><shortdesc class="- topic/shortdesc ">
     ストリームから符号なし 32 ビット整数を読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> プロパティは 0 を返します。</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリームで I/O エラーが発生したか、ストリームが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 4294967295 の範囲の値。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ストリームから符号なし 32 ビット整数を読み取ります。
     <p class="- topic/p ">返される値は 0 ～ 4294967295 の範囲です。 </p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readUnsignedShort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUnsignedShort</apiName><shortdesc class="- topic/shortdesc ">
     ストリームから符号なし 16 ビット整数を読み取ります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> プロパティは 0 を返します。</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリームで I/O エラーが発生したか、ストリームが開いていません。
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 65535 の範囲の値。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ストリームから符号なし 16 ビット整数を読み取ります。
     <p class="- topic/p ">返される値は 0 ～ 65535 の範囲です。 </p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.net:URLStream:bytesAvailable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesAvailable</apiName><shortdesc class="- topic/shortdesc ">
     入力バッファーで読み取ることができるデータのバイト数を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     入力バッファーで読み取ることができるデータのバイト数を返します。<codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> プロパティを呼び出して、読み取るデータが十分にあることを確認してから、いずれかの <codeph class="+ topic/ph pr-d/codeph ">read</codeph> メソッドを使用してデータを読み取るようにしてください。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLStream:connected:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">connected</apiName><shortdesc class="- topic/shortdesc ">
     この URLStream オブジェクトが現在、接続されているかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     この URLStream オブジェクトが現在、接続されているかどうかを示します。このプロパティの呼び出しは、URLStream オブジェクトが接続されている場合は値 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLStream:endian:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">endian</apiName><shortdesc class="- topic/shortdesc ">
     データのバイト順を示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiDefaultValue>Endian.BIG_ENDIAN
     </apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     データのバイト順を示します。指定できる値は、<codeph class="+ topic/ph pr-d/codeph ">Endian.BIG_ENDIAN</codeph> または <codeph class="+ topic/ph pr-d/codeph ">Endian.LITTLE_ENDIAN</codeph> です。
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.utils.xml#Endian" class="- topic/link "><linktext class="- topic/linktext ">flash.utils.Endian</linktext></link></related-links></apiValue><apiValue id="flash.net:URLStream:objectEncoding:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">objectEncoding</apiName><shortdesc class="- topic/shortdesc ">
     オブジェクトの書き込みまたは読み取り時に使用される Action Message Format（AMF）のバージョンを制御します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Property documented; needs review
     </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     オブジェクトの書き込みまたは読み取り時に使用される Action Message Format（AMF）のバージョンを制御します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLStream/readObject()" class="- topic/link "><linktext class="- topic/linktext ">readObject()</linktext></link><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding クラス</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetGroupSendMode" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetGroupSendMode</apiName><shortdesc class="- topic/shortdesc ">
NetGroupSendMode クラスは、NetGroup.sendToNeighbor() メソッドの sendMode プロパティに使用される定数値の列挙です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">NetGroup クラスの sendToNeighbor() メソッドの sendMode プロパティに使用される定数値の列挙。<codeph class="+ topic/ph pr-d/codeph ">NetGroup</codeph> クラスのメソッド

</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
NetGroupSendMode クラスは、<codeph class="+ topic/ph pr-d/codeph ">NetGroup.sendToNeighbor()</codeph> メソッドの <codeph class="+ topic/ph pr-d/codeph ">sendMode</codeph> プロパティに使用される定数値の列挙です。

</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/sendToNeighbor()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNeighbor()</linktext></link></related-links><apiValue id="flash.net:NetGroupSendMode:NEXT_DECREASING" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NEXT_DECREASING</apiName><shortdesc class="- topic/shortdesc "> 
    減少方向で最も近いグループアドレスを持つネイバーを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">nextDecreasing</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    減少方向で最も近いグループアドレスを持つネイバーを指定します。
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetGroupSendMode:NEXT_INCREASING" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NEXT_INCREASING</apiName><shortdesc class="- topic/shortdesc "> 
    増加方向で最も近いグループアドレスを持つネイバーを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">nextIncreasing</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    増加方向で最も近いグループアドレスを持つネイバーを指定します。
    
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:SharedObject" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SharedObject</apiName><shortdesc class="- topic/shortdesc ">
 SharedObject クラスは、ユーザーのコンピューターまたはサーバー上で限定された量のデータを読み込みおよび格納するために使用されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">SharedObject, shared object, constructor
 
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 SharedObject クラスは、ユーザーのコンピューターまたはサーバー上で限定された量のデータを読み込みおよび格納するために使用されます。共有オブジェクトを使用すると、ローカルコンピューターまたはリモートサーバー上に永続化されているクライアント SWF ファイルとオブジェクト間で、リアルタイムでデータを共有することができます。ローカル共有オブジェクトはブラウザーのクッキーに似ており、リモート共有オブジェクトはリアルタイムデータ転送デバイスに似ています。リモート共有オブジェクトを使用するには、Adobe Flash Media Server が必要です。
 
 <p class="- topic/p ">共有オブジェクトを使用して次の操作を行います。</p>
 
 <ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">ローカルの永続性を維持する</b>。共有オブジェクトを使用するにはこれが最も簡単な方法で、Flash Media Server は使用しません。例えば、<codeph class="+ topic/ph pr-d/codeph ">SharedObject.getLocal()</codeph> を呼び出して、アプリケーション内にメモリ付き電卓などの共有オブジェクトを作成することができます。ユーザーが電卓を閉じると、Flash Player により共有オブジェクトの最後の値がユーザーのコンピューターに保存されます。次に電卓を実行すると、電卓に前の値が表示されます。電卓アプリケーションを閉じる前に共有オブジェクトのプロパティを <codeph class="+ topic/ph pr-d/codeph ">null</codeph> に設定すると、次にアプリケーションを起動したときに、電卓にいずれの値も表示されません。その他のローカルの永続性の管理例としては、複雑な Web サイトのユーザー環境設定やその他のデータ（ニュースサイト上でユーザーが閲覧した記事のレコードなど）のトラッキングがあります。この情報をトラッキングすると、新規で未読の記事でなく、既に閲覧された記事を表示できます。 この情報をユーザーのコンピューターに保存すると、サーバーの負荷を削減できます。</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">Flash Media Server にデータを格納および共有する</b>。サーバー上の共有オブジェクトには、他のクライアントが取得可能なデータを格納できます。例えば、<codeph class="+ topic/ph pr-d/codeph ">SharedObject.getRemote()</codeph> を呼び出して、電話帳などのリモート共有オブジェクトを作成します。このオブジェクトは、サーバー上に永続化されます。あるクライアントが共有オブジェクトを変更すると、現在そのオブジェクトに接続しているクライアントおよび後でそのオブジェクトに接続するクライアントのすべてが、変更されたデータを利用できます。オブジェクトがローカルに永続化され、サーバーに接続されていないときにクライアントがデータを変更すると、次回クライアントがリモート共有オブジェクトに接続するときに、データがそのオブジェクトにコピーされます。</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">リアルタイムでデータを共有する</b>。共有オブジェクトは、複数のクライアント間でリアルタイムにデータを共有できます。例えば、チャットルームに接続しているユーザーのリストを格納するリモート共有オブジェクトを開くことができます。これはオブジェクトに接続しているすべてのクライアントに表示することができます。ユーザーがチャットルームに入退室するときに、オブジェクトが更新され、オブジェクトに接続しているすべてのクライアントに、更新後のチャットルームユーザーの一覧が表示されます。</li></ul>
 
 <p class="- topic/p "> ローカル共有オブジェクトを作成するには、<codeph class="+ topic/ph pr-d/codeph ">SharedObject.getLocal()</codeph> を呼び出します。リモート共有オブジェクトを作成するには、<codeph class="+ topic/ph pr-d/codeph ">SharedObject.getRemote()</codeph> を呼び出します。</p> 
 
 <p class="- topic/p "> アプリケーションを閉じると、共有オブジェクトが<i class="+ topic/ph hi-d/i ">保存</i>されます。つまり、ディスクに書き込まれます。また、<codeph class="+ topic/ph pr-d/codeph ">flush()</codeph> メソッドを呼び出して、データを明示的にディスクに書き込むこともできます。</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">ローカルディスク領域についての考慮事項。</b> ローカル共有オブジェクトには、アプリケーションを設計する際に考慮が必要な、いくつかの制限があります。SWF ファイルでローカル共有オブジェクトの書き込みが許可されない場合があります。ローカル共有オブジェクトに格納されているデータが、わからないうちに削除される場合もあります。Flash Player のユーザーは、個々のドメインまたはすべてのドメインで使用できるディスク領域を管理できます。ユーザーが使用可能なディスク領域の量を減らすと、一部のローカル共有オブジェクトが削除される可能性があります。Flash Player のユーザーには、サードパーティードメイン（現在のブラウザーのアドレスバーにあるドメイン以外のドメイン）によるローカル共有オブジェクトの読み取りまたは書き込みを防止できるプライバシーコントロール機能もあります。</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>リモートサーバーではなくローカルコンピューターに格納および実行される SWF ファイルは、常にサードパーティーの共有オブジェクトをディスクに書き込むことができます。サードパーティーの共有オブジェクトの詳細については、Flash Player のヘルプの「<xref href="http://www.macromedia.com/support/documentation/jp/flashplayer/help/settings_manager03.html" scope="external" class="- topic/xref ">グローバルストレージ設定パネル</xref>」を参照してください。</p>
 
 <p class="- topic/p ">ディスク領域の量とユーザーのプライバシーコントロールに関する失敗についてチェックすることをお勧めします。<codeph class="+ topic/ph pr-d/codeph ">getLocal()</codeph> および <codeph class="+ topic/ph pr-d/codeph ">flush()</codeph> の呼び出し時にこれらのチェックを実行します。
 
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SharedObject.getLocal()</codeph>  ユーザーがサードパーティーの共有オブジェクトを無効にしていて、SWF ファイルのドメインとブラウザーのアドレスバーに表示されるドメインが一致しない場合など、このメソッドの呼び出しに失敗すると、Flash Player は例外をスローします。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SharedObject.flush()</codeph>  このメソッドの呼び出しに失敗すると、Flash Player は例外をスローします。呼び出しに成功すると、<codeph class="+ topic/ph pr-d/codeph ">SharedObjectFlushStatus.FLUSHED</codeph> を返します。追加の記憶域が必要な場合は、<codeph class="+ topic/ph pr-d/codeph ">SharedObjectFlushStatus.PENDING</codeph> を返します。Flash Player はローカルに保存する情報用の記憶域を増加するようにユーザーに要求します。したがって、<codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> イベントは保存に失敗したか成功したかを示す情報オブジェクトと一緒に送出されます。</li></ul></p>
 
 <p class="- topic/p ">SWF ファイルでローカル共有オブジェクトを作成または変更しようとする場合、SWF ファイルの幅が最低でも 215 ピクセル、高さが最低でも 138 ピクセルあることを確認してください。このサイズは、ダイアログボックス（ローカル共有オブジェクトの記憶域制限を増やすかどうかをユーザーに確認する）を表示するための最小の大きさです。SWF ファイルがこの大きさよりも小さく、記憶域制限を増やす必要がある場合、<codeph class="+ topic/ph pr-d/codeph ">SharedObject.flush()</codeph> は失敗し、<codeph class="+ topic/ph pr-d/codeph ">SharedObjectFlushedStatus.PENDING</codeph> を返し、<codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> イベントを送出します。</p>
 
 <p class="- topic/p ">
 <b class="+ topic/ph hi-d/b ">リモート共有オブジェクト。</b> Flash Media Server では、アプリケーションに接続しているすべてのクライアントがリアルタイムで共有する、リモート共有オブジェクトを作成および使用できます。あるクライアントがリモート共有オブジェクトのプロパティを変更すると、接続しているすべてのクライアントのプロパティが変更されます。リモート共有オブジェクトを使用すると、例えば、マルチプレーヤーゲームのユーザーなどのクライアントを同期できます。
 </p>
 
 <p class="- topic/p ">
 各リモート共有オブジェクトに <codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティがあります。これは、データを格納するプロパティを持つオブジェクトです。<codeph class="+ topic/ph pr-d/codeph ">setProperty()</codeph> を呼び出して、データオブジェクトのプロパティを変更します。サーバーは、プロパティを更新し、<codeph class="+ topic/ph pr-d/codeph ">sync</codeph> イベントを送出し、接続しているクライアントにプロパティを返送します。 
 </p>
 
 <p class="- topic/p ">
 クライアント、サーバー、またはその両方のリモート共有オブジェクトを永続化できます。デフォルトでは、サイズが最大 100K の永続的なリモート共有オブジェクトがローカルに保存されます。大きなオブジェクトを保存しようとすると、ローカル記憶領域ダイアログボックスが表示されます。このダイアログボックスでは、ユーザーが共有オブジェクト用のローカル記憶域の使用を許可または拒否できます。ステージのサイズは必ず 215 × 138 ピクセル以上に設定してください。これは、ダイアログボックスを表示するために必要な最小サイズです。
 </p>
 <p class="- topic/p ">
 ユーザーが「許可」をクリックすると、サーバーに共有オブジェクトが保存され、<codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> イベントが送出されます。このときの <codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティは <codeph class="+ topic/ph pr-d/codeph ">SharedObject.Flush.Success</codeph> です。ユーザーが「拒否」を選択すると、サーバーに共有オブジェクトは保存されず、<codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> イベントが送出されます。このときの <codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティは <codeph class="+ topic/ph pr-d/codeph ">SharedObject.Flush.Failed</codeph> です。
 </p>
 
 </apiDesc><example conref="examples\SharedObjectExample.as" class="- topic/example "> 次のコードは、ID <codeph class="+ topic/ph pr-d/codeph ">"application-name"</codeph> を使用して、共有オブジェクトを作成（以降の実行では取得）します。「保存」ボタンがクリックされると、<codeph class="+ topic/ph pr-d/codeph ">saveValue()</codeph> メソッドが <codeph class="+ topic/ph pr-d/codeph ">savedValue</codeph> というプロパティを SharedObject オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティに保存しようとします。Flash Player がデータを保存する許可を求める必要がある場合、ユーザーが許可を与えるか拒否すると、<codeph class="+ topic/ph pr-d/codeph ">onFlushStatus()</codeph> メソッドが呼び出されます。「クリア」ボタンがクリックされると、<codeph class="+ topic/ph pr-d/codeph ">clearValue()</codeph> メソッドが <codeph class="+ topic/ph pr-d/codeph ">savedValue</codeph> に保存された値を削除します。次に SWF ファイルがロードされたときに取得される値は、<codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> になります。
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.events.MouseEvent;
    import flash.events.NetStatusEvent;
    import flash.net.SharedObject;
    import flash.net.SharedObjectFlushStatus;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.text.TextFieldType;
    
    public class SharedObjectExample extends Sprite {
        
        private var mySo:SharedObject;
        
        public function SharedObjectExample() {
            buildUI();
            saveBtn.addEventListener(MouseEvent.CLICK, saveValue);
            clearBtn.addEventListener(MouseEvent.CLICK, clearValue);
            
            mySo = SharedObject.getLocal("application-name");
            output.appendText("SharedObject loaded...\n");
            output.appendText("loaded value: " + mySo.data.savedValue + "\n\n");
        }

         private function saveValue(event:MouseEvent):void {
            output.appendText("saving value...\n");
            mySo.data.savedValue = input.text;
            
            var flushStatus:String = null;
            try {
                flushStatus = mySo.flush(10000);
            } catch (error:Error) {
                output.appendText("Error...Could not write SharedObject to disk\n");
            }
            if (flushStatus != null) {
                switch (flushStatus) {
                    case SharedObjectFlushStatus.PENDING:
                        output.appendText("Requesting permission to save object...\n");
                        mySo.addEventListener(NetStatusEvent.NET_STATUS, onFlushStatus);
                        break;
                    case SharedObjectFlushStatus.FLUSHED:
                        output.appendText("Value flushed to disk.\n");
                        break;
                }
            }
            output.appendText("\n");
        }
        
        private function clearValue(event:MouseEvent):void {
            output.appendText("Cleared saved value...Reload SWF and the value should be \"undefined\".\n\n");
            delete mySo.data.savedValue;
        }
        
        private function onFlushStatus(event:NetStatusEvent):void {
            output.appendText("User closed permission dialog...\n");
            switch (event.info.code) {
                case "SharedObject.Flush.Success":
                    output.appendText("User granted permission -- value saved.\n");
                    break;
                case "SharedObject.Flush.Failed":
                    output.appendText("User denied permission -- value not saved.\n");
                    break;
            }
            output.appendText("\n");

            mySo.removeEventListener(NetStatusEvent.NET_STATUS, onFlushStatus);
        }
        
        // UI elements
        private var inputLbl:TextField;
        private var input:TextField;
        private var output:TextField;
        private var saveBtn:Sprite;
        private var clearBtn:Sprite;
    
        private function buildUI():void {
            // input label
            inputLbl = new TextField();
            addChild(inputLbl);
            inputLbl.x = 10;
            inputLbl.y = 10;
            inputLbl.text = "Value to save:";
            
            // input TextField
            input = new TextField();
            addChild(input);
            input.x = 80;
            input.y = 10;
            input.width = 100;
            input.height = 20;
            input.border = true;
            input.background = true;
            input.type = TextFieldType.INPUT;
            
            // output TextField
            output = new TextField();
            addChild(output);
            output.x = 10;
            output.y = 35;
            output.width = 250;
            output.height = 250;
            output.multiline = true;
            output.wordWrap = true;
            output.border = true;
            output.background = true;
            
            // Save button
            saveBtn = new Sprite();
            addChild(saveBtn);
            saveBtn.x = 190;
            saveBtn.y = 10;
            saveBtn.useHandCursor = true;
            saveBtn.graphics.lineStyle(1);
            saveBtn.graphics.beginFill(0xcccccc);
            saveBtn.graphics.drawRoundRect(0, 0, 30, 20, 5, 5);
            var saveLbl:TextField = new TextField();
            saveBtn.addChild(saveLbl);
            saveLbl.text = "Save";
            saveLbl.selectable = false;
            
            // Clear button
            clearBtn = new Sprite();
            addChild(clearBtn);
            clearBtn.x = 230;
            clearBtn.y = 10;
            clearBtn.useHandCursor = true;
            clearBtn.graphics.lineStyle(1);
            clearBtn.graphics.beginFill(0xcccccc);
            clearBtn.graphics.drawRoundRect(0, 0, 30, 20, 5, 5);
            var clearLbl:TextField = new TextField();
            clearBtn.addChild(clearLbl);
            clearLbl.text = "Clear";
            clearLbl.selectable = false;
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link><link href="flash.net.xml#SharedObject/getLocal()" class="- topic/link "><linktext class="- topic/linktext ">getLocal()</linktext></link><link href="flash.net.xml#SharedObject/event:netStatus" class="- topic/link "><linktext class="- topic/linktext ">netStatus</linktext></link></related-links><adobeApiEvent id="flash.net:SharedObject_flash.events.SyncEvent.SYNC_sync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">sync</apiName><shortdesc class="- topic/shortdesc ">
 リモート共有オブジェクトがサーバーによって更新されるときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SyncEvent.SYNC</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SyncEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 リモート共有オブジェクトがサーバーによって更新されるときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/getRemote()" class="- topic/link "><linktext class="- topic/linktext ">getRemote()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:SharedObject_flash.events.NetStatusEvent.NET_STATUS_netStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">netStatus</apiName><shortdesc class="- topic/shortdesc ">
 SharedObject インスタンスが、そのステータスまたはエラーの状況をレポートするときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.NetStatusEvent.NET_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.NetStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 SharedObject インスタンスが、そのステータスまたはエラーの状況をレポートするときに送出されます。<codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> イベントには、<codeph class="+ topic/ph pr-d/codeph ">info</codeph> プロパティが含まれます。このプロパティは、接続試行が成功したかどうかや共有オブジェクトのローカルディスクへの書き込みが成功したかどうかなど、イベントに関する特定の情報を含む情報オブジェクトです。 
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.events.xml#NetStatusEvent/info" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:SharedObject_flash.events.AsyncErrorEvent.ASYNC_ERROR_asyncError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">asyncError</apiName><shortdesc class="- topic/shortdesc ">
 非同期形式で、つまりネイティブ非同期コードから例外がスローされると送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.AsyncErrorEvent.ASYNC_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.AsyncErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 非同期形式で、つまりネイティブ非同期コードから例外がスローされると送出されます。 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.net:SharedObject:clear" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clear</apiName><shortdesc class="- topic/shortdesc ">
     ローカル共有オブジェクトの場合、すべてのデータを消去し、共有オブジェクトをディスクから削除します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">SharedObject, SharedObject.clear, clear
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ローカル共有オブジェクトの場合、すべてのデータを消去し、共有オブジェクトをディスクから削除します。共有オブジェクトへの参照はアクティブなままで、そのデータプロパティが削除されます。
     
     <p class="- topic/p ">
     Flash Media Server で使用されるリモート共有オブジェクトの場合、<codeph class="+ topic/ph pr-d/codeph ">clear()</codeph> はオブジェクトを切断し、すべてのデータを削除します。共有オブジェクトがローカルに永続化されている場合、このメソッドによって共有オブジェクトもディスクから削除されます。共有オブジェクトへの参照はアクティブなままで、そのデータプロパティが削除されます。
     </p>
      
     
     </apiDesc><example conref="examples\SharedObject_clear.as" class="- topic/example "> 次のコードは、<codeph class="+ topic/ph pr-d/codeph ">hostName</codeph> の値を ID として使用して、SharedObject オブジェクトを作成（以降の実行では取得）します。<codeph class="+ topic/ph pr-d/codeph ">username</codeph> というプロパティが、SharedObject オブジェクトのデータプロパティに追加されます。最後に <codeph class="+ topic/ph pr-d/codeph ">clear()</codeph> メソッドが呼び出され、データオブジェクトに追加されたすべての情報（この場合は、<codeph class="+ topic/ph pr-d/codeph ">username</codeph> という単一のプロパティ）が消去されます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.net.SharedObject;

    public class SharedObject_clear {
        private var hostName:String = "yourDomain";
        private var username:String = "yourUsername";

        public function SharedObject_clear() {
            var mySo:SharedObject = SharedObject.getLocal(hostName);
            if(mySo.data.username == null) {
                mySo.data.username = username;
                trace("set: " + mySo.data.username); // yourUsername
            }
            else {
                mySo.clear();
                trace("cleared: " + mySo.data.username); // undefined
            }
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.net:SharedObject:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     リモート共有オブジェクトとサーバーとの間の接続を閉じます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>server-specific: This info is relevant for Flash Media Server, but not Flex Data Services.
     
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     リモート共有オブジェクトとサーバーとの間の接続を閉じます。リモート共有オブジェクトがローカルに永続化されている場合、ユーザーはこのメソッドの呼び出し後に、オブジェクトのローカルコピーを変更できます。ローカルオブジェクトの変更は、次回にユーザーがリモート共有オブジェクトに接続したときに、サーバーに送られます。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:SharedObject:connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><shortdesc class="- topic/shortdesc ">
     指定した NetConnection オブジェクトを介して、サーバー上のリモート共有オブジェクトに接続します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>server-specific: On FMS, can connect to a shared object, but cannot pass a message as a second param.
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Flash Player は、指定されたリモート共有オブジェクトに接続できません。NetConnection インスタンスが有効であり接続されていること、リモート共有オブジェクトがサーバーに正常に作成されたことを確認してください。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">myConnection</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:NetConnection</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Flash Media Server との通信に使用する NetConnection オブジェクトなど、RTMP（Real-Time Messaging Protocol）を使用する NetConnection オブジェクト。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">params</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">サーバー上のリモート共有オブジェクトに渡すメッセージを定義する文字列。Flash Media Server では使用できません。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定した NetConnection オブジェクトを介して、サーバー上のリモート共有オブジェクトに接続します。このメソッドは、<codeph class="+ topic/ph pr-d/codeph ">getRemote()</codeph> を呼び出した後に使用します。接続に成功すると、<codeph class="+ topic/ph pr-d/codeph ">sync</codeph> イベントが送出されます。
     
     <p class="- topic/p ">リモート共有オブジェクトに対する操作を行う前に、<codeph class="+ topic/ph pr-d/codeph ">try..catch..finally</codeph> ステートメントを使用してエラーが発生していないかどうかを確認します。次に、<codeph class="+ topic/ph pr-d/codeph ">sync</codeph> イベントを監視して処理した後で、共有オブジェクトを変更します。<codeph class="+ topic/ph pr-d/codeph ">sync</codeph> イベントを送出する前にローカルで行った変更は失われる場合があります。
     </p>
     
     <p class="- topic/p ">
     次の例は、<codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> メソッドを呼び出して、リモート共有オブジェクトに接続します。
     </p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var myRemoteSO:SharedObject = SharedObject.getRemote("mo", myNC.uri, false);
     myRemoteSO.connect(myNC);
     </codeblock>
     
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/getRemote()" class="- topic/link "><linktext class="- topic/linktext ">getRemote()</linktext></link><link href="flash.net.xml#SharedObject/event:sync" class="- topic/link "><linktext class="- topic/linktext ">sync</linktext></link><link href="../../statements.html#try..catch..finally" class="- topic/link "><linktext class="- topic/linktext ">try..catch..finally</linktext></link><link href="flash.net.xml#NetConnection" class="- topic/link "><linktext class="- topic/linktext ">NetConnection</linktext></link></related-links></apiOperation><apiOperation id="flash.net:SharedObject:flush" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">flush</apiName><shortdesc class="- topic/shortdesc ">
     ローカルに永続化された共有オブジェクトを直ちにローカルファイルに書き込みます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">SharedObject, SharedObject.flush, flush
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Flash Player は、共有オブジェクトをディスクに書き込むことができません。このエラーは、ユーザーがこのドメインからのオブジェクトに対して永続的にローカル情報を保存することを許可されていない場合に発生する可能性があります。
      
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>サードパーティードメイン（現在のブラウザーのアドレスバーにあるドメイン以外のドメイン）の共有オブジェクトのディスクへの書き込みを許可していない場合でも、ローカルコンテンツでは、常にサードパーティードメインの共有オブジェクトをディスクに書き込むことができます。</p>
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">次のいずれかの値になります。
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SharedObjectFlushStatus.PENDING</codeph>：ユーザーはこのドメインからのオブジェクトに対してローカル情報記憶域を許可していますが、割り当てられた領域がオブジェクトを保存するのに十分でありません。Flash Player はユーザーに領域を増やすように要求します。共有オブジェクトを保存するときにそのオブジェクト用の領域を増加できるようにするには、<codeph class="+ topic/ph pr-d/codeph ">SharedObjectFlushStatus.PENDING</codeph> 戻り値を無効にして、<codeph class="+ topic/ph pr-d/codeph ">minDiskSpace</codeph> の値を渡します。
     </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SharedObjectFlushStatus.FLUSHED</codeph>：共有オブジェクトはローカルディスク上のファイルに正常に書き込まれました。</li></ul>
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">minDiskSpace</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このオブジェクトに割り当てる必要のある最小ディスク領域（バイト単位）です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ローカルに永続化された共有オブジェクトを直ちにローカルファイルに書き込みます。このメソッドを使用しない場合、共有オブジェクトがファイルに書き込まれるのは、共有オブジェクトセッションの終了時となります。つまり、SWF ファイルが閉じられるとき、共有オブジェクトが参照されなくなってガベージコレクションされるとき、<codeph class="+ topic/ph pr-d/codeph ">SharedObject.clear()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">SharedObject.close()</codeph> が呼び出されたとき、のいずれかの時点です。 
     
     <p class="- topic/p ">このメソッドが <codeph class="+ topic/ph pr-d/codeph ">SharedObjectFlushStatus.PENDING</codeph> を返した場合、このドメインからのオブジェクトを保存するためのディスク領域を増やすようユーザーに求めるダイアログボックスが表示されます。共有オブジェクトが保存されるときはそのための領域を大きくして <codeph class="+ topic/ph pr-d/codeph ">PENDING</codeph> が返されないようにするには、<codeph class="+ topic/ph pr-d/codeph ">minDiskSpace</codeph> に値を指定します。Flash Player は、ファイルを書き込む際、現在のサイズの共有オブジェクトを保存するのに必要な領域ではなく、<codeph class="+ topic/ph pr-d/codeph ">minDiskSpace</codeph> に指定されたバイト数を確認します。 </p>
     
     <p class="- topic/p ">例えば、共有オブジェクトのサイズが、最初は小さくても最大 500 バイトまで大きくなると予想される場合には、<codeph class="+ topic/ph pr-d/codeph ">minDiskSpace</codeph> に 500 を指定します。ユーザーに対して共有オブジェクトへのディスク領域の割り当てを求める際には、500 バイトの領域が要求されます。要求されたディスク領域をユーザーが割り当てた場合、それ以降、オブジェクトのサイズが 500 バイトを超えない限り、オブジェクトを保存する際に追加のディスク領域を要求されることはありません。 </p>
     
     <p class="- topic/p ">ユーザーがこのダイアログボックスに応答すると、このメソッドがもう一度呼び出されます。<codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> イベントが送出されます。このときの <codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティは <codeph class="+ topic/ph pr-d/codeph ">SharedObject.Flush.Success</codeph> または <codeph class="+ topic/ph pr-d/codeph ">SharedObject.Flush.Failed</codeph> です。
     </p>
     
     </apiDesc><example conref="examples\SharedObject_flush.as" class="- topic/example "> 次のコードは、<codeph class="+ topic/ph pr-d/codeph ">hostName</codeph> の値を ID として使用して、SharedObject オブジェクトを作成（以降の実行では取得）します。<codeph class="+ topic/ph pr-d/codeph ">username</codeph> というプロパティが、SharedObject オブジェクトのデータプロパティに追加されます。<codeph class="+ topic/ph pr-d/codeph ">flush()</codeph> メソッドが呼び出された後、ストリング <codeph class="+ topic/ph pr-d/codeph ">pending</codeph> あるいはブール値の <codeph class="+ topic/ph pr-d/codeph ">true</codeph> または <codeph class="+ topic/ph pr-d/codeph ">false</codeph> が返されなかったかチェックされます。すべてのオープン SharedObject インスタンスは、Flash Player の現在のインスタンスを閉じるたびに自動的に保存されます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.net.SharedObject;

    public class SharedObject_flush {
        private var hostName:String = "yourDomain";
        private var username:String = "yourUsername";

        public function SharedObject_flush() {
            var mySo:SharedObject = SharedObject.getLocal(hostName);
            mySo.data.username = username;
            var flushResult:Object = mySo.flush();
            trace("flushResult: " + flushResult);
            trace(mySo.data.username); // yourUsername
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/clear()" class="- topic/link "><linktext class="- topic/linktext ">clear()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:SharedObject:getLocal" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getLocal</apiName><shortdesc class="- topic/shortdesc ">
  現在のクライアントだけが利用できるローカル永続共有オブジェクトへの参照を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">SharedObject, constructor, SharedObject.getLocal, getLocal, get
  
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Flash Player は、何らかの理由で共有オブジェクトを作成できません。サードパーティーの Flash コンテンツによる永続共有オブジェクトの作成と保存が禁止されている（ローカルコンテンツに適用されない）場合、このエラーが発生することがあります。ユーザーは、<xref href="http://www.adobe.com/support/documentation/jp/flashplayer/help/settings_manager03.html" scope="external" class="- topic/xref ">http://www.adobe.com/support/documentation/jp/flashplayer/help/settings_manager03.html</xref> にある設定マネージャーのグローバルストレージ設定パネルでサードパーティーの永続共有オブジェクトを禁止できます。
  
  </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ローカルに永続化され、現在のクライアントでのみ利用できる共有オブジェクトへの参照です。共有オブジェクトを作成できない場合、または共有オブジェクトが見つからない場合（<codeph class="+ topic/ph pr-d/codeph ">localPath</codeph> に指定したディレクトリが存在しない場合など）、このメソッドは例外をスローします。
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:SharedObject</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">オブジェクト名です。名前にはスラッシュ（<codeph class="+ topic/ph pr-d/codeph ">/</codeph>）を含めます。例えば、<codeph class="+ topic/ph pr-d/codeph ">work/addresses</codeph> は有効な名前です。共有オブジェクト名にスペース、および以下の文字を含めることはできません。   
  <pre xml:space="preserve" class="- topic/pre ">
  ~ % &amp; \ ; : " ' , &lt; > ? # 
  </pre>
  
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localPath</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">共有オブジェクトを作成した SWF ファイルの完全パスまたは部分パスです。これによって、共有オブジェクトをローカルに保存する場所が決まります。このパラメーターを指定しない場合は、完全パスが使用されます。 
   
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">secure</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">この共有オブジェクトへのアクセスが HTTPS 接続経由で配布された SWF ファイルに限定されているかどうかを判別します。SWF ファイルが HTTPS 接続経由で配信されている場合、このパラメーターの値には次の効果があります。
  <ul class="- topic/ul "><li class="- topic/li ">このパラメーターを <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定すると、Flash Player は新しいセキュアな共有オブジェクトを作成するか、既存のセキュアな共有オブジェクトの参照を取得します。このセキュアな共有オブジェクトに対する読み取りまたは書き込みは、HTTPS で配信された SWF ファイルによってのみ行えます。このとき SWF ファイルは <codeph class="+ topic/ph pr-d/codeph ">SharedObject.getLocal()</codeph> を、<codeph class="+ topic/ph pr-d/codeph ">secure</codeph> パラメーターを <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定して呼び出します。</li><li class="- topic/li ">このパラメーターが <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定されている場合、Flash Player は共有オブジェクトを新しく作成するか、または HTTPS 以外の接続で配信された SWF ファイルから読み込みまたは書き込みのできる既存の共有オブジェクトに対する参照を取得します。</li></ul>
  <p class="- topic/p ">SWF ファイルが HTTPS 以外の接続で配信された場合、このパラメーターを <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定しようとすると、新しい共有オブジェクトの作成（または作成済みのセキュアな共有オブジェクトへのアクセス）は失敗し、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> が返されます。このパラメーターの値にかかわらず、作成された共有オブジェクトには、当該ドメインで使用可能な合計ディスク容量の枠が適用されます。</p>
  
  <p class="- topic/p ">次の図に、<codeph class="+ topic/ph pr-d/codeph ">secure</codeph> パラメーターの使用方法を示します。</p>
  <p class="- topic/p "><adobeimage alt="セキュアな共有オブジェクトの図" href="../../images/secureParam.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
  
  </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  現在のクライアントだけが利用できるローカル永続共有オブジェクトへの参照を返します。共有オブジェクトがまだ存在しない場合は、このメソッドにより作成されます。<codeph class="+ topic/ph pr-d/codeph ">getLocal()</codeph> に渡された値が無効である場合、または呼び出しに失敗した場合、Flash Player は例外をスローします。
  
  <p class="- topic/p ">次のコードでは、返された共有オブジェクトの参照の変数への割り当て方法を示します。</p>
  <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">var so:SharedObject = SharedObject.getLocal("savedData");</codeph></p>
  
  <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>ユーザーがこのドメイン用のローカル記憶域を許可していない場合は、<codeph class="+ topic/ph pr-d/codeph ">localPath</codeph> の値が指定されていても、オブジェクトはローカルに保存されません。ただし、ローカルコンテンツは例外です。サードパーティードメイン（現在のブラウザーのアドレスバーにあるドメイン以外のドメイン）の共有オブジェクトのディスクへの書き込みを許可していない場合でも、ローカルコンテンツでは、常にサードパーティードメインの共有オブジェクトをディスクに書き込むことができます。
  </p>
  
  <p class="- topic/p ">名前のコンフリクトを避けるために、共有オブジェクトを作成している SWF ファイルの位置が考慮されます。例えば、www.myCompany.com/apps/stockwatcher.swf にある SWF ファイルが <codeph class="+ topic/ph pr-d/codeph ">portfolio</codeph> という名前の共有オブジェクトを作成した場合、この共有オブジェクトは、www.yourCompany.com/photoshoot.swf にある SWF ファイルが作成した <codeph class="+ topic/ph pr-d/codeph ">portfolio</codeph> という別のオブジェクトとは競合しません。これは、この 2 つの SWF ファイルが異なるディレクトリに置かれているからです。 </p>
  
  <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">localPath</codeph> パラメーターはオプションですが、慎重に使用する必要があります。特に、他の SWF ファイルが共有オブジェクトにアクセスしなければならない場合には注意してください。共有オブジェクトのデータが、別の場所に移動されない 1 つの SWF ファイルに固有のものである場合は、デフォルト値を使用することをお勧めします。他の SWF ファイルが共有オブジェクトにアクセスする必要がある場合、または共有オブジェクトを作成する SWF ファイルを後で移動する場合には、このパラメーターの値により、共有オブジェクトへのアクセスに影響が生じます。例えば、<codeph class="+ topic/ph pr-d/codeph ">localPath</codeph> をデフォルト値である SWF ファイルの完全パスに設定して共有オブジェクトを作成すると、他の SWF ファイルはその共有オブジェクトにアクセスできません。元の SWF ファイルを後で別の場所に移動すると、その SWF ファイルからも、共有オブジェクトに格納されているデータにアクセスできなくなります。</p>
  
  <p class="- topic/p ">共有オブジェクトへのアクセスを誤って制限してしまうのを避けるには、<codeph class="+ topic/ph pr-d/codeph ">localpath</codeph> パラメーターを使用します。最も制限の緩やかな方法は、<codeph class="+ topic/ph pr-d/codeph ">localPath</codeph> を <codeph class="+ topic/ph pr-d/codeph ">/</codeph>（スラッシュ）に設定する方法です。ドメインのすべての SWF ファイルが共有オブジェクトを利用できますが、ドメイン内の他の共有オブジェクトとの名前のコンフリクトが起こりやすくなります。より制限の厳しい方法は、<codeph class="+ topic/ph pr-d/codeph ">localPath</codeph> に SWF ファイルへの完全パス内のフォルダー名を付加する方法です。例えば、www.myCompany.com/apps/stockwatcher.swf にある SWF ファイルで作成された <codeph class="+ topic/ph pr-d/codeph ">portfolio</codeph> 共有オブジェクトの場合は、<codeph class="+ topic/ph pr-d/codeph ">localPath</codeph> パラメーターを <codeph class="+ topic/ph pr-d/codeph ">/</codeph>、<codeph class="+ topic/ph pr-d/codeph ">/apps</codeph>、または <codeph class="+ topic/ph pr-d/codeph ">/apps/stockwatcher.swf</codeph> に設定できます。アプリケーションに最適な柔軟性を提供できる方法がどれかを判断する必要があります。</p>
  
  <p class="- topic/p ">このメソッドを使用するときは、次のセキュリティモデルを考慮してください。
  
  <ul class="- topic/ul "><li class="- topic/li ">サンドボックスの境界を越えて共有オブジェクトにアクセスすることはできません。</li><li class="- topic/li ">Flash Player の設定ダイアログボックスまたは設定マネージャーを使用して、共有オブジェクトへのアクセスを制限できます。デフォルトでは、アプリケーションでドメインごとに最大 100 KB の共有オブジェクトを作成できます。管理者および一般ユーザーは、ファイルシステムへの書き込み機能に制限を適用することもできます。</li></ul></p>
  
  <p class="- topic/p ">ローカルファイル（ローカルにインストールされた SWF ファイルまたは EXE ファイル）として再生する SWF ファイルコンテンツをパブリッシュし、複数のローカル SWF ファイルから特定の共有オブジェクトにアクセスする必要があるとします。この状況では、ローカルファイルでは共有オブジェクトの保存に 2 つの異なる場所が使用されることがあるので注意してください。使用されるドメインは、共有オブジェクトを作成したローカルファイルに付与されるセキュリティ許可によって変わります。ローカルファイルには、次の 3 つの異なる許可レベルを設定できます。
  
  <ol class="- topic/ol "><li class="- topic/li ">ローカルファイルシステムのみに対するアクセス</li><li class="- topic/li ">ネットワークのみに対するアクセス</li><li class="- topic/li ">ネットワークとローカルファイルシステムの両方に対するアクセス</li></ol></p>
  
  <p class="- topic/p ">ローカルファイルシステムへのアクセス権を持つローカルファイル（レベル 1 または 3）は、共有オブジェクトを 1 つの場所に格納します。ローカルファイルシステムへのアクセス権を持たないローカルファイル（レベル 2）は、共有オブジェクトを別の場所に格納します。</p>
  
  <p class="- topic/p ">SWF ファイルがこのメソッドを使用しないようにするには、SWF コンテンツを含んでいる HTML ページに <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">object</codeph> タグおよび <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> タグのパラメーター）を設定します。</p>
  
  <p class="- topic/p ">詳細については、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">セキュリティ</xref>を参照してください。</p>
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:SharedObject:getRemote" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getRemote</apiName><shortdesc class="- topic/shortdesc ">
     複数のクライアントがアクセスできる、Flash Media Server 上の共有オブジェクトへの参照が返されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>server-specific: This info is relevant for Flash Media Server, but not Flex Data Services.
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Flash Player は、共有オブジェクトを作成できません、または見つけられません。これは、<codeph class="+ topic/ph pr-d/codeph ">remotePath</codeph> パラメーターと <codeph class="+ topic/ph pr-d/codeph ">persistence</codeph> パラメーターに、存在しないパスが指定されていると起こることがあります。
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">複数クライアントでの共有ができるオブジェクトへの参照です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:SharedObject</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">リモート共有オブジェクトの名前です。名前にはスラッシュ（/）を含めることができます。例えば、work/addresses は有効な名前です。共有オブジェクト名にスペース、および以下の文字を含めることはできません。
     <pre xml:space="preserve" class="- topic/pre ">    ~ % &amp; \ ; :  " ' , > ? ? #</pre>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">remotePath</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">共有オブジェクトが保存されるサーバーの URIです。この URI は、<codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> メソッドに渡された NetConnection オブジェクトの URI と同一である必要があります。 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">persistence</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">共有オブジェクトのデータプロパティの属性が、どこで永続的になっているか（ローカル、リモート、またはその両方）を指定します。このパラメーターでは、共有オブジェクトをローカルで保存する場合の場所も指定できます。有効な値は次のとおりです。
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">false</codeph> 値は、共有オブジェクトがクライアントまたはサーバーで永続的ではないことを指定します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> 値は、共有オブジェクトがサーバー上のみで永続的であることを指定します。</li><li class="- topic/li ">共有オブジェクトへのローカルの完全パスまたは部分パスは、共有オブジェクトがクライアントとサーバー上で永続的であることを示します。クライアントでは、共有オブジェクトは指定されたパスに保存されます。サーバー上では、アプリケーションディレクトリ内のサブディレクトリに保存されます。</li></ul>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>ユーザーがこのドメイン用のローカル記憶域を許可していない場合は、永続性のローカルパスが指定されていても、オブジェクトはローカルに保存されません。詳細については、クラスの説明を参照してください。</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">secure</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">この共有オブジェクトへのアクセスが HTTPS 接続経由で配布された SWF ファイルに限定されているかどうかを判別します。詳細については、<codeph class="+ topic/ph pr-d/codeph ">secure</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">getLocal</codeph> メソッドエントリ）の説明を参照してください。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     複数のクライアントがアクセスできる、Flash Media Server 上の共有オブジェクトへの参照が返されます。リモート共有オブジェクトがまだ存在しない場合は、このメソッドにより作成されます。 
     
     <p class="- topic/p ">
     次に示すように、リモート共有オブジェクトを作成するために <codeph class="+ topic/ph pr-d/codeph ">getRemote()</codeph> を呼び出し、<codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> を呼び出してリモート共有オブジェクトをサーバーに接続します。</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var nc:NetConnection = new NetConnection();
     nc.connect("rtmp://somedomain.com/applicationName");
     var myRemoteSO:SharedObject = SharedObject.getRemote("mo", nc.uri, false);
     myRemoteSO.connect(nc);
     </codeblock>
     
     
     
     <p class="- topic/p ">
     共有オブジェクトのローカルおよびリモートコピーを同期させるには、<codeph class="+ topic/ph pr-d/codeph ">sync</codeph> イベントを監視して処理します。このオブジェクトを共有するすべてのクライアントは、<codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターと <codeph class="+ topic/ph pr-d/codeph ">remotePath</codeph> パラメーターに同じ値を渡す必要があります。 
     </p> 
     
     <p class="- topic/p ">現在のクライアントでのみ利用できる共有オブジェクトを作成するには、<codeph class="+ topic/ph pr-d/codeph ">SharedObject.getLocal()</codeph> を使用します。
     </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/connect()" class="- topic/link "><linktext class="- topic/linktext ">connect()</linktext></link><link href="flash.net.xml#SharedObject/getLocal()" class="- topic/link "><linktext class="- topic/linktext ">getLocal()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:SharedObject:send" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">send</apiName><shortdesc class="- topic/shortdesc ">
     リモート共有オブジェクトに接続しているすべてのクライアント（メッセージを送信したクライアントも含む）に、メッセージをブロードキャストします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Needs better documentation, examples.
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">arguments</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">複数の引数：メッセージを識別するストリング、共有オブジェクトに割り当てる複数のハンドラー関数名、および任意のデータ型のオプションのパラメーターです。ハンドラー名の深さは 1 レベルのみで（つまり、親子形式を取ることができません）、共有オブジェクトに相対します。引数は直列化され、接続を介して送信されます。受信側のハンドラーは同じ順番でそれらの引数を受け取ります。パラメーターが循環オブジェクト（循環するリンクされたリストなど）である場合、シリアライザは参照を正しく処理します。
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>関数名には予約語を使用しないでください。例えば、<codeph class="+ topic/ph pr-d/codeph ">myRemoteSO.send("close")</codeph> は失敗します。</p>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     リモート共有オブジェクトに接続しているすべてのクライアント（メッセージを送信したクライアントも含む）に、メッセージをブロードキャストします。メッセージを処理して応答するには、共有オブジェクトに関連付けるコールバック関数を作成します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:SharedObject:setDirty" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setDirty</apiName><shortdesc class="- topic/shortdesc ">
     共有オブジェクトのプロパティの値が変更されたことをサーバーに通知します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>The AS2 player automatically marks properties dirty as they are changed.
          The FMS server, however, requires an explicit setProperty() call to indicate when a property
          of data has changed.
     
          AS3 does not support auto-dirtying the properties, so we are introducing setDirty() to explicitly
          indicate when a property has changed, and setProperty() to match the method provided with the server.
     
          It's probably best to read the FMS Actionscript reference (search for SharedObject.setProperty at
          www.adobe.com) before writing this documentation, as the details should be similar.
     
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">propertyName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">変更されたプロパティの名前です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     共有オブジェクトのプロパティの値が変更されたことをサーバーに通知します。このメソッドは、変更されたことを示す <i class="+ topic/ph hi-d/i ">dirty</i> としてプロパティをマークします。
     
     <p class="- topic/p ">
     <codeph class="+ topic/ph pr-d/codeph ">SharedObject.setProperty()</codeph> を呼び出して、共有オブジェクトのプロパティを作成します。 
     </p>
      
     <p class="- topic/p ">
     <codeph class="+ topic/ph pr-d/codeph ">SharedObject.setProperty()</codeph> メソッドは、<codeph class="+ topic/ph pr-d/codeph ">setDirty()</codeph> を実装します。ほとんどの場合、例えばプロパティの値がストリングや数値のようなプリミティブ型のときは、<codeph class="+ topic/ph pr-d/codeph ">setProperty()</codeph> を呼び出すことが可能で、<codeph class="+ topic/ph pr-d/codeph ">setDirty()</codeph> を呼び出す必要はありません。ただし、プロパティの値が独自のプロパティを持つオブジェクトである場合は、<codeph class="+ topic/ph pr-d/codeph ">setDirty()</codeph> を呼び出してオブジェクト内の値が変更された日時を示します。
     </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/data" class="- topic/link "><linktext class="- topic/linktext ">SharedObject.data（クライアント側プロパティ）</linktext></link><link href="flash.net.xml#SharedObject/setProperty()" class="- topic/link "><linktext class="- topic/linktext ">setProperty()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:SharedObject:setProperty" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setProperty</apiName><shortdesc class="- topic/shortdesc ">
     共有オブジェクトのプロパティの値を更新し、プロパティの値が変更されたことをサーバーに通知します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">propertyName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">共有オブジェクトのプロパティの名前です。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">プロパティの値（ActionScript オブジェクト）です。プロパティを削除する場合は <codeph class="+ topic/ph pr-d/codeph ">null</codeph> を指定します。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     共有オブジェクトのプロパティの値を更新し、プロパティの値が変更されたことをサーバーに通知します。<codeph class="+ topic/ph pr-d/codeph ">setProperty()</codeph> メソッドは、プロパティを changed または dirty として明示的にマークします。
     
     <p class="- topic/p ">リモート共有オブジェクトの詳細については、<xref href="http://www.adobe.com/go/learn_fms_docs_en" class="- topic/xref ">Flash Media Server のマニュアル</xref>を参照してください。</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b><codeph class="+ topic/ph pr-d/codeph ">SharedObject.setProperty()</codeph> メソッドには、<codeph class="+ topic/ph pr-d/codeph ">setDirty()</codeph> メソッドが実装されています。ほとんどの場合、例えばプロパティの値がストリングや数値のようなプリミティブ型のときは、<codeph class="+ topic/ph pr-d/codeph ">setProperty()</codeph> を使用し、<codeph class="+ topic/ph pr-d/codeph ">setDirty</codeph> を使用することはありません。ただし、プロパティの値が独自のプロパティを持つオブジェクトである場合は、<codeph class="+ topic/ph pr-d/codeph ">setDirty()</codeph> を使用してオブジェクト内の値が変更された日時を示します。一般的には、<codeph class="+ topic/ph pr-d/codeph ">setProperty()</codeph> を呼び出して、<codeph class="+ topic/ph pr-d/codeph ">setDirty()</codeph> は使用しないことをお勧めします。<codeph class="+ topic/ph pr-d/codeph ">setProperty()</codeph> は値が変更されたときだけプロパティ値を更新しますが、<codeph class="+ topic/ph pr-d/codeph ">setDirty()</codeph> はサブスクライブしているすべてのクライアントを強制的に同期させるからです。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/data" class="- topic/link "><linktext class="- topic/linktext ">SharedObject.data（クライアント側プロパティ）</linktext></link></related-links></apiOperation><apiValue id="flash.net:SharedObject:client:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">client</apiName><shortdesc class="- topic/shortdesc ">
     コールバックメソッドが呼び出されるオブジェクトを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Property documented; needs review.
      
      </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">client</codeph> プロパティは、null 以外のオブジェクトに設定する必要があります。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     コールバックメソッドが呼び出されるオブジェクトを示します。デフォルトのオブジェクトは <codeph class="+ topic/ph pr-d/codeph ">this</codeph> です。client プロパティを別のオブジェクトに設定し、コールバックメソッドをその別のオブジェクトで呼び出すことができます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:SharedObject:data:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><shortdesc class="- topic/shortdesc ">
     オブジェクトの data プロパティに割り当てられた属性のコレクションです。これらの属性は共有および保存することができます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">SharedObject, SharedObject.data, data
     
     </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティに割り当てられた属性のコレクションです。これらの属性は共有および保存することができます。それぞれの属性は、ActionScript または JavaScript タイプのオブジェクトです。例えば、Array、Number、Boolean、ByteArray、XML などです。次のコードでは、共有オブジェクトの各種属性に値を割り当てています。
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var items_array:Array = new Array(101, 346, 483);
     var currentUserIsAdmin:Boolean = true;
     var currentUserName:String = "Ramona";
     
     var my_so:SharedObject = SharedObject.getLocal("superfoo");
     my_so.data.itemNumbers = items_array;
     my_so.data.adminPrivileges = currentUserIsAdmin;
     my_so.data.userName = currentUserName;
     
     for (var prop in my_so.data) {
       trace(prop+": "+my_so.data[prop]);
     }
     </codeblock>
     
     
     
     <p class="- topic/p ">永続的なオブジェクトの場合は、共有オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティのすべての属性が保存されます。また共有オブジェクトには次の情報が含まれています。</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     userName: Ramona
     adminPrivileges: true
     itemNumbers: 101,346,483
     </codeblock>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>共有オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティに、<codeph class="+ topic/ph pr-d/codeph ">so.data = someValue</codeph> のように値を直接割り当てないようにしてください。このような割り当ては無視されます。</p>
     
     <p class="- topic/p ">ローカル共有オブジェクトの属性を削除するには、<codeph class="+ topic/ph pr-d/codeph ">delete so.data.attributeName</codeph> というコードを使用します。ローカル共有オブジェクトの属性を <codeph class="+ topic/ph pr-d/codeph ">null</codeph> または <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> に設定しても、属性は削除されません。</p>
     
     <p class="- topic/p ">共有オブジェクトの<i class="+ topic/ph hi-d/i ">プライベート</i>値（オブジェクトの使用中にそのクライアントインスタンスでのみ利用でき、閉じるときにオブジェクトと共に保存されない値）を作成するには、<codeph class="+ topic/ph pr-d/codeph ">data</codeph> 以外の名前のプロパティを作成して、その値を保存します。次に例を示します。</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var my_so:SharedObject = SharedObject.getLocal("superfoo");
     my_so.favoriteColor = "blue";
     my_so.favoriteNightClub = "The Bluenote Tavern";
     my_so.favoriteSong = "My World is Blue";
     
     for (var prop in my_so) {
       trace(prop+": "+my_so[prop]);
     }
     </codeblock>
     
     
     
     <p class="- topic/p ">共有オブジェクトには次のデータが含まれます。</p>
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     favoriteSong: My World is Blue
     favoriteNightClub: The Bluenote Tavern
     favoriteColor: blue
     data: [object Object]
     </codeblock>
     
     <p class="- topic/p ">
     サーバーで使用されるリモート共有オブジェクトの場合、共有オブジェクトに接続しているすべてのクライアントが <codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティのすべての属性を利用可能で、そのオブジェクトが永続化されている場合、すべての属性が保存されます。あるクライアントが属性の値を変更すると、すべてのクライアントに新しい値が表示されます。
     </p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/getLocal()" class="- topic/link "><linktext class="- topic/linktext ">getLocal()</linktext></link></related-links></apiValue><apiValue id="flash.net:SharedObject:defaultObjectEncoding:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">defaultObjectEncoding</apiName><shortdesc class="- topic/shortdesc ">
     SWF ファイルで作成されたすべてのローカル共有オブジェクトのデフォルトのオブジェクトエンコード（AMF バージョン）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     SWF ファイルで作成されたすべてのローカル共有オブジェクトのデフォルトのオブジェクトエンコード（AMF バージョン）です。ローカル共有オブジェクトがディスクに書き込まれるとき、<codeph class="+ topic/ph pr-d/codeph ">SharedObject.defaultObjectEncoding</codeph> プロパティは、使用する必要のある Action Message Format バージョンを示します。ActionScript 3.0 フォーマット（AMF3）または ActionScript 1.0 または 2.0 フォーマット（AMF0）です。
     
     <p class="- topic/p ">ローカル共有オブジェクトとリモート共有オブジェクトのエンコードの違いを含む、オブジェクトエンコードの詳細については、<codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> プロパティの説明を参照してください。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">SharedObject.defaultObjectEncoding</codeph> のデフォルト値は、ActionScript 3.0 フォーマット AMF3 を使用するように設定されています。ActionScript 2.0 または 1.0 SWF ファイルで読み込めるローカル共有オブジェクトの書き込みが必要な場合は、ローカル共有オブジェクトを作成する前に、スクリプトの先頭部分で <codeph class="+ topic/ph pr-d/codeph ">SharedObject.defaultObjectEncoding</codeph> を設定して、ActionScript 1.0 または ActionScript 2.0 フォーマット <codeph class="+ topic/ph pr-d/codeph ">flash.net.ObjectEncoding.AMF0</codeph> を使用するようにします。それ以降に作成されるすべてのローカル共有オブジェクトで、AMF0 エンコーディングが使用され、古いコンテンツとやり取りできるようになります。ローカル共有オブジェクトを作成した後は、既存のローカル共有オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> 値を <codeph class="+ topic/ph pr-d/codeph ">SharedObject.defaultObjectEncoding</codeph> を設定して変更することはできません。</p>
     
     <p class="- topic/p ">SWF ファイルで作成したすべての共有オブジェクトに対してではなく、オブジェクトごとにオブジェクトエンコードを設定するには、ローカル共有オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> プロパティを設定します。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/objectEncoding" class="- topic/link "><linktext class="- topic/linktext ">objectEncoding プロパティ</linktext></link><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding クラス</linktext></link></related-links></apiValue><apiValue id="flash.net:SharedObject:objectEncoding:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">objectEncoding</apiName><shortdesc class="- topic/shortdesc ">
     この共有オブジェクトのオブジェクトエンコード（AMF バージョン）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">リモート共有オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> プロパティの値を設定しようとしました。このプロパティは、関連付けられた NetConnection インスタンスにより値が決定されるため、リモート共有オブジェクトでは読み取り専用になります。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ReferenceError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ReferenceError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     この共有オブジェクトのオブジェクトエンコード（AMF バージョン）です。ローカル共有オブジェクトがディスクに書き込まれるとき、<codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> プロパティは、使用する必要のある Action Message Format バージョンを示します。ActionScript 3.0 フォーマット（AMF3）または ActionScript 1.0 または 2.0 フォーマット（AMF0）です。 
     
     <p class="- topic/p ">オブジェクトエンコードは、共有オブジェクトがローカルかリモートかによって、処理方法が異なります。</p>
     <ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">ローカル共有オブジェクト</b>。ローカル共有オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> プロパティの値を取得または設定できます。<codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> の値は、このローカル共有オブジェクトの<i class="+ topic/ph hi-d/i ">書き込み</i> に使用されるフォーマットに影響します。このローカル共有オブジェクトを ActionScript 2.0 または 1.0 SWF ファイルで読み込めなければならない場合は、<codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> を <codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF0</codeph> に設定します。オブジェクトエンコードが AMF3 を書き込むように設定されていても、Flash Player で AMF0 ローカル共有オブジェクトを読み込むことができます。つまり、このプロパティのデフォルト値（<codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF3</codeph>）を使用すれば、ActionScript 2.0 または 1.0 SWF ファイルで作成した共有オブジェクトも引き続き SWF ファイルで読み込むことができます。
     </li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">リモート共有オブジェクト</b>。サーバーに接続されているときは、リモート共有オブジェクトは、関連付けられた NetConnection インスタンス（リモート共有オブジェクトへの接続に使用されるインスタンス）の <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> 設定を継承します。サーバーに接続されていないときは、リモート共有オブジェクトは、関連付けされた NetConnection インスタンスから <codeph class="+ topic/ph pr-d/codeph ">defaultObjectEncoding</codeph> 設定を継承します。リモート共有オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> プロパティの値は NetConnection インスタンスにより決定されるため、このプロパティはリモート共有オブジェクトでは読み取り専用になります。
     </li></ul>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/defaultObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">defaultObjectEncoding</linktext></link><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">flash.net.ObjectEncoding</linktext></link></related-links></apiValue><apiValue id="flash.net:SharedObject:size:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">size</apiName><shortdesc class="- topic/shortdesc ">
     共有オブジェクトの現在のサイズ（バイト数）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">SharedObject, SharedObject.getSize, getSize
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     共有オブジェクトの現在のサイズ（バイト数）です。
     
     <p class="- topic/p ">すべてのデータプロパティを順に確認することによって、共有オブジェクトのサイズが計算されます。オブジェクトが持つデータプロパティが多いほど、サイズの計算に時間がかかります。オブジェクトのサイズを調べる処理は非常に時間がかかる場合があるので、特に必要がない限り、このメソッドの使用は避けてください。</p>
     
     </apiDesc><example conref="examples\SharedObject.size.1.as" class="- topic/example "> 次のコードは、ID <codeph class="+ topic/ph pr-d/codeph ">"thehobbit"</codeph> を使用して SharedObject オブジェクトを作成します。<codeph class="+ topic/ph pr-d/codeph ">username</codeph> というプロパティが、SharedObject オブジェクトのデータプロパティに追加されます。次に <codeph class="+ topic/ph pr-d/codeph ">size</codeph> プロパティがトレースされ、示されている値が返されます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

import flash.net.SharedObject;

// if these get copied or not
var mySo:SharedObject = SharedObject.getLocal("thehobbit");
mySo.data.username = "bilbobaggins";
trace(mySo.size); // 55
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.net:SharedObject:fps:set" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fps</apiName><shortdesc class="- topic/shortdesc ">
     共有オブジェクトに対するクライアントの変更がサーバーに送信される回数（1 秒あたり）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>server-specific: The info is relevant for Flash Media Server, but not Flex.
     </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="write" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     共有オブジェクトに対するクライアントの変更がサーバーに送信される回数（1 秒あたり）を指定します。 
     
     <p class="- topic/p ">クライアントとサーバー間のトラフィック量を制限する場合に、このメソッドを使用します。例えば、クライアントとサーバー間の接続が比較的遅い場合は、<codeph class="+ topic/ph pr-d/codeph ">fps</codeph> を小さめの値に設定するとよいでしょう。逆に、クライアントが、タイミングが重要なマルチユーザーアプリケーションに接続している場合は、<codeph class="+ topic/ph pr-d/codeph ">fps</codeph> をやや大きめの値に設定できます。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">fps</codeph> を設定すると、<codeph class="+ topic/ph pr-d/codeph ">sync</codeph> イベントがトリガーされ、サーバーに対するすべての変更が更新されるようになります。サーバーを手動のみで更新する場合は、<codeph class="+ topic/ph pr-d/codeph ">fps</codeph> を 0 に設定します。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">sync</codeph> イベントが送出されるまで、サーバーに変更は送信されません。つまり、サーバーからの応答時間が遅い場合、更新がサーバーに送られる頻度は、このプロパティに指定した値よりも少なくなる可能性があります。 </p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetGroupInfo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetGroupInfo</apiName><shortdesc class="- topic/shortdesc ">
NetGroupInfo クラスは、NetGroup オブジェクトの基盤となる RTMFP ピアーツーピアーデータ転送に関する多様なサービス品質（QoS）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
NetGroupInfo クラスは、NetGroup オブジェクトの基盤となる RTMFP ピアーツーピアーデータ転送に関する多様なサービス品質（QoS）を指定します。<codeph class="+ topic/ph pr-d/codeph ">NetGroup.info</codeph> プロパティは、NetGroupInfo オブジェクトを返します。これは現在の QoS 状態です。

</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/info" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.info</linktext></link><link href="flash.net.xml#NetGroup/post()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.post()</linktext></link><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNearest()</linktext></link><link href="flash.net.xml#NetGroup/sendToNeighbor()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNeighbor()</linktext></link><link href="flash.net.xml#NetGroup/sendToAllNeighbors()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToAllNeighbors()</linktext></link><link href="flash.net.xml#NetGroup/addWantObjects()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.addWantObjects()</linktext></link><link href="flash.net.xml#NetGroup/writeRequestedObject()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.writeRequestedObject()</linktext></link></related-links><apiOperation id="flash.net:NetGroupInfo:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
     NetGroupInfo オブジェクトのプロパティの値を含むストリングを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">NetGroupInfo オブジェクトのプロパティの値を含むストリング。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">この NetGroupInfo オブジェクトのプロパティを列挙するテキスト値を返します。
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     NetGroupInfo オブジェクトのプロパティの値を含むストリングを返します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.net:NetGroupInfo:objectReplicationReceiveBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">objectReplicationReceiveBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     ローカルノードが Object Replication システム経由でピアーからオブジェクトを受信するレート（1 秒あたりのバイト数）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ローカルノードが Object Replication システム経由でピアーからオブジェクトを受信するレート（1 秒あたりのバイト数）を指定します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/writeRequestedObject()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.writeRequestedObject()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroupInfo:objectReplicationSendBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">objectReplicationSendBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     Object Replication システムによって、オブジェクトがローカルノードからピアーに複製されるレート（1 秒あたりのバイト数）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Object Replication システムによって、オブジェクトがローカルノードからピアーに複製されるレート（1 秒あたりのバイト数）を指定します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/writeRequestedObject()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.writeRequestedObject()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroupInfo:postingReceiveControlBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">postingReceiveControlBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     ローカルノードがピアーからアップロード制御オーバーヘッドメッセージを受信するレート（1 秒あたりのバイト数）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ローカルノードがピアーからアップロード制御オーバーヘッドメッセージを受信するレート（1 秒あたりのバイト数）を指定します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/post()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.post()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroupInfo:postingReceiveDataBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">postingReceiveDataBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     ローカルノードがピアーからアップロードデータを受信するレート（1 秒あたりのバイト数）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ローカルノードがピアーからアップロードデータを受信するレート（1 秒あたりのバイト数）を指定します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/post()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.post()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroupInfo:postingSendControlBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">postingSendControlBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     ローカルノードがピアーにアップロード制御オーバーヘッドメッセージを送信するレート（1 秒あたりのバイト数）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ローカルノードがピアーにアップロード制御オーバーヘッドメッセージを送信するレート（1 秒あたりのバイト数）を指定します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/post()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.post()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroupInfo:postingSendDataBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">postingSendDataBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     ローカルノードがピアーにアップロードデータを送信するレート（1 秒あたりのバイト数）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ローカルノードがピアーにアップロードデータを送信するレート（1 秒あたりのバイト数）を指定します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/post()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.post()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroupInfo:routingReceiveBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">routingReceiveBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     ローカルノードがピアーから転送メッセージを受信するレート（1 秒あたりのバイト数）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ローカルノードがピアーから転送メッセージを受信するレート（1 秒あたりのバイト数）を指定します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNearest()</linktext></link><link href="flash.net.xml#NetGroup/sendToNeighbor()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNeighbor()</linktext></link><link href="flash.net.xml#NetGroup/sendToAllNeighbors()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToAllNeighbors()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroupInfo:routingSendBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">routingSendBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     ローカルノードがピアーに転送メッセージを送信するレート（1 秒あたりのバイト数）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ローカルノードがピアーに転送メッセージを送信するレート（1 秒あたりのバイト数）を指定します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNearest()</linktext></link><link href="flash.net.xml#NetGroup/sendToNeighbor()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNeighbor()</linktext></link><link href="flash.net.xml#NetGroup/sendToAllNeighbors()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToAllNeighbors()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:URLLoaderDataFormat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">URLLoaderDataFormat</apiName><shortdesc class="- topic/shortdesc ">
 URLLoaderDataFormat クラスは、ダウンロードされるデータの受信方法を指定する値を提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 URLLoaderDataFormat クラスは、ダウンロードされるデータの受信方法を指定する値を提供します。
 
 </apiDesc><example conref="examples\URLLoaderDataFormatExample.as" class="- topic/example "> 次の例では、URLLoaderDataFormatExample クラスを使用して、実行時にロードされるファイルのデータフォーマットとステータス情報を表示します。ここでは以下の手順を実行します。
 <ol class="- topic/ol "><li class="- topic/li ">クラスコンストラクターが <codeph class="+ topic/ph pr-d/codeph ">loader</codeph> という URLLoader インスタンスと、ロードされるファイルの場所と名前である <codeph class="+ topic/ph pr-d/codeph ">request</codeph> という URLRequest インスタンスを作成します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">loader</codeph> オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">configureListeners()</codeph> メソッドに渡されます。このメソッドは、サポートされる各 URLLoader イベントのリスナーを追加します。
  <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">completeHandler()</codeph>：<codeph class="+ topic/ph pr-d/codeph ">complete</codeph> イベントをリッスンします。このイベントは "TextFile.txt" が正常にロードされた後に送出されます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">openHandler()</codeph>：<codeph class="+ topic/ph pr-d/codeph ">open</codeph> イベントをリッスンします。このイベントは "TextFile.txt" の（Flash Player への）ダウンロードの開始時に送出されます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">progressHandler()</codeph>：<codeph class="+ topic/ph pr-d/codeph ">progress</codeph> イベントをリッスンします。このイベントはダウンロード処理を実行中にデータを受信したときに送出されます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">securityErrorHandler()</codeph>：<codeph class="+ topic/ph pr-d/codeph ">securityError</codeph> イベントをリッスンします。このイベントは、ローカルでの再生に関するセキュリティを誤って設定してテキストファイルにアクセスした場合に送出されます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">httpStatusHandler()</codeph>：<codeph class="+ topic/ph pr-d/codeph ">httpStatusHandler</codeph> イベントをリッスンします。この場合は "TextFile.txt" がローカル側にあるので、このイベントは送出されません。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ioErrorHandler()</codeph>：<codeph class="+ topic/ph pr-d/codeph ">ioError</codeph> イベントをリッスンします。このイベントは、例えばファイルが存在しないなど、ファイルに関して深刻な問題がある場合のみ発生します。</li></ul></li><li class="- topic/li ">次に <codeph class="+ topic/ph pr-d/codeph ">request</codeph> オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">loader.load()</codeph> メソッドに渡されます。このメソッドは、<codeph class="+ topic/ph pr-d/codeph ">DisplayObject</codeph> オブジェクトを使用してテキストファイルをメモリにロードします。</li></ol>
 <p class="- topic/p "> <b class="+ topic/ph hi-d/b ">注意：</b>
 <ul class="- topic/ul "><li class="- topic/li ">「ローカルでの再生に関するセキュリティ」を「ローカルファイルにのみアクセスする」に設定して SWF ファイルをコンパイルする必要があります。
  </li><li class="- topic/li ">この例では、"TextFile.txt" という名前のファイルが SWF ファイルと同じディレクトリに配置されている必要があります。この例を参照し、バイナリまたは URL エンコードデータファイルを識別する場合は、正しいデータ形式でファイルを提供し、"TextFile.txt" を新しいファイルの名前と場所に変更する必要があります。</li></ul>
 </p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.*;

    public class URLLoaderDataFormatExample extends Sprite {
        private var source:String = "TextFile.txt";
        private var dataFormat:String = URLLoaderDataFormat.TEXT;
        
        public function URLLoaderDataFormatExample () {
            var loader:URLLoader = new URLLoader();
            loader.dataFormat = dataFormat;
            configureListeners(loader);
            var request:URLRequest = new URLRequest(source);
            try {
                loader.load(request);
            } catch (error:Error) {
                trace("Error loading requested document: " + source);
            }
        }

        private function configureListeners(dispatcher:URLLoader):void {
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        }

        private function completeHandler(event:Event):void {
            var loader:URLLoader = URLLoader(event.target);
            switch(loader.dataFormat) {
                case URLLoaderDataFormat.TEXT :
                    trace("completeHandler (text): " + loader.data);
                    break;
                case URLLoaderDataFormat.BINARY :
                    trace("completeHandler (binary): " + loader.data);
                    break;
                case URLLoaderDataFormat.VARIABLES :
                    trace("completeHandler (variables): " + loader.data);
                    break;
            }
        }

        private function httpStatusHandler(event:Event):void {
            trace("httpStatusHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><apiValue id="flash.net:URLLoaderDataFormat:BINARY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">BINARY</apiName><shortdesc class="- topic/shortdesc ">
	 ダウンロードされるデータを生のバイナリデータとして受信することを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">binary</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ダウンロードされるデータを生のバイナリデータとして受信することを指定します。
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLLoaderDataFormat:TEXT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">TEXT</apiName><shortdesc class="- topic/shortdesc ">
	 ダウンロードされるデータをテキストとして受信することを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">text</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ダウンロードされるデータをテキストとして受信することを指定します。
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLLoaderDataFormat:VARIABLES" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">VARIABLES</apiName><shortdesc class="- topic/shortdesc ">
	 ダウンロードされるデータを URL エンコード形式の変数として受信することを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">variables</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ダウンロードされるデータを URL エンコード形式の変数として受信することを指定します。
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetStreamPlayTransitions" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetStreamPlayTransitions</apiName><shortdesc class="- topic/shortdesc ">
 
 NetStreamPlayTransitions クラスでは、NetStreamPlayOptions.transition プロパティで使用できる有効なストリングを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 
 NetStreamPlayTransitions クラスでは、<codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayOptions.transition</codeph> プロパティで使用できる有効なストリングを指定します。これらの文字列は、使用される移行モードに応じて、新しいストリームへのトランジションやストリームの再生で用いられる動作を制御します。
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamPlayOptions" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayOptions</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link></related-links><apiValue id="flash.net:NetStreamPlayTransitions:APPEND_AND_WAIT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">APPEND_AND_WAIT</apiName><shortdesc class="- topic/shortdesc ">
     
    最初のストリームから再生することなく、再生リストを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">appendAndWait</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
    最初のストリームから再生することなく、再生リストを作成します。 
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">APPEND_AND_WAIT</codeph> 移行モードは <codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> メソッドで使用されるモードで、最初のストリームから直ちに再生を開始せずに、再生リストを作成します。このモードを使用して、再生リスト内の最後の項目以外の項目をロードします。再生リストの最後の項目をロードすると、移行モードが <codeph class="+ topic/ph pr-d/codeph ">RESUME</codeph> に設定されます。この時点で、Flash Player はストリームを開始し、再生リストを再生します。</p>
    
    <p class="- topic/p ">このモードを使用して、最初から再生リストを作成したり、切断された接続が回復した後に再生リストを再度作成することができます。新しい再生リストの場合、<codeph class="+ topic/ph pr-d/codeph ">RESUME</codeph> が指定された <codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> が呼び出されたときに、Flash Player は最初のストリームまたは指定された開始点からストリーミングを開始します。切断された接続を回復するために、<codeph class="+ topic/ph pr-d/codeph ">RESUME</codeph> を指定して <codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> メソッドを呼び出すと、Flash Player は、ストリームが中断された位置を特定し、その位置からストリーミングを開始するようにサーバーに指示します。その結果として、サーバーは、中断された位置に対応するストリームを再生リスト内で特定し、その時点からストリーミングを開始します。</p>
    
    <p class="- topic/p ">この移行モードは、最初のストリームから直ちに再生を開始する <codeph class="+ topic/ph pr-d/codeph ">APPEND</codeph> モードとは対照的です。</p>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamPlayTransitions/APPEND" class="- topic/link "><linktext class="- topic/linktext ">APPEND</linktext></link><link href="flash.net.xml#NetStreamPlayTransitions/RESUME" class="- topic/link "><linktext class="- topic/linktext ">RESUME</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayTransitions:APPEND" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">APPEND</apiName><shortdesc class="- topic/shortdesc ">
     
    ストリームを再生リストに追加し、最初のストリームの再生を開始します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">append</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
    ストリームを再生リストに追加し、最初のストリームの再生を開始します。このモードは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> メソッド（<codeph class="+ topic/ph pr-d/codeph ">reset</codeph> フラグを <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定）と同じ機能です。
    
    <p class="- topic/p ">このモードでは、Flash Media Server は <codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayOptions.streamName</codeph> で指定されたストリームを再生リストの最後に置き、<codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayOptions.oldStreamName</codeph> パラメーターは無視します。</p> 
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamPlayTransitions/APPEND_AND_WAIT" class="- topic/link "><linktext class="- topic/linktext ">APPEND_AND_WAIT</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/oldStreamName" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayOptions.oldStreamName</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/streamName" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayOptions.streamName</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayTransitions:RESET" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RESET</apiName><shortdesc class="- topic/shortdesc ">
    
    それまでの再生呼び出しをクリアし、指定されたストリームを直ちに再生します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">reset</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    
    それまでの再生呼び出しをクリアし、指定されたストリームを直ちに再生します。このモードは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> メソッド（<codeph class="+ topic/ph pr-d/codeph ">reset</codeph> フラグを <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定（<codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> のデフォルト動作））と同じ機能です。
    
    <p class="- topic/p ">このモードでは、再生中のストリームはフラッシュされ、<codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayOptions.streamName</codeph> で指定されたストリームの再生が開始されます。<codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayOptions.oldStreamName</codeph> パラメーターは無視されます。</p> 
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/oldStreamName" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayOptions.oldStreamName</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/streamName" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayOptions.streamName</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayTransitions:RESUME" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RESUME</apiName><shortdesc class="- topic/shortdesc ">
     
    前の接続が終了した時点からのデータを新しい接続に要求します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">resume</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
    前の接続が終了した時点からのデータを新しい接続に要求します。<codeph class="+ topic/ph pr-d/codeph ">RESUME</codeph> モードでは 2 つの接続間のストリームが整合されるので、ビデオ再生時にブロックノイズが表示されたり、シーンが飛んだりすることはありません。サーバーの問題やその他の接続の問題のせいで中断したストリームを再接続するときに、このモードを使用します。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamPlayTransitions/APPEND_AND_WAIT" class="- topic/link "><linktext class="- topic/linktext ">APPEND_AND_WAIT</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayTransitions:STOP" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">STOP</apiName><shortdesc class="- topic/shortdesc ">
     
    再生リストにあるストリームの再生を停止します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">stop</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
    再生リストにあるストリームの再生を停止します。このモードは <codeph class="+ topic/ph pr-d/codeph ">NetStream.play(false)</codeph> 呼び出しと同じ機能です。再生リストを停止し、リセットします。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayTransitions:SWAP" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SWAP</apiName><shortdesc class="- topic/shortdesc ">
    あるコンテンツのストリームを異なるコンテンツのストリームに置き換え、再生リストの他の部分はそのまま保持します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">swap</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    あるコンテンツのストリームを異なるコンテンツのストリームに置き換え、再生リストの他の部分はそのまま保持します。
    
    <p class="- topic/p ">このモードは <codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayOptions.oldStreamName</codeph> で指定されたストリームを <codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayOptions.streamName</codeph> で指定されたストリームに置き換えます。再生リストの他の部分はそのままです。このモードでは、Flash Media Server にはストリームのコンテンツに関する想定はなく、異なるコンテンツのように処理します。 </p>
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">oldStreamName</codeph> が未送信の場合、サーバーはストリームの境界で切り換えを行い、最初から <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph> 用のデータを送信します。サーバーが既に <codeph class="+ topic/ph pr-d/codeph ">oldStreamName</codeph> 用のデータを送信し始めている場合、<codeph class="+ topic/ph pr-d/codeph ">streamName</codeph> には切り換えず、<codeph class="+ topic/ph pr-d/codeph ">NetStream.Play.Failed</codeph> イベントを送出します。</p>
    
    <p class="- topic/p ">このモードを使用するのは、切り換えるストリームが互いに無関係でコンテンツや長さが異なる場合です。 例えば、ユーザーの追跡調査およびコマーシャル視聴統計に基づいて、あるコマーシャルを別のコマーシャルに取り換える場合にこのモードを使用します。</p>
    
    <p class="- topic/p ">あるストリームから、同じコンテンツの別のストリームに切り換えるには、代わりに <codeph class="+ topic/ph pr-d/codeph ">SWITCH</codeph> モードを使用します。</p>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamPlayTransitions/SWITCH" class="- topic/link "><linktext class="- topic/linktext ">SWITCH</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/oldStreamName" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayOptions.oldStreamName</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/streamName" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayOptions.streamName</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayTransitions:SWITCH" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SWITCH</apiName><shortdesc class="- topic/shortdesc ">
    あるストリームの再生から別のストリームの再生に切り替えます。通常、同じコンテンツのストリームに対して行われます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">switch</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    あるストリームの再生から別のストリームの再生に切り替えます。通常、同じコンテンツのストリームに対して行われます。切り替えるストリームを <codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayOptions.oldStreamName</codeph> と <codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayOptions.streamName</codeph> で指定します。 
    
    <p class="- topic/p ">このモードは、同じコンテンツでビットレートまたは解像度が異なるストリームに切り替えるときに使用します。例えば、アプリケーションがストリームを再生リストに置くか、特定のビットレートで単一のストリームを再生しているときにこのモードを使用すると、利用できる帯域幅または CPU 能力がストリームが必要とするより高いか低いかを判断します。すると、アプリケーションはビットレートの高いまたは低いストリームに更新することができます。</p>
    
    <p class="- topic/p ">このモードで、Flash Media Server は <codeph class="+ topic/ph pr-d/codeph ">oldStreamName</codeph> と <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph> ストリーム間の関係について、ある仮定をします。Flash Media Server は、ストリームのコンテンツとキーフレーム間隔は同一だが、解像度またはビットレートが異なると想定します。</p>
    
    <p class="- topic/p ">再生リストがキューに置かれ、<codeph class="+ topic/ph pr-d/codeph ">oldStreamName</codeph> が再生リスト内または現在再生中のストリームである場合、<codeph class="+ topic/ph pr-d/codeph ">oldStreamName</codeph> は <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph> で置き換えられます。</p>
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">oldStreamName</codeph> が null か未定義、または再生リストにない場合、サーバーは次の論理ポイントで <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph> に切り替え、確実にスムースに切り換えられるようにします。</p>
    
    <p class="- topic/p ">あるストリームから、コンテンツの異なる別のストリームに切り換えるには、代わりに <codeph class="+ topic/ph pr-d/codeph ">SWAP</codeph>  モードを使用します。</p>
    
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamPlayTransitions/SWAP" class="- topic/link "><linktext class="- topic/linktext ">SWAP</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/oldStreamName" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayOptions.oldStreamName</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/streamName" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayOptions.streamName</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetConnection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetConnection</apiName><shortdesc class="- topic/shortdesc ">
 NetConnection クラスでは、クライアントとサーバー間の双方向の接続が作成されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetConnection, Video
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 NetConnection クラスでは、クライアントとサーバー間の双方向の接続が作成されます。クライアントには <ph class="- topic/ph ">Flash Player または AIR</ph> アプリケーションを使用できます。サーバーには、Web サーバー、Flash Media Server、Flash Remoting を実行しているアプリケーションサーバーまたは <xref href="http://labs.adobe.com/technologies/stratus/" scope="external" class="- topic/xref ">Adobe Stratus</xref> サービスを使用できます。<codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> を呼び出して、接続を確立します。NetStream クラスを使用して、メディアおよびデータのストリームを接続に送信します。
 
 <p class="- topic/p ">コンテンツとデータを Flash Player および AIR にロードする際のセキュリティ情報については、以下を参照してください。</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">コンテンツとデータを Web サーバーまたはローカルから Flash Player にロードする場合は、「<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">Flash Player Developer Center: Security</xref>」を参照してください。</li><li class="- topic/li ">コンテンツとデータを Flash Media Server から Flash Player および AIR にロードする場合は、<xref href="http://www.adobe.com/support/flashmediaserver" scope="external" class="- topic/xref ">Flash Media Server のドキュメント</xref>を参照してください。</li><li class="- topic/li ">コンテンツとデータを AIR にロードする場合は、「<xref href="http://www.adobe.com/devnet/air/" scope="external" class="- topic/xref ">Adobe AIR Developer Center</xref>」を参照してください。</li></ul>
 
 <p class="- topic/p ">
 このクラスのコールバックメソッドを記述するには、クラスを拡張してサブクラスでコールバックメソッドを定義するか、<codeph class="+ topic/ph pr-d/codeph ">client</codeph> プロパティをオブジェクトに割り当てて、そのオブジェクトでコールバックメソッドを定義します。</p>
 
 </apiDesc><example conref="examples\NetConnectionExample.as" class="- topic/example "> 次の例では、Video オブジェクトを NetConnection クラスおよび NetStream クラスと共に使用して、FLV ファイルをロードして再生します。 
 <p class="- topic/p ">この例では、Video オブジェクトと NetStream オブジェクトを作成し、<codeph class="+ topic/ph pr-d/codeph ">Video.attachNetStream()</codeph> メソッドと <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> メソッドを呼び出すコードがハンドラー関数に配置されます。ハンドラーは、NetConnection オブジェクトとの接続が成功した場合にのみ呼び出されます。つまり、<codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> イベントが返す <codeph class="+ topic/ph pr-d/codeph ">info</codeph> オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティが成功を示しているときです。接続に成功するまで待ってから、<codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> を呼び出すことをお勧めします。 </p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.events.NetStatusEvent;
    import flash.events.SecurityErrorEvent;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;
    import flash.events.Event;

    public class NetConnectionExample extends Sprite {
        private var videoURL:String = "http://www.helpexamples.com/flash/video/cuepoints.flv";
        private var connection:NetConnection;
        private var stream:NetStream;
        private var video:Video = new Video();        

        public function NetConnectionExample() {
            connection = new NetConnection();
            connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            connection.connect(null);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Stream not found: " + videoURL);
                    break;
            }
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function connectStream():void {
            var stream:NetStream = new NetStream(connection);
            stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            stream.client = new CustomClient();
            video.attachNetStream(stream);
            stream.play(videoURL);
            addChild(video);
        }
    }
}

class CustomClient {
    public function onMetaData(info:Object):void {
        trace("metadata: duration=" + info.duration + " width=" + info.width + " height=" + info.height + " framerate=" + info.framerate);
    }
    public function onCuePoint(info:Object):void {
        trace("cuepoint: time=" + info.time + " name=" + info.name + " type=" + info.type);
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/client" class="- topic/link "><linktext class="- topic/linktext ">client</linktext></link><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">NetStream</linktext></link><link href="flash.net.xml#NetConnection/connect()" class="- topic/link "><linktext class="- topic/linktext ">connect()</linktext></link><link href="flash.net.xml#Responder" class="- topic/link "><linktext class="- topic/linktext ">flash.net.Responder</linktext></link></related-links><adobeApiEvent id="flash.net:NetConnection_flash.events.NetStatusEvent.NET_STATUS_netStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">netStatus</apiName><shortdesc class="- topic/shortdesc ">
 NetConnection オブジェクトが、そのステータスまたはエラーの状況をレポートするときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.NetStatusEvent.NET_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.NetStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 NetConnection オブジェクトが、そのステータスまたはエラーの状況をレポートするときに送出されます。<codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> イベントには <codeph class="+ topic/ph pr-d/codeph ">info</codeph> プロパティが含まれます。このプロパティは、接続試行が成功したかどうかなど、イベントに関する特定の情報を含む情報オブジェクトです。
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.events.xml#NetStatusEvent/info" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetConnection_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><shortdesc class="- topic/shortdesc ">
 NetConnection.call() の呼び出しによって呼び出し元のセキュリティサンドボックスの外部にあるサーバーに接続しようとすると送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 NetConnection.call() の呼び出しによって呼び出し元のセキュリティサンドボックスの外部にあるサーバーに接続しようとすると送出されます。
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/call()" class="- topic/link "><linktext class="- topic/linktext ">NetConnection.call()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetConnection_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 入出力エラーが発生してネットワーク処理が失敗したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 入出力エラーが発生してネットワーク処理が失敗したときに送出されます。
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:NetConnection_flash.events.AsyncErrorEvent.ASYNC_ERROR_asyncError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">asyncError</apiName><shortdesc class="- topic/shortdesc ">
 非同期形式で、つまりネイティブ非同期コードから例外がスローされると送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.AsyncErrorEvent.ASYNC_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.AsyncErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 非同期形式で、つまりネイティブ非同期コードから例外がスローされると送出されます。
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.net:NetConnection:NetConnection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">NetConnection</apiName><shortdesc class="- topic/shortdesc ">
     NetConnection オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample>See the example for <code>connect()</code>.
     
     </oldexample></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     NetConnection オブジェクトを作成します。<codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> メソッドを呼び出して、接続を作成します。
     
     <p class="- topic/p ">アプリケーションが Flash Player 9 以前にリリースされたサーバーと通信する必要がある場合は、NetConnection オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> プロパティを設定します。</p>
     
     <p class="- topic/p ">次のコードでは、NetConnection オブジェクトを作成します。</p>
     
     <pre xml:space="preserve" class="- topic/pre ">
     var nc:NetConnection = new NetConnection();
     </pre>
     
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/connect()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.connect()</linktext></link><link href="flash.net.xml#NetConnection/objectEncoding" class="- topic/link "><linktext class="- topic/linktext ">objectEncoding</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:NetConnection:addHeader" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addHeader</apiName><shortdesc class="- topic/shortdesc ">
     コンテキストヘッダーを AMF（Action Message Format）パケット構造に追加します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>IMD: This method can be used in the client Flash Player for Flash Remoting
     and Flex apps. It is also a server side method used by Flash Media Server apps.
     
     
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">operation</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ヘッダーとヘッダーに関連付けられている ActionScript オブジェクトデータを指定します。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">mustUnderstand</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> 値は、サーバーがこのヘッダーに対応しており、次のヘッダーまたはメッセージを処理する前に、サーバーでヘッダーを処理する必要があることを示します。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">param</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">任意の ActionScript オブジェクトです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     コンテキストヘッダーを AMF（Action Message Format）パケット構造に追加します。このヘッダーは、将来のすべての AMF パケットと共に送信されます。同じ名前を使用して <codeph class="+ topic/ph pr-d/codeph ">NetConnection.addHeader()</codeph> を呼び出すと、既存のヘッダーが新しいヘッダーに置き換えられます。新しいヘッダーは、NetConnection オブジェクトのある間存在し続けます。ヘッダーの名前を使用して <codeph class="+ topic/ph pr-d/codeph ">NetConnection.addHeader()</codeph> を呼び出し、未定義のオブジェクトを削除して、ヘッダーを削除できます。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:NetConnection:call" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">call</apiName><shortdesc class="- topic/shortdesc ">
     Flash Media Server 上または Flash Remoting を実行しているアプリケーションサーバー上のコマンドまたはメソッドを呼び出します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">command</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">[オブジェクトのパス/]method</codeph> という形式で指定されたメソッドです。例えば、<codeph class="+ topic/ph pr-d/codeph ">someObject/doSomething</codeph> コマンドは、<codeph class="+ topic/ph pr-d/codeph ">clientObject.someObject.doSomething()</codeph> メソッドを、省略可能なすべての <codeph class="+ topic/ph pr-d/codeph ">... arguments</codeph> パラメーターと共に呼び出すようにリモートサーバーに対して指定します。オブジェクトのパスが見つからない場合は、リモートサーバーで <codeph class="+ topic/ph pr-d/codeph ">clientObject.doSomething()</codeph> が呼び出されます。
     <p class="- topic/p ">
     Flash Media Server では、<codeph class="+ topic/ph pr-d/codeph ">command</codeph> は、アプリケーションのサーバーサイドスクリプトに定義されている関数の名前です。サーバーサイドスクリプトがアプリケーションディレクトリのルートレベルに配置されている場合、<codeph class="+ topic/ph pr-d/codeph ">command</codeph> の前にオブジェクトパスを付ける必要はありません。
     </p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">サーバーからの戻り値を処理するために使用される、省略可能なオブジェクトです。Responder オブジェクトには、返される結果を処理するための 2 つのメソッド <codeph class="+ topic/ph pr-d/codeph ">result</codeph> および <codeph class="+ topic/ph pr-d/codeph ">status</codeph> が定義されています。結果としてエラーが返された場合は <codeph class="+ topic/ph pr-d/codeph ">status</codeph> が呼び出され、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">result</codeph> が呼び出されます。NetConnection オブジェクトが接続状態に関連したエラーに対処するものであるのに対して、Responder オブジェクトは個々の操作に関連したエラーを処理することができます。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">arguments</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">省略可能なパラメーターです。別の ActionScript オブジェクトへの参照を含む、ActionScript の任意の型を取ることができます。メソッドがリモートアプリケーションサーバーで実行されると、これらのパラメーターは <codeph class="+ topic/ph pr-d/codeph ">command</codeph> パラメーターで指定されたメソッドに渡されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Flash Media Server 上または Flash Remoting を実行しているアプリケーションサーバー上のコマンドまたはメソッドを呼び出します。<codeph class="+ topic/ph pr-d/codeph ">NetConnection.call()</codeph> を呼び出す前に、<codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> を呼び出してサーバーに接続する必要があります。このメソッドに渡すには、サーバーサイド関数を作成する必要があります。
     
     <p class="- topic/p ">一般的な予約ポートには接続できません。遮断されたポートの詳しいリストについては、『ActionScript 3.0 開発ガイド<i class="+ topic/ph hi-d/i "/>』の「ネットワーク API の制限」を参照してください。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Responder" class="- topic/link "><linktext class="- topic/linktext ">flash.net.Responder</linktext></link></related-links><adobeApiEvent id="flash.net:NetConnection:call_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">呼び出し元のセキュリティサンドボックスの外部にあるサーバーとの通信を試行する呼び出しです。サーバーでポリシーファイルを使用することにより、この問題を回避できます。
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">呼び出し元のセキュリティサンドボックスの外部にあるサーバーとの通信を試行する呼び出しです。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:NetConnection:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     ローカルで開始した接続またはサーバーへの接続を閉じ、NetConnection.Connect.Closed を code プロパティとして、netStatus イベントを送出します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>server-specific: Documented this method with server-specific info in span tags. The
     info is relevant for Flex servers, as well as Flash Media Server.
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ローカルで開始した接続またはサーバーへの接続を閉じ、<codeph class="+ topic/ph pr-d/codeph ">NetConnection.Connect.Closed</codeph> を <codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティとして、<codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> イベントを送出します。
     
     <p class="- topic/p ">
     このメソッドは、接続上で実行されているすべての NetStream オブジェクトを切断します。キューに未送信のデータはすべて破棄されます。（接続を閉じずにローカルまたはサーバーストリームを終了するには、<codeph class="+ topic/ph pr-d/codeph ">NetStream.close()</codeph> を使用します。）接続を閉じて新しい接続を作成する場合は、新しい NetConnection オブジェクトを呼び出し、<codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> メソッドをもう一度呼び出す必要があります。
     </p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">close()</codeph> メソッドは、この接続上で実行されているすべてのリモート共有オブジェクトも切断します。ただし、再接続するために共有オブジェクトを再作成する必要はありません。<codeph class="+ topic/ph pr-d/codeph ">SharedObject.connect()</codeph> を呼び出すだけで、共有オブジェクトへの接続を再確立できます。また、共有オブジェクトへの接続が再確立されると、<codeph class="+ topic/ph pr-d/codeph ">NetConnection.close()</codeph> を発行したときにキュー内にあった共有オブジェクトのデータがすべて送信されます。</p>
     
     <p class="- topic/p ">
     Flash Media Server では、クライアントからサーバーへの接続が不要になったときは <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> を呼び出すことをお勧めします。<codeph class="+ topic/ph pr-d/codeph ">close()</codeph> を呼び出すと、使用されていない接続が最も短時間でクリーンアップされます。予備の手段として、アイドル状態の接続を自動的に閉じるようにサーバーを設定できます。詳細については、<i class="+ topic/ph hi-d/i "><xref href="http://www.adobe.com/support/documentation" scope="external" class="- topic/xref ">Flash Media Server の設定と管理のガイド</xref></i>を参照してください。
     </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">NetStream</linktext></link><link href="flash.events.xml#NetStatusEvent/info" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetConnection:connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><shortdesc class="- topic/shortdesc ">
     Flash Media Server 上のアプリケーションまたは Flash Remoting への双方向の接続を作成するか、RTMFP ピアーツアーピアーグループ通信用に双方向のネットワークエンドポイントを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetConnection.connect, connect
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">command</codeph> パラメーターに渡された URI は適切にフォーマットされていません。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">接続に失敗しました。これは、<codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> を <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> イベントハンドラー内から呼び出すと起こることがあります。この呼び出しは許可されていません。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Local-with-filesystem SWF ファイルはインターネットと通信できません。この問題は、SWF ファイルを local-with-networking または trusted として分類し直すことで回避できます。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一般的な予約ポートには接続できません。遮断されたポートの詳しいリストについては、『ActionScript 3.0 開発ガイド<i class="+ topic/ph hi-d/i "/>』の「ネットワーク API の制限」を参照してください。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">command</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">以下の値のいずれかを <codeph class="+ topic/ph pr-d/codeph ">command</codeph> パラメーターに使用します。
     <ul class="- topic/ul "><li class="- topic/li ">ビデオおよび mp3 ファイルをローカルのファイルシステムまたは Web サーバーから再生するには、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> を渡します。</li><li class="- topic/li ">Flash Remoting を実行しているアプリケーションサーバーに接続するには、<codeph class="+ topic/ph pr-d/codeph ">http</codeph> プロトコルを使用している URL を渡します。</li><li class="- topic/li ">（Flash Player 10.1 または AIR 2 以降） RTMFP IP マルチキャスト通信用にサーバーレスネットワークエンドポイントを作成するには、ストリング「<codeph class="+ topic/ph pr-d/codeph ">rtmfp:</codeph>」を渡します。この接続タイプを使用して、サーバーを使用せずに発行者から IP マルチキャストストリームを受信します。また、この接続タイプを使用して IP マルチキャストを使用し、同じローカルエリアネットワーク（LAN）上でピアーを検出することもできます。</li><p class="- topic/p ">この接続タイプには次の制限があります。</p><p class="- topic/p ">同じ LAN 上のピアーのみが相互に検出できます。</p><p class="- topic/p ">Flash Player は、IP マルチキャストを使用してストリームを受信できますが、送信することはできません。</p><p class="- topic/p ">Flash Player および AIR はピアーツーピアーグループでストリームを送受信できますが、ピアーは、IP マルチキャストを使用して同じ LAN 上で検出されなければなりません。</p><p class="- topic/p ">このテクニックは 1 対 1 の通信には使用できません。</p><p class="- topic/p "/><li class="- topic/li ">Flash Media Server に接続するには、サーバー上のアプリケーションの URI を渡します。次のシンタックスを使用します。角括弧内のアイテムは省略できます。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">protocol:[//host][:port]/appname[/instanceName]</codeph></p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">rtmp</codeph>、<codeph class="+ topic/ph pr-d/codeph ">rtmpe</codeph>、<codeph class="+ topic/ph pr-d/codeph ">rtmps</codeph>、<codeph class="+ topic/ph pr-d/codeph ">rtmpt</codeph>、<codeph class="+ topic/ph pr-d/codeph ">rtmpte</codeph>、または <codeph class="+ topic/ph pr-d/codeph ">rtmfp</codeph> のいずれかのプロトコルを使用します。接続に成功した場合、<codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> イベントが返されます。このときの <codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティは <codeph class="+ topic/ph pr-d/codeph ">NetConnection.Connect.Success</codeph> です。すべてのイベントコードのリストの <codeph class="+ topic/ph pr-d/codeph ">NetStatusEvent.info</codeph> プロパティを参照してください。このイベントコードは <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> の呼び出しに応答して返されます。 </p>
     
     <p class="- topic/p ">サーバーがインストールされているホストからファイルが提供されている場合は、<codeph class="+ topic/ph pr-d/codeph ">//host</codeph> パラメーターを省略できます。<codeph class="+ topic/ph pr-d/codeph ">/instanceName</codeph> パラメーターを省略すると、<ph class="- topic/ph ">Flash Player</ph> または AIR はアプリケーションのデフォルトインスタンスに接続します。</p>
     
     <p class="- topic/p ">（Flash Player 10.1 または AIR 2 以降）ピアーツーピアーアプリケーションを作成するには、<codeph class="+ topic/ph pr-d/codeph ">rtmfp</codeph> プロトコルを使用します。</p>
     
     </li></ul>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">arguments</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">command</codeph> で指定されたアプリケーションに渡された任意の型のパラメーターです。このパラメーターはオプションです。Flash Media Server では、アプリケーションのサーバーサイドコードの <codeph class="+ topic/ph pr-d/codeph ">application.onConnect()</codeph> イベントハンドラーに追加の引数が渡されます。<codeph class="+ topic/ph pr-d/codeph ">onConnect()</codeph> に引数を定義して処理する必要があります。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Flash Media Server 上のアプリケーションまたは Flash Remoting への双方向の接続を作成するか、RTMFP ピアーツアーピアーグループ通信用に双方向のネットワークエンドポイントを作成します。ステータスまたはエラーの状況をレポートするために、<codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> によって <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> イベントが送出されます。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> を呼び出して、次の操作を行います。</p>
     
     <ul class="- topic/ul "><li class="- topic/li ">「null」を渡して、ローカルファイルシステムまたは Web サーバーからビデオファイルと mp3 ファイルを再生します。</li><li class="- topic/li ">「http」 URL を渡して、Flash Remoting を実行しているアプリケーションサーバーに接続します。NetServices クラスを使用して、NetConnection オブジェクトでアプリケーションサーバーの関数を呼び出し、アプリケーションサーバーから結果を取得します。詳細については、<xref href="http://www.adobe.com/support/documentation" scope="external" class="- topic/xref ">Flash Remoting のマニュアル</xref>を参照してください。 </li><li class="- topic/li ">「rtmp/e/s」 URL を渡して、Flash Media Server アプリケーションに接続します。</li><li class="- topic/li ">「rtmfp」 URL を渡して、RTMFP クライアント-サーバー通信、ピアーツーピアー通信および IP マルチキャスト通信用に双方向のネットワークエンドポイントを作成します。</li><li class="- topic/li ">ストリング「rtmfp:」を渡して、RTMFP IP マルチキャスト通信用にサーバーレスの双方向ネットワークエンドポイントを作成します。</li></ul>
     
     <p class="- topic/p ">次のセキュリティモデルを考慮してください。</p>
     
     <ul class="- topic/ul "><li class="- topic/li ">デフォルトでは、<ph class="- topic/ph ">Flash Player または</ph> AIR でのサンドボックス間のアクセスは拒否されます。URL ポリシーファイルを使用することで、Web サイトでリソースにアクセスできるようになります。 </li><li class="- topic/li ">アプリケーションで、サーバー上のリソースへのアクセスを拒否できます。Flash Media Server アプリケーションでは、サーバーサイド ActionScript コードを使用してアクセスを拒否します。「<xref href="http://www.adobe.com/go/learn_fms_docs_jp" scope="external" class="- topic/xref ">Flash Media Server のリソース</xref>」を参照してください。</li><li class="- topic/li ">呼び出し元ファイルがローカルファイルシステムのサンドボックスに配置されている場合は、<codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> を呼び出すことはできません。</li><li class="- topic/li "> 一般的な予約ポートには接続できません。遮断されたポートの詳しいリストについては、『ActionScript 3.0 開発ガイド<i class="+ topic/ph hi-d/i "/>』の「ネットワーク API の制限」を参照してください。</li><li class="- topic/li ">SWF ファイルがこのメソッドを呼び出さないようにするには、<codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> パラメーター（SWF コンテンツを含んでいる HTML ページの <codeph class="+ topic/ph pr-d/codeph ">object</codeph> タグおよび <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> タグのパラメーター）を設定します。</li></ul>
     
     <p class="- topic/p ">ただし、Adobe AIR では、<codeph class="+ topic/ph pr-d/codeph ">アプリケーション</codeph>セキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p>
     
     <p class="- topic/p ">セキュリティについて詳しくは、Adobe Flash Player デベロッパーセンターの「<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external" class="- topic/xref ">Security</xref>」を参照してください。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream</linktext></link><link href="flash.events.xml#NetStatusEvent/info" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info</linktext></link></related-links></apiOperation><apiValue id="flash.net:NetConnection:client:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">client</apiName><shortdesc class="- topic/shortdesc ">
     コールバックメソッドが呼び出されるオブジェクトを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Property documented; needs review.
     
      </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">client</codeph> プロパティは、null 以外のオブジェクトに設定する必要があります。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     コールバックメソッドが呼び出されるオブジェクトを示します。デフォルト値はこの NetConnection インスタンスです。<codeph class="+ topic/ph pr-d/codeph ">client</codeph> プロパティを別のオブジェクトに設定すると、コールバックメソッドはそのオブジェクトで呼び出されます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:connectedProxyType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">connectedProxyType</apiName><shortdesc class="- topic/shortdesc ">
     Flash Media Server への正常な接続を作成するために使用するプロキシタイプ。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>This property is used in Breeze 5.5.
     
      </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">NetConnection インスタンスが接続されていないときに、このプロパティにアクセスしようとしました。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Flash Media Server への正常な接続を作成するために使用するプロキシタイプ。指定できる値は、<codeph class="+ topic/ph pr-d/codeph ">"none"</codeph>、<codeph class="+ topic/ph pr-d/codeph ">"HTTP"</codeph>、<codeph class="+ topic/ph pr-d/codeph ">"HTTPS"</codeph>、または <codeph class="+ topic/ph pr-d/codeph ">"CONNECT"</codeph> です。
     
     <p class="- topic/p ">トンネル接続ではない場合、またはネイティブ SSL 接続である場合、値は <codeph class="+ topic/ph pr-d/codeph ">"none"</codeph> です。</p>
     
     <p class="- topic/p ">HTTP 経由のトンネル接続である場合、値は <codeph class="+ topic/ph pr-d/codeph ">"HTTP"</codeph> です。</p>
     
     <p class="- topic/p ">HTTPS 経由のトンネル接続である場合、値は"<codeph class="+ topic/ph pr-d/codeph ">"HTTPS"</codeph> です</p>
     
     <p class="- topic/p ">プロキシサーバーを通じて CONNECT メソッドを使用するトンネル接続の場合、値は <codeph class="+ topic/ph pr-d/codeph ">"CONNECT"</codeph> です。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:connected:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">connected</apiName><shortdesc class="- topic/shortdesc ">
     永続的な RTMP 接続を介して（true）、またはそれ以外の方法で（false）サーバーに接続されていることを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     永続的な RTMP 接続を介して（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）、またはそれ以外の方法で（<codeph class="+ topic/ph pr-d/codeph ">false</codeph>）サーバーに接続されていることを示します。HTTP を介して接続された場合、このプロパティは <codeph class="+ topic/ph pr-d/codeph ">false</codeph> です。ただし、アプリケーションサーバー上の Flash Remoting サービスに接続した場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph> です。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:defaultObjectEncoding:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">defaultObjectEncoding</apiName><shortdesc class="- topic/shortdesc ">
     NetConnection オブジェクトのデフォルトオブジェクトのエンコードです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     NetConnection オブジェクトのデフォルトオブジェクトのエンコードです。バイナリデータにオブジェクトを書き込むかバイナリデータからオブジェクトを読み取るときに、データの直列化に使用される AMF（Action Message Format）のバージョンが <codeph class="+ topic/ph pr-d/codeph ">defaultObjectEncoding</codeph> プロパティに示されます。これらは、ActionScript 3.0 フォーマット（<codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF3</codeph>）または ActionScript 1.0 および ActionScript 2.0 フォーマット（<codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF0</codeph>）です。
     
     <p class="- topic/p ">デフォルト値は <codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF3</codeph> です。<codeph class="+ topic/ph pr-d/codeph ">NetConnection.defaultObjectEncoding</codeph> を変更しても、既存の NetConnection インスタンスには影響せず、それ以降に作成されたインスタンスにのみ影響します。</p>
     
     <p class="- topic/p ">オブジェクトのエンコードを（アプリケーション全体に対してではなく）個別に設定するには、NetConnection オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> プロパティを設定します。</p>
     
     <p class="- topic/p ">詳細については、<codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> プロパティの説明を参照してください。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/objectEncoding" class="- topic/link "><linktext class="- topic/linktext ">NetConnection.objectEncoding</linktext></link><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">flash.net.ObjectEncoding</linktext></link></related-links></apiValue><apiValue id="flash.net:NetConnection:farID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">farID</apiName><shortdesc class="- topic/shortdesc ">
     この Flash Player インスタンスまたは Adobe AIR インスタンスが接続されている Flash Media Server インスタンスの識別子。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     この Flash Player インスタンスまたは Adobe AIR インスタンスが接続されている Flash Media Server インスタンスの識別子。このプロパティは、RTMFP 接続にのみ意味があります。このプロパティの値は、RTMFP 接続が確立された後でのみ利用できます。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/nearID" class="- topic/link "><linktext class="- topic/linktext ">nearID</linktext></link></related-links></apiValue><apiValue id="flash.net:NetConnection:farNonce:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">farNonce</apiName><shortdesc class="- topic/shortdesc ">
     実際には Flash Media Server によって選択される値で、この接続に一意です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     実際には Flash Media Server によって選択される値で、この接続に一意です。この値は、サーバー側では <codeph class="+ topic/ph pr-d/codeph ">client.nearNonce</codeph> 値となります。この値は、RTMFP、RTMPE および RTMPTE 接続についてのみ定義されます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:httpIdleTimeout:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">httpIdleTimeout</apiName><shortdesc class="- topic/shortdesc "> 
        HTTP 応答の待機時間（ミリ秒単位）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">HTTP 応答の待機時間（ミリ秒単位）です。
        </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
        HTTP 応答の待機時間（ミリ秒単位）です。デフォルト値は 0 です。
	
	<ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">httpIdleTimeout</codeph> の値は <codeph class="+ topic/ph pr-d/codeph ">Number</codeph> です。</li><li class="- topic/li ">HTTP 接続を使用する場合、正の値は非アクティブな接続を保持する時間をミリ秒単位で示します。</li><li class="- topic/li ">ゼロの値は、プラットフォームで指定されているデフォルトのネットワーキングアイドルタイムアウト値を使用することを示します。</li><li class="- topic/li ">負の値を指定すると、<codeph class="+ topic/ph pr-d/codeph ">RangeError</codeph> になります。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">httpIdleTimeout</codeph> で指定した値を超過すると、<codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> イベントが送出されます。</li><li class="- topic/li ">このプロパティは、HTTP 接続と共に作成された <codeph class="+ topic/ph pr-d/codeph ">NetConnection</codeph> オブジェクトにのみ影響します。RTMP、RTMFP、または他の HTTP チャンネルと共に作成された <codeph class="+ topic/ph pr-d/codeph ">NetConnection</codeph> オブジェクトは、このプロパティの影響を受けません。</li></ul>
	<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	//Set the timeout to 5 seconds
	connection = new NetConnection();
	connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
	connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
	connection.httpIdleTimeout = 5000;
	</codeblock>
	
	Linux ベースのシステムでは、<codeph class="+ topic/ph pr-d/codeph ">NetConnection</codeph> を使用したタイムアウトは <codeph class="+ topic/ph pr-d/codeph ">httpIdleTimeout</codeph> 値を使用したタイムアウトに比較して長くかかることがあります。
	
        </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:maxPeerConnections:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">maxPeerConnections</apiName><shortdesc class="- topic/shortdesc ">
     Flash Player または Adobe AIR のこのインスタンスで可能となるピアーの受信接続と送信接続の総数。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Flash Player または Adobe AIR のこのインスタンスで可能となるピアーの受信接続と送信接続の総数。デフォルト値は 8 です。
     <p class="- topic/p ">この値は、発行者接続とサブスクライバ接続で違いはありません。ピアー接続が存在するときにこの値を減らす場合は、その新しい値は新しい受信接続だけに影響します。既存の接続は中断されません。</p>
     
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:nearID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">nearID</apiName><shortdesc class="- topic/shortdesc ">
     この NetConnection インスタンスに対する Flash Player インスタンスまたは Adobe AIR インスタンスの識別子。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     この NetConnection インスタンスに対する Flash Player インスタンスまたは Adobe AIR インスタンスの識別子。このプロパティは、RTMFP 接続にのみ意味があります。
     
     <p class="- topic/p ">すべての NetConnection インスタンスは一意の <codeph class="+ topic/ph pr-d/codeph ">nearID</codeph> プロパティを持ちます。Flash Player インスタンス、Adobe AIR インスタンスまたは NetConnection インスタンスで同じ識別子を持つものはありません。</p>
     
     <p class="- topic/p ">他の Flash Player インスタンスまたは Adobe AIR インスタンスは、このクライアントとの新しい NetStream 接続の <codeph class="+ topic/ph pr-d/codeph ">peerID</codeph> としてこの識別子を使用します。次に、この識別子は、このインスタンスに接続されているピアー NetStream の <codeph class="+ topic/ph pr-d/codeph ">farID</codeph> となります。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/farID" class="- topic/link "><linktext class="- topic/linktext ">farID</linktext></link></related-links></apiValue><apiValue id="flash.net:NetConnection:nearNonce:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">nearNonce</apiName><shortdesc class="- topic/shortdesc ">
     実際にはこの Flash Player インスタンスまたは Adobe AIR インスタンスによって選択される値で、この接続に一意です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     実際にはこの Flash Player インスタンスまたは Adobe AIR インスタンスによって選択される値で、この接続に一意です。この値は、サーバー側では <codeph class="+ topic/ph pr-d/codeph ">client.farNonce</codeph> 値となります。この値は、RTMFP、RTMPE および RTMPTE 接続についてのみ定義されます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:objectEncoding:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">objectEncoding</apiName><shortdesc class="- topic/shortdesc ">
     この NetConnection インスタンスのオブジェクトエンコードです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">NetConnection インスタンスが接続されているときに、<codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> プロパティの値を設定しようとしました。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ReferenceError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ReferenceError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このプロパティに、<codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF0</codeph> または <codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF3</codeph> 以外の値が設定されました。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     この NetConnection インスタンスのオブジェクトエンコードです。
     
     <p class="- topic/p ">
     バイナリデータにオブジェクトを書き込むかバイナリデータからオブジェクトを読み取るときに、データの直列化に使用される AMF（Action Message Format）のバージョンが <codeph class="+ topic/ph pr-d/codeph ">defaultObjectEncoding</codeph> プロパティに示されます。これらは、ActionScript 3.0 形式（<codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF3</codeph>）または ActionScript 1.0 および ActionScript 2.0 形式（<codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF0</codeph>）です。<codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> プロパティを設定することにより、NetConnection インスタンスの AMF のバージョンを設定します。
     </p>
     
     <p class="- topic/p ">アプリケーションが Flash Player 9 以前にリリースされたサーバーと通信する必要がある場合は、このプロパティを理解することが重要です。次の 3 つのシナリオが可能です。
     </p>
     
     <ul class="- topic/ul "><li class="- topic/li ">AMF3 をサポートするサーバー（例えば、Flex Data Services 2 または Flash Media Server 3）に接続します。<codeph class="+ topic/ph pr-d/codeph ">defaultObjectEncoding</codeph> のデフォルト値は <codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF3</codeph> です。この ファイルで作成された NetConnection インスタンスはすべて AMF3 直列化を使用するので、<codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> プロパティを設定する必要はありません。</li><li class="- topic/li ">AMF3 をサポートしないサーバー（例えば、Flash Media Server 2）に接続します。このシナリオでは、静的な <codeph class="+ topic/ph pr-d/codeph ">NetConnection.defaultObjectEncoding</codeph> プロパティを <codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF0</codeph> に設定します。この SWF ファイルに作成されるすべての NetConnection インスタンスでは、AMF0 直列化を使用します。<codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> プロパティを設定する必要はありません。 </li><li class="- topic/li ">異なるエンコーディングバージョンを使用する複数のサーバーに接続する場合。<codeph class="+ topic/ph pr-d/codeph ">defaultObjectEncoding</codeph> を使用せずに、各接続の <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> プロパティを使用して、接続ごとにオブジェクトエンコーディングを設定します。このプロパティを <codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF0</codeph> に設定すると、AMF0 エンコーディングを使用するサーバー（Flash Media Server 2 など）に接続します。<codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF3</codeph> に設定すると、AMF3 エンコーディングを使用するサーバー（Flex Data Services 2 など）に接続します。</li></ul>
     
     <p class="- topic/p ">NetConnection インスタンスが接続されたら、その <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> プロパティは読み取り専用になります。</p>
     
     <p class="- topic/p ">サーバーへの接続に誤ったエンコーディングを使用した場合は、NetConnection オブジェクトにより <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> イベントが送出されます。 <codeph class="+ topic/ph pr-d/codeph ">NetStatusEvent.info</codeph> プロパティには、<codeph class="+ topic/ph pr-d/codeph ">code</codeph> プロパティ値 <codeph class="+ topic/ph pr-d/codeph ">NetConnection.Connect.Failed</codeph> を持つ情報オブジェクトとオブジェクトエンコードが正しくないことを示す説明が含まれています。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/defaultObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">defaultObjectEncoding</linktext></link><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">flash.net.ObjectEncoding</linktext></link></related-links></apiValue><apiValue id="flash.net:NetConnection:protocol:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">protocol</apiName><shortdesc class="- topic/shortdesc ">
     接続の確立にプロトコルが使用されました。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">NetConnection インスタンスが接続されていないときに、このプロパティにアクセスしようとしました。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     接続の確立にプロトコルが使用されました。Flash Media Server を使用するときは、このプロパティが適切です。有効な値は次のとおりです。
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"rtmp"</codeph>：リアルタイムメッセージングプロトコル（RTMP）</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"rtmpe"</codeph>：暗号化 RTMP</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"rtmpt"</codeph>：HTTP トンネリング RTMP</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"rtmpte"</codeph>：HTTP トンネリング暗号化 RTMP</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"rtmps"</codeph>： HTTPS ベースの RTMP</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"rtmfp"</codeph>：リアルタイムメディアフロープロトコル（RTMFP）</li></ul>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:proxyType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">proxyType</apiName><shortdesc class="- topic/shortdesc ">
     Flash Media Server への最初の接続に失敗した場合に実行する代替手段を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>This property is used in Breeze 5.5. In the Breeze Add-in, the default value is <code>"best"</code>; if this value
     is not changed, native SSL sockets are used by default, and a fallback
     to other methods is used if necessary.
     
      </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Flash Media Server への最初の接続に失敗した場合に実行する代替手段を指定します。<codeph class="+ topic/ph pr-d/codeph ">proxyType</codeph> プロパティを設定してから <codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> メソッドを呼び出します。
     
     <p class="- topic/p ">有効な値は、<codeph class="+ topic/ph pr-d/codeph ">"none"</codeph>、<codeph class="+ topic/ph pr-d/codeph ">"HTTP"</codeph>、<codeph class="+ topic/ph pr-d/codeph ">"CONNECT"</codeph> および <codeph class="+ topic/ph pr-d/codeph ">"best"</codeph> です。デフォルト値は <codeph class="+ topic/ph pr-d/codeph ">"non "</codeph> です </p>
     
     <p class="- topic/p ">ネイティブ SSL を使用するには、プロパティに <codeph class="+ topic/ph pr-d/codeph ">"best"</codeph> を設定します。プレーヤーが、デフォルトの 443 ポート経由または指定した他のポート経由でサーバーへの直接接続を作成できず、プロキシサーバーが所定の位置にある場合、プレーヤーは CONNECT メソッドの使用を試行します。この試行に失敗した場合、プレーヤーは HTTPS 経由でトンネル接続します。
     </p>
     
     <p class="- topic/p ">プロパティが <codeph class="+ topic/ph pr-d/codeph ">"HTTP"</codeph> に設定されていて、直接接続に失敗した場合は、HTTP トンネリングが使用されます。プロパティが <codeph class="+ topic/ph pr-d/codeph ">"CONNECT"</codeph> に設定されており、直接接続に失敗した場合は、トンネリングの <codeph class="+ topic/ph pr-d/codeph ">CONNECT</codeph> メソッドが使用されます。これに失敗すると、接続は HTTP トンネリングにフォールバックされなくなります。</p>
     
     <p class="- topic/p ">このプロパティは RTMP、RTMPS、または RTMPTを使用している場合にのみ適用できます。<codeph class="+ topic/ph pr-d/codeph ">CONNECT</codeph> メソッドは、プロキシサーバー経由でネットワークに接続しているユーザーにのみ適用できます。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:unconnectedPeerStreams:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">unconnectedPeerStreams</apiName><shortdesc class="- topic/shortdesc ">
     
     パブリッシュする NetStream オブジェクトに関連付けられていない、すべてのピアーサブスクライバ NetStream オブジェクトを保持するオブジェクトです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     パブリッシュする NetStream オブジェクトに関連付けられていない、すべてのピアーサブスクライバ NetStream オブジェクトを保持するオブジェクトです。パブリッシュする NetStream オブジェクトに関連付けられたサブスクライバ NetStream オブジェクトは、<codeph class="+ topic/ph pr-d/codeph ">NetStream.peerStreams</codeph> 配列にあります。
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/peerStreams" class="- topic/link "><linktext class="- topic/linktext ">NetStream.peerStreams</linktext></link></related-links></apiValue><apiValue id="flash.net:NetConnection:uri:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">uri</apiName><shortdesc class="- topic/shortdesc ">
     NetConnection.connect() メソッドに渡された URI。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>server-specific: Documented this method with server-specific info in span tags. The
     info is relevant for Flex servers, as well as Flash Media Server.
     </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     NetConnection.connect() メソッドに渡された URI。<codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> が呼び出されていない場合、または URI が渡されていない場合、このプロパティは <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> になります。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:usingTLS:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">usingTLS</apiName><shortdesc class="- topic/shortdesc ">
     HTTPS ではなく、ネイティブ TLS を使用してセキュア接続が確立されたかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">NetConnection インスタンスが接続されていないときに、このプロパティにアクセスしようとしました。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     HTTPS ではなく、ネイティブ TLS を使用してセキュア接続が確立されたかどうかを示します。このプロパティは、NetConnection オブジェクトが接続されている場合にのみ有効です。
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>