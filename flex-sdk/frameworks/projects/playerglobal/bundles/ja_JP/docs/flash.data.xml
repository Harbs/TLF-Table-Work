<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="flash.data" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiPackage/apiPackage "><apiName class="- topic/title reference/title apiRef/apiName ">flash.data</apiName><apiDetail class="- topic/body reference/refbody apiRef/apiDetail "/><apiClassifier languages="" id="flash.data:SQLViewSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLViewSchema</apiName><shortdesc class="- topic/shortdesc ">
 SQLViewSchema インスタンスは、データベースの特定のビューを示す情報を提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.data:SQLTableSchema</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 SQLViewSchema インスタンスは、データベースの特定のビューを示す情報を提供します。このインスタンスには、ビューの名前（<codeph class="+ topic/ph pr-d/codeph ">name</codeph> プロパティ）、ビューの作成に使用された SQL ステートメント（<codeph class="+ topic/ph pr-d/codeph ">sql</codeph> プロパティ）およびビューの列に関する情報（<codeph class="+ topic/ph pr-d/codeph ">columns</codeph> プロパティ）が含まれます。
 
 <p class="- topic/p ">データベースのビュースキーマ情報を取得するには、<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> メソッドを使用してスキーマ情報をロードします。このとき、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> または <codeph class="+ topic/ph pr-d/codeph ">SQLViewSchema</codeph> を <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 引数の値に使用します。結果として得られた SQLSchemaResult インスタンスの <codeph class="+ topic/ph pr-d/codeph ">views</codeph> プロパティには、データベース内のビューを表す SQLViewSchema インスタンスの配列が含まれます。</p>
 
 <p class="- topic/p ">一般に、SQLViewSchema インスタンスは開発者のコードでは直接作成されません。</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLColumnSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema</linktext></link></related-links><apiConstructor id="flash.data:SQLViewSchema:SQLViewSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLViewSchema</apiName><shortdesc class="- topic/shortdesc ">
     SQLViewSchema インスタンスを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">関連付けられたデータベースの名前です。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ビューの名前です。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sql</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ビューの作成に使用された SQL ステートメントです。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">columns</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このビューの列を示す SQLColumnSchema インスタンスの配列です。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     SQLViewSchema インスタンスを作成します。一般に、SQLViewSchema コンストラクターは開発者のコードでは直接呼び出されません。データベースのスキーマ情報を取得するには、<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> メソッドを呼び出します。
     
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="flash.data:SQLColumnSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLColumnSchema</apiName><shortdesc class="- topic/shortdesc ">
 SQLColumnSchema クラスは、データベースのテーブル内の特定の列の特性を示す情報を提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 SQLColumnSchema クラスは、データベースのテーブル内の特定の列の特性を示す情報を提供します。
 
 <p class="- topic/p ">データベースの 1 つまたは複数のテーブルの列スキーマ情報を取得するには、<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> メソッドを使用してスキーマ情報をロードします。このとき、<codeph class="+ topic/ph pr-d/codeph ">true</codeph> を <codeph class="+ topic/ph pr-d/codeph ">includeColumnSchema</codeph> 引数の値として使用します。結果として得られた SQLSchemaResult インスタンスでは、各テーブルとビューの定義に <codeph class="+ topic/ph pr-d/codeph ">columns</codeph> プロパティが含まれます。このプロパティは、テーブルまたはビューの列を示す SQLColumnSchema インスタンスの配列です。</p>
 
 <p class="- topic/p ">一般に、SQLColumnSchema インスタンスは開発者のコードでは直接作成されません。</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLTableSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTableSchema</linktext></link><link href="flash.data.xml#SQLViewSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLViewSchema</linktext></link></related-links><apiConstructor id="flash.data:SQLColumnSchema:SQLColumnSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLColumnSchema</apiName><shortdesc class="- topic/shortdesc ">
     SQLColumnSchema インスタンスを構築します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">列の名前です。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">primaryKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">この列が、関連付けられたテーブルの主キーの一部かどうかを示します。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">allowNull</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">この列に <codeph class="+ topic/ph pr-d/codeph ">NULL</codeph> 値を含めることができるかどうかを示します。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">autoIncrement</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">この列が、自動インクリメント列かどうかを示します。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">dataType</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">宣言された列の型です。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">defaultCollationType</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">この列に定義されている照合シーケンスです。 この値は、SQLCollationType クラスのいずれかの定数に対応します。
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.BINARY</codeph> は、列が <codeph class="+ topic/ph pr-d/codeph ">BINARY</codeph> 照合シーケンスを使用することを示します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.NO_CASE</codeph> は、列が <codeph class="+ topic/ph pr-d/codeph ">NOCASE</codeph> 照合シーケンスを使用することを示します。この場合、テキストの比較は、大文字と小文字を区別せずに実行されます。</li></ul>
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     SQLColumnSchema インスタンスを構築します。一般に、SQLColumnSchema コンストラクターは開発者のコードでは直接呼び出されません。データベースのスキーマ情報を取得するには、<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> メソッドを呼び出します。
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLCollationType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLCollationType</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLColumnSchema:allowNull:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">allowNull</apiName><shortdesc class="- topic/shortdesc ">
     この列で、NULL 値が許可されているかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     この列で、<codeph class="+ topic/ph pr-d/codeph ">NULL</codeph> 値が許可されているかどうかを示します。 <codeph class="+ topic/ph pr-d/codeph ">NOT NULL</codeph> 制限が宣言されている列では、<codeph class="+ topic/ph pr-d/codeph ">false</codeph> 値が <codeph class="+ topic/ph pr-d/codeph ">allowNull</codeph> プロパティに対して設定されます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:autoIncrement:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">autoIncrement</apiName><shortdesc class="- topic/shortdesc ">
     この列が、自動インクリメント列かどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     この列が、自動インクリメント列かどうかを示します。自動インクリメント列は特殊な型の <codeph class="+ topic/ph pr-d/codeph ">PRIMARY KEY</codeph> 列で、テーブルに新しい行が挿入されると、次の値が整数順で自動的に生成されます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:dataType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dataType</apiName><shortdesc class="- topic/shortdesc ">
     列のデータ型をストリングとして取得します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     列のデータ型をストリングとして取得します。この値には、テーブルの定義に使用された <codeph class="+ topic/ph pr-d/codeph ">CREATE TABLE</codeph> ステートメントで指定されたデータ型の名前がそのまま使用されます。また、データ型が指定されていない場合は、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> になります。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:defaultCollationType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">defaultCollationType</apiName><shortdesc class="- topic/shortdesc ">
     この列に定義されているデフォルトの照合シーケンスを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     この列に定義されているデフォルトの照合シーケンスを示します。 このプロパティの値は、SQLCollationType クラスのいずれかの定数に対応します。
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.BINARY</codeph> は、列が <codeph class="+ topic/ph pr-d/codeph ">BINARY</codeph> 照合シーケンスを使用することを示します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.NO_CASE</codeph> は、列が <codeph class="+ topic/ph pr-d/codeph ">NOCASE</codeph> 照合シーケンスを使用することを示します。この場合、テキストの比較は、大文字と小文字を区別せずに実行されます。</li></ul>
     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLCollationType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLCollationType</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLColumnSchema:name:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
     列の名前を取得します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     列の名前を取得します。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:primaryKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">primaryKey</apiName><shortdesc class="- topic/shortdesc ">
     この列が、関連付けられているテーブルの主キー列（または複合キーの主キー列の 1 つ）かどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     この列が、関連付けられているテーブルの主キー列（または複合キーの主キー列の 1 つ）かどうかを示します。
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLColumnNameStyle" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLColumnNameStyle</apiName><shortdesc class="- topic/shortdesc ">
 このクラスには、SQLConnection.columnNameStyle プロパティで有効な値を表す定数が含まれます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 このクラスには、<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.columnNameStyle</codeph> プロパティで有効な値を表す定数が含まれます。これらの値は、SQL <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントの結果として返されるオブジェクトで、列名（プロパティ名）の形式を制御する様々なオプションを示します。
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/columnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.columnNameStyle</linktext></link></related-links><apiValue id="flash.data:SQLColumnNameStyle:DEFAULT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DEFAULT</apiName><shortdesc class="- topic/shortdesc ">
     SELECT ステートメントから返される列名が、デフォルトの形式を使用することを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">default</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントから返される列名が、デフォルトの形式を使用することを示します。デフォルトの形式では、列名は <codeph class="+ topic/ph pr-d/codeph ">[table-name|]_[column-name]</codeph> という形式（<codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントに複数のテーブルが含まれる場合）か、<codeph class="+ topic/ph pr-d/codeph ">[column-name]</codeph> という形式（<codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントに単一のテーブルが含まれる場合）になります。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/columnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.columnNameStyle</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLColumnNameStyle:LONG" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LONG</apiName><shortdesc class="- topic/shortdesc ">
     SELECT ステートメントから返される列名が、長い列名の形式を使用することを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">long</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントから返される列名が、長い列名の形式を使用することを示します。この形式では、列名は <codeph class="+ topic/ph pr-d/codeph ">[table-name]_[column-name]</codeph> の形式を使用します。<codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントに含まれているテーブル数によって変化することはありません。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/columnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.columnNameStyle</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLColumnNameStyle:SHORT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SHORT</apiName><shortdesc class="- topic/shortdesc ">
     SELECT ステートメントから返される列名が、短い列名の形式を使用することを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">short</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントから返される列名が、短い列名の形式を使用することを示します。この形式では、列名は <codeph class="+ topic/ph pr-d/codeph ">[column-name]</codeph> の形式を使用します。<codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントに含まれているテーブル数によって変化することはありません。
	 
	 <p class="- topic/p ">結果セットに同じ名前を持つ複数の列が存在する場合、その名前を持つプロパティが 1 つだけが結果オブジェクトに追加されます。そのプロパティに割り当てられる値は、その名前を持つ結果行の最後の列から取得されます。例えば、次のような <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントがあるとします。</p>
	 
	 <pre xml:space="preserve" class="- topic/pre ">
	 SELECT customers.customerId, addresses.customerId
	 FROM customers INNER JOIN addresses
	    ON customers.customerId = addresses.customerId
	 </pre>
	 
	 <p class="- topic/p ">このステートメントが、短い列名の形式で SQLConnection に対して実行された場合、各結果オブジェクトには <codeph class="+ topic/ph pr-d/codeph ">customerId</codeph> という名前のプロパティが含まれます。このプロパティには、<codeph class="+ topic/ph pr-d/codeph ">addresses</codeph> テーブルの <codeph class="+ topic/ph pr-d/codeph ">customerId</codeph> 列から取得した値が含まれます。</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/columnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.columnNameStyle</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLSchema</apiName><shortdesc class="- topic/shortdesc ">
 SQLSchema クラスは、テーブル、ビューおよびインデックスなど、データベースオブジェクトのスキーマ情報の基本クラスです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 SQLSchema クラスは、テーブル、ビューおよびインデックスなど、データベースオブジェクトのスキーマ情報の基本クラスです。
 
 <p class="- topic/p ">データベースのスキーマ情報を取得するには、<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> メソッドを使用してスキーマ情報をロードします。結果として得られた SQLSchemaResult インスタンスには、データベース内のオブジェクトを示すインスタンスの配列が含まれます。</p>
 
 <p class="- topic/p ">一般に、SQLSchema インスタンスは開発者のコードでは直接作成されません。</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link></related-links><apiConstructor id="flash.data:SQLSchema:SQLSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLSchema</apiName><shortdesc class="- topic/shortdesc ">
     SQLSchema インスタンスを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">関連付けられたデータベースの名前です。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データベースオブジェクトの名前です。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sql</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データベースオブジェクトの構築に使用された SQL です。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     SQLSchema インスタンスを作成します。一般に、SQLSchema コンストラクターは開発者のコードでは直接呼び出されません。データベースのスキーマ情報を取得するには、<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> メソッドを呼び出します。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.data:SQLSchema:database:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">database</apiName><shortdesc class="- topic/shortdesc ">
     このスキーマオブジェクトが属するデータベースの名前です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このスキーマオブジェクトが属するデータベースの名前です。SQLConnection インスタンスに関連付けられているメインデータベース（SQLConnection インスタンスの <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> メソッドを呼び出して開かれたデータベースファイル）の名前は "main" です。<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.attach()</codeph> メソッドを使用して、この接続にアタッチされた他のデータベースの場合、この値は <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> メソッドの呼び出しで指定された名前になります。
     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/attach()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.attach()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchema:name:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
     このスキーマオブジェクトの名前です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このスキーマオブジェクトの名前です。データベース内の各オブジェクトは、一意の名前を持ちます。名前は、オブジェクトを作成する SQL ステートメントで定義されます（テーブルを作成する <codeph class="+ topic/ph pr-d/codeph ">CREATE TABLE</codeph> ステートメントなど）。
	 
	 <p class="- topic/p ">例えば、次の SQL ステートメントを使用してデータベースインデックスを作成した場合、そのインデックスのスキーマの <codeph class="+ topic/ph pr-d/codeph ">name</codeph> プロパティの値は <codeph class="+ topic/ph pr-d/codeph ">"customer_index"</codeph> になります。</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">CREATE INDEX customer_index ON customers (id)</codeblock>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLSchema:sql:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">sql</apiName><shortdesc class="- topic/shortdesc ">
     このスキーマオブジェクトの作成に使用された SQL ステートメントのテキスト全体を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このスキーマオブジェクトの作成に使用された SQL ステートメントのテキスト全体を返します。データベース内の各オブジェクトは、SQL ステートメントを使用して作成されます。
	 
	 <p class="- topic/p ">例えば、次の SQL を使用してデータベースインデックスを作成したとします。</p>
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">CREATE INDEX customer_index ON customers (id)</codeblock>
	 <p class="- topic/p ">このインデックスのスキーマの <codeph class="+ topic/ph pr-d/codeph ">sql</codeph> プロパティは、ステートメントのテキスト全体になります。</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLCollationType" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLCollationType</apiName><shortdesc class="- topic/shortdesc ">
 このクラスには、SQLColumnSchema コンストラクターの defaultCollationType パラメーターで有効な値を表す定数と、SQLColumnSchema.defaultCollationType プロパティが含まれます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 このクラスには、SQLColumnSchema コンストラクターの <codeph class="+ topic/ph pr-d/codeph ">defaultCollationType</codeph> パラメーターで有効な値を表す定数と、<codeph class="+ topic/ph pr-d/codeph ">SQLColumnSchema.defaultCollationType</codeph> プロパティが含まれます。
 
 <p class="- topic/p ">これらの値は、データベーステーブルの列で指定できる様々な照合シーケンスを表します。<i class="+ topic/ph hi-d/i ">照合シーケンス</i>は、データをソートおよび比較する方法です。例えば、データベースが大文字と小文字を区別するかどうかを指定します。</p>
 
 <p class="- topic/p ">照合シーケンスの定義と使用について詳しくは、付録「<xref href="http://www.adobe.com/go/learn_as3_sqlsupportdb_statements_jp" scope="external" class="- topic/xref ">ローカルデータベースでの SQL サポート</xref>」の「COLLATE」セクションを参照してください。</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLColumnSchema/defaultCollationType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema.defaultCollationType</linktext></link></related-links><apiValue id="flash.data:SQLCollationType:BINARY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">BINARY</apiName><shortdesc class="- topic/shortdesc ">
     列が BINARY 照合シーケンスを使用するように定義されていることを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">binary</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     列が <codeph class="+ topic/ph pr-d/codeph ">BINARY</codeph> 照合シーケンスを使用するように定義されていることを示します。<codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.BINARY</codeph> 照合では、バイト値を使用して 2 つの値を比較します。文字のテキストエンコードは考慮されません。
	 
	 <p class="- topic/p ">BINARY 照合が <codeph class="+ topic/ph pr-d/codeph ">TEXT</codeph> 記憶クラスの値で使用されている場合、データベースは、列の値のソートおよび比較を行うときに大文字と小文字を区別します。</p>
	 
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLColumnSchema/defaultCollationType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema.defaultCollationType</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLCollationType:NO_CASE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NO_CASE</apiName><shortdesc class="- topic/shortdesc ">
     列が NOCASE 照合シーケンスを使用するように定義されていることを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">noCase</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     列が <codeph class="+ topic/ph pr-d/codeph ">NOCASE</codeph> 照合シーケンスを使用するように定義されていることを示します。<codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.NO_CASE</codeph> 照合では、2 つの値をソートおよび比較するときに、大文字と小文字が無視されます。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLColumnSchema/defaultCollationType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema.defaultCollationType</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLSchemaResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLSchemaResult</apiName><shortdesc class="- topic/shortdesc ">
 SQLSchemaResult インスタンスには、SQLConnection.loadSchema() メソッドを呼び出した結果の情報が含まれます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 SQLSchemaResult インスタンスには、<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> メソッドを呼び出した結果の情報が含まれます。このインスタンスには、<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> の呼び出しで使用された引数値に基づき、要求されたスキーマデータを保持する 4 つの Array プロパティが含まれます。
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> 呼び出しの SQLSchemaResult インスタンスを取得するには、SQLConnection インスタンスの <codeph class="+ topic/ph pr-d/codeph ">getSchemaResult()</codeph> メソッドを呼び出します。一般に、SQLSchemaResult インスタンスは開発者のコードでは直接作成されません。</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLConnection/getSchemaResult()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.getSchemaResult()</linktext></link></related-links><apiConstructor id="flash.data:SQLSchemaResult:SQLSchemaResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLSchemaResult</apiName><shortdesc class="- topic/shortdesc ">
     SQLSchemaResult インスタンスを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">tables</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> 要求で指定された SQLTableSchema インスタンスの配列です。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">views</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> 要求で指定された SQLViewSchema インスタンスの配列です。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">indices</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> 要求で指定された SQLIndexSchema インスタンスの配列です。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">triggers</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> 要求で指定された SQLTriggerSchema インスタンスの配列です。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     SQLSchemaResult インスタンスを作成します。一般に、SQLSchemaResult コンストラクターは開発者のコードでは直接呼び出されません。データベースのスキーマ情報を取得するには、<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> メソッドを呼び出します。
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLSchemaResult:indices:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">indices</apiName><shortdesc class="- topic/shortdesc ">
     SQLIndexSchema インスタンスの配列（SQLConnection.loadSchema() の呼び出しで要求）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     SQLIndexSchema インスタンスの配列（<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> の呼び出しで要求）です。指定されたデータベースにインデックスが含まれていない場合、またはインデックスを結果から除外するように <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> 呼び出しで示されている場合、<codeph class="+ topic/ph pr-d/codeph ">indices</codeph> プロパティは空の配列（<codeph class="+ topic/ph pr-d/codeph ">length</codeph> プロパティが 0 の配列）になります。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLIndexSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLIndexSchema</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchemaResult:tables:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">tables</apiName><shortdesc class="- topic/shortdesc ">
     SQLTableSchema インスタンスの配列（SQLConnection.loadSchema() の呼び出しで要求）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     SQLTableSchema インスタンスの配列（<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> の呼び出しで要求）です。指定されたデータベースにテーブルが含まれていない場合、またはテーブルを結果から除外するように <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> 呼び出しで示されている場合、<codeph class="+ topic/ph pr-d/codeph ">tables</codeph> プロパティは空の配列（<codeph class="+ topic/ph pr-d/codeph ">length</codeph> プロパティが 0 の配列）になります。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLTableSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTableSchema</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchemaResult:triggers:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">triggers</apiName><shortdesc class="- topic/shortdesc ">
     SQLTriggerSchema インスタンスの配列（SQLConnection.loadSchema() の呼び出しで要求）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     SQLTriggerSchema インスタンスの配列（<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> の呼び出しで要求）です。指定されたデータベースにトリガーが含まれていない場合、またはトリガーを結果から除外するように <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> 呼び出しで示されている場合、<codeph class="+ topic/ph pr-d/codeph ">triggers</codeph> プロパティは空の配列（<codeph class="+ topic/ph pr-d/codeph ">length</codeph> プロパティが 0 の配列）になります。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLTriggerSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTriggerSchema</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchemaResult:views:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">views</apiName><shortdesc class="- topic/shortdesc ">
     SQLViewSchema インスタンスの配列（SQLConnection.loadSchema() の呼び出しで要求）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     SQLViewSchema インスタンスの配列（<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> の呼び出しで要求）です。指定されたデータベースにビューが含まれていない場合、またはビューを結果から除外するように <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> 呼び出しで示されている場合、<codeph class="+ topic/ph pr-d/codeph ">views</codeph> プロパティは空の配列（<codeph class="+ topic/ph pr-d/codeph ">length</codeph> プロパティが 0 の配列）になります。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLViewSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLViewSchema</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLTransactionLockType" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLTransactionLockType</apiName><shortdesc class="- topic/shortdesc ">
 このクラスには、option パラメーター（SQLConnection.begin() メソッド）で有効な値を表す定数が含まれます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 このクラスには、<codeph class="+ topic/ph pr-d/codeph ">option</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.begin()</codeph> メソッド）で有効な値を表す定数が含まれます。
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.begin()</linktext></link></related-links><apiValue id="flash.data:SQLTransactionLockType:DEFERRED" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DEFERRED</apiName><shortdesc class="- topic/shortdesc ">
     遅延ロックトランザクションのオプションを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">deferred</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     遅延ロックトランザクションのオプションを指定します。遅延ロックトランザクションは、データベースが最初にアクセスされるまで、データベースのロックを取得しません。遅延トランザクションでは、最初の読み取りまたは書き込み操作が行われるまで、ロックは取得されません。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLTransactionLockType:EXCLUSIVE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">EXCLUSIVE</apiName><shortdesc class="- topic/shortdesc ">
     排他的ロックトランザクションのオプションを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">exclusive</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     排他的ロックトランザクションのオプションを指定します。排他的ロックトランザクションでは、データベースに対するロックが直ちに取得されます。別の SQLConnection（同じ AIR アプリケーションまたは異なるアプリケーション）を介して同じデータベースに対して実行している他の SQLStatement オブジェクトは、そのデータベースに対する読み取り操作または書き込み操作を実行できなくなります。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLTransactionLockType:IMMEDIATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">IMMEDIATE</apiName><shortdesc class="- topic/shortdesc ">
     即時ロックトランザクションのオプションを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">immediate</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     即時ロックトランザクションのオプションを指定します。即時ロックトランザクションでは、データベースに対するロックが直ちに取得されます。別の SQLConnection（同じ AIR アプリケーションまたは異なるアプリケーション）を介して同じデータベースに対して実行している SQLStatement オブジェクトは、そのデータベースに対するデータの読み取り操作は実行できますが、書き込み操作は実行できなくなります。ただし、データベースのデータを読み取る他の接続の場合は、データベースのデータの初期状態は、トランザクション内の SQLConnection インスタンスの <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> メソッドが呼び出されたときよりも前のデータベースの状態と同一です。即時ロックトランザクション内で変更されたコミットされていないデータは、他の接続からは利用できません。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLConnection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLConnection</apiName><shortdesc class="- topic/shortdesc ">
 SQLConnection インスタンスは、ローカル SQL データベースファイル（ローカルデータベース）の作成と接続を管理するために使用します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 SQLConnection インスタンスは、ローカル SQL データベースファイル（ローカルデータベース）の作成と接続を管理するために使用します。
 
 
 <p class="- topic/p ">SQLConnection クラスの機能は、いくつかのカテゴリに分けられます。</p>
 
 <ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p ">ローカル SQL データベースファイルを作成または開くには、<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> メソッドを呼び出すか、SQLConnection インスタンスを SQLStatement インスタンスの <codeph class="+ topic/ph pr-d/codeph ">sqlConnection</codeph> プロパティに設定します。</p></li><li class="- topic/li "><p class="- topic/p ">SQLConnection クラスは、SQL ステートメントの状態も示します。これには、複数のステートメントを 1 回のトランザクションで実行するメカニズムを含みます。トランザクションは、<codeph class="+ topic/ph pr-d/codeph ">begin()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> および <codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph> メソッドを使用して管理します。また、<codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> および <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> メソッドを使用すれば、コードによるセーブポイントの定義および管理も可能です。これらのメソッドを使用すると、トランザクションを処理セットに細分化できます。</p></li><li class="- topic/li "><p class="- topic/p ">SQLConnection クラスは、接続済みのデータベースのデータベーススキーマ情報を示します。データベースのスキーマは、データベースのテーブル、列、インデックスおよびトリガーの定義を表します。詳細については、<codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> メソッドを参照してください。</p></li><li class="- topic/li "><p class="- topic/p ">SQLConnection クラスを使用すると、CCM を使用する AES でデータベースを暗号化できます。これにより、データの認証とプライバシーの両方が提供されます。データベースを暗号化するには、データベースを作成するときに、ByteArray を使用して 16 バイトのキーを指定する必要があります。このキーは、後で <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.reencrypt()</codeph> メソッドを使用して変更できます。暗号化を使用すると、データベースを読み書きする際のパフォーマンスが低下します。暗号化は、ディスクに保存されたデータに適用されますが、メモリ内の一時データキャッシュには適用されません。暗号化は、メモリ内データベースでサポートされて<i class="+ topic/ph hi-d/i ">いません</i>。</p></li><li class="- topic/li "><p class="- topic/p ">SQLConnection インスタンスを使用したデータベースレベルのイベント通知の受信が可能で、キャッシュページサイズ、プロセスのキャンセルおよびステートメントの実行オプションなど、データベースのあらゆる状態を制御することができます。</p></li></ul>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">SQLConnection</codeph> インスタンスは、非同期および同期のいずれかの実行モードで機能します。同期実行を使用するには、<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> メソッドを使用して、SQLConnection インスタンスのメインデータベースに接続します。非同期実行を使用するには、<codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> メソッドを使用して、インスタンスのメインデータベースに接続します。</p>
 
 <p class="- topic/p ">非同期実行を使用する場合は、イベントリスナーまたは Responder インスタンスを使用して、処理の完了または失敗を特定します。処理はメインアプリケーションスレッドではなくバックグラウンドで実行されるので、データベース処理の実行中でもアプリケーションは実行を続け、ユーザーの操作に応答します。非同期の SQLConnection インスタンスは、それぞれ独自のスレッドで SQL ステートメントを実行します。</p>
 
 <p class="- topic/p ">非同期実行モードでは、適切なメソッドを呼び出して、特定の処理を開始します。処理の完了（または失敗）は、該当するイベントにリスナーを登録することで検出できます。各処理には、処理が正常に完了した場合に送出される関連イベントが用意されています。例えば、<codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> メソッドの呼び出しが正常に完了した場合（データベース接続が開かれた場合）は、<codeph class="+ topic/ph pr-d/codeph ">open</codeph> イベントが送出されます。処理が失敗すると、<codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。SQLErrorEvent オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">error</codeph> プロパティの SQLError インスタンスには、試行された処理や処理が失敗した理由など、特定のエラーに関する情報が格納されます。</p>
 
 <p class="- topic/p ">同期実行を使用する場合は、処理の完了または失敗を特定するためにイベントリスナーを登録する必要はありません。エラーを特定するには、エラーをスローするステートメントを、<codeph class="+ topic/ph pr-d/codeph ">try..catch</codeph> ブロックで囲みます。同期処理はメイン実行スレッドで実行されるので、アプリケーションの機能（画面の更新や、マウスおよびキーボード操作の受け付けなど）は、データベース処理が実行されている間、すべて停止されます。長時間を要する処理では、一定の時間アプリケーションが停止する場合があります。</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link><link href="flash.events.xml#SQLEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.SQLEvent</linktext></link><link href="flash.events.xml#SQLErrorEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.SQLErrorEvent</linktext></link><link href="flash.errors.xml#SQLError" class="- topic/link "><linktext class="- topic/linktext ">flash.errors.SQLError</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLasynch_en" class="- topic/link "><linktext class="- topic/linktext ">クイックスタート：ローカル SQL データベースの非同期操作（Flex）</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLasynch_flash_en" class="- topic/link "><linktext class="- topic/linktext ">クイックスタート：ローカル SQL データベースの非同期操作（Flash）</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLasynch_html_en" class="- topic/link "><linktext class="- topic/linktext ">クイックスタート：ローカル SQL データベースの非同期操作（HTML）</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLsynch_en" class="- topic/link "><linktext class="- topic/linktext ">クイックスタート：ローカル SQL データベースの同期操作（Flex）</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLsynch_flash_en" class="- topic/link "><linktext class="- topic/linktext ">クイックスタート：ローカル SQL データベースの同期操作（Flash）</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLsynch_html_en" class="- topic/link "><linktext class="- topic/linktext ">クイックスタート：ローカル SQL データベースの同期操作（HTML）</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLUpdateEvent.UPDATE_update" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">update</apiName><shortdesc class="- topic/shortdesc ">
 SQL UPDATE コマンドを実行した結果、任意の接続済みデータベースの任意のテーブルのデータが変化した場合に送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLUpdateEvent.UPDATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLUpdateEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 SQL <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph> コマンドを実行した結果、任意の接続済みデータベースの任意のテーブルのデータが変化した場合に送出されます。データの変化は、SQLStatement インスタンスから <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph> ステートメントを実行した直接的な結果か、ステートメントの実行に応答してトリガーが発生した間接的な結果である場合があります。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.SET_SAVEPOINT_setSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">setSavepoint</apiName><shortdesc class="- topic/shortdesc ">
 setSavepoint() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.SET_SAVEPOINT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.SCHEMA_schema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">schema</apiName><shortdesc class="- topic/shortdesc ">
 loadSchema() メソッド呼び出しの処理が正常に完了し、スキーマの結果の準備が完了したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.SCHEMA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> メソッド呼び出しの処理が正常に完了し、スキーマの結果の準備が完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">loadSchema()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.ROLLBACK_TO_SAVEPOINT_rollbackToSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rollbackToSavepoint</apiName><shortdesc class="- topic/shortdesc ">
 rollbackToSavepoint() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.ROLLBACK_TO_SAVEPOINT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.ROLLBACK_rollback" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rollback</apiName><shortdesc class="- topic/shortdesc ">
 rollback() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.ROLLBACK</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/rollback()" class="- topic/link "><linktext class="- topic/linktext ">rollback()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.RELEASE_SAVEPOINT_releaseSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">releaseSavepoint</apiName><shortdesc class="- topic/shortdesc ">
 releaseSavepoint() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.RELEASE_SAVEPOINT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.REENCRYPT_reencrypt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">reencrypt</apiName><shortdesc class="- topic/shortdesc ">
 reencrypt() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.REENCRYPT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">reencrypt()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/reencrypt()" class="- topic/link "><linktext class="- topic/linktext ">reencrypt()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.OPEN_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><shortdesc class="- topic/shortdesc ">
 openAsync() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.OPEN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLUpdateEvent.INSERT_insert" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">insert</apiName><shortdesc class="- topic/shortdesc ">
 SQL INSERT コマンドを実行した結果、任意の接続済みデータベースの任意のテーブルのデータが変化した場合に送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLUpdateEvent.INSERT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLUpdateEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> コマンドを実行した結果、任意の接続済みデータベースの任意のテーブルのデータが変化した場合に送出されます。データの変化は、SQLStatement インスタンスから <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> ステートメントを実行した直接的な結果か、ステートメントの実行に応答してトリガーが発生した間接的な結果である場合があります。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLErrorEvent.ERROR_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><shortdesc class="- topic/shortdesc ">
 任意の SQLConnection オブジェクトの非同期処理でエラーが発生した場合に送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLErrorEvent.ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 任意の SQLConnection オブジェクトの非同期処理でエラーが発生した場合に送出されます。イベントオブジェクトとして送出された SQLErrorEvent インスタンスは、<codeph class="+ topic/ph pr-d/codeph ">error</codeph> プロパティを持ちます。このプロパティには、試行された処理と失敗した理由に関する情報が格納されています。
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.DETACH_detach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">detach</apiName><shortdesc class="- topic/shortdesc ">
 detach() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.DETACH</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">detach()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/detach()" class="- topic/link "><linktext class="- topic/linktext ">detach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLUpdateEvent.DELETE_delete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">delete</apiName><shortdesc class="- topic/shortdesc ">
 SQL DELETE コマンドを実行した結果、任意の接続済みデータベースの任意のテーブルのデータが変化した場合に送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLUpdateEvent.DELETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLUpdateEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 SQL <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> コマンドを実行した結果、任意の接続済みデータベースの任意のテーブルのデータが変化した場合に送出されます。データの変化は、SQLStatement インスタンスから <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> ステートメントを実行した直接的な結果か、ステートメントの実行に応答してトリガーが発生した間接的な結果である可能性があります。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.DEANALYZE_deanalyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">deanalyze</apiName><shortdesc class="- topic/shortdesc ">
 deanalyze() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.DEANALYZE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">deanalyze()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/deanalyze()" class="- topic/link "><linktext class="- topic/linktext ">deanalyze()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.COMMIT_commit" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">commit</apiName><shortdesc class="- topic/shortdesc ">
 commit() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.COMMIT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/commit()" class="- topic/link "><linktext class="- topic/linktext ">commit()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.CLOSE_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
 close() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.COMPACT_compact" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">compact</apiName><shortdesc class="- topic/shortdesc ">
 compact() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.COMPACT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">compact()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/compact()" class="- topic/link "><linktext class="- topic/linktext ">compact()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.CANCEL_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
 cancel() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.CANCEL</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">cancel()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/cancel()" class="- topic/link "><linktext class="- topic/linktext ">cancel()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.BEGIN_begin" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">begin</apiName><shortdesc class="- topic/shortdesc ">
 begin() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.BEGIN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">begin()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.ATTACH_attach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">attach</apiName><shortdesc class="- topic/shortdesc ">
 attach() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.ATTACH</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/attach()" class="- topic/link "><linktext class="- topic/linktext ">attach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.ANALYZE_analyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">analyze</apiName><shortdesc class="- topic/shortdesc ">
 analyze() の処理が正常に完了したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.ANALYZE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> の処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/analyze()" class="- topic/link "><linktext class="- topic/linktext ">analyze()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.data:SQLConnection:SQLConnection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLConnection</apiName><shortdesc class="- topic/shortdesc ">
     SQLConnection インスタンスを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">メインアプリケーションサンドボックス外部のサンドボックスからコンストラクターが呼び出された場合。 
      
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     SQLConnection インスタンスを作成します。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.data:SQLConnection:addEventListener" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addEventListener</apiName><shortdesc class="- topic/shortdesc ">
     
	イベントリスナーオブジェクトを EventDispatcher オブジェクトに登録し、リスナーがイベントの通知を受け取るようにします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">イベントのタイプです。
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">listener</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">イベントを処理するリスナー関数です。この関数は、<ph class="- topic/ph ">次の例のように</ph>、Event オブジェクトを唯一のパラメーターとして受け取り、何も返さないものである必要があります。
	
	
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">function(evt:Event):void</codeblock>
	
	<p class="- topic/p ">関数の名前は任意に付けられます。</p>
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useCapture</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
	<ph class="- topic/ph ">リスナーが、キャプチャ段階、またはターゲットおよびバブリング段階で動作するかどうかを判断します。<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定すると、リスナーはキャプチャ段階のみでイベントを処理し、ターゲット段階またはバブリング段階では処理しません。<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> を <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定すると、リスナーはターゲット段階またはバブリング段階のみでイベントを処理します。3 つの段階すべてでイベントを受け取るには、<codeph class="+ topic/ph pr-d/codeph ">addEventListener</codeph> を 2 回呼び出します。<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定して呼び出し、<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> を <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定してもう一度呼び出します。</ph>
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">priority</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0.0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">イベントリスナーの優先度レベルです。優先度は、符号付き 32 ビット整数で指定します。数値が大きくなるほど優先度が高くなります。優先度が <i class="+ topic/ph hi-d/i ">n</i> のすべてのリスナーは、優先度が <i class="+ topic/ph hi-d/i ">n</i>-1 のリスナーよりも前に処理されます。複数のリスナーに対して同じ優先度が設定されている場合、それらは追加された順番に処理されます。デフォルトの優先度は 0 です。
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useWeakReference</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">リスナーへの参照が強参照と弱参照のいずれであるかを判断します。デフォルトである強参照の場合は、リスナーのガベージコレクションが回避されます。弱参照では回避されません。 <p class="- topic/p ">クラスレベルメンバー関数はガベージコレクションの対象外であるため、クラスレベルメンバー関数の <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> は、ガベージコレクションの制限とは無関係に <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定できます。ネストされた内部の関数であるリスナーに対して <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定すると、その関数はガベージコレクションされ、永続的ではなくなります。inner 関数に対する参照を作成（別の変数に保存）した場合、その関数はガベージコレクションされず、永続化された状態のままになります。</p>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
	イベントリスナーオブジェクトを EventDispatcher オブジェクトに登録し、リスナーがイベントの通知を受け取るようにします。<ph class="- topic/ph ">イベントリスナーは、特定のタイプのイベント、段階、および優先度に関する表示リスト内のすべてのノードに登録できます。</ph>
	
	
	
	<p class="- topic/p ">イベントリスナーが正常に登録された後に、<codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> をさらに呼び出して優先度を変更することはできません。リスナーの優先度を変更するには、最初に <codeph class="+ topic/ph pr-d/codeph ">removeListener()</codeph> を呼び出す必要があります。その後、同じリスナーを新しい優先度レベルで再度登録できます。 </p>
	
	<p class="- topic/p ">リスナーが登録された後に、<codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph>（<codeph class="+ topic/ph pr-d/codeph ">type</codeph> または <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> に別の値を設定）を再度呼び出すと、別のリスナー登録が作成されることに注意してください。<ph class="- topic/ph ">例えば、最初にリスナーを登録するときに <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定すると、そのリスナーはキャプチャ段階のみでリスニングします。同じリスナーオブジェクトを使用して再度 <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> を呼び出すと（このとき、<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> に <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を設定）、異なる 2 つのリスナーが登録されます。1 つはキャプチャ段階でリスニングするリスナーで、もう 1 つはターゲット段階とバブリング段階でリスニングするリスナーです。</ph>
	</p>
	
	<p class="- topic/p ">ターゲット段階またはバブリング段階のみを対象とするイベントリスナーを登録することはできません。登録時にこれらの段階が組み合わされるのは、バブリングはターゲットノードの祖先にしか適用されないためです。</p>
	
	<p class="- topic/p ">イベントリスナーが不要になった場合は、<codeph class="+ topic/ph pr-d/codeph ">removeEventListener()</codeph> を呼び出して、イベントリスナーを削除します。削除しない場合、メモリの問題が発生する可能性があります。ガベージコレクションでは、オブジェクトの送出が行われている限り、リスナーを削除しないので、イベントリスナーは自動的には削除されません（<codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> パラメーターが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定されていない場合）。</p>
		
	<p class="- topic/p ">EventDispatcher インスタンスをコピーしても、それに関連付けられているイベントリスナーはコピーされません。新しく作成したノードにイベントリスナーが必要な場合は、ノードを作成した後に、リスナーを関連付ける必要があります。ただし、EventDispatcher インスタンスを移動した場合は、関連付けられているイベントリスナーも一緒に移動されます。</p>
	
	
	<p class="- topic/p ">イベントがノードで処理されるときに、イベントリスナーがそのノードに登録中であれば、イベントリスナーは現在の段階ではトリガーされません。ただし、バブリング段階など、イベントフローの後の段階でトリガーすることができます。</p>
	
	<p class="- topic/p ">イベントがノードで処理されているときにイベントリスナーがノードから削除された場合でも、イベントは現在のアクションによってトリガーされます。削除された後は、その後の処理で再び登録されない限り、イベントリスナーは二度と呼び出されません。 </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:SQLConnection:analyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">analyze</apiName><shortdesc class="- topic/shortdesc ">
     データベースインデックスに関する統計を収集し、データベースに保存します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">SQLConnection インスタンスがデータベースに接続されていない状態（<codeph class="+ topic/ph pr-d/codeph ">connected</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の状態）で、このメソッドが呼び出された場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">同期実行モードで処理が失敗した場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">resourceName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">インデックスを分析するデータベースまたはテーブルの名前です。指定されたリソースがテーブルで、アタッチされているデータベースの中で一意の名前を持つ場合は、テーブル名だけを指定する必要があります。ただし、テーブル名を <codeph class="+ topic/ph pr-d/codeph ">[database-name].[table-name]</codeph> という形式で指定し、テーブル名が一意でない場合のあいまいさを避けることができます。<codeph class="+ topic/ph pr-d/codeph ">resourceName</codeph> パラメーターが <codeph class="+ topic/ph pr-d/codeph ">null</codeph>（デフォルト）の場合、アタッチされているすべてのデータベースのすべてのインデックスが分析されます。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph class="+ topic/ph pr-d/codeph ">responder</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、実行が完了すると <codeph class="+ topic/ph pr-d/codeph ">analyze</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     データベースインデックスに関する統計を収集し、データベースに保存します。これらの統計情報は、クエリオプティマイザ（データベースエンジンの中で、各ステートメントを実行する最も効率的な方法を決定する部分）で使用できます。この統計情報は、特定のクエリを実行する場合に、クエリオプティマイザが最適なインデックスを選択するのに役立ちます。
	 
	 <p class="- topic/p ">データベースにインデックスが定義されていて、<codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> メソッドが呼び出されていない場合でも、ランタイムはそのインデックスを使用してステートメントを実行します。ただし、<codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> メソッドで生成された詳細な統計情報が存在しない場合は、ランタイムが特定のクエリに対して最も効率的なインデックスを選択できない場合があります。</p>
	 
	 <p class="- topic/p ">(<codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>、<codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph> または <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> ステートメントの実行結果として）テーブルのデータが変更された場合、そのテーブルに関連付けられているインデックスも変更されます。<codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> によって生成された統計情報は、自動的に更新されません。したがって、大量のデータを変更した場合は、再度 <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> メソッドを呼び出すと有効です。ただし、<codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> を再び呼び出した場合の効果は、様々な要因に左右されます。例えば、テーブルに定義されているインデックスの数や、変更された行数とテーブルの全行数との比率、インデックス付けされているテーブルのデータに見られる差異の大きさ、変更後のデータと変更前のデータの変化の大きさなどに左右されます。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">resourceName</codeph> パラメーターは、インデックスに対する処理を、アタッチされているすべてのデータベース、特定のデータベースまたは特定のテーブルについて実行するかどうかを示します。</p>
     
     <p class="- topic/p ">このメソッドが呼び出されると、そのたびに以前に作成された統計データは削除され、データベースや <codeph class="+ topic/ph pr-d/codeph ">resourceName</codeph> パラメーターで指定されたテーブル（<codeph class="+ topic/ph pr-d/codeph ">resourceName</codeph> が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合は接続されたすべてのデータベースの全テーブル）用に統計データが再作成されます。このメソッドは、データベース接続が開かれている状態であれば、いつでも呼び出せます。<codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> 操作とその統計データは、トランザクションに含まれません。ただし、データベースに現在処理中のトランザクションがある場合は、<codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> の呼び出しは推奨されません（<codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合）。これは、トランザクションで実行されたデータ、テーブルスキーマまたはインデックスの変更がコミットされていない場合、<codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> の呼び出しに反映されないので、トランザクションがコミットされると <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> データが最新の状態でなくなることが理由です。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> メソッドで作成された統計データを削除するには、<codeph class="+ topic/ph pr-d/codeph ">deanalyze()</codeph> メソッドを使用します。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/deanalyze()" class="- topic/link "><linktext class="- topic/linktext ">deanalyze()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:analyze_analyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">analyze</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:analyze_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">非同期実行モードで処理が失敗した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:attach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attach</apiName><shortdesc class="- topic/shortdesc ">
     別のデータベースを SQLConnection インスタンスに追加し、指定された名前を新しいデータベースに付けます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターが空の文字列（<codeph class="+ topic/ph pr-d/codeph ">""</codeph>）または <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">reference</codeph> パラメーターに指定された値が、flash.filesystem.File インスタンスでない場合。
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ではなく、その <codeph class="+ topic/ph pr-d/codeph ">length</codeph> が 16 バイトではない場合
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">reference</codeph> パラメーターが <codeph class="+ topic/ph pr-d/codeph ">null</codeph> で、<codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ではない場合
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">SQLConnection インスタンスがデータベースに接続されていない場合（<codeph class="+ topic/ph pr-d/codeph ">connected</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の場合）、またはトランザクションが現在開いている場合（<codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合）
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">同期実行モードで処理が失敗した場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">新しくアタッチされたデータベースを識別するために使用する名前です。この名前は SQL ステートメントで使用し、指定されたデータベースに属しているテーブルを明示的に示すことができます。この場合、<codeph class="+ topic/ph pr-d/codeph ">[database-name].[table-name]</codeph> という書式を使用します。"main" および "temp" という名前は予約されており、使用できません。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">reference</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">アタッチするデータベースファイルへの参照（flash.filesystem.File インスタンス）です。この参照が存在しないファイルを参照している場合、新しいデータベースが作成されるか、<codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> パラメーター（メインデータベースを接続した <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> 呼び出し）で指定された値に従ってエラーがスローされます。
	 
     <p class="- topic/p ">パラメーターの値が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、メモリ内データベースが作成され、アタッチされます。</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph class="+ topic/ph pr-d/codeph ">responder</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、実行が完了すると <codeph class="+ topic/ph pr-d/codeph ">attach</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">encryptionKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データベースファイルの暗号化キー。<codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> の呼び出しがデータベースを作成する場合、データベースは暗号化されて、指定したキーがデータベースの暗号化キーとして使用されます。呼び出しによって既存の暗号化されたデータベースがアタッチされる場合、値はそのデータベースの暗号化キーと一致している必要があり、一致しない場合はエラーが発生します。追加されるデータベースが暗号化されていない場合、または暗号化されないデータベースを作成する場合は、値として <codeph class="+ topic/ph pr-d/codeph ">null</codeph>（デフォルト）を指定する必要があります。
	 
	 <p class="- topic/p ">有効な暗号化キーは 16 バイト長です。メモリ内データベースは暗号化できないので、このパラメーターを <codeph class="+ topic/ph pr-d/codeph ">null</codeph> にする必要があります（<codeph class="+ topic/ph pr-d/codeph ">reference</codeph> パラメーターの値が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合）。</p>
	 
	 <p class="- topic/p ">暗号化されたデータベースを追加する場合、指定した暗号化キーがデータベースの暗号化キーと一致していないと、例外が発生します。同期実行モードでは、SQLError 例外がスローされます。非同期モードでは、SQLErrorEvent が送出されて、イベントオブジェクトの <codeph class="+ topic/ph pr-d/codeph ">error</codeph> プロパティには SQLError インスタンスが設定されます。どちらの場合も、SQLError オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">errorID</codeph> プロパティは 3138（"開かれたファイルはデータベースファイルではない"）です。</p>
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> パラメーターは、AIR 1.5 以降で使用できます。</p>
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     別のデータベースを SQLConnection インスタンスに追加し、指定された名前を新しいデータベースに付けます。データベースをアタッチすると、この SQLConnection インスタンスに対して実行される SQL ステートメントで、そのデータベースを使用できるようになります。
     
     <p class="- topic/p ">指定された名前を使用して、データベースが既にアタッチされている場合は、<codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> を呼び出すとエラーが発生します。ただし、一意の名前を使用することで、同じデータベースを 2 回以上アタッチすることができます。単一の SQLConnection インスタンスにアタッチできるデータベースは、10 個までです。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> を使用して接続したデータベースに対しては、任意の SQL ステートメントを実行できます。このメソッドは、メインデータベース（<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> を使用して接続したデータベース）に対して実行できます。SQL ステートメントは、そのステートメントの関連付けられている SQLConnection インスタンスにアタッチされているデータベースであれば、どのテーブルにでもアクセスできます。これには、単一のステートメントで複数のデータベースのテーブルにアクセスする場合も含まれます。ランタイムはステートメントのテーブル名を解決すると、SQLConnection インスタンスのデータベースを検索します。検索は <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> メソッドを使用して接続されたデータベースから開始され、アタッチされた順番に行われます。ステートメントでデータベース名（<codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> メソッドの <codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターで指定された名前）を使用して、テーブル名を明示的に修飾します。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> メソッドを使用してアタッチされたデータベースを削除するには、<codeph class="+ topic/ph pr-d/codeph ">detach()</codeph> メソッドを使用します。<codeph class="+ topic/ph pr-d/codeph ">close()</codeph> メソッドを呼び出して SQLConnection インスタンスを閉じると、アタッチされているデータベースは、すべてデタッチされます。</p>
     
     <p class="- topic/p ">アタッチされているデータベースは、メインデータベースと同じ実行モード（同期または非同期）を使用します。これは、メインデータベースが <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> メソッドのどちらを使用して接続されたかによって異なります。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/detach()" class="- topic/link "><linktext class="- topic/linktext ">detach()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:attach_attach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">attach</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:attach_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">非同期実行モードで処理が失敗した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:begin" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">begin</apiName><shortdesc class="- topic/shortdesc ">
     接続のデータベースに対して実行されるすべての SQL ステートメントがグループ化されている範囲内で、トランザクションを開始します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">SQLConnection インスタンスがデータベースに接続されていない状態（<codeph class="+ topic/ph pr-d/codeph ">connected</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の状態）で、このメソッドが呼び出された場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定されたオプションが、SQLTransactionLockType 定数の 1 つでない場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">同期実行モードで処理が失敗した場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">option</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">トランザクションで使用するロック手順を示します。値は、SQLTransactionLockType クラスで定義されているいずれかの定数になります。
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLTransactionLockType.DEFERRED</codeph> は、最初の読み取り処理または書き込み処理が行われるまでロックを取得しないことを示します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLTransactionLockType.EXCLUSIVE</codeph> は、可能な限り早くロックを取得し、他の SQLConnection インスタンスによるデータベースに対する読み取り処理または書き込み処理を許可しないことを示します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLTransactionLockType.IMMEDIATE</codeph> は、可能な限り早くロックを取得し、他の SQLConnection インスタンスに対してデータベースの読み取り処理だけを許可し、書き込み処理は許可しないことを示します。</li></ul>
	 <p class="- topic/p ">デフォルト値（<codeph class="+ topic/ph pr-d/codeph ">null</codeph>）は <codeph class="+ topic/ph pr-d/codeph ">SQLTransactionLockType.DEFERRED</codeph> と同じです。</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph class="+ topic/ph pr-d/codeph ">responder</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、実行が完了すると <codeph class="+ topic/ph pr-d/codeph ">begin</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     接続のデータベースに対して実行されるすべての SQL ステートメントがグループ化されている範囲内で、トランザクションを開始します。
     
     <p class="- topic/p ">デフォルトでは、各 SQL ステートメントは自身のトランザクションの範囲内で実行され、ステートメントの実行が正常に完了した場合または失敗した場合にトランザクションが終了します。<codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> メソッドを使用してトランザクションを作成すると、新しいマニュアルトランザクションが作成されます。それ以降、SQLConnection インスタンスに対して実行される SQL ステートメントはすべてトランザクションの範囲内で発生し、ステートメントによって実行されるアクションまたは変更は、グループとしてコミット（永続させる）またはロールバック（元に戻す）できます。</p>
     
	 <p class="- topic/p ">トランザクションを終了するには、<codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph> メソッドを呼び出します。どちらを呼び出すかは、トランザクションのステートメントによる変更を永続させるか破棄するかによって決定します。</p>
	 
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> に対するネストされた呼び出しは無視されます。トランザクション内でブックマークのように機能するセーブポイントを作成するには、<codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> メソッドを呼び出します。その後で <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> メソッドを呼び出すことにより、SQL ステートメントを部分的にコミットまたはロールバックできます。ただし、<codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> を呼び出してトランザクションを開始した場合、変更をデータベースに永続的にコミットするには、<codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> メソッドを呼び出す必要があります。</p>
     
	 <p class="- topic/p ">トランザクションが現在開いている状態でデータベース接続が閉じられると、AIR はトランザクションを自動的にロールバックします。（注意：AIR 1.1 以前のバージョンの場合、開いているトランザクションは、接続が閉じられると自動的にコミットされます）。</p>
     
     <p class="- topic/p ">トランザクションでは、ステートメントの実行が単一のデータベースに限定されていません。アタッチされている別のデータベースに対して実行されるステートメントを含めることもできます。</p>
     
     </apiDesc><example conref="examples\SQLConnection.transactions.1.as" class="- topic/example "> 次の例は、トランザクション内で SQL の <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> ステートメントを複数実行する例を示したものです。最初に、「employees」テーブルに 1 行が追加されます。次に、新しく挿入された行のプライマリキーが取得されます。このキーを使用して、関連付けられている「phoneNumbers」テーブルに 1 行を追加します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.data.SQLConnection;
    import flash.data.SQLResult;
    import flash.data.SQLStatement;
    import flash.display.Sprite;
    import flash.events.SQLErrorEvent;
    import flash.events.SQLEvent;
    import flash.filesystem.File;
    
    public class MultiInsertTransactionExample extends Sprite
    {
        private var conn:SQLConnection;
        private var insertEmployee:SQLStatement;
        private var insertPhoneNumber:SQLStatement;
        
        public function MultiInsertTransactionExample():void
        {
            // define where to find the database file
            var appStorage:File = File.applicationStorageDirectory;
            var dbFile:File = appStorage.resolvePath("ExampleDatabase.db");
            
            // open the database connection
            conn = new SQLConnection();
            conn.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            conn.addEventListener(SQLEvent.OPEN, openHandler);
            conn.openAsync(dbFile);
        }
        
        // Called when the database is connected
        private function openHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.OPEN, openHandler);
            
            // start a transaction
            conn.addEventListener(SQLEvent.BEGIN, beginHandler);
            conn.begin();
        }
        
        // Called when the transaction begins
        private function beginHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.BEGIN, beginHandler);
            
            // create and execute the first SQL statement:
            // insert an employee record
            insertEmployee = new SQLStatement();
            insertEmployee.sqlConnection = conn;
            insertEmployee.text = 
                "INSERT INTO employees (lastName, firstName, email) " + 
                "VALUES (:lastName, :firstName, :email, :birthday)";
            insertEmployee.parameters[":lastName"] = "Smith";
            insertEmployee.parameters[":firstName"] = "Bob";
            insertEmployee.parameters[":email"] = "bsmith@example.com";
            insertEmployee.parameters[":birthday"] = new Date(1971, 8, 12);
            
            insertEmployee.addEventListener(SQLEvent.RESULT, insertEmployeeHandler);
            insertEmployee.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            insertEmployee.execute();
        }
        
        // Called after the employee record is inserted
        private function insertEmployeeHandler(event:SQLEvent):void
        {
            insertEmployee.removeEventListener(SQLEvent.RESULT, insertEmployeeHandler);
            insertEmployee.removeEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            // Get the employee id of the newly created employee row
            var result:SQLResult = insertEmployee.getResult();
            var employeeId:Number = result.lastInsertRowID;
            
            // Add a phone number to the related phoneNumbers table
            insertPhoneNumber = new SQLStatement();
            insertPhoneNumber.sqlConnection = conn;
            insertPhoneNumber.text =
                "INSERT INTO phoneNumbers (employeeId, type, number) " +
                "VALUES (:employeeId, :type, :number)";
            insertPhoneNumber.parameters[":employeeId"] = employeeId;
            insertPhoneNumber.parameters[":type"] = "Home";
            insertPhoneNumber.parameters[":number"] = "(555) 555-1234";
            
            insertPhoneNumber.addEventListener(SQLEvent.RESULT, insertPhoneNumberHandler);
            insertPhoneNumber.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            insertPhoneNumber.execute();
        }
        
        // Called after the phone number record is inserted
        private function insertPhoneNumberHandler(event:SQLEvent):void
        {
            insertPhoneNumber.removeEventListener(SQLEvent.RESULT, insertPhoneNumberHandler);
            insertPhoneNumber.removeEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            // No errors so far, so commit the transaction
            conn.addEventListener(SQLEvent.COMMIT, commitHandler);
            conn.commit();
        }
        
        // Called after the transaction is committed
        private function commitHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.COMMIT, commitHandler);
            
            trace("Transaction complete");
        }
        
        // Called whenever an error occurs
        private function errorHandler(event:SQLErrorEvent):void
        {
            // If a transaction is happening, roll it back
            if (conn.inTransaction)
            {
                conn.addEventListener(SQLEvent.ROLLBACK, rollbackHandler);
                conn.rollback();
            }
            
            trace(event.error.message);
            trace(event.error.details);
        }
        
        // Called when the transaction is rolled back
        private function rollbackHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.ROLLBACK, rollbackHandler);
            
            // add additional error handling, close the database, etc.
        }
    }
}
</codeblock></example><example conref="examples\SQLConnection.transactions.2.as" class="- topic/example "> 次の例は、トランザクション内で SQL の <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> ステートメントを複数実行する例を示したものです。トランザクションを使用して、従業員レコードを削除します。最初に、「phoneNumbers」テーブルの関連する行が削除されます。次に、「employees」テーブルから、該当する従業員レコードの行が削除されます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.data.SQLConnection;
    import flash.data.SQLResult;
    import flash.data.SQLStatement;
    import flash.display.Sprite;
    import flash.events.SQLErrorEvent;
    import flash.events.SQLEvent;
    import flash.filesystem.File;
    
    public class MultiDeleteTransactionExample extends Sprite
    {
        private var conn:SQLConnection;
        private var deleteEmployee:SQLStatement;
        private var deletePhoneNumbers:SQLStatement;
        
        private var employeeIdToDelete:Number = 25;
        
        public function MultiDeleteTransactionExample():void
        {
            // define where to find the database file
            var appStorage:File = File.applicationStorageDirectory;
            var dbFile:File = appStorage.resolvePath("ExampleDatabase.db");
            
            // open the database connection
            conn = new SQLConnection();
            conn.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            conn.addEventListener(SQLEvent.OPEN, openHandler);
            conn.openAsync(dbFile);
        }
        
        // Called when the database is connected
        private function openHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.OPEN, openHandler);
            
            // start a transaction
            conn.addEventListener(SQLEvent.BEGIN, beginHandler);
            conn.begin();
        }
        
        // Called when the transaction begins
        private function beginHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.BEGIN, beginHandler);
            
            // Create and execute the first SQL statement:
            // Delete an employee's phone number records
            deletePhoneNumbers = new SQLStatement();
            deletePhoneNumbers.sqlConnection = conn;
            deletePhoneNumbers.text =
                "DELETE FROM phoneNumbers " +
                "WHERE employeeId = :employeeId";
            deletePhoneNumbers.parameters[":employeeId"] = employeeIdToDelete;
            
            deletePhoneNumbers.addEventListener(SQLEvent.RESULT, deletePhoneNumbersHandler);
            deletePhoneNumbers.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            deletePhoneNumbers.execute();
        }
        
        // Called after the phone number records are deleted
        private function deletePhoneNumbersHandler(event:SQLEvent):void
        {
            deletePhoneNumbers.removeEventListener(SQLEvent.RESULT, deletePhoneNumbersHandler);
            deletePhoneNumbers.removeEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            deleteEmployee = new SQLStatement();
            deleteEmployee.sqlConnection = conn;
            deleteEmployee.text = 
                "DELETE FROM employees " + 
                "WHERE employeeId = :employeeId";
            deleteEmployee.parameters[":employeeId"] = employeeIdToDelete;
            
            deleteEmployee.addEventListener(SQLEvent.RESULT, deleteEmployeeHandler);
            deleteEmployee.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            deleteEmployee.execute();
        }
        
        // Called after the employee record is deleted
        private function deleteEmployeeHandler(event:SQLEvent):void
        {
            deleteEmployee.removeEventListener(SQLEvent.RESULT, deleteEmployeeHandler);
            deleteEmployee.removeEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            // No errors so far, so commit the transaction
            conn.addEventListener(SQLEvent.COMMIT, commitHandler);
            conn.commit();
        }
        
        // Called after the transaction is committed
        private function commitHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.COMMIT, commitHandler);
            
            trace("Transaction complete");
        }
        
        // Called whenever an error occurs
        private function errorHandler(event:SQLErrorEvent):void
        {
            // If a transaction is happening, roll it back
            if (conn.inTransaction)
            {
                conn.addEventListener(SQLEvent.ROLLBACK, rollbackHandler);
                conn.rollback();
            }
            
            trace(event.error.message);
            trace(event.error.details);
        }
        
        // Called when the transaction is rolled back
        private function rollbackHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.ROLLBACK, rollbackHandler);
            
            // add additional error handling, close the database, etc.
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/commit()" class="- topic/link "><linktext class="- topic/linktext ">commit()</linktext></link><link href="flash.data.xml#SQLConnection/rollback()" class="- topic/link "><linktext class="- topic/linktext ">rollback()</linktext></link><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link><link href="flash.data.xml#SQLTransactionLockType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTransactionLockType</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:begin_begin" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">begin</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">処理が完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:begin_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">非同期実行モードで処理が失敗した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
     SQLConnection インスタンスに接続しているデータベースに対して現在実行中の SQL ステートメントをすべて中止します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">SQLConnection インスタンスがデータベースに接続されていない状態（<codeph class="+ topic/ph pr-d/codeph ">connected</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の状態）で、このメソッドが呼び出された場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">同期実行モードで処理が失敗した場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph class="+ topic/ph pr-d/codeph ">responder</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、実行が完了すると <codeph class="+ topic/ph pr-d/codeph ">cancel</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     SQLConnection インスタンスに接続しているデータベースに対して現在実行中の SQL ステートメントをすべて中止します。このメソッドは、長時間実行されているクエリや暴走したクエリを停止するために使用できます。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">cancel()</codeph> メソッドを呼び出したときに実行しているステートメントが存在する場合、このメソッドによってステートメントの処理が中止され、未完了の更新またはトランザクションはロールバックされます。現在実行しているステートメントが存在しない場合、このメソッドを呼び出すと、開いているトランザクションがロールバックされます。開いているトランザクションがない場合は、何も実行されません。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:cancel_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が正しく完了したときに送出されます。
	 
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:cancel_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">非同期実行モードで処理が失敗した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     現在のデータベース接続を閉じます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">同期実行モードで処理が失敗した場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph class="+ topic/ph pr-d/codeph ">responder</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、実行が完了すると <codeph class="+ topic/ph pr-d/codeph ">close</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     現在のデータベース接続を閉じます。アタッチされているデータベースもデタッチされます。
     
     <p class="- topic/p ">開いているトランザクションがある状態で <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> を呼び出すと、そのトランザクションはロールバックされます。SQLConnection インスタンスがガベージコレクションされると、ランタイムは自動的に <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> を呼び出します。これには、SQLConnection がデータベースに接続されたまま AIR アプリケーションが閉じられた場合も含まれます。</p>
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.data:SQLConnection:close_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:close_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">非同期実行モードで処理が失敗した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:commit" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">commit</apiName><shortdesc class="- topic/shortdesc ">
     既存のトランザクションをコミットします。トランザクションのステートメントによって実行されたアクションは、永続的にデータベースに適用されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">SQLConnection インスタンスがデータベースに接続されていない（<codeph class="+ topic/ph pr-d/codeph ">connected</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph>）の状態でメソッドを呼び出した場合、または現在開いているトランザクションが存在しない場合（<codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の場合）。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph class="+ topic/ph pr-d/codeph ">responder</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、実行が完了すると <codeph class="+ topic/ph pr-d/codeph ">commit</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     既存のトランザクションをコミットします。トランザクションのステートメントによって実行されたアクションは、永続的にデータベースに適用されます。
     
	 <p class="- topic/p ">トランザクション内でブックマークのように機能する中間セーブポイントを作成するには、<codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> メソッドを呼び出します。セーブポイントを使用すると、<codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> メソッドを呼び出すことにより、トランザクションの一部をコミットまたはロールバックできます。ただし、<codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> メソッドを呼び出してトランザクションを開始した場合、変更をデータベースに永続的に保存するには、<codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> メソッドを呼び出して、トランザクション全体をコミットする必要があります。</p>
	 
	 <p class="- topic/p ">セーブポイントを使用しているトランザクションでは、トランザクション全体をコミットする場合、<codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> メソッドを使用してロールバックされたステートメントはコミットされません。<codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> を使用してコミットされたステートメントやセーブポイントが解放またはロールバックされていないステートメントは、データベースにコミットされません。</p>
	 
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">begin()</linktext></link><link href="flash.data.xml#SQLConnection/rollback()" class="- topic/link "><linktext class="- topic/linktext ">rollback()</linktext></link><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:commit_commit" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">commit</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:commit_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が正常に完了しなかった場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">処理が正常に完了しなかった場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:compact" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">compact</apiName><shortdesc class="- topic/shortdesc ">
     データベースの未使用領域を再要求します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">SQLConnection インスタンスがデータベースに接続されていない（<codeph class="+ topic/ph pr-d/codeph ">connected</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph>）状態でメソッドを呼び出した場合、またはトランザクションが現在処理中の場合（<codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合）。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">同期実行モードで処理が失敗した場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph class="+ topic/ph pr-d/codeph ">responder</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、実行が完了すると <codeph class="+ topic/ph pr-d/codeph ">compact</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     データベースの未使用領域を再要求します。オブジェクト（テーブル、インデックスまたはトリガー）がデータベースからドロップされた場合は、空のまま残されます。そのため、データベースファイルのサイズが必要以上に大きくなりますが、<codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> 操作の処理速度が向上します。時間の経過と共に、<codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> 操作および <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> 操作によってデータベースファイルの構造に断片化が生じ、データベースコンテンツへのディスクアクセスの速度が低下します。このメソッドは、空きページを削除し、テーブルのデータが連続するように整理を行い、データベースファイルの構造をクリーンアップすることで、データベースファイルのサイズを縮小します。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">compact()</codeph> 操作は、アタッチされているデータベースファイルに対しては実行できません。SQLConnection インスタンスによって開かれたメイン（元の）データベースファイルにのみ実行できます。この操作は、アクティブなトランザクションがある場合は失敗します。また、メモリ内のデータベースには影響を与えません。</p>
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.data:SQLConnection:compact_compact" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">compact</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:compact_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">非同期実行モードで処理が失敗した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:deanalyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">deanalyze</apiName><shortdesc class="- topic/shortdesc ">
     analyze() メソッドの呼び出して作成された統計情報をすべて削除します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">SQLConnection インスタンスがデータベースに接続されていない状態（<codeph class="+ topic/ph pr-d/codeph ">connected</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の状態）で、このメソッドが呼び出された場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">同期実行モードで処理が失敗した場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph class="+ topic/ph pr-d/codeph ">responder</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、実行が完了すると <codeph class="+ topic/ph pr-d/codeph ">deanalyze</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> メソッドの呼び出しで作成された統計情報をすべて削除します。
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> メソッドで作成された統計情報はデータベースの領域を使用するので、いくつかのインデックスやテーブルをドロップした後に <codeph class="+ topic/ph pr-d/codeph ">deanalyze()</codeph> を呼び出すことで、その領域を再要求することができます。</p>
     
     <p class="- topic/p ">この処理はアクティブなトランザクションには含まれていません。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/analyze()" class="- topic/link "><linktext class="- topic/linktext ">analyze()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:deanalyze_deanalyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">deanalyze</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:deanalyze_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">非同期実行モードで処理が失敗した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:detach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">detach</apiName><shortdesc class="- topic/shortdesc ">
     attach() メソッドを使用して SQLConnection インスタンスにアタッチされた追加のデータベースをデタッチします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">name</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、または空のストリング（<codeph class="+ topic/ph pr-d/codeph ">""</codeph>）が格納されている場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">SQLConnection インスタンスがデータベースに接続されていない（<codeph class="+ topic/ph pr-d/codeph ">connected</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph>）の状態でこのメソッドを呼び出した場合、または開いているトランザクション（<codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">true</codeph>）が SQLConnection インスタンスに存在する場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">同期実行モードで処理が失敗した場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">デタッチするデータベースの指定された名前です。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph class="+ topic/ph pr-d/codeph ">responder</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、実行が完了すると <codeph class="+ topic/ph pr-d/codeph ">detach</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> メソッドを使用して SQLConnection インスタンスにアタッチされた追加のデータベースをデタッチします。異なる名前を使用することで、同じデータベースを 2 回以上アタッチすることができます。この場合、1 つの接続をデタッチしても、残りの接続は維持されます。接続に開いているトランザクションが存在する場合（<codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合）、データベースをデタッチできません。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/attach()" class="- topic/link "><linktext class="- topic/linktext ">attach()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:detach_detach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">detach</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:detach_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">非同期実行モードで処理が失敗した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:getSchemaResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getSchemaResult</apiName><shortdesc class="- topic/shortdesc ">
     loadSchema() メソッド呼び出しの結果に対するアクセスを提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.data:SQLSchemaResult</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> メソッド呼び出しの結果に対するアクセスを提供します。<codeph class="+ topic/ph pr-d/codeph ">getSchemaResult()</codeph>  メソッドは、結果の先入れ先出しキューとして動作します。<codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> メソッドの呼び出しが完了するたびに（<codeph class="+ topic/ph pr-d/codeph ">schema</codeph> イベントが非同期実行モードで送出されるたびに）、新しい SQLSchemaResult オブジェクトがキューに追加されます。<codeph class="+ topic/ph pr-d/codeph ">getSchemaResult()</codeph> メソッドが呼び出されるたびに、最も古い結果（最初にキューに追加されたもの）が返され、キューから削除されます。キューに存在するオブジェクトがなくなると、<codeph class="+ topic/ph pr-d/codeph ">getSchemaResult()</codeph> は <codeph class="+ topic/ph pr-d/codeph ">null</codeph> を返します。
     
     <p class="- topic/p ">データベース接続が閉じられると、メソッドは <codeph class="+ topic/ph pr-d/codeph ">null</codeph> を返します。</p>
     
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">loadSchema()</linktext></link><link href="flash.data.xml#SQLConnection/event:schema" class="- topic/link "><linktext class="- topic/linktext ">スキーマイベント</linktext></link></related-links></apiOperation><apiOperation id="flash.data:SQLConnection:loadSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">loadSchema</apiName><shortdesc class="- topic/shortdesc ">
     接続されているデータベースまたはアタッチされている任意のデータベースからスキーマ情報をロードします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">SQLConnection インスタンスがデータベースに接続されていない状態（<codeph class="+ topic/ph pr-d/codeph ">connected</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の状態）でメソッドが呼び出された場合。
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定されている <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 引数の値が、許可されているいずれかの型ではない場合。
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">同期実行モードを使用している場合で、名前またはデータベースのパラメーターに無効な値が指定されている場合。
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Class</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ロードするスキーマのタイプを示します。 <codeph class="+ topic/ph pr-d/codeph ">null</codeph> 値（デフォルト）は、すべてのスキーマ情報をロードすることを示します。 このパラメーターに <codeph class="+ topic/ph pr-d/codeph ">null</codeph> 以外の値を指定すると、ロードするスキーマの範囲が絞り込まれ、不要な可能性のある情報が結果から排除されるので、処理がより効率的になります。 指定する値は、以下のいずれかのクラスのクラス名でなければなりません。
	 <ul class="- topic/ul "><li class="- topic/li ">SQLIndexSchema</li><li class="- topic/li ">SQLTableSchema</li><li class="- topic/li ">SQLTriggerSchema</li><li class="- topic/li ">SQLViewSchema</li></ul>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">どのリソースのスキーマをロードするかを示します。この値の使用方法は、指定されている <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 引数に基づきます。一般的には、テーブル名、インデックスまたはビュー名など、データベースオブジェクトの名前になります。値が指定されている場合、指定された名前を持つデータベースオブジェクトのスキーマ情報だけが、結果に含められます。
	 
	 <p class="- topic/p ">指定された値が有効でない場合は、<codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます（同期実行モードの場合はエラーがスローされます）。メソッドの説明で示されているように、<codeph class="+ topic/ph pr-d/codeph ">type</codeph> パラメーターの値は、指定されたオブジェクト型に対応していなければ有効な値とはなりません。</p>
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">name</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合は、指定されたタイプのすべてのスキーマが含められます。指定された値が有効な値でない場合は、<codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">main</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">スキーマをロードするデータベースの名前です。指定された値が有効な値でない場合は、<codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">includeColumnSchema</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">テーブルの列とビューのスキーマ情報を結果に含めるかどうかを示します。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph class="+ topic/ph pr-d/codeph ">responder</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、実行が完了すると <codeph class="+ topic/ph pr-d/codeph ">schema</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     接続されているデータベースまたはアタッチされている任意のデータベースからスキーマ情報をロードします。スキーマは、データベースのテーブル、列、インデックスおよびトリガーの構造を示すものです。
	 
     <p class="- topic/p ">ロードされているスキーマにアクセスするには、<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.getSchemaResult()</codeph> メソッドを使用します。</p>
	 
     <p class="- topic/p ">非同期実行モードでは、処理が正しく完了すると <codeph class="+ topic/ph pr-d/codeph ">schema</codeph> イベントが送出され、処理が失敗すると <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。</p>
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">type</codeph> および <codeph class="+ topic/ph pr-d/codeph ">name</codeph> の各パラメーター値の組み合わせによって、<codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> メソッドが生成するスキーマデータのタイプが決定されます。また、これにより、生成される SQLSchemaResult インスタンスの各プロパティの値も決定されます。次の表は、有効な <codeph class="+ topic/ph pr-d/codeph ">type</codeph> および <codeph class="+ topic/ph pr-d/codeph ">name</codeph> の組み合わせと、結果として生成されるスキーマデータを一覧にしたものです。</p>
	 
	 <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">type</codeph> 引数</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">name</codeph> 引数</entry><entry class="- topic/entry ">スキーマデータを取得する対象： </entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry ">データベースのすべてのオブジェクト（すべてのテーブル、ビュー、トリガーおよびインデックス)</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLIndexSchema</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry ">データベースのすべてのインデックス</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLIndexSchema</codeph></entry><entry class="- topic/entry ">有効なテーブル名</entry><entry class="- topic/entry ">指定されたテーブルに対して定義されているすべてのインデックス</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLIndexSchema</codeph></entry><entry class="- topic/entry ">有効なインデックス名</entry><entry class="- topic/entry ">指定されたインデックス</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTableSchema</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry ">データベースのすべてのテーブル</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTableSchema</codeph></entry><entry class="- topic/entry ">有効なテーブル名</entry><entry class="- topic/entry ">指定されたテーブル</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTriggerSchema</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry ">データベースのすべてのトリガー</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTriggerSchema</codeph></entry><entry class="- topic/entry ">有効なテーブル名</entry><entry class="- topic/entry ">指定されたテーブルに関連付けられているすべてのトリガー</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTriggerSchema</codeph></entry><entry class="- topic/entry ">有効なビュー名</entry><entry class="- topic/entry ">指定されたビューに関連付けられているすべてのトリガー </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTriggerSchema</codeph></entry><entry class="- topic/entry ">有効なトリガー名</entry><entry class="- topic/entry ">指定されたトリガー </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLViewSchema</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry ">データベースのすべてのビュー</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLViewSchema</codeph></entry><entry class="- topic/entry ">有効なビュー名</entry><entry class="- topic/entry ">指定されたビュー </entry></row></tbody></tgroup></adobetable>
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">type</codeph> 引数および <codeph class="+ topic/ph pr-d/codeph ">name</codeph> 引数の組み合わせが、指定されている組み合わせに対応していない場合は、<codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されるか（非同期実行モードの場合）、例外がスローされます（同期実行モードの場合）。例えば、<codeph class="+ topic/ph pr-d/codeph ">type</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">SQLViewSchema</codeph> で、<codeph class="+ topic/ph pr-d/codeph ">name</codeph> 引数がビュー名ではなくテーブル名の場合、指定された名前を持つ指定された型のオブジェクトがデータベースに含まれていないことを示すエラーが発生します。</p>
	 
	 
	 <p class="- topic/p ">データベースが空の場合（データベースにテーブル、ビュー、トリガーまたはインデックスが含まれていない場合）、<codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> メソッドを呼び出すとエラーが発生します。</p>
	 
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/getSchemaResult()" class="- topic/link "><linktext class="- topic/linktext ">getSchemaResult()</linktext></link><link href="flash.data.xml#SQLConnection/event:schema" class="- topic/link "><linktext class="- topic/linktext ">スキーマイベント</linktext></link><link href="flash.data.xml#SQLIndexSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLIndexSchema</linktext></link><link href="flash.data.xml#SQLTableSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTableSchema</linktext></link><link href="flash.data.xml#SQLTriggerSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTriggerSchema</linktext></link><link href="flash.data.xml#SQLViewSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLViewSchema</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:loadSchema_schema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">schema</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:loadSchema_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が正常に完了しなかった場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">処理が正常に完了しなかった場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:openAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">openAsync</apiName><shortdesc class="- topic/shortdesc ">
     ファイルシステムの指定された場所にあるデータベースファイルを非同期接続で開くか、その場所に新しいデータベースファイルを作成して開くか、メモリ内データベースを作成して開きます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">SQLConnection インスタンスに、開かれているデータベースへの接続が既にある場合（<codeph class="+ topic/ph pr-d/codeph ">connected</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合）。
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">reference</codeph> パラメーターに指定された値が、flash.filesystem.File インスタンスでない場合。
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ではなく、その <codeph class="+ topic/ph pr-d/codeph ">length</codeph> が 16 バイトではない場合
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">reference</codeph> パラメーターが <codeph class="+ topic/ph pr-d/codeph ">null</codeph> で、<codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ではない場合
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">無効な <codeph class="+ topic/ph pr-d/codeph ">pageSize</codeph> パラメーターが指定された場合。これにはモードが <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph> である場合にページサイズを渡すことも含まれます。
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">reference</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">開かれているデータベースファイルの場所です。この値は、flash.filesystem.File インスタンスでなければなりません。パラメーターの値が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、メモリ内データベースが作成され、開かれます。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">openMode</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">create</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データベースを開く方法を示します。値は SQLMode クラスに定義されている任意の定数です。デフォルト値は <codeph class="+ topic/ph pr-d/codeph ">SQLMode.CREATE</codeph> で、指定された場所にデータベースファイルが存在しない場合は、新たに作成することを示します。<codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> が <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph> で、指定されたファイルが存在しない場合は、error イベントが送出されます。<codeph class="+ topic/ph pr-d/codeph "/>このパラメーターは、<codeph class="+ topic/ph pr-d/codeph ">reference</codeph> パラメーターが <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合は無視されます。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。<codeph class="+ topic/ph pr-d/codeph ">responder</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、実行が完了すると <codeph class="+ topic/ph pr-d/codeph ">open</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">autoCompact</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データベースの未使用領域を自動的に再要求するかどうかを示します。このパラメーターは、新規データベースファイルを作成した場合か、テーブルが作成されていないデータベースファイルを開いた場合のみ有効です。デフォルトでは、削除されたデータが使用していた領域はデータベースファイルに残り、必要に応じて再使用されます。このパラメーターを <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定すると、データベースが自動的に未使用領域を再要求します。データがデータベースに書き込まれるたびに追加の処理が必要になるため、これはパフォーマンスに悪影響を与える可能性があります。また、時間が経過するとデータベースのデータが断片化する原因にもなります。任意のタイミングでデータベースファイルの未使用領域をデータベースに強制的に再要求させ、データベースファイルの最適化を行うには、<codeph class="+ topic/ph pr-d/codeph ">compact()</codeph> メソッドを使用します。
	 
	 <p class="- topic/p ">このパラメーターは、<codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> パラメーターが <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph> である場合には無視されます。</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pageSize</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1024</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データベースのページサイズ（バイト単位）を示します。このパラメーターは、新規データベースファイルを作成した場合か、テーブルが作成されていないデータベースファイルを開いた場合のみ有効です。値は 2 の累乗で、512 以上 32768 以下でなければなりません。初期設定値は 1024 バイトです。この値は、任意のテーブルを作成する前にのみ設定できます。テーブルの作成後にこの値を変更しようとするとエラーが発生します。 
     
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">encryptionKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データベースファイルの暗号化キー。<codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> の呼び出しがデータベースを作成する場合、データベースは暗号化されて、指定したキーがデータベースの暗号化キーとして使用されます。呼び出しによって暗号化されたデータベースが開かれる場合、値はそのデータベースの暗号化キーと一致している必要があり、一致しない場合はエラーが発生します。開かれるデータベースが暗号化されていない場合は、値として <codeph class="+ topic/ph pr-d/codeph ">null</codeph> （デフォルト）を指定する必要があります。指定しないとエラーが発生します。
	 
	 <p class="- topic/p ">有効な暗号化キーは 16 バイト長です。メモリ内データベースは暗号化できないので、このパラメーターを <codeph class="+ topic/ph pr-d/codeph ">null</codeph> にする必要があります（<codeph class="+ topic/ph pr-d/codeph ">reference</codeph> パラメーターの値が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合）。</p>
	 
	 <p class="- topic/p ">暗号化されたデータベースを開く場合、指定した暗号化キーがデータベースの暗号化キーと一致していないと、SQLErrorEvent が送出されます。イベントオブジェクトの <codeph class="+ topic/ph pr-d/codeph ">error</codeph> プロパティには、SQLError インスタンスが設定されています。その SQLError オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">errorID</codeph> プロパティは 3138（"開かれたファイルはデータベースファイルではない"）です。</p>
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> パラメーターは、AIR 1.5 以降で使用できます。</p>
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ファイルシステムの指定された場所にあるデータベースファイルを非同期接続で開くか、その場所に新しいデータベースファイルを作成して開くか、メモリ内データベースを作成して開きます。このメソッドを使用してデータベースを開いた場合、データベースを作成および開く処理は、この SQLConnection インスタンスを使用して実行される他の処理（この SQLConnection インスタンスに関連付けられている SQLStatement インスタンスが実行するステートメントの実行など）と同様、<i class="+ topic/ph hi-d/i ">非同期的</i>に実行されます。同期的に処理を実行するには、<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> メソッドを使用してデータベース接続を開きます。
     
	 <p class="- topic/p ">データベースが接続されたら、<xref href="SQLStatement.html" class="- topic/xref ">SQLStatement</xref> インスタンスを使用して SQL コマンドを実行します。データベースレベルの操作（トランザクションの開始または終了、スキーマ情報の読み込み、その他の操作など）を実行するには、SQLConnection インスタンスを使用します。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> メソッドを使用して接続されたデータベースには、自動的に "main" というデータベース名が割り当てられます。この名前は、SQL ステートメントで明示的にテーブル名を修飾する場合に使用でき、<codeph class="+ topic/ph pr-d/codeph ">[database-name].[table-name]</codeph> という書式を使用します。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link><link href="flash.data.xml#SQLMode" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLMode</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:openAsync_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:openAsync_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が失敗したときに送出されます。処理に失敗した場合、接続が開いたままになることはありません。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">処理が失敗したときに送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><shortdesc class="- topic/shortdesc ">
     ファイルシステムの指定された場所にあるデータベースファイルを同期接続で開くか、その場所に新しいデータベースファイルを作成して開くか、メモリ内データベースを作成して開きます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">SQLConnection インスタンスに、開かれているデータベースへの接続が既にある場合（<codeph class="+ topic/ph pr-d/codeph ">connected</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合）。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が失敗した場合。処理に失敗した場合、接続が開いたままになることはありません。
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">reference</codeph> パラメーターに指定された値が、flash.filesystem.File インスタンスでない場合。
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ではなく、その <codeph class="+ topic/ph pr-d/codeph ">length</codeph> が 16 バイトではない場合
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">reference</codeph> パラメーターが <codeph class="+ topic/ph pr-d/codeph ">null</codeph> で、<codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ではない場合
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">無効な <codeph class="+ topic/ph pr-d/codeph ">pageSize</codeph> パラメーターが指定された場合。これにはモードが <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph> である場合にページサイズを渡すことも含まれます。
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">reference</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">開かれているデータベースファイルの場所です。この値は、flash.filesystem.File インスタンスでなければなりません。パラメーターの値が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、メモリ内データベースが作成され、開かれます。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">openMode</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">create</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データベースを開く方法を示します。値は SQLMode クラスに定義されている任意の定数です。デフォルト値は <codeph class="+ topic/ph pr-d/codeph ">SQLMode.CREATE</codeph> で、指定された場所にデータベースファイルが存在しない場合は、新たに作成することを示します。<codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> が <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph> で、指定されたファイルが存在しない場合は、エラーが発生します。このパラメーターは、<codeph class="+ topic/ph pr-d/codeph ">reference</codeph> パラメーターが <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合は無視されます。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">autoCompact</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データベースの未使用領域を自動的に再要求するかどうかを示します。このパラメーターは、新規データベースファイルを作成した場合か、テーブルが作成されていないデータベースファイルを開いた場合のみ有効です。デフォルトでは、削除されたデータが使用していた領域はデータベースファイルに残り、必要に応じて再使用されます。このパラメーターを <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定すると、データベースが自動的に未使用領域を再要求します。データがデータベースに書き込まれるたびに追加の処理が必要になるため、これはパフォーマンスに悪影響を与える可能性があります。また、時間が経過するとデータベースのデータが断片化する原因にもなります。<codeph class="+ topic/ph pr-d/codeph ">compact()</codeph> メソッドを使用すると、任意のタイミングでデータベースファイルの未使用領域をデータベースに強制的に再要求させ、データベースファイルの最適化を行うことができます。
	 
	 <p class="- topic/p ">このパラメーターは、<codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> パラメーターが <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph> である場合には無視されます。</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pageSize</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1024</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データベースのページサイズ（バイト単位）を示します。このパラメーターは、新規データベースファイルを作成した場合か、テーブルが作成されていないデータベースファイルを開いた場合のみ有効です。値は 2 の累乗で、512 以上 32768 以下でなければなりません。初期設定値は 1024 バイトです。この値は、任意のテーブルを作成する前にのみ設定できます。テーブルの作成後にこの値を変更しようとするとエラーが発生します。 
     
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">encryptionKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データベースファイルの暗号化キー。<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> の呼び出しがデータベースを作成する場合、データベースは暗号化されて、指定したキーがデータベースの暗号化キーとして使用されます。呼び出しによって暗号化されたデータベースが開かれる場合、値はそのデータベースの暗号化キーと一致している必要があり、一致しない場合はエラーが発生します。開かれるデータベースが暗号化されていない場合、または暗号化されないデータベースを作成する場合は、値として <codeph class="+ topic/ph pr-d/codeph ">null</codeph> （デフォルト）を指定する必要があります。指定しないとエラーが発生します。
	 
	 <p class="- topic/p ">有効な暗号化キーは 16 バイト長です。メモリ内データベースは暗号化できないので、このパラメーターを <codeph class="+ topic/ph pr-d/codeph ">null</codeph> にする必要があります（<codeph class="+ topic/ph pr-d/codeph ">reference</codeph> パラメーターの値が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合）。</p>
	 
	 <p class="- topic/p ">暗号化されたデータベースを開く場合、指定した暗号化キーがデータベースの暗号化キーと一致していないと、SQLError 例外がスローされます。その場合、SQLError オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">errorID</codeph> プロパティは 3138（"開かれたファイルはデータベースファイルではない"）です。</p>
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> パラメーターは、AIR 1.5 以降で使用できます。</p>
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ファイルシステムの指定された場所にあるデータベースファイルを同期接続で開くか、その場所に新しいデータベースファイルを作成して開くか、メモリ内データベースを作成して開きます。このメソッドを使用してデータベースを開いた場合、データベースを作成および開く処理は、この SQLConnection インスタンスを使用して実行される他の処理（この SQLConnection インスタンスに関連付けられている SQLStatement インスタンスが実行するステートメントの実行など）と同様、<i class="+ topic/ph hi-d/i ">同期的</i>に実行されます。非同期的に処理を実行するには、<codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> メソッドを使用してデータベース接続を開きます。
	 
	 <p class="- topic/p ">データベースが接続されたら、<xref href="SQLStatement.html" class="- topic/xref ">SQLStatement</xref> インスタンスを使用して SQL コマンドを実行します。データベースレベルの操作（トランザクションの開始または終了、スキーマ情報の読み込み、その他の操作など）を実行するには、SQLConnection インスタンスを使用します。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">open()</codeph> メソッドを使用して接続したデータベースには、自動的に「main」というデータベース名が割り当てられます。この名前は、SQL ステートメントで明示的にテーブル名を修飾する場合に使用でき、<codeph class="+ topic/ph pr-d/codeph ">[database-name].[table-name]</codeph> という書式を使用します。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link><link href="flash.data.xml#SQLMode" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLMode</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:open_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:reencrypt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">reencrypt</apiName><shortdesc class="- topic/shortdesc ">
	 暗号化されたデータベースの暗号化キーを変更します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">newEncryptionKey</codeph> の値が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、またはその <codeph class="+ topic/ph pr-d/codeph ">length</codeph> が 16 バイトではない場合。
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">接続が開いていない場合、または開いているトランザクションがある場合。
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">同期実行モードで処理が失敗した場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">newEncryptionKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データベースの新しい暗号化キーが格納されている ByteArray。有効な暗号化キーは 16 バイト長です。
	 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。<codeph class="+ topic/ph pr-d/codeph ">responder</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、実行が完了すると <codeph class="+ topic/ph pr-d/codeph ">reencrypt</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 暗号化されたデータベースの暗号化キーを変更します。このメソッドは、メインデータベース（<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> メソッドを使用して接続されたデータベース）の暗号化キーのみを変更します。<codeph class="+ topic/ph pr-d/codeph ">reencrypt()</codeph> は、作成時に暗号化されたデータベースに対してのみ呼び出すことができます。いったん暗号化して作成したデータベースの暗号化を解除することはできません。同様に、暗号化しないで作成したデータベースを、後から暗号化することはできません。
	 
	 <p class="- topic/p ">再暗号化操作は、専用のトランザクションで実行します。再暗号化処理を中断した場合、データベースはトランザクションをロールバックし、暗号化キーは変更されません。</p> 
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/attach()" class="- topic/link "><linktext class="- topic/linktext ">attach()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:reencrypt_reencrypt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">reencrypt</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:reencrypt_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が失敗したときに送出されます。
     
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">処理が失敗したときに送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:releaseSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">releaseSavepoint</apiName><shortdesc class="- topic/shortdesc ">
	 このメソッドでは、直近のセーブポイントまたは名前が指定されている場合は該当する名前のセーブポイント以降に実行された SQL 操作をコミットします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーター値が空の文字列（<codeph class="+ topic/ph pr-d/codeph ">""</codeph>）の場合。
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">SQLConnection インスタンスがデータベースに接続されていない（<codeph class="+ topic/ph pr-d/codeph ">connected</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph>）の状態でメソッドを呼び出した場合、または現在開いているトランザクションが存在しない場合（<codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の場合）。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">同期実行モードで処理が失敗した場合。
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">セーブポイントの名前を示す文字列で、このセーブポイント以降の SQL 操作がすべてコミットされます。このパラメーターに値が指定されていない、または <codeph class="+ topic/ph pr-d/codeph ">null</codeph>（デフォルト値）の場合は、名前のない直近の（<codeph class="+ topic/ph pr-d/codeph ">name</codeph> 値を指定せずに <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> を呼び出して作成した）セーブポイントが使用されます。<codeph class="+ topic/ph pr-d/codeph ">name</codeph> 値には、空の文字列（<codeph class="+ topic/ph pr-d/codeph ">""</codeph>）を使用できません。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が成功または失敗した場合に呼び出されるメソッドを指定する応答オブジェクトです。非同期実行モードでは、responder 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、実行が完了すると <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。 
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 このメソッドでは、直近のセーブポイントまたは名前が指定されている場合は該当する名前のセーブポイント以降に実行された SQL 操作をコミットします。
	 
	 <p class="- topic/p ">変更を永続的にデータベースに保存するには、トランザクション全体がコミットされる必要があります。<codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> メソッドを使用してトランザクションを開始した場合、トランザクション全体をコミットするには、<codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> メソッドを呼び出す必要があります。<codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> が <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の状態で、<codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> を呼び出してトランザクションを開始した場合、トランザクション全体を終了するには、<codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> メソッドを呼び出すか、トランザクションの最初のセーブポイントを対象として <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> を呼び出します。</p>
	 
	 <p class="- topic/p ">コードから <codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph> メソッドを呼び出すと、トランザクションがロールバックされる前に <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> が呼び出されたかどうかに関わらず、トランザクション内のすべての変更が完全に破棄されます。</p>
	 
	 <p class="- topic/p ">パラメーターなしで（または <codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターに <codeph class="+ topic/ph pr-d/codeph ">null</codeph> を指定して）このメソッドが呼び出されると、名前のない直近のセーブポイント（<codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターを指定せずに <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> を呼び出して作成された直近のセーブポイント）以降に実行されたデータベースの変更がコミットされます。例えば、<codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> メソッドが 3 回呼び出されたとすると、3 つのセーブポイントが設定されます。その時点で <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> を呼び出すと、3 番目（最新）のセーブポイント以降に実行された SQL 操作がコミットされます。</p>
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターに値が指定されている場合、このメソッドは、指定された名前のセーブポイント以降に実行されたすべての SQL 操作をコミットします。指定されたセーブポイントよりも新しいセーブポイントが他に作成されている場合、これらのセーブポイント以降に実行された操作もコミットされます。</p>
	 
	 <p class="- topic/p ">セーブポイントが解放またはロールバックされると、該当するセーブポイントとそれ以降に設定されたセーブポイントは削除されます。<codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> または<codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> を呼び出してセーブポイントを削除した後に、コードから SQL 操作を実行すると、追加された操作は、残っている直近のセーブポイントに属します（つまり、これらの操作は、削除されたセーブポイントよりも前に作成された直近のセーブポイントに属します）。セーブポイントが残っていない場合、操作はメイントランザクションに属します。</p>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:releaseSavepoint_releaseSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">releaseSavepoint</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:releaseSavepoint_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">非同期実行モードで処理が失敗した場合に送出されます。
     
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:removeEventListener" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">removeEventListener</apiName><shortdesc class="- topic/shortdesc ">
     
	EventDispatcher オブジェクトからリスナーを削除します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">イベントのタイプです。
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">listener</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">削除するリスナーオブジェクトです。
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useCapture</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
	<ph class="- topic/ph ">リスナーが、キャプチャ段階、またはターゲットおよびバブリング段階に対して登録されたかどうかを示します。リスナーがキャプチャ段階だけでなくターゲット段階とバブリング段階にも登録されている場合は、<codeph class="+ topic/ph pr-d/codeph ">removeEventListener()</codeph> を 2 回呼び出して両方のリスナーを削除する必要があります。1 回は <codeph class="+ topic/ph pr-d/codeph ">useCapture()</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定し、もう 1 回は <codeph class="+ topic/ph pr-d/codeph ">useCapture()</codeph> を <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定する必要があります。</ph>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
	EventDispatcher オブジェクトからリスナーを削除します。対応するリスナーが EventDispatcher オブジェクトに登録されていない場合は、このメソッドを呼び出しても効果はありません。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:SQLConnection:rollbackToSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">rollbackToSavepoint</apiName><shortdesc class="- topic/shortdesc ">
	 直近のセーブポイントまたは名前が指定されている場合は該当する名前のセーブポイント以降に実行されたすべての SQL 操作をロールバックします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーター値が空の文字列（<codeph class="+ topic/ph pr-d/codeph ">""</codeph>）の場合。
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">SQLConnection インスタンスがデータベースに接続されていない（<codeph class="+ topic/ph pr-d/codeph ">connected</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph>）の状態でメソッドを呼び出した場合、または現在開いているトランザクションが存在しない場合（<codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の場合）。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">同期実行モードで処理が失敗した場合。
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">セーブポイントの名前を示す文字列で、データベースの状態がこのセーブポイントまでロールバックされます。このパラメーターに値が指定されていない、または <codeph class="+ topic/ph pr-d/codeph ">null</codeph>（デフォルト値）の場合は、名前のない直近の（<codeph class="+ topic/ph pr-d/codeph ">name</codeph> 値を指定せずに <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> を呼び出して作成した）セーブポイントが使用されます。<codeph class="+ topic/ph pr-d/codeph ">name</codeph> 値には、空の文字列（<codeph class="+ topic/ph pr-d/codeph ">""</codeph>）を使用できません。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が成功または失敗した場合に呼び出されるメソッドを指定する応答オブジェクトです。非同期実行モードでは、responder 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、実行が完了すると <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。 
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 直近のセーブポイントまたは名前が指定されている場合は該当する名前のセーブポイント以降に実行されたすべての SQL 操作をロールバックします。
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> メソッドを呼び出してトランザクション全体をコミットすると、<codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> メソッドでまだロールバックされていないトランザクション内の変更はすべて、データベースに永続的に保存されます。また、<codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph> メソッドを呼び出すと、トランザクションがロールバックされる前に個々のセーブポイントが解放（コミット）されているかどうかに関わらず、すべての変更が完全に破棄されます。</p>
	 
	 <p class="- topic/p ">パラメーターなしで（または <codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターに <codeph class="+ topic/ph pr-d/codeph ">null</codeph> を指定して）このメソッドが呼び出されると、名前のない直近のセーブポイント（<codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーター値を指定せずに実行した直近の <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> 呼び出し）以降に行われたデータベースの変更がすべてロールバックされます。</p>
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターに値が指定されている場合、このメソッドは、指定された名前のセーブポイント以降に実行されたすべての SQL 操作をロールバックします。指定されたセーブポイントよりも新しいセーブポイントが他に作成されている場合、これらのセーブポイント以降に実行された操作もロールバックされます。</p>
	 
	 <p class="- topic/p ">セーブポイントが解放またはロールバックされると、該当するセーブポイントとそれ以降に設定されたセーブポイントは削除されます。<codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> または<codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> を呼び出してセーブポイントを削除した後に、コードから SQL 操作を実行すると、追加された操作は、残っている直近のセーブポイントに属します（つまり、これらの操作は、削除されたセーブポイントよりも前に作成された直近のセーブポイントに属します）。セーブポイントが残っていない場合、操作はメイントランザクションに属します。</p>
	 
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:rollbackToSavepoint_rollbackToSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rollbackToSavepoint</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:rollbackToSavepoint_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">非同期実行モードで処理が失敗した場合に送出されます。
     
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:rollback" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">rollback</apiName><shortdesc class="- topic/shortdesc ">
     begin() メソッドを使用して作成された既存のトランザクションをロールバックします。つまり、そのトランザクションの SQL ステートメントによる変更が、すべて破棄されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">SQLConnection インスタンスがデータベースに接続されていない（<codeph class="+ topic/ph pr-d/codeph ">connected</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph>）の状態でメソッドを呼び出した場合、または現在開いているトランザクションが存在しない場合（<codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の場合）。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">同期実行モードで処理が失敗した場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph class="+ topic/ph pr-d/codeph ">responder</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、実行が完了すると <codeph class="+ topic/ph pr-d/codeph ">rollback</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> メソッドを使用して作成された既存のトランザクションをロールバックします。つまり、そのトランザクションの SQL ステートメントによる変更が、すべて破棄されます。
     
	 <p class="- topic/p ">中間セーブポイントをトランザクション内で設定するには、<codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> メソッドを呼び出します。セーブポイントを使用すると、<codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> を呼び出すことにより、トランザクションの一部をコミットまたはロールバックできます。ただし、<codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph> メソッドを呼び出すと、トランザクションがロールバックされる前に個々のセーブポイントが解放（コミット）されているかどうかに関わらず、トランザクション内のすべての変更が完全に破棄されます。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">begin()</linktext></link><link href="flash.data.xml#SQLConnection/commit()" class="- topic/link "><linktext class="- topic/linktext ">commit()</linktext></link><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:rollback_rollback" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rollback</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:rollback_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">非同期実行モードで処理が失敗した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:setSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setSavepoint</apiName><shortdesc class="- topic/shortdesc ">
	 データベーストランザクション内でブックマークのように機能するセーブポイントを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーター値が空の文字列（<codeph class="+ topic/ph pr-d/codeph ">""</codeph>）の場合。
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">SQLConnection インスタンスがデータベースに接続されていない状態（<codeph class="+ topic/ph pr-d/codeph ">connected</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の状態）でメソッドが呼び出された場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">同期実行モードで処理が失敗した場合。
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">セーブポイントの名前を示す文字列です。このパラメーターに値が指定されていない、または <codeph class="+ topic/ph pr-d/codeph ">null</codeph>（デフォルト値）の場合は、<codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> を次回に呼び出すときに <codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターを指定しないと、名前のないセーブポイント以降に実行された SQL 操作がコミットまたはロールバックされます。
	 <p class="- topic/p ">前のセーブポイントと同じ名前を指定した場合、<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.releaseSavepoint()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.rollbackToSavepoint()</codeph> を次回に呼び出したときに、この名前の付いた直近のセーブポイント以降に行われた変更がコミットまたはロールバックされます。</p>
	 <p class="- topic/p "> <codeph class="+ topic/ph pr-d/codeph ">name</codeph> 値には、空の文字列（<codeph class="+ topic/ph pr-d/codeph ">""</codeph>）を使用できません。</p>
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が成功または失敗した場合に呼び出されるメソッドを指定する応答オブジェクトです。非同期実行モードでは、responder 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、実行が完了すると <codeph class="+ topic/ph pr-d/codeph ">setSavepoint</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。 
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 データベーストランザクション内でブックマークのように機能するセーブポイントを作成します。トランザクション内のポイントを示すセーブポイントです。<codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> や <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> メソッドを使用すると、セーブポイント間で実行された一連の SQL 操作を他の操作とは別にコミットまたはロールバックできます。この方法では、セーブポイントを使用することによって、一連の SQL 操作をネストしたトランザクションとして扱えます。
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> メソッドの呼び出し時に、<codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> メソッドを呼び出してトランザクションをまだ開いていない場合は、このメソッドを呼び出すことによってトランザクションが開始され、その際にセーブポイントが作成されます。トランザクションが既に開いている場合は、<codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> を呼び出すと、トランザクション内にセーブポイントが作成されます。</p>
	 
	 <p class="- topic/p ">変更を永続的にデータベースに保存するには、トランザクション全体がコミットされる必要があります。<codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> メソッドを使用してトランザクションを開始した場合、トランザクション全体をコミットするには、<codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> メソッドを呼び出す必要があります。<codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> が <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の状態で、<codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> を呼び出してトランザクションを開始した場合、トランザクション全体を終了するには、<codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> メソッドを呼び出します。または、トランザクションを開始したセーブポイントを対象として、<codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> を呼び出すと、トランザクションは自動的に終了します。</p>
	 
	 <p class="- topic/p ">セーブポイント名を指定するには、<codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターに値を設定します。これにより、指定のセーブポイント以降に行われたすべての変更をロールバックまたはコミットできます。名前が指定されていない場合（デフォルト）は、名前のないセーブポイントが作成されます。</p>
	 
	 <p class="- topic/p ">セーブポイントが解放またはロールバックされると、該当するセーブポイントとそれ以降に設定されたセーブポイントは削除されます。<codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> または<codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> を呼び出してセーブポイントを削除した後に、コードから SQL 操作を実行すると、追加された操作は、残っている直近のセーブポイントに属します（つまり、これらの操作は、削除されたセーブポイントよりも前に作成された直近のセーブポイントに属します）。セーブポイントが残っていない場合、操作はメイントランザクションに属します。</p>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">begin()</linktext></link><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/commit()" class="- topic/link "><linktext class="- topic/linktext ">commit()</linktext></link><link href="flash.data.xml#SQLConnection/rollback()" class="- topic/link "><linktext class="- topic/linktext ">rollback()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:setSavepoint_setSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">setSavepoint</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:setSavepoint_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">非同期実行モードで処理が失敗した場合に送出されます。
     
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.data:SQLConnection:autoCompact:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">autoCompact</apiName><shortdesc class="- topic/shortdesc ">
     現在のデータベースが最初に作成されたときに、自動縮小が有効になっていたかどうかを示します（autoCompact パラメーターに指定されていた値で、データベースを作成した open() または openAsync() の呼び出しで指定したものです）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     現在のデータベースが最初に作成されたときに、自動縮小が有効になっていたかどうかを示します（<codeph class="+ topic/ph pr-d/codeph ">autoCompact</codeph> パラメーターに指定されていた値で、データベースを作成した <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> の呼び出しで指定したものです）。このプロパティが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合、各書き込み処理の後に、未使用領域がデータベースファイルから自動的に削除され、データベースファイルのサイズが小さく保たれます。このプロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の場合、削除されたデータが占有していた領域はデータベースファイルに残り、必要に応じて再使用されます。<codeph class="+ topic/ph pr-d/codeph ">autoCompact</codeph><codeph class="+ topic/ph pr-d/codeph "/> が false であっても、<codeph class="+ topic/ph pr-d/codeph ">compact()</codeph> メソッドを呼び出すことでデータベースに強制的に未使用領域を再要求させることができます。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">connected</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の場合、このプロパティは <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定されます。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:cacheSize:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">cacheSize</apiName><shortdesc class="- topic/shortdesc ">
     この接続に対するキャッシュサイズへのアクセスを提供します。これは、一度にメモリに確保される最大のデータベースディスクページ数を表します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">SQLConnection インスタンスがデータベースに接続されていない状態（<codeph class="+ topic/ph pr-d/codeph ">connected</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の状態）で、このプロパティを設定しようとした場合、またはトランザクションが現在開いている場合（<codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合）。
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     この接続に対するキャッシュサイズへのアクセスを提供します。これは、一度にメモリに確保される最大のデータベースディスクページ数を表します。各ページは、約 1.5 KB のメモリを使用します。この使用量は、<codeph class="+ topic/ph pr-d/codeph ">pageSize</codeph> パラメーター（データベースを作成した <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> メソッド呼び出しで指定）で指定されている値によって異なります。デフォルトのキャッシュサイズは 2000 です。データベースの行を大量に変更する <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph> 操作または <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> 操作をアプリケーションで実行する場合は、キャッシュサイズを増やすことで処理速度が向上する場合があります。ただし、より多くのメモリが消費されます。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:columnNameStyle:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">columnNameStyle</apiName><shortdesc class="- topic/shortdesc ">
     SELECT ステートメントの結果で、列名をどのように報告するかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">SQLConnection インスタンスがデータベースに接続されていない状態（<codeph class="+ topic/ph pr-d/codeph ">connected</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の状態）で、このプロパティを設定しようとした場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントの結果で、列名をどのように報告するかを示します。
     
     <p class="- topic/p ">SQLColumnNameStyle クラスで定義されている定数は、このプロパティに対して有効な値を表します。</p>
     
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLColumnNameStyle.LONG</codeph> は、列名が <codeph class="+ topic/ph pr-d/codeph ">[table-name]_[column-name]</codeph> の形式で返されることを示します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLColumnNameStyle.SHORT</codeph> は、列名が <codeph class="+ topic/ph pr-d/codeph ">[column-name]</codeph> の形式に指定されていることを示します。同じ名前を持つ複数の列が存在する場合、その名前を持つプロパティが 1 つだけが結果オブジェクトに追加されます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLColumnNameStyle.DEFAULT</codeph> はデフォルト値です。この値が使用されている場合、結果の列名は、同じ列名を持つ <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントのテーブル数に従って形式が設定されます。<codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントにテーブルが 1 つしか含まれない場合は、<codeph class="+ topic/ph pr-d/codeph ">[column-name]</codeph> という短い名前の形式が使用されます。また、<codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントに複数のテーブルが結合して含まれ、同じ列名の存在により名前の競合が発生している場合は、それぞれの名前を識別できるように <codeph class="+ topic/ph pr-d/codeph ">[table-name]_[column-name]</codeph> という長い名前の形式が使用されます。</li></ul>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLColumnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnNameStyle</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:connected:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">connected</apiName><shortdesc class="- topic/shortdesc ">
     SQLConnection インスタンスに、データベースファイルへの開いている接続があるかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     SQLConnection インスタンスに、データベースファイルへの開いている接続があるかどうかを示します。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:inTransaction:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">inTransaction</apiName><shortdesc class="- topic/shortdesc ">
	 この接続が、現在トランザクションに含まれているかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 この接続が、現在トランザクションに含まれているかどうかを示します。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">begin()</linktext></link><link href="flash.data.xml#SQLConnection/commit()" class="- topic/link "><linktext class="- topic/linktext ">commit()</linktext></link><link href="flash.data.xml#SQLConnection/rollback()" class="- topic/link "><linktext class="- topic/linktext ">rollback()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:lastInsertRowID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">lastInsertRowID</apiName><shortdesc class="- topic/shortdesc ">
     SQL INSERT ステートメントによって最後に作成された行識別子です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> ステートメントによって最後に作成された行識別子です。行識別子は、データベース内のテーブルの行を一意に識別するために使用されます。この値は、データベースによって頻繁に生成されます。
	 
     <p class="- topic/p ">データベースが接続されていない場合、または <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> ステートメントが実行されていない場合、値はゼロになります。</p>
	 
	 <p class="- topic/p ">単一の SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> ステートメントを実行した場合、挿入された行の行識別子は、<codeph class="+ topic/ph pr-d/codeph ">lastInsertRowID</codeph> プロパティ（SQLStatement オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> メソッドから返される SQLResult オブジェクトのプロパティ）を通じて取得できます（SQLStatement の <codeph class="+ topic/ph pr-d/codeph ">result</codeph> イベントが送出された後に getResult() メソッドが呼び出された場合）。</p>
	 
	 <p class="- topic/p ">主キーと生成される行識別子の詳細については、付録「<xref href="http://www.adobe.com/go/learn_as3_sqlsupportdb_jp" scope="external" class="- topic/xref ">ローカルデータベースでの SQL サポート</xref>」の「<xref href="http://www.adobe.com/go/learn_as3_sqlsupportdb_data_jp" scope="external" class="- topic/xref ">CREATE TABLE</xref>」セクションおよび「<xref href="http://www.adobe.com/go/learn_as3_sqlsupportdb_statements_jp" scope="external" class="- topic/xref ">式</xref>」セクションを参照してください。</p>
     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLResult/lastInsertRowID" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLResult.lastInsertRowID</linktext></link><link href="flash.events.xml#SQLUpdateEvent/rowID" class="- topic/link "><linktext class="- topic/linktext ">flash.events.SQLUpdateEvent.rowID</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:pageSize:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">pageSize</apiName><shortdesc class="- topic/shortdesc ">
     現在のデータベースが最初に作成されたときに指定された、データベースのページサイズ（バイト単位）を示します（データベースを作成した open() または openAsync() の呼び出しで pageSize パラメーターに指定されていた値）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     現在のデータベースが最初に作成されたときに指定された、データベースのページサイズ（バイト単位）を示します（<codeph class="+ topic/ph pr-d/codeph ">pageSize</codeph> パラメーターに指定されていた値で、データベースを作成した <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> の呼び出しで指定します）。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">connected</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph> の場合、このプロパティの値は 0 になります。</p>
     
	 <p class="- topic/p ">データベースのページサイズは、<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> メソッドを使用すると、データベースに最初のテーブルが作成される前までは変更できます。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:totalChanges:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">totalChanges</apiName><shortdesc class="- topic/shortdesc ">
     データベースへの接続が開かれてからデータに加えられた変更数の合計が含まれます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     データベースへの接続が開かれてからデータに加えられた変更数の合計が含まれます。<codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>、<codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> および <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph> の各ステートメントによって加えられた変更の追跡に加え、この値にはトリガーによる変更も含まれます。
	 
	 <p class="- topic/p ">データベース接続が閉じられると、この値は 0 にリセットされます。SQLConnection インスタンスがデータベースに接続していない場合、値は 0 になります。</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLResult/rowsAffected" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLResult.rowsAffected</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLTriggerSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLTriggerSchema</apiName><shortdesc class="- topic/shortdesc ">
 SQLTriggerSchema インスタンスは、データベースの特定のトリガーを示す情報を提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.data:SQLSchema</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 SQLTriggerSchema インスタンスは、データベースの特定のトリガーを示す情報を提供します。このインスタンスには、トリガーの名前（<codeph class="+ topic/ph pr-d/codeph ">name</codeph> プロパティ）、関連付けられたテーブルの名前（<codeph class="+ topic/ph pr-d/codeph ">table</codeph> プロパティ）およびトリガーの作成に使用された SQL ステートメント （<codeph class="+ topic/ph pr-d/codeph ">sql</codeph> プロパティ）が含まれます。
 
 <p class="- topic/p ">データベースのトリガースキーマ情報を取得するには、<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> メソッドを使用してスキーマ情報をロードします。このとき、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> または <codeph class="+ topic/ph pr-d/codeph ">SQLTriggerSchema</codeph> を <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 引数の値に使用します。結果として得られた SQLSchemaResult インスタンスの <codeph class="+ topic/ph pr-d/codeph ">triggers</codeph> プロパティには、データベース内のトリガーを示す SQLTriggerSchema インスタンスの配列が含まれます。</p>
 
 <p class="- topic/p ">一般に、SQLTriggerSchema インスタンスは開発者のコードでは直接作成されません。</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link></related-links><apiConstructor id="flash.data:SQLTriggerSchema:SQLTriggerSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLTriggerSchema</apiName><shortdesc class="- topic/shortdesc ">
     SQLTriggerSchema インスタンスを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">関連付けられたデータベースの名前です。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">トリガーの名前です。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sql</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">トリガーの作成に使用された SQL です。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">table</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">トリガーの関連付けられたテーブルの名前です。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     SQLTriggerSchema インスタンスを作成します。一般に、SQLTriggerSchema コンストラクターは開発者のコードでは直接呼び出されません。データベースのスキーマ情報を取得するには、<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> メソッドを呼び出します。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.data:SQLTriggerSchema:table:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">table</apiName><shortdesc class="- topic/shortdesc ">
     このトリガーが定義されているテーブルの名前、またはビューの名前（トリガーがビューで定義されている場合）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このトリガーが定義されているテーブルの名前、またはビューの名前（トリガーがビューで定義されている場合）です。
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLStatement" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLStatement</apiName><shortdesc class="- topic/shortdesc ">
 SQLStatement インスタンスは、SQLConnection インスタンスを通して開かれているローカル SQL データベースに対して SQL ステートメントを実行するために使用します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 SQLStatement インスタンスは、SQLConnection インスタンスを通して開かれているローカル SQL データベースに対して SQL ステートメントを実行するために使用します。
 
 <p class="- topic/p ">SQLStatement インスタンスは、SQLConnection インスタンスを SQLStatement インスタンスの <codeph class="+ topic/ph pr-d/codeph ">sqlConnection</codeph> プロパティの値として設定することで、SQLConnection インスタンスにリンクされます。<codeph class="+ topic/ph pr-d/codeph ">text</codeph> プロパティには、実行する SQL ステートメントの実際のテキストが設定されます。必要に応じて、<codeph class="+ topic/ph pr-d/codeph ">parameters</codeph> プロパティを使用して SQL ステートメントのパラメーター値を指定し、<codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> メソッドを呼び出してステートメントを実行します。</p>
 
 <p class="- topic/p ">ローカル SQL データベースでサポートされている SQL ダイアレクトの詳細な説明については、付録「<xref href="http://adobe.com/go/learn_as3_sqlsupportdb_en" class="- topic/xref ">ローカルデータベースでの SQL サポート</xref>」を参照してください。</p>
 
 <p class="- topic/p ">非同期実行モードでは、<codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> メソッドと <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> メソッドがバックグラウンドで実行され、処理が完了または失敗すると、登録済みのイベントリスナーまたは指定の Responder インスタンスに対してランタイムがイベントを送出します。同期モードでは、メソッドはメインアプリケーションスレッドで実行され、データベースの処理が完了するまで、他のコードは実行されません。また、同期モードでメソッドが失敗すると、ランタイムは error イベントを送出せずに例外をスローします。</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection</linktext></link></related-links><adobeApiEvent id="flash.data:SQLStatement_flash.events.SQLErrorEvent.ERROR_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><shortdesc class="- topic/shortdesc ">
 処理中にエラーが発生した場合に送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLErrorEvent.ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 処理中にエラーが発生した場合に送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">next()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLStatement_flash.events.SQLEvent.RESULT_result" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">result</apiName><shortdesc class="- topic/shortdesc ">
 execute() メソッドまたは next() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.RESULT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。<codeph class="+ topic/ph pr-d/codeph ">result</codeph> イベントが送出されたら、<codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> メソッドを呼び出してステートメントの結果を取得できます。
 
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()" class="- topic/link "><linktext class="- topic/linktext ">getResult()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.data:SQLStatement:SQLStatement" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLStatement</apiName><shortdesc class="- topic/shortdesc ">
     SQLStatement インスタンスを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">メインアプリケーションサンドボックスの外部にあるサンドボックスからコンストラクターが呼び出された場合。 
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     SQLStatement インスタンスを作成します。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.data:SQLStatement:cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
     このステートメントの実行をキャンセルします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このステートメントの実行をキャンセルします。<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.cancel()</codeph> と同様、このメソッドは、長時間実行されているクエリを停止する場合や、完了していないクエリをキャンセルする場合に使用します。ただし、<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.cancel()</codeph> とは異なり、このメソッドは単一のステートメントだけをキャンセルします。ステートメントが現在実行中でない場合は、このメソッドを呼び出しても何も実行されません。
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">cancel()</codeph> 操作の完了に直接応答する形でイベントが送出されることはありません。ただし、<codeph class="+ topic/ph pr-d/codeph ">cancel()</codeph> 操作が完了してステートメントの実行がキャンセルされると、SQLStatement インスタンスは <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントを送出し、ステートメントの実行（<codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> の呼び出し）が完了しなかったことを示します。または、<codeph class="+ topic/ph pr-d/codeph ">responder</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> 呼び出しのパラメーター）に値が指定されている場合は、指定されたフォルトハンドラーメソッドが呼び出されます。 いずれの場合も、リスナーに渡される SQLError インスタンスの <codeph class="+ topic/ph pr-d/codeph ">errorID</codeph> プロパティには、3118（処理の中止）という値が設定されます。</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:SQLStatement:clearParameters" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clearParameters</apiName><shortdesc class="- topic/shortdesc ">
     現在のパラメーター設定をすべてクリアします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     現在のパラメーター設定をすべてクリアします。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/parameters" class="- topic/link "><linktext class="- topic/linktext ">パラメーター</linktext></link></related-links></apiOperation><apiOperation id="flash.data:SQLStatement:execute" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">execute</apiName><shortdesc class="- topic/shortdesc ">
     sqlConnection プロパティの SQLConnection オブジェクトに接続されているデータベースに対して、text プロパティの SQL を実行します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">text</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">null</codeph> または空のストリング（<codeph class="+ topic/ph pr-d/codeph ">""</codeph>）の場合、<codeph class="+ topic/ph pr-d/codeph ">sqlConnection</codeph> プロパティが設定されていない場合、<codeph class="+ topic/ph pr-d/codeph ">sqlConnection</codeph> プロパティに割り当てられている SQLConnection インスタンスが接続されていない場合、またはステートメントが現在実行中の場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">同期実行モードで処理が失敗した場合。
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">prefetch</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">-1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ステートメントの <codeph class="+ topic/ph pr-d/codeph ">text</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントの場合、この値は、ステートメントから一度に返される行数を示します。デフォルト値は -1 で、すべての結果行が一度に返されることを示します。このパラメーターは <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> メソッドと組み合わせて使用し、大きな結果セットを小さなデータのセットに分割します。これにより、最初の結果が迅速に返され、結果処理操作が分割されるので、ユーザーが体感するアプリケーションのパフォーマンスが向上します。
     
     <p class="- topic/p ">SQL ステートメントが <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> クエリで、<codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> 引数に 0 より大きい値が指定されている場合、結果セット全体が返されるまで、または <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.cancel()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.cancel()</codeph> メソッドが呼び出されるまで、ステートメントが実行されるものと見なされます。実行時は結果セットの行数が不明なので、ステートメントが完了したと見なされる前は、データベースカーソルが結果セットの最終行を越えて移動することに注意してください。<codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> 呼び出しで指定されている場合、結果セットの行数の合計よりも 1 行以上多く要求（結果セットの行数よりも大きい <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> 値の指定、または後続の <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> メソッドの呼び出しによって要求）されていないと、結果として得られる SQLResult インスタンスの <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> プロパティは <codeph class="+ topic/ph pr-d/codeph ">true</codeph> になりません。</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph class="+ topic/ph pr-d/codeph ">responder</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、実行が完了すると <codeph class="+ topic/ph pr-d/codeph ">result</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">text</codeph> プロパティの SQL を、<codeph class="+ topic/ph pr-d/codeph ">sqlConnection</codeph> プロパティの SQLConnection オブジェクトに接続されているデータベースに対して実行します。
     
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">responder</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> 以外の場合は、指定された Responder オブジェクトによって、操作の結果を処理するために呼び出されるメソッドが指定されます。<codeph class="+ topic/ph pr-d/codeph ">responder</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合は、非同期実行モードで操作が正常に完了すると <codeph class="+ topic/ph pr-d/codeph ">result</codeph> イベントが送出され、操作が失敗すると <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。</p>
	 
	 <p class="- topic/p ">ステートメントの結果（<codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントの結果行や <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> ステートメントでデータベースが生成したプライマリキーなど）にアクセスするには、<codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> メソッドを呼び出します。同期モードでは、ステートメントの実行直後に、非同期モードでは、<codeph class="+ topic/ph pr-d/codeph ">result</codeph> イベントの送出時に、結果を確認できます。</p>
     
     <p class="- topic/p ">すべてのステートメントは、準備（コンパイル）しなければ実行できません。ステートメントは、SQLStatement インスタンスの <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> メソッドの初回呼び出し時に、ランタイムによって準備されます。ステートメントが準備されたら、<codeph class="+ topic/ph pr-d/codeph ">text</codeph> プロパティが変更されない限り、再度準備する必要はありません。パラメーター値を設定する場合は、ステートメントを再度準備する必要はありません。</p>
	 
     </apiDesc><example conref="examples\SQLStatement.execute.1.as" class="- topic/example "> 次の例は、SQLStatement の実行を示したものです。この例では、イベントリスナーを使用して、ステートメントの実行の完了または失敗を特定します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.addEventListener(SQLErrorEvent.ERROR, errorHandler);
    dbStatement.execute();
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            var row:Object = result.data[i];
            trace("id:", row.id, ", name:", row.name, ", ssn:", row.ssn);
        }
    }
}

function errorHandler(event:SQLErrorEvent):void
{
    trace("An error occured while executing the statement.");
}
</codeblock></example><example conref="examples\SQLStatement.execute.2.as" class="- topic/example "> 次の例は、SQLStatement の実行を示したものです。この例では、Responder オブジェクトを使用して、ステートメントの実行が完了または失敗したときに呼び出す関数を示します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var conn:SQLConnection;
var dbStatement:SQLStatement;
var employeeResponder:Responder;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    employeeResponder = new Responder(resultHandler, errorHandler);
    dbStatement.execute(-1, employeeResponder);
}

function resultHandler(result:SQLResult):void
{
    if (result != null)
    {
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            var row:Object = result.data[i];
            trace("id:", row.id, ", name:", row.name, ", ssn:", row.ssn);
        }
    }
}

function errorHandler(error:SQLError):void
{
    trace("An error occured while executing the statement.");
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()" class="- topic/link "><linktext class="- topic/linktext ">getResult()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLStatement:execute_result" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">result</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ステートメントの実行が正常に完了した場合、または <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> 引数の値が指定され、<codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントが 1 つ以上のデータの行を返した場合に送出されます。 
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ステートメントの実行が正常に完了した場合、または prefetch 引数の値が指定され、SELECT ステートメントが 1 つ以上のデータの行を返した場合。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLStatement:execute_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">非同期実行モードで処理が失敗した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLStatement:getResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getResult</apiName><shortdesc class="- topic/shortdesc ">
     ステートメントの実行結果を含む SQLResult オブジェクトへのアクセスを提供します。この結果には、SELECT ステートメントの結果行と、実行されたすべてのステートメントのステートメント実行に関するその他の情報が含まれます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">SQLResult オブジェクトには、<codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> メソッドを呼び出した結果が含まれます。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.data:SQLResult</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ステートメントの実行結果を含む SQLResult オブジェクトへのアクセスを提供します。この結果には、<codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントの結果行と、実行されたすべてのステートメントのステートメント実行に関するその他の情報が含まれます。非同期モードでは、<codeph class="+ topic/ph pr-d/codeph ">result</codeph> イベントが送出されるまで、結果情報を取得できません。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントを、<codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> メソッドがデフォルトの <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> 引数（-1）を指定して呼び出されている場合に実行すると、返される SQLResult オブジェクトにはクエリの結果セット全体が含まれます。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> 引数が、<codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> メソッドの呼び出しで指定されている場合、<codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> メソッドは結果の先入れ先出しキューとして動作します。<codeph class="+ topic/ph pr-d/codeph ">result</codeph> イベントが送出されるたびに、新しい SQLResult オブジェクトがキューに追加されます。<codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> メソッドが呼び出されるたびに、最も古い SQLResult オブジェクト（最初にキューに追加されたもの）が返され、キューから削除されます。キューに存在する SQLResult オブジェクトがなくなると、<codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> は <codeph class="+ topic/ph pr-d/codeph ">null</codeph> を返します。</p>
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> を呼び出して削除されない限り、SQLResult オブジェクトはキューに残ることに注意してください。例えば、<codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> メソッドを、<codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> を呼び出さずに繰り返し呼び出すと、各 <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> 呼び出しに関連付けられている SQLResult オブジェクトは、そのままキューに残ります。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">next()</linktext></link><link href="flash.data.xml#SQLStatement/event:result" class="- topic/link "><linktext class="- topic/linktext ">result イベント[result いべんと]</linktext></link></related-links></apiOperation><apiOperation id="flash.data:SQLStatement:next" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">next</apiName><shortdesc class="- topic/shortdesc ">
     SELECT ステートメントの結果セットの次の部分を取得します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ステートメントが現在実行されていない状態（<codeph class="+ topic/ph pr-d/codeph ">executing</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">false</codeph>）でメソッドが呼び出された場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">同期実行モードで処理が失敗した場合。
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">prefetch</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">-1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ステートメントの <codeph class="+ topic/ph pr-d/codeph ">text</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントの場合、この値は、ステートメントから一度に返される行数を示します。デフォルト値は -1 で、すべての結果行が一度に返されることを示します。これにより、最初の結果が迅速に返され、結果処理操作が分割されるので、ユーザーが体感するアプリケーションのパフォーマンスが向上します。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。<codeph class="+ topic/ph pr-d/codeph ">responder</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、実行が完了すると <codeph class="+ topic/ph pr-d/codeph ">result</codeph> イベントまたは <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントの結果セットの次の部分を取得します。結果セットにこれ以上行がない場合、<codeph class="+ topic/ph pr-d/codeph ">result</codeph> イベントは送出されますが、SQLResult オブジェクトが新たに <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> キューに追加されることはありません。
     
     <p class="- topic/p ">非同期実行モードでは、<codeph class="+ topic/ph pr-d/codeph ">responder</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> でない場合、操作の結果を処理するために呼び出されるメソッドは指定された Responder によって示されます。<codeph class="+ topic/ph pr-d/codeph ">responder</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合は、操作が正しく完了すると <codeph class="+ topic/ph pr-d/codeph ">result</codeph> イベントが送出され、操作が失敗すると <codeph class="+ topic/ph pr-d/codeph ">error</codeph> イベントが送出されます。</p>
     
     <p class="- topic/p ">このメソッドは、ステートメントが実行中の場合にのみ呼び出せます。ステートメントが <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> クエリで、<codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> 引数に 0 より大きい値が指定されている場合、結果セット全体が返されるまで、または <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.cancel()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.cancel()</codeph> メソッドが呼び出されるまで、ステートメントが実行されるものと見なされます。</p>
     
     </apiDesc><example conref="examples\SQLStatement.next.1.as" class="- topic/example "> 次の例は、SQLStatement の実行例を示したものです。この例では、結果を最初に返すときに、結果セットの最初の 10 行だけを返すように明示的に示しています。このコードでは SQLResult の <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> プロパティをチェックし、取得されていない行がある場合は、<codeph class="+ topic/ph pr-d/codeph ">next()</codeph> メソッドを呼び出します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.addEventListener(SQLErrorEvent.ERROR, errorHandler);
    dbStatement.execute(10);
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            var row:Object = result.data[i];
            trace("id:", row.id, ", name:", row.name, ", ssn:", row.ssn);
        }
        if (!result.complete)
        {
            dbStatement.next(10);
        }
    }
}

function errorHandler(event:SQLErrorEvent):void
{
    trace("An error occured while executing the statement.");
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">execute()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLStatement:next_result" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">result</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ステートメントの実行が正常に完了した場合、または <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> 引数の値が指定され、<codeph class="+ topic/ph pr-d/codeph ">next()</codeph> 呼び出しが 1 つ以上のデータの行を返した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">ステートメントの実行が正常に完了した場合、または prefetch 引数の値が指定され、next() 呼び出しが 1 つ以上のデータの行を返した場合。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLStatement:next_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">非同期実行モードで処理が失敗した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.data:SQLStatement:executing:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">executing</apiName><shortdesc class="- topic/shortdesc ">
     ステートメントが現在実行中かどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ステートメントが現在実行中かどうかを示します。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> が呼び出され、データベースから返されていない結果がある場合、このプロパティは true になります。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">execute()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLStatement:itemClass:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">itemClass</apiName><shortdesc class="- topic/shortdesc ">
     ステートメントの実行結果として返された各行で使用されているクラス（データ型）を示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Class</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ステートメントの実行結果として返された各行で使用されているクラス（データ型）を示します。
     
     
     
     <p class="- topic/p ">デフォルトでは、<codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントから返される各行は Object インスタンスとして作成されます。このインスタンスでは、結果セットの列名がオブジェクトのプロパティの名前として使用され、各列の値が、それぞれに関連付けられているプロパティの値として使用されます。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph> プロパティでクラスを指定すると、この SQLStatement インスタンスで実行されている <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントから返される各行は、指定されたクラスのインスタンスとして作成されます。<codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph> インスタンスの各プロパティには、そのプロパティと同じ名前を持つ列の値が割り当てられます。</p>
     
     <p class="- topic/p ">このプロパティに割り当てるクラスは、パラメーターを必要としないコンストラクターを持っていなければなりません。また、このクラスは、<codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントから返される各列に対応する、個別のプロパティを持っていなければなりません。<codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> リストの列と一致するプロパティ名が <codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph> クラスにない場合は、エラーと見なされます。</p>
     
     </apiDesc><example conref="examples\SQLStatement.itemClass.1.as" class="- topic/example "> 次のコードは、<codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph> プロパティを使用し、ランタイムに SQL <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントの結果からカスタムクラスのインスタンスを作成させる方法を示したものです。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// Employee class definition
package
{
    public class Employee
    {
        public var name:String;
        public var ssn:String;
        public var id:uint;
        public override function toString():String
        {
            return "id: "+ id.toString() + " name: " + name + " ssn: " + ssn;
        }
    }
}


// using the Employee class as SQLStatement.itemClass
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    dbStatement.itemClass = Employee;
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.execute();
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var emp:Employee;
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            emp = result.data[i];
            trace(emp.toString());
        }
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLResult/data" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLResult.data</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLStatement:parameters:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">parameters</apiName><shortdesc class="- topic/shortdesc ">
     SQL ステートメントの text プロパティで指定されたパラメーターの値を追加する結合配列として機能します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     SQL ステートメントの <codeph class="+ topic/ph pr-d/codeph ">text</codeph> プロパティで指定されたパラメーターの値を追加する結合配列として機能します。 配列のキーは、パラメーターの名前です。 名前が付いていないパラメーターがステートメントのテキストで指定されている場合は、パラメーターのインデックスがキーになります。
     
     <p class="- topic/p ">SQL ステートメントのテキストでは、パラメーターは「?」、「:」または「@」のいずれかの文字で示されます。</p>
     
     <p class="- topic/p ">「:」および「@」トークンは、名前の付いているパラメーターを示し、トークンに続く文字がパラメーターの名前として解釈されます。</p>
     
     <p class="- topic/p ">例えば、次の SQL ステートメントでは、<codeph class="+ topic/ph pr-d/codeph ">firstName</codeph> という名前のパラメーターを「:」文字で指定しています。</p>
     
     <pre xml:space="preserve" class="- topic/pre ">SELECT FROM employees WHERE firstName = :firstName</pre>
     
     <p class="- topic/p ">「?」トークンは、インデックス付けされた（番号が付けられた）パラメーターを示します。各パラメーターには、ステートメントのテキストの順序に従って、自動的にインデックスが与えられます。パラメーターのインデックス値は 0 から始まります。つまり、最初のパラメーターのインデックスは 0 になります。</p>
     
     <p class="- topic/p ">パラメーターは、SQL ステートメントの構築時に不明な値を、型指定して置き換える手段として使用されます。 データベースに渡される値の記憶クラスを保証するには、パラメーターを使用する以外に方法はありません。 パラメーターが使用されていない場合、関連付けられている列の型の類似性に基づいて、すべての値がテキスト表現から記憶クラスに変換されます。記憶クラスと列の類似性について詳しくは、「データタイプサポート」のセクション（付録「<xref href="http://adobe.com/go/learn_as3_sqlsupportdb_en" class="- topic/xref ">ローカルデータベースでの SQL サポート</xref>」にあります）を参照してください。</p>
     
     <p class="- topic/p ">パラメーターは、SQL インジェクションアタックと呼ばれる悪質な手法を防ぐセキュリティ手段としても使用されます。SQL インジェクションアタックでは、ユーザーがアクセス可能な場所（データ入力フィールドなど）に SQL コードを入力します。アプリケーションコードが、ユーザーの入力を SQL テキストと直接連結して SQL ステートメントを構築すると、ユーザーが入力した SQL コードがデータベースに対して実行されてしまいます。次のコードは、ユーザーの入力を SQL テキストに連結する例を示したものです。<b class="+ topic/ph hi-d/b ">この手法は使用しないでください</b>。</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 // assume the variables "username" and "password"
     // contain user-entered data
     var sql:String =
         "SELECT userId " +
         "FROM users " +
         "WHERE username = '" + username + "' " +
         "    AND password = '" + password + "'";
     var statement:SQLStatement = new SQLStatement();
     statement.text = sql;
     </codeblock>
     
     
     
     <p class="- topic/p ">ユーザーが入力した値をステートメントのテキストに連結するのではなく、ステートメントのパラメーターを使用することで、SQL インジェクションアタックを防ぐことができます。これは、パラメーター値が明示的に置き換え値として扱われ、そのままステートメントのテキストの一部とはならないからです。上記のコードは、次のように書き換えることが推奨されます。</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 // assume the variables "username" and "password"
     // contain user-entered data
     var sql:String =
         "SELECT userId " +
         "FROM users " +
         "WHERE username = :username " +
         "    AND password = :password";
     var statement:SQLStatement = new SQLStatement();
     statement.text = sql;
     // set parameter values
     statement.parameters[":username"] = username;
     statement.parameters[":password"] = password;
     </codeblock>
     
     
     
     <p class="- topic/p ">すべてのパラメーター値は、ステートメントを実行する前に設定する必要があります。 <codeph class="+ topic/ph pr-d/codeph ">parameters</codeph> 配列で指定されたパラメーター値は、<codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> メソッドが呼び出されるとバインドされます（ステートメントのテキストと結合されます）。 <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> が呼び出されると、その後で値に加えられた変更は、実行中のステートメントには適用されません。ただし、その後で <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> を呼び出した場合は、変更された値が使用されます。ステートメントのテキストに、<codeph class="+ topic/ph pr-d/codeph ">parameters</codeph> プロパティで指定された値が設定されていないパラメーターが含まれている場合は、エラーが発生します。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">parameters</codeph> プロパティからすべてのパラメーター値をクリアするには、<codeph class="+ topic/ph pr-d/codeph ">clearParameters()</codeph> メソッドを使用します。</p>
     
	 </apiDesc><example conref="examples\SQLStatement.parameters.1.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">:firstName</codeph> という名前を付けられたパラメーターを SQL ステートメントで使用した例を示したものです。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// employees is a SQLStatement instance
employees.text = "SELECT FROM employees WHERE first = :firstName";
employees.parameters[":firstName"] = "Sam";
employees.execute();
</codeblock></example><example conref="examples\SQLStatement.parameters.2.as" class="- topic/example "> 次の例は、名前が付けられていないパラメーターを SQL ステートメントで使用する例を示したものです。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// employees is a SQLStatement instance
employees.text = "SELECT FROM employees WHERE first = ?";
employees.parameters[0] = "Sam";
employees.execute();
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/text" class="- topic/link "><linktext class="- topic/linktext ">text</linktext></link><link href="flash.data.xml#SQLStatement/clearParameters()" class="- topic/link "><linktext class="- topic/linktext ">clearParameters()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLStatement:sqlConnection:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">sqlConnection</apiName><shortdesc class="- topic/shortdesc ">
     ステートメントの実行対象となっているデータベースへの接続を管理する SQLConnection オブジェクトです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.data:SQLConnection</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ステートメントの実行中に、このプロパティの値を変更しようとした場合。
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ステートメントの実行対象となっているデータベースへの接続を管理する SQLConnection オブジェクトです。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLStatement:text:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">text</apiName><shortdesc class="- topic/shortdesc ">
     ステートメントの実際の SQL テキストです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ステートメントの実行中に、<codeph class="+ topic/ph pr-d/codeph ">text</codeph> プロパティの値を変更しようとした場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ステートメントの実際の SQL テキストです。
	 
     <p class="- topic/p ">テキストは、サポートされている任意の SQL にすることができます。ローカル SQL データベースでサポートされている SQL ダイアレクトの詳細な説明については、付録「<xref href="http://adobe.com/go/learn_as3_sqlsupportdb_en" class="- topic/xref ">ローカルデータベースでの SQL サポート</xref>」を参照してください。</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLMode" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLMode</apiName><shortdesc class="- topic/shortdesc ">
 このクラスには、SQLConnection.open() メソッドおよび SQLConnection.openAsync() メソッドの openMode パラメーターで有効な値を表す定数が含まれます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 このクラスには、<codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.open()</codeph> メソッドおよび <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.openAsync()</codeph> メソッドのパラメーター）の有効な値を表す定数が含まれます。
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.openAsync()</linktext></link></related-links><apiValue id="flash.data:SQLMode:CREATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CREATE</apiName><shortdesc class="- topic/shortdesc ">
	 接続を更新用に開くことと、指定のファイルが存在しない場合にはデータベースファイルを作成することを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">create</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 接続を更新用に開くことと、指定のファイルが存在しない場合にはデータベースファイルを作成することを示します。このモードでは、データベースに対する読み取りおよび書き込み処理が許可されています。データベースが存在しない場合は、処理の完了前に作成されます。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLMode:READ" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">READ</apiName><shortdesc class="- topic/shortdesc ">
	 読み取り専用モードで接続を開くことを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">read</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 読み取り専用モードで接続を開くことを示します。このモードでは、データベースへの書き込みは許可されません。データベースが存在しない場合、開く処理は失敗します。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLMode:UPDATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">UPDATE</apiName><shortdesc class="- topic/shortdesc ">
	 接続を更新用に開くことと、指定のファイルが存在しない場合には新しいデータベースファイルを作成しないことを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">update</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 接続を更新用に開くことと、指定のファイルが存在しない場合には新しいデータベースファイルを作成しないことを示します。このモードでは、データベースに対する読み取りおよび書き込み処理が許可されています。データベースが存在しない場合、開く処理は失敗します。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:EncryptedLocalStore" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">EncryptedLocalStore</apiName><shortdesc class="- topic/shortdesc ">
	EncryptedLocalStore クラスは、暗号化された永続的なデータストレージメカニズムを提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	EncryptedLocalStore クラスは、暗号化された永続的なデータストレージメカニズムを提供します。
	 
	 <p class="- topic/p ">AIR プロファイルのサポート：<i class="+ topic/ph hi-d/i "/>この機能はすべてのデスクトップオペレーティングシステムでサポートされますが、モバイルデバイスまたはテレビ用 AIR デバイスではサポートされません。<codeph class="+ topic/ph pr-d/codeph ">EncryptedLocalStore.isSupported</codeph> プロパティを使用して、サポートされているかどうかを実行時にテストすることができます。複数のプロファイル間での API サポートについて詳しくは、<xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">AIR プロファイルのサポート</xref>を参照してください。</p>
	 
	 <p class="- topic/p ">AIR は、ユーザーのコンピューターにインストールされた各 AIR アプリケーションに対して、暗号化されたローカルストア（ELS）を提供します。これにより、他のユーザーによって簡単に解読されないように暗号化された形式で、ユーザーのローカルハードディスクに格納されたデータを保存および取得できるようになります。各 AIR アプリケーションで個別の暗号化されたローカルストアが使用され、各 AIR アプリケーションは、コンピューター上の各ユーザーアカウントに対して個別の暗号化されたローカルストアを使用します。 </p>
	
	<p class="- topic/p ">Web サービスに対するログイン資格情報など、セキュリティで保護する必要がある情報を格納するために暗号化されたローカルストアを使用します。他のユーザーに対して非公開にする必要がある情報を保存するには、ELS が適切です。ただし、ELS では同じユーザーアカウントで実行される他のプロセスからデータを保護することはできません。このため、DRM や暗号化キーなどの機密アプリケーションデータを保護するには適切でありません。</p>
	
	<p class="- topic/p ">AIR では、Windows は DPAPI、Macintosh は KeyChain、Linux は KeyRing または KWallet を使用して、暗号化されたローカルストアを各アプリケーションおよびユーザーに関連付けます。暗号化されたローカルストアでは、128 ビットの AES-CBC 暗号化を使用します。</p>
	
	<p class="- topic/p ">暗号化されたローカルストアの情報は、application セキュリティサンドボックス内の AIR アプリケーションコンテンツでのみ使用できます。 </p>
	
	<p class="- topic/p ">AIR アプリケーションを更新すると、更新されたバージョンには暗号化されたローカルストアの既存のデータへのアクセス権が保持されます。ただし、次の場合を除きます。</p>
	
	<ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph> パラメーターを <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定してアイテムが追加された場合。</li><li class="- topic/li ">既存バージョンと更新バージョンが両方とも AIR 1.5.3 以前にパブリッシュされていて、更新が移行署名で署名されている場合。</li></ul>
	
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">暗号化されたローカルストアの制限事項</b></p>
	<p class="- topic/p ">暗号化されたローカルストアのデータは、ユーザーのオペレーティングシステムアカウントの資格情報で保護されています。他のエンティティは、そのユーザーとしてログインできる場合を除き、ストア内のデータにアクセスできません。ただし、認証されたユーザーによって実行される他のアプリケーションからのアクセスに対しては、データのセキュリティは保護されません。このため、ライセンスに使用されるキーやデジタル権限管理など、ユーザーに公開したくないアプリケーションのデータがセキュリティ保護されません。ELS は、このような情報を保存するために適切な場所ではありません。ELS は、パスワードなどのユーザーのプライベートデータを保存する目的にのみ適しています。</p>
	
	<p class="- topic/p ">ELS 内のデータは、さまざまな理由で失われる場合があります。例えば、ユーザーがアプリケーションをアンインストールしたり、暗号化されたデータを削除したりする場合があります。また、更新の結果、発行者 ID が変更される場合があります。こうした理由により、ELS は永続的なデータストレージではなく、プライベートキャッシュとして扱う必要があります。 </p>
	
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph> パラメーターはサポートされなくなったため、<codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定しないでください。このパラメーターを <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定しても、追加のデータ保護は提供されません。同時に、発行者 ID が同じでもアプリケーションが更新されるとデータへのアクセスが失われます。</p>
	
	<p class="- topic/p ">保存されるデータが 10 MB を超える場合、暗号化されたローカルストアの実行が低速化する場合があります。</p>
	
	<p class="- topic/p ">AIR アプリケーションをアンインストールする場合、アンインストーラーは暗号化されたローカルストアに保存されたデータを削除しません。 </p>
	
	<p class="- topic/p ">ELS を使用するためのベストプラクティスには次のようなものがあります。</p>
	
	<ul class="- topic/ul "><li class="- topic/li ">パスワードなどのユーザーの機密データを保存する目的で ELS を使用します（<codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph> を <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定）。</li><li class="- topic/li ">DRM キーやライセンスのトークンなどのアプリケーションの機密情報を保存する目的では ELS を使用しないでください。</li><li class="- topic/li ">ELS データが失われた場合に、ELS に保存されたデータをアプリケーションで作成し直す方法を提供します。例えば、必要に応じて、ユーザーにアカウント資格情報の再入力を求めます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph> パラメーターは使用しないでください。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定する場合は、更新中に保存されたアイテムを移行しないでください。代わりに、更新後にデータを再作成します。</li><li class="- topic/li ">比較的少量のデータのみ保存します。大量のデータの場合は、AIR SQL データベースを暗号化して使用します。</li></ul>
	
	<p class="- topic/p ">暗号化されたローカルストアのアイテムは、ストリングで識別されます。アイテムは、すべてバイト配列データとして保存されます。</p>
	
	<p class="- topic/p ">暗号化されたローカルストアのデータは、ユーザーのアプリケーションデータディレクトリのサブディレクトリに置かれます。このサブディレクトリのパスは Adobe/AIR/ELS/ の後ろにアプリケーション ID が続きます。</p>
	
	</apiDesc><example conref="examples\EncryptedLocalStore.1.as" class="- topic/example "> 次のコードは、暗号化されたローカルストアにストリングを保存して、そのストリングを取得し、削除します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var str:String = "Bob";
var bytes:ByteArray = new ByteArray();
bytes.writeUTFBytes(str);
EncryptedLocalStore.setItem("firstName", bytes);

var storedValue:ByteArray = EncryptedLocalStore.getItem("firstName");
trace(storedValue.readUTFBytes(storedValue.length)); // "Bob"

EncryptedLocalStore.removeItem("firstName");
</codeblock></example></apiClassifierDetail><apiOperation id="flash.data:EncryptedLocalStore:getItem" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getItem</apiName><shortdesc class="- topic/shortdesc ">
		指定された名前に対応するデータ。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">name</codeph> 値は、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> または空の文字列です。
		
		</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ByteArray データです。指定された<codeph class="+ topic/ph pr-d/codeph ">名前</codeph>に対するデータが存在しない場合、メソッドは <codeph class="+ topic/ph pr-d/codeph ">null</codeph> を返します。
		
		</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">暗号化されたローカルストアのアイテムの名前です。
		
		</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		指定された名前に対応するデータ。
		 
		<p class="- topic/p ">指定された名前でアイテムが見つからない場合、このメソッドは <codeph class="+ topic/ph pr-d/codeph ">null</codeph> を返します。</p>
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:EncryptedLocalStore:removeItem" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">removeItem</apiName><shortdesc class="- topic/shortdesc ">
		暗号化されたローカルストアから、指定された名前のアイテムを削除します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">name</codeph> 値は、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> または空の文字列です。
		
		</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">暗号化されたローカルストアのアイテムの名前です。
		
		</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		暗号化されたローカルストアから、指定された名前のアイテムを削除します。
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:EncryptedLocalStore:reset" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">reset</apiName><shortdesc class="- topic/shortdesc ">
		すべてのデータを削除して、暗号化されたローカルストア全体をクリアします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		すべてのデータを削除して、暗号化されたローカルストア全体をクリアします。
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:EncryptedLocalStore:setItem" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setItem</apiName><shortdesc class="- topic/shortdesc ">
		ByteArray オブジェクトを指定された名前で保存します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">name</codeph> 値は、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> または空の文字列です。
		
		
		</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">暗号化されたローカルストアのアイテムの名前です。
		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">data</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">データです。
		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">stronglyBound</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">（非推奨）<codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph> パラメーターを <codeph class="+ topic/ph pr-d/codeph ">false</codeph>（デフォルト値）に設定します。<codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定すると、アプリケーションファイルが変更された場合に、保存されたアイテムを取得できません。例えば、ユーザーがアプリケーションの更新をインストールすると、更新されたアプリケーションは、暗号化されたローカルストアに以前に書き込まれた、強力にバインドされたデータを読み取れなくなります。
		 
		</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		ByteArray オブジェクトを指定された名前で保存します。
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.data:EncryptedLocalStore:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
        現在のプラットフォームで EncryptedLocalStore クラスがサポートされている場合、isSupported プロパティは true に設定されます。サポートされていない場合は、false に設定されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">暗号化されたローカルストアをクライアントシステムで使用できるかどうかをレポートします。
        
        </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
        現在のプラットフォームで EncryptedLocalStore クラスがサポートされている場合、<codeph class="+ topic/ph pr-d/codeph ">isSupported</codeph> プロパティは <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定されます。サポートされていない場合は、<codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定されます。 
        
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLIndexSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLIndexSchema</apiName><shortdesc class="- topic/shortdesc ">
 SQLIndexSchema インスタンスは、データベースの特定のインデックスを示す情報を提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.data:SQLSchema</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 SQLIndexSchema インスタンスは、データベースの特定のインデックスを示す情報を提供します。使用できる情報には、関連付けられたテーブルの名前（<codeph class="+ topic/ph pr-d/codeph ">table</codeph> プロパティ）、インデックスの作成に使用した SQL ステートメント（<codeph class="+ topic/ph pr-d/codeph ">sql</codeph> プロパティ）およびインデックスの名前（<codeph class="+ topic/ph pr-d/codeph ">name</codeph> プロパティ）が含まれます。
 
 <p class="- topic/p ">データベースのインデックススキーマ情報を取得するには、<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> メソッドを使用してスキーマ情報をロードします。このとき、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> または <codeph class="+ topic/ph pr-d/codeph ">SQLIndexSchema</codeph> を <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 引数の値に使用します。結果として得られた SQLSchemaResult インスタンスの <codeph class="+ topic/ph pr-d/codeph ">indices</codeph> プロパティには、データベース内のインデックスを示す SQLIndexSchema インスタンスの配列が含まれます。</p>
 
 <p class="- topic/p ">一般に、SQLIndexSchema インスタンスは開発者のコードでは直接作成されません。</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link></related-links><apiConstructor id="flash.data:SQLIndexSchema:SQLIndexSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLIndexSchema</apiName><shortdesc class="- topic/shortdesc ">
     SQLIndexSchema インスタンスを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">関連付けられたデータベースの名前です。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">インデックスの名前です。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sql</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このインデックスの作成に使用された SQL ステートメントです。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">table</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このインデックスが関連付けられるテーブルの名前です。
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     SQLIndexSchema インスタンスを作成します。一般に、SQLIndexSchema コンストラクターは開発者のコードでは直接呼び出されません。データベースのスキーマ情報を取得するには、<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> メソッドを呼び出します。
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/getSchemaResult()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.getSchemaResult()</linktext></link><link href="flash.data.xml#SQLSchemaResult/indices" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLSchemaResult.indices</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLIndexSchema:table:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">table</apiName><shortdesc class="- topic/shortdesc ">
     このインデックスが関連付けられるテーブルの名前です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このインデックスが関連付けられるテーブルの名前です。
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLTableSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLTableSchema</apiName><shortdesc class="- topic/shortdesc ">
 SQLTableSchema インスタンスは、データベースの特定のテーブルを示す情報を提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.data:SQLSchema</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 SQLTableSchema インスタンスは、データベースの特定のテーブルを示す情報を提供します。このインスタンスには、テーブルの名前（<codeph class="+ topic/ph pr-d/codeph ">name</codeph> プロパティ）、テーブルの作成に使用された SQL ステートメント（<codeph class="+ topic/ph pr-d/codeph ">sql</codeph> プロパティ）およびテーブルの列に関する情報（<codeph class="+ topic/ph pr-d/codeph ">columns</codeph> プロパティ）が含まれます。
 
 <p class="- topic/p ">データベースのテーブルスキーマ情報を取得するには、<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> メソッドを使用してスキーマ情報をロードします。このとき、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> または <codeph class="+ topic/ph pr-d/codeph ">SQLTableSchema</codeph> を <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 引数の値に使用します。結果として得られた SQLSchemaResult インスタンスの <codeph class="+ topic/ph pr-d/codeph ">tables</codeph> プロパティには、データベース内のテーブルを表す SQLTableSchema インスタンスの配列が含まれます。</p>
 
 <p class="- topic/p ">一般に、SQLTableSchema インスタンスは開発者のコードでは直接作成されません。</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLColumnSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema</linktext></link></related-links><apiConstructor id="flash.data:SQLTableSchema:SQLTableSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLTableSchema</apiName><shortdesc class="- topic/shortdesc ">
     SQLTableSchema インスタンスを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">関連付けられたデータベースの名前です。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">テーブルの名前です。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sql</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">テーブルの作成に使用された SQL ステートメントです。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">columns</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このテーブルの列を示す SQLColumnSchema インスタンスの配列です。
     
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     SQLTableSchema インスタンスを作成します。一般に、SQLTableSchema コンストラクターは開発者のコードでは直接呼び出されません。データベースのスキーマ情報を取得するには、<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> メソッドを呼び出します。
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/getSchemaResult()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.getSchemaResult()</linktext></link><link href="flash.data.xml#SQLSchemaResult/tables" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLSchemaResult.tables</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLTableSchema:columns:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">columns</apiName><shortdesc class="- topic/shortdesc ">
     このテーブルの列のスキーマ情報を含む SQLColumnSchema インスタンスの配列です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このテーブルの列のスキーマ情報を含む SQLColumnSchema インスタンスの配列です。列情報を結果から除外するように <codeph class="+ topic/ph pr-d/codeph ">SQlConnection.loadSchema()</codeph> 呼び出しで示されている場合、<codeph class="+ topic/ph pr-d/codeph ">columns</codeph> プロパティは空の配列（<codeph class="+ topic/ph pr-d/codeph ">length</codeph> プロパティが 0 の配列）になります。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLColumnSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema</linktext></link><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLResult</apiName><shortdesc class="- topic/shortdesc ">
 SQLResult クラスは、SQL ステートメント（SQLStatement インスタンス）の実行に応答して返されたデータへのアクセスを提供します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 SQLResult クラスは、SQL ステートメント（SQLStatement インスタンス）の実行に応答して返されたデータへのアクセスを提供します。
 
 <p class="- topic/p ">SQL ステートメントの SQLResult インスタンスには、<codeph class="+ topic/ph pr-d/codeph ">SQLStatement.getResult()</codeph> メソッドを呼び出してアクセスします。また、<codeph class="+ topic/ph pr-d/codeph ">SQLStatement.execute()</codeph> または <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.next()</codeph> の呼び出しで指定された Responder インスタンスの結果ハンドラーに渡す引数としてアクセスすることもできます。一般に、SQLResult インスタンスは開発者のコードでは直接作成されません。</p>
 
 <p class="- topic/p ">SQLResult オブジェクトは、<codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントから返されるデータの行へのアクセス（<codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティを使用）、<codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> ステートメントの行識別子情報の取得（<codeph class="+ topic/ph pr-d/codeph ">lastInsertRowID</codeph> プロパティを使用）、<codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>、<codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph> または <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> ステートメントの影響を受ける行数の特定（<codeph class="+ topic/ph pr-d/codeph ">rowsAffected</codeph> プロパティを使用）、または取得されていない <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> の結果行が他にもあるかどうかの特定（<codeph class="+ topic/ph pr-d/codeph ">complete</codeph> プロパティを使用）のために使用します。</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/getResult()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.getResult()</linktext></link><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.next()</linktext></link></related-links><apiConstructor id="flash.data:SQLResult:SQLResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLResult</apiName><shortdesc class="- topic/shortdesc ">
     SQLResult インスタンスを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">data</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ステートメントの実行から返される行の配列です。ステートメントが行を返さない場合、この値は null になります。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rowsAffected</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">実行されたステートメントの影響を受ける行数を示します。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">complete</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">取得できる行が他にもあるか、すべてのデータが返されているかを示します。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rowID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ステートメントが SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> 操作の場合、行に対する新しい一意の識別子になります。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     SQLResult インスタンスを作成します。一般に、SQLResult コンストラクターは開発者のコードでは直接呼び出されません。特定の SQLStatement インスタンスに関連付けられている SQLResult を取得するには、そのインスタンスの <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> メソッドを呼び出します。<codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> メソッドの呼び出しで Responder インスタンスが指定されている場合、SQLResult インスタンスは、引数として結果ハンドラー関数にも渡されます。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.data:SQLResult:complete:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
     ステートメント実行から結果データがすべて返されているかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ステートメント実行から結果データがすべて返されているかどうかを示します。
     
     <p class="- topic/p ">ステートメントが 1 つまたは複数の行を返す場合、このプロパティはすべての行が返されているかどうかを示します。SQLStatement オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> メソッドが、<codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> 引数値を指定して呼び出されている場合、指定された行数の結果データだけが SQLResult オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティに返されます。その後 <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.next()</codeph> を呼び出すと、さらに別のデータを使用できるようになります。このプロパティは、最終的な結果が返された時期を特定するために使用します。</p>
     
     <p class="- topic/p ">実行時は行数が不明なので、ステートメントが完了したと見なされる前は、データベースカーソルが最終行を越えて移動することに注意してください。<codeph class="+ topic/ph pr-d/codeph ">SQLStatement.execute()</codeph> ステートメントが、<codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> 引数を指定して呼び出されている場合、結果セットの合計行数よりも 1 行以上多く要求しないと、結果として得られる SQLResult インスタンスの <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> プロパティは <codeph class="+ topic/ph pr-d/codeph ">true</codeph> になりません。</p>
	 
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.next()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLResult:data:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><shortdesc class="- topic/shortdesc ">
     ステートメント実行、具体的には SQL SELECT ステートメントが実行された場合に、結果として返されるデータです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ステートメント実行、具体的には SQL <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントが実行された場合に、結果として返されるデータです。
     
     <p class="- topic/p ">ステートメントが 1 つまたは複数の行を返す場合、このプロパティは、結果データの行を示すオブジェクトの配列になります。配列の各オブジェクトにはプロパティ名があり、このプロパティ名は、結果データセットの列名に対応します。</p>
	 
	 <p class="- topic/p ">例えば、以下に示す SQL の <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントを実行するとします。</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 SELECT lastName, firstName
	 FROM employees
	 </codeblock>
	 
	 <p class="- topic/p ">例えば、<codeph class="+ topic/ph pr-d/codeph ">employees</codeph> テーブルに 10 行含まれている場合、<codeph class="+ topic/ph pr-d/codeph ">SQLResult.data</codeph> プロパティは、10 エレメントを持つ配列になります。各エレメントは、2 つのプロパティ（<codeph class="+ topic/ph pr-d/codeph ">lastName</codeph> および <codeph class="+ topic/ph pr-d/codeph ">firstName</codeph>）を持つオブジェクトです。</p>
	 
	 <p class="- topic/p ">複雑な結果列（集計関数など）を含む <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントを使用する場合、状況はより複雑になります。例えば、以下の SQL を実行するとします。</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 SELECT departmentId, SUM(salary)
	 FROM employees
	 GROUP BY departmentId
	 </codeblock>
	 
	 <p class="- topic/p ">このステートメントの結果では、<codeph class="+ topic/ph pr-d/codeph ">data</codeph> 配列の各オブジェクトは、<codeph class="+ topic/ph pr-d/codeph ">departmentId</codeph> および <codeph class="+ topic/ph pr-d/codeph ">SUM(salary)</codeph> という名前の 2 つのプロパティを持っています。ただし、「SUM(salary)」は有効な識別子ではありません。集計やその他の関数を含む計算列を使用している場合は、SQL ステートメントでその計算列のエイリアス（別名）を指定します。エイリアスは、結果データオブジェクトのプロパティ名として使用されます。例えば、前述のステートメントでこの方法を使用すると次のようになります。</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 SELECT departmentId, SUM(salary) AS salarySubtotal
	 FROM employees
	 GROUP BY departmentId
	 </codeblock>
	 
	 <p class="- topic/p ">このステートメントの <codeph class="+ topic/ph pr-d/codeph ">data</codeph> 配列では、結果オブジェクトは <codeph class="+ topic/ph pr-d/codeph ">departmentId</codeph> および <codeph class="+ topic/ph pr-d/codeph ">salarySubtotal</codeph> という名前の 2 つのプロパティを持っています。</p>
	 
	 <p class="- topic/p ">結果セットに含まれている行数や列数に関わらず、<codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティは常に配列になります。例えば、以下の <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントの結果は、1 行 1 列構成で、実質的に値は 1 つです。</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 SELECT COUNT(~~) AS numEmployees
	 FROM employees
	 </codeblock>
	 
	 <p class="- topic/p ">クエリを実行すると、<codeph class="+ topic/ph pr-d/codeph ">data</codeph> プロパティには 1 つのエレメントを持つ配列オブジェクトが追加されます。このエレメントは、単一プロパティ <codeph class="+ topic/ph pr-d/codeph ">numEmployees</codeph> を持つオブジェクトです。</p>
	 
	 <p class="- topic/p ">結果データで列名が重複している場合、例えば、異なる 2 つのテーブルにそれぞれ <codeph class="+ topic/ph pr-d/codeph ">id</codeph> 列が含まれていて、この 2 つの列名が <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントで使用されている場合、重複した列名に対するプロパティ名は、<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.columnNameStyle</codeph> プロパティの値に基づいて設定されます。デフォルトでは、各列名がプロパティ名として使用されます。ただし、結果セットに同名の列が複数ある場合は、長い名前の形式（<codeph class="+ topic/ph pr-d/codeph ">[table-name]_[column-name]</codeph>）が一意の列名として使用されます。この動作は、<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.columnNameStyle</codeph> プロパティを設定することによって変更できます。</p>
	 
	 <p class="- topic/p ">デフォルトでは、<codeph class="+ topic/ph pr-d/codeph ">data</codeph> 配列のオブジェクトは Object インスタンスです。ただし、<codeph class="+ topic/ph pr-d/codeph ">SQLStatement.itemClass</codeph> プロパティの値をクラスに設定すると、<codeph class="+ topic/ph pr-d/codeph ">data</codeph> 配列エレメントは、そのクラスのインスタンスとして作成されます。結果データセットの各列に対応して、<codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph> クラスには、結果データセットの列名と正確に一致する名前を持つプロティが必要です。</p> 
	 
	 <p class="- topic/p ">ステートメントがデータを返さない場合、このプロパティは <codeph class="+ topic/ph pr-d/codeph ">null</codeph> になります。これは、<codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメント以外のステートメントや、0 行を返す <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントの場合に該当します。</p>
     
	 </apiDesc><example conref="examples\SQLStatement.itemClass.1.as" class="- topic/example "> 次のコードは、<codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph> プロパティを使用し、ランタイムに SQL <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ステートメントの結果からカスタムクラスのインスタンスを作成させる方法を示したものです。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// Employee class definition
package
{
    public class Employee
    {
        public var name:String;
        public var ssn:String;
        public var id:uint;
        public override function toString():String
        {
            return "id: "+ id.toString() + " name: " + name + " ssn: " + ssn;
        }
    }
}


// using the Employee class as SQLStatement.itemClass
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    dbStatement.itemClass = Employee;
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.execute();
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var emp:Employee;
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            emp = result.data[i];
            trace(emp.toString());
        }
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/columnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">SQLConnection.columnNameStyle</linktext></link><link href="flash.data.xml#SQLStatement/itemClass" class="- topic/link "><linktext class="- topic/linktext ">SQLStatement.itemClass</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLResult:lastInsertRowID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">lastInsertRowID</apiName><shortdesc class="- topic/shortdesc ">
     SQL INSERT ステートメントによって最後に生成された行識別子です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> ステートメントによって最後に生成された行識別子です。
	 
     <p class="- topic/p ">実行されたステートメントが <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> ステートメントでない場合、この値は 0 になります。</p>
	 
	 <p class="- topic/p ">行識別子は、データベース内のテーブルの行を一意に識別するために使用されます。この値は、データベースによって頻繁に生成されます。</p>
	 
	 <p class="- topic/p ">主キーと生成される行識別子について詳しくは、「CREATE TABLE」および「式」のセクション（どちらも付録「<xref href="http://adobe.com/go/learn_as3_sqlsupportdb_en" class="- topic/xref ">ローカルデータベースでの SQL サポート</xref>」にあります）を参照してください。</p>
     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/lastInsertRowID" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.lastInsertRowID</linktext></link><link href="flash.events.xml#SQLUpdateEvent/rowID" class="- topic/link "><linktext class="- topic/linktext ">flash.events.SQLUpdateEvent.rowID</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLResult:rowsAffected:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">rowsAffected</apiName><shortdesc class="- topic/shortdesc ">
     操作によって影響を受ける行数を示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     操作によって影響を受ける行数を示します。<codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>、<codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph> または <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> ステートメントによって直接指定されている変更だけがカウントされます。
     
     <p class="- topic/p ">トリガーによる間接的な変更はカウントされません。トリガーによる変更も含め、変更の合計数を特定するには、<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.totalChanges</codeph> プロパティを使用します。</p>
	 
	 <p class="- topic/p ">関連する SQL 操作が <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> ステートメントで、<codeph class="+ topic/ph pr-d/codeph ">WHERE</codeph> 句が記述されていない（ステートメントによってテーブルの全行を削除する）場合、削除された行数にかかわらず、<codeph class="+ topic/ph pr-d/codeph ">rowsAffected</codeph> プロパティは常に 0 になります。削除された行数を知る必要がある場合は、<codeph class="+ topic/ph pr-d/codeph ">WHERE</codeph> 句として <codeph class="+ topic/ph pr-d/codeph ">WHERE 1 = 1</codeph> を記述します。この場合、すべての行が削除され、削除された行数が正確に <codeph class="+ topic/ph pr-d/codeph ">rowsAffected</codeph> プロパティに反映されます。ただし、削除される行数によっては、この方法によってステートメントのパフォーマンスに悪影響を与える場合があります。</p>
     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/totalChanges" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.totalChanges</linktext></link></related-links></apiValue></apiClassifier></apiPackage>