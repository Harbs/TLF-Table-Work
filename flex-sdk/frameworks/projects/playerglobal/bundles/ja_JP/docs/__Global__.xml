<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="__Global__" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiPackage/apiPackage "><apiName class="- topic/title reference/title apiRef/apiName ">__Global__</apiName><apiDetail class="- topic/body reference/refbody apiRef/apiDetail "/><apiClassifier languages="" id="globalClassifier:VerifyError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">VerifyError</apiName><shortdesc class="- topic/shortdesc ">
 VerifyError クラスは、不正な形式または破損した SWF ファイルが検出された場合に発生するエラーを表します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">VerifyError は、不正な形式または破損した SWF ファイルが検出された場合にスローされます。
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 VerifyError クラスは、不正な形式または破損した SWF ファイルが検出された場合に発生するエラーを表します。 
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader" class="- topic/link "><linktext class="- topic/linktext ">Loader クラス</linktext></link></related-links><apiConstructor id="VerifyError:VerifyError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">VerifyError</apiName><shortdesc class="- topic/shortdesc ">
	 新しい VerifyError オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">VerifyError オブジェクトに関連付けられたメッセージです。      
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 新しい VerifyError オブジェクトを作成します。
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:ArgumentError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ArgumentError</apiName><shortdesc class="- topic/shortdesc ">
 ArgumentError クラスは、関数で指定された引数がその関数の定義に適合していないために発生するエラーを表します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">関数呼び出しで指定されたパラメーター値がその関数の定義に適合していない場合、ArgumentError がスローされます。
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ArgumentError クラスは、関数で指定された引数がその関数の定義に適合していないために発生するエラーを表します。このエラーは、例えば、不適切な数の引数、不適切な型の引数、または無効な引数を指定して関数が呼び出されたときなどに発生します。
 
 </apiDesc><example conref="examples\ArgumentErrorExample.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">ArgumentError</codeph> エラーが <codeph class="+ topic/ph pr-d/codeph ">try..catch</codeph> ステートメント内でどのように生成され、処理されるかを示しています。<codeph class="+ topic/ph pr-d/codeph ">println()</codeph> 関数は、1 つの引数（1 つのストリング）を受け取りますが、2 つのストリングが指定されているため、エラーがスローされます。通常、このようなエラーはコンパイラーでキャッチされる場合がありますが、<codeph class="+ topic/ph pr-d/codeph ">this[]</codeph> シンタックス（<codeph class="+ topic/ph pr-d/codeph ">try</codeph> ステートメント内）で、関数に対するコンパイラーのシンタックスチェックは迂回されています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    
    public class ArgumentErrorExample extends Sprite {
        public function ArgumentErrorExample() {
                println("Hello World");
                
                try {
                    this["println"]("Hello", "World");
                }
                catch(e:ArgumentError) {
                    trace(e);
                }
        }
        
        public function println(str:String):void {
            trace(str);
        }
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="ArgumentError:ArgumentError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">ArgumentError</apiName><shortdesc class="- topic/shortdesc ">
	 新しい ArgumentError オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">エラーに関連付けられたストリングです。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 新しい ArgumentError オブジェクトを作成します。
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:QName" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">QName</apiName><shortdesc class="- topic/shortdesc ">

QName オブジェクトは、XML エレメントの完全修飾名と属性を表します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">QName
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">

QName オブジェクトは、XML エレメントの完全修飾名と属性を表します。各 QName オブジェクトには、ローカル名と名前空間 URI が付けられます。名前空間 URI の値が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、QName オブジェクトはすべての名前空間に一致します。QName コンストラクターは、別の QName オブジェクトのコピーである新しい QName オブジェクトを作成したり、Namespace オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> と QName オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">localName</codeph> を持つ新しい QName オブジェクトを作成する場合に使用します。 
 

<p class="- topic/p ">E4X 固有のメソッドでは、QName オブジェクトとストリングを同じように使用することができます。E4X メソッドは、QName、Namespace、XML、および XMLList の各クラスにあります。これらの E4X メソッドは、ストリングを受け取ると共に、QName オブジェクトを受け取ることもできます。この互換性によって、名前空間のサポートと <codeph class="+ topic/ph pr-d/codeph ">XML.child()</codeph> などのメソッドの連携が行われます。 </p>

<p class="- topic/p ">XML、XMLList、Namespace などのクラスと同様、QName クラスには ECMAScript for XML（E4X）仕様（ECMA-357 Edition 2）で定義されている強力な XML 処理規格が実装されています。</p>

<p class="- topic/p ">完全修飾識別子は QName オブジェクトとして評価されます。名前空間を特定しないで XML エレメントの QName オブジェクトを指定した場合、関連付けられている QName オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> プロパティは、グローバルなデフォルトの名前空間に設定されます。名前空間を特定しないで XML 属性の QName オブジェクトを指定した場合、<codeph class="+ topic/ph pr-d/codeph ">uri</codeph> プロパティは空のストリングに設定されます。</p>

</apiDesc><example conref="examples\QNameExample.as" class="- topic/example "> 次の例は、QName インスタンスを作成し、それを使用して XML エレメントを選択する方法を示しています。QName を作成する 2 つの方法を示します。
 <ol class="- topic/ol "><li class="- topic/li ">Namespace インスタンスを作成し、それを QName コンストラクターへの入力として使用する。この方法は、<codeph class="+ topic/ph pr-d/codeph ">Namespace.prefix</codeph> プロパティを後で別の目的のために使用する場合に最適です。</li><li class="- topic/li ">QName コンストラクター内の <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> パラメーターに対して単純なストリング値を使用して QName インスタンスを作成する。</li></ol>
 <p class="- topic/p ">
 このコードは次の処理を行います。
 </p>
 <ol class="- topic/ol "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">rssXML</codeph> という名前の XML 変数を定義します。</li><li class="- topic/li ">接頭辞 <codeph class="+ topic/ph pr-d/codeph ">dc</codeph> を使用して新しい Namespace オブジェクトを作成します。</li><li class="- topic/li ">その Namespace オブジェクトとローカル名 <codeph class="+ topic/ph pr-d/codeph ">creator</codeph> を使用して、新しい QName オブジェクトを作成します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">showDescendants()</codeph> メソッドを呼び出します。このメソッドは <codeph class="+ topic/ph pr-d/codeph ">XML.descendants()</codeph> メソッドを使用して、指定された QName インスタンスに一致する修飾名を持つすべての子孫エレメントを含む XMLList インスタンスを取得します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">for each</codeph> ループを使用して、リスト内の各エレメントの修飾語とテキスト値を表示します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">uri</codeph> パラメーターとローカル名 <codeph class="+ topic/ph pr-d/codeph ">date</codeph> のストリング値を使用して、別の QName オブジェクトを作成します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">showDescendants()</codeph> メソッドを再び呼び出して、子孫エレメントの名前とテキスト値を表示します。</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.display.Sprite;
    
    public class QNameExample extends Sprite
    {
        public function QNameExample()
        {
            var rssXML:XML =  &lt;rdf:RDF
              xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
              xmlns="http://purl.org/rss/1.0/"
              xmlns:dc="http://purl.org/dc/elements/1.1/">
              &lt;channel rdf:about="http://www.xml.com/cs/xml/query/q/19">
                &lt;title>Test RSS&lt;/title>
                &lt;link>http://www.adobe.com/&lt;/link>
                &lt;description>This is a test RSS document.&lt;/description>
                &lt;language>en-us&lt;/language>
                &lt;items>
                  &lt;rdf:Seq>
                &lt;rdf:li rdf:resource="http://www.adobe.com/devnet/flash/"/>
                &lt;rdf:li rdf:resource="http://www.adobe.com/devnet/flex/"/>
                  &lt;/rdf:Seq>
                &lt;/items>
              &lt;/channel>
              &lt;item rdf:about="http://www.adobe.com/devnet/flash/">
                &lt;title>Flash Developer Center&lt;/title>
                &lt;link>http://www.adobe.com/devnet/flash/&lt;/link>
                &lt;description>Welcome to the Flash Developer Center&lt;/description>
                &lt;dc:creator>Adobe&lt;/dc:creator>
                &lt;dc:date>2005-08-08&lt;/dc:date>    
              &lt;/item>
              &lt;item rdf:about="http://www.adobe.com/devnet/flex/">
                &lt;title>Flex Developer Center&lt;/title>
                &lt;link>http://www.adobe.com/devnet/flex/&lt;/link>
                &lt;description>Welcome to the Flex Developer Center&lt;/description>
                &lt;dc:creator>Adobe&lt;/dc:creator>
                &lt;dc:date>2005-10-16&lt;/dc:date>    
              &lt;/item>
            &lt;/rdf:RDF>;
            
            var dcNamespace:Namespace = new Namespace("dc", "http://purl.org/dc/elements/1.1/");
            var creatorQName:QName = new QName(dcNamespace, "creator");
            trace(creatorQName.uri); // http://purl.org/dc/elements/1.1/
            trace(creatorQName.localName); // creator
            
            showDescendants(rssXML, creatorQName);
            
            var dateQName:QName = new QName("http://purl.org/dc/elements/1.1/", "date");
            trace(dateQName.uri); // http://purl.org/dc/elements/1.1/
            trace(dateQName.localName); // date
            
            showDescendants(rssXML, dateQName);
        }
        
        public function showDescendants(xmlData:XML, qualifiedName:QName):void
        {
            var decendantList:XMLList = xmlData.descendants(qualifiedName);
            
            for each (var element:XML in decendantList)
            {
                trace(element.name()); // the fully qualified name, 
                                       // like "http://purl.org/dc/elements/1.1/::creator"
                trace(element); // the simple text value of each element, like "Adobe"
            }                
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#XML" class="- topic/link "><linktext class="- topic/linktext ">XML</linktext></link><link href="#XMLList" class="- topic/link "><linktext class="- topic/linktext ">XMLList</linktext></link><link href="#Namespace" class="- topic/link "><linktext class="- topic/linktext ">Namespace</linktext></link><link href="http://www.ecma-international.org/publications/standards/Ecma-357.htm" class="- topic/link "><linktext class="- topic/linktext ">ECMAScript for XML（E4X）specification（ECMA-357 edition 2）</linktext></link></related-links><apiConstructor id="QName:QName_0" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">QName</apiName><shortdesc class="- topic/shortdesc "> 
    別の QName オブジェクトのコピーである QName オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>(pdehaan) i changed first param from "name" to "uri" as the previous naming was very confusing
    </internal></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">qname</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">QName</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">コピーする QName オブジェクトです。他のタイプのオブジェクトはストリングに変換され、新しい QName オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">localName</codeph> プロパティに割り当てられます。
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    別の QName オブジェクトのコピーである QName オブジェクトを作成します。コンストラクターに渡されたパラメーターが QName オブジェクトである場合、QName オブジェクトのコピーが作成されます。パラメーターが QName オブジェクトでない場合、パラメーターはストリングに変換され、新しい QName インスタンスの <codeph class="+ topic/ph pr-d/codeph ">localName</codeph> プロパティに割り当てられます。パラメーターが <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> であるか未指定の場合、<codeph class="+ topic/ph pr-d/codeph ">localName</codeph> プロパティが空のストリングに設定された新しい QName オブジェクトが作成されます。
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このクラスは、2 つのコンストラクター項目を示しています。それぞれの形式が異なるパラメーターを受け入れるためです。コンストラクターの動作は、各項目で詳細を示すように、渡されるパラメーターの型と数によって異なります。ActionScript 3.0 はメソッドまたはコンストラクターのオーバーロードをサポートしていません。</p>
    
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiConstructor id="QName:QName_1" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">QName</apiName><shortdesc class="- topic/shortdesc "> 
    Namespace オブジェクトの URI オブジェクトと QName オブジェクトの localName を持つ QName オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">QName
    </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uri</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Namespace</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">uri</codeph> 値のコピー元の Namespace オブジェクトです。他のタイプのパラメーターはストリングに変換されます。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">QName</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">localName</codeph> 値のコピー元の QName オブジェクトです。他のタイプのパラメーターはストリングに変換されます。
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    Namespace オブジェクトの URI オブジェクトと QName オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">localName</codeph> を持つ QName オブジェクトを作成します。いずれかのパラメーターが目的のデータ型でない場合、パラメーターはストリングに変換され、新しい QName オブジェクトの該当のプロパティに割り当てられます。例えば、両方のパラメーターがストリングの場合、<codeph class="+ topic/ph pr-d/codeph ">uri</codeph> プロパティが最初のパラメーターに設定され、<codeph class="+ topic/ph pr-d/codeph ">localName</codeph> プロパティが 2 番目のパラメーターに設定された新しい QName オブジェクトが返されます。つまり、他の多くの順列と同様、次の順列がコントラクタで有効な形式となります。
<pre xml:space="preserve" class="- topic/pre ">
QName (uri:Namespace, localName:String);
QName (uri:String, localName: QName);
QName (uri:String, localName: String);
</pre>
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">null</codeph> を <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> パラメーターに渡すと、新しい QName オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> プロパティは <codeph class="+ topic/ph pr-d/codeph ">null</codeph> に設定されます。
    </p>
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このクラスは、2 つのコンストラクター項目を示しています。それぞれの形式が異なるパラメーターを受け入れるためです。コンストラクターの動作は、各項目で詳細を示すように、渡されるパラメーターの型と数によって異なります。ActionScript 3.0 はメソッドまたはコンストラクターのオーバーロードをサポートしていません。</p>
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="QName:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	URI と QName オブジェクトのローカル名を "::" で区切ったストリングを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">QName, QName.toString, toString
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリングとしての完全修飾名です。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	URI と QName オブジェクトのローカル名を "::" で区切ったストリングを返します。
	
	<p class="- topic/p ">形式は QName オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> プロパティによって決まります。</p>
	<pre xml:space="preserve" class="- topic/pre ">If <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> == "" 
		<codeph class="+ topic/ph pr-d/codeph ">toString</codeph> returns <codeph class="+ topic/ph pr-d/codeph ">localName</codeph>
	else if <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> == null
		<codeph class="+ topic/ph pr-d/codeph ">toString</codeph> returns ~~::<codeph class="+ topic/ph pr-d/codeph ">localName</codeph> 
	else
		<codeph class="+ topic/ph pr-d/codeph ">toString</codeph> returns <codeph class="+ topic/ph pr-d/codeph ">uri</codeph>::<codeph class="+ topic/ph pr-d/codeph ">localName</codeph></pre>
	
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="QName:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
    QName オブジェクトを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">QName, QName.toString, toString
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">QName インスタンスのプリミティブ値です。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">QName</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    QName オブジェクトを返します。
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="QName:localName:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localName</apiName><shortdesc class="- topic/shortdesc ">
	QName オブジェクトのローカル名です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">QName, QName.localName, localName
	</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	QName オブジェクトのローカル名です。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="QName:uri:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">uri</apiName><shortdesc class="- topic/shortdesc ">
	QName オブジェクトの URI です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">QName, QName.uri, uri
	</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	QName オブジェクトの URI です。
 	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:EvalError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">EvalError</apiName><shortdesc class="- topic/shortdesc ">
 EvalError クラスは、ユーザーコードが Function オブジェクトで eval() 関数を呼び出したとき、または new 演算子を使用しようとしたときに発生するエラーです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
  
  </helpid></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">EvalError は、コードが Function オブジェクトで eval() を呼び出そうとしたとき、または new を使用しようとしたときにスローされます。
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 EvalError クラスは、ユーザーコードが Function オブジェクトで <codeph class="+ topic/ph pr-d/codeph ">eval()</codeph> 関数を呼び出したとき、または <codeph class="+ topic/ph pr-d/codeph ">new</codeph> 演算子を使用しようとしたときに発生するエラーです。Function オブジェクトでの <codeph class="+ topic/ph pr-d/codeph ">eval()</codeph> および <codeph class="+ topic/ph pr-d/codeph ">new</codeph> の呼び出しはサポートされていません。
 
 </apiDesc></apiClassifierDetail><apiConstructor id="EvalError:EvalError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">EvalError</apiName><shortdesc class="- topic/shortdesc ">
	 新しい EvalError オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">エラーに関連付けられたストリングです。     
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 新しい EvalError オブジェクトを作成します。
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:Math" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Math</apiName><shortdesc class="- topic/shortdesc ">
 Math クラスには、一般的な数学関数および値を表すメソッドおよび定数があります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math, math object, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Math クラスは、一般的な数学定数および数学関数を定義する静的プロパティおよびメソッドから構成されるトップレベルのクラスです。
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Math クラスには、一般的な数学関数および値を表すメソッドおよび定数があります。 
 <p class="- topic/p ">数学定数および関数にアクセスして処理するには、このクラスのメソッドとプロパティを使用します。Math クラスのプロパティとメソッドはすべて静的であり、<codeph class="+ topic/ph pr-d/codeph ">Math.method(</codeph> <codeph class="+ topic/ph pr-d/codeph "> <i class="+ topic/ph hi-d/i ">parameter</i> </codeph> <codeph class="+ topic/ph pr-d/codeph ">)</codeph> または <codeph class="+ topic/ph pr-d/codeph ">Math.constant</codeph> というシンタックスを使用して呼び出す必要があります。ActionScript では、定数は倍精度の IEEE-754 浮動小数の最大精度で定義されます。</p>
 <p class="- topic/p ">Math クラスのいくつかのメソッドでは、ラジアン単位の角度がパラメーターとして使用されています。メソッドを呼び出す前に次の式を使用してラジアン値を計算し、計算した値をパラメーターとして指定できます。また、式の右辺全体（<codeph class="+ topic/ph pr-d/codeph ">degrees</codeph> には度数で角度を代入）をラジアンパラメーターとして指定することもできます。</p>
 <p class="- topic/p ">ラジアン値を計算するには、次の式を使用します。</p>
 <pre xml:space="preserve" class="- topic/pre ">
 radians = degrees ~~ Math.PI/180
 </pre>
 <p class="- topic/p ">ラジアンで角度を計算するには、次の式を使用します。</p>
 <pre xml:space="preserve" class="- topic/pre ">
 degrees = radians ~~ 180/Math.PI
 </pre>
 <p class="- topic/p ">次の例では、角度 45 度のサインを計算する式をパラメーターとして渡します。</p>
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">Math.sin(45 ~~ Math.PI/180)</codeph> は <codeph class="+ topic/ph pr-d/codeph ">Math.sin(.7854)</codeph> と同じです。</p>
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>Math 関数 acos、asin、atan、atan2、cos、exp、log、pow、sin、および sqrt の結果は、CPU やオペレーティングシステムで使用されているアルゴリズムによって少し異なる値になる場合があります。Flash ランタイムでは、上述の関数を計算するときに CPU（CPU が浮動小数の計算をサポートしていない場合はオペレーティングシステム）が呼び出され、使用する CPU やオペレーティングシステムによって多少異なる結果が表示されます。
 </p>
 
 
 </apiDesc></apiClassifierDetail><apiOperation id="Math:abs" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">abs</apiName><shortdesc class="- topic/shortdesc ">
  パラメーター val で指定された数値の絶対値を計算して返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.abs, abs, absolute
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定したパラメーターの絶対値です。
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">絶対値を返す数値です。
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">指定した Number の絶対値を返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  パラメーター <codeph class="+ topic/ph pr-d/codeph ">val</codeph> で指定された数値の絶対値を計算して返します。
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:acos" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">acos</apiName><shortdesc class="- topic/shortdesc ">
  パラメーター val で指定された数値のアークコサイン（逆余弦）を計算してラジアン単位で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.acos, acos, arc cosine
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">パラメーター <codeph class="+ topic/ph pr-d/codeph ">val</codeph> のアークコサインです。
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">-1.0 ～ 1.0 の数値です。  
  
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">指定された Number のアークコサイン（逆余弦）をラジアン単位で返します。 
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  パラメーター <codeph class="+ topic/ph pr-d/codeph ">val</codeph> で指定された数値のアークコサイン（逆余弦）を計算してラジアン単位で返します。
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:asin" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">asin</apiName><shortdesc class="- topic/shortdesc ">
  パラメーター val で指定された数値のアークサイン（逆正弦）を計算してラジアン単位で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.asin, asin, arc sine
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">2 で割った負のπと 2 で割った正のπの間の数値です。
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">-1.0 ～ 1.0 の数値です。  
  
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">指定された Number パラメーターのアークサイン（逆正弦）の値をラジアン単位で返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  パラメーター <codeph class="+ topic/ph pr-d/codeph ">val</codeph> で指定された数値のアークサイン（逆正弦）を計算してラジアン単位で返します。
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:atan2" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">atan2</apiName><shortdesc class="- topic/shortdesc ">
  y/x 座標の角度をラジアン単位で計算して返します。このとき、円の x 軸（0,0 は円の中心を示します）から反時計回りに測定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.atan2, atan2, arc tangent
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数値。
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">y</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ポイントの <i class="+ topic/ph hi-d/i ">y</i> 座標です。
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">x</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ポイントの <i class="+ topic/ph hi-d/i ">x</i> 座標です。  
  
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">円の x 軸から反時計回りに測定した場合に、y/x 座標の角度をラジアン単位で返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  <codeph class="+ topic/ph pr-d/codeph ">y</codeph>/<codeph class="+ topic/ph pr-d/codeph ">x</codeph> 座標の角度をラジアン単位で計算して返します。このとき、円の <i class="+ topic/ph hi-d/i ">x</i> 軸（0,0 は円の中心を示します）から反時計回りに測定します。戻り値は、正のパイと負のパイの間の値になります。atan2 への第 1 パラメーターは常に <i class="+ topic/ph hi-d/i ">y</i> 座標です。
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/acos()" class="- topic/link "><linktext class="- topic/linktext ">Math.acos()</linktext></link><link href="#Math/asin()" class="- topic/link "><linktext class="- topic/linktext ">Math.asin()</linktext></link><link href="#Math/atan()" class="- topic/link "><linktext class="- topic/linktext ">Math.atan()</linktext></link><link href="#Math/cos()" class="- topic/link "><linktext class="- topic/linktext ">Math.cos()</linktext></link><link href="#Math/sin()" class="- topic/link "><linktext class="- topic/linktext ">Math.sin()</linktext></link><link href="#Math/tan()" class="- topic/link "><linktext class="- topic/linktext ">Math.tan()</linktext></link></related-links></apiOperation><apiOperation id="Math:atan" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">atan</apiName><shortdesc class="- topic/shortdesc ">
  パラメーター val で指定された値がタンジェント（正接）の値になる角度を計算してラジアン単位で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.atan, atan, arc tangent
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">2 で割った負のπと 2 で割った正のπの間の数値です。
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">角度のタンジェントを表す数値です。  
  
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">パラメーター val で指定された値がタンジェント（正接）の値になる角度をラジアン単位で返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  パラメーター <codeph class="+ topic/ph pr-d/codeph ">val</codeph> で指定された値がタンジェント（正接）の値になる角度を計算してラジアン単位で返します。戻り値は、2 で割った負の π と 2 で割った正の π の間（-π/2 ～ π/2）の値になります。
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:ceil" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">ceil</apiName><shortdesc class="- topic/shortdesc ">
  指定された数値または式を切り上げた値を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.ceil, ceil, ceiling
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">パラメーター <codeph class="+ topic/ph pr-d/codeph ">val</codeph> の値以上の最も近い整数です。
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数値または式です。
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">指定された数値または式を切り上げた値を返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  指定された数値または式を切り上げた値を返します。数値の切り上げとは、その数値以上の最も近い整数にすることです。
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/floor()" class="- topic/link "><linktext class="- topic/linktext ">Math.floor()</linktext></link><link href="#Math/round()" class="- topic/link "><linktext class="- topic/linktext ">Math.round()</linktext></link></related-links></apiOperation><apiOperation id="Math:cos" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">cos</apiName><shortdesc class="- topic/shortdesc ">
  ラジアン単位で指定された角度のコサイン（余弦）を計算して返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.cos, cos, cosine
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">-1.0 ～ 1.0 の数値です。
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">angleRadians</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">角度をラジアンで表した数値です。 
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">指定された角度のコサインを返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  ラジアン単位で指定された角度のコサイン（余弦）を計算して返します。ラジアンを計算するには、Math クラスの概要を参照してください。
  
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/acos()" class="- topic/link "><linktext class="- topic/linktext ">Math.acos()</linktext></link><link href="#Math/asin()" class="- topic/link "><linktext class="- topic/linktext ">Math.asin()</linktext></link><link href="#Math/atan()" class="- topic/link "><linktext class="- topic/linktext ">Math.atan()</linktext></link><link href="#Math/atan2()" class="- topic/link "><linktext class="- topic/linktext ">Math.atan2()</linktext></link><link href="#Math/sin()" class="- topic/link "><linktext class="- topic/linktext ">Math.sin()</linktext></link><link href="#Math/tan()" class="- topic/link "><linktext class="- topic/linktext ">Math.tan()</linktext></link></related-links></apiOperation><apiOperation id="Math:exp" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">exp</apiName><shortdesc class="- topic/shortdesc ">
  自然対数の底（e）をパラメーター x で指定された指数で累乗した値を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.exp, exp, exponent
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><i class="+ topic/ph hi-d/i ">e</i> のパラメーター <codeph class="+ topic/ph pr-d/codeph ">val</codeph> による累乗です。
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指数; 数値または式です。
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">自然対数の底（e）をパラメーター val で指定された指数で累乗した値を返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  自然対数の底（<i class="+ topic/ph hi-d/i ">e</i>）を、パラメーター <codeph class="+ topic/ph pr-d/codeph ">x</codeph> で指定された指数で累乗した値を返します。定数 <codeph class="+ topic/ph pr-d/codeph ">Math.E</codeph> を使用して、<i class="+ topic/ph hi-d/i ">e</i> の値を指定できます。
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/E" class="- topic/link "><linktext class="- topic/linktext ">Math.E</linktext></link></related-links></apiOperation><apiOperation id="Math:floor" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">floor</apiName><shortdesc class="- topic/shortdesc ">
  パラメーター val で指定された数値または式を切り捨てた値を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.floor, floor
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">パラメーター <codeph class="+ topic/ph pr-d/codeph ">val</codeph> の値以下の最も近い整数です。
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数値または式です。
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">パラメーター val で指定された数値または式を切り捨てた値を返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  パラメーター <codeph class="+ topic/ph pr-d/codeph ">val</codeph> で指定された数値または式を切り捨てた値を返します。切り捨てとは、指定された数値または式以下の最も近い整数にすることです。
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:log" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">log</apiName><shortdesc class="- topic/shortdesc ">
  パラメーター val の自然対数を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.log, log, logarithm
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">パラメーター <codeph class="+ topic/ph pr-d/codeph ">val</codeph> の自然対数です。
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">値が 0 よりも大きい数値または式です。
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">パラメーター val の自然対数を返します。 
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  パラメーター <codeph class="+ topic/ph pr-d/codeph ">val</codeph> の自然対数を返します。
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:max" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">max</apiName><shortdesc class="- topic/shortdesc ">
  val1 と val2（または 3 つ以上の値）を評価し、最大値を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.max, max, maximum
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">パラメーター <codeph class="+ topic/ph pr-d/codeph ">val1</codeph> と <codeph class="+ topic/ph pr-d/codeph ">val2</codeph>（または 3 つ以上の値）の最大値です。
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val1</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数値または式です。
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val2</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数値または式です。
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rest</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数値または式です。<codeph class="+ topic/ph pr-d/codeph ">Math.max()</codeph> は複数の引数を取ることができます。
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">val1 と val2 を評価し、大きい方の値を返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  <codeph class="+ topic/ph pr-d/codeph ">val1</codeph> と <codeph class="+ topic/ph pr-d/codeph ">val2</codeph>（または 3 つ以上の値）を評価し、最大値を返します。
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/min()" class="- topic/link "><linktext class="- topic/linktext ">Math.min()</linktext></link></related-links></apiOperation><apiOperation id="Math:min" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">min</apiName><shortdesc class="- topic/shortdesc ">
  val1 と val2（または 3 つ以上の値）を評価し、最小値を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.min, min, minimum
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">パラメーター <codeph class="+ topic/ph pr-d/codeph ">val1</codeph> と <codeph class="+ topic/ph pr-d/codeph ">val2</codeph>（または 3 つ以上の値）の最小値です。
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val1</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数値または式です。
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val2</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数値または式です。
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rest</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数値または式です。<codeph class="+ topic/ph pr-d/codeph ">Math.min()</codeph> は複数の引数を取ることができます。
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">パラメーター val1 と val2 を評価し、小さい方の値を返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  <codeph class="+ topic/ph pr-d/codeph ">val1</codeph> と <codeph class="+ topic/ph pr-d/codeph ">val2</codeph>（または 3 つ以上の値）を評価し、最小値を返します。
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/max()" class="- topic/link "><linktext class="- topic/linktext ">Math.max()</linktext></link></related-links></apiOperation><apiOperation id="Math:pow" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">pow</apiName><shortdesc class="- topic/shortdesc ">
  base の power 乗を計算して返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.pow, pow, power
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">base</codeph> の値を <codeph class="+ topic/ph pr-d/codeph ">pow</codeph> で累乗した値です。
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">base</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">パラメーター <codeph class="+ topic/ph pr-d/codeph ">pow</codeph> の指数で累乗される数値です。
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pow</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">パラメーター <codeph class="+ topic/ph pr-d/codeph ">base</codeph> を累乗する指数です。
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">val1 の val2 乗を返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  <codeph class="+ topic/ph pr-d/codeph ">base</codeph> の <codeph class="+ topic/ph pr-d/codeph ">power</codeph> 乗を計算して返します。
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:random" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">random</apiName><shortdesc class="- topic/shortdesc ">
  擬似乱数 n を返します（0 &amp;lt;= n &amp;lt; 1）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.random, random
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">疑似乱数です。
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">疑似乱数 n を返します（0 &lt;= n &lt; 1）。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  疑似乱数 n を返します（0 &lt;= n &lt; 1）。返される数値は非公開の方式で計算された「擬似乱数」です。これは、計算には必ず非ランダムの要素が含まれるためです。
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:round" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">round</apiName><shortdesc class="- topic/shortdesc ">
  パラメーター val の値を最も近い整数に四捨五入し、値を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.round, round
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">最も近い整数に四捨五入されたパラメーター <codeph class="+ topic/ph pr-d/codeph ">val</codeph> です。
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">四捨五入する数値です。
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">パラメーター val を最も近い整数に四捨五入した値を返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  パラメーター <codeph class="+ topic/ph pr-d/codeph ">val</codeph> の値を最も近い整数に四捨五入し、値を返します。<codeph class="+ topic/ph pr-d/codeph ">val</codeph> が 2 つの最も近い整数から等距離である場合（.5 で終わる数値など）、値は次に大きな整数に切り上げられます。
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/ceil()" class="- topic/link "><linktext class="- topic/linktext ">Math.ceil()</linktext></link><link href="#Math/floor()" class="- topic/link "><linktext class="- topic/linktext ">Math.floor()</linktext></link></related-links></apiOperation><apiOperation id="Math:sin" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sin</apiName><shortdesc class="- topic/shortdesc ">
  ラジアン単位で指定された角度のサイン（正弦）を計算して返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.sin, sin, sine
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数値。指定した角度のサイン（-1.0 ～ 1.0）です。
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">angleRadians</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">角度をラジアンで表した数値です。
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">指定された角度のサインを返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  ラジアン単位で指定された角度のサイン（正弦）を計算して返します。ラジアンを計算するには、Math クラスの概要を参照してください。
  
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/acos()" class="- topic/link "><linktext class="- topic/linktext ">Math.acos()</linktext></link><link href="#Math/asin()" class="- topic/link "><linktext class="- topic/linktext ">Math.asin()</linktext></link><link href="#Math/atan()" class="- topic/link "><linktext class="- topic/linktext ">Math.atan()</linktext></link><link href="#Math/atan2()" class="- topic/link "><linktext class="- topic/linktext ">Math.atan2()</linktext></link><link href="#Math/cos()" class="- topic/link "><linktext class="- topic/linktext ">Math.cos()</linktext></link><link href="#Math/tan()" class="- topic/link "><linktext class="- topic/linktext ">Math.tan()</linktext></link></related-links></apiOperation><apiOperation id="Math:sqrt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sqrt</apiName><shortdesc class="- topic/shortdesc ">
  指定された数値の平方根を計算して返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.sqrt, sqrt, square root 
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">パラメーター <codeph class="+ topic/ph pr-d/codeph ">val</codeph> が 0 以上の場合は数値、そうでない場合は <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>（非数）です。
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 以上の数値または式です。 
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">指定された数値の平方根を返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  指定された数値の平方根を計算して返します。
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:tan" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">tan</apiName><shortdesc class="- topic/shortdesc ">
  指定された角度のタンジェント（正接）を計算して返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.tan, tan, tangent
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">パラメーター <codeph class="+ topic/ph pr-d/codeph ">angleRadians</codeph> のタンジェントです。
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">angleRadians</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">角度をラジアンで表した数値です。
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">指定された角度のタンジェントを返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  指定された角度のタンジェント（正接）を計算して返します。ラジアンを計算するには、Math クラスの概要を参照してください。
  
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/acos()" class="- topic/link "><linktext class="- topic/linktext ">Math.acos()</linktext></link><link href="#Math/asin()" class="- topic/link "><linktext class="- topic/linktext ">Math.asin()</linktext></link><link href="#Math/atan()" class="- topic/link "><linktext class="- topic/linktext ">Math.atan()</linktext></link><link href="#Math/atan2()" class="- topic/link "><linktext class="- topic/linktext ">Math.atan2()</linktext></link><link href="#Math/cos()" class="- topic/link "><linktext class="- topic/linktext ">Math.cos()</linktext></link><link href="#Math/sin()" class="- topic/link "><linktext class="- topic/linktext ">Math.sin()</linktext></link></related-links></apiOperation><apiValue id="Math:E" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">E</apiName><shortdesc class="- topic/shortdesc ">
  自然対数の底を表す数学定数で e と表記されるものです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.e, e
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">2.71828182845905</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">自然対数の底を表す数学定数で e と表記されるものです。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  自然対数の底を表す数学定数で <i class="+ topic/ph hi-d/i ">e</i> と表記されるものです。<i class="+ topic/ph hi-d/i ">e</i><codeph class="+ topic/ph pr-d/codeph "/> の近似値は 2.71828182845905 です。
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:LN10" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LN10</apiName><shortdesc class="- topic/shortdesc ">
  10 の自然対数を表す数学定数で loge10 と表記されるものです。近似値は 2.302585092994046 です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.ln10, ln10, logarithm
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">2.302585092994046</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">10 の自然対数を表す数学定数で loge10 と表記されるものです。近似値は 2.302585092994046 です。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  10 の自然対数を表す数学定数で log<sub class="+ topic/ph hi-d/sub ">e</sub>10 と表記されるものです。近似値は 2.302585092994046 です。
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:LN2" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LN2</apiName><shortdesc class="- topic/shortdesc ">
  2 の自然対数を表す数学定数で loge2 と表記されるものです。近似値は 0.6931471805599453 です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.ln2, ln2, natural logarithm
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">0.6931471805599453</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">2 の自然対数を表す数学定数で loge2 と表記されるものです。近似値は 0.6931471805599453 です。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  2 の自然対数を表す数学定数で log<sub class="+ topic/ph hi-d/sub ">e</sub>2 と表記されるものです。近似値は 0.6931471805599453 です。
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:LOG10E" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LOG10E</apiName><shortdesc class="- topic/shortdesc ">
  10 を底とする定数 e（Math.E）の対数を表す数学定数で log10e と表記されるものです。近似値は 0.4342944819032518 です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.log10e, log10e, logarithm
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">0.4342944819032518</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">10 を底とする定数 e の対数を表す数学定数で log10e と表記されるものです。近似値は 0.4342944819032518 です。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  10 を底とする定数 <i class="+ topic/ph hi-d/i ">e</i>（<codeph class="+ topic/ph pr-d/codeph ">Math.E</codeph>）の対数を表す数学定数で log<sub class="+ topic/ph hi-d/sub ">10</sub>e と表記されるものです。近似値は 0.4342944819032518 です。 
  <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">Math.log()</codeph> メソッドは、数値の自然対数を計算します。<codeph class="+ topic/ph pr-d/codeph ">Math.log()</codeph> の結果に <codeph class="+ topic/ph pr-d/codeph ">Math.LOG10E</codeph> を乗算すると、10 を底とする対数を得ることができます。</p>
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:LOG2E" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LOG2E</apiName><shortdesc class="- topic/shortdesc ">
  2 を底とする定数 e の対数を表す数学定数で log2e と表記されるものです。近似値は 1.442695040888963387 です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.log2e, log2e, logarithm
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">1.442695040888963387</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">2 を底とする定数 e の対数を表す数学定数で log2e と表記されるものです。近似値は 1.442695040888963387 です。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  2 を底とする定数 <i class="+ topic/ph hi-d/i ">e</i> の対数を表す数学定数で log2e と表記されるものです。近似値は 1.442695040888963387 です。
  
  <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">Math.log</codeph> メソッドは、数値の自然対数を計算します。<codeph class="+ topic/ph pr-d/codeph ">Math.log()</codeph> の結果に <codeph class="+ topic/ph pr-d/codeph ">Math.LOG2E</codeph> を乗算すると、2 を底とする対数を得ることができます。</p>
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:PI" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">PI</apiName><shortdesc class="- topic/shortdesc ">
  円周と円の直径の比を表す数学定数で pi と表記されるものです。近似値は 3.141592653589793 です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.pi, pi
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">3.141592653589793</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">円周と円の直径の比を表す数学定数で pi と表記されるものです。近似値は 3.141592653589793 です。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  円周と円の直径の比を表す数学定数で pi と表記されるものです。近似値は 3.141592653589793 です。
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:SQRT1_2" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SQRT1_2</apiName><shortdesc class="- topic/shortdesc "> 
  1/2 の平方根を表す数学定数です。近似値は 0.7071067811865476 です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.sqrt1_2, sqrt1_2, square root
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">0.7071067811865476</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">1/2 の平方根を表す数学定数です。近似値は 0.7071067811865476 です。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
  1/2 の平方根を表す数学定数です。近似値は 0.7071067811865476 です。
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:SQRT2" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SQRT2</apiName><shortdesc class="- topic/shortdesc ">
  2 の平方根を表す数学定数です。近似値は 1.4142135623730951 です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.sqrt2, sqrt2, square root
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">1.4142135623730951</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">2 の平方根を表す数学定数です。近似値は 1.4142135623730951 です。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  2 の平方根を表す数学定数です。近似値は 1.4142135623730951 です。
  
  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:Array" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Array</apiName><shortdesc class="- topic/shortdesc ">
 Array クラスを使用すると、配列にアクセスして操作することができます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Array, Array object, built-in class
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">インデックス配列にアクセスして操作することができます。
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Array クラスを使用すると、配列にアクセスして操作することができます。配列インデックスは 0 から始まります。つまり、配列内の最初のエレメントは <codeph class="+ topic/ph pr-d/codeph ">[0]</codeph>、2 番目のエレメントは <codeph class="+ topic/ph pr-d/codeph ">[1]</codeph>（以下同様）になります。Array オブジェクトを作成するには、<codeph class="+ topic/ph pr-d/codeph ">new Array()</codeph> コンストラクターを使用します。 <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> は関数としても呼び出すことができます。 さらに、配列アクセス（<codeph class="+ topic/ph pr-d/codeph ">[]</codeph>）演算子を使用すると、配列の初期化または配列のエレメントへのアクセスを行うことができます。 
 <p class="- topic/p ">配列エレメントには、数値、ストリング、オブジェクトを含む各種データ型、さらに他の配列も保存できます。インデックス付き配列を作成し、その各エレメントに異なるインデックス配列を割り当てれば、<i class="+ topic/ph hi-d/i "/>「多次元」配列を作成できます。このような配列は、テーブル内のデータの表現に使用できるので、多次元であると考えられます。</p>
 <p class="- topic/p "> 配列は<i class="+ topic/ph hi-d/i "/>「希薄な配列」です。つまり、インデックス 0 に 1 つのエレメント、インデックス 5 に別のエレメントが存在しても、この 2 つのエレメントの間のインデックス位置にはエレメントが存在しない場合があります。このような場合、1 から 4 までの位置のエレメントは未定義となります。これはエレメントが存在しないことを示しており、必ずしも値 <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> を持つエレメントが存在するわけではありません。</p>
 
 <p class="- topic/p ">配列では、値による代入ではなく、参照による代入が行われます。 ある配列変数に別の配列変数を代入すると、両方とも同じ配列を参照するようになります。</p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var oneArray:Array = new Array("a", "b", "c");
 var twoArray:Array = oneArray; // Both array variables refer to the same array.
 twoArray[0] = "z";             
 trace(oneArray);               // Output: z,b,c.
 </codeblock>
 <p class="- topic/p "><i class="+ topic/ph hi-d/i "/>「結合配列」（<i class="+ topic/ph hi-d/i "/>「ハッシュ」とも呼ばれる）の作成には Array クラスを使用しないでください。結合配列は、数値エレメントではなく名前付きエレメントを含むデータ構造です。結合配列の作成には、Object クラスを使用してください。ActionScript では Array クラスを使用して結合配列を作成できますが、結合配列で Array クラスのメソッドやプロパティは使用できません。 </p>
 <p class="- topic/p ">Array クラスを拡張してメソッドをオーバーライドまたは追加することができます。ただし、サブクラスを <codeph class="+ topic/ph pr-d/codeph ">dynamic</codeph> として指定する必要があります。そうしない場合、配列にデータを保管する機能が失われます。</p>
 
 </apiDesc><example conref="examples\ArrayExample.as" class="- topic/example "> 次の例では、引数がなくエレメント数 0 個の新しい Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">myArr</codeph> を作成します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class ArrayExample extends Sprite {
        public function ArrayExample() {
            var myArr:Array = new Array();
            trace(myArr.length); // 0
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="operators.html#array_access" class="- topic/link "><linktext class="- topic/linktext ">[] (array access)</linktext></link><link href="#Object" class="- topic/link "><linktext class="- topic/linktext ">Object クラス</linktext></link></related-links><apiConstructor id="Array:Array_0" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Array</apiName><shortdesc class="- topic/shortdesc ">
     指定されたエレメントを持つ配列を作成することができます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">引数は、0 以上の整数ではない数値です。    
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">values</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">複数の任意の値で構成されるカンマ区切りリストです。 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>Array コンストラクターに数値パラメーターを 1 つだけ渡した場合、そのパラメーターは配列の <codeph class="+ topic/ph pr-d/codeph ">length</codeph> プロパティを指定するものと見なされます。</p>
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定されたエレメントを持つ配列を作成することができます。任意の型の値を指定することができます。配列内の最初のエレメントのインデックスまたは位置は、常に 0 です。
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このクラスは、2 つのコンストラクター項目を示しています。コンストラクターはさまざまなタイプの引数を受け入れるためです。コンストラクターの動作は、各項目で詳細を示すように、渡される引数の型と数によって異なります。ActionScript 3.0 はメソッドまたはコンストラクターのオーバーロードをサポートしていません。</p>
     </apiDesc><example conref="examples\Array_Array_3.as" class="- topic/example "> 次の例では、初期エレメント数が 3 個の新しい Array オブジェクトを作成して、この配列にストリングエレメント <codeph class="+ topic/ph pr-d/codeph ">one</codeph>、<codeph class="+ topic/ph pr-d/codeph ">two</codeph>、<codeph class="+ topic/ph pr-d/codeph ">three</codeph> を設定し、その配列をストリングに変換します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class Array_Array_3 extends Sprite {

        public function Array_Array_3() {
            var myArr:Array = new Array("one", "two", "three");
            trace(myArr.length); // 3
            trace(myArr);          // one,two,three
        }
    }
}
</codeblock></example></apiConstructorDetail><related-links class="- topic/related-links "><link href="operators.html#array_access" class="- topic/link "><linktext class="- topic/linktext ">[] array access</linktext></link><link href="#Array/length" class="- topic/link "><linktext class="- topic/linktext ">Array.length</linktext></link></related-links></apiConstructor><apiConstructor id="Array:Array_1" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Array</apiName><shortdesc class="- topic/shortdesc ">
     指定された数のエレメントを持つ配列を作成することができます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">引数は、0 以上の整数ではない数値です。    
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">numElements</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">配列内のエレメント数を指定する整数です。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定された数のエレメントを持つ配列を作成することができます。パラメーターを指定しない場合は、0 個のエレメントを持つ配列が作成されます。エレメント数を指定する場合は、<codeph class="+ topic/ph pr-d/codeph ">numElements</codeph> 個のエレメントを持つ配列が作成されます。 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このクラスは、2 つのコンストラクターメソッド項目を示しています。コンストラクターはさまざまなタイプの引数を受け入れるためです。コンストラクターの動作は、各項目で詳細を示すように、渡される引数の型と数によって異なります。ActionScript 3.0 はメソッドまたはコンストラクターのオーバーロードをサポートしていません。</p>
     
     
     </apiDesc><example conref="examples\Array_Array.as" class="- topic/example "> 次の例では、引数がなく初期のエレメント数が 0 個の Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">myArr</codeph> を作成します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class Array_Array extends Sprite {

        public function Array_Array() {
            var myArr:Array = new Array();
            trace(myArr.length); // 0
        }
    }
}
</codeblock></example><example conref="examples\Array_Array_2.as" class="- topic/example "> 次の例では、5 個の初期エレメント（長さが 5）を持つ Array オブジェクトを作成して、1 番目のエレメントにストリング <codeph class="+ topic/ph pr-d/codeph ">"one"</codeph> を設定し、ストリングエレメント <codeph class="+ topic/ph pr-d/codeph ">"six"</codeph> を、<codeph class="+ topic/ph pr-d/codeph ">push()</codeph> メソッドを使用して配列の最後に追加します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class Array_Array_2 extends Sprite {

        public function Array_Array_2() {
            var myArr:Array = new Array(5);
            trace(myArr.length); // 5
            myArr[0] = "one";
            myArr.push("six");
            trace(myArr);         // one,,,,,six
            trace(myArr.length); // 6
        }
    }
}
</codeblock></example></apiConstructorDetail><related-links class="- topic/related-links "><link href="operators.html#array_access" class="- topic/link "><linktext class="- topic/linktext ">[] array access</linktext></link><link href="#Array/length" class="- topic/link "><linktext class="- topic/linktext ">Array.length</linktext></link></related-links></apiConstructor><apiOperation id="Array:AS3:concat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">concat</apiName><shortdesc class="- topic/shortdesc ">
     パラメーターで指定されたエレメントを配列内のエレメントと連結して、新しい配列を作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.concat, concat, concatenate
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">この配列のエレメントの後にパラメーターのエレメントが続く配列です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">新しい配列内で連結する任意のデータ型（数値、エレメント、ストリングなど）の値です。 
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">パラメーターに指定されたエレメントを連結します。
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     パラメーターで指定されたエレメントを配列内のエレメントと連結して、新しい配列を作成します。パラメーターで配列を指定すると、その配列のエレメントが連結されます。パラメーターを渡さない場合、新しい配列は元の配列の複製（浅い複製）になります。
     
     </apiDesc><example conref="examples\Array.concat.1.as" class="- topic/example "> 次のコードは、4 つの Array オブジェクトを作成します。
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">numbers</codeph> 配列。数値の <codeph class="+ topic/ph pr-d/codeph ">1</codeph>、<codeph class="+ topic/ph pr-d/codeph ">2</codeph>、および<codeph class="+ topic/ph pr-d/codeph ">3</codeph> が含まれています。 </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">letters</codeph> 配列。文字の <codeph class="+ topic/ph pr-d/codeph ">a</codeph>、<codeph class="+ topic/ph pr-d/codeph ">b</codeph>、および <codeph class="+ topic/ph pr-d/codeph ">c</codeph> が含まれています。 </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">numbersAndLetters</codeph> 配列。<codeph class="+ topic/ph pr-d/codeph ">concat()</codeph> メソッドを呼び出し、配列 <codeph class="+ topic/ph pr-d/codeph ">[1,2,3,a,b,c]</codeph> を作成します。 </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">lettersAndNumbers</codeph> 配列。<codeph class="+ topic/ph pr-d/codeph ">concat()</codeph> メソッドを呼び出し、配列 <codeph class="+ topic/ph pr-d/codeph ">[a,b,c,1,2,3]</codeph> を作成します。 </li></ul>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var numbers:Array = new Array(1, 2, 3);
var letters:Array = new Array("a", "b", "c");
var numbersAndLetters:Array = numbers.concat(letters);
var lettersAndNumbers:Array = letters.concat(numbers);

trace(numbers);       // 1,2,3
trace(letters);       // a,b,c
trace(numbersAndLetters); // 1,2,3,a,b,c
trace(lettersAndNumbers); // a,b,c,1,2,3
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Array:AS3:every" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">every</apiName><shortdesc class="- topic/shortdesc ">
     指定された関数について false を返すアイテムに達するまで、配列内の各アイテムにテスト関数を実行します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ブール値です。<codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返します（指定された関数について配列内のすべてのアイテムが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返す場合）。それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">配列内の各アイテムについて実行する関数です。この関数には、単純な比較（<codeph class="+ topic/ph pr-d/codeph ">item &lt; 20</codeph> など）やより複雑な演算を含めることができます。また、この関数は、次のように、アイテムの値、アイテムのインデックス、および Array オブジェクトの 3 つの引数を使用して呼び出されます。
     <pre xml:space="preserve" class="- topic/pre ">function callback(item:*, index:int, array:Array):Boolean;</pre> 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">関数の <codeph class="+ topic/ph pr-d/codeph ">this</codeph> として使用するオブジェクトです。
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定された関数について <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返すアイテムに達するまで、配列内の各アイテムにテスト関数を実行します。このメソッドを使用して、配列内のすべてのアイテムがある基準（値が特定の数値より小さいなど）を満たしているかどうかを判別できます。
     
     <p product="flash" class="- topic/p ">このメソッドで、2 番目のパラメーター <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> は、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> でなければなりません（最初のパラメーター <codeph class="+ topic/ph pr-d/codeph ">callback</codeph> がメソッド閉包である場合）。例えば、<codeph class="+ topic/ph pr-d/codeph ">me</codeph> というムービークリップ内に、ある関数を作成するとします。</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(obj:Object):void {
        //your code here
     }
     </pre>
     <p product="flash" class="- topic/p ">次に、<codeph class="+ topic/ph pr-d/codeph ">every()</codeph> メソッドを、<codeph class="+ topic/ph pr-d/codeph ">myArray</codeph> という配列に対して使用するとします。</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     myArray.every(myFunction, me);
     </pre>
     <p product="flash" class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> は、Timeline クラスのメンバーであり、<codeph class="+ topic/ph pr-d/codeph ">me</codeph> でオーバーライドできないので、Flash ランタイムは例外をスローします。このランタイムエラーは、次のように関数を変数に割り当てることによって回避できます。</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(obj:Object):void {
         //your code here
     };
     myArray.every(myFunction, me);
     </pre>
     
     </apiDesc><example conref="examples\Array_every.as" class="- topic/example "> 次の例では、2 つの配列をテストして、各配列内のすべてのアイテムが数値であるかどうかを判別します。また、テストの結果を出力します。結果は、<codeph class="+ topic/ph pr-d/codeph ">isNumeric</codeph> が最初の配列で <codeph class="+ topic/ph pr-d/codeph ">true</codeph>、2 番目の配列で <codeph class="+ topic/ph pr-d/codeph ">false</codeph> であることを示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_every extends Sprite {
        public function Array_every() {
            var arr1:Array = new Array(1, 2, 4);
            var res1:Boolean = arr1.every(isNumeric);
            trace("isNumeric:", res1); // true
 
            var arr2:Array = new Array(1, 2, "ham");
            var res2:Boolean = arr2.every(isNumeric);
            trace("isNumeric:", res2); // false
        }
        private function isNumeric(element:*, index:int, arr:Array):Boolean {
            return (element is Number);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/some()" class="- topic/link "><linktext class="- topic/linktext ">Array.some()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:filter" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">filter</apiName><shortdesc class="- topic/shortdesc ">
     配列内の各アイテムについてテスト関数を実行し、指定された関数について true を返すすべてのアイテムを含む新しい配列を作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">元の配列内のアイテムで <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返したものをすべて含む新しい配列です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">配列内の各アイテムについて実行する関数です。この関数には、単純な比較（<codeph class="+ topic/ph pr-d/codeph ">item &lt; 20</codeph> など）やより複雑な演算を含めることができます。また、この関数は、次のように、アイテムの値、アイテムのインデックス、および Array オブジェクトの 3 つの引数を使用して呼び出されます。
     <pre xml:space="preserve" class="- topic/pre ">    function callback(item:*, index:int, array:Array):Boolean;</pre> 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">関数の <codeph class="+ topic/ph pr-d/codeph ">this</codeph> として使用するオブジェクトです。
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     配列内の各アイテムについてテスト関数を実行し、指定された関数について <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返すすべてのアイテムを含む新しい配列を作成します。<codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返すアイテムは、新しい配列に含められません。
     
     <p product="flash" class="- topic/p ">このメソッドで、2 番目のパラメーター <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> は、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> でなければなりません（最初のパラメーター <codeph class="+ topic/ph pr-d/codeph ">callback</codeph> がメソッド閉包である場合）。例えば、<codeph class="+ topic/ph pr-d/codeph ">me</codeph> というムービークリップ内に、ある関数を作成するとします。</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(obj:Object):void {
        //your code here
     }
     </pre>
     <p product="flash" class="- topic/p ">次に、<codeph class="+ topic/ph pr-d/codeph ">filter()</codeph> メソッドを、<codeph class="+ topic/ph pr-d/codeph ">myArray</codeph> という配列に対して使用するとします。</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre "> 
     myArray.filter(myFunction, me);
     </pre>
     <p product="flash" class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> は、Timeline クラスのメンバーであり、<codeph class="+ topic/ph pr-d/codeph ">me</codeph> でオーバーライドできないので、Flash ランタイムは例外をスローします。このランタイムエラーは、次のように関数を変数に割り当てることによって回避できます。</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(obj:Object):void {
         //your code here
         };
     myArray.filter(myFunction, me);
     </pre>
     
     </apiDesc><example conref="examples\Array.filter.as" class="- topic/example "> 次の例では、管理者であるすべての従業員の配列を作成しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_filter extends Sprite {
        public function Array_filter() {
            var employees:Array = new Array();
            employees.push({name:"Employee 1", manager:false});
            employees.push({name:"Employee 2", manager:true});
            employees.push({name:"Employee 3", manager:false});
            trace("Employees:");
            employees.forEach(traceEmployee);
            
            var managers:Array = employees.filter(isManager);
            trace("Managers:");
            managers.forEach(traceEmployee);
        }
        private function isManager(element:*, index:int, arr:Array):Boolean {
            return (element.manager == true);
        }
        private function traceEmployee(element:*, index:int, arr:Array):void {
            trace("\t" + element.name + ((element.manager) ? " (manager)" : ""));
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/map()" class="- topic/link "><linktext class="- topic/linktext ">Array.map()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:forEach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">forEach</apiName><shortdesc class="- topic/shortdesc ">
     配列内の各アイテムについて関数を実行します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">配列内の各アイテムについて実行する関数です。この関数には、単純なコマンド（<codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> ステートメントなど）やより複雑な演算を含めることができます。また、この関数は、次のように、アイテムの値、アイテムのインデックス、および Array オブジェクトの 3 つの引数を使用して呼び出されます。
     <pre xml:space="preserve" class="- topic/pre ">    function callback(item:*, index:int, array:Array):void;</pre> 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">関数の <codeph class="+ topic/ph pr-d/codeph ">this</codeph> として使用するオブジェクトです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     配列内の各アイテムについて関数を実行します。
     
     <p product="flash" class="- topic/p ">このメソッドで、2 番目のパラメーター <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> は、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> でなければなりません（最初のパラメーター <codeph class="+ topic/ph pr-d/codeph ">callback</codeph> がメソッド閉包である場合）。例えば、<codeph class="+ topic/ph pr-d/codeph ">me</codeph> というムービークリップ内に、ある関数を作成するとします。</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(obj:Object):void {
        //your code here
     }
     </pre>
     <p product="flash" class="- topic/p ">次に、<codeph class="+ topic/ph pr-d/codeph ">forEach()</codeph> メソッドを、<codeph class="+ topic/ph pr-d/codeph ">myArray</codeph> という配列に対して使用するとします。</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     myArray.forEach(myFunction, me);
     </pre>
     <p product="flash" class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> は、Timeline クラスのメンバーであり、<codeph class="+ topic/ph pr-d/codeph ">me</codeph> でオーバーライドできないので、Flash ランタイムは例外をスローします。このランタイムエラーは、次のように関数を変数に割り当てることによって回避できます。</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(obj:Object):void {
         //your code here
         };
     myArray.forEach(myFunction, me);
     </pre>
     </apiDesc><example conref="examples\Array_forEach.as" class="- topic/example "> 次の例では、配列内の各アイテムについて <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> ステートメントを、<codeph class="+ topic/ph pr-d/codeph ">traceEmployee()</codeph> 関数で実行しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_forEach extends Sprite {
        public function Array_forEach() {
            var employees:Array = new Array();
            employees.push({name:"Employee 1", manager:false});
            employees.push({name:"Employee 2", manager:true});
            employees.push({name:"Employee 3", manager:false});
            trace(employees);
            employees.forEach(traceEmployee);
        }
        private function traceEmployee(element:*, index:int, arr:Array):void {
            trace(element.name + " (" + element.manager + ")");
        }
    }
}
</codeblock></example><example conref="examples\Array_forEach_2.as" class="- topic/example "> 次の例もまた、配列内の各アイテムについて <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph>ステートメントを実行していますが、ここで使用する <codeph class="+ topic/ph pr-d/codeph ">traceEmployee()</codeph> 関数には若干の変更が加えられています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_forEach_2 extends Sprite {
        public function Array_forEach_2() {
            var employeeXML:XML = &lt;employees>
                    &lt;employee name="Steven" manager="false" />
                    &lt;employee name="Bruce" manager="true" />
                    &lt;employee name="Rob" manager="false" />
                &lt;/employees>;
            var employeesList:XMLList = employeeXML.employee;
            var employeesArray:Array = new Array();
            for each (var tempXML:XML in employeesList) {
                employeesArray.push(tempXML);
            }
            employeesArray.sortOn("@name");
            employeesArray.forEach(traceEmployee);
        }
        private function traceEmployee(element:*, index:Number, arr:Array):void {
            trace(element.@name + ((element.@manager == "true") ? " (manager)" : ""));
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Array:AS3:indexOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">indexOf</apiName><shortdesc class="- topic/shortdesc ">
     厳密な等価（===）を使用して配列内のアイテムを検索し、アイテムのインデックス位置を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">配列内のアイテムの 0 から始まるインデックス位置です。<codeph class="+ topic/ph pr-d/codeph ">searchElement</codeph> 引数が見つからなかった場合、戻り値は -1 です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">searchElement</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">配列内で検索するアイテムです。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fromIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">アイテムの検索を開始する配列内の場所です。
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     厳密な等価（<codeph class="+ topic/ph pr-d/codeph ">===</codeph>）を使用して配列内のアイテムを検索し、アイテムのインデックス位置を返します。
     </apiDesc><example conref="examples\Array_indexOf.as" class="- topic/example "> 次の例では、指定された配列の位置を表示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_indexOf extends Sprite {
        public function Array_indexOf() {
            var arr:Array = new Array(123,45,6789);
            arr.push("123-45-6789");
            arr.push("987-65-4321");
            
            var index:int = arr.indexOf("123");
            trace(index); // -1
            
            var index2:int = arr.indexOf(123);
            trace(index2); // 0
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/lastIndexOf()" class="- topic/link "><linktext class="- topic/linktext ">Array.lastIndexOf()</linktext></link><link href="operators.html#strict_equality" class="- topic/link "><linktext class="- topic/linktext ">=== (strict equality)</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:join" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">join</apiName><shortdesc class="- topic/shortdesc ">
     配列内のエレメントをストリングに変換し、指定されたセパレーターをエレメント間に挿入し、エレメントを連結して、その結果をストリングとして返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.join, join
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリングに変換された配列のエレメントで構成され、指定されたパラメーターで区切られているストリングです。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sep</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">返されたストリング内の配列エレメントを区切る文字またはストリングです。このパラメーターを省略すると、デフォルトのセパレーターとしてカンマが使用されます。 
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">配列内のエレメントをストリングに変換します。
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     配列内のエレメントをストリングに変換し、指定されたセパレーターをエレメント間に挿入し、エレメントを連結して、その結果をストリングとして返します。ネストされた配列は、<codeph class="+ topic/ph pr-d/codeph ">join()</codeph> メソッドに渡されるセパレーターで区切るのではなく、常にカンマ（,）で区切ります。
     
     </apiDesc><example conref="examples\Array.join.1.as" class="- topic/example "> 次のコードは、Array オブジェクト<codeph class="+ topic/ph pr-d/codeph ">myArr</codeph> を作成し、エレメント <codeph class="+ topic/ph pr-d/codeph ">one</codeph>、<codeph class="+ topic/ph pr-d/codeph ">two</codeph>、<codeph class="+ topic/ph pr-d/codeph ">three</codeph> を設定します。次に <codeph class="+ topic/ph pr-d/codeph ">one and two and three</codeph> を含むストリングを、<codeph class="+ topic/ph pr-d/codeph ">join()</codeph> メソッドを使って作成します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var myArr:Array = new Array("one", "two", "three");
var myStr:String = myArr.join(" and ");
trace(myArr); // one,two,three
trace(myStr); // one and two and three
</codeblock></example><example conref="examples\Array.join.2.as" class="- topic/example "> 次のコードは、Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">specialChars</codeph> を作成し、エレメント <codeph class="+ topic/ph pr-d/codeph ">(</codeph>、<codeph class="+ topic/ph pr-d/codeph ">)</codeph>、<codeph class="+ topic/ph pr-d/codeph ">-</codeph> と空白文字を設定します。次に <codeph class="+ topic/ph pr-d/codeph ">(888) 867-5309</codeph> を含むストリングを作成します。次に、<codeph class="+ topic/ph pr-d/codeph ">for</codeph> ループを使用して、<codeph class="+ topic/ph pr-d/codeph ">specialChars</codeph> にリストされている各型の特殊文字を削除し、ストリング（<codeph class="+ topic/ph pr-d/codeph ">myStr</codeph>）を作成します。このストリングは、電話番号の数字の桁（<codeph class="+ topic/ph pr-d/codeph ">888675309</codeph>）のみが残されたものです。<codeph class="+ topic/ph pr-d/codeph ">+</codeph> などの他の文字を <codeph class="+ topic/ph pr-d/codeph ">specialChars</codeph> に追加することもできるので、このルーチンは国際電話番号の形式にも対応します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var phoneString:String = "(888) 867-5309";

var specialChars:Array = new Array("(", ")", "-", " ");
var myStr:String = phoneString;

var ln:uint = specialChars.length;
for(var i:uint; i &lt; ln; i++) {
    myStr = myStr.split(specialChars[i]).join("");
}

var phoneNumber:Number = new Number(myStr);

trace(phoneString); // (888) 867-5309
trace(phoneNumber); // 8888675309
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/split()" class="- topic/link "><linktext class="- topic/linktext ">String.split()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:lastIndexOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">lastIndexOf</apiName><shortdesc class="- topic/shortdesc ">
     配列内のアイテムを、最後のアイテムから先頭に向かって検索し、厳密な等価（===）を使用して、一致したアイテムのインデックス位置を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">配列内のアイテムの 0 から始まるインデックス位置です。<codeph class="+ topic/ph pr-d/codeph ">searchElement</codeph> 引数が見つからなかった場合、戻り値は -1 です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">searchElement</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">配列内で検索するアイテムです。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fromIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0x7fffffff</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">アイテムの検索を開始する配列内の場所です。デフォルトは、インデックスに許可されている最大値です。<codeph class="+ topic/ph pr-d/codeph ">fromIndex</codeph> を指定しない場合、配列内の最後のアイテムから検索が開始されます。
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     配列内のアイテムを、最後のアイテムから先頭に向かって検索し、厳密な等価（<codeph class="+ topic/ph pr-d/codeph ">===</codeph>）を使用して、一致したアイテムのインデックス位置を返します。
     </apiDesc><example conref="examples\Array_lastIndexOf.as" class="- topic/example "> 次の例では、指定された配列の位置を表示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_lastIndexOf extends Sprite {
        public function Array_lastIndexOf() {
            var arr:Array = new Array(123,45,6789,123,984,323,123,32);
            
            var index:int = arr.indexOf(123);
            trace(index); // 0
            
            var index2:int = arr.lastIndexOf(123);
            trace(index2); // 6
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/indexOf()" class="- topic/link "><linktext class="- topic/linktext ">Array.indexOf()</linktext></link><link href="operators.html#strict_equality" class="- topic/link "><linktext class="- topic/linktext ">=== (strict equality)</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:map" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">map</apiName><shortdesc class="- topic/shortdesc ">
     配列内の各アイテムについて関数を実行し、元の配列の各アイテムに対する関数の結果に対応するアイテムから成る新しい配列を作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">元の配列内の各アイテムの関数の結果が含まれる新しい配列です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">配列内の各アイテムについて実行する関数です。この関数には、単純なコマンド（ストリングの配列の大文字小文字の変更など）やより複雑な演算を含めることができます。また、この関数は、次のように、アイテムの値、アイテムのインデックス、および Array オブジェクトの 3 つの引数を使用して呼び出されます。
     <pre xml:space="preserve" class="- topic/pre ">    function callback(item:*, index:int, array:Array):String;</pre> 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">関数の <codeph class="+ topic/ph pr-d/codeph ">this</codeph> として使用するオブジェクトです。
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     配列内の各アイテムについて関数を実行し、元の配列の各アイテムに対する関数の結果に対応するアイテムから成る新しい配列を作成します。
     
     <p product="flash" class="- topic/p ">このメソッドで、2 番目のパラメーター <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> は、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> でなければなりません（最初のパラメーター <codeph class="+ topic/ph pr-d/codeph ">callback</codeph> がメソッド閉包である場合）。例えば、<codeph class="+ topic/ph pr-d/codeph ">me</codeph> というムービークリップ内に、ある関数を作成するとします。</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(obj:Object):void {
        //your code here
     }
     </pre>
     <p product="flash" class="- topic/p ">次に、<codeph class="+ topic/ph pr-d/codeph ">map()</codeph> メソッドを、<codeph class="+ topic/ph pr-d/codeph ">myArray</codeph> という配列に対して使用するとします。</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     myArray.map(myFunction, me);
     </pre>
     <p product="flash" class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> は、Timeline クラスのメンバーであり、<codeph class="+ topic/ph pr-d/codeph ">me</codeph> でオーバーライドできないので、Flash ランタイムは例外をスローします。このランタイムエラーは、次のように関数を変数に割り当てることによって回避できます。</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(obj:Object):void {
         //your code here
         };
     myArray.map(myFunction, me);
     </pre>
     </apiDesc><example conref="examples\Array_map.as" class="- topic/example "> 次の例では、配列内のすべてのアイテムを大文字に変更しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_map extends Sprite {
        public function Array_map() {
            var arr:Array = new Array("one", "two", "Three");
            trace(arr); // one,two,Three

            var upperArr:Array = arr.map(toUpper);
            trace(upperArr); // ONE,TWO,THREE
        }
        private function toUpper(element:*, index:int, arr:Array):String {
            return String(element).toUpperCase();
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/filter()" class="- topic/link "><linktext class="- topic/linktext ">Array.filter()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:pop" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">pop</apiName><shortdesc class="- topic/shortdesc ">
      配列の最後のエレメントを削除して、そのエレメントの値を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.pop, pop
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定した配列の最後のエレメント（任意のデータ型）の値です。
     
     </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      配列の最後のエレメントを削除して、そのエレメントの値を返します。
     
     </apiDesc><example conref="examples\Array.pop.1.as" class="- topic/example "> 次のコードは、Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">letters</codeph> を作成し、エレメント <codeph class="+ topic/ph pr-d/codeph ">a</codeph>、<codeph class="+ topic/ph pr-d/codeph ">b</codeph>、<codeph class="+ topic/ph pr-d/codeph ">c</codeph> を設定します。次に、最後のエレメント（<codeph class="+ topic/ph pr-d/codeph ">c</codeph>）を、<codeph class="+ topic/ph pr-d/codeph ">pop()</codeph> メソッドを使って配列から削除し、String オブジェクト <codeph class="+ topic/ph pr-d/codeph ">letter</codeph> に割り当てます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array("a", "b", "c");
trace(letters); // a,b,c
var letter:String = letters.pop();
trace(letters); // a,b
trace(letter);     // c
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/push()" class="- topic/link "><linktext class="- topic/linktext ">Array.push()</linktext></link><link href="#Array/shift()" class="- topic/link "><linktext class="- topic/linktext ">Array.shift()</linktext></link><link href="#Array/unshift()" class="- topic/link "><linktext class="- topic/linktext ">Array.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:push" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">push</apiName><shortdesc class="- topic/shortdesc ">
     エレメントを配列の最後に追加して、追加後の配列の長さを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.push, push
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">新しい配列の長さを表す整数です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">配列に追加される値です。
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     エレメントを配列の最後に追加して、追加後の配列の長さを返します。
     
     </apiDesc><example conref="examples\Array.push.1.as" class="- topic/example "> 次のコードは、空の Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">letters</codeph> を作成し、次にエレメント <codeph class="+ topic/ph pr-d/codeph ">a</codeph>、<codeph class="+ topic/ph pr-d/codeph ">b</codeph>、<codeph class="+ topic/ph pr-d/codeph ">c</codeph> を、<codeph class="+ topic/ph pr-d/codeph ">push()</codeph> メソッドを使って配列に設定します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array();

letters.push("a");
letters.push("b");
letters.push("c");

trace(letters.toString()); // a,b,c
</codeblock></example><example conref="examples\Array.push.2.as" class="- topic/example "> 次のコードは、Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">letters</codeph> を作成します。このオブジェクトには、エレメント <codeph class="+ topic/ph pr-d/codeph ">a</codeph> が最初から設定されています。<codeph class="+ topic/ph pr-d/codeph ">push()</codeph> メソッドを 1 度使用して、エレメント <codeph class="+ topic/ph pr-d/codeph ">b</codeph> と <codeph class="+ topic/ph pr-d/codeph ">c</codeph> を配列の最後に追加します。push 後は、この配列のエレメントは 3 つになります。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array("a");
var count:uint = letters.push("b", "c");

trace(letters); // a,b,c
trace(count);   // 3
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/pop()" class="- topic/link "><linktext class="- topic/linktext ">Array.pop()</linktext></link><link href="#Array/shift()" class="- topic/link "><linktext class="- topic/linktext ">Array.shift()</linktext></link><link href="#Array/unshift()" class="- topic/link "><linktext class="- topic/linktext ">Array.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:reverse" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">reverse</apiName><shortdesc class="- topic/shortdesc ">
      配列の並びを反転させます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.reverse, reverse
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">新しい配列です。
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      配列の並びを反転させます。
     
     </apiDesc><example conref="examples\Array.reverse.1.as" class="- topic/example "> 次のコードは、Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">letters</codeph> を作成し、エレメント <codeph class="+ topic/ph pr-d/codeph ">a</codeph>、<codeph class="+ topic/ph pr-d/codeph ">b</codeph>、<codeph class="+ topic/ph pr-d/codeph ">c</codeph> を設定します。次に、<codeph class="+ topic/ph pr-d/codeph ">reverse()</codeph> メソッドを使用して、配列エレメントの順序を反転し、配列 <codeph class="+ topic/ph pr-d/codeph ">[c,b,a]</codeph> を作成します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array("a", "b", "c");
trace(letters); // a,b,c
letters.reverse();
trace(letters); // c,b,a
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Array:AS3:shift" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">shift</apiName><shortdesc class="- topic/shortdesc ">
     配列の最初のエレメントを削除して、そのエレメントを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.shift, shift
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">配列内の最初のエレメント（任意のデータ型）です。
     
     </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     配列の最初のエレメントを削除して、そのエレメントを返します。残りの配列エレメントは、元の位置 i から i-1 に移動されます。
     
     </apiDesc><example conref="examples\Array.shift.1.as" class="- topic/example "> 次のコードは、Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">letters</codeph> を作成し、エレメント <codeph class="+ topic/ph pr-d/codeph ">a</codeph>、<codeph class="+ topic/ph pr-d/codeph ">b</codeph>、<codeph class="+ topic/ph pr-d/codeph ">c</codeph> を設定します。次に、<codeph class="+ topic/ph pr-d/codeph ">shift()</codeph> メソッドを使用して、1 番目のエレメント（<codeph class="+ topic/ph pr-d/codeph ">a</codeph>）を <codeph class="+ topic/ph pr-d/codeph ">letters</codeph> から削除し、それをストリング <codeph class="+ topic/ph pr-d/codeph ">firstLetter</codeph> に割り当てます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array("a", "b", "c");
var firstLetter:String = letters.shift();
trace(letters);     // b,c
trace(firstLetter); // a
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/pop()" class="- topic/link "><linktext class="- topic/linktext ">Array.pop()</linktext></link><link href="#Array/push()" class="- topic/link "><linktext class="- topic/linktext ">Array.push()</linktext></link><link href="#Array/unshift()" class="- topic/link "><linktext class="- topic/linktext ">Array.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:slice" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">slice</apiName><shortdesc class="- topic/shortdesc ">
     元の配列から一連のエレメントを取り出して、新しい配列を返します。元の配列は変更されません。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.slice, slice
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">元の配列から取り出した一連のエレメントから成る配列です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">スライスの始点のインデックスを示す数値です。<codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> が負の数値の場合、始点は配列の末尾から開始します。つまり、-1 が最後のエレメントです。  
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">endIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">16777215</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">スライスの終点のインデックスを示す数値です。 このパラメーターを省略すると、スライスには配列の最初から最後までのすべてのエレメントが取り込まれます。<codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> が負の数値の場合、終点は配列の末尾から開始します。つまり、-1 が最後のエレメントです。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">元の配列から取り出した一連のエレメントから成る新しい配列を返します。
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     元の配列から一連のエレメントを取り出して、新しい配列を返します。元の配列は変更されません。返される配列には、<codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> エレメントから <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> の前のエレメントまでのすべてのエレメントが含まれます。
     
     <p class="- topic/p ">パラメーターを渡さない場合、新しい配列は元の配列の複製（浅い複製）になります。</p>
     
     </apiDesc><example conref="examples\Array.slice.1.as" class="- topic/example "> 次のコードは、Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">letters</codeph> を作成し、エレメント <codeph class="+ topic/ph pr-d/codeph ">[a,b,c,d,e,f]</codeph> を設定します。次に、配列 <codeph class="+ topic/ph pr-d/codeph ">someLetters</codeph> を、<codeph class="+ topic/ph pr-d/codeph ">slice()</codeph> メソッドを呼び出し、エレメント 1（<codeph class="+ topic/ph pr-d/codeph ">b</codeph>）から エレメント 3（<codeph class="+ topic/ph pr-d/codeph ">d</codeph>）に対して作成します。その結果、作成される配列には <codeph class="+ topic/ph pr-d/codeph ">b</codeph> と <codeph class="+ topic/ph pr-d/codeph ">c</codeph> が設定されます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array("a", "b", "c", "d", "e", "f");
var someLetters:Array = letters.slice(1,3);

trace(letters);     // a,b,c,d,e,f
trace(someLetters); // b,c
</codeblock></example><example conref="examples\Array.slice.2.as" class="- topic/example "> 次のコードは、Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">letters</codeph> を作成し、エレメント <codeph class="+ topic/ph pr-d/codeph ">[a,b,c,d,e,f]</codeph> を設定します。次に、配列 <codeph class="+ topic/ph pr-d/codeph ">someLetters</codeph> を、<codeph class="+ topic/ph pr-d/codeph ">slice()</codeph> メソッドを呼び出し、エレメント 2（<codeph class="+ topic/ph pr-d/codeph ">c</codeph>）に対して作成します。その結果、作成された配列には <codeph class="+ topic/ph pr-d/codeph ">[c,d,e,f]</codeph> が設定されます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array("a", "b", "c", "d", "e", "f");
var someLetters:Array = letters.slice(2);

trace(letters);     // a,b,c,d,e,f
trace(someLetters); // c,d,e,f
</codeblock></example><example conref="examples\Array.slice.3.as" class="- topic/example "> 次のコードは、Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">letters</codeph> を作成し、エレメント <codeph class="+ topic/ph pr-d/codeph ">[a,b,c,d,e,f]</codeph> を設定します。次に、配列 <codeph class="+ topic/ph pr-d/codeph ">someLetters</codeph> を、<codeph class="+ topic/ph pr-d/codeph ">slice()</codeph> メソッドを最後から 2 番目のエレメント <codeph class="+ topic/ph pr-d/codeph ">e</codeph> に対して呼び出すことにより作成します。その結果、作成される配列には <codeph class="+ topic/ph pr-d/codeph ">e</codeph> と <codeph class="+ topic/ph pr-d/codeph ">f</codeph> が設定されます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array("a", "b", "c", "d", "e", "f");
var someLetters:Array = letters.slice(-2);

trace(letters);     // a,b,c,d,e,f
trace(someLetters); // e,f
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Array:AS3:some" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">some</apiName><shortdesc class="- topic/shortdesc ">
     true を返すアイテムに達するまで、配列内の各アイテムにテスト関数を実行します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ブール値です。<codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返します（指定された関数について配列内のいずれかのアイテムが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返す場合）。それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">配列内の各アイテムについて実行する関数です。この関数には、単純な比較（<codeph class="+ topic/ph pr-d/codeph ">item &lt; 20</codeph> など）やより複雑な演算を含めることができます。また、この関数は、次のように、アイテムの値、アイテムのインデックス、および Array オブジェクトの 3 つの引数を使用して呼び出されます。
     <pre xml:space="preserve" class="- topic/pre ">    function callback(item:*, index:int, array:Array):Boolean;</pre> 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">関数の <codeph class="+ topic/ph pr-d/codeph ">this</codeph> として使用するオブジェクトです。
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返すアイテムに達するまで、配列内の各アイテムにテスト関数を実行します。このメソッドを使用して、配列内のいずれのアイテムもある基準（値が特定の数値より小さいなど）を満たしているかどうかを判別できます。
     
     <p product="flash" class="- topic/p ">このメソッドで、2 番目のパラメーター <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> は、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> でなければなりません（最初のパラメーター <codeph class="+ topic/ph pr-d/codeph ">callback</codeph> がメソッド閉包である場合）。例えば、<codeph class="+ topic/ph pr-d/codeph ">me</codeph> というムービークリップ内に、ある関数を作成するとします。</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(obj:Object):void {
        //your code here
     }
     </pre>
     <p product="flash" class="- topic/p ">次に、<codeph class="+ topic/ph pr-d/codeph ">some()</codeph> メソッドを、<codeph class="+ topic/ph pr-d/codeph ">myArray</codeph> という配列に対して使用するとします。</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     myArray.some(myFunction, me);
     </pre>
     <p product="flash" class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> は、Timeline クラスのメンバーであり、<codeph class="+ topic/ph pr-d/codeph ">me</codeph> でオーバーライドできないので、Flash ランタイムは例外をスローします。このランタイムエラーは、次のように関数を変数に割り当てることによって回避できます。</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(obj:Object):void {
         //your code here
         };
     myArray.some(myFunction, me);
     </pre>   
     </apiDesc><example conref="examples\Array_some.as" class="- topic/example "> 次の例では、未定義の値を表示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_some extends Sprite {
        public function Array_some() {
            var arr:Array = new Array();
            arr[0] = "one";
            arr[1] = "two";
            arr[3] = "four";
            var isUndef:Boolean = arr.some(isUndefined);
            if (isUndef) {
                trace("array contains undefined values: " + arr);
            } else {
                trace("array contains no undefined values.");
            }
        }
        private function isUndefined(element:*, index:int, arr:Array):Boolean {
            return (element == undefined);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/every()" class="- topic/link "><linktext class="- topic/linktext ">every()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:sortOn" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sortOn</apiName><shortdesc class="- topic/shortdesc ">
     配列内のフィールド（複数のフィールドも可能）に基づいて、配列内のエレメントをソートします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.sortOn, sortOn
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">戻り値は、パラメーターを渡したかどうかによって異なります。
     <ul class="- topic/ul "><li class="- topic/li ">4 または <codeph class="+ topic/ph pr-d/codeph ">Array.UNIQUESORT</codeph> を、<codeph class="+ topic/ph pr-d/codeph ">options</codeph> パラメーターに指定した場合、ソート対象の複数のエレメントにまったく同じソートフィールドがあると、値 0 が返されます。配列は変更されません。 </li><li class="- topic/li ">8 または <codeph class="+ topic/ph pr-d/codeph ">Array.RETURNINDEXEDARRAY</codeph> を <codeph class="+ topic/ph pr-d/codeph ">options</codeph> パラメーターに指定した場合、そのソート結果を反映する配列が返されます。配列は変更されません。</li><li class="- topic/li ">これ以外の場合、何も返されず、ソート順を反映するよう配列が変更されます。</li></ul>
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fieldName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソート値として使用するフィールドを示すストリング、または、先頭のエレメントが第 1 ソートフィールド、2 番目が第 2 ソートフィールド（以下同様）を表す配列です。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">options</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">bitwise OR（|）</codeph>演算子によって区切られた定義済み定数の数値または名前です。これによりソート動作を変更します。<codeph class="+ topic/ph pr-d/codeph ">options</codeph> パラメーターには次の値を指定できます。
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Array.CASEINSENSITIVE</codeph> または 1</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Array.DESCENDING</codeph> または 2</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Array.UNIQUESORT</codeph> または 4</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Array.RETURNINDEXEDARRAY</codeph> または 8</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Array.NUMERIC</codeph> または 16</li></ul>
     <p product="flash" class="- topic/p ">数値形式（2）ではなく、ストリング形式のフラグ（<codeph class="+ topic/ph pr-d/codeph ">DESCENDING</codeph> など）を使用すると、コードヒントが有効になります。</p>
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     配列内のフィールド（複数のフィールドも可能）に基づいて、配列内のエレメントをソートします。配列は、次に示す特性を備えている必要があります。
     <ul class="- topic/ul "><li class="- topic/li ">インデックス付き配列を対象とします。結合配列は対象外です。</li><li class="- topic/li ">配列の各エレメントは、プロパティがあるオブジェクトを保持するものとします。</li><li class="- topic/li ">すべてのオブジェクトには共通のプロパティが少なくとも 1 つあるものとします。このようなプロパティを<i class="+ topic/ph hi-d/i ">フィールド</i>といいます。</li></ul>
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">fieldName</codeph> パラメーターを複数指定する場合、先頭のフィールドが第 1 ソートフィールド、2 番目のフィールドが第 2 ソートフィールド、（以下同様）と見なされます。ソートは Unicode 値に基づいて実行されます。（ASCII は Unicode のサブセットです。）<codeph class="+ topic/ph pr-d/codeph ">fieldName</codeph> パラメーターで指定されたフィールドが、比較対象のいずれのエレメントにも含まれていない場合、そのフィールドは <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> に設定されていると見なされます。エレメントはソート済みの配列に連続的かつランダムに格納されます。</p>
     <p class="- topic/p ">デフォルトでは、<codeph class="+ topic/ph pr-d/codeph ">Array</codeph>.<codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph> は次のように動作します。</p>
     <ul class="- topic/ul "><li class="- topic/li ">ソートでは大文字と小文字が区別されます。<i class="+ topic/ph hi-d/i ">Z</i> は <i class="+ topic/ph hi-d/i ">a</i> よりも先になります。</li><li class="- topic/li ">昇順にソートされます。<i class="+ topic/ph hi-d/i ">a</i> は <i class="+ topic/ph hi-d/i ">b</i> よりも先になります。 </li><li class="- topic/li ">配列はソート順を反映するように変更されます。同じソートフィールドを持つ複数のエレメントは、ソート済みの配列の中で連続的かつランダムに格納されます。</li><li class="- topic/li ">数値フィールドは、ストリングとしてソートされます。例えば、"1" は "9" よりも小さいストリング値なので、100 は 99 よりも先になります。</li></ul>
     <p class="- topic/p ">Flash Player 7 では <codeph class="+ topic/ph pr-d/codeph ">options</codeph> パラメーターが追加されました。このパラメーターを使用すると、デフォルトのソート動作をオーバーライドすることができます。単純な配列（例えば、1 つのフィールドだけを持つ配列）をソートする場合、または <codeph class="+ topic/ph pr-d/codeph ">options</codeph> パラメーターでサポートされていないソート順序を指定する場合、<codeph class="+ topic/ph pr-d/codeph ">Array.sort()</codeph> を使用します。</p>
     <p class="- topic/p ">複数のフラグを渡すには、ビット単位の論理和（OR）（<codeph class="+ topic/ph pr-d/codeph ">|</codeph>）演算子で区切ります。</p>
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     my_array.sortOn(someFieldName, Array.DESCENDING | Array.NUMERIC);
     </codeblock>
     <p class="- topic/p ">Flash Player 8 では、複数のフィールドでソートを行う場合に、各フィールドに対して異なるソートオプションを指定する機能が追加されました。Flash Player 8 以降では、<codeph class="+ topic/ph pr-d/codeph ">options</codeph> パラメーターはさまざまなソートオプションの配列を受け入れます。各ソートオプションは <codeph class="+ topic/ph pr-d/codeph ">fieldName</codeph> パラメーターのソートフィールドに対応します。次の例では、第 1 ソートフィールド <codeph class="+ topic/ph pr-d/codeph ">a</codeph> を降順で、第 2 ソートフィールド <codeph class="+ topic/ph pr-d/codeph ">b</codeph> を数値ソートで、第 3 ソートフィールド <codeph class="+ topic/ph pr-d/codeph ">c</codeph> を大文字と小文字を区別しないでソートします。</p>
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     Array.sortOn (["a", "b", "c"], [Array.DESCENDING, Array.NUMERIC, Array.CASEINSENSITIVE]);
     </codeblock>
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b><codeph class="+ topic/ph pr-d/codeph ">fieldName</codeph> 配列と <codeph class="+ topic/ph pr-d/codeph ">options</codeph> 配列のエレメントは同数である必要があります。そうでない場合、<codeph class="+ topic/ph pr-d/codeph ">options</codeph> 配列は無視されます。また、<codeph class="+ topic/ph pr-d/codeph ">Array.UNIQUESORT</codeph> オプションと <codeph class="+ topic/ph pr-d/codeph ">Array.RETURNINDEXEDARRAY</codeph> オプションは、配列内の 1 番目のエレメントとしてのみ使用できます。そうでない場合、これらのオプションは無視されます。</p>
     
     </apiDesc><example conref="examples\Array.sortOn.1.as" class="- topic/example "> 次のコードは、空の Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> を作成し、次に <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> を 5 回呼び出して配列を設定します。各 <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> 呼び出しで、新しい <codeph class="+ topic/ph pr-d/codeph ">Vegetable</codeph> オブジェクトが、<codeph class="+ topic/ph pr-d/codeph ">Vegetable()</codeph> コンストラクターを呼び出すことで作成されます。このコンストラクターは、String（<codeph class="+ topic/ph pr-d/codeph ">name</codeph>）オブジェクトと Number（<codeph class="+ topic/ph pr-d/codeph ">price</codeph>）オブジェクトを受け取ります。次に示す値を使用して <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> を 5 回呼び出すことで、配列は次のように設定されます。<codeph class="+ topic/ph pr-d/codeph ">[lettuce:1.49, spinach:1.89, asparagus:3.99, celery:1.29, squash:1.44]</codeph> . 次に <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph> メソッドを <codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターと共に使用して、次の配列を作成します。<codeph class="+ topic/ph pr-d/codeph ">[asparagus:3.99, celery:1.29, lettuce:1.49, spinach:1.89, squash:1.44]</codeph> . 次に、price パラメーターと NUMERIC および DESCENDING 定数を使用して <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph> メソッドを再度呼び出すと、次のように数値の降順でソートされた配列が作成されます。<codeph class="+ topic/ph pr-d/codeph ">[asparagus:3.99, spinach:1.89, lettuce:1.49, squash:1.44, celery:1.29]</codeph> .
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var vegetables:Array = new Array();
vegetables.push(new Vegetable("lettuce", 1.49));
vegetables.push(new Vegetable("spinach", 1.89));
vegetables.push(new Vegetable("asparagus", 3.99));
vegetables.push(new Vegetable("celery", 1.29));
vegetables.push(new Vegetable("squash", 1.44));

trace(vegetables);
// lettuce:1.49, spinach:1.89, asparagus:3.99, celery:1.29, squash:1.44

vegetables.sortOn("name");
trace(vegetables);
// asparagus:3.99, celery:1.29, lettuce:1.49, spinach:1.89, squash:1.44

vegetables.sortOn("price", Array.NUMERIC | Array.DESCENDING);
trace(vegetables);
// asparagus:3.99, spinach:1.89, lettuce:1.49, squash:1.44, celery:1.29

class Vegetable {
    public var name:String;
    public var price:Number;

    public function Vegetable(name:String, price:Number) {
        this.name = name;
        this.price = price;
    }

    public function toString():String {
        return " " + name + ":" + price;
    }
}
</codeblock></example><example conref="examples\Array.sortOn.2.as" class="- topic/example "> 次のコードは、空の Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">records</codeph> を作成し、次に <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> を 3 回呼び出して配列を設定します。各 <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> 呼び出しで、ストリングの <codeph class="+ topic/ph pr-d/codeph ">name</codeph> と <codeph class="+ topic/ph pr-d/codeph ">city</codeph>、および <codeph class="+ topic/ph pr-d/codeph ">zip</codeph> 番号を <codeph class="+ topic/ph pr-d/codeph ">records</codeph> に追加します。3 つの <codeph class="+ topic/ph pr-d/codeph ">for</codeph> ループを使用して配列エレメントを出力します。1 番目の <codeph class="+ topic/ph pr-d/codeph ">for</codeph> ループでは、エレメントが追加された順に出力されます。2 番目の <codeph class="+ topic/ph pr-d/codeph ">for</codeph> ループの前に、<codeph class="+ topic/ph pr-d/codeph ">records</codeph> は、<codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph> メソッドを使って name、city の順でソートされます。3 番目の <codeph class="+ topic/ph pr-d/codeph ">for</codeph> ループでは、異なる出力が作成されます。<codeph class="+ topic/ph pr-d/codeph ">records</codeph> は、city、name の順で再度ソートされているためです。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">


var records:Array = new Array();
records.push({name:"john", city:"omaha", zip:68144});
records.push({name:"john", city:"kansas city", zip:72345});
records.push({name:"bob", city:"omaha", zip:94010});

for(var i:uint = 0; i &lt; records.length; i++) {
    trace(records[i].name + ", " + records[i].city);
}
// Results:
// john, omaha
// john, kansas city
// bob, omaha

trace("records.sortOn('name', 'city');");
records.sortOn(["name", "city"]);
for(var i:uint = 0; i &lt; records.length; i++) {
    trace(records[i].name + ", " + records[i].city);
}
// Results:
// bob, omaha
// john, kansas city
// john, omaha

trace("records.sortOn('city', 'name');");
records.sortOn(["city", "name"]);
for(var i:uint = 0; i &lt; records.length; i++) {
    trace(records[i].name + ", " + records[i].city);
}
// Results:
// john, kansas city
// bob, omaha
// john, omaha
</codeblock></example><example conref="examples\Array.sortOn.3.as" class="- topic/example "> 次のコードは、空の Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">users</codeph> を作成し、次に <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> を 4 回呼び出して配列を設定します。各 <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> 呼び出しで <codeph class="+ topic/ph pr-d/codeph ">User()</codeph> コンストラクターを使って User オブジェクトを作成し、<codeph class="+ topic/ph pr-d/codeph ">name</codeph> ストリング、<codeph class="+ topic/ph pr-d/codeph ">age</codeph> uint を各ユーザーに追加します。結果として、配列は <codeph class="+ topic/ph pr-d/codeph ">[Bob:3,barb:35,abcd:3,catchy:4]</codeph> のように設定されます。
 <p class="- topic/p ">次に、配列を次のようにソートします。
 <ol class="- topic/ol "><li class="- topic/li ">name のみでソートすると、配列は <codeph class="+ topic/ph pr-d/codeph ">[Bob:3,abcd:3,barb:35,catchy:4]</codeph> のようになります</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">CASEINSENSITIVE</codeph> 定数を使って name でソートすると、配列は <codeph class="+ topic/ph pr-d/codeph ">[abcd:3,barb:35,Bob:3,catchy:4]</codeph> のようになります</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">CASEINSENSITIVE</codeph> 定数と <codeph class="+ topic/ph pr-d/codeph ">DESCENDING</codeph> 定数を使って name でソートすると、配列は <codeph class="+ topic/ph pr-d/codeph ">[catchy:4,Bob:3,barb:35,abcd:3]</codeph> のようになります</li><li class="- topic/li ">age のみでソートすると、配列は <codeph class="+ topic/ph pr-d/codeph ">[abcd:3,Bob:3,barb:35,catchy:4]</codeph> のようになります。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NUMERIC</codeph> 定数を使って age でソートすると、配列は <codeph class="+ topic/ph pr-d/codeph ">[Bob:3,abcd:3,catchy:4,barb:35]</codeph> のようになります</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">DESCENDING</codeph> 定数と <codeph class="+ topic/ph pr-d/codeph ">NUMERIC</codeph> 定数を使って age でソートすると、配列は <codeph class="+ topic/ph pr-d/codeph ">[barb:35,catchy:4,Bob:3,abcd:3]</codeph> のようになります</li></ol>
 </p>
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">indices</codeph> という配列を作成し、<codeph class="+ topic/ph pr-d/codeph ">NUMERIC</codeph> 定数と <codeph class="+ topic/ph pr-d/codeph ">RETURNINDEXEDARRAY</codeph> 定数を使って age でソートした結果をその配列に割り当てます。配列は <codeph class="+ topic/ph pr-d/codeph ">[Bob:3,abcd:3,catchy:4,barb:35]</codeph> のように設定されます。次に、<codeph class="+ topic/ph pr-d/codeph ">for</codeph> ループを使って配列を出力します。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

class User {
    public var name:String;
    public var age:Number;
    public function User(name:String, age:uint) {
        this.name = name;
        this.age = age;
    }

    public function toString():String {
        return this.name + ":" + this.age;
    }
}

var users:Array = new Array();
users.push(new User("Bob", 3));
users.push(new User("barb", 35));
users.push(new User("abcd", 3));
users.push(new User("catchy", 4));

trace(users); // Bob:3,barb:35,abcd:3,catchy:4

users.sortOn("name");
trace(users); // Bob:3,abcd:3,barb:35,catchy:4

users.sortOn("name", Array.CASEINSENSITIVE);
trace(users); // abcd:3,barb:35,Bob:3,catchy:4

users.sortOn("name", Array.CASEINSENSITIVE | Array.DESCENDING);
trace(users); // catchy:4,Bob:3,barb:35,abcd:3

users.sortOn("age");
trace(users); // abcd:3,Bob:3,barb:35,catchy:4

users.sortOn("age", Array.NUMERIC);
trace(users); // Bob:3,abcd:3,catchy:4,barb:35

users.sortOn("age", Array.DESCENDING | Array.NUMERIC);
trace(users); // barb:35,catchy:4,Bob:3,abcd:3

var indices:Array = users.sortOn("age", Array.NUMERIC | Array.RETURNINDEXEDARRAY);
var index:uint;
for(var i:uint = 0; i &lt; indices.length; i++) {
    index = indices[i];
    trace(users[index].name, ": " + users[index].age);
}

// Results:
// Bob : 3
// abcd : 3
// catchy : 4
// barb : 35
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="operators.html#bitwise_OR" class="- topic/link "><linktext class="- topic/linktext ">| (bitwise OR)</linktext></link><link href="#Array/sort()" class="- topic/link "><linktext class="- topic/linktext ">Array.sort()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:sort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sort</apiName><shortdesc class="- topic/shortdesc ">
     配列内のエレメントをソートします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.sort, sort
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">戻り値は、次に示すように、渡された引数によって異なります。
     <ul class="- topic/ul "><li class="- topic/li ">値 4 または <codeph class="+ topic/ph pr-d/codeph ">Array.UNIQUESORT</codeph> を <codeph class="+ topic/ph pr-d/codeph ">sortOptions</codeph> 引数（<codeph class="+ topic/ph pr-d/codeph ">...args</codeph> パラメーター）に指定すると、ソート対象のエレメントに同じソートフィールドを持つものが複数ある場合、値 0 が返されます。配列は変更されません。 </li><li class="- topic/li ">値 8 または <codeph class="+ topic/ph pr-d/codeph ">Array.RETURNINDEXEDARRAY</codeph> を <codeph class="+ topic/ph pr-d/codeph ">sortOptions</codeph> 引数（<codeph class="+ topic/ph pr-d/codeph ">...args</codeph> パラメーター）に指定した場合、ソート結果を反映したインデックスの数値配列が返されます。配列は変更されません。 </li><li class="- topic/li ">それ以外の場合、値は返されません。ソート順を反映するように配列が変更されます。</li></ul>
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">比較関数を指定する引数と、ソート動作を決定する値です。
     <p class="- topic/p ">このメソッドでは、<codeph class="+ topic/ph pr-d/codeph ">Array.sort(compareFunction, sortOptions)</codeph> というシンタックスおよび引数順を使用し、各引数は次のように定義されます。</p>
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">compareFunction</codeph> - 配列内のエレメントのソート順を決定する比較関数。この引数はオプションです。比較関数には、比較を行うために 2 つの引数が必要です。エレメント A とエレメント B を <codeph class="+ topic/ph pr-d/codeph ">compareFunction</codeph> で比較した結果は、負、0 または正の値になります。
     <ul class="- topic/ul "><li class="- topic/li ">負の戻り値は、ソートの結果 A が先、B が後になることを意味します。</li><li class="- topic/li ">0 の戻り値は、ソートの結果 A と B が同じ順序になることを意味します。</li><li class="- topic/li ">正の戻り値は、ソートの結果 B が先、A が後になることを意味します。</li></ul>
     </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">sortOptions</codeph> - デフォルトのソート動作を変更する数値または定義済み定数。複数指定する場合は、ビット単位の論理和（OR）<codeph class="+ topic/ph pr-d/codeph ">|</codeph> 演算子で区切ります。この引数はオプションです。<codeph class="+ topic/ph pr-d/codeph ">sortOptions</codeph> の許容値は次のとおりです。 
      <ul class="- topic/ul "><li class="- topic/li ">1 または <codeph class="+ topic/ph pr-d/codeph ">Array.CASEINSENSITIVE</codeph></li><li class="- topic/li ">2 または <codeph class="+ topic/ph pr-d/codeph ">Array.DESCENDING</codeph></li><li class="- topic/li ">4 または <codeph class="+ topic/ph pr-d/codeph ">Array.UNIQUESORT</codeph></li><li class="- topic/li ">8 または <codeph class="+ topic/ph pr-d/codeph ">Array.RETURNINDEXEDARRAY</codeph> </li><li class="- topic/li ">16 または <codeph class="+ topic/ph pr-d/codeph ">Array.NUMERIC</codeph></li></ul>
     詳細については、<codeph class="+ topic/ph pr-d/codeph ">Array.sortOn()</codeph> メソッドを参照してください。</li></ul>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     配列内のエレメントをソートします。このメソッドは、Unicode 値に基づいてソートを実行します。（ASCII は Unicode のサブセットです。）
     <p class="- topic/p ">デフォルトでは、<codeph class="+ topic/ph pr-d/codeph ">Array</codeph>.<codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> は次のように動作します。</p>
     <ul class="- topic/ul "><li class="- topic/li ">ソートでは大文字と小文字が区別されます。<i class="+ topic/ph hi-d/i ">Z</i> は <i class="+ topic/ph hi-d/i ">a</i> よりも先になります。</li><li class="- topic/li ">昇順にソートされます。<i class="+ topic/ph hi-d/i ">a</i> は <i class="+ topic/ph hi-d/i ">b</i> よりも先になります。 </li><li class="- topic/li ">配列はソート順を反映するように変更されます。同じソートフィールドを持つ複数のエレメントは、ソート済みの配列の中で連続的かつランダムに格納されます。</li><li class="- topic/li ">データ型に関係なく、すべてのエレメントがストリングとしてソートされます。例えば、"1" は "9" よりも小さいストリング値であるため、100 は 99 よりも先になります。</li></ul>
     <p class="- topic/p ">
     デフォルト設定とは別の設定を使用して配列をソートする場合は、<codeph class="+ topic/ph pr-d/codeph ">sortOptions</codeph> 部分（<codeph class="+ topic/ph pr-d/codeph ">...args</codeph> パラメーター）に記述されているソートオプションのいずれかを使用するか、またはソート処理を行う独自のカスタム関数を作成できます。カスタム関数を作成する場合、<codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> メソッドを呼び出して、カスタム関数の名前を最初の引数（<codeph class="+ topic/ph pr-d/codeph ">compareFunction</codeph>）として使用します。 
     </p>
     
     </apiDesc><example conref="examples\Array.sort.1.as" class="- topic/example "> 次のコードは、Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> を作成し、エレメント <codeph class="+ topic/ph pr-d/codeph ">[spinach, green pepper, cilantro, onion, avocado]</codeph> を設定します。次に、<codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> メソッドを使用して配列をソートします。メソッドの呼び出しにはパラメーターを使用しません。その結果、<codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> は、アルファベット順でソートされ、<codeph class="+ topic/ph pr-d/codeph ">[avocado, cilantro, green pepper, onion, spinach]</codeph> のようになります。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var vegetables:Array = new Array("spinach",
                 "green pepper",
                 "cilantro",
                 "onion",
                 "avocado");

trace(vegetables); // spinach,green pepper,cilantro,onion,avocado
vegetables.sort();
trace(vegetables); // avocado,cilantro,green pepper,onion,spinach
</codeblock></example><example conref="examples\Array.sort.2.as" class="- topic/example "> 次のコードは、Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> を作成し、エレメント <codeph class="+ topic/ph pr-d/codeph ">[spinach, green pepper, Cilantro, Onion, and Avocado]</codeph> を設定します。最初に、<codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> メソッドをパラメーターなしで呼び出して配列をソートします。その結果、配列は <codeph class="+ topic/ph pr-d/codeph ">[Avocado,Cilantro,Onion,green pepper,spinach]</codeph> のようになります。再度、<codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> を <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> に対して呼び出します。このとき、<codeph class="+ topic/ph pr-d/codeph ">CASEINSENSITIVE</codeph> 定数をパラメーターとして指定します。その結果、<codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> は、アルファベット順でソートされ、<codeph class="+ topic/ph pr-d/codeph ">[Avocado, Cilantro, green pepper, Onion, spinach]</codeph> のようになります。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var vegetables:Array = new Array("spinach",
                 "green pepper",
                 "Cilantro",
                 "Onion",
                 "Avocado");

vegetables.sort();
trace(vegetables); // Avocado,Cilantro,Onion,green pepper,spinach
vegetables.sort(Array.CASEINSENSITIVE);
trace(vegetables); // Avocado,Cilantro,green pepper,Onion,spinach
</codeblock></example><example conref="examples\Array.sort.3.as" class="- topic/example "> 次のコードは、空の Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> を作成し、次に <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> を 5 回呼び出して配列を設定します。各 <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> 呼び出しで、新しい <codeph class="+ topic/ph pr-d/codeph ">Vegetable</codeph> オブジェクトが、<codeph class="+ topic/ph pr-d/codeph ">Vegetable()</codeph> コンストラクターを呼び出すことで作成されます。このコンストラクターは、String（<codeph class="+ topic/ph pr-d/codeph ">name</codeph>）オブジェクトと Number（<codeph class="+ topic/ph pr-d/codeph ">price</codeph>）オブジェクトを受け取ります。次に示す値を使用して <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> を 5 回呼び出すことで、配列は次のように設定されます。<codeph class="+ topic/ph pr-d/codeph ">[lettuce:1.49, spinach:1.89, asparagus:3.99, celery:1.29, squash:1.44]</codeph> <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> メソッドを使用してこの配列をソートします。その結果、配列は <codeph class="+ topic/ph pr-d/codeph ">[asparagus:3.99, celery:1.29, lettuce:1.49, spinach:1.89, squash:1.44]</codeph> のようになります。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var vegetables:Array = new Array();
vegetables.push(new Vegetable("lettuce", 1.49));
vegetables.push(new Vegetable("spinach", 1.89));
vegetables.push(new Vegetable("asparagus", 3.99));
vegetables.push(new Vegetable("celery", 1.29));
vegetables.push(new Vegetable("squash", 1.44));

trace(vegetables);
// lettuce:1.49, spinach:1.89, asparagus:3.99, celery:1.29, squash:1.44

vegetables.sort();

trace(vegetables);
// asparagus:3.99, celery:1.29, lettuce:1.49, spinach:1.89, squash:1.44

//The following code defines the Vegetable class
class Vegetable {
    private var name:String;
    private var price:Number;

    public function Vegetable(name:String, price:Number) {
        this.name = name;
        this.price = price;
    }

    public function toString():String {
        return " " + name + ":" + price;
    }
}
</codeblock></example><example conref="examples\Array.sort.4.as" class="- topic/example "> 次の例は、上記の例とほとんど同じですが、<codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> メソッドをカスタムソート関数（<codeph class="+ topic/ph pr-d/codeph ">sortOnPrice</codeph>）と共に使用している点が異なります。このカスタム関数は、アルファベット順ではなく価格に基づいてソートを行います。新しい関数 <codeph class="+ topic/ph pr-d/codeph ">getPrice()</codeph> では価格が抽出されます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var vegetables:Array = new Array();
vegetables.push(new Vegetable("lettuce", 1.49));
vegetables.push(new Vegetable("spinach", 1.89));
vegetables.push(new Vegetable("asparagus", 3.99));
vegetables.push(new Vegetable("celery", 1.29));
vegetables.push(new Vegetable("squash", 1.44));

trace(vegetables);
// lettuce:1.49, spinach:1.89, asparagus:3.99, celery:1.29, squash:1.44

vegetables.sort(sortOnPrice);

trace(vegetables);
// celery:1.29, squash:1.44, lettuce:1.49, spinach:1.89, asparagus:3.99

function sortOnPrice(a:Vegetable, b:Vegetable):Number {
    var aPrice:Number = a.getPrice();
    var bPrice:Number = b.getPrice();

    if(aPrice > bPrice) {
        return 1;
    } else if(aPrice &lt; bPrice) {
        return -1;
    } else  {
        //aPrice == bPrice
        return 0;
    }
}

// The following code defines the Vegetable class and should be in a separate package.
class Vegetable {
    private var name:String;
    private var price:Number;

    public function Vegetable(name:String, price:Number) {
        this.name = name;
        this.price = price;
    }

    public function getPrice():Number {
        return price;
    }

    public function toString():String {
        return " " + name + ":" + price;
    }
}
</codeblock></example><example conref="examples\Array.sort.5.as" class="- topic/example "> 次のコードは、Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">numbers</codeph> を作成し、エレメント <codeph class="+ topic/ph pr-d/codeph ">[3,5,100,34,10]</codeph> を設定します。パラメーターを指定せずに <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> を呼び出すと、アルファベット順にソートされるため、<codeph class="+ topic/ph pr-d/codeph ">[10,100,3,34,5]</codeph> のように期待しない結果になります。数値を正しくソートするには、定数 <codeph class="+ topic/ph pr-d/codeph ">NUMERIC</codeph> を <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> メソッドに渡す必要があります。この結果、<codeph class="+ topic/ph pr-d/codeph ">numbers</codeph> は、次のようにソートされます。<codeph class="+ topic/ph pr-d/codeph ">[3,5,10,34,100]</codeph> .
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b><codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> 関数のデフォルトの動作では、各エンティティがストリングとして処理されます。<codeph class="+ topic/ph pr-d/codeph ">Array.NUMERIC</codeph> 引数を使用する場合、Flash ランタイムでは、ソートを目的として、数値以外の値を整数に変換しようとします。この処理に失敗すると、ラインタイムはエラーをスローします。例えば、ストリング値 <codeph class="+ topic/ph pr-d/codeph ">"6"</codeph> は整数に正しく変換できますが、ストリング値 <codeph class="+ topic/ph pr-d/codeph ">"six"</codeph> を変換しようとした際にはエラーがスローされます。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var numbers:Array = new Array(3,5,100,34,10);

trace(numbers); // 3,5,100,34,10
numbers.sort();
trace(numbers); // 10,100,3,34,5
numbers.sort(Array.NUMERIC);
trace(numbers); // 3,5,10,34,100
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="operators.html#bitwise_OR" class="- topic/link "><linktext class="- topic/linktext ">| (bitwise OR)</linktext></link><link href="#Array/sortOn()" class="- topic/link "><linktext class="- topic/linktext ">Array.sortOn()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:splice" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">splice</apiName><shortdesc class="- topic/shortdesc ">
     配列のエレメントを追加および削除します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.splice, splice
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">元の配列から削除されたエレメントを含む配列です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">挿入または削除を開始する配列エレメントのインデックスを示す整数です。負の整数を使用すると、配列の末尾を基準として位置を指定できます。例えば、-1 は配列の最後のエレメントです。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">deleteCount</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">削除するエレメント数を示す整数です。この数には、<codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> パラメーターで指定するエレメントが含まれます。<codeph class="+ topic/ph pr-d/codeph ">deleteCount</codeph> パラメーターに値を指定しないと、配列内の <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> の位置のエレメントから最後のエレメントまで、すべての値が削除されます。値として 0 を指定すると、エレメントは削除されません。     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">values</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> パラメーターで指定した配列内の位置に挿入するカンマ区切り値のオプションリストです。挿入される値が配列型の場合、配列はそのまま単一のエレメントとして挿入されます。例えば、既存の長さ 3 の配列に別の長さ 3 の配列を結合すると、結果の配列には 4 つのエレメントしかありません。ただし、このエレメントの 1 つは、長さ 3 の配列になります。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     配列のエレメントを追加および削除します。このメソッドは、コピーを作成しないで、配列を変更します。
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>Array のサブクラス内でこのメソッドをオーバーライドするには、次の例に示すように、パラメーターに <codeph class="+ topic/ph pr-d/codeph ">...args</codeph> を使用します。</p>
     <pre xml:space="preserve" class="- topic/pre ">
     public override function splice(...args) {
       // your statements here
     }
     </pre>
     </apiDesc><example conref="examples\Array.splice.1.as" class="- topic/example "> 次のコードは、Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> を作成し、エレメント <codeph class="+ topic/ph pr-d/codeph ">[spinach, green pepper, cilantro, onion, avocado]</codeph> を設定します。次に <codeph class="+ topic/ph pr-d/codeph ">splice()</codeph> メソッドを、パラメーター 2 と 2 を使用して呼び出します。これにより、<codeph class="+ topic/ph pr-d/codeph ">cilantro</codeph> と <codeph class="+ topic/ph pr-d/codeph ">onion</codeph> が <codeph class="+ topic/ph pr-d/codeph ">spliced</codeph> 配列に割り当てられます。<codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> 配列には <codeph class="+ topic/ph pr-d/codeph ">[spinach,green pepper,avocado]</codeph> が含まれています。再度、<codeph class="+ topic/ph pr-d/codeph ">splice()</codeph> メソッドを、パラメーター 1、0、<codeph class="+ topic/ph pr-d/codeph ">spliced</codeph> 配列を使って呼び出すと、<codeph class="+ topic/ph pr-d/codeph ">[cilantro,onion]</codeph> が <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> の 2 番目のエレメントとして割り当てられます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var vegetables:Array = new Array("spinach",
                 "green pepper",
                 "cilantro",
                 "onion",
                 "avocado");

var spliced:Array = vegetables.splice(2, 2);
trace(vegetables); // spinach,green pepper,avocado
trace(spliced);    // cilantro,onion

vegetables.splice(1, 0, spliced);
trace(vegetables); // spinach,cilantro,onion,green pepper,avocado

</codeblock></example><example conref="examples\Array.splice.2.as" class="- topic/example "> <codeph class="+ topic/ph pr-d/codeph ">cilantro</codeph> と <codeph class="+ topic/ph pr-d/codeph ">onion</codeph> がトレースされるので、<codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> のエレメントは 5 個あるかのように処理されますが、実際のエレメント数は 4 個で、2 番目のエレメントは 2 エレメントを含む別の配列です。<codeph class="+ topic/ph pr-d/codeph ">cilantro</codeph> と <codeph class="+ topic/ph pr-d/codeph ">onion</codeph> を個別に追加するには、次のように指定します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 
var vegetables:Array = new Array("spinach",
                 "green pepper",
                 "cilantro",
                 "onion",
                 "avocado");
 
 var spliced:Array = vegetables.splice(2, 2);
 trace(vegetables); // spinach,green pepper,avocado
 trace(spliced);    // cilantro,onion
 
 vegetables.splice(1, 0, "cilantro", "onion");
 trace(vegetables); // spinach,cilantro,onion,green pepper,avocado
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Array:toLocaleString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleString</apiName><shortdesc class="- topic/shortdesc ">
     指定された配列内のエレメントを表すストリングを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">配列エレメントのストリングです。
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定された配列内のエレメントを表すストリングを返します。インデックス 0 から最大インデックスまでの配列内のすべてのエレメントを、カンマで区切られた連結ストリングに変換して返します。ActionScript 3.0 実装において、このメソッドは、<codeph class="+ topic/ph pr-d/codeph ">Array.toString()</codeph> と同じ値を返します。
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/toString()" class="- topic/link "><linktext class="- topic/linktext ">Array.toString()</linktext></link></related-links></apiOperation><apiOperation id="Array:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
     指定された配列内のエレメントを表すストリングを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.toString, toString
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">配列エレメントのストリングです。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定された配列内のエレメントを表すストリングを返します。インデックス 0 から最大インデックスまでの配列内のすべてのエレメントを、カンマで区切られた連結ストリングに変換して返します。カスタムセパレーターを指定するには、<codeph class="+ topic/ph pr-d/codeph ">Array.join()</codeph> メソッドを使用します。
     
     
     </apiDesc><example conref="examples\Array.toString.1.as" class="- topic/example "> 次のコードでは、Array を作成し、値をストリングに変換して、それらを String データ型の <codeph class="+ topic/ph pr-d/codeph ">vegnums</codeph> 変数に格納します。

<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var vegetables:Array = new Array();
vegetables.push(1);
vegetables.push(2);
vegetables.push(3);
vegetables.push(4);
vegetables.push(5);
var vegnums:String = vegetables.toString();
trace(vegnums+",6");
// 1,2,3,4,5,6
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/split()" class="- topic/link "><linktext class="- topic/linktext ">String.split()</linktext></link><link href="#Array/join()" class="- topic/link "><linktext class="- topic/linktext ">Array.join()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:unshift" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">unshift</apiName><shortdesc class="- topic/shortdesc ">
     エレメントを配列の先頭に追加して、配列の新しい長さを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.unshift, unshift
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">配列の新しい長さを表す整数です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">配列の先頭に挿入される数値、エレメント、または変数です。  
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     エレメントを配列の先頭に追加して、配列の新しい長さを返します。配列内の他のエレメントは、元の位置 i から i+1 に移動されます。
     
     </apiDesc><example conref="examples\Array.unshift.1.as" class="- topic/example "> 次のコードは、空の Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">names</codeph> を作成します。ストリングの <codeph class="+ topic/ph pr-d/codeph ">Bill</codeph> と <codeph class="+ topic/ph pr-d/codeph ">Jeff</codeph> を、<codeph class="+ topic/ph pr-d/codeph ">push()</codeph> メソッドを使って追加し、次にストリングの <codeph class="+ topic/ph pr-d/codeph ">Alfred</codeph> と <codeph class="+ topic/ph pr-d/codeph ">Kyle</codeph> を、<codeph class="+ topic/ph pr-d/codeph ">names</codeph> の先頭に、<codeph class="+ topic/ph pr-d/codeph ">unshift()</codeph> メソッドを 2 回呼び出して追加します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var names:Array = new Array();
names.push("Bill");
names.push("Jeff");

trace(names); // Bill,Jeff

names.unshift("Alfred");
names.unshift("Kyle");

trace(names); // Kyle,Alfred,Bill,Jeff
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/pop()" class="- topic/link "><linktext class="- topic/linktext ">Array.pop()</linktext></link><link href="#Array/push()" class="- topic/link "><linktext class="- topic/linktext ">Array.push()</linktext></link><link href="#Array/shift()" class="- topic/link "><linktext class="- topic/linktext ">Array.shift()</linktext></link></related-links></apiOperation><apiValue id="Array:CASEINSENSITIVE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CASEINSENSITIVE</apiName><shortdesc class="- topic/shortdesc ">
     Array クラスのソートメソッドに対して、大文字と小文字を区別しないソートを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>x217F6
      
      </helpid></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">1</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Array クラスのソートメソッドに対して、大文字と小文字を区別しないソートを指定します。この定数は、<codeph class="+ topic/ph pr-d/codeph ">options</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph> メソッド）に使用できます。 
     <p class="- topic/p ">この定数の値は 1 です。</p>
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Array/sort()" class="- topic/link "><linktext class="- topic/linktext ">Array.sort()</linktext></link><link href="#Array/sortOn()" class="- topic/link "><linktext class="- topic/linktext ">Array.sortOn()</linktext></link></related-links></apiValue><apiValue id="Array:DESCENDING" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DESCENDING</apiName><shortdesc class="- topic/shortdesc ">
     Array クラスのソートメソッドに対して、降順でのソートを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>x217F7
      
      </helpid></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">2</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Array クラスのソートメソッドに対して、降順でのソートを指定します。この定数は、<codeph class="+ topic/ph pr-d/codeph ">options</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph> メソッド）に使用できます。 
     <p class="- topic/p ">この定数の値は 2 です。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Array/sort()" class="- topic/link "><linktext class="- topic/linktext ">Array.sort()</linktext></link><link href="#Array/sortOn()" class="- topic/link "><linktext class="- topic/linktext ">Array.sortOn()</linktext></link></related-links></apiValue><apiValue id="Array:NUMERIC" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NUMERIC</apiName><shortdesc class="- topic/shortdesc ">
     Array クラスのソートメソッドに対して、文字ストリングではなく数値によるソートを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>x217F8
      
      </helpid></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">16</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Array クラスのソートメソッドに対して、文字ストリングではなく数値によるソートを指定します。この定数を <codeph class="+ topic/ph pr-d/codeph ">options</codeph> パラメーターに設定すると、<codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> メソッドと <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph> メソッドは、数字を文字ストリングとしてではなく、数値としてソートします。<codeph class="+ topic/ph pr-d/codeph ">NUMERIC</codeph> 定数を設定しないでソートを実行すると、各配列エレメントは文字ストリングとして処理され、Unicode 順でソートされます。 
     
     <p class="- topic/p ">例えば、値 <codeph class="+ topic/ph pr-d/codeph ">[2005, 7, 35]</codeph> の配列で、<codeph class="+ topic/ph pr-d/codeph ">NUMERIC</codeph> 定数を設定<b class="+ topic/ph hi-d/b ">せずに</b> <codeph class="+ topic/ph pr-d/codeph ">options</codeph> パラメーターを使った場合、ソート後の配列は <codeph class="+ topic/ph pr-d/codeph ">[2005, 35, 7]</codeph> となります。一方、<codeph class="+ topic/ph pr-d/codeph ">NUMERIC</codeph> 定数を設定<b class="+ topic/ph hi-d/b ">した</b>場合、ソート後の配列は <codeph class="+ topic/ph pr-d/codeph ">[7, 35, 2005]</codeph> となります。 </p>
     
     <p class="- topic/p ">この定数は、配列内の数値に対してのみ適用されます。<codeph class="+ topic/ph pr-d/codeph ">["23", "5"]</codeph> などの、数値データを含むストリングには適用されません。</p>
     
     <p class="- topic/p ">この定数の値は 16 です。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Array/sort()" class="- topic/link "><linktext class="- topic/linktext ">Array.sort()</linktext></link><link href="#Array/sortOn()" class="- topic/link "><linktext class="- topic/linktext ">Array.sortOn()</linktext></link></related-links></apiValue><apiValue id="Array:RETURNINDEXEDARRAY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RETURNINDEXEDARRAY</apiName><shortdesc class="- topic/shortdesc ">
     ソート結果として、配列インデックスで構成される配列を返すことを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>x217F9
      
      </helpid></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">8</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ソート結果として、配列インデックスで構成される配列を返すことを指定します。この定数を <codeph class="+ topic/ph pr-d/codeph ">options</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph> メソッド）に使用すると、元の配列を変更せずに、配列エレメントの複数のビューにアクセスすることができます。 
     <p class="- topic/p ">この定数の値は 8 です。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Array/sort()" class="- topic/link "><linktext class="- topic/linktext ">Array.sort()</linktext></link><link href="#Array/sortOn()" class="- topic/link "><linktext class="- topic/linktext ">Array.sortOn()</linktext></link></related-links></apiValue><apiValue id="Array:UNIQUESORT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">UNIQUESORT</apiName><shortdesc class="- topic/shortdesc ">
     Array クラスのソートメソッドに対して、一意性ソート要件を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>x217FA
      
      </helpid></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">4</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Array クラスのソートメソッドに対して、一意性ソート要件を指定します。この定数は、<codeph class="+ topic/ph pr-d/codeph ">options</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph> メソッド）に使用できます。一意性ソートオプションを指定すると、ソート対象の任意の 2 つのエレメントまたはフィールドが同じ値である場合に、ソートが終了します。 
     <p class="- topic/p ">この定数の値は 4 です。</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Array/sort()" class="- topic/link "><linktext class="- topic/linktext ">Array.sort()</linktext></link><link href="#Array/sortOn()" class="- topic/link "><linktext class="- topic/linktext ">Array.sortOn()</linktext></link></related-links></apiValue><apiValue id="Array:length:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">length</apiName><shortdesc class="- topic/shortdesc ">
     配列内のエレメント数を示す負でない整数です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.length, length
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     配列内のエレメント数を示す負でない整数です。このプロパティは、新しいエレメントが配列に追加されると自動更新されます。配列エレメントに値を割り当てるとき（<codeph class="+ topic/ph pr-d/codeph ">my_array[index] = value</codeph> など）、<codeph class="+ topic/ph pr-d/codeph ">index</codeph> が数値でかつ <codeph class="+ topic/ph pr-d/codeph ">index+1</codeph> が <codeph class="+ topic/ph pr-d/codeph ">length</codeph> プロパティよりも大きい場合、<codeph class="+ topic/ph pr-d/codeph ">length</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">index+1</codeph> に更新されます。
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b><codeph class="+ topic/ph pr-d/codeph ">length</codeph> プロパティに既存の長さよりも短い値を割り当てた場合、配列は切り詰められます。</p>
     
     </apiDesc><example conref="examples\Array.length.1.as" class="- topic/example "> 次のコードは、Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">names</codeph> を作成し、ストリングエレメント <codeph class="+ topic/ph pr-d/codeph ">Bill</codeph> を設定します。次に、<codeph class="+ topic/ph pr-d/codeph ">push()</codeph> メソッドを使用して、別のストリングエレメント <codeph class="+ topic/ph pr-d/codeph ">Kyle</codeph> を追加します。配列の長さは、<codeph class="+ topic/ph pr-d/codeph ">length</codeph> プロパティで決められているエレメント 1 個（<codeph class="+ topic/ph pr-d/codeph ">push()</codeph> を使う前）ですが、<codeph class="+ topic/ph pr-d/codeph ">push()</codeph> を呼び出した後はエレメント 2 個になります。別のストリング <codeph class="+ topic/ph pr-d/codeph ">Jeff</codeph> を追加すると、<codeph class="+ topic/ph pr-d/codeph ">names</codeph> の長さは、エレメント 3 個になります。次に <codeph class="+ topic/ph pr-d/codeph ">shift()</codeph> メソッドを 2 回呼び出し、<codeph class="+ topic/ph pr-d/codeph ">Bill</codeph> と <codeph class="+ topic/ph pr-d/codeph ">Kyle</codeph> を削除すると、最終的に配列の <codeph class="+ topic/ph pr-d/codeph ">length</codeph> は 1 個になります。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var names:Array = new Array("Bill");
names.push("Kyle");
trace(names.length); // 2

names.push("Jeff");
trace(names.length); // 3

names.shift();
names.shift();
trace(names.length); // 1
</codeblock></example></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:RegExp" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">RegExp</apiName><shortdesc class="- topic/shortdesc ">
     
     RegExp クラスを使用すると、正規表現を処理することができます。正規表現とは、ストリング内で検索を実行したり、ストリング内のテキストを置き換えたりする場合に使用できるパターンです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp
     </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     RegExp クラスを使用すると、正規表現を処理することができます。正規表現とは、ストリング内で検索を実行したり、ストリング内のテキストを置き換えたりする場合に使用できるパターンです。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">new RegExp()</codeph> コンストラクターを使用するか、RegExp リテラルを変数に割り当てることによって、新しい RegExp オブジェクトを作成することができます。</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock "> var pattern1:RegExp = new RegExp("test-\\d", "i");
     var pattern2:RegExp = /test-\d/i;
     </codeblock>
     
     <p class="- topic/p ">詳細については、『ActionScript 3.0 開発ガイド<i class="+ topic/ph hi-d/i "/>』の「正規表現の使用」を参照してください。</p>
     
     </apiDesc><example conref="examples\RegExpExample.as" class="- topic/example "> 次の例は、正規表現を使用してストリングを解析し、渡されたストリングに基づいて新しいストリングまたはブール値を返す方法を示しています。渡されたストリング内で、<codeph class="+ topic/ph pr-d/codeph ">informalizeGreeting()</codeph> メソッドは、大文字小文字に関係なく <codeph class="+ topic/ph pr-d/codeph ">Hello</codeph> という語が見つかると、この語を単純に <codeph class="+ topic/ph pr-d/codeph ">Hi</codeph> に置き換えます。また、ストリング内の名前から姓を削除します。ただし、指定されたパターンに名前が一致する場合です。<codeph class="+ topic/ph pr-d/codeph ">validateEmail()</codeph> と <codeph class="+ topic/ph pr-d/codeph ">validatePhoneNumber()</codeph> メソッドは、渡されたストリングのパターンが有効な電子メールアドレスまたは特定の電話番号のパターンと一致するかどうかをチェックし、その結果に従ってブール値を返します。 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class RegExpExample extends Sprite {        
        public function RegExpExample() {            
            var formalGreeting:String = "Hello, John Smith.";
            trace(informalizeGreeting(formalGreeting));    // Hi, John.

            var validEmail:String = "name@domain.com";
            trace(validateEmail(validEmail));        // true
            
            var invalidEmail:String = "foo";
            trace(validateEmail(invalidEmail));  // false
            
            var validPhoneNumber:String = "415-555-1212";
            trace(validatePhoneNumber(validPhoneNumber));    // true
            
            var invalidPhoneNumber:String = "312-867-530999";
            trace(validatePhoneNumber(invalidPhoneNumber));  // false
        }
        private function informalizeGreeting(str:String):String {
            var pattern:RegExp = new RegExp("hello, (\\w+) \\w+", "i");
            return str.replace(pattern, "Hi, $1");
        }
        private function validateEmail(str:String):Boolean {
            var pattern:RegExp = /(\w|[_.\-])+@((\w|-)+\.)+\w{2,4}+/;
            var result:Object = pattern.exec(str);
            if(result == null) {
                return false;
            }
            return true;
        }
        private function validatePhoneNumber(str:String):Boolean {
            var pattern:RegExp = /^\d{3}-\d{3}-\d{4}$/;
            var result:Object = pattern.exec(str);
            if(result == null) {
                return false;
            }
            return true;
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#String/match()" class="- topic/link "><linktext class="- topic/linktext ">String.match()</linktext></link><link href="#String/replace()" class="- topic/link "><linktext class="- topic/linktext ">String.replace()</linktext></link><link href="#String/search()" class="- topic/link "><linktext class="- topic/linktext ">String.search()</linktext></link></related-links><apiConstructor id="RegExp:RegExp" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">RegExp</apiName><shortdesc class="- topic/shortdesc ">
        2 つのストリングから正規表現を作成することができます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.attribute, attribute
        </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">re</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">正規表現のパターンです。<i class="+ topic/ph hi-d/i ">コンストラクターストリング</i>とも言います。これは正規表現のメインとなる部分です。つまり、"/" で囲まれる部分です。 
        
        <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b> </p>
        
        <ul class="- topic/ul "><li class="- topic/li ">開始と末尾の "/" 文字を含めないでください。この文字は、コンストラクターを使用しないで正規表現リテラルを定義する場合にのみ使用します。例えば、次の 2 つの正規表現は同等です。
        
        <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock "> var re1:RegExp = new RegExp("bob", "i"); 
        var re2:RegExp = /bob/i;</codeblock>
        
        </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">RegExp()</codeph> コンストラクターメソッドで定義された正規表現の中で、円記号（\）から始まるメタシーケンス（任意の数字を意味する <codeph class="+ topic/ph pr-d/codeph ">\d</codeph> など）を使用するには、円記号を二重に入力する必要があります。例えば、次の 2 つの正規表現は同等です。
        
        <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock "> var re1:RegExp = new RegExp("\\d+", ""); 
        var re2:RegExp = /\d/;</codeblock>
        
        <p class="- topic/p ">最初の正規表現では、円記号を二重に入力する必要があります。これは、<codeph class="+ topic/ph pr-d/codeph ">RegExp()</codeph> コンストラクターメソッドの最初のパラメーターがストリングであり、ストリングリテラルの中では、単一の円記号として認識されるためには二重に円記号を入力する必要があるためです。</p>
        
        </li></ul>
        
        </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">flags</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">正規表現のモディファイアです。これには次のものが含まれます。
        
        <ul class="- topic/ul "><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">g</codeph>  String クラスの <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> メソッドを使用する場合、このモディファイアを指定して、最初に一致するストリングのみでなく、一致するすべてのストリングを置き換えます。このモディファイアは、RegExp インスタンスの <codeph class="+ topic/ph pr-d/codeph ">global</codeph> プロパティに対応します。</li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">i</codeph>  正規表現を大文字と小文字の区別なしで評価します。<i class="+ topic/ph hi-d/i "/>このモディファイアは、RegExp インスタンスの <codeph class="+ topic/ph pr-d/codeph ">ignoreCase</codeph> プロパティに対応します。</li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">s</codeph>  ドット（<codeph class="+ topic/ph pr-d/codeph ">.</codeph>）文字は改行文字に一致します。この修飾子は、RegExp インスタンスの <codeph class="+ topic/ph pr-d/codeph ">dotall</codeph> プロパティに対応します。</li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">m</codeph>  キャレット（<codeph class="+ topic/ph pr-d/codeph ">^</codeph>）文字とドル記号（<codeph class="+ topic/ph pr-d/codeph ">$</codeph>）は、改行文字の前<i class="+ topic/ph hi-d/i ">と</i>後に一致します。このモディファイアは、RegExp インスタンスの <codeph class="+ topic/ph pr-d/codeph ">multiline</codeph> プロパティに対応します。</li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">x</codeph>  <codeph class="+ topic/ph pr-d/codeph ">re</codeph> ストリング内の空白文字を無視します。そのため、可読性の高いコンストラクターを作成できます。この修飾子は、RegExp インスタンスの <codeph class="+ topic/ph pr-d/codeph ">extended</codeph> プロパティに対応します。</li></ul>
        
        <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">flags</codeph> ストリング内の他の文字は、すべて無視されます。 </p>
        
        </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
        2 つのストリングから正規表現を作成することができます。1 つのストリングは正規表現のパターンを定義し、もう 1 つのストリングは正規表現で使用されるフラグを定義します。 
        
        </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="RegExp:AS3:exec" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">exec</apiName><shortdesc class="- topic/shortdesc ">
         指定されたストリング str について、正規表現を検索します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.exec, exec
         </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一致が見つからない場合は <codeph class="+ topic/ph pr-d/codeph ">null</codeph>、それ以外の場合は、次に示すプロパティを持つオブジェクトを返します。 
         
         <ul class="- topic/ul "><li class="- topic/li ">エレメント 0 に完全一致のサブストリングを含み、他のエレメント（1 ～ <i class="+ topic/ph hi-d/i ">n</i>）に正規表現内の括弧指定されたグループと一致するサブストリングを含む配列 </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">index</codeph>  ストリング内で一致するサブストリングの文字の位置</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">input</codeph>  ストリング（<codeph class="+ topic/ph pr-d/codeph ">str</codeph>）</li></ul>
         
         
         </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">str</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">検索するストリングです。  
         
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         指定されたストリング <codeph class="+ topic/ph pr-d/codeph ">str</codeph> について、正規表現を検索します。 
         
         <p class="- topic/p ">正規表現に <codeph class="+ topic/ph pr-d/codeph ">g</codeph>（<codeph class="+ topic/ph pr-d/codeph ">global</codeph>）フラグが設定<i class="+ topic/ph hi-d/i ">されていない</i>場合、ストリングの先頭（インデックス位置 0）から検索が開始され、正規表現の <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> プロパティは無視されます。</p>
         
         <p class="- topic/p ">正規表現に <codeph class="+ topic/ph pr-d/codeph ">g</codeph>（<codeph class="+ topic/ph pr-d/codeph ">global</codeph>）フラグが設定<i class="+ topic/ph hi-d/i ">されている</i>場合、正規表現の <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> プロパティで指定されたインデックス位置から検索が開始されます。検索でサブストリングが一致すると、<codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> プロパティは一致したサブストリングの最後の位置に変更されます。 </p>
         
         </apiDesc><example class="- topic/example ">正規表現に <codeph class="+ topic/ph pr-d/codeph ">g</codeph>（<codeph class="+ topic/ph pr-d/codeph ">global</codeph>）フラグを設定<i class="+ topic/ph hi-d/i ">しない</i>場合、<codeph class="+ topic/ph pr-d/codeph ">exec()</codeph> を使用して、ストリング内で最初に一致するものを検索することができます。 
         
         <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
         var myPattern:RegExp = /(\w~~)sh(\w~~)/ig;   
         var str:String = "She sells seashells by the seashore";
         var result:Object = myPattern.exec(str);
         trace(result);
         </codeblock>
         
         <p class="- topic/p "> <codeph class="+ topic/ph pr-d/codeph ">result</codeph> オブジェクトは次のように設定されます。</p>
         
         <ul class="- topic/ul "><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">result[0]</codeph> は <codeph class="+ topic/ph pr-d/codeph ">"She"</codeph> に設定されます（完全一致）。 </li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">result[1]</codeph> は空のストリングに設定されます（括弧指定されたグループの最初の一致）。 </li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">result[2]</codeph> は <codeph class="+ topic/ph pr-d/codeph ">"e"</codeph> に設定されます（括弧指定されたグループの 2 番目の一致）。 </li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">result.index</codeph> は 0 に設定されます。</li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">result.input</codeph> は入力ストリング <codeph class="+ topic/ph pr-d/codeph ">"She sells seashells by the seashore"</codeph> に設定されます。</li></ul> 
         
         
         
         <p class="- topic/p "> 次の例では、正規表現に <codeph class="+ topic/ph pr-d/codeph ">g</codeph>（<codeph class="+ topic/ph pr-d/codeph ">global</codeph>）フラグが設定<i class="+ topic/ph hi-d/i ">されている</i>ため、<codeph class="+ topic/ph pr-d/codeph ">exec()</codeph> を繰り返し使用して、一致するものを複数検索することができます。</p>
         
         <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
         var myPattern:RegExp = /(\w~~)sh(\w~~)/ig;  
         var str:String = "She sells seashells by the seashore";
         var result:Object = myPattern.exec(str);
         
         while (result != null) {
             trace ( result.index, "\t", result);
             result = myPattern.exec(str);
         }
         </codeblock>
         
         <p class="- topic/p "> このコードの出力は、次のようになります。</p>
         
         <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph ">
            0      She,,e
            10     seashells,sea,ells
            27     seashore,sea,ore
         </codeph></pre>
         
         </example></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/match()" class="- topic/link "><linktext class="- topic/linktext ">String.match()</linktext></link><link href="#String/search()" class="- topic/link "><linktext class="- topic/linktext ">String.search()</linktext></link></related-links></apiOperation><apiOperation id="RegExp:AS3:test" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">test</apiName><shortdesc class="- topic/shortdesc ">
         指定されたストリング str 内に正規表現と一致するサブストリングがあるかどうかをテストします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.test, test
          
          </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一致が存在する場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph>、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。
         
         </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">str</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">テストするストリングです。
         
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         指定されたストリング <codeph class="+ topic/ph pr-d/codeph ">str</codeph> 内に正規表現と一致するサブストリングがあるかどうかをテストします。 
         
         <p class="- topic/p ">正規表現に <codeph class="+ topic/ph pr-d/codeph ">g</codeph>（<codeph class="+ topic/ph pr-d/codeph ">global</codeph>）フラグが設定<i class="+ topic/ph hi-d/i ">されていない</i>場合、ストリングの先頭（インデックス位置 0）から検索が開始され、正規表現の <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> プロパティは無視されます。</p>
         
         <p class="- topic/p ">正規表現に <codeph class="+ topic/ph pr-d/codeph ">g</codeph>（<codeph class="+ topic/ph pr-d/codeph ">global</codeph>）フラグが設定<i class="+ topic/ph hi-d/i ">されている</i>場合、正規表現の <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> プロパティで指定されたインデックス位置から検索が開始されます。検索でサブストリングが一致すると、<codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> プロパティは一致したサブストリングの最後の位置に変更されます。 </p>
         
         </apiDesc><example conref="examples\RegExp.test.1.as" class="- topic/example "> 次の例では、<codeph class="+ topic/ph pr-d/codeph ">test()</codeph> メソッドを、<codeph class="+ topic/ph pr-d/codeph ">g</codeph>（<codeph class="+ topic/ph pr-d/codeph ">global</codeph>）フラグが設定された正規表現で使用する方法を示しています。 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var re1:RegExp = /\w/g;
var str:String = "a b c";
trace (re1.lastIndex); // 0
trace (re1.test(str)); // true
trace (re1.lastIndex); // 1
trace (re1.test(str)); // true
trace (re1.lastIndex); // 3
trace (re1.test(str)); // true
trace (re1.lastIndex); // 5
trace (re1.test(str)); // false
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="RegExp:dotall:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dotall</apiName><shortdesc class="- topic/shortdesc ">
         正規表現パターン内のドット文字（.）と改行文字を一致させるかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.dotall, dotall
          
          </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         正規表現パターン内のドット文字（.）と改行文字を一致させるかどうかを指定します。 正規表現の作成時に <codeph class="+ topic/ph pr-d/codeph ">s</codeph> フラグを使用して、<codeph class="+ topic/ph pr-d/codeph ">dotall = true</codeph> に設定します。
         
         </apiDesc><example conref="examples\RegExp.dotall.1.as" class="- topic/example "> 次の例は、正規表現に <codeph class="+ topic/ph pr-d/codeph ">s</codeph>（<codeph class="+ topic/ph pr-d/codeph ">dotall</codeph>）フラグを設定した場合の効果を示しています。 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var str:String = "&lt;p>Hello\n"
        + "again&lt;/p>"
        + "&lt;p>Hello&lt;/p>";

var pattern:RegExp = /&lt;p>.*?&lt;\/p>/;
trace(pattern.dotall) // false
trace(pattern.exec(str)); // &lt;p>Hello&lt;/p>

pattern = /&lt;p>.*?&lt;\/p>/s;
trace(pattern.dotall) // true
trace(pattern.exec(str)); 
   </codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:extended:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">extended</apiName><shortdesc class="- topic/shortdesc ">
         正規表現に拡張モードを使用するかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.extended, extended
          
          </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         正規表現に拡張モードを使用するかどうかを指定します。RegExp オブジェクトが拡張モードの場合、コンストラクターストリング内の空白文字は無視されます。これはコンストラクターの可読性を高めることを目的とします。
         
         <p class="- topic/p ">正規表現の作成時に <codeph class="+ topic/ph pr-d/codeph ">x</codeph> フラグを使用して、<codeph class="+ topic/ph pr-d/codeph ">extended = true</codeph> に設定します。 </p>
         
         </apiDesc><example conref="examples\RegExp.extended.1.as" class="- topic/example "> 次の例は、同じ正規表現を様々な方法で作成する方法を示しています。それぞれの方法で、xxx-xxx-xxxx、(xxx) xxx-xxxx、または (xxx) xxx-xxxx のいずれかの電話番号パターンに一致する正規表現を作成します。2 番目の正規表現では、<codeph class="+ topic/ph pr-d/codeph ">x</codeph> フラグが使用されているため、ストリング内の空白文字は無視されます。 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var rePhonePattern1:RegExp = /\d{3}-\d{3}-\d{4}|\(\d{3}\)\s?\d{3}-\d{4}/; 
var str:String = "The phone number is (415)555-1212.";

trace(rePhonePattern1.extended) // false
trace(rePhonePattern1.exec(str)); // (415)555-1212

var rePhonePattern2:RegExp = / \d{3}-\d{3}-\d{4}  |   \( \d{3} \) \ ? \d{3}-\d{4}  /x; 
trace(rePhonePattern2.extended) // true
trace(rePhonePattern2.exec(str)); // (415)555-1212
</codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:global:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">global</apiName><shortdesc class="- topic/shortdesc ">
         正規表現にグローバル照合を使用するかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.global, global
          
          </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         正規表現にグローバル照合を使用するかどうかを指定します。<codeph class="+ topic/ph pr-d/codeph ">global == true</codeph> の場合、一致するものが 1 つ見つかった後に <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> プロパティが設定されます。次回、照合が要求されたときには、正規表現エンジンはストリングの <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> の位置から照合を開始します。正規表現の作成時に <codeph class="+ topic/ph pr-d/codeph ">g</codeph> フラグを使用して、<codeph class="+ topic/ph pr-d/codeph ">global</codeph> を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定します 
         
         </apiDesc><example conref="examples\RegExp.global.1.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">g</codeph>（<codeph class="+ topic/ph pr-d/codeph ">global</codeph>）フラグを <codeph class="+ topic/ph pr-d/codeph ">exec()</codeph> メソッドに設定した場合の効果を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var pattern:RegExp = /foo\d/; 
var str:String = "foo1 foo2";
trace(pattern.global); // false
trace(pattern.exec(str)); // foo1
trace(pattern.lastIndex); // 0
trace(pattern.exec(str)); // foo1

pattern = /foo\d/g;
trace(pattern.global); // true
trace(pattern.exec(str)); // foo1
trace(pattern.lastIndex); // 4
trace(pattern.exec(str)); // foo2
</codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:ignoreCase:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ignoreCase</apiName><shortdesc class="- topic/shortdesc ">
         正規表現で大文字と小文字の区別を無視するかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.ignoreCase, ignoreCase
         </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         正規表現で大文字と小文字の区別を無視するかどうかを指定します。正規表現の作成時に <codeph class="+ topic/ph pr-d/codeph ">i</codeph> フラグを使用して、<codeph class="+ topic/ph pr-d/codeph ">ignoreCase = true</codeph> に設定します。 
         
         </apiDesc><example conref="examples\RegExp.ignoreCase.1.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">i</codeph>（<codeph class="+ topic/ph pr-d/codeph ">ignoreCase</codeph>）フラグを設定した場合の効果について示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var pattern:RegExp = /bob/; 
var str:String = "Bob bob";
trace(pattern.ignoreCase); // false
trace(pattern.exec(str)); // bob

pattern = /bob/i;
trace(pattern.ignoreCase); // true
trace(pattern.exec(str)); // Bob
</codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:lastIndex:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">lastIndex</apiName><shortdesc class="- topic/shortdesc ">
         ストリング内で次回の検索を開始するインデックス位置を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.lastIndex, lastIndex
          
          </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         ストリング内で次回の検索を開始するインデックス位置を指定します。このプロパティは、RegExp クラスの <codeph class="+ topic/ph pr-d/codeph ">exec()</codeph> メソッドと <codeph class="+ topic/ph pr-d/codeph ">test()</codeph> メソッドに影響します。ただし、String クラスの <codeph class="+ topic/ph pr-d/codeph ">match()</codeph> メソッド、<codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> メソッド、および <codeph class="+ topic/ph pr-d/codeph ">search()</codeph> メソッドは、<codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> プロパティを無視し、すべての検索をストリングの先頭から開始します。
         
         <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">exec()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">test()</codeph> メソッドで一致するものが見つかり、正規表現で <codeph class="+ topic/ph pr-d/codeph ">g</codeph>（<codeph class="+ topic/ph pr-d/codeph ">global</codeph>）フラグが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定されている場合、メソッドは自動的に <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> プロパティを、最後に一致したサブストリング内の最後の文字の<i class="+ topic/ph hi-d/i ">次</i>にある文字のインデックス位置に設定します。<codeph class="+ topic/ph pr-d/codeph ">g</codeph>（<codeph class="+ topic/ph pr-d/codeph ">global</codeph>）フラグが <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定されている場合、メソッドは <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> プロパティを設定しません。</p>
         
         <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> プロパティを設定することで、ストリング内で正規表現による検索を開始する位置を調整できます。 </p>
         
         </apiDesc><example conref="examples\RegExp.lastIndex.1.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> プロパティを設定した場合の効果を示しています。また、<codeph class="+ topic/ph pr-d/codeph ">exec()</codeph> メソッドを <codeph class="+ topic/ph pr-d/codeph ">g</codeph>（<codeph class="+ topic/ph pr-d/codeph ">global</codeph>）フラグが設定された正規表現で呼び出した後に、そのプロパティがどのように更新されるかを示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var pattern:RegExp = /\w\d/g; 
var str:String = "a1 b2 c3 d4";
pattern.lastIndex = 2; 
trace(pattern.exec(str)); // b2
trace(pattern.lastIndex); // 5
trace(pattern.exec(str)); // c3
trace(pattern.lastIndex); // 8
trace(pattern.exec(str)); // d4
trace(pattern.lastIndex); // 11
trace(pattern.exec(str)); // null
</codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:multiline:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">multiline</apiName><shortdesc class="- topic/shortdesc ">
         m（multiline）フラグを設定するかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.multiline, multiline
          
          </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         <codeph class="+ topic/ph pr-d/codeph ">m</codeph>（<codeph class="+ topic/ph pr-d/codeph ">multiline</codeph>）フラグを設定するかどうかを指定します。設定する場合、正規表現内のキャレット（<codeph class="+ topic/ph pr-d/codeph ">^</codeph>）とドル記号（<codeph class="+ topic/ph pr-d/codeph ">$</codeph>）は改行文字の前と後に一致します。正規表現の作成時に <codeph class="+ topic/ph pr-d/codeph ">m</codeph> フラグを使用して、<codeph class="+ topic/ph pr-d/codeph ">multiline = true</codeph> に設定します。
         
         </apiDesc><example conref="examples\RegExp.multiline.1.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">m</codeph>（<codeph class="+ topic/ph pr-d/codeph ">multiline</codeph>）フラグを設定した場合の効果について示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var pattern:RegExp = /^bob/; 
var str:String = "foo\n"
                + "bob";
trace(pattern.multiline); // false
trace(pattern.exec(str)); // null

pattern = /^bob/m;
trace(pattern.multiline); // true
trace(pattern.exec(str)); // bob
</codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:source:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">source</apiName><shortdesc class="- topic/shortdesc ">
         正規表現のパターン部分を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.source, source
          
          </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         正規表現のパターン部分を指定します。
         
         </apiDesc><example conref="examples\RegExp.source.1.as" class="- topic/example "> 次のコードは、2 つの正規表現について <codeph class="+ topic/ph pr-d/codeph ">source</codeph> パラメーターを出力します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var re1:RegExp = /aabb/gi;
trace (re1.source); // aabb

var re2:RegExp = new RegExp("x+y*", "i");
trace(re2.source); // x+y*
</codeblock></example></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:Date" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Date</apiName><shortdesc class="- topic/shortdesc ">
 Date クラスは日時のデータを表します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Date object, built-in class, date 
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Date クラスは日時のデータを表します。Date クラスの 1 つのインスタンスは特定の一時点を表します。この特定の一時点について、月、日、時、秒などのプロパティを照会および変更できます。Date クラスを使用すると、世界時（グリニッジ標準時。現在の呼称は世界標準時または UTC）またはローカル時間を基準にした日付と時刻の値を取得できます。ローカル時間は、Flash Player を実行しているオペレーティングシステムに設定されているローカルタイムゾーンによって決定されます。Date クラスのメソッドは静的ではありません。メソッドを呼び出すときに指定した個々の Date オブジェクトにのみ適用されます。例外として、<codeph class="+ topic/ph pr-d/codeph ">Date.UTC()</codeph> メソッドと <codeph class="+ topic/ph pr-d/codeph ">Date.parse()</codeph> メソッドがあります。これらは静的なメソッドです。
 <p product="flash" class="- topic/p ">Date クラスによる夏時間の処理方法は、オペレーティングシステムおよびランタイムのバージョンに応じて異なります。Flash Player 6 以降では、夏時間は各オペレーティングシステムで次のように処理されます。</p>
 <ul product="flash" class="- topic/ul "><li class="- topic/li ">Windows - Date オブジェクトの出力は夏時間に合わせて自動的に調整されます。Date オブジェクトは、夏時間が現在の地域で採用されているかどうかを確認します。夏時間が採用されている場合は、夏時間に移行する日付と時刻の基準を確認します。ただし、現在有効な夏時間の日付が過去と未来に適用されるために、夏時間の日付が異なる地域では、計算される夏時間の日付が過去の日付と食い違う場合があります。</li><li class="- topic/li ">Mac OS X - Date オブジェクトの出力は夏時間に合わせて自動的に調整されます。Mac OS X では、タイムゾーン情報データベースを使用して、現在または過去の日付または時刻に夏時間の時差を適用する必要があるかどうかを決定します。</li><li class="- topic/li ">Mac OS 9 - 現在の日付および時刻に夏時間の時差を適用する必要があるかどうかを判定できるだけの情報しか提供されません。したがって、Date オブジェクトは、現在の夏時間の時差が過去および将来のすべての日時に適用されると想定します。</li></ul>
 <p product="flash" class="- topic/p ">Flash Player 5 によるオペレーティングシステム別の夏時間の対処方法は次のとおりです。</p>
 <ul product="flash" class="- topic/ul "><li class="- topic/li ">Windows - 夏時間に関する米国の規則が常に適用されるために、米国とは夏時間に移行する時期が異なるヨーロッパおよび他の地域では移行期間が食い違います。Flash は、現在の地域で採用されている夏時間を正しく検出します。</li></ul>
 <p class="- topic/p ">Date クラスを使用するには、<codeph class="+ topic/ph pr-d/codeph ">new</codeph> 演算子を使用して Date インスタンスを作成します。</p>
 <p class="- topic/p ">ActionScript 3.0 は新しいアクセッサープロパティをいくつか追加しています。これらのアクセッサープロパティは、Date インスタンスにアクセスしたり、Date インスタンスを変更する多くの Date クラスメソッドの代わりに使用できます。また、ActionScript 3.0 には、ECMA-262 Edition 3 に準拠するために組み込まれている、<codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> メソッドの新しい変形メソッド（<codeph class="+ topic/ph pr-d/codeph ">Date.toLocaleString()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Date.toTimeString()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Date.toLocaleTimeString()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Date.toDateString()</codeph>、および <codeph class="+ topic/ph pr-d/codeph ">Date.toLocaleDateString()</codeph>）も含まれます。</p>
 <p class="- topic/p ">相対時間または経過時間を計算するには、flash.utils パッケージに含まれる <codeph class="+ topic/ph pr-d/codeph ">getTimer()</codeph> メソッドを参照してください。</p>
 
 </apiDesc><example conref="examples\DateExample.as" class="- topic/example "> 次の例では、次に示す変数を割り当てる場合の <codeph class="+ topic/ph pr-d/codeph ">Date()</codeph> コンストラクターの様々な使用法を示しています。
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">myDate1</codeph> では、パラメーターを指定せずに <codeph class="+ topic/ph pr-d/codeph ">Date()</codeph> を呼び出します。これにより、<codeph class="+ topic/ph pr-d/codeph ">myDate1</codeph> には、使用しているシステムの日時に基づいた現在の日時が設定されます。 </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">myDate2</codeph> では、<codeph class="+ topic/ph pr-d/codeph ">Date()</codeph> を呼び出し、パラメーターに <codeph class="+ topic/ph pr-d/codeph ">year</codeph>（<codeph class="+ topic/ph pr-d/codeph ">2000</codeph>）、month（<codeph class="+ topic/ph pr-d/codeph ">0</codeph> = 1 月）、<codeph class="+ topic/ph pr-d/codeph ">day</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1</codeph>）を渡します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">myDate3</codeph> では、<codeph class="+ topic/ph pr-d/codeph ">Date()</codeph> を呼び出し、パラメーターに <codeph class="+ topic/ph pr-d/codeph ">year</codeph>（<codeph class="+ topic/ph pr-d/codeph ">65</codeph> = 1965）、<codeph class="+ topic/ph pr-d/codeph ">month</codeph>（<codeph class="+ topic/ph pr-d/codeph ">2</codeph> = 3 月）、<codeph class="+ topic/ph pr-d/codeph ">day</codeph>（<codeph class="+ topic/ph pr-d/codeph ">6</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">hour</codeph>（<codeph class="+ topic/ph pr-d/codeph ">9</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">minute</codeph>（<codeph class="+ topic/ph pr-d/codeph ">30</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">second</codeph>（<codeph class="+ topic/ph pr-d/codeph ">15</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">millisecond</codeph> -+（<codeph class="+ topic/ph pr-d/codeph ">0</codeph>）を渡します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">myDate4</codeph> では、<codeph class="+ topic/ph pr-d/codeph ">Date()</codeph> を呼び出し、1970 年 1 月 1 日 0:00:00（世界時）よりも何ミリ秒<b class="+ topic/ph hi-d/b ">前</b>（値が負であるため）なのかを表す数値を指定します。</li></ul>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    
    public class DateExample extends Sprite{
        public function DateExample() {
            var myDate1:Date = new Date();
            trace(myDate1); // [NOW]

            var myDate2:Date = new Date(2000, 0, 1);
            trace(myDate2); // Sat Jan 1 00:00:00 GMT-0800 2000

            var myDate3:Date = new Date(65, 2, 6, 9, 30, 15, 0);
            trace(myDate3); // Sat Mar 6 09:30:15 GMT-0800 1965

            var myDate4:Date = new Date(-14159025000);
            trace(myDate4); // Sun Jul 20 19:56:15 GMT-0700 1969
        }        
    }    
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.utils.xml#/getTimer()" class="- topic/link "><linktext class="- topic/linktext ">flash.utils.getTimer()</linktext></link></related-links><apiConstructor id="Date:Date" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Date</apiName><shortdesc class="- topic/shortdesc ">
	 指定された日時を保持する新しい Date オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">new Date, constructor, date
	  
	  </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">yearOrTimevalue</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">他のパラメーターが指定されている場合、この数値は年（1965 年など）を表します。それ以外の場合は時間値を表します。数値が年を表す場合、0 ～ 99 の値は 1900 ～ 1999 を表します。それ以外の場合は年を 4 桁で指定する必要があります。数値が時間値を表す（他にパラメーターが指定されない）場合は、1970 年 1 月 1 日 0:00:00 GMT を基準とする経過時間をミリ秒単位で表す値になります。負の値は 1970 年 1 月 1 日 0:00:00 GMT よりも<i class="+ topic/ph hi-d/i ">前</i>の時刻を表し、正の値はそれより後の時刻を表します。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">month</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0（1 月）～ 11（12 月）の整数です。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">date</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">1 ～ 31 の整数です。 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">hour</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0（0 時）～ 23（午後 11 時）の整数です。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">minute</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 59 の整数です。 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 59 の整数です。 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ミリ秒の 0 ～ 999 の整数です。 
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 指定された日時を保持する新しい Date オブジェクトを作成します。  
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">Date()</codeph> コンストラクターは、日付と、ミリ秒までの時刻を指定する、最大 7 つまでパラメーター（year、month、...、millisecond）を取ります。新しく作成された Date オブジェクトに含まれる日付は、渡された引数の数とデータ型により異なります。 </p>
	 <ul class="- topic/ul "><li class="- topic/li ">引数が渡されなかった場合、Date オブジェクトには現在の日時が割り当てられます。</li><li class="- topic/li ">データ型 Number の引数が 1 つ渡された場合、Date オブジェクトには、1970 年 1 月 1 日 0:00:00（GMT）からその 1 つの引数で指定されたミリ秒数後の時間値が割り当てられます。</li><li class="- topic/li ">データ型 String の引数が 1 つ渡され、このストリングに有効な日付が含まれている場合は、Date オブジェクトにはその日付に基づく時間値が割り当てられます。</li><li class="- topic/li ">複数の引数が渡された場合、Date オブジェクトには、渡された引数値が表す日付の年、月、日、時、分、秒、ミリ秒に基づく時間値が割り当てられます。</li></ul>
	 <p class="- topic/p ">Date クラスのコンストラクターにストリングを渡す場合、日付にはさまざまな形式を使用できますが、少なくとも月、日、年が含まれている必要があります。例えば、<codeph class="+ topic/ph pr-d/codeph ">Feb 1 2005</codeph> は有効ですが、<codeph class="+ topic/ph pr-d/codeph ">Feb 2005</codeph> は無効です。次に、有効な形式をいくつか示します。</p>
	 <ul class="- topic/ul "><li class="- topic/li ">曜日 月 日 時:分:秒 GMT 年（例えば "Tue Feb 1 00:00:00 GMT-0800 2005"。これは <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> に対応します）。</li><li class="- topic/li ">曜日 月 日 年 時:分:秒 午前（AM） / 午後（PM）（例えば "Tue Feb 1 2005 12:00:00 AM"。これは <codeph class="+ topic/ph pr-d/codeph ">toLocaleString()</codeph> に対応します）。</li><li class="- topic/li ">曜日 月 日 年（例えば "Tue Feb 1 2005"。これは <codeph class="+ topic/ph pr-d/codeph ">toDateString()</codeph> に対応します）。</li><li class="- topic/li ">月/日/年（例えば "02/01/2005"）</li><li class="- topic/li ">月/年（例えば "02/2005"）</li></ul>
	 </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="#Date/getMonth()" class="- topic/link "><linktext class="- topic/linktext ">getMonth()</linktext></link><link href="#Date/getDate()" class="- topic/link "><linktext class="- topic/linktext ">getDate()</linktext></link><link href="#Date/getFullYear()" class="- topic/link "><linktext class="- topic/linktext ">getFullYear()</linktext></link></related-links></apiConstructor><apiOperation id="Date:UTC" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">UTC</apiName><shortdesc class="- topic/shortdesc ">
	 1970 年 1 月 1 日 0 時（世界時）からパラメーターで指定された時刻までのミリ秒数を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.utc, utc, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">1970 年 1 月 1 日から指定された日時までのミリ秒数です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">year</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">年を表す 4 桁の整数（2000 など）です。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">month</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0（1 月）～ 11（12 月）の整数です。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">date</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">1 ～ 31 の整数です。 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">hour</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0（0 時）～ 23（午後 11 時）の整数です。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">minute</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 59 の整数です。 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 59 の整数です。 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 999 の整数です。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 1970 年 1 月 1 日 0 時（世界時）からパラメーターで指定された時刻までのミリ秒数を返します。このメソッドでは世界時を使用するのに対し、<codeph class="+ topic/ph pr-d/codeph ">Date</codeph> コンストラクターではローカル時間を使用します。
	 <p class="- topic/p ">このメソッドは、UTC の日付を Date クラスのコンストラクターに渡す場合に便利です。Date クラスのコンストラクターはミリ秒オフセットを引数として受け取るので、Date.UTC() メソッドを使用して UTC の日付を対応のミリ秒オフセットに変換し、このオフセットを引数として Date クラスコンストラクターに送ることができます。</p>
	 
	 </apiDesc><example conref="examples\Date.UTC.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> を作成し、パラメーターにローカル時間の <codeph class="+ topic/ph pr-d/codeph ">year</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">month</codeph>（<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = 11 月）、<codeph class="+ topic/ph pr-d/codeph ">day</codeph>（<codeph class="+ topic/ph pr-d/codeph ">30</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">hour</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">minute</codeph>（<codeph class="+ topic/ph pr-d/codeph ">20</codeph>）を指定します。次に、<codeph class="+ topic/ph pr-d/codeph ">UTC()</codeph> を <codeph class="+ topic/ph pr-d/codeph ">setTime()</codeph> メソッド内で呼び出し、これらのパラメーターを世界時にリセットします。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 15, 20);
trace(someBirthday.toString());

someBirthday.setTime(Date.UTC(1974, 10, 30, 15, 20));
trace(someBirthday.toString());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getDate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getDate</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトで指定された日付（1 ～ 31 の整数）をローカル時間で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getdate, getdate, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトが表す日付（1 ～ 31）です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトで指定された日付（1 ～ 31 の整数）をローカル時間で返します。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。
	 
 	 </apiDesc><example conref="examples\Date.getDate.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> を作成し、パラメーターに <codeph class="+ topic/ph pr-d/codeph ">year</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">month</codeph>（<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = 11 月）、<codeph class="+ topic/ph pr-d/codeph ">day</codeph>（<codeph class="+ topic/ph pr-d/codeph ">30</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">hour</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">minute</codeph>（<codeph class="+ topic/ph pr-d/codeph ">20</codeph>）を指定します。次に、<codeph class="+ topic/ph pr-d/codeph ">getDate()</codeph> メソッドを呼び出し、日付を取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class DateExample extends Sprite {

        public function DateExample() {
            var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
            trace(someBirthday);            // Sat Nov 30 01:20:00 GMT-0800 1974
            trace(someBirthday.getDate()); // 30
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getMonth()" class="- topic/link "><linktext class="- topic/linktext ">getMonth()</linktext></link><link href="#Date/getFullYear()" class="- topic/link "><linktext class="- topic/linktext ">getFullYear()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getDay" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getDay</apiName><shortdesc class="- topic/shortdesc ">
	 この Date で指定された曜日（日曜日は 0、月曜日は 1 など）をローカル時間で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getday, getday, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトが表す曜日の数値（0 ～ 6）です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 この <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> で指定された曜日（日曜日は 0、月曜日は 1 など）をローカル時間で返します。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。
	 
 	 </apiDesc><example conref="examples\Date.getDay.1.as" class="- topic/example "> 次の例では、新しい Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">weekDayLabels</codeph> を作成して、エレメント <codeph class="+ topic/ph pr-d/codeph ">[Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday]</codeph> を設定し、次に、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> を作成して、パラメーターに <codeph class="+ topic/ph pr-d/codeph ">year</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">month</codeph>（<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = 11 月）、<codeph class="+ topic/ph pr-d/codeph ">day</codeph>（<codeph class="+ topic/ph pr-d/codeph ">30</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">hour</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">minute</codeph>（<codeph class="+ topic/ph pr-d/codeph ">20</codeph>）を指定します。次に <codeph class="+ topic/ph pr-d/codeph ">getDay()</codeph> メソッドを 2 回呼び出します。1 回目は日付を 6 という数値で表示し、2 回目は <codeph class="+ topic/ph pr-d/codeph ">weekDayLabels</codeph> を使用して曜日を表示します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var weekDayLabels:Array = new Array("Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday");

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);                       // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getDay());            // 6
trace(weekDayLabels[someBirthday.getDay()]); // Saturday
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getFullYear" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getFullYear</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトの年（2000 などの 4 桁の数字）をローカル時間で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getfullyear, getfullyear, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトが表す 4 桁の年です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの年（2000 などの 4 桁の数字）をローカル時間で返します。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc><example conref="examples\Date.getFullYear.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> を作成し、パラメーターに <codeph class="+ topic/ph pr-d/codeph ">year</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">month</codeph>（<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = 11 月）、<codeph class="+ topic/ph pr-d/codeph ">day</codeph>（<codeph class="+ topic/ph pr-d/codeph ">30</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">hour</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">minute</codeph>（<codeph class="+ topic/ph pr-d/codeph ">20</codeph>）を指定します。次に、<codeph class="+ topic/ph pr-d/codeph ">getFullYear()</codeph> メソッドを呼び出し、4 桁の年を取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);           // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getFullYear()); // 1974
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getHours" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getHours</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトの時（0 ～ 23 の整数）部分をローカル時間で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.gethours, gethours, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトが表す時（0 ～ 23）です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの時（0 ～ 23 の整数）部分をローカル時間で返します。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。 
	 
	 </apiDesc><example conref="examples\Date.getHours.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> を作成し、パラメーターに <codeph class="+ topic/ph pr-d/codeph ">year</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">month</codeph>（<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = 11 月）、<codeph class="+ topic/ph pr-d/codeph ">day</codeph>（<codeph class="+ topic/ph pr-d/codeph ">30</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">hour</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">minute</codeph>（<codeph class="+ topic/ph pr-d/codeph ">20</codeph>）を指定します。次に、<codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph> メソッドと <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> メソッドを呼び出し、時と分を 24 時間形式で取得します。最後に、ストリング <codeph class="+ topic/ph pr-d/codeph ">localTime</codeph> を作成し、関数 <codeph class="+ topic/ph pr-d/codeph ">getUSClockTime()</codeph> の呼び出し結果を割り当てます。この関数は、<codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph> と <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> を再度呼び出します。これにより、時間 <codeph class="+ topic/ph pr-d/codeph ">03:05 PM</codeph> が表示されます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 15, 5);

trace(someBirthday); // Sat Nov 30 15:20:00 GMT-0800 1974
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes()); // 15:5

var localTime:String = getUSClockTime(someBirthday.getHours(), someBirthday.getMinutes());
trace(localTime);    // 03:05 PM

function getUSClockTime(hrs:uint, mins:uint):String {
    var modifier:String = "PM";
    var minLabel:String = doubleDigitFormat(mins);

    if(hrs > 12) {
        hrs = hrs-12;
    } else if(hrs == 0) {
        modifier = "AM";
        hrs = 12;
    } else if(hrs &lt; 12) {
        modifier = "AM";
    }

    return (doubleDigitFormat(hrs) + ":" + minLabel + " " + modifier);
}

function doubleDigitFormat(num:uint):String {
    if(num &lt; 10) {
        return ("0" + num);
    }
    return num;
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getMilliseconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getMilliseconds</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトのミリ秒（0 ～ 999 の整数）部分をローカル時間で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getmilliseconds, getmilliseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトのミリ秒部分です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトのミリ秒（0 ～ 999 の整数）部分をローカル時間で返します。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc><example conref="examples\Date.getMilliseconds.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> をパラメーターの指定なしで作成します。次に、<codeph class="+ topic/ph pr-d/codeph ">getMilliseconds()</codeph> メソッドを呼び出し、Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> の作成時点のミリ秒数 を取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now.getMilliseconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getMinutes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getMinutes</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトの分（0 ～ 59 の整数）部分をローカル時間で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getminutes, getminutes, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの分部分です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの分（0 ～ 59 の整数）部分をローカル時間で返します。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc><example conref="examples\Date.getMinutes.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> をパラメーターの指定なしで作成します。次に、<codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> メソッドを呼び出し、Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> の作成時点の分を取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now);
trace(now.getMinutes());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getMonth" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getMonth</apiName><shortdesc class="- topic/shortdesc ">
	 この Date の月（1 月は 0、2 月は 1 など）部分をローカル時間で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getmonth, getmonth, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの月（0 ～ 11）部分です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 この <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> の月（1 月は 0、2 月は 1 など）部分をローカル時間で返します。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc><example conref="examples\Date.getMonth.1.as" class="- topic/example "> 次の例では、新しい Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">monthLabels</codeph> を作成して、<codeph class="+ topic/ph pr-d/codeph ">January</codeph> から <codeph class="+ topic/ph pr-d/codeph ">December</codeph> までのエレメントを設定し、次に、パラメーターを指定せずに新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> を作成します。次に、<codeph class="+ topic/ph pr-d/codeph ">getMonth()</codeph> メソッドを 2 回呼び出します。1 回目は、Date オブジェクト作成時点の <codeph class="+ topic/ph pr-d/codeph ">now</codeph> の月の数値を返し、2 回目は月の名前を返します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var monthLabels:Array = new Array("January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December");

var now:Date = new Date();
trace(now.getMonth());
trace(monthLabels[now.getMonth()]);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getSeconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getSeconds</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトの秒（0 ～ 59 の整数）部分をローカル時間で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getseconds, getseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの秒（0 ～ 59 の整数）部分です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの秒（0 ～ 59 の整数）部分をローカル時間で返します。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc><example conref="examples\Date.getSeconds.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> をパラメーターの指定なしで作成します。次に、<codeph class="+ topic/ph pr-d/codeph ">getSeconds()</codeph> メソッドを呼び出し、Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> の作成時点の秒を取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now.getSeconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getTime" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getTime</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトの 1970 年 1 月 1 日 0 時（世界時）からのミリ秒数を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.gettime, gettime, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトが表す 1970 年 1 月 1 日からのミリ秒数です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの 1970 年 1 月 1 日 0 時（世界時）からのミリ秒数を返します。このメソッドは、複数の <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトを比較する際に特定の時間を表すのに使用します。
	 
	 </apiDesc><example conref="examples\Date.getTime.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">mlk</codeph> を作成し、パラメーターに <codeph class="+ topic/ph pr-d/codeph ">year</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1929</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">month</codeph>（<codeph class="+ topic/ph pr-d/codeph ">0</codeph> = 1 月）、<codeph class="+ topic/ph pr-d/codeph ">day</codeph>（<codeph class="+ topic/ph pr-d/codeph ">15</codeph>）を指定します。次に、<codeph class="+ topic/ph pr-d/codeph ">getTime()</codeph> メソッドを呼び出し、1970 年 1 月 1 日午前 0 時からのミリ秒数を取得します。年が 1929 に設定されているため、ミリ秒は負の値で表されます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var mlk:Date = new Date(1929, 0, 15);
trace(mlk);           // Tue Jan 15 00:00:00 GMT-0800 1929
trace(mlk.getTime()); // -1292601600000
</codeblock></example><example conref="examples\Date.getTime.2.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> をパラメーター指定なしで作成し、次に、以降で作成する DateMath クラスのメソッドを使用して、元の Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> の作成時刻に時間を追加します。
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">addSeconds()</codeph> : <codeph class="+ topic/ph pr-d/codeph ">now</codeph> に 30 秒を追加します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">addMinutes()</codeph> : <codeph class="+ topic/ph pr-d/codeph ">now</codeph> に 30 分を追加します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">addHours()</codeph> : Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> に 6 時間を追加します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">addDays()</codeph> : Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> に 30 日を追加します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">addWeeks()</codeph> : <codeph class="+ topic/ph pr-d/codeph ">now</codeph> に 4 週間を追加します。</li></ul>

<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now);
trace(DateMath.addSeconds(now, 30));
trace(DateMath.addMinutes(now, 30));
trace(DateMath.addHours(now, 6));
trace(DateMath.addDays(now, 30));
trace(DateMath.addWeeks(now, 4));

class DateMath {
    public static function addWeeks(date:Date, weeks:Number):Date {
        return addDays(date, weeks*7);
    }

    public static function addDays(date:Date, days:Number):Date {
        return addHours(date, days*24);
    }

    public static function addHours(date:Date, hrs:Number):Date {
        return addMinutes(date, hrs*60);
    }

    public static function addMinutes(date:Date, mins:Number):Date {
        return addSeconds(date, mins*60);
    }

    public static function addSeconds(date:Date, secs:Number):Date {
        var mSecs:Number = secs * 1000;
        var sum:Number = mSecs + date.getTime();
        return new Date(sum);
    }
}
</codeblock> <b class="+ topic/ph hi-d/b ">注意：</b>Date 演算を実行する場合には、getTime を使用することが重要です。getTime はうるう年に対応しているので、次の疑似コードのような if 文が不要です。
 <pre xml:space="preserve" class="- topic/pre ">
 function addMonths(num:Number):void {
     currentMonth = currentMonth + num;
     if(currentMonth > 12) {
         currentYear++;
         currentMonth = currentMonth - 12;
     }
 }
 </pre>
</example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getTimezoneOffset" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getTimezoneOffset</apiName><shortdesc class="- topic/shortdesc ">
     世界時（UTC）とコンピューターのローカル時間の差（分単位）を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.gettimezoneoffset, gettimezoneoffset, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">この分をコンピューターのローカル時間に加算すると世界時と等しくなります。コンピューターの時刻が世界時より遅い時間に設定されている場合、戻り値は負の数になります。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     世界時（UTC）とコンピューターのローカル時間の差（分単位）を返します。 
	 
	 </apiDesc><example conref="examples\Date.getTimezoneOffset.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> をパラメーターの指定なしで作成します。次に、<codeph class="+ topic/ph pr-d/codeph ">getTimezoneOffset()</codeph> メソッドを呼び出し、<codeph class="+ topic/ph pr-d/codeph ">now</codeph> が作成された時刻と世界時の差（分単位）を取得します。さらに、この結果を 60 で除算して、タイムゾーンのオフセットを時間単位に変換します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var date:Date = new Date();
trace(date.getTimezoneOffset() / 60);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getUTCDate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCDate</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトの日付（1 ～ 31 の整数）を世界時（UTC）で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutcdate, getutcdate, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトが表す UTC の日付（1 ～ 31）です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの日付（1 ～ 31 の整数）を世界時（UTC）で返します。
	 
	 </apiDesc><example conref="examples\Date.getUTCDate.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> を作成し、パラメーターに <codeph class="+ topic/ph pr-d/codeph ">year</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">month</codeph>（<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = 11 月）、<codeph class="+ topic/ph pr-d/codeph ">day</codeph>（<codeph class="+ topic/ph pr-d/codeph ">30</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">hour</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">minute</codeph>（<codeph class="+ topic/ph pr-d/codeph ">20</codeph>）を指定します。<codeph class="+ topic/ph pr-d/codeph ">getUTCDate()</codeph> メソッドを呼び出し、日付を UTC で取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);             // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getUTCDate()); // 30
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getDate()" class="- topic/link "><linktext class="- topic/linktext ">getDate()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getUTCDay" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCDay</apiName><shortdesc class="- topic/shortdesc ">
	 この Date の曜日（日曜日は 0、月曜日は 1 など）を世界時（UTC）で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutcday, getutcday, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトが表す UTC の曜日（0 ～ 6）です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 この <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> の曜日（日曜日は 0、月曜日は 1 など）を世界時（UTC）で返します。
	 
	 </apiDesc><example conref="examples\Date.getUTCDay.1.as" class="- topic/example "> 次の例では、新しい Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">weekDayLabels</codeph> を作成して、エレメント <codeph class="+ topic/ph pr-d/codeph ">[Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday]</codeph> を設定し、次に、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> を作成して、パラメーターに <codeph class="+ topic/ph pr-d/codeph ">year</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">month</codeph>（<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = 11 月）、<codeph class="+ topic/ph pr-d/codeph ">day</codeph>（<codeph class="+ topic/ph pr-d/codeph ">30</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">hour</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">minute</codeph>（<codeph class="+ topic/ph pr-d/codeph ">20</codeph>）を指定します。次に <codeph class="+ topic/ph pr-d/codeph ">getUTCDay()</codeph> メソッドを 2 回呼び出します。1 回目は日付を 6 という数値で表示し、2 回目は <codeph class="+ topic/ph pr-d/codeph ">weekDayLabels</codeph> を使用して曜日を UTC で表示します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var weekDayLabels:Array = new Array("Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday");

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);           // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getUTCDay()); // 6
trace(weekDayLabels[someBirthday.getUTCDay()]); // Saturday
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getDay()" class="- topic/link "><linktext class="- topic/linktext ">getDay()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getUTCFullYear" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCFullYear</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトの 4 桁の年を世界時（UTC）で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutcfullyear, getutcfullyear, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトが表す UTC の 4 桁の年です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの 4 桁の年を世界時（UTC）で返します。
	 
	 </apiDesc><example conref="examples\Date.getUTCFullYear.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> を作成し、パラメーターに <codeph class="+ topic/ph pr-d/codeph ">year</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">month</codeph>（<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = 11 月）、<codeph class="+ topic/ph pr-d/codeph ">day</codeph>（<codeph class="+ topic/ph pr-d/codeph ">30</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">hour</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">minute</codeph>（<codeph class="+ topic/ph pr-d/codeph ">20</codeph>）を指定します。次に、<codeph class="+ topic/ph pr-d/codeph ">getUTCFullYear()</codeph> メソッドを呼び出し、4 桁の年を UTC で取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);                 // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getUTCFullYear()); // 1974
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getFullYear()" class="- topic/link "><linktext class="- topic/linktext ">getFullYear()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getUTCHours" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCHours</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトの時（0 ～ 23 の整数）を世界時（UTC）で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutchours, getutchours, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトが表す UTC の時（0 ～ 23）です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの時（0 ～ 23 の整数）を世界時（UTC）で返します。
	 
	 </apiDesc><example conref="examples\Date.getUTCHours.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> を作成し、パラメーターに <codeph class="+ topic/ph pr-d/codeph ">year</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">month</codeph>（<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = 11 月）、<codeph class="+ topic/ph pr-d/codeph ">day</codeph>（<codeph class="+ topic/ph pr-d/codeph ">30</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">hour</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">minute</codeph>（<codeph class="+ topic/ph pr-d/codeph ">20</codeph>）を指定します。次に、<codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph> メソッドと <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> メソッドを呼び出し、時と分を 24 時間形式で取得します。最後に、ストリング <codeph class="+ topic/ph pr-d/codeph ">localTime</codeph> を作成し、関数 <codeph class="+ topic/ph pr-d/codeph ">getUSClockTime()</codeph> の呼び出し結果を割り当てます。この関数は、<codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph> と <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> を再度呼び出します。これにより、時間 <codeph class="+ topic/ph pr-d/codeph ">03:05 PM</codeph> が表示されます。最後に、String 変数 <codeph class="+ topic/ph pr-d/codeph ">utcTime</codeph> を <codeph class="+ topic/ph pr-d/codeph ">localTime</codeph> と同様の方法で作成します。この場合、結果は同じになります。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 15, 5);

trace(someBirthday); // Sat Nov 30 15:20:00 GMT-0800 1974
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes()); // 15:5

var localTime:String = getUSClockTime(someBirthday.getHours(), someBirthday.getMinutes());
trace(localTime);    // 03:05 PM

var utcTime:String = getUSClockTime(someBirthday.getUTCHours(), someBirthday.getUTCMinutes());
trace(utcTime);      // 11:05 PM

function getUSClockTime(hrs:uint, mins:uint):String {
    var modifier:String = "PM";
    var minLabel:String = doubleDigitFormat(mins);

    if(hrs > 12) {
        hrs = hrs-12;
    } else if(hrs == 0) {
        modifier = "AM";
        hrs = 12;
    } else if(hrs &lt; 12) {
        modifier = "AM";
    }

    return (doubleDigitFormat(hrs) + ":" + minLabel + " " + modifier);
}

function doubleDigitFormat(num:uint):String {
    if(num &lt; 10) {
        return ("0" + num);
    }
    return num;
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getHours()" class="- topic/link "><linktext class="- topic/linktext ">getHours()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getUTCMilliseconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCMilliseconds</apiName><shortdesc class="- topic/shortdesc ">
	  Date オブジェクトのミリ秒（0 ～ 999 の整数）部分を世界時（UTC）で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutcmilliseconds, getutcmilliseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの UTC のミリ秒部分です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	  <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトのミリ秒（0 ～ 999 の整数）部分を世界時（UTC）で返します。
	 
	 </apiDesc><example conref="examples\Date.getUTCMilliseconds.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> をパラメーターの指定なしで作成します。次に、<codeph class="+ topic/ph pr-d/codeph ">getUTCMilliseconds()</codeph> メソッドを呼び出し、Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> の作成時点のミリ秒 を UTC で取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now.getUTCMilliseconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getUTCMinutes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCMinutes</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトの分（0 ～ 59 の整数）部分を世界時（UTC）で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutcminutes, getutcminutes, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの UTC の分部分です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの分（0 ～ 59 の整数）部分を世界時（UTC）で返します。
	 
	 </apiDesc><example conref="examples\Date.getUTCMinutes.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> をパラメーターの指定なしで作成します。次に、<codeph class="+ topic/ph pr-d/codeph ">getUTCMinutes()</codeph> メソッドを呼び出し、Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> の作成時点の分を UTC で取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now.getUTCMinutes());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getUTCMonth" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCMonth</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトの月（0（1 月） ～ 11（12 月））部分を世界時（UTC）で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutcmonth, getutcmonth, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの UTC の月部分です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの月（0（1 月） ～ 11（12 月））部分を世界時（UTC）で返します。
	 
	 </apiDesc><example conref="examples\Date.getUTCMonth.1.as" class="- topic/example "> 次の例では、新しい Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">monthLabels</codeph> を作成して、<codeph class="+ topic/ph pr-d/codeph ">January</codeph> から <codeph class="+ topic/ph pr-d/codeph ">December</codeph> までのエレメントを設定し、次に、パラメーターを指定せずに新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> を作成します。次に、<codeph class="+ topic/ph pr-d/codeph ">getUTCMonth()</codeph> メソッドを 2 回呼び出します。1 回目は、Date オブジェクト作成時点の <codeph class="+ topic/ph pr-d/codeph ">now</codeph> の月の数値を、2 回目は月の名前を UTC で返します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var monthLabels:Array = new Array("January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December");

var now:Date = new Date();
trace(now.getMonth());
trace(now.getUTCMonth());
trace(monthLabels[now.getUTCMonth()]);
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getMonth()" class="- topic/link "><linktext class="- topic/linktext ">getMonth()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getUTCSeconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCSeconds</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトの秒（0 ～ 59 の整数）部分を世界時（UTC）で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutcseconds, getutcseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの UTC の秒部分です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの秒（0 ～ 59 の整数）部分を世界時（UTC）で返します。
	 
	 </apiDesc><example conref="examples\Date.getUTCSeconds.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> をパラメーターの指定なしで作成します。次に、<codeph class="+ topic/ph pr-d/codeph ">getUTCSeconds()</codeph> メソッドを呼び出し、Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> の作成時点の秒を UTC で取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now.getUTCSeconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:parse" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">parse</apiName><shortdesc class="- topic/shortdesc ">
	 日付を表すストリングを、1970 年 1 月 1 日（UTC）から経過したミリ秒数に相当する数値に変換します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">1970 年 1 月 1 日（UTC）から経過したミリ秒数を表す数値です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">date</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Date.toString()</codeph> の出力形式に準じた日付のストリング表現です。<codeph class="+ topic/ph pr-d/codeph ">Date.toString()</codeph> の出力の日付形式は、次のとおりです。 
     <pre xml:space="preserve" class="- topic/pre ">
     Day Mon DD HH:MM:SS TZD YYYY
     </pre>
     <p class="- topic/p ">次に実際の使用例を示します。 </p>
     <pre xml:space="preserve" class="- topic/pre ">
     Wed Apr 12 15:30:17 GMT-0700 2006
     </pre>
     <p class="- topic/p ">タイムゾーン指定（TZD）は、常に <codeph class="+ topic/ph pr-d/codeph ">GMT-HHMM</codeph> または <codeph class="+ topic/ph pr-d/codeph ">UTC-HHMM</codeph> の形式になります。これは、グリニッジ標準時（GMT）を基準にした時間と分のオフセットを示します。なお、グリニッジ標準時は現在は世界時（UTC）とも呼ばれています。年、月、曜日は、スラッシュ（<codeph class="+ topic/ph pr-d/codeph ">/</codeph>）またはスペースで区切ることができますが、ダッシュ（<codeph class="+ topic/ph pr-d/codeph ">-</codeph>）で区切ることはできません。他にも、次のような形式がサポートされます。月、曜日、年だけというように、これらの形式の一部分を含めることもできます。</p>
     <pre xml:space="preserve" class="- topic/pre ">
     MM/DD/YYYY HH:MM:SS TZD
     HH:MM:SS TZD Day Mon/DD/YYYY 
     Mon DD YYYY HH:MM:SS TZD
     Day Mon DD HH:MM:SS TZD YYYY
     Day DD Mon HH:MM:SS TZD YYYY
     Mon/DD/YYYY HH:MM:SS TZD
     YYYY/MM/DD HH:MM:SS TZD
     </pre>
     
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 日付を表すストリングを、1970 年 1 月 1 日（UTC）から経過したミリ秒数に相当する数値に変換します。
	 
     </apiDesc><example conref="examples\Date.parse.1.as" class="- topic/example "> 次の例では、1974 年 11 月 30 日の日付ストリングを <codeph class="+ topic/ph pr-d/codeph ">dateParsed</codeph> に割り当てます。次に、<codeph class="+ topic/ph pr-d/codeph ">Date.parse()</codeph> メソッドを呼び出し、この日付を 1970 年 1 月 1 日からのミリ秒数に変換します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var dateParsed:String = "Sat Nov 30 1974";

var milliseconds:Number = Date.parse(dateParsed);
trace(milliseconds); // 155030400000
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/toString()" class="- topic/link "><linktext class="- topic/linktext ">Date.toString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:setDate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setDate</apiName><shortdesc class="- topic/shortdesc ">
	 月内の日付をローカル時間で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setdate, setdate, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">day</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">1 ～ 31 の整数です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 月内の日付をローカル時間で設定し、新しい時刻をミリ秒で返します。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc><example conref="examples\Date.setDate.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> を作成し、パラメーターに <codeph class="+ topic/ph pr-d/codeph ">year</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">month</codeph>（<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = 11 月）、<codeph class="+ topic/ph pr-d/codeph ">day</codeph>（<codeph class="+ topic/ph pr-d/codeph ">30</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">hour</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">minute</codeph>（<codeph class="+ topic/ph pr-d/codeph ">20</codeph>）を指定します。次に、<codeph class="+ topic/ph pr-d/codeph ">getDate()</codeph> メソッドを呼び出し、日付を取得します。次に、<codeph class="+ topic/ph pr-d/codeph ">setDate()</codeph> を呼び出して（<codeph class="+ topic/ph pr-d/codeph ">day</codeph> パラメーターに <codeph class="+ topic/ph pr-d/codeph ">20</codeph> を設定）から、<codeph class="+ topic/ph pr-d/codeph ">getDate()</codeph> を再度呼び出します。これにより、新しく設定された日付を取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);            // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getDate()); // 30

someBirthday.setDate(20);
trace(someBirthday.getDate()); // 20
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setFullYear" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setFullYear</apiName><shortdesc class="- topic/shortdesc ">
	 年をローカル時間で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setfullyear, setfullyear, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">year</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">年を示す 4 桁の数値です。2 桁の数値は 4 桁の年の省略形を表しません。例えば、99 は 1999 年ではなく、99 年です。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">month</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0（1 月）～ 11（12 月）の整数です。 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">day</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">1 ～ 31 の数値です。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 年をローカル時間で設定し、新しい時刻をミリ秒で返します。<codeph class="+ topic/ph pr-d/codeph ">month</codeph> パラメーターと <codeph class="+ topic/ph pr-d/codeph ">day</codeph> パラメーターを指定すると、両方はローカル時間に設定されます。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。
	 <p class="- topic/p ">
	 このメソッドを呼び出しても <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの他のフィールドは変更されませんが、このメソッドを呼び出した結果として曜日が変わった場合には、<codeph class="+ topic/ph pr-d/codeph ">Date.getUTCDay()</codeph> と <codeph class="+ topic/ph pr-d/codeph ">Date.getDay()</codeph> は新しい値を返すことがあります。
	 </p>
	 
	 </apiDesc><example conref="examples\Date.setFullYear.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> を作成し、パラメーターに <codeph class="+ topic/ph pr-d/codeph ">year</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">month</codeph>（<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = 11 月）、<codeph class="+ topic/ph pr-d/codeph ">day</codeph>（<codeph class="+ topic/ph pr-d/codeph ">30</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">hour</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">minute</codeph>（<codeph class="+ topic/ph pr-d/codeph ">20</codeph>）を指定します。次に、メソッド <codeph class="+ topic/ph pr-d/codeph ">getFullYear()</codeph> を呼び出し、4 桁の年を取得します。次に、<codeph class="+ topic/ph pr-d/codeph ">setFullYear()</codeph> を呼び出して（<codeph class="+ topic/ph pr-d/codeph ">year</codeph> パラメーターに <codeph class="+ topic/ph pr-d/codeph ">2000</codeph> を設定）から、<codeph class="+ topic/ph pr-d/codeph ">getFullYear()</codeph> を再度呼び出します。これにより、新しく設定された年を取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);           // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getFullYear()); // 1974

someBirthday.setFullYear(2000);
trace(someBirthday.getFullYear()); // 2000
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getUTCDay()" class="- topic/link "><linktext class="- topic/linktext ">getUTCDay()</linktext></link><link href="#Date/getDay()" class="- topic/link "><linktext class="- topic/linktext ">getDay()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:setHours" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setHours</apiName><shortdesc class="- topic/shortdesc ">
	 時をローカル時間で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.sethours, sethours, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">hour</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0（0 時）～ 23（午後 11 時）の整数です。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">minute</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 59 の整数です。 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 59 の整数です。 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 999 の整数です。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 時をローカル時間で設定し、新しい時刻をミリ秒で返します。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc><example conref="examples\Date.setHours.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> を作成し、パラメーターに <codeph class="+ topic/ph pr-d/codeph ">year</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">month</codeph>（<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = 11 月）、<codeph class="+ topic/ph pr-d/codeph ">day</codeph>（<codeph class="+ topic/ph pr-d/codeph ">30</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">hour</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">minute</codeph>（<codeph class="+ topic/ph pr-d/codeph ">20</codeph>）を指定します。次に、メソッド <codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph> と <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> を呼び出し、時と分を取得します。次に、<codeph class="+ topic/ph pr-d/codeph ">setHours()</codeph> を呼び出して（<codeph class="+ topic/ph pr-d/codeph ">hour</codeph> パラメーターに <codeph class="+ topic/ph pr-d/codeph ">12</codeph> を設定）から、<codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph> と <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> を再度呼び出します。これにより、新しく設定された時と分を取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 15, 20);

trace(someBirthday); // Sat Nov 30 15:20:00 GMT-0800 1974
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes()); // 15:20

someBirthday.setHours(12);
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes()); // 12:20
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setMilliseconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setMilliseconds</apiName><shortdesc class="- topic/shortdesc ">
	 ミリ秒をローカル時間で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setmilliseconds, setmilliseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 999 の整数です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ミリ秒をローカル時間で設定し、新しい時刻をミリ秒で返します。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc><example conref="examples\Date.setMilliseconds.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> をパラメーターの指定なしで作成します。次に、<codeph class="+ topic/ph pr-d/codeph ">getMilliseconds()</codeph> メソッドを呼び出し、<codeph class="+ topic/ph pr-d/codeph ">now</codeph> 作成時点のミリ秒を取得します。次に、別の Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">before</codeph> を、<codeph class="+ topic/ph pr-d/codeph ">setMilliseconds()</codeph> を追加で呼び出して（<codeph class="+ topic/ph pr-d/codeph ">millisecond</codeph> パラメーターに <codeph class="+ topic/ph pr-d/codeph ">4</codeph> を設定）作成します。次に、<codeph class="+ topic/ph pr-d/codeph ">getMilliseconds()</codeph> を再度呼び出して、新しく設定されたミリ秒を取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now);
trace(now.getMilliseconds());

var before:Date = new Date(now.setMilliseconds(4));
trace(before);
trace(before.getMilliseconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setMinutes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setMinutes</apiName><shortdesc class="- topic/shortdesc ">
	 分をローカル時間で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setminutes, setminutes, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">minute</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 59 の整数です。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 59 の整数です。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 999 の整数です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 分をローカル時間で設定し、新しい時刻をミリ秒で返します。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc><example conref="examples\Date.setMinutes.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> をパラメーターの指定なしで作成します。次に、<codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> メソッドを呼び出し、<codeph class="+ topic/ph pr-d/codeph ">now</codeph> 作成時点の分を取得します。次に、別の Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">before</codeph> を、<codeph class="+ topic/ph pr-d/codeph ">setMinutes()</codeph> を追加で呼び出して（<codeph class="+ topic/ph pr-d/codeph ">minute</codeph> パラメーターに <codeph class="+ topic/ph pr-d/codeph ">0</codeph> を設定）作成します。次に、<codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> を再度呼び出して、新しく設定された分を取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now);
trace(now.getMinutes());

var before:Date = new Date(now.setMinutes(0));
trace(before);
trace(before.getMinutes());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setMonth" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setMonth</apiName><shortdesc class="- topic/shortdesc ">
	 月と、オプションで日付をローカル時間で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setmonth, setmonth, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">month</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0（1 月）～ 11（12 月）の整数です。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">day</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">1 ～ 31 の整数です。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 月と、オプションで日付をローカル時間で設定し、新しい時刻をミリ秒で返します。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc><example conref="examples\Date.setMonth.1.as" class="- topic/example "> 次の例では、新しい Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">monthLabels</codeph> を作成して、<codeph class="+ topic/ph pr-d/codeph ">January</codeph> から <codeph class="+ topic/ph pr-d/codeph ">December</codeph> までのエレメントを設定し、次に、パラメーターを指定せずに新しい Month オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> を作成します。次に、<codeph class="+ topic/ph pr-d/codeph ">getMonth()</codeph> メソッドを呼び出し、<codeph class="+ topic/ph pr-d/codeph ">now</codeph> 作成時点の月を取得します。次に、<codeph class="+ topic/ph pr-d/codeph ">setMonth()</codeph> を呼び出して（<codeph class="+ topic/ph pr-d/codeph ">month</codeph> パラメーターに <codeph class="+ topic/ph pr-d/codeph ">0</codeph> を設定）から、<codeph class="+ topic/ph pr-d/codeph ">getMonth()</codeph> を再度呼び出します。これにより、新しく設定された月を取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var monthLabels:Array = new Array("January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December");

var now:Date = new Date();
trace(now.getMonth());
trace(monthLabels[now.getMonth()]);

now.setMonth(0);
trace(now.getMonth());             // 0
trace(monthLabels[now.getMonth()]); // January
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setSeconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setSeconds</apiName><shortdesc class="- topic/shortdesc ">
	 秒をローカル時間で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setseconds, setseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 59 の整数です。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 999 の整数です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 秒をローカル時間で設定し、新しい時刻をミリ秒で返します。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc><example conref="examples\Date.setSeconds.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> をパラメーターの指定なしで作成します。次に、<codeph class="+ topic/ph pr-d/codeph ">getseconds()</codeph> メソッドを呼び出し、<codeph class="+ topic/ph pr-d/codeph ">now</codeph> 作成時点の秒を取得します。次に、<codeph class="+ topic/ph pr-d/codeph ">setSeconds()</codeph> を呼び出して（<codeph class="+ topic/ph pr-d/codeph ">second</codeph> パラメーターに <codeph class="+ topic/ph pr-d/codeph ">0</codeph> を設定）から、<codeph class="+ topic/ph pr-d/codeph ">getSeconds()</codeph> を再度呼び出します。これにより、新しく設定された秒を取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now.getSeconds());

now.setSeconds(0);
trace(now.getSeconds()); // 0
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setTime" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setTime</apiName><shortdesc class="- topic/shortdesc ">
	 日付を 1970 年 1 月 1 日 0 時からのミリ秒数で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.settime, settime, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">整数値です。0 は世界時（UTC）の 1 月 1 日 0 時です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 日付を 1970 年 1 月 1 日 0 時からのミリ秒数で設定し、新しい時刻をミリ秒で返します。 
	 
	 </apiDesc><example conref="examples\Date.setTime.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> をパラメーターの指定なしで作成します。次に <codeph class="+ topic/ph pr-d/codeph ">setTime()</codeph> メソッドを呼び出します。パラメーター <codeph class="+ topic/ph pr-d/codeph ">millisecond</codeph> には <codeph class="+ topic/ph pr-d/codeph ">-1292601600000</codeph> を設定します。これにより時刻は <codeph class="+ topic/ph pr-d/codeph ">Tue Jan 15 00:00:00 GMT-0800 1929</codeph> に設定されます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now);

now.setTime(-1292601600000);
trace(now); // Tue Jan 15 00:00:00 GMT-0800 1929
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setUTCDate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setUTCDate</apiName><shortdesc class="- topic/shortdesc ">
	 月内の日付を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setutcdate, setutcdate, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">day</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">1 ～ 31 の整数値です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 月内の日付を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。このメソッドを呼び出しても、<codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの他のフィールドは変更されませんが、このメソッドを呼び出した結果として曜日が変わった場合には、<codeph class="+ topic/ph pr-d/codeph ">Date.getUTCDay()</codeph> メソッドと <codeph class="+ topic/ph pr-d/codeph ">Date.getDay()</codeph> メソッドは新しい値を返すことがあります。
	 
	 </apiDesc><example conref="examples\Date.setUTCDate.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> を作成し、パラメーターに <codeph class="+ topic/ph pr-d/codeph ">year</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">month</codeph>（<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = 11 月）、<codeph class="+ topic/ph pr-d/codeph ">day</codeph>（<codeph class="+ topic/ph pr-d/codeph ">30</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">hour</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">minute</codeph>（<codeph class="+ topic/ph pr-d/codeph ">20</codeph>）を指定します。<codeph class="+ topic/ph pr-d/codeph ">getUTCDate()</codeph> メソッドを呼び出すと、月内の日付が正しく返されます。次に、<codeph class="+ topic/ph pr-d/codeph ">setUTCDate()</codeph> を呼び出します。パラメーター <codeph class="+ topic/ph pr-d/codeph ">day</codeph> には <codeph class="+ topic/ph pr-d/codeph ">1</codeph> を設定します。<codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> ステートメントで日付が正しく設定されたことを確認します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday); // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getUTCDate()); // 30

someBirthday.setUTCDate(1);
trace(someBirthday); // Fri Nov 1 01:20:00 GMT-0800 1974
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getUTCDay()" class="- topic/link "><linktext class="- topic/linktext ">getUTCDay()</linktext></link><link href="#Date/getDay()" class="- topic/link "><linktext class="- topic/linktext ">getDay()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:setUTCFullYear" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setUTCFullYear</apiName><shortdesc class="- topic/shortdesc ">
	 年を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setutcfullyear, setutcfullyear, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">整数です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">year</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">4 桁の年（2000 など）を表す整数です。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">month</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0（1 月）～ 11（12 月）の整数です。 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">day</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">1 ～ 31 の整数です。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 年を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。 
	 <p class="- topic/p ">
	 このメソッドでは、オプションで月と日を設定することもできます。このメソッドを呼び出しても他のフィールドは変更されませんが、このメソッドを呼び出した結果として曜日が変わった場合には、<codeph class="+ topic/ph pr-d/codeph ">Date.getUTCDay()</codeph> と <codeph class="+ topic/ph pr-d/codeph ">Date.getDay()</codeph> メソッドは新しい値を返すことがあります。 
	 </p>
	 
 	 </apiDesc><example conref="examples\Date.setUTCFullYear.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> を作成し、パラメーターに <codeph class="+ topic/ph pr-d/codeph ">year</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">month</codeph>（<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = 11 月）、<codeph class="+ topic/ph pr-d/codeph ">day</codeph>（<codeph class="+ topic/ph pr-d/codeph ">30</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">hour</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">minute</codeph>（<codeph class="+ topic/ph pr-d/codeph ">20</codeph>）を指定します。メソッド <codeph class="+ topic/ph pr-d/codeph ">getUTCFullYear()</codeph> を呼び出すと、4 桁の年が正しく返されます。次に、<codeph class="+ topic/ph pr-d/codeph ">setUTCFullYear()</codeph> を呼び出します。パラメーター <codeph class="+ topic/ph pr-d/codeph ">year</codeph> には <codeph class="+ topic/ph pr-d/codeph ">1975</codeph> を設定します。<codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> ステートメントで年が正しく設定されたことを確認します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday); // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getUTCFullYear()); // 1974

someBirthday.setUTCFullYear(1975);
trace(someBirthday); // Thu Nov 30 01:20:00 GMT-0800 1975
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getUTCDay()" class="- topic/link "><linktext class="- topic/linktext ">getUTCDay()</linktext></link><link href="#Date/getDay()" class="- topic/link "><linktext class="- topic/linktext ">getDay()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:setUTCHours" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setUTCHours</apiName><shortdesc class="- topic/shortdesc ">
	 時を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setutchours, setutchours, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">hour</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0（0 時）～ 23（午後 11 時）の整数です。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">minute</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 59 の整数です。 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 59 の整数です。 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 999 の整数です。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 時を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。オプションで、分、秒、およびミリ秒を指定することができます。
	 
	 </apiDesc><example conref="examples\Date.setUTCHours.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> を作成し、パラメーターに <codeph class="+ topic/ph pr-d/codeph ">year</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">month</codeph>（<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = 11 月）、<codeph class="+ topic/ph pr-d/codeph ">day</codeph>（<codeph class="+ topic/ph pr-d/codeph ">30</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">hour</codeph>（<codeph class="+ topic/ph pr-d/codeph ">1</codeph>）、<codeph class="+ topic/ph pr-d/codeph ">minute</codeph>（<codeph class="+ topic/ph pr-d/codeph ">20</codeph>）を指定します。次に、メソッド <codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">getUTCHours()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">getUTCMinutes()</codeph> を呼び出し、時と分を取得します。<codeph class="+ topic/ph pr-d/codeph ">setUTCHours()</codeph> を呼び出します。パラメーター <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> には <codeph class="+ topic/ph pr-d/codeph ">12</codeph> を設定します。次に、メソッド <codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">getUTCHours()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">getUTCMinutes()</codeph> を再度呼び出し、更新された時を正しく表示します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 15, 20);

trace(someBirthday); // Sat Nov 30 15:20:00 GMT-0800 1974
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes());     // 15:20
trace(someBirthday.getUTCHours() + ":" + someBirthday.getUTCMinutes()); // 23:20

someBirthday.setUTCHours(12);
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes());     // 4:20
trace(someBirthday.getUTCHours() + ":" + someBirthday.getUTCMinutes()); // 12:20
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setUTCMilliseconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setUTCMilliseconds</apiName><shortdesc class="- topic/shortdesc ">
	 ミリ秒を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setutcmilliseconds, setutcmilliseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 999 の整数です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ミリ秒を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。
	 
	 </apiDesc><example conref="examples\Date.setUTCMilliseconds.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> をパラメーターの指定なしで作成します。次に、<codeph class="+ topic/ph pr-d/codeph ">getUTCMilliseconds()</codeph> メソッドを呼び出し、<codeph class="+ topic/ph pr-d/codeph ">now</codeph> 作成時点の UTCMilliseconds を取得します。次に、別の Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">before</codeph> を、<codeph class="+ topic/ph pr-d/codeph ">setUTCMilliseconds()</codeph> を呼び出して（<codeph class="+ topic/ph pr-d/codeph ">millisecond</codeph> パラメーターに <codeph class="+ topic/ph pr-d/codeph ">4</codeph> を設定）作成します。次に、<codeph class="+ topic/ph pr-d/codeph ">getUTCMilliseconds()</codeph> を再度呼び出して、新しく設定されたミリ秒を取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">


var now:Date = new Date();
trace(now);
trace(now.getUTCMilliseconds());

var before:Date = new Date(now.setUTCMilliseconds(4));
trace(before);
trace(before.getUTCMilliseconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setUTCMinutes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setUTCMinutes</apiName><shortdesc class="- topic/shortdesc ">
	 分を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setutcminutes, setutcminutes, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">minute</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 59 の整数です。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 59 の整数です。 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 999 の整数です。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 分を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。オプションで、秒とミリ秒を指定することができます。
	 
	 </apiDesc><example conref="examples\Date.setUTCMinutes.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> をパラメーターの指定なしで作成します。次に、<codeph class="+ topic/ph pr-d/codeph ">getUTCMinutes()</codeph> メソッドを呼び出し、<codeph class="+ topic/ph pr-d/codeph ">now</codeph> 作成時点の UTCMinutes を取得します。次に、別の Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">before</codeph> を、<codeph class="+ topic/ph pr-d/codeph ">setUTCMinutes()</codeph> を呼び出して（<codeph class="+ topic/ph pr-d/codeph ">minute</codeph> パラメーターに <codeph class="+ topic/ph pr-d/codeph ">0</codeph> を設定）作成します。次に、<codeph class="+ topic/ph pr-d/codeph ">getUTCMinutes()</codeph> を再度呼び出して、新しく設定された分を取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now);
trace(now.getUTCMinutes());

var before:Date = new Date(now.setUTCMinutes(0));
trace(before);
trace(before.getUTCMinutes());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setUTCMonth" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setUTCMonth</apiName><shortdesc class="- topic/shortdesc ">
	 月、および日（オプション）を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setutcmonth, setutcmonth, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">month</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0（1 月）～ 11（12 月）の整数です。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">day</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">1 ～ 31 の整数です。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 月、および日（オプション）を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。このメソッドを呼び出しても他のフィールドは変更されませんが、このメソッドを呼び出した結果として曜日が変わった場合には、<codeph class="+ topic/ph pr-d/codeph ">Date.getUTCDay()</codeph> メソッドと <codeph class="+ topic/ph pr-d/codeph ">Date.getDay()</codeph> メソッドは新しい値を返すことがあります。
	 
	 </apiDesc><example conref="examples\Date.setUTCMonth.1.as" class="- topic/example "> 次の例では、新しい Array オブジェクト <codeph class="+ topic/ph pr-d/codeph ">UTCMonthLabels</codeph> を作成して、<codeph class="+ topic/ph pr-d/codeph ">January</codeph> から <codeph class="+ topic/ph pr-d/codeph ">December</codeph> までのエレメントを設定し、次に、パラメーターを指定せずに新しい UTCMonth オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> を作成します。次に、<codeph class="+ topic/ph pr-d/codeph ">getUTCMonth()</codeph> メソッドを呼び出し、<codeph class="+ topic/ph pr-d/codeph ">now</codeph> 作成時点の UTCMonth を取得します。次に、<codeph class="+ topic/ph pr-d/codeph ">setUTCMonth()</codeph> を呼び出して（<codeph class="+ topic/ph pr-d/codeph ">month</codeph> パラメーターに <codeph class="+ topic/ph pr-d/codeph ">0</codeph> を設定）から、<codeph class="+ topic/ph pr-d/codeph ">getUTCMonth()</codeph> を再度呼び出します。これにより、新しく設定された月を取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var UTCMonthLabels:Array = new Array("January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December");

var now:Date = new Date();
trace(now.getUTCMonth());
trace(UTCMonthLabels[now.getUTCMonth()]);

now.setUTCUTCMonth(0);
trace(now.getUTCMonth());              // 0
trace(UTCMonthLabels[now.getUTCMonth()]); // January
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getDay()" class="- topic/link "><linktext class="- topic/linktext ">getDay()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:setUTCSeconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setUTCSeconds</apiName><shortdesc class="- topic/shortdesc ">
	 秒、およびオプションでミリ秒を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setutcseconds, setutcseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 59 の整数です。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">0 ～ 999 の整数です。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 秒、およびオプションでミリ秒を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。
	 
	 </apiDesc><example conref="examples\Date.setUTCSeconds.1.as" class="- topic/example "> 次の例では、新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> をパラメーターの指定なしで作成します。次に、<codeph class="+ topic/ph pr-d/codeph ">getUTCSeconds()</codeph> メソッドを呼び出し、<codeph class="+ topic/ph pr-d/codeph ">now</codeph> 作成時点の秒を取得します。次に、<codeph class="+ topic/ph pr-d/codeph ">setUTCSeconds()</codeph> を呼び出して（<codeph class="+ topic/ph pr-d/codeph ">second</codeph> パラメーターに <codeph class="+ topic/ph pr-d/codeph ">0</codeph> を設定）から、<codeph class="+ topic/ph pr-d/codeph ">getUTCSeconds()</codeph> を再度呼び出します。これにより、新しく設定された秒を取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now.getUTCSeconds());

now.setUTCSeconds(0);
trace(now.getUTCSeconds()); // 0
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:toDateString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toDateString</apiName><shortdesc class="- topic/shortdesc ">
	 曜日と日付のみのストリング表現を返します。時刻またはタイムゾーンは含まれません。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">曜日と日付のみのストリング表現です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 曜日と日付のみのストリング表現を返します。時刻またはタイムゾーンは含まれません。次のメソッドと対照を成します。
	 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Date.toTimeString()</codeph> は時刻とタイムゾーンのみを返します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Date.toString()</codeph> は曜日と日付のみでなく、時刻とタイムゾーンも返します。</li></ul>
	 
	 </apiDesc><example conref="examples\Date.toDateString.1.as" class="- topic/example "> 次の例では、パラメーター設定なしで新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> 作成し、<codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> ステートメントの中で、次のメソッドを呼び出します。
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">toString</codeph> : <codeph class="+ topic/ph pr-d/codeph ">now</codeph> のすべてのパラメーター（<codeph class="+ topic/ph pr-d/codeph ">now</codeph> が作成されたときの）を表示します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">toDateString()</codeph> : <codeph class="+ topic/ph pr-d/codeph ">day</codeph>、<codeph class="+ topic/ph pr-d/codeph ">month</codeph>、<codeph class="+ topic/ph pr-d/codeph ">year</codeph> パラメーター（<codeph class="+ topic/ph pr-d/codeph ">now</codeph> が作成されたときの）を表示します。</li></ul>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now);
trace(now.toDateString());
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/toString()" class="- topic/link "><linktext class="- topic/linktext ">toString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:toLocaleDateString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleDateString</apiName><shortdesc class="- topic/shortdesc ">
	 曜日と日付のみのストリング表現を返します。時刻またはタイムゾーンは含まれません。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">曜日と日付のみの <codeph class="+ topic/ph pr-d/codeph ">String</codeph> 表現です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 曜日と日付のみのストリング表現を返します。時刻またはタイムゾーンは含まれません。このメソッドは、<codeph class="+ topic/ph pr-d/codeph ">Date.toDateString</codeph> と同じ値を返します。次のメソッドと対照を成します。
	 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Date.toTimeString()</codeph> は時刻とタイムゾーンのみを返します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Date.toString()</codeph> は曜日と日付のみでなく、時刻とタイムゾーンも返します。</li></ul>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/toDateString()" class="- topic/link "><linktext class="- topic/linktext ">toDateString()</linktext></link><link href="#Date/toTimeString()" class="- topic/link "><linktext class="- topic/linktext ">toTimeString()</linktext></link><link href="#Date/toString()" class="- topic/link "><linktext class="- topic/linktext ">toString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:toLocaleString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleString</apiName><shortdesc class="- topic/shortdesc ">
	 曜日、日付、時刻のストリング表現を、指定されたローカル時間で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトのストリング表現をローカルタイムゾーンで返します。
	 
	  
	  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 曜日、日付、時刻のストリング表現を、指定されたローカル時間で返します。同じ情報（およびタイムゾーン）をストリングの最後に年を付けて返す <codeph class="+ topic/ph pr-d/codeph ">Date.toString()</codeph> メソッドと対照を成します。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:toLocaleTimeString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleTimeString</apiName><shortdesc class="- topic/shortdesc ">
	 時刻のみのストリング表現を返します。曜日、日付、年、またはタイムゾーンは含まれません。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">時刻とタイムゾーンのみのストリング表現です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 時刻のみのストリング表現を返します。曜日、日付、年、またはタイムゾーンは含まれません。時刻とタイムゾーンを返す <codeph class="+ topic/ph pr-d/codeph ">Date.toTimeString()</codeph> メソッドと対照を成します。
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/toTimeString()" class="- topic/link "><linktext class="- topic/linktext ">toTimeString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 曜日、日付、時刻、およびタイムゾーンのストリング表現を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.tostring, tostring, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトのストリング表現です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 曜日、日付、時刻、およびタイムゾーンのストリング表現を返します。出力の日付形式は、次のとおりです。 
     <pre xml:space="preserve" class="- topic/pre ">
     Day Mon Date HH:MM:SS TZD YYYY
     </pre>
     <p class="- topic/p ">次に実際の使用例を示します。</p>
     <pre xml:space="preserve" class="- topic/pre ">
     Wed Apr 12 15:30:17 GMT-0700 2006
     </pre>
	 
	 </apiDesc><example conref="examples\Date.toString.1.as" class="- topic/example "> 次の例では、パラメーターを指定せずに Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> を作成し、次に、<codeph class="+ topic/ph pr-d/codeph ">toString</codeph> を <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> ステートメント内で呼び出します。これにより <codeph class="+ topic/ph pr-d/codeph ">now</codeph> のすべてのパラメーター（<codeph class="+ topic/ph pr-d/codeph ">now</codeph> を作成したときの）を表示します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">


var now:Date = new Date();
trace(now);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:toTimeString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toTimeString</apiName><shortdesc class="- topic/shortdesc ">
	 時刻とタイムゾーンのみのストリング表現を返します。曜日と日付は含まれません。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">時刻とタイムゾーンのみのストリング表現です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 時刻とタイムゾーンのみのストリング表現を返します。曜日と日付は含まれません。曜日と日付のみを返す <codeph class="+ topic/ph pr-d/codeph ">Date.toDateString()</codeph> メソッドと対照を成します。
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/toDateString()" class="- topic/link "><linktext class="- topic/linktext ">toDateString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:toUTCString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toUTCString</apiName><shortdesc class="- topic/shortdesc ">
	 曜日、日付、および時刻のストリング表現を世界時（UTC）で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの UTC のストリング表現です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 曜日、日付、および時刻のストリング表現を世界時（UTC）で返します。例えば、2005 年 2 月 1 日を <codeph class="+ topic/ph pr-d/codeph ">Tue Feb 1 00:00:00 2005 UTC</codeph> として返します。
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/toString()" class="- topic/link "><linktext class="- topic/linktext ">toString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトの 1970 年 1 月 1 日 0 時（世界時）からのミリ秒数を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.valueof, valueof, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトが表す 1970 年 1 月 1 日からのミリ秒数です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの 1970 年 1 月 1 日 0 時（世界時）からのミリ秒数を返します。
	 
	 </apiDesc><example conref="examples\Date.valueOf.1.as" class="- topic/example "> 次の例では、パラメーターを指定せずに新しい Date オブジェクト <codeph class="+ topic/ph pr-d/codeph ">now</codeph> を作成し、次に、<codeph class="+ topic/ph pr-d/codeph ">getTime()</codeph> メソッドを呼び出して、1970 年 1 月 1 日 0 時 から <codeph class="+ topic/ph pr-d/codeph ">now</codeph> が作成された時刻までのミリ秒数を取得します。次に、<codeph class="+ topic/ph pr-d/codeph ">valueOf()</codeph> を呼び出して同じ値を取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">


var now:Date = new Date();
trace(now.getTime());
trace(now.valueOf());
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="Date:AS3:dateUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dateUTC</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトの世界時（UTC）による日付（1 ～ 31 の整数）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの世界時（UTC）による日付（1 ～ 31 の整数）です。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCDate()" class="- topic/link "><linktext class="- topic/linktext ">getUTCDate()</linktext></link><link href="#Date/setUTCDate()" class="- topic/link "><linktext class="- topic/linktext ">setUTCDate()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:date:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">date</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトで指定されたローカル時間による日付（1 ～ 31 の整数）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトで指定されたローカル時間による日付（1 ～ 31 の整数）です。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。
	 
 	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getDate()" class="- topic/link "><linktext class="- topic/linktext ">getDate()</linktext></link><link href="#Date/setDate()" class="- topic/link "><linktext class="- topic/linktext ">setDate()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:dayUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dayUTC</apiName><shortdesc class="- topic/shortdesc ">
	 この Date の世界時（UTC）による曜日（日曜日は 0、月曜日は 1 など）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 この <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> の世界時（UTC）による曜日（日曜日は 0、月曜日は 1 など）です。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCDay()" class="- topic/link "><linktext class="- topic/linktext ">getUTCDay()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:day:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">day</apiName><shortdesc class="- topic/shortdesc ">
	 この Date で指定されたローカル時間による曜日（日曜日は 0、月曜日は 1 など）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 この <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> で指定されたローカル時間による曜日（日曜日は 0、月曜日は 1 など）です。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。
	 
 	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getDay()" class="- topic/link "><linktext class="- topic/linktext ">getDay()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:fullYearUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fullYearUTC</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトの世界時（UTC）による 4 桁の年です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの世界時（UTC）による 4 桁の年です。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCFullYear()" class="- topic/link "><linktext class="- topic/linktext ">getUTCFullYear()</linktext></link><link href="#Date/setUTCFullYear()" class="- topic/link "><linktext class="- topic/linktext ">setUTCFullYear()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:fullYear:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fullYear</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトのローカル時間による年（2000 などの 4 桁の数字）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトのローカル時間による年（2000 などの 4 桁の数字）です。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getFullYear()" class="- topic/link "><linktext class="- topic/linktext ">getFullYear()</linktext></link><link href="#Date/setFullYear()" class="- topic/link "><linktext class="- topic/linktext ">setFullYear()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:hoursUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hoursUTC</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトの世界時（UTC）による時（0 ～ 23 の整数）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの世界時（UTC）による時（0 ～ 23 の整数）です。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCHours()" class="- topic/link "><linktext class="- topic/linktext ">getUTCHours()</linktext></link><link href="#Date/setUTCHours()" class="- topic/link "><linktext class="- topic/linktext ">setUTCHours()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:hours:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hours</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトのローカル時間による時（0 ～ 23 の整数）部分です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトのローカル時間による時（0 ～ 23 の整数）部分です。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getHours()" class="- topic/link "><linktext class="- topic/linktext ">getHours()</linktext></link><link href="#Date/setHours()" class="- topic/link "><linktext class="- topic/linktext ">setHours()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:millisecondsUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">millisecondsUTC</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトの世界時（UTC）によるミリ秒（0 ～ 999 の整数）部分です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの世界時（UTC）によるミリ秒（0 ～ 999 の整数）部分です。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCMilliseconds()" class="- topic/link "><linktext class="- topic/linktext ">getUTCMilliseconds()</linktext></link><link href="#Date/setUTCMilliseconds()" class="- topic/link "><linktext class="- topic/linktext ">setUTCMilliseconds()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:milliseconds:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">milliseconds</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトのローカル時間によるミリ秒（0 ～ 999 の整数）部分です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトのローカル時間によるミリ秒（0 ～ 999 の整数）部分です。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getMilliseconds()" class="- topic/link "><linktext class="- topic/linktext ">getMilliseconds()</linktext></link><link href="#Date/setMilliseconds()" class="- topic/link "><linktext class="- topic/linktext ">setMilliseconds()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:minutesUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">minutesUTC</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトの世界時（UTC）による分（0 ～ 59 の整数）部分です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの世界時（UTC）による分（0 ～ 59 の整数）部分です。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCMinutes()" class="- topic/link "><linktext class="- topic/linktext ">getUTCMinutes()</linktext></link><link href="#Date/setUTCMinutes()" class="- topic/link "><linktext class="- topic/linktext ">setUTCMinutes()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:minutes:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">minutes</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトのローカル時間による分（0 ～ 59 の整数）部分です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトのローカル時間による分（0 ～ 59 の整数）部分です。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getMinutes()" class="- topic/link "><linktext class="- topic/linktext ">getMinutes()</linktext></link><link href="#Date/setMinutes()" class="- topic/link "><linktext class="- topic/linktext ">setMinutes()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:monthUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">monthUTC</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトの世界時（UTC）による月（0（1 月）～ 11（12 月））部分です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの世界時（UTC）による月（0（1 月）～ 11（12 月））部分です。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCMonth()" class="- topic/link "><linktext class="- topic/linktext ">getUTCMonth()</linktext></link><link href="#Date/setUTCMonth()" class="- topic/link "><linktext class="- topic/linktext ">setUTCMonth()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:month:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">month</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトのローカル時間による月（1 月は 0、2 月は 1 など）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトのローカル時間による月（1 月は 0、2 月は 1 など）です。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getMonth()" class="- topic/link "><linktext class="- topic/linktext ">getMonth()</linktext></link><link href="#Date/setMonth()" class="- topic/link "><linktext class="- topic/linktext ">setMonth()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:secondsUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">secondsUTC</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトの世界時（UTC）による秒（0 ～ 59 の整数）部分です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの世界時（UTC）による秒（0 ～ 59 の整数）部分です。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCSeconds()" class="- topic/link "><linktext class="- topic/linktext ">getUTCSeconds()</linktext></link><link href="#Date/setUTCSeconds()" class="- topic/link "><linktext class="- topic/linktext ">setUTCSeconds()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:seconds:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">seconds</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトのローカル時間による秒（0 ～ 59 の整数）部分です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトのローカル時間による秒（0 ～ 59 の整数）部分です。ローカル時間は、Flash ランタイムを実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getSeconds()" class="- topic/link "><linktext class="- topic/linktext ">getSeconds()</linktext></link><link href="#Date/setSeconds()" class="- topic/link "><linktext class="- topic/linktext ">setSeconds()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:time:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">time</apiName><shortdesc class="- topic/shortdesc ">
	 Date オブジェクトの 1970 年 1 月 1 日 0 時（世界時）からのミリ秒数です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトの 1970 年 1 月 1 日 0 時（世界時）からのミリ秒数です。このメソッドは、複数の <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> オブジェクトを比較する際に特定の時間を表すのに使用します。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getTime()" class="- topic/link "><linktext class="- topic/linktext ">getTime()</linktext></link><link href="#Date/setTime()" class="- topic/link "><linktext class="- topic/linktext ">setTime()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:timezoneOffset:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">timezoneOffset</apiName><shortdesc class="- topic/shortdesc ">
     世界時（UTC）とコンピューターのローカル時間の差（分単位）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     世界時（UTC）とコンピューターのローカル時間の差（分単位）です。つまり、この分の値をコンピューターのローカル時間に加算すると世界時と等しくなります。コンピューターの時刻が世界時より遅い時間に設定されている場合、戻り値は負の数になります。
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getTimezoneOffset()" class="- topic/link "><linktext class="- topic/linktext ">getTimezoneOffset()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:Object" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Object</apiName><shortdesc class="- topic/shortdesc ">
 Object クラスは、ActionScript ランタイムクラス階層のルートにあります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">object, object object, built-in class
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Object クラスは、<ph class="- topic/ph ">ActionScript</ph> クラス階層のルートにあります。 オブジェクトは、<codeph class="+ topic/ph pr-d/codeph ">new</codeph> 演算子シンタックスを使用したコンストラクターで作成され、プロパティを動的に割り当てることができます。<ph class="- topic/ph ">また、次のようにオブジェクトリテラルを割り当てて作成することもできます。</ph>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">var obj:Object = {a:"foo", b:"bar"}</codeblock>
 
 <p class="- topic/p ">明示的な基本クラスを宣言していないクラスはすべて、ビルトインの Object クラスを拡張します。</p>
 
 
 
 <p class="- topic/p ">Object クラスを使用して、<i class="+ topic/ph hi-d/i ">結合配列</i>を作成できます。基本的に、結合配列は Object クラスのインスタンスであり、キー値ペアはプロパティとその値という形式で表現されます。Object データタイプを使用して結合配列を宣言する別の理由は、そうすると、オブジェクトリテラルを使用して結合配列にデータを設定できるからです（ただし、宣言時のみ）。次の例では、オブジェクトリテラルを使用して結合配列を作成し、ドット演算子と配列アクセス演算子を両方とも使用して項目にアクセスします。その後、新しいプロパティを作成することで新しいキー値ペアを追加します。</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var myAssocArray:Object = {fname:"John", lname:"Public"};
 trace(myAssocArray.fname);     // John
 trace(myAssocArray["lname"]);  // Public
 myAssocArray.initial = "Q";
 trace(myAssocArray.initial);   // Q</codeblock> 
 
 <p class="- topic/p ">ActionScript 3.0 には、クラス継承とプロトタイプ継承という 2 つの種類の継承があります。</p>
 <ul class="- topic/ul "><li class="- topic/li ">クラス継承 - 主要な継承メカニズムであり、固定プロパティの継承をサポートします。固定プロパティは、クラス定義の一部として宣言される変数、定数、またはメソッドです。クラス宣言はすべて、クラスに関する情報が保存されている特別なクラスオブジェクトで表されます。 </li><li class="- topic/li ">プロトタイプ継承 - 旧バージョンの ActionScript ではこれが唯一の継承メカニズムでしたが、ActionScript 3.0 では代替の継承形式として機能します。各クラスには関連付けられたプロトタイプオブジェクトがあり、プロトタイプオブジェクトのプロパティは、そのクラスのすべてのインスタンス間で共有されます。クラスインスタンスを作成した場合、インスタンスはそのクラスのプロトタイプオブジェクトへの参照を持っています。この参照は、インスタンスと、関連するクラスのプロトタイプオブジェクトとの間のリンクとして機能します。実行時に、クラスインスタンスにプロパティが見つからない場合は、委譲先であるクラスのプロトタイプオブジェクトにそのプロパティがないかどうかがチェックされます。プロトタイプオブジェクトにもない場合は、Flash ランタイムがそのプロパティを見つけるまで、プロトタイプオブジェクトの委譲先でチェックを行うという処理が階層の上位に向かって連続的に継続されます。 </li></ul>
 
 <p class="- topic/p ">次の例に示すように、クラス継承とプロトタイプ継承は共存可能です。</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 class A {
     var x = 1
     prototype.px = 2
 }
 dynamic class B extends A {
     var y = 3
     prototype.py = 4
 }
  
 var b = new B()
 b.x // 1 via class inheritance
 b.px // 2 via prototype inheritance from A.prototype
 b.y // 3
 b.py // 4 via prototype inheritance from B.prototype
  
 B.prototype.px = 5
 b.px // now 5 because B.prototype hides A.prototype
  
 b.px = 6
 b.px // now 6 because b hides B.prototype</codeblock>
 
 <p class="- topic/p ">クラスの代わりに関数を使用すると、カスタムプロトタイプ継承ツリーを作成できます。クラスを使用すると、プロトタイプ継承ツリーはクラス継承ツリーをミラーします。ただし、プロトタイプオブジェクトは動的であるため、プロトタイプベースのプロパティを実行時に追加および削除できます。</p>
 
 </apiDesc><example conref="examples\ObjectExample.as" class="- topic/example "> 次の例は <codeph class="+ topic/ph pr-d/codeph ">ObjectExample</codeph> クラスと <codeph class="+ topic/ph pr-d/codeph ">Circle</codeph> クラスを使用して Object クラスの動的な特徴を紹介し、値オブジェクトを Shape オブジェクトに変換してステージ上の指定した x および y 座標に追加する方法を示しています。
 
 <p class="- topic/p ">この例では、値オブジェクト <codeph class="+ topic/ph pr-d/codeph ">firstInitObj</codeph> と <codeph class="+ topic/ph pr-d/codeph ">secondInitObj</codeph> を作成します。カスタムクラス <codeph class="+ topic/ph pr-d/codeph ">Circle</codeph> は、値オブジェクトを受け入れ、対応する内部プロパティを値オブジェクトに定義されたプロパティに設定しながらループします。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class ObjectExample extends Sprite {
        public function ObjectExample() {
            var firstInitObj:Object = new Object();
            firstInitObj.bgColor = 0xFF0000;
            firstInitObj.radius = 25;
            firstInitObj.xCenter = 25;
            firstInitObj.yCenter = 25;
                        
            var firstCircle:Circle = new Circle(firstInitObj);
            addChild(firstCircle);
            firstCircle.x = 50;
            firstCircle.y = 50;

            var secondInitObj:Object = {bgColor:0xCCCCCC, radius:50, xCenter:50, yCenter:50};

            var secondCircle:Circle = new Circle(secondInitObj);            
            addChild(secondCircle);
            secondCircle.x = 100;
            secondCircle.y = 100;
        }
        
    }
}

import flash.display.Shape;
    
class Circle extends Shape {
    public var bgColor:Number = 0xFFFFFF;
    public var radius:Number = 0;
    public var xCenter:Number = 0;
    public var yCenter:Number = 0;
        
    public function Circle(initObj:Object) {
        for(var i:String in initObj) {
            this[i] = initObj[i];
        }
        draw();
    }
        
    public function draw():void {
        graphics.beginFill(bgColor);
        graphics.drawCircle(xCenter, yCenter, radius);
        graphics.endFill();
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#Object/prototype" class="- topic/link "><linktext class="- topic/linktext ">prototype</linktext></link></related-links><apiConstructor id="Object:Object" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Object</apiName><shortdesc class="- topic/shortdesc ">
	 Object オブジェクトを作成し、そのオブジェクトのコンストラクターメソッドへの参照をオブジェクトの constructor プロパティに格納します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Object オブジェクトを作成し、そのオブジェクトのコンストラクターメソッドへの参照をオブジェクトの <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> プロパティに格納します。
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Object:AS3:hasOwnProperty" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasOwnProperty</apiName><shortdesc class="- topic/shortdesc ">
	 オブジェクトに指定されたプロパティが定義されているかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><category class="- topic/category ">Method
	 </category></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ターゲットオブジェクトに <codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターで指定されたプロパティがある場合、この値は <codeph class="+ topic/ph pr-d/codeph ">true</codeph> になり、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> になります。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">オブジェクトのプロパティです。	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 オブジェクトに指定されたプロパティが定義されているかどうかを示します。<codeph class="+ topic/ph pr-d/codeph ">true</codeph> が返されるのは、ターゲットオブジェクトに <codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターで指定されたストリングに一致するプロパティがある場合です。それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> が返されます。次のタイプのプロパティについては、オブジェクトがクラスオブジェクトではなく、クラスのインスタンスである場合に <codeph class="+ topic/ph pr-d/codeph ">true</codeph> が返されます。
	 <ul class="- topic/ul "><li class="- topic/li ">固定インスタンスプロパティ — オブジェクトのクラスで定義された、静的でない変数、定数、またはメソッド</li><li class="- topic/li ">継承された固定インスタンスプロパティ — オブジェクトのクラスが継承した変数、定数、またはメソッド</li><li class="- topic/li ">動的プロパティ — オブジェクトをインスタンス化した後に（クラス定義外で）オブジェクトに追加されたプロパティ 動的プロパティを追加するには、<codeph class="+ topic/ph pr-d/codeph ">dynamic</codeph> キーワードを使用して、オブジェクトを定義しているクラスを宣言する必要があります。</li></ul>
	 <p class="- topic/p ">次のタイプのプロパティについては、オブジェクトがクラスのインスタンスである場合に <codeph class="+ topic/ph pr-d/codeph ">false</codeph> が返されます。</p>
	 <ul class="- topic/ul "><li class="- topic/li ">静的プロパティ — オブジェクトを定義しているクラスまたはその任意のスーパークラスの静的キーワードを使用して定義された変数、定数、またはメソッド</li><li class="- topic/li ">プロトタイププロパティ — オブジェクトのプロトタイプチェーンの一部であるプロトタイプに定義されたプロパティ ActionScript 3.0 では、プロトタイプチェーンはクラス継承には使用されませんが、継承の代替形式として存在しています。例えば、Array クラスのインスタンスは、<codeph class="+ topic/ph pr-d/codeph ">valueOf()</codeph> メソッドにアクセスできます。それは、そのインスタンスが Array クラスのプロトタイプチェーンの一部である <codeph class="+ topic/ph pr-d/codeph ">Object.prototype</codeph> に存在するためです。Array のインスタンスに対して <codeph class="+ topic/ph pr-d/codeph ">valueOf()</codeph> を使用できますが、そのインスタンスに対する <codeph class="+ topic/ph pr-d/codeph ">hasOwnProperty("valueOf")</codeph> の戻り値は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> になります。</li></ul>
	 
	 <p class="- topic/p ">また、ActionScript 3.0 には、クラス定義の直接的な表現であるクラスオブジェクトがあります。<codeph class="+ topic/ph pr-d/codeph ">hasOwnProperty()</codeph> メソッドをクラスオブジェクトに対して呼び出すと、プロパティがそのクラスオブジェクトに定義された静的プロパティである場合にのみ、<codeph class="+ topic/ph pr-d/codeph ">true</codeph> が返されます。例えば、CustomArray という Array のサブクラスを作成し、CustomArray に <codeph class="+ topic/ph pr-d/codeph ">foo</codeph> という静的プロパティを定義した場合、<codeph class="+ topic/ph pr-d/codeph ">CustomArray.hasOwnProperty("foo")</codeph> を呼び出すと <codeph class="+ topic/ph pr-d/codeph ">true</codeph> が返されます。ただし、Array クラスに定義した静的プロパティ <codeph class="+ topic/ph pr-d/codeph ">DESCENDING</codeph> の場合、<codeph class="+ topic/ph pr-d/codeph ">CustomArray.hasOwnProperty("DESCENDING")</codeph> を呼び出すと、<codeph class="+ topic/ph pr-d/codeph ">false</codeph> が返されます。</p>
	 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>Object クラスのメソッドは、Object のプロトタイプに動的に作成されます。Object のサブクラスでこのメソッドを再定義する場合は、<codeph class="+ topic/ph pr-d/codeph ">override</codeph> キーワードを使用しないでください。例えば、Object のサブクラスでは、基本クラスのオーバーライドを使用する代わりに <codeph class="+ topic/ph pr-d/codeph ">function hasOwnProperty():Boolean</codeph> が実装されます。</p>
     
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Object:AS3:isPrototypeOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">isPrototypeOf</apiName><shortdesc class="- topic/shortdesc ">
	 Object クラスのインスタンスが、パラメーターとして指定されたオブジェクトのプロトタイプチェーン内にあるかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">theClass</codeph> パラメーターで指定されたオブジェクトのプロトタイプチェーン内にある場合、この値は <codeph class="+ topic/ph pr-d/codeph ">true</codeph> になり、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> になります。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">theClass</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定したオブジェクトが参照する可能性があるクラスです。  
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Object クラスのインスタンスが、パラメーターとして指定されたオブジェクトのプロトタイプチェーン内にあるかどうかを示します。このメソッドで <codeph class="+ topic/ph pr-d/codeph ">true</codeph> が返されるのは、オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">theClass</codeph> パラメーターで指定されたオブジェクトのプロトタイプチェーン内にある場合です。<codeph class="+ topic/ph pr-d/codeph ">false</codeph> が返されるのは、ターゲットオブジェクトが <codeph class="+ topic/ph pr-d/codeph ">theClass</codeph> オブジェクトのプロトタイプチェーン内にない場合、および <codeph class="+ topic/ph pr-d/codeph ">theClass</codeph> パラメーターがオブジェクトでない場合です。
	 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>Object クラスのメソッドは、Object のプロトタイプに動的に作成されます。Object のサブクラスでこのメソッドを再定義する場合は、<codeph class="+ topic/ph pr-d/codeph ">override</codeph> キーワードを使用しないでください。例えば、Object のサブクラスでは、基本クラスのオーバーライドを使用する代わりに <codeph class="+ topic/ph pr-d/codeph ">function isPrototypeOf():Boolean</codeph> が実装されます。</p>
     
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Object:AS3:propertyIsEnumerable" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">propertyIsEnumerable</apiName><shortdesc class="- topic/shortdesc ">
	 指定されたプロパティが存在し、列挙できるかどうかを示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates a generic object, adds a property to the object, then checks whether the object is enumerable. By way of contrast, the example also shows that a built-in property, the <code>Array.length</code> property, is not enumerable.
	 <listing>
	 var myObj:Object = new Object();
	 myObj.prop1 = "hello";
	 trace(myObj.propertyIsEnumerable("prop1")); // true
	 
	 var myArray = new Array();
	 trace(myArray.propertyIsEnumerable("length")); // false
	 </listing> 
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターで指定されたプロパティが列挙可能な場合、この値は <codeph class="+ topic/ph pr-d/codeph ">true</codeph> になり、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> になります。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">オブジェクトのプロパティです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 指定されたプロパティが存在し、列挙できるかどうかを示します。<codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合、このプロパティが存在し、<codeph class="+ topic/ph pr-d/codeph ">for..in</codeph> ループで列挙できます。このメソッドではターゲットオブジェクトのプロトタイプチェーンをチェックしないため、プロパティがターゲットオブジェクト上に存在している必要があります。
	 
	 <p class="- topic/p ">作成するプロパティは列挙できますが、ビルトインプロパティは通常列挙できません。</p>
	 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>Object クラスのメソッドは、Object のプロトタイプに動的に作成されます。Object のサブクラスでこのメソッドを再定義する場合は、<codeph class="+ topic/ph pr-d/codeph ">override</codeph> キーワードを使用しないでください。例えば、Object のサブクラスでは、基本クラスのオーバーライドを使用する代わりに <codeph class="+ topic/ph pr-d/codeph ">function propertyIsEnumerable():Boolean</codeph> が実装されます。</p>
     
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Object:setPropertyIsEnumerable" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setPropertyIsEnumerable</apiName><shortdesc class="- topic/shortdesc ">
     ループ処理に対するダイナミックプロパティの可用性を設定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">オブジェクトのプロパティです。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">isEnum</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定した場合、ダイナミックプロパティは <codeph class="+ topic/ph pr-d/codeph ">for..in</codeph> ループに現れず、メソッド <codeph class="+ topic/ph pr-d/codeph ">propertyIsEnumerable()</codeph> は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ループ処理に対するダイナミックプロパティの可用性を設定します。このメソッドではターゲットオブジェクトのプロトタイプチェーンをチェックしないため、プロパティがターゲットオブジェクト上に存在している必要があります。
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Object/propertyIsEnumerable()" class="- topic/link "><linktext class="- topic/linktext ">propertyIsEnumerable()</linktext></link></related-links></apiOperation><apiOperation id="Object:toLocaleString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleString</apiName><shortdesc class="- topic/shortdesc ">
	 ロケール固有の規則に従って書式設定された、このオブジェクトのストリング表現を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">object, object.tolocalestring, tolocalestring
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ロケールの規則に従って書式設定された、このオブジェクトのストリング表現。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ロケール固有の規則に従って書式設定された、このオブジェクトのストリング表現を返します。
	 
	 <p class="- topic/p ">このメソッドのデフォルトの実装では、ロケール固有の書式設定は行われず、<codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> と同じストリングが返されます。必要な場合は、ロケールに対応する独自の実装をサブクラスで提供する必要があります。</p>
	 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>Object クラスのメソッドは、Object のプロトタイプに動的に作成されます。Object のサブクラスでこのメソッドを再定義する場合は、<codeph class="+ topic/ph pr-d/codeph ">override</codeph> キーワードを使用しないでください。例えば、Object のサブクラスでは、基本クラスのオーバーライドを使用する代わりに <codeph class="+ topic/ph pr-d/codeph ">function toLocaleString():String</codeph> が実装されます。</p>
     
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Object/toString()" class="- topic/link "><linktext class="- topic/linktext ">Object.toString()</linktext></link></related-links></apiOperation><apiOperation id="Object:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 指定されたオブジェクトのストリング表現を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">object, object.tostring, tostring
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">オブジェクトのストリング表現です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 指定されたオブジェクトのストリング表現を返します。
	 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>Object クラスのメソッドは、Object のプロトタイプに動的に作成されます。Object のサブクラスでこのメソッドを再定義する場合は、<codeph class="+ topic/ph pr-d/codeph ">override</codeph> キーワードを使用しないでください。例えば、Object のサブクラスでは、基本クラスのオーバーライドを使用する代わりに <codeph class="+ topic/ph pr-d/codeph ">function toString():String</codeph> が実装されます。</p>
     
  	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Object:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
	 指定されたオブジェクトのプリミティブな値を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">object, object.valueof, valueof
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このオブジェクトのプリミティブ値、またはオブジェクト自体です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 指定されたオブジェクトのプリミティブな値を返します。このオブジェクトにプリミティブ値がない場合、オブジェクト自体が返されます。
	 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>Object クラスのメソッドは、Object のプロトタイプに動的に作成されます。Object のサブクラスでこのメソッドを再定義する場合は、<codeph class="+ topic/ph pr-d/codeph ">override</codeph> キーワードを使用しないでください。例えば、Object のサブクラスでは、基本クラスのオーバーライドを使用する代わりに <codeph class="+ topic/ph pr-d/codeph ">function valueOf():Object</codeph> が実装されます。</p>
     
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Object/toString()" class="- topic/link "><linktext class="- topic/linktext ">Object.toString()</linktext></link></related-links></apiOperation><apiValue id="Object:constructor" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">constructor</apiName><shortdesc class="- topic/shortdesc ">
	 指定されたオブジェクトインスタンスのクラスオブジェクトまたはコンストラクター関数への参照です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Object, Object.constructor, constructor
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 指定されたオブジェクトインスタンスのクラスオブジェクトまたはコンストラクター関数への参照です。オブジェクトがクラスのインスタンスの場合、<codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> プロパティはクラスオブジェクトへの参照を保持します。オブジェクトがコンストラクター関数で作成されている場合、<codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> プロパティはコンストラクター関数への参照を保持します。コンストラクター関数と、クラスのコンストラクターメソッドとを混同しないように注意してください。コンストラクター関数は、オブジェクトの作成に使用する Function オブジェクトで、クラスの定義に <codeph class="+ topic/ph pr-d/codeph ">class</codeph> キーワードを使用することの代わりになります。
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">class</codeph> キーワードを使用してクラスを定義する場合、クラスのプロトタイプオブジェクトには、クラスオブジェクトへの参照を保持する <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> という名前のプロパティが割り当てられます。クラスのインスタンスは、プロトタイプオブジェクトからこのプロパティを継承します。例えば、次のコードでは新しいクラス <codeph class="+ topic/ph pr-d/codeph ">A</codeph>、および <codeph class="+ topic/ph pr-d/codeph ">myA</codeph> という名前のクラスインスタンスを作成します。</p>
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 dynamic class A {}
	 trace(A.prototype.constructor);      // [class A]
	 trace(A.prototype.constructor == A); // true
	 var myA:A = new A();
	 trace(myA.constructor == A);         // true</codeblock>
	 
	 <p class="- topic/p ">上級ユーザーの場合は、オブジェクト作成用のテンプレートとして使える Function オブジェクトを定義するのに <codeph class="+ topic/ph pr-d/codeph ">function</codeph> キーワードを使用し、<codeph class="+ topic/ph pr-d/codeph ">class</codeph> キーワードを使用しない場合もあります。このような関数は、<codeph class="+ topic/ph pr-d/codeph ">new</codeph> 演算子と組み合わせてオブジェクトを作成できるため、コンストラクター関数と呼ばれています。<codeph class="+ topic/ph pr-d/codeph ">function</codeph> キーワードを使用してコンストラクター関数を作成する場合、そのプロトタイプオブジェクトには、コンストラクター関数への参照を保持する <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> という名前のプロパティが割り当てられます。次に、コンストラクター関数を使用してオブジェクトを作成すると、そのオブジェクトはコンストラクター関数のプロトタイプオブジェクトから <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> プロパティを継承します。例えば、次のコードでは新しいコンストラクター関数 <codeph class="+ topic/ph pr-d/codeph ">f</codeph>、および <codeph class="+ topic/ph pr-d/codeph ">myF</codeph> という名前のオブジェクトを作成します。</p>
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 function f() {}
	 trace(f.prototype.constructor);      // function Function() {}
	 trace(f.prototype.constructor == f); // true
	 var myF = new f();
	 trace(myF.constructor == f);         // true</codeblock>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b><codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> プロパティは書き込み可能です。つまり、ユーザーコードで割り当てステートメントを使用して値を変更できます。<codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> プロパティの値の変更はお勧めしませんが、<codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> プロパティの値に依存したコードを書く場合は、その値がリセットされないようにする必要があります。プロトタイプオブジェクト（例えば、<codeph class="+ topic/ph pr-d/codeph ">className.prototype.constructor</codeph>）を使用してプロパティにアクセスするときにのみ、この値を変更できます。</p>
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> プロパティにアクセスしている場合、コンパイルを strict モードで実行するとコンパイル時にエラーが発生します。これは、ランタイムのエンティティであるプロトタイプオブジェクトに constructor プロパティが依存しているからです。standard モードを使用するか、クラスの記述で "dynamic" を指定した場合、そのコードはエラーにならずに動作します。</p>     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Class" class="- topic/link "><linktext class="- topic/linktext ">クラス</linktext></link><link href="#Function" class="- topic/link "><linktext class="- topic/linktext ">関数</linktext></link><link href="#Object/prototype" class="- topic/link "><linktext class="- topic/linktext ">prototype</linktext></link></related-links></apiValue><apiValue id="Object:prototype" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">prototype</apiName><shortdesc class="- topic/shortdesc ">
	 クラスまたは関数オブジェクトのプロトタイプオブジェクトへの参照です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates a class named Shape and a subclass of Shape named Circle.
	 <listing version="2.0">
	 // Shape class defined in external file named Shape.as
	 class Shape {
	 	function Shape() {}
	 }
	 
	 // Circle class defined in external file named Circle.as
	 class Circle extends Shape{
	 	function Circle() {}
	 }
	 </listing>
	 The Circle class can be used to create two instances of Circle:
	 <listing version="2.0">
	 var oneCircle:Circle = new Circle();
	 var twoCircle:Circle = new Circle();
	 </listing>
	 The following trace statement shows that the <code>prototype</code> property of the Circle class points to its superclass Shape. The identifier <code>Shape</code> refers to the constructor function of the Shape class.
	 <listing version="2.0">
	 trace(Circle.prototype.constructor == Shape); // true
	 </listing>
	 The following trace statement shows how you can use the <code>prototype</code> property and the <code>__proto__</code> property together to move two levels up the inheritance hierarchy (or prototype chain). The <code>Circle.prototype.__proto__</code> property contains a reference to the superclass of the Shape class.
	 <listing version="2.0">
	 trace(Circle.prototype.__proto__ == Shape.prototype); // true
	 </listing>
	 
	 
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 クラスまたは関数オブジェクトのプロトタイプオブジェクトへの参照です。<codeph class="+ topic/ph pr-d/codeph ">prototype</codeph> プロパティは自動的に作成され、作成したクラスまたは関数オブジェクトに割り当てられます。このプロパティは、作成したクラスまたは関数に固有であるという点で静的です。例えば、クラスを作成すると、<codeph class="+ topic/ph pr-d/codeph ">prototype</codeph> プロパティの値は、そのクラスのすべてのインスタンスで共有され、クラスプロパティとしてのみアクセスできます。クラスのインスタンスは、<codeph class="+ topic/ph pr-d/codeph ">prototype</codeph> プロパティに直接アクセスできません。 
	 
     <p class="- topic/p ">クラスのプロトタイプオブジェクトは、そのクラスの特別なインスタンスであり、クラスのすべてのインスタンス間で状態を共有するためのメカニズムを提供します。実行時に、クラスインスタンスにプロパティが見つからない場合は、委譲先であるクラスのプロトタイプオブジェクトにそのプロパティがないかどうかがチェックされます。プロトタイプオブジェクトにもない場合は、Flash ランタイムがそのプロパティを見つけるまで、プロトタイプオブジェクトの委譲先でチェックを行うという処理が階層の上位に向かって連続的に継続されます。 </p>
	 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>ActionScript 3.0 では、プロトタイプ継承は主要な継承メカニズムではありません。ActionScript 3.0 での主要な継承メカニズムは、クラス定義の固定プロパティを継承するクラス継承です。</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:URIError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">URIError</apiName><shortdesc class="- topic/shortdesc ">
 URIError 例外は、グローバルな URI 処理関数のいずれかが定義に合わない方法で使用された場合にスローされます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, URIError
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 URIError 例外は、グローバルな URI 処理関数のいずれかが定義に合わない方法で使用された場合にスローされます。この例外は、<codeph class="+ topic/ph pr-d/codeph ">Socket.connect()</codeph> メソッドなど、有効な URI を期待する関数に対して無効な URI が指定された場合にスローされます。
 
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/connect()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.Socket.connect()</linktext></link></related-links><apiConstructor id="URIError:URIError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">URIError</apiName><shortdesc class="- topic/shortdesc ">
	 新しい URIError オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">URIError オブジェクトに関連付けられたメッセージです。  
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 新しい URIError オブジェクトを作成します。
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:SecurityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SecurityError</apiName><shortdesc class="- topic/shortdesc ">
 SecurityError 例外は、ある種のセキュリティ侵害が発生した場合にスローされます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, SecurityError
 
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <codeph class="+ topic/ph pr-d/codeph ">SecurityError</codeph> 例外は、ある種のセキュリティ侵害が発生した場合にスローされます。
 <p class="- topic/p ">
 セキュリティエラーの例：</p>
 <ul class="- topic/ul "><li class="- topic/li ">セキュリティサンドボックスの境界をまたいで、許可されていないプロパティアクセスやメソッド呼び出しを実行した場合</li><li class="- topic/li ">セキュリティサンドボックスで許可されていない URL にアクセスしようとした場合</li><li class="- topic/li ">許可されていないポート番号（例えば 65535 を超える番号）に対してソケット接続を確立しようとした場合</li><li class="- topic/li ">ユーザーのカメラやマイクにアクセスしようとしたが、そのアクセス要求がユーザーによって拒否された場合</li></ul>
 
 </apiDesc><example conref="examples\SecurityErrorExample.as" class="- topic/example "> 次の例は、許可される最大値よりも大きなポート番号に接続しようとした場合に、<codeph class="+ topic/ph pr-d/codeph ">SecurityError</codeph> エラーが <codeph class="+ topic/ph pr-d/codeph ">try...catch</codeph> ステートメント内で、どのように発生し、処理されるかを示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.net.Socket;

    public class SecurityErrorExample extends Sprite {

        public function SecurityErrorExample() {
            try {
                var host:String = "www.[yourDomain].com";
                var socket:Socket = new Socket();
                socket.connect(host, 65536);
            }
            catch(e:SecurityError) {
                trace(e);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="SecurityError:SecurityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SecurityError</apiName><shortdesc class="- topic/shortdesc ">
	 新しい SecurityError オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 新しい SecurityError オブジェクトを作成します。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:ReferenceError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ReferenceError</apiName><shortdesc class="- topic/shortdesc ">
 ReferenceError 例外は、sealed 指定された（動的でない）オブジェクトに対して未定義プロパティを参照しようとした場合にスローされます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, ReferenceError
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 ReferenceError 例外は、sealed 指定された（動的でない）オブジェクトに対して未定義プロパティを参照しようとした場合にスローされます。未定義の変数への参照があると ReferenceError 例外がスローされるので、潜在的なバグを発見し、アプリケーションコードのトラブルシューティングを行うのに役立ちます。
 <p class="- topic/p ">ただし、ダイナミッククラスの未定義のプロパティを参照することはできます。この場合、ReferenceError 例外はスローされません。詳細については、<codeph class="+ topic/ph pr-d/codeph ">dynamic</codeph> キーワードを参照してください。</p>
 
 </apiDesc><example conref="examples\ReferenceErrorExample.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">ReferenceError</codeph> 例外が <codeph class="+ topic/ph pr-d/codeph ">try..catch</codeph> ステートメント内でどのように生成され、処理されるかを示しています。 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class ReferenceErrorExample extends Sprite {

        public function ReferenceErrorExample() {
            try {
                this["someMember"] = true;
            }
            catch(e:ReferenceError) {
                trace(e);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="statements.html#dynamic" class="- topic/link "><linktext class="- topic/linktext ">dynamic キーワード</linktext></link></related-links><apiConstructor id="ReferenceError:ReferenceError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">ReferenceError</apiName><shortdesc class="- topic/shortdesc ">
	 新しい ReferenceError オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ReferenceError オブジェクトに関連付けられたメッセージです。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 新しい ReferenceError オブジェクトを作成します。
	 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:RangeError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">RangeError</apiName><shortdesc class="- topic/shortdesc ">
 RangeError 例外は、数値の値が許容される範囲内に収まらない場合にスローされます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, RangeError
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 RangeError 例外は、数値の値が許容される範囲内に収まらない場合にスローされます。配列の操作時に、存在しない配列アイテムのインデックス位置を参照すると、RangeError 例外がスローされます。<codeph class="+ topic/ph pr-d/codeph ">Number.toExponential()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Number.toPrecision()</codeph>、および <codeph class="+ topic/ph pr-d/codeph ">Number.toFixed()</codeph> メソッドの使用時には、引数が許容される数値の範囲内に収まらない場合に RangeError 例外がスローされます。<codeph class="+ topic/ph pr-d/codeph ">Number.toExponential()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Number.toPrecision()</codeph>、および <codeph class="+ topic/ph pr-d/codeph ">Number.toFixed()</codeph> コードを拡張して、RangeError がスローされないようにすることもできます。
 <p product="flash" class="- topic/p ">この例外は、次のような場合にもスローされます。
 <ul class="- topic/ul "><li class="- topic/li ">深度番号が必要な Flash ランタイム API が、無効な深度番号を指定して呼び出された場合</li><li class="- topic/li ">フレーム番号が必要な Flash ランタイム API が、無効なフレーム番号を指定して呼び出された場合</li><li class="- topic/li ">レイヤー番号が必要な Flash ランタイム API が、無効なレイヤー番号を指定して呼び出された場合</li></ul>
 </p>
 </apiDesc><example conref="examples\RangeErrorExample.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">RangeError</codeph> 例外が <codeph class="+ topic/ph pr-d/codeph ">try..catch</codeph> ステートメント内でどのように生成され、処理されるかを示しています。 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class RangeErrorExample extends Sprite {

        public function RangeErrorExample() {
            var child:Sprite = new Sprite();
            try {
                addChildAt(child, 1);
            }
            catch(e:RangeError) {
                trace(e);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#Number/toExponential()" class="- topic/link "><linktext class="- topic/linktext ">Number.toExponential()</linktext></link><link href="#Number/toPrecision()" class="- topic/link "><linktext class="- topic/linktext ">Number.toPrecision()</linktext></link><link href="#Number/toFixed()" class="- topic/link "><linktext class="- topic/linktext ">Number.toFixed()</linktext></link></related-links><apiConstructor id="RangeError:RangeError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">RangeError</apiName><shortdesc class="- topic/shortdesc ">
	 新しい RangeError オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">RangeError オブジェクトに関連付けられたメッセージを含みます。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 新しい RangeError オブジェクトを作成します。
	 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:int" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">int</apiName><shortdesc class="- topic/shortdesc ">
 int クラスを使用すると、32 ビットの符号付き整数を表すデータ型を操作できます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">int object, int, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 int クラスを使用すると、32 ビットの符号付き整数を表すデータ型を操作できます。int クラスで表される値の範囲は、-2,147,483,648（-2^31）～ 2,147,483,647（2^31-1）です。
 <p class="- topic/p ">int クラスのプロパティ（<codeph class="+ topic/ph pr-d/codeph ">MAX_VALUE</codeph> および <codeph class="+ topic/ph pr-d/codeph ">MIN_VALUE</codeph>）は静的であるため、プロパティを使用するためのオブジェクトは不要で、コンストラクターを使用する必要はありません。ただし、メソッドは静的でないため、メソッドを使用するためのオブジェクトは不要です。int オブジェクトは、int クラスコンストラクターを使用するか、int 型の変数を宣言してその変数にリテラル値を割り当てることによって作成することができます。</p>
 <p class="- topic/p ">int データ型は、ループカウンターを使用する場合や、浮動小数を使う必要のないその他の場合に役に立ちます。このデータ型は、Java や C++ の int データ型と似ています。int 型変数のデフォルト値は <codeph class="+ topic/ph pr-d/codeph ">0</codeph> です</p>
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">int.MAX_VALUE</codeph> を超える数値を処理する場合には、Number の使用を検討してください。  </p>
 <p class="- topic/p ">次の例では、int クラスの <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> メソッドを呼び出します。このメソッドは、ストリング <codeph class="+ topic/ph pr-d/codeph ">1234</codeph> を返します。 </p>
 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var myint:int = 1234;
 myint.toString();
 </codeblock>
 <p class="- topic/p ">次の例では、コンストラクターを使用せずに、<codeph class="+ topic/ph pr-d/codeph ">MIN_VALUE</codeph> プロパティの値を宣言された変数に割り当てます。</p>
 <pre xml:space="preserve" class="- topic/pre ">
 var smallest:int = int.MIN_VALUE;
 </pre> 
 
 </apiDesc><example conref="examples\IntExample.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">IntExample</codeph> クラスを使用して、int データ型をどのように処理し、有効性をチェックするかを示しています。
 <ol class="- topic/ol "><li class="- topic/li ">2 つの int 変数、<codeph class="+ topic/ph pr-d/codeph ">a</codeph> と <codeph class="+ topic/ph pr-d/codeph ">b</codeph> をコンストラクターで宣言します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">addIntegers()</codeph> メソッドで 2 つの int を追加します。</li><li class="- topic/li ">3 番目の int 変数 <codeph class="+ topic/ph pr-d/codeph ">c</codeph> に <codeph class="+ topic/ph pr-d/codeph ">parseInteger()</codeph> の結果を割り当て、渡されたストリングの有効性をチェックして、int データ型で受け取ることのできる範囲の整数値であることを確認します。有効な場合はストリングの整数値に相当する int を返します。</li><li class="- topic/li ">int 変数 <codeph class="+ topic/ph pr-d/codeph ">a</codeph> と <codeph class="+ topic/ph pr-d/codeph ">c</codeph> を、<codeph class="+ topic/ph pr-d/codeph ">addIntegers()</codeph> を使って同時に追加します。</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class IntExample extends Sprite {    
        public function IntExample() {
            var a:int = 512;
            var b:int = -128;
            
            trace(addIntegers(a, b)); // 384

            var c:int = parseInteger("32");
            
            trace(addIntegers(a, c)); // 544
        }
            
        public function addIntegers(a:int, b:int):int {
            return a + b;
        }
        
        public function parseInteger(str:String):int {
            var num:Number = parseInt(str);
            if(!isNaN(num) &amp;&amp; num &lt;= int.MAX_VALUE &amp;&amp; num >= int.MIN_VALUE) {
                return int(num);
            }
            
            return 0;
        }
        
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="uint.html" class="- topic/link "><linktext class="- topic/linktext ">uint</linktext></link><link href="Number.html" class="- topic/link "><linktext class="- topic/linktext ">Number</linktext></link></related-links><apiConstructor id="int:int" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">int</apiName><shortdesc class="- topic/shortdesc ">
	 コンストラクター。新しい int オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">new number, constructor
	  
	  </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">num</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">作成する int オブジェクトの数値、または数値に変換する値です。<codeph class="+ topic/ph pr-d/codeph ">value</codeph> が指定されなかった場合のデフォルト値は 0 です。
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 コンストラクター。新しい int オブジェクトを作成します。<codeph class="+ topic/ph pr-d/codeph ">int.toString()</codeph> と <codeph class="+ topic/ph pr-d/codeph ">int.valueOf()</codeph> を使用するには、int コンストラクターを使用する必要があります。int オブジェクトのプロパティを使用する場合は、コンストラクターを使用しません。<codeph class="+ topic/ph pr-d/codeph ">new int</codeph> コンストラクターは、主にプレースホルダーとして使用します。int オブジェクトは、パラメーターをプリミティブ値に変換する <codeph class="+ topic/ph pr-d/codeph ">int()</codeph> 関数とは異なります。
	 
 	 </apiDesc><example class="- topic/example ">次のコードは、新しい int オブジェクトを作成します。
	 <pre xml:space="preserve" class="- topic/pre ">
	 var n1:int = new int(3.4);
	 var n2:int = new int(-10);
	 </pre>
	 
	 
	 </example></apiConstructorDetail><related-links class="- topic/related-links "><link href="#int/toString()" class="- topic/link "><linktext class="- topic/linktext ">int.toString()</linktext></link><link href="#int/valueOf()" class="- topic/link "><linktext class="- topic/linktext ">int.valueOf()</linktext></link></related-links></apiConstructor><apiOperation id="int:AS3:toExponential" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toExponential</apiName><shortdesc class="- topic/shortdesc ">
      数値のストリング表現を指数表現で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> 引数が 0 ～ 20 の範囲を超える場合、例外がスローされます。
	  </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fractionDigits</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">必要な小数の桁数を表す 0 ～ 20 の整数です。
      </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      数値のストリング表現を指数表現で返します。ストリングには、<codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> パラメーターでの指定に従って小数点の前に 1 桁、小数点以下に最大 20 桁が含まれます。
      </apiDesc><example conref="examples\Number.toExponential.1.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">toExponential(2)</codeph> を使用して、ストリングを指数表現で返す方法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 315003;
trace(num.toExponential(2)); // 3.15e+5

</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="int:AS3:toFixed" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toFixed</apiName><shortdesc class="- topic/shortdesc ">
     数値のストリング表現を固定小数点表現で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> 引数が 0 ～ 20 の範囲を超える場合、例外がスローされます。
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fractionDigits</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">必要な小数の桁数を表す 0 ～ 20 の整数です。
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     数値のストリング表現を固定小数点表現で返します。固定小数点表現とは、<codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> パラメーターの指定に従って、小数点以下の特定の桁数をストリングに含めたものです。<codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> パラメーターの有効範囲は 0 ～ 20 です。 この範囲外の値を指定すると例外がスローされます。
     
     </apiDesc><example conref="examples\Number.toFixed.1.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">toFixed(3)</codeph> を使用して、小数点以下 3 桁に四捨五入したストリングを返す方法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 7.31343;
trace(num.toFixed(3)); // 7.313
</codeblock></example><example conref="examples\Number.toFixed.2.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">toFixed(2)</codeph> を使用して、末尾にゼロを追加したストリングを返す方法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 4;
trace(num.toFixed(2)); // 4.00
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="int:AS3:toPrecision" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toPrecision</apiName><shortdesc class="- topic/shortdesc ">
      数値のストリング表現を指数表現または固定小数点表現で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">precision</codeph> 引数が 1 ～ 21 の範囲を超える場合、例外がスローされます。
	  </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">precision</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">結果のストリングに必要な桁数を表す 1 ～ 21 の整数です。
      </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      数値のストリング表現を指数表現または固定小数点表現で返します。ストリングには、<codeph class="+ topic/ph pr-d/codeph ">precision</codeph> パラメーターで指定された桁数が含まれます。
      </apiDesc><example conref="examples\Number.toPrecision.1.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">toPrecision(3)</codeph> を使用して、ストリングを 3 桁のみで返す方法を示しています。指数表現は必要ないので、ストリングは固定小数点表現で表されます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 31.570;
trace(num.toPrecision(3)); // 31.6
</codeblock></example><example conref="examples\Number.toPrecision.2.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">toPrecision(3)</codeph> を使用して、ストリングを 3 桁のみで返す方法を示しています。結果の数値には固定小数点表現に必要な桁が含まれないため、ストリングは指数表現で表されます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 4000;
trace(num.toPrecision(3)); // 4.00e+3
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="int:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 int オブジェクトのストリング表現を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.tostring, tostring
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリングです。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">radix</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数値からストリングへの変換に使用する基数（2 ～ 36）を指定します。<codeph class="+ topic/ph pr-d/codeph ">radix</codeph> パラメーターを指定しない場合、デフォルト値は 10 です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">int</codeph> オブジェクトのストリング表現を返します。
	 
	 </apiDesc><example class="- topic/example ">次の例では、<codeph class="+ topic/ph pr-d/codeph ">radix</codeph> パラメーターに 2 および 8 を使用し、数値 9 に対応する表現を含むストリングを返します。
	 <pre xml:space="preserve" class="- topic/pre ">
	 var myint:int = new int(9);
	 trace(myint.toString(2)); // 1001
	 trace(myint.toString(8)); // 11
	 </pre>
	 <p class="- topic/p ">次の例では、結果が 16 進数値になります。</p>
	 <pre xml:space="preserve" class="- topic/pre ">
	 var r:int = new int(250);
	 var g:int = new int(128);
	 var b:int = new int(114);
	 var rgb:String = "0x"+ r.toString(16)+g.toString(16)+b.toString(16);
	 trace(rgb); // 0xfa8072
	 </pre>
	 
	 </example></apiOperationDetail></apiOperation><apiOperation id="int:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
	 指定された int オブジェクトのプリミティブな値を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.valueof, valueof, value of
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">int 値です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 指定された int オブジェクトのプリミティブな値を返します。
	 
 	 </apiDesc><example class="- topic/example ">次の例では、<codeph class="+ topic/ph pr-d/codeph ">numSocks</codeph> オブジェクトのプリミティブな値が結果として返されます。
	 <pre xml:space="preserve" class="- topic/pre ">
	 var numSocks:int = new int(2);
	 trace(numSocks.valueOf()); // 2
	 </pre>
	 
	 </example></apiOperationDetail></apiOperation><apiValue id="int:MAX_VALUE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MAX_VALUE</apiName><shortdesc class="- topic/shortdesc "> 
	表現可能な 32 ビット符号付き整数の最大値、2,147,483,647 です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">int, int.max_value, max_value, max value
	 
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">2147483647</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	表現可能な 32 ビット符号付き整数の最大値、2,147,483,647 です。
	
    </apiDesc><example class="- topic/example ">次の ActionScript は、表現可能な最大および最小の int オブジェクトを<ph outputclass="flashonly" class="- topic/ph ">出力パネルに</ph><ph outputclass="flexonly" class="- topic/ph ">ログファイルに</ph><ph outputclass="flashonly" class="- topic/ph ">表示し</ph><ph outputclass="flexonly" class="- topic/ph ">書き込み</ph>ます。
	<pre xml:space="preserve" class="- topic/pre ">
	trace("int.MIN_VALUE = "+int.MIN_VALUE);
	trace("int.MAX_VALUE = "+int.MAX_VALUE);
	</pre>
	<p class="- topic/p ">このコードは、次の値を<ph outputclass="flexonly" class="- topic/ph ">記録</ph><ph outputclass="flashonly" class="- topic/ph ">表示</ph>します。</p>
	<pre xml:space="preserve" class="- topic/pre ">
	int.MIN_VALUE = -2147483648
	int.MAX_VALUE = 2147483647
	</pre>
	
	
	</example></apiValueDetail></apiValue><apiValue id="int:MIN_VALUE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MIN_VALUE</apiName><shortdesc class="- topic/shortdesc ">
	 表現可能な 32 ビット符号付き整数の最小値、-2,147,483,648 です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">int, int.min_value, min_value, min value
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">-2147483648</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 表現可能な 32 ビット符号付き整数の最小値、-2,147,483,648 です。
	 
 	 </apiDesc><example class="- topic/example ">次の ActionScript は、表現可能な最大および最小の int オブジェクトを<ph outputclass="flashonly" class="- topic/ph ">出力パネルに</ph><ph outputclass="flexonly" class="- topic/ph ">ログファイルに</ph><ph outputclass="flashonly" class="- topic/ph ">表示し</ph><ph outputclass="flexonly" class="- topic/ph ">書き込み</ph>ます。
     <pre xml:space="preserve" class="- topic/pre ">
     trace("int.MIN_VALUE = "+int.MIN_VALUE);
     trace("int.MAX_VALUE = "+int.MAX_VALUE);
     </pre>
     <p class="- topic/p ">このコードは、次の値を<ph outputclass="flexonly" class="- topic/ph ">記録</ph><ph outputclass="flashonly" class="- topic/ph ">表示</ph>します。</p>
     <pre xml:space="preserve" class="- topic/pre ">
	int.MIN_VALUE = -2147483648
	int.MAX_VALUE = 2147483647
     </pre>
     
     
     </example></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:Number" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Number</apiName><shortdesc class="- topic/shortdesc ">
 IEEE-754 倍精度浮動小数点数を表すデータ型です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number object, number, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Number クラスは、<codeph class="+ topic/ph pr-d/codeph ">Number</codeph> データ型の単純なラッパーオブジェクトです。
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 IEEE-754 倍精度浮動小数点数を表すデータ型です。Number クラスに関連するメソッドとプロパティを使用してプリミティブな数値を処理することができます。このクラスは、JavaScript の Number クラスと同じです。
 <p class="- topic/p ">Number クラスのプロパティは静的であるため、プロパティを使用するためのオブジェクトは不要で、コンストラクターを使用する必要はありません。</p>
 <p class="- topic/p ">Number データ型は、倍精度 IEEE-754 規格に準拠します。 </p>
 <p class="- topic/p ">Number データ型は、浮動小数値を使用する必要がある場合に便利です。Flash ランタイムは Number よりも int および uint データ型を効率的に処理しますが、必要な値の範囲が int および uint の各データ型の有効範囲を超える場合は Number が便利です。Number クラスは、int および uint の各データ型の有効範囲を大きく超える整数値を表す場合に使用できます。整数値を表すのに int および uint では 32 ビットを使用できるのに対し、Number データ型は最大 53 ビットを使用することができます。Number 型として型指定されている変数のデフォルト値は <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>（非数）です。</p>
 
 </apiDesc><example conref="examples\NumberExample.as" class="- topic/example "> 次の例は、小数点以下 6 桁の数値を四捨五入によって小数点以下 2 桁の数値に切り詰める方法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;

    public class NumberExample extends Sprite {
        public function NumberExample() {
            var num:Number = new Number(10.456345);
            var str:String = num.toFixed(2);
            trace(num); // 10.456345
            trace(str); // 10.46
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="int.html" class="- topic/link "><linktext class="- topic/linktext ">int</linktext></link><link href="uint.html" class="- topic/link "><linktext class="- topic/linktext ">uint</linktext></link></related-links><apiConstructor id="Number:Number" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Number</apiName><shortdesc class="- topic/shortdesc ">
  指定された値を持つ Number オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">new number, constructor
   
   </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">num</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">作成する Number インスタンスの数値、または Number に変換する値です。<codeph class="+ topic/ph pr-d/codeph ">num</codeph> が指定されなかった場合のデフォルト値は 0 です。<codeph class="+ topic/ph pr-d/codeph ">num</codeph> パラメーターを指定せずにコンストラクターを使用することは、値を割り当てずに Number 型の変数を宣言すること（<codeph class="+ topic/ph pr-d/codeph ">var myNumber:Number</codeph> など）と同じではありません。この場合は、デフォルトが <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> になります。値の割り当てられていない数値は未定義で、<codeph class="+ topic/ph pr-d/codeph ">new Number(undefined)</codeph> と同等です。
  
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">指定された値を持つ Number を作成します。
  
  </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  指定された値を持つ Number オブジェクトを作成します。このコンストラクターの結果は、異なる型のオブジェクトをプリミティブな数値に変換する <codeph class="+ topic/ph pr-d/codeph ">Number()</codeph> パブリックネイティブ関数と同じものになります。
  
  </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="#Number/toString()" class="- topic/link "><linktext class="- topic/linktext ">Number.toString()</linktext></link><link href="#Number/valueOf()" class="- topic/link "><linktext class="- topic/linktext ">Number.valueOf()</linktext></link></related-links></apiConstructor><apiOperation id="Number:AS3:toExponential" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toExponential</apiName><shortdesc class="- topic/shortdesc ">
      数値のストリング表現を指数表現で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> 引数が 0 ～ 20 の範囲を超える場合、例外がスローされます。
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fractionDigits</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">必要な小数の桁数を表す 0 ～ 20 の整数です。
      </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      数値のストリング表現を指数表現で返します。ストリングには、<codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> パラメーターでの指定に従って小数点の前に 1 桁、小数点以下に最大 20 桁が含まれます。
      </apiDesc><example conref="examples\Number.toExponential.1.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">toExponential(2)</codeph> を使用して、ストリングを指数表現で返す方法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 315003;
trace(num.toExponential(2)); // 3.15e+5

</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Number:AS3:toFixed" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toFixed</apiName><shortdesc class="- topic/shortdesc ">
     数値のストリング表現を固定小数点表現で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> 引数が 0 ～ 20 の範囲を超える場合、例外がスローされます。
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fractionDigits</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">必要な小数の桁数を表す 0 ～ 20 の整数です。
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     数値のストリング表現を固定小数点表現で返します。固定小数点表現とは、<codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> パラメーターの指定に従って、小数点以下の特定の桁数をストリングに含めたものです。<codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> パラメーターの有効範囲は 0 ～ 20 です。 この範囲外の値を指定すると例外がスローされます。
     
     </apiDesc><example conref="examples\Number.toFixed.1.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">toFixed(3)</codeph> を使用して、小数点以下 3 桁に四捨五入したストリングを返す方法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 7.31343;
trace(num.toFixed(3)); // 7.313
</codeblock></example><example conref="examples\Number.toFixed.2.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">toFixed(2)</codeph> を使用して、末尾にゼロを追加したストリングを返す方法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 4;
trace(num.toFixed(2)); // 4.00
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Number:AS3:toPrecision" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toPrecision</apiName><shortdesc class="- topic/shortdesc ">
      数値のストリング表現を指数表現または固定小数点表現で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">precision</codeph> 引数が 1 ～ 21 の範囲を超える場合、例外がスローされます。
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">precision</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">結果のストリングに必要な桁数を表す 1 ～ 21 の整数です。
      </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      数値のストリング表現を指数表現または固定小数点表現で返します。ストリングには、<codeph class="+ topic/ph pr-d/codeph ">precision</codeph> パラメーターで指定された桁数が含まれます。
      </apiDesc><example conref="examples\Number.toPrecision.1.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">toPrecision(3)</codeph> を使用して、ストリングを 3 桁のみで返す方法を示しています。指数表現は必要ないので、ストリングは固定小数点表現で表されます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 31.570;
trace(num.toPrecision(3)); // 31.6
</codeblock></example><example conref="examples\Number.toPrecision.2.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">toPrecision(3)</codeph> を使用して、ストリングを 3 桁のみで返す方法を示しています。結果の数値には固定小数点表現に必要な桁が含まれないため、ストリングは指数表現で表されます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 4000;
trace(num.toPrecision(3)); // 4.00e+3
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Number:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
 指定された Number オブジェクト（myNumber）のストリング表現を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.tostring, tostring
  
  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Number オブジェクトの数値表現のストリングです。
 
 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">radix</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">10</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数値からストリングへの変換に使用する基数（2 ～ 36）を指定します。<codeph class="+ topic/ph pr-d/codeph ">radix</codeph> パラメーターを指定しない場合、デフォルト値は 10 です。
 
 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">基数として指定された基数パラメーターで、この Number のストリング表現を返します。
 
 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 指定された Number オブジェクト（<codeph class="+ topic/ph pr-d/codeph "> <i class="+ topic/ph hi-d/i ">myNumber</i> </codeph>）のストリング表現を返します。Number オブジェクトの値が先行ゼロを持たない小数（<codeph class="+ topic/ph pr-d/codeph ">.4</codeph> など）の場合、<codeph class="+ topic/ph pr-d/codeph ">Number.toString()</codeph> は先行ゼロを追加（<codeph class="+ topic/ph pr-d/codeph ">0.4</codeph>）します。
 
 
 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Number:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
 指定された Number オブジェクトのプリミティブな値のタイプを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.valueof, valueof, value of
  
  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Number オブジェクトのプリミティブな型の値です。
 
 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">指定された Number オブジェクトのプリミティブな値のタイプを返します。
 
 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 指定された Number オブジェクトのプリミティブな値のタイプを返します。
 
 </apiDesc></apiOperationDetail></apiOperation><apiValue id="Number:MAX_VALUE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MAX_VALUE</apiName><shortdesc class="- topic/shortdesc ">
  表現可能な最大の数値（倍精度 IEEE-754）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.max_value, max_value, max value
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">表現可能な最大の数値（倍精度 IEEE-754）です。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  表現可能な最大の数値（倍精度 IEEE-754）です。この数値は、約 1.79e+308 です。
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Number:MIN_VALUE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MIN_VALUE</apiName><shortdesc class="- topic/shortdesc ">
  0 以外の正の値で、表現可能な最小の数値（倍精度 IEEE-754）です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.min_value, min_value, min value
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">表現可能な最小の数値（倍精度 IEEE-754）です。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  0 以外の正の値で、表現可能な最小の数値（倍精度 IEEE-754）です。この数値は約 5e-324 です。全体的に表現可能な最小の数値は、実際には <codeph class="+ topic/ph pr-d/codeph ">-Number.MAX_VALUE</codeph> です。
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Number:NEGATIVE_INFINITY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NEGATIVE_INFINITY</apiName><shortdesc class="- topic/shortdesc ">
  負の無限大を表す IEEE-754 値を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.negative_infinity, negative_infinity, negative infinity, infinity
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">負の無限大を表す IEEE-754 値を指定します。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  負の無限大を表す IEEE-754 値を指定します。このプロパティの値は、<codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph> 定数の値と同じです。
  <p class="- topic/p ">
  負の無限大は、数学演算または関数が表現できる下限を超える負の値を返すときに返される特別な数値です。
  </p>
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Number:NaN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NaN</apiName><shortdesc class="- topic/shortdesc ">
  非数（NaN）を表す IEEE-754 の値です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.nan, nan, not a number
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">非数（NaN）を表す IEEE-754 の値です。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  非数（<codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>）を表す IEEE-754 の値です。
  
  </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="package.html#isNaN()" class="- topic/link "><linktext class="- topic/linktext ">isNaN() グローバル関数</linktext></link></related-links></apiValue><apiValue id="Number:POSITIVE_INFINITY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">POSITIVE_INFINITY</apiName><shortdesc class="- topic/shortdesc ">
  正の無限大を表す IEEE-754 値を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.positive_infinity, positive_infinity, positive infinity, infinity
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">正の無限大を表す IEEE-754 値を指定します。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  正の無限大を表す IEEE-754 値を指定します。このプロパティの値は、<codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> 定数の値と同じです。
  <p class="- topic/p ">
  正の無限大は、数学演算または関数が表現できる上限を超える正の値を返すときに返される特別な数値です。
  </p>
  
  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:DefinitionError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">DefinitionError</apiName><shortdesc class="- topic/shortdesc ">
 DefinitionError クラスは、既に定義されている識別子をユーザーコードで定義しようとしたときに発生するエラーを表します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
  
  </helpid></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">DefinitionError は、クラス、インターフェイス、または関数をコードで再定義しようとしたときにスローされます。
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 DefinitionError クラスは、既に定義されている識別子をユーザーコードで定義しようとしたときに発生するエラーを表します。このエラーは通常、クラス、インターフェイス、または関数を再定義するときに発生します。
 
 </apiDesc></apiClassifierDetail><apiConstructor id="DefinitionError:DefinitionError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">DefinitionError</apiName><shortdesc class="- topic/shortdesc ">
	 新しい DefinitionError オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 新しい DefinitionError オブジェクトを作成します。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:Function" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Function</apiName><shortdesc class="- topic/shortdesc ">
 関数は、ActionScript で呼び出すことのできるコードの基本単位です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Function, Function object, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Function クラスは、ビルトイン関数やユーザー定義関数を表す場合に使用されます。
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 関数は、ActionScript で呼び出すことのできるコードの基本単位です。ActionScript のユーザー定義関数とビルトイン関数は、どちらも Function クラスのインスタンスである Function オブジェクトで表されます。
 <p class="- topic/p ">クラスのメソッドは、Function オブジェクトとは少し異なります。メソッドは通常の関数オブジェクトとは異なり、関連のクラスオブジェクトと緊密にリンクされています。このため、メソッドまたはプロパティは、同一クラスのすべてのインスタンスで共有される定義を持ちます。メソッドをインスタンスから抽出して、"バインド" メソッドとして扱うことができます。元のインスタンスとのリンクは維持されます。バインドメソッドの場合、<codeph class="+ topic/ph pr-d/codeph ">this</codeph> キーワードで、メソッドの実装元オブジェクトを指します。関数については、<codeph class="+ topic/ph pr-d/codeph ">this</codeph> で、関数が呼び出されたときの関連オブジェクトを指します。</p>
 
 
 </apiDesc><example conref="examples\FunctionExample.as" class="- topic/example "> 次の例では、<codeph class="+ topic/ph pr-d/codeph ">FunctionExample</codeph>、<codeph class="+ topic/ph pr-d/codeph ">SimpleCollection</codeph>、<codeph class="+ topic/ph pr-d/codeph ">EventBroadcaster</codeph>、<codeph class="+ topic/ph pr-d/codeph ">EventListener</codeph> クラスを使用して、ActionScript での関数の様々な使用法を示しています。これを行うには、以下の手順を実行します。
 <ol class="- topic/ol "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">FunctionExample</codeph> のコンストラクターでは、<codeph class="+ topic/ph pr-d/codeph ">simpleColl</codeph> という名前のローカル変数を作成し、この変数に <codeph class="+ topic/ph pr-d/codeph ">1</codeph> から <codeph class="+ topic/ph pr-d/codeph ">8</codeph> までの整数の配列を作成します。 </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">simpleColl</codeph> オブジェクトを、<codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> を使用して出力します。</li><li class="- topic/li ">EventListener オブジェクト <codeph class="+ topic/ph pr-d/codeph ">listener</codeph> を <codeph class="+ topic/ph pr-d/codeph ">simpleColl</codeph> に追加します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">insert()</codeph> と <codeph class="+ topic/ph pr-d/codeph ">remove()</codeph> 関数が呼び出されると、リスナーはそれぞれのイベントに応答します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">greaterThanFourColl</codeph> という名前の 2 番目の SimpleCollection オブジェクトを作成します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">greaterThanFourColl</codeph> オブジェクトには、<codeph class="+ topic/ph pr-d/codeph ">simpleColl.select()</codeph> の結果（引数<codeph class="+ topic/ph pr-d/codeph ">4</codeph> と匿名関数を使用）が割り当てられます。SimpleCollection オブジェクトの select メソッドは、匿名関数パラメーターをブロックとして使用する内部イテレータです。</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    
    public class FunctionExample extends Sprite {
        public function FunctionExample() {
            var simpleColl:SimpleCollection;
            simpleColl = new SimpleCollection(0, 1, 2, 3, 4, 5, 6, 7, 8);
            trace(simpleColl);        // 0, 1, 2, 3, 4, 5, 6, 7, 8

            var listener:EventListener = new EventListener();
            simpleColl.addListener(listener);
            simpleColl.insert(9);        // itemInsertedHandler: 9
            simpleColl.remove(8);        // itemRemovedHandler: 8
            trace(simpleColl);        // 0, 1, 2, 3, 4, 5, 6, 7, 9

            var greaterThanFourColl:SimpleCollection;
            greaterThanFourColl = simpleColl.select(4, function(item:int, value:int){ return item > value });
            trace(greaterThanFourColl);    // 5, 6, 7, 9
        }
    }
}
    
import flash.display.Sprite;
    
class EventBroadcaster {
    private var listeners:Array;

    public function EventBroadcaster() {
        listeners = new Array();
    }
        
    public function addListener(obj:Object):void {
        removeListener(obj);
        listeners.push(obj);
    }
        
    public function removeListener(obj:Object):void {
        for(var i:uint = 0; i &lt; listeners.length; i++) {
            if(listeners[i] == obj) {
                listeners.splice(i, 1);
            }
        }
    }
    
    public function broadcastEvent(evnt:String, ...args):void {
        for(var i:uint = 0; i &lt; listeners.length; i++) {
            listeners[i][evnt].apply(listeners[i], args);
        }
    }    
}
    
class SimpleCollection extends EventBroadcaster {
    private var arr:Array;
        public function SimpleCollection(... args) {
        arr = (args.length == 1 &amp;&amp; !isNaN(args[0])) ? new Array(args[0]) : args;
    }
        
    public function insert(obj:Object):void {
        remove(obj);
        arr.push(obj);
        broadcastEvent("itemInsertedHandler", obj);
    }
        
    public function remove(obj:Object):void {
        for(var i:uint = 0; i &lt; arr.length; i++) {
            if(arr[i] == obj) {
                var obj:Object = arr.splice(i, 1)[0];
                broadcastEvent("itemRemovedHandler", obj);
            }
        }
    }

    public function select(val:int, fn:Function):SimpleCollection {
        var col:SimpleCollection = new SimpleCollection();
        for(var i:uint = 0; i &lt; arr.length; i++) {
            if(fn.call(this, arr[i], val)) {
                col.insert(arr[i]);
            }
        }
        return col;
    }
        
    public function toString():String {
        var str:String = new String();
        for(var i:uint = 0; i &lt; arr.length - 1; i++) {
            str += arr[i] + ", ";
        }
        str += arr[arr.length - 1];
        return str;
    }
}

class EventListener {
    public function EventListener() {
    }
    
    public function itemInsertedHandler(obj:Object):void {
        trace("itemInsertedHandler: " + obj);
    }
    
    public function itemRemovedHandler(obj:Object):void {
        trace("itemRemovedHandler: " + obj);        
    }
}
</codeblock></example></apiClassifierDetail><apiOperation id="Function:AS3:apply" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">apply</apiName><shortdesc class="- topic/shortdesc ">
  ActionScript が呼び出す関数内で使用される thisObject の値を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Function, Function.apply, apply
  
  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">呼び出された関数が指定する値です。
  
  
  </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisArg</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">関数の適用先のオブジェクトです。
  
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">argArray</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">エレメントをパラメーターとして関数に渡す配列です。
  
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Function を呼び出すオブジェクトインスタンスを指定します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  ActionScript が呼び出す関数内で使用される <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> の値を指定します。このメソッドは、呼び出される関数に渡されるパラメーターも指定します。<codeph class="+ topic/ph pr-d/codeph ">apply()</codeph> は Function クラスのメソッドなので、ActionScript 内のすべての Function オブジェクトのメソッドとしても使用できます。 
  <p class="- topic/p ">Array オブジェクトとしてパラメーターを指定します。カンマ区切りリストとしてパラメーターを指定する <codeph class="+ topic/ph pr-d/codeph ">Function.call()</codeph> とは異なります。これは、スクリプトが実際に実行されるまで、渡されるパラメーター数が不明である場合にも便利です。</p>
  <p class="- topic/p ">呼び出された関数が戻り値として指定する値を返します。</p>

  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Function/call()" class="- topic/link "><linktext class="- topic/linktext ">Function.call()</linktext></link></related-links></apiOperation><apiOperation id="Function:AS3:call" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">call</apiName><shortdesc class="- topic/shortdesc ">
  Function オブジェクトが表す関数を呼び出します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Function, Function.call, call
  
  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisArg</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">関数の本体内で <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> の値を示すオブジェクトです。
  
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">関数に渡されるパラメーターです。 指定できるパラメーターの数は 0 個以上です。
  
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">この Function を呼び出します。 
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Function オブジェクトが表す関数を呼び出します。ActionScript のすべての関数は Function オブジェクトによって表されるので、すべての関数はこのメソッドをサポートしています。 
  <p class="- topic/p ">ほとんどの場合、このメソッドの代わりに関数呼び出し演算子（<codeph class="+ topic/ph pr-d/codeph ">()</codeph>）を使用できます。関数呼び出し演算子を使うと、コードが簡潔になり読みやすくなります。このメソッドは、主に関数呼び出しの <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> パラメーターを明示的に制御する必要がある場合に役立ちます。通常、関数をオブジェクトのメソッドとして、関数の本体内で呼び出すと、次のように <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> が <codeph class="+ topic/ph pr-d/codeph ">myObject</codeph> に設定されます。</p>
  <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
  myObject.myMethod(1, 2, 3);
  </codeblock>
  <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> が他の異なる場所をポイントするように設定する場合もあります。例えば、オブジェクトのメソッドとして呼び出す関数が、実際には、そのオブジェクトのメソッドとして格納されていない場合などです。</p>
  <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
  myObject.myMethod.call(myOtherObject, 1, 2, 3); 
  </codeblock>
  <p class="- topic/p ">関数をオブジェクトのメソッドとしてではなく通常の関数として呼び出すには、値 <codeph class="+ topic/ph pr-d/codeph ">null</codeph> を、<codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> パラメーターに渡します。例えば、次の 2 つの関数呼び出しは同じです。</p>
  <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
  Math.sin(Math.PI / 4)
  Math.sin.call(null, Math.PI / 4)
  </codeblock>
  
  <p class="- topic/p ">呼び出された関数が戻り値として指定する値を返します。</p>
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Function/apply()" class="- topic/link "><linktext class="- topic/linktext ">Function.apply()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier languages="" id="globalClassifier:SyntaxError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SyntaxError</apiName><shortdesc class="- topic/shortdesc ">
 SyntaxError 例外は、次のいずれかの理由で解析エラーが発生した場合に、スローされます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, SyntaxError
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 SyntaxError 例外は、次のいずれかの理由で解析エラーが発生した場合に、スローされます。 
 <ul class="- topic/ul "><li class="- topic/li ">RegExp クラスで無効な正規表現を解析した場合。</li><li class="- topic/li ">XML クラスで無効な XML コンテンツを解析した場合。</li></ul>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="#RegExp" class="- topic/link "><linktext class="- topic/linktext ">RegExp クラス</linktext></link><link href="#XML" class="- topic/link "><linktext class="- topic/linktext ">XML クラス</linktext></link></related-links><apiConstructor id="SyntaxError:SyntaxError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SyntaxError</apiName><shortdesc class="- topic/shortdesc ">
	 新しい SyntaxError オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">SyntaxError オブジェクトに関連付けられたメッセージです。 
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 新しい SyntaxError オブジェクトを作成します。
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:XMLList" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">XMLList</apiName><shortdesc class="- topic/shortdesc ">
 XMLList クラスには、XML エレメントを操作するためのメソッドが含まれています。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 XMLList クラスには、XML エレメントを操作するためのメソッドが含まれています。XMLList オブジェクトは複数の XML オブジェクトまたはエレメント（複数のノードまたは属性を含む）を表すこともできるので、コレクション内のエレメント全体に対してメソッドを呼び出すことも、コレクション内のエレメントごとにメソッドを呼び出すことも可能です。
 <p class="- topic/p ">XMLList オブジェクトに XML エレメントが 1 つしかない場合は、XMLList オブジェクトに対して XML クラスのメソッドを直接使用できます。次の例で、<codeph class="+ topic/ph pr-d/codeph ">example.two</codeph> は長さ 1 の XMLList オブジェクトです。そのため、このオブジェクトにはどのような XML メソッドをも呼び出すことができます。</p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var example2 = &lt;example>&lt;two>2&lt;/two>&lt;/example>;</codeblock>
 <p class="- topic/p ">複数の XML オブジェクトを含んだ XMLList オブジェクトと共に XML クラスのメソッドを使用しようとすると、例外がスローされます。例外がスローされないようにするには、<codeph class="+ topic/ph pr-d/codeph ">for each..in</codeph> ステートメントなどを使用して XMLList コレクションに対して反復処理を行い、コレクション内の各 XML オブジェクトにメソッドを適用します。</p>
 
 </apiDesc><example conref="examples\XMLListExample.as" class="- topic/example "> 次の例は <codeph class="+ topic/ph pr-d/codeph ">books</codeph> という名前の XML プロパティを作成し、<codeph class="+ topic/ph pr-d/codeph ">book publisher</codeph> タグや <codeph class="+ topic/ph pr-d/codeph ">name</codeph> タグを持ついくつかのアイテムを <codeph class="+ topic/ph pr-d/codeph ">books</codeph> というノードに追加しています。次に <codeph class="+ topic/ph pr-d/codeph ">showBooksByPublisher()</codeph> メソッドを呼び出します。このメソッドは XMLList を受け取り、発行者 "Addison-Wesley" に一致する各アイテムを返します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class XMLListExample extends Sprite {
        private var books:XML;

        public function XMLListExample() {
            books =    &lt;books>
                        &lt;book publisher="Addison-Wesley" name="Design Patterns" />
                        &lt;book publisher="Addison-Wesley" name="The Pragmatic Programmer" />
                        &lt;book publisher="Addison-Wesley" name="Test Driven Development" />
                        &lt;book publisher="Addison-Wesley" name="Refactoring to Patterns" />
                        &lt;book publisher="O'Reilly Media" name="The Cathedral &amp; the Bazaar" />
                        &lt;book publisher="O'Reilly Media" name="Unit Test Frameworks" />
                    &lt;/books>;

            showBooksByPublisher("Addison-Wesley");
        }

        private function showBooksByPublisher(name:String):void {
            var results:XMLList = books.book.(@publisher == name);
            showList(results);
        }

        private function showList(list:XMLList):void {
            var item:XML;
            for each(item in list) {
                trace("item: " + item.toXMLString());
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#XML" class="- topic/link "><linktext class="- topic/linktext ">XML</linktext></link><link href="statements.html#for_each..in" class="- topic/link "><linktext class="- topic/linktext ">for each..in</linktext></link><link href="#Namespace" class="- topic/link "><linktext class="- topic/linktext ">Namespace</linktext></link><link href="#QName" class="- topic/link "><linktext class="- topic/linktext ">QName</linktext></link></related-links><apiConstructor id="XMLList:XMLList" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">XMLList</apiName><shortdesc class="- topic/shortdesc ">
	新しい XMLList オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList 
	</keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">トップレベル関数 <codeph class="+ topic/ph pr-d/codeph ">XMLList()</codeph> によって XMLList オブジェクトに変換可能なオブジェクトです。
	
	</apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	新しい XMLList オブジェクトを作成します。
	
	</apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="#global/XMLList()" class="- topic/link "><linktext class="- topic/linktext ">top-level XMLList() 関数</linktext></link></related-links></apiConstructor><apiOperation id="XMLList:AS3:attribute" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attribute</apiName><shortdesc class="- topic/shortdesc ">
	各 XML オブジェクトの attribute() メソッドを呼び出し、その結果の XMLList オブジェクトを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.attribute, attribute
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XML オブジェクトが一致する XMLList オブジェクト、または空の XMLList オブジェクトです。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">attributeName</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XMLList オブジェクト内に含める属性の名前です。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	各 XML オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">attribute()</codeph> メソッドを呼び出し、その結果の XMLList オブジェクトを返します。この結果は、指定された <codeph class="+ topic/ph pr-d/codeph ">attributeName</codeph> パラメーターに一致します。一致する XML オブジェクトがなかった場合、<codeph class="+ topic/ph pr-d/codeph ">attribute()</codeph> メソッドは空の XMLList オブジェクトを返します。
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/attribute()" class="- topic/link "><linktext class="- topic/linktext ">XML.attribute()</linktext></link><link href="#XML/attributes()" class="- topic/link "><linktext class="- topic/linktext ">XML.attributes()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:attributes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attributes</apiName><shortdesc class="- topic/shortdesc ">
	各 XML オブジェクトの attributes() メソッドを呼び出し、各 XML オブジェクトの属性の XMLList オブジェクトを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.attributes, attributes
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">各 XML オブジェクトの属性の XMLList オブジェクトです。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	各 XML オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">attributes()</codeph> メソッドを呼び出し、各 XML オブジェクトの属性の XMLList オブジェクトを返します。 
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/attribute()" class="- topic/link "><linktext class="- topic/linktext ">XML.attribute()</linktext></link><link href="#XML/attributes()" class="- topic/link "><linktext class="- topic/linktext ">XML.attributes()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:child" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">child</apiName><shortdesc class="- topic/shortdesc ">
	各 XML オブジェクトの child() メソッドを呼び出し、その結果を順に含む XMLList オブジェクトを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.child, child
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">入力パラメーターに一致する子ノードの XMLList オブジェクトです。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">propertyName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XML の子のエレメント名または整数です。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	各 XML オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">child()</codeph> メソッドを呼び出し、その結果を順に含む XMLList オブジェクトを返します。
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/child()" class="- topic/link "><linktext class="- topic/linktext ">XML.child()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:children" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">children</apiName><shortdesc class="- topic/shortdesc ">
	各 XML オブジェクトの children() メソッドを呼び出し、その結果を含む XMLList オブジェクトを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.children, children
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XML オブジェクト内の子（複数）の XMLList オブジェクトです。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	各 XML オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">children()</codeph> メソッドを呼び出し、その結果を含む XMLList オブジェクトを返します。
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/children()" class="- topic/link "><linktext class="- topic/linktext ">XML.children()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:comments" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">comments</apiName><shortdesc class="- topic/shortdesc ">
	各 XML オブジェクトの comments() メソッドを呼び出し、コメントの XMLList を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.comments, comments
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XML オブジェクト内のコメントの XMLList です。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	各 XML オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">comments()</codeph> メソッドを呼び出し、コメントの XMLList を返します。
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/comments()" class="- topic/link "><linktext class="- topic/linktext ">XML.comments()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:contains" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">contains</apiName><shortdesc class="- topic/shortdesc ">
	指定された value パラメーターに等しい XML オブジェクトが XMLList オブジェクトに含まれるかどうかを確認します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.contains, contains
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">value</codeph> パラメーターで宣言された XML オブジェクトが XMLList オブジェクトに含まれる場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph>、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">現在の XMLList オブジェクトと比較する XML オブジェクトです。 
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	指定された <codeph class="+ topic/ph pr-d/codeph ">value</codeph> パラメーターに等しい XML オブジェクトが XMLList オブジェクトに含まれるかどうかを確認します。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:copy" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">copy</apiName><shortdesc class="- topic/shortdesc ">
	指定された XMLList オブジェクトのコピーを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.copy, copy
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XMLList オブジェクトのコピーです。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	指定された XMLList オブジェクトのコピーを返します。コピーとはノードのツリー全体の複製です。コピーされた XML オブジェクトに親はないので、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> が返されます（<codeph class="+ topic/ph pr-d/codeph ">parent()</codeph> メソッドを呼び出した場合）。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:descendants" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">descendants</apiName><shortdesc class="- topic/shortdesc ">
	指定された name パラメーターを持つ XML オブジェクトのすべての子孫（子、孫、ひ孫など）を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.descendants, descendants
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">元のリスト内の一致する XML オブジェクトの子孫（子、孫など）の XMLList オブジェクトです。子孫がない場合は、空の XMLList オブジェクトを返します。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">*</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">照合するエレメントの名前です。
	
 	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	指定された <codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターを持つ XML オブジェクトのすべての子孫（子、孫、ひ孫など）を返します。<codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターには、QName オブジェクト、String データ型、または他の任意のデータ型（後で String データ型に変換されます）を指定できます。
	
	<p class="- topic/p ">すべての子孫を返すには、アスタリスク（~~）パラメーターを使用します。パラメーターを指定しない場合はストリング "~~" が渡され、XML オブジェクトのすべての子孫が返されます。</p>
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/descendants()" class="- topic/link "><linktext class="- topic/linktext ">XML.descendants()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:elements" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">elements</apiName><shortdesc class="- topic/shortdesc ">
	各 XML オブジェクトの elements() メソッドを呼び出します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.elements, elements
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一致する XML オブジェクトの子エレメントの XMLList オブジェクトです。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">*</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">照合するエレメントの名前です。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	各 XML オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">elements()</codeph> メソッドを呼び出します。<codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターが <codeph class="+ topic/ph pr-d/codeph ">descendants()</codeph> メソッドに渡されます。パラメーターが渡されなかった場合、ストリング "~~" が <codeph class="+ topic/ph pr-d/codeph ">descendants()</codeph> メソッドに渡されます。
	
 	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/elements()" class="- topic/link "><linktext class="- topic/linktext ">XML.elements()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:hasComplexContent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasComplexContent</apiName><shortdesc class="- topic/shortdesc ">
	XMLList オブジェクトに複合内容が含まれるかどうかを確認します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.hasComplexContent, hasComplexContent
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XMLList オブジェクトに複合内容が含まれる場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph>、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	XMLList オブジェクトに複合内容が含まれるかどうかを確認します。XMLList オブジェクトが空でなく、次のいずれかの条件が true の場合に、XMLList オブジェクトは複合内容を持つと見なされます。 
	
	<ul class="- topic/ul "><li class="- topic/li ">XMLList オブジェクトに、複合内容を持つ 1 つの XML アイテムが含まれている。</li><li class="- topic/li ">XMLList オブジェクトに複数のエレメントが含まれている。</li></ul>
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XMLList/hasSimpleContent()" class="- topic/link "><linktext class="- topic/linktext ">hasSimpleContent()</linktext></link><link href="#XML/hasComplexContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasComplexContent()</linktext></link><link href="#XML/hasSimpleContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasSimpleContent()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:hasOwnProperty" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasOwnProperty</apiName><shortdesc class="- topic/shortdesc ">
	p により指定されたプロパティをチェックします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.hasOwnProperty, hasOwnProperty
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">パラメーターが存在する場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph>、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">p</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">照合するプロパティです。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">p</codeph> により指定されたプロパティをチェックします。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:hasSimpleContent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasSimpleContent</apiName><shortdesc class="- topic/shortdesc ">
	XMLList オブジェクトに単純内容が含まれるかどうかを確認します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.hasSimpleContent, hasSimpleContent
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XMLList に単純内容が含まれる場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph>、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	XMLList オブジェクトに単純内容が含まれるかどうかを確認します。次のいずれかの条件が true の場合に、XMLList オブジェクトは単純内容を持つと見なされます。
	<ul class="- topic/ul "><li class="- topic/li ">XMLList オブジェクトが空である。</li><li class="- topic/li ">XMLList オブジェクトに、単純内容を持つ 1 つの XML アイテムが含まれている。</li><li class="- topic/li ">XMLList オブジェクトにエレメントが含まれていない。</li></ul>
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XMLList/hasComplexContent()" class="- topic/link "><linktext class="- topic/linktext ">hasComplexContent()</linktext></link><link href="#XML/hasComplexContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasComplexContent()</linktext></link><link href="#XML/hasSimpleContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasSimpleContent()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:length" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">length</apiName><shortdesc class="- topic/shortdesc ">
	XMLList オブジェクト内のプロパティ数を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.length, length
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XMLList オブジェクト内のプロパティ数です。 
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	XMLList オブジェクト内のプロパティ数を返します。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:normalize" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">normalize</apiName><shortdesc class="- topic/shortdesc ">
	隣接するテキストノードを結合し、XMLList 内のすべてのテキストノード、XMLList に含まれるすべての XML オブジェクト、および XMLList 内のすべての XML オブジェクトの子孫について、それぞれ空のテキストノードを削除します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.normalize, normalize
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">正規化した XMLList オブジェクトです。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	隣接するテキストノードを結合し、XMLList 内のすべてのテキストノード、XMLList に含まれるすべての XML オブジェクト、および XMLList 内のすべての XML オブジェクトの子孫について、それぞれ空のテキストノードを削除します。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:parent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">parent</apiName><shortdesc class="- topic/shortdesc ">
	XMLList オブジェクト内のすべてのアイテムが同じ親を持つ場合、XMLList オブジェクトの親を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.parent, parent
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">親 XML オブジェクトを返します。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	XMLList オブジェクト内のすべてのアイテムが同じ親を持つ場合、XMLList オブジェクトの親を返します。XMLList オブジェクトが親を持たないか、異なる親を持つ場合、メソッドは <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> を返します。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:processingInstructions" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">processingInstructions</apiName><shortdesc class="- topic/shortdesc ">
	name パラメーターを指定した場合は、その名前を持つ処理命令を含む XMLList オブジェクトのすべての子を一覧表示します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.processingInstructions, processingInstructions
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">各 XML オブジェクトの処理命令を含む XMLList オブジェクトです。
	
 	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">*</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">照合する処理命令の名前です。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターを指定した場合、その名前を持つ処理命令を含む XMLList オブジェクトのすべての子を一覧表示します。パラメーターを指定しなかった場合、メソッドは任意の処理命令を含む XMLList オブジェクトのすべての子を一覧表示します。
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/processingInstructions()" class="- topic/link "><linktext class="- topic/linktext ">XML.processingInstructions()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:propertyIsEnumerable" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">propertyIsEnumerable</apiName><shortdesc class="- topic/shortdesc ">
	XML オブジェクトに適用される for..in ステートメント内で反復処理されるプロパティセット内に、プロパティ p があるかどうかを確認します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.propertyIsEnumerable, propertyIsEnumerable
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">for..in</codeph> ステートメント内でプロパティを反復処理できる場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph>、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">p</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">確認するプロパティのインデックスです。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	プロパティ <codeph class="+ topic/ph pr-d/codeph ">p</codeph> が、XMLList オブジェクトに適用される <codeph class="+ topic/ph pr-d/codeph ">for..in</codeph> ステートメント内で反復処理されるプロパティセット内にあるかどうかを確認します。<codeph class="+ topic/ph pr-d/codeph ">true</codeph> が返るのは、<codeph class="+ topic/ph pr-d/codeph ">toNumber(p)</codeph> が 0 より大きいか等しく、かつ XMLList オブジェクトの長さより小さい場合のみです。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:text" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">text</apiName><shortdesc class="- topic/shortdesc ">
	各 XML オブジェクトの text() メソッドを呼び出し、その結果を含む XMLList オブジェクトを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.text, text
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XML テキストノードを表す XMLList オブジェクトのすべての XML プロパティの XMLList オブジェクトです。
	
 	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	各 XML オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">text()</codeph> メソッドを呼び出し、その結果を含む XMLList オブジェクトを返します。
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/text()" class="- topic/link "><linktext class="- topic/linktext ">XML.text()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	XMLList オブジェクト内のすべての XML オブジェクトのストリング表現を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.toString, toString 
	
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XML オブジェクトのストリング表現です。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	XMLList オブジェクト内のすべての XML オブジェクトのストリング表現を返します。この変換の規則は、XML オブジェクトに単純内容が含まれるか、複合内容が含まれるかによって決まります。
	
	<ul class="- topic/ul "><li class="- topic/li ">XML オブジェクトに単純内容が含まれる場合、<codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> は XML オブジェクトのストリング内容を返し、開始タグ、属性、名前空間宣言、および終了タグを削除します。</li></ul>
	
	<ul class="- topic/ul "><li class="- topic/li "> XML オブジェクトに複合内容が含まれる場合、<codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> は、開始タグ、属性、名前空間宣言および終了タグを含む XML オブジェクト全体を表す、XML エンコードされたストリングを返します。</li></ul>
	
	<p class="- topic/p ">XML オブジェクト全体を毎回返すには、<codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> メソッドを使用します。</p>
	
	
	</apiDesc><example conref="examples\XMLToStringExample1.as" class="- topic/example "> 次の例は、XML オブジェクトに単純内容が含まれる場合に <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> メソッドによって何が返されるかを示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var test:XML = &lt;type name="Joe">example&lt;/type>;
trace(test.toString()); //example
</codeblock></example><example conref="examples\XMLToStringExample2.as" class="- topic/example "> 次の例は、XML オブジェクトに複合内容が含まれる場合に <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> メソッドによって何が返されるかを示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var test:XML = 
&lt;type name="Joe">
    &lt;base name="Bob">&lt;/base>
    example
&lt;/type>;
trace(test.toString());
  // &lt;type name="Joe">
  // &lt;base name="Bob"/>
  // example
  // &lt;/type> 
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XMLList/hasComplexContent()" class="- topic/link "><linktext class="- topic/linktext ">hasComplexContent()</linktext></link><link href="#XMLList/hasSimpleContent()" class="- topic/link "><linktext class="- topic/linktext ">hasSimpleContent()</linktext></link><link href="#XMLList/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">toXMLString()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:toXMLString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toXMLString</apiName><shortdesc class="- topic/shortdesc ">
	XMLList オブジェクト内のすべての XML オブジェクトのストリング表現を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.toXMLString, toXMLString
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XML オブジェクトのストリング表現です。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	XMLList オブジェクト内のすべての XML オブジェクトのストリング表現を返します。<codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> メソッドとは異なり、<codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> メソッドは、XML オブジェクトに単純内容が含まれるか、複合内容が含まれるかに関係なく、常に XML オブジェクトの開始タグ、属性、および終了タグを返します。<codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> メソッドは、単純内容を持つ XML オブジェクトの開始タグ、属性、および終了タグを削除します。
	
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XMLList/toString()" class="- topic/link "><linktext class="- topic/linktext ">toString()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
	XMLList オブジェクトを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.valueOf, valueOf
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">現在の XMLList オブジェクトを返します。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	XMLList オブジェクトを返します。 
	
	</apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier languages="" id="globalClassifier:Boolean" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Boolean</apiName><shortdesc class="- topic/shortdesc ">
Boolean オブジェクトは、論理演算において true または false のいずれか 1 つの値を取るデータ型です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>Objects/Core/Boolean/
 
 </refpath></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
Boolean オブジェクトは、論理演算において <codeph class="+ topic/ph pr-d/codeph ">true</codeph> または <codeph class="+ topic/ph pr-d/codeph ">false</codeph> のいずれか 1 つの値を取るデータ型です。Boolean クラスを使用して、Boolean オブジェクトのプリミティブなデータ型またはストリング表現を調べることができます。 

<p class="- topic/p ">Boolean オブジェクトを作成するには、コンストラクターを使用するか、グローバル関数を使用するか、またはリテラル値を割り当てます。どの手法を使っても違いはありません。ActionScript 3.0 では、3 つの手法すべてが同等です（これは、Boolean オブジェクトが Boolean プリミティブ型と区別される JavaScript と異なる点です）。</p>

  <p class="- topic/p ">次の各行のコードは同じです。</p>
<codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var flag:Boolean = true;
var flag:Boolean = new Boolean(true);
var flag:Boolean = Boolean(true);
</codeblock>

 </apiDesc><example conref="examples\BooleanExample.as" class="- topic/example "> 次の例では、Boolean オブジェクトを切り替え、それぞれに対応する値を表示します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 package {
    import flash.display.Sprite;

    public class BooleanExample extends Sprite {
        private var flag:Boolean;

        public function BooleanExample() {
            trace(flag);    // false
            toggle();
            trace(flag);    // true
            toggle();
            trace(flag);    // false
        }
        
        private function toggle():void{
            flag = !flag;
        }
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="Boolean:Boolean" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Boolean</apiName><shortdesc class="- topic/shortdesc ">
 指定された値を持つ Boolean オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">new boolean, constructor
  
  </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">expression</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">任意の式です。 
 
 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 指定された値を持つ Boolean オブジェクトを作成します。<codeph class="+ topic/ph pr-d/codeph ">expression</codeph> パラメーターを省略すると、Boolean オブジェクトは値 <codeph class="+ topic/ph pr-d/codeph ">false</codeph> で初期化されます。<codeph class="+ topic/ph pr-d/codeph ">expression</codeph> パラメーターの値を指定すると、メソッドによって評価され、評価結果はグローバル <codeph class="+ topic/ph pr-d/codeph ">Boolean()</codeph> 関数の規則に従ってブール値として返されます。
 
 </apiDesc><example class="- topic/example ">次のコードは、値 <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に初期化された <codeph class="+ topic/ph pr-d/codeph ">myBoolean</codeph> という新しい Boolean オブジェクトを作成します。
 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var myBoolean:Boolean = new Boolean();
 </codeblock>
 
 </example></apiConstructorDetail><related-links class="- topic/related-links "><link href="package.html#Boolean()" class="- topic/link "><linktext class="- topic/linktext ">Boolean()グローバル関数</linktext></link></related-links></apiConstructor><apiOperation id="Boolean:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
      Boolean オブジェクトのストリング表現（"true" または "false"）を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">boolean.toString, toString
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">"true"</codeph> または <codeph class="+ topic/ph pr-d/codeph ">"false"</codeph> のストリングです。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Boolean オブジェクトのストリング表現（<codeph class="+ topic/ph pr-d/codeph ">"true"</codeph> または <codeph class="+ topic/ph pr-d/codeph ">"false"</codeph>）を返します。システム言語に関係なく、出力はローカライズされず、<codeph class="+ topic/ph pr-d/codeph ">"true"</codeph> または <codeph class="+ topic/ph pr-d/codeph ">"false"</codeph> のいずれかとなります。
     
     </apiDesc><example class="- topic/example ">次の例では、Boolean 型の変数を作成し、<codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> メソッドを使用して、値をストリングの配列で使用するストリングに変換します。
     <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var myStringArray:Array = new Array("yes", "could be");
     var myBool:Boolean = 0;
     myBool.toString();
     myStringArray.push(myBool);
     trace(myStringArray); // yes,could be,false
     </codeblock>
     
     
     </example></apiOperationDetail></apiOperation><apiOperation id="Boolean:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
     指定された Boolean オブジェクトの値が true の場合は true、それ以外の場合は false を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">boolean.valueOf, valueOf
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ブール値です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定された Boolean オブジェクトの値が true の場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph>、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。  
     
     </apiDesc><example class="- topic/example ">次の例では、このメソッドがどのように動作するかを示し、また、新しい Boolean オブジェクトの値が <codeph class="+ topic/ph pr-d/codeph ">false</codeph> であることを示しています。
     <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var myBool:Boolean = new Boolean();
     trace(myBool.valueOf());   // false
     myBool = (6==3+3);
     trace(myBool.valueOf());   // true  
     </codeblock>
     
     
     </example></apiOperationDetail></apiOperation></apiClassifier><apiClassifier languages="" id="globalClassifier:Error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Error</apiName><shortdesc class="- topic/shortdesc ">
 Error クラスには、スクリプトで発生したエラーに関する情報が含まれています。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">スクリプトでエラーが発生した場合に Error をスローします。
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Error クラスには、スクリプトで発生したエラーに関する情報が含まれています。ActionScript 3.0 アプリケーションの開発では、コンパイルしたコードを Flash ランタイムのデバッグ版で実行すると、Error 型またはサブクラスの例外がダイアログボックスに表示されるので、コードのトラブルシューティングに役立ちます。Error オブジェクトを作成するには、<codeph class="+ topic/ph pr-d/codeph ">Error</codeph> コンストラクター関数を使用します。一般には、<codeph class="+ topic/ph pr-d/codeph ">try</codeph> コードブロック内から新しい Error オブジェクトをスローします。そして、<codeph class="+ topic/ph pr-d/codeph ">catch</codeph> コードブロックまたは <codeph class="+ topic/ph pr-d/codeph ">finally</codeph> コードブロックでこれをキャッチします。
 <p class="- topic/p ">Error クラスのサブクラスを作成し、そのサブクラスのインスタンスをスローすることもできます。</p>
 
 </apiDesc><example conref="examples\ErrorExample.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">ErrorExample</codeph> クラスを使用して、カスタムエラーを作成する方法を示しています。これを行うには、以下の手順を実行します。
 <ol class="- topic/ol "><li class="- topic/li ">Array 型のローカル変数 <codeph class="+ topic/ph pr-d/codeph ">nullArray</codeph> を宣言しますが、新しい Array オブジェクトは作成されません。</li><li class="- topic/li ">コンストラクターはエラー処理コードセグメント内で <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> メソッドを使用して、初期化されていない配列に値をロードしようとします。このエラー処理セグメントは、<codeph class="+ topic/ph pr-d/codeph ">CustomError</codeph> クラス（<codeph class="+ topic/ph pr-d/codeph ">Error</codeph> の拡張）を使用してカスタムエラーをキャッチします。</li><li class="- topic/li ">CustomError がスローされると、コンストラクターはこれをキャッチし、<codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> ステートメントを使用してエラーメッセージを出力します。 </li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.display.Sprite;
    public class ErrorExample extends Sprite 
    {
        private var nullArray:Array;
        public function ErrorExample() 
        {
            try 
            {
                nullArray.push("item");
            }
            catch(e:Error) 
            {
                throw new CustomError("nullArray is null");
            }
        }
    }
}

class CustomError extends Error 
{
    public function CustomError(message:String) 
    {
        super(message);
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="Error:Error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Error</apiName><shortdesc class="- topic/shortdesc ">
	 新しい Error オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, constructor
	  
	  </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Error オブジェクトに関連付けられたストリング。このパラメーターはオプションです。 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">id</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">特定のエラーメッセージに関連付ける参照番号です。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">指定されたエラーメッセージを持つ新しい Error インスタンスを作成します。
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 新しい Error オブジェクトを作成します。<codeph class="+ topic/ph pr-d/codeph ">message</codeph> を指定した場合は、その値がオブジェクトの <codeph class="+ topic/ph pr-d/codeph ">Error.message</codeph> プロパティに割り当てられます。
	 
	 
	 </apiDesc><example conref="examples\Error.1.as" class="- topic/example "> 次の例では、新しい Error オブジェクト <codeph class="+ topic/ph pr-d/codeph ">err</codeph> を作成し、次に <codeph class="+ topic/ph pr-d/codeph ">Error()</codeph> コンストラクターを使用して、ストリング <codeph class="+ topic/ph pr-d/codeph ">"New Error Message"</codeph> を <codeph class="+ topic/ph pr-d/codeph ">err</codeph> に割り当てます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var err:Error = new Error();
trace(err.toString());    // Error

err = new Error("New Error Message");
trace(err.toString());    // Error: New Error Message
</codeblock></example></apiConstructorDetail><related-links class="- topic/related-links "><link href="statements.html#throw" class="- topic/link "><linktext class="- topic/linktext ">statements.html#throw</linktext></link><link href="statements.html#try..catch..finally" class="- topic/link "><linktext class="- topic/linktext ">statements.html#try..catch..finally</linktext></link></related-links></apiConstructor><apiOperation id="Error:getStackTrace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getStackTrace</apiName><shortdesc class="- topic/shortdesc ">
	 エラーの構築時にエラーの呼び出しスタックをストリングで返します（デバッグ版の Flash Player および AIR Debug Launcher（ADL）のみ）。デバッグ版の Flash Player または ADL を使用していない場合は、null を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, call stack
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">呼び出しスタックのストリング表現です。
	 
	 
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">エラーの呼び出しスタックを読み取り可能形式で返します。
	 
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 エラーの構築時にエラーの呼び出しスタックをストリングで返します（デバッグ版の Flash Player および AIR Debug Launcher（ADL）のみ）。デバッグ版の Flash Player または ADL を使用していない場合は、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> を返します。次の例に示されているように、戻り値の先頭行は、例外オブジェクトのストリング表現で、その後にはスタックトレースエレメントが続きます。
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 TypeError: null cannot be converted to an object
	     at com.xyz.OrderEntry.retrieveData(OrderEntry.as:995)
	     at com.xyz.OrderEntry.init(OrderEntry.as:200)
	     at com.xyz.OrderEntry.$construct(OrderEntry.as:148)
   	 </codeblock>
	 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Error:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	
	デフォルトでは "Error" というストリングを返します。Error.message プロパティが定義されている場合は、その値を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error.toString, toString
	 
	 </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">エラーメッセージです。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">エラーメッセージを返します。メッセージが定義されていない場合は、"Error" という語を返します。
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
	デフォルトでは <codeph class="+ topic/ph pr-d/codeph ">"Error"</codeph> というストリングを返します。<codeph class="+ topic/ph pr-d/codeph ">Error.message</codeph> プロパティが定義されている場合は、その値を返します。
	
    </apiDesc><example conref="examples\Error.toString.1.as" class="- topic/example "> 次の例では、新しい Error オブジェクト <codeph class="+ topic/ph pr-d/codeph ">err</codeph> を作成し、次に <codeph class="+ topic/ph pr-d/codeph ">Error()</codeph> コンストラクターを使用して、ストリング <codeph class="+ topic/ph pr-d/codeph ">"New Error Message"</codeph> を <codeph class="+ topic/ph pr-d/codeph ">err</codeph> に割り当てます。最後に、<codeph class="+ topic/ph pr-d/codeph ">message</codeph> プロパティには <codeph class="+ topic/ph pr-d/codeph ">"Another New Error Message"</codeph> が設定され、<codeph class="+ topic/ph pr-d/codeph ">"New Error Message"</codeph> は上書きされます。
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var err:Error = new Error();
trace(err.toString());    // Error

err = new Error("New Error Message");
trace(err.toString());    // Error: New Error Message

err.message = "Another New Error Message";
trace(err.toString());    // Error: Another New Error Message
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Error/message" class="- topic/link "><linktext class="- topic/linktext ">Error.message</linktext></link><link href="statements.html#throw" class="- topic/link "><linktext class="- topic/linktext ">statements.html#throw</linktext></link><link href="statements.html#try..catch..finally" class="- topic/link "><linktext class="- topic/linktext ">statements.html#try..catch..finally</linktext></link></related-links></apiOperation><apiValue id="Error:message" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">message</apiName><shortdesc class="- topic/shortdesc ">
	 Error オブジェクトに関連付けられたメッセージです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error.message, message
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Error インスタンスに関連付けられたエラーメッセージです。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Error オブジェクトに関連付けられたメッセージです。デフォルトでは、このプロパティの値は "<codeph class="+ topic/ph pr-d/codeph ">Error</codeph>" です。Error オブジェクトを作成する際に、<codeph class="+ topic/ph pr-d/codeph ">message</codeph> プロパティを指定するには、<codeph class="+ topic/ph pr-d/codeph ">Error</codeph> コンストラクター関数にエラーストリングを渡します。
	 
	 
 	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="statements.html#throw" class="- topic/link "><linktext class="- topic/linktext ">statements.html#throw</linktext></link><link href="statements.html#try..catch..finally" class="- topic/link "><linktext class="- topic/linktext ">statements.html#try..catch..finally</linktext></link></related-links></apiValue><apiValue id="Error:name" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
	  Error オブジェクトの名前です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error.name, name
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Error インスタンスの名前です。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	  Error オブジェクトの名前です。デフォルトでは、このプロパティの値は "<codeph class="+ topic/ph pr-d/codeph ">Error</codeph>" です。
	 
 	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="statements.html#throw" class="- topic/link "><linktext class="- topic/linktext ">statements.html#throw</linktext></link><link href="statements.html#try..catch..finally" class="- topic/link "><linktext class="- topic/linktext ">statements.html#try..catch..finally</linktext></link></related-links></apiValue><apiValue id="Error:errorID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">errorID</apiName><shortdesc class="- topic/shortdesc ">
     特定のエラーメッセージに関連付けられた参照番号です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error.errorID, errorID
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">エラー番号です。
     
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     特定のエラーメッセージに関連付けられた参照番号です。カスタム Error オブジェクトの場合、この番号はコンストラクターで提供される <codeph class="+ topic/ph pr-d/codeph ">id</codeph> パラメーターの値です。
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:TypeError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">TypeError</apiName><shortdesc class="- topic/shortdesc ">
 TypeError 例外は、オペランドの予期される型と実際の型が異なる場合にスローされます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, TypeError
 
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 TypeError 例外は、オペランドの予期される型と実際の型が異なる場合にスローされます。 
 <p class="- topic/p ">
 また、この例外は次の状況でスローされます。
  <ul class="- topic/ul "><li class="- topic/li ">関数またはメソッドの実際のパラメーターを、形式上必要とされるパラメーターの型に強制的に変換できない場合。</li><li class="- topic/li ">変数に割り当てられた値を、その変数の型に強制的に変換できない場合。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">is</codeph> または <codeph class="+ topic/ph pr-d/codeph ">instanceof</codeph> 演算子の右辺が有効な型でない場合。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">super</codeph> キーワードの使用方法が不正な場合。</li><li class="- topic/li ">プロパティへの参照が複数のバインディングに解決され、結果があいまいである場合</li><li class="- topic/li ">互換性のないオブジェクトに対してメソッドが呼び出された場合。例えば、RegExp クラスのメソッドが汎用オブジェクトに移植されて呼び出された場合などに TypeError 例外がスローされます。</li></ul>
 </p>
 
 </apiDesc><example conref="examples\TypeErrorExample.as" class="- topic/example "> 次の例は、TypeError 例外が <codeph class="+ topic/ph pr-d/codeph ">try..catch</codeph> ステートメント内でどのように生成され、処理されるかを示しています。 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.DisplayObject;
    import flash.display.Sprite;

    public class TypeErrorExample extends Sprite {
        public function TypeErrorExample() {
            try {
                var child:Object = new Object();
                addChild(DisplayObject(child));
            }
            catch(e:TypeError) {
                trace(e);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="operators.html#is" class="- topic/link "><linktext class="- topic/linktext ">is 演算子</linktext></link><link href="operators.html#instanceof" class="- topic/link "><linktext class="- topic/linktext ">instanceof 演算子</linktext></link><link href="statements.html#super" class="- topic/link "><linktext class="- topic/linktext ">super ステートメント</linktext></link><link href="#RegExp" class="- topic/link "><linktext class="- topic/linktext ">RegExp クラス</linktext></link></related-links><apiConstructor id="TypeError:TypeError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">TypeError</apiName><shortdesc class="- topic/shortdesc ">
	 新しい TypeError オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">TypeError オブジェクトに関連付けられたメッセージです。 
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 新しい TypeError オブジェクトを作成します。
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:arguments" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">arguments</apiName><shortdesc class="- topic/shortdesc ">
 arguments オブジェクトは、関数の引数を保存したり、引数にアクセスする場合に使用されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="8" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">arguments オブジェクトは、関数の引数を保存したり、引数にアクセスする場合に使用されます。
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 arguments オブジェクトは、関数の引数を保存したり、引数にアクセスする場合に使用されます。関数の本体に含まれる場合、arguments オブジェクトにはローカルの arguments 変数を使用してアクセスできます。
 <p class="- topic/p ">
 引数は配列エレメントとして保存され、最初の引数は <codeph class="+ topic/ph pr-d/codeph ">arguments[0]</codeph> として、2 番目の引数は <codeph class="+ topic/ph pr-d/codeph ">arguments[1]</codeph> のようにアクセスされます。<codeph class="+ topic/ph pr-d/codeph ">arguments.length</codeph> プロパティは、関数に渡される引数の数を示します。関数で宣言された数と異なる数の引数が渡される場合もあります。
 </p>
 <p class="- topic/p ">
 以前のバージョンの ActionScript とは異なり、ActionScript 3.0 には <codeph class="+ topic/ph pr-d/codeph ">arguments.caller</codeph> プロパティがありません。現在の関数を呼び出した関数への参照を取得するには、その関数への参照を引数として渡す必要があります。このテクニックの例については、<codeph class="+ topic/ph pr-d/codeph ">arguments.callee</codeph> の例を参照してください。
 </p>
 <p class="- topic/p ">ActionScript 3.0 では、新しく <codeph class="+ topic/ph pr-d/codeph ">...(rest)</codeph> キーワードが含まれています。arguments クラスではなく、このステートメントを使用することをお勧めします。</p>
 
 </apiDesc><example conref="examples\ArgumentsExample.as" class="- topic/example "> 次の例では、様々な <codeph class="+ topic/ph pr-d/codeph ">arguments</codeph> プロパティ（<codeph class="+ topic/ph pr-d/codeph ">callee</codeph> や <codeph class="+ topic/ph pr-d/codeph ">length</codeph> など）の使用方法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    
    public class ArgumentsExample extends Sprite {
        public function ArgumentsExample() {
                println("Hello World");
        }
        
        public function println(str:String):void {
            trace(arguments.callee == this.println); // true
            trace(arguments.length);                 // 1
            trace(arguments[0]);                     // Hello World
            trace(str);                                // Hello World
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="statements.html#..._(rest)_parameter" class="- topic/link "><linktext class="- topic/linktext ">...(rest)</linktext></link><link href="#Function" class="- topic/link "><linktext class="- topic/linktext ">関数</linktext></link></related-links><apiValue id="arguments:callee" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">callee</apiName><shortdesc class="- topic/shortdesc ">
	 現在実行中の関数への参照です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="8" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Function</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">現在実行中の関数への参照です。
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 現在実行中の関数への参照です。
	 
	 </apiDesc><example conref="examples\arguments.callee.1.as" class="- topic/example "> 次のコードは、<codeph class="+ topic/ph pr-d/codeph ">secondFunction()</codeph> という名前の関数を呼び出す関数への参照を取得します。<codeph class="+ topic/ph pr-d/codeph ">firstFunction()</codeph> 関数は、ブール値引数 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を持ち、<codeph class="+ topic/ph pr-d/codeph ">secondFunction()</codeph> が <codeph class="+ topic/ph pr-d/codeph ">firstFunction()</codeph> を正常に呼び出していることを示して、各関数が他方の関数を相互に呼び出すことによる無限ループを防ぎます。
  
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">callSecond</codeph> パラメーターが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> であるため、<codeph class="+ topic/ph pr-d/codeph ">firstFunction()</codeph> は <codeph class="+ topic/ph pr-d/codeph ">secondFunction()</codeph> を呼び出し、自身への参照を唯一の引数として渡します。関数 <codeph class="+ topic/ph pr-d/codeph ">secondFunction()</codeph> は、データ型が Function で、<codeph class="+ topic/ph pr-d/codeph ">caller</codeph> という名前のパラメーターを使用して、この引数を受け取り、保存します。次に、<codeph class="+ topic/ph pr-d/codeph ">secondFunction()</codeph> 内から、<codeph class="+ topic/ph pr-d/codeph ">caller</codeph> パラメーターで <codeph class="+ topic/ph pr-d/codeph ">firstFunction</codeph> 関数を呼び出します。ただし、このとき <codeph class="+ topic/ph pr-d/codeph ">callSecond</codeph> 引数を <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定します。</p>
 <p class="- topic/p ">実行が <codeph class="+ topic/ph pr-d/codeph ">firstFunction()</codeph> に戻ると、<codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> ステートメントが実行されます。これは、<codeph class="+ topic/ph pr-d/codeph ">callSecond</codeph> が <codeph class="+ topic/ph pr-d/codeph ">false</codeph> であるためです。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
  package {
    import flash.display.Sprite;
    
    public class ArgumentsExample extends Sprite {
        private var count:int = 1;
        
        public function ArgumentsExample() {
            firstFunction(true);
        }

        public function firstFunction(callSecond:Boolean) {
            trace(count + ": firstFunction");
            if(callSecond) {
                secondFunction(arguments.callee);
            }
            else {
                trace("CALLS STOPPED");
            }
        }

        public function secondFunction(caller:Function) {
            trace(count + ": secondFunction\n");
            count++;
            caller(false);
        }        
    }
} 
</codeblock></example></apiValueDetail></apiValue><apiValue id="arguments:length" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">length</apiName><shortdesc class="- topic/shortdesc ">
	 関数に渡される引数の数です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="8" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">関数に渡されるパラメーターの数です。
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 関数に渡される引数の数です。関数で宣言された数よりも増減する場合があります。
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:String" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">String</apiName><shortdesc class="- topic/shortdesc ">
 String クラスは、文字のストリングを表すデータ型です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string object, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 String クラスは、文字のストリングを表すデータ型です。String クラスは、プリミティブなストリング値の型の操作を可能にするメソッドとプロパティを提供します。<codeph class="+ topic/ph pr-d/codeph ">String()</codeph> 関数を使用して任意のオブジェクトの値を String データ型オブジェクトに変換できます。 
 <p class="- topic/p ">
 すべてのストリングインデックスはゼロから始まるため、各ストリング <codeph class="+ topic/ph pr-d/codeph ">x</codeph> の最終文字のインデックスは <codeph class="+ topic/ph pr-d/codeph ">x.length - 1</codeph> のようになります。
 </p><p class="- topic/p ">
 コンストラクターメソッド <codeph class="+ topic/ph pr-d/codeph ">new String()</codeph> を使用して新しいストリング変数を作成するか、または単にストリングリテラル値を割り当てるかにかかわらず、String クラスのメソッドをどれでも呼び出すことができます。旧バージョンの ActionScript とは異なり、String クラスのメソッドには、コンストラクターを使用するか、グローバル関数を使用するか、または単にストリングリテラル値を割り当てるかによる違いはありません。次の各行のコードは同じです。
 </p>
 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var str:String = new String("foo");
 var str:String = "foo";
 var str:String = String("foo");</codeblock>
 <p class="- topic/p ">ストリング変数を <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> に設定すると、Flash ランタイムにより <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> が <codeph class="+ topic/ph pr-d/codeph ">null</codeph> に型変換されます。次に例を示します。</p>
 <pre xml:space="preserve" class="- topic/pre ">
 var s:String = undefined;</pre>
 このステートメントでは、値は <codeph class="+ topic/ph pr-d/codeph ">null</codeph> に設定されます。<codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> には設定されません。<codeph class="+ topic/ph pr-d/codeph ">String()</codeph> 関数は、<codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> を使用する必要がある場合に使用します。
 </apiDesc><example conref="examples\StringExample.as" class="- topic/example "> 次の例では、StringExample クラスと StringHelper クラスを使用して、String クラスの様々なメソッドの使用法を示します。ここでは以下の手順を実行します。
 <ol class="- topic/ol "><li class="- topic/li ">StringExample のコンストラクターは、いくつかのローカルの String インスタンスを宣言します。これらのインスタンスは様々なストリングと新しい StringHelper オブジェクトにより初期化されます。</li><li class="- topic/li ">StringHelper クラスには次のメソッドがあります。
    <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> : String メソッドの <codeph class="+ topic/ph pr-d/codeph ">split()</codeph> と <codeph class="+ topic/ph pr-d/codeph ">join()</codeph> を呼び出して、新しいストリングに渡されるストリングのサブストリングを削除します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">trim()</codeph> : 渡されたストリングを使用して <codeph class="+ topic/ph pr-d/codeph ">trimBack()</codeph> と <codeph class="+ topic/ph pr-d/codeph ">trimFront()</codeph> の両方を呼び出し、更新されたストリングを返します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">trimFront()</codeph> : ストリングの先頭から末尾に向かって文字を比較し、<codeph class="+ topic/ph pr-d/codeph ">char</codeph> パラメーターに一致するすべての文字を、最初に <codeph class="+ topic/ph pr-d/codeph ">char</codeph> パラメーターに一致しない文字が現れるまで、再帰的に削除します。そして更新されたストリングを返します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">trimBack()</codeph> : ストリングの末尾から先頭に向かって文字を比較し、<codeph class="+ topic/ph pr-d/codeph ">char</codeph> パラメーターに一致するすべての文字を、最初に <codeph class="+ topic/ph pr-d/codeph ">char</codeph> パラメーターに一致しない文字が現れるまで、再帰的に削除します。そして更新されたストリングを返します。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">stringToCharacter()</codeph> : 渡されたストリングの先頭文字を返します。</li></ul>
  </li><li class="- topic/li ">宣言されているストリング変数を使用して、2 番目のストリングの作成に <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> メソッド、3 番目のストリングの作成に <codeph class="+ topic/ph pr-d/codeph ">trim()</codeph> メソッドを呼び出して、3 つのストリングを作成します。</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class StringExample extends Sprite {
        public function StringExample() {
            var companyStr:String = new String("     Company X");
            var productStr:String = "Product Z Basic     ";
            var emptyStr:String = " ";
            var strHelper:StringHelper = new StringHelper();

            var companyProductStr:String = companyStr + emptyStr + productStr;
            trace("'" + companyProductStr + "'");    // '     Company X Product Z Basic     '

            companyProductStr = strHelper.replace(companyProductStr, "Basic", "Professional");
            trace("'" + companyProductStr + "'");    // '     Company X Product Z Professional     '

            companyProductStr = strHelper.trim(companyProductStr, emptyStr);
            trace("'" + companyProductStr + "'");    // 'Company X Product Z Professional'
        }
    }
}

class StringHelper {
    public function StringHelper() {
    }

    public function replace(str:String, oldSubStr:String, newSubStr:String):String {
        return str.split(oldSubStr).join(newSubStr);
    }

    public function trim(str:String, char:String):String {
        return trimBack(trimFront(str, char), char);
    }

    public function trimFront(str:String, char:String):String {
        char = stringToCharacter(char);
        if (str.charAt(0) == char) {
            str = trimFront(str.substring(1), char);
        }
        return str;
    }

    public function trimBack(str:String, char:String):String {
        char = stringToCharacter(char);
        if (str.charAt(str.length - 1) == char) {
            str = trimBack(str.substring(0, str.length - 1), char);
        }
        return str;
    }

    public function stringToCharacter(str:String):String {
        if (str.length == 1) {
            return str;
        }
        return str.slice(0, 1);
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="package.html#String()" class="- topic/link "><linktext class="- topic/linktext ">String() グローバル関数</linktext></link></related-links><apiConstructor id="String:String" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">String</apiName><shortdesc class="- topic/shortdesc ">
  指定されたストリングに初期化された新しい String オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, new string, new, constructor
   
   </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">新しい String オブジェクトの初期値です。
  
  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  指定されたストリングに初期化された新しい String オブジェクトを作成します。
  
  <p class="- topic/p ">
  <b class="+ topic/ph hi-d/b ">注意：</b>ストリングリテラルの方が String オブジェクトよりもオーバーヘッドが少なく、一般的により簡単に使用できます。String オブジェクトを使用する特別な理由がある場合以外は、String クラスよりもストリングリテラルを使用することをお勧めします。
  </p>
  
  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="String:AS3:charAt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">charAt</apiName><shortdesc class="- topic/shortdesc ">
     index パラメーターで指定された位置にある文字を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.charat, charat, character at
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定されたインデックス位置にある文字です。指定されたインデックスがこのストリングのインデックスの範囲外である場合は、空のストリングが返されます。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">index</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリング内の文字の位置を示す整数です。最初の文字の位置は <codeph class="+ topic/ph pr-d/codeph ">0</codeph> で、最後の文字の位置は <codeph class="+ topic/ph pr-d/codeph ">my_str.length - 1</codeph> です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">index</codeph> パラメーターで指定された位置にある文字を返します。<codeph class="+ topic/ph pr-d/codeph ">index</codeph> に指定された値が 0 ～ <codeph class="+ topic/ph pr-d/codeph ">string.length - 1</codeph>  の範囲外にある場合は、空のストリングを返します。
     <p class="- topic/p ">
     このメソッドは <codeph class="+ topic/ph pr-d/codeph ">String.charCodeAt()</codeph> に似ていますが、16 ビット整数の文字コードではなく文字が返される点が異なります。
     </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/charCodeAt()" class="- topic/link "><linktext class="- topic/linktext ">charCodeAt()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:charCodeAt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">charCodeAt</apiName><shortdesc class="- topic/shortdesc ">
     指定された index にある文字の数値 Unicode 文字コードを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.charcodeat, charcodeat, character code at
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定されたインデックスにある文字の Unicode 文字コードを返します。または、インデックスがこのストリングのインデックスの範囲外である場合は、<codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> を返します。
     <p class="- topic/p ">Unicode 値は、<xref href="http://www.unicode.org/ucd/" scope="external" class="- topic/xref ">Unicode Character Database</xref> の仕様で定義されています。 </p>       
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">index</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリング内の文字の位置を示す整数です。最初の文字の位置は <codeph class="+ topic/ph pr-d/codeph ">0,</codeph> で、最後の文字の位置は <codeph class="+ topic/ph pr-d/codeph ">my_str.length - 1</codeph> です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定された <codeph class="+ topic/ph pr-d/codeph ">index</codeph> にある文字の数値 Unicode 文字コードを返します。<codeph class="+ topic/ph pr-d/codeph ">index</codeph> に指定された値が 0 ～ <codeph class="+ topic/ph pr-d/codeph ">string.length - 1</codeph> の範囲外にある場合は、<codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> を返します。
     <p class="- topic/p ">
     このメソッドは、<codeph class="+ topic/ph pr-d/codeph ">String.charAt()</codeph> と似ていますが、実際の文字ではなく 16 ビット整数文字コードを返す点が異なります。
     </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/charAt()" class="- topic/link "><linktext class="- topic/linktext ">charAt()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:concat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">concat</apiName><shortdesc class="- topic/shortdesc ">
     指定された引数を必要に応じてストリングに変換し、String オブジェクトの最後に追加して結果のストリングを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.concat, concat, concatenate
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定のパラメーターにより連結されたこのストリングで構成される新しいストリングです。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">連結される 0 個以上の値です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定された引数を必要に応じてストリングに変換し、String オブジェクトの最後に追加して結果のストリングを返します。ソースの String オブジェクトの元の値は変更されません。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="String:AS3:fromCharCode" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">fromCharCode</apiName><shortdesc class="- topic/shortdesc ">
    パラメーター内の Unicode 文字コードに対応する文字をストリングとして返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.fromcharcode, fromcharcode, from character code
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定された Unicode 文字コードのストリング値です。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">charCodes</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Unicode 値を表す一連の 10 進整数です。
    <p class="- topic/p ">Unicode 値は、<xref href="http://www.unicode.org/ucd/" scope="external" class="- topic/xref ">Unicode Character Database</xref> の仕様で定義されています。 </p>       
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    パラメーター内の Unicode 文字コードに対応する文字をストリングとして返します。
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="String:AS3:indexOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">indexOf</apiName><shortdesc class="- topic/shortdesc ">
     ストリング内を検索し、ストリング内の startIndex 以降で、最初に val が見つかった位置を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.indexof, indexof, index
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定のサブストリングまたは <codeph class="+ topic/ph pr-d/codeph ">-1</codeph> で最初に見つかった指定のサブストリングのインデックスです。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">検索対象のストリングです。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">検索を開始するインデックスを示す整数です。これはオプションです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ストリング内を検索し、<codeph class="+ topic/ph pr-d/codeph ">val</codeph> が、ストリング内の <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> 以降で最初に見つかった位置を返します。このインデックスはゼロから始まります。つまりストリングの最初の文字は、インデックス 1 ではなくインデックス 0 にあると見なされます。<codeph class="+ topic/ph pr-d/codeph ">val</codeph> が見つからない場合、メソッドは -1 を返します。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/lastIndexOf()" class="- topic/link "><linktext class="- topic/linktext ">lastIndexOf()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:lastIndexOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">lastIndexOf</apiName><shortdesc class="- topic/shortdesc ">
     ストリングを右から左へと検索し、startIndex の前で最後に現れる val のインデックスを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.lastindexof, lastindexof, last index of
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">最後に見つかった指定のサブストリングの位置です。見つからなかった場合は -1 を返します。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">検索対象のストリングです。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0x7FFFFFFF</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">val</codeph> の検索を開始するインデックスを示す整数です。これはオプションです。デフォルトは、インデックスに許可されている最大値です。<codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> が指定されていない場合、ストリング内の最後のアイテムから検索が開始されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ストリングを右から左へと検索し、<codeph class="+ topic/ph pr-d/codeph ">val</codeph> のインデックスで <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> の前で最後に現れるものを返します。このインデックスはゼロから始まります。つまり最初の文字はインデックス 0 にあり、最後の文字は <codeph class="+ topic/ph pr-d/codeph ">string.length - 1</codeph> にあります。<codeph class="+ topic/ph pr-d/codeph ">val</codeph> が見つからなかった場合は、<codeph class="+ topic/ph pr-d/codeph ">-1</codeph> を返します。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/indexOf()" class="- topic/link "><linktext class="- topic/linktext ">indexOf()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:localeCompare" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">localeCompare</apiName><shortdesc class="- topic/shortdesc ">
     複数のストリングのソート順を比較し、比較の結果を整数で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリングが等しい場合、値 0 になります。それ以外の場合、元のストリングがストリング引数より前に来る場合は負の整数、ストリング引数が元のストリングより前に来る場合は正の整数になります。どちらの場合も、数値の絶対値は 2 つのストリングの違いを表します。
      
      </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">other</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">比較するストリング値です。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">values</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">比較するストリングの追加セットです。これはオプションです。
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     複数のストリングのソート順を比較し、比較の結果を整数で返します。このメソッドはロケール特有の方法で比較を処理することを目的としますが、ActionScript 3.0 実装では、等価（<codeph class="+ topic/ph pr-d/codeph ">==</codeph>）演算子または不等価（<codeph class="+ topic/ph pr-d/codeph ">!=</codeph>）演算子などのその他のストリング比較と異なる結果を生成しません。 ストリングが等価の場合、戻り値は 0 になります。 元のストリング値が <codeph class="+ topic/ph pr-d/codeph ">other</codeph> で指定されたストリング値より前に来る場合、戻り値は負の整数になります。この値の絶対値は、2 つのストリング値の間にある文字数を表します。 元のストリング値が <codeph class="+ topic/ph pr-d/codeph ">other</codeph> の後に来る場合、戻り値は正の整数になります。この値の絶対値は、2 つのストリング値を隔てる文字数を表します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="String:AS3:match" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">match</apiName><shortdesc class="- topic/shortdesc ">
    指定された pattern をストリングと照合します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample><pre xml:space="preserve" class="- topic/pre "><code>
       var myPattern:RegExp = /sh./g;  
          // The dot (.) matches any character.
       var str:String = "She sells seashells by the seashore.";
       trace(str.match(myPattern));  
    
          // Output: she,sho
    
       myPattern = /sh./gi;  
          // This time, make it case insensitive (with the i flag).
       str = "She sells seashells by the seashore.";
       trace(str.match(myPattern));  
    
          // Output: She,she,sho  
    
       myPattern = RegExp = new RegExp("sh(.)", "gi")  
          // Note the grouping parentheses.
       str = "She sells seashells by the seashore.";
       trace(str.match(myPattern));  
    
          // Output: She,e,she,e,sho,o
          // Note that the result array is 
          // [[She,e],[she,e],[sho,o]] 
    </code></pre>
    
    </oldexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定された <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> と一致するストリング内のすべてのサブストリングで構成されるストリングの配列です。
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> が正規表現の場合、一致するサブストリングを複数含む配列を返すには、正規表現の中に <codeph class="+ topic/ph pr-d/codeph ">g</codeph>（グローバル）フラグを設定する必要があります。 </p>
    
    <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">g</codeph>（グローバル）フラグを設定<i class="+ topic/ph hi-d/i ">しない</i>場合、返される配列には一致するサブストリングが 1 つだけ含まれ、正規表現の <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> プロパティは変更されません。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">g</codeph>（グローバル）フラグを設定<i class="+ topic/ph hi-d/i ">した</i>場合、メソッドはストリングの先頭（インデックス位置 0）から検索を開始します。<codeph class="+ topic/ph pr-d/codeph ">/x~~/</codeph> などの正規表現を使用する場合、一致するサブストリングが空のストリングであることがあります。その場合、メソッドはその空のストリングを一致するサブストリングの配列に追加し、次のインデックス位置から検索を続行します。メソッドが完了すると、正規表現の <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> プロパティは 0 に設定されます。 </li></ul>
    
    <p class="- topic/p ">一致が見つからない場合、メソッドは空の配列を返します。<codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> パラメーターの値を渡さなかった場合、または未定義値を渡した場合、メソッドは <codeph class="+ topic/ph pr-d/codeph ">null</codeph> を返します。</p>
    
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pattern</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">照合するパターンです。パターンには任意の型のオブジェクトを指定できますが、一般的にストリングまたは正規表現を使用します。<codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> が正規表現でもストリングでもない場合、メソッドは実行する前にこれをストリングに変換します。 
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    指定された <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> をストリングと照合します。
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#RegExp" class="- topic/link "><linktext class="- topic/linktext ">RegExp</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:replace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">replace</apiName><shortdesc class="- topic/shortdesc ">
    指定された pattern をストリングと照合し、新しいストリングを返します。この新しいストリングでは、pattern と最初に一致した部分が repl で指定された内容に置き換えられます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">結果のストリングです。ソースストリングは変更されていません。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pattern</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">照合するパターンです。パターンには任意の型のオブジェクトを指定できますが、一般的にストリングまたは正規表現を使用します。ストリングまたは正規表現以外のオブジェクトを <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> パラメーターに指定した場合、<codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> メソッドがパラメーターに適用され、<codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> メソッドが実行されます。このとき、結果のストリングが <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> として使用されます。 
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">repl</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">通常は、一致した内容に置き換えるストリングです。ただし、このパラメーターに関数を指定することもできます。関数を指定した場合、一致した内容が、関数によって返されるストリングに置き換えられます。
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">repl</codeph> パラメーターにストリングを指定し、<codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> パラメーターに正規表現を指定した場合、次の特殊な <i class="+ topic/ph hi-d/i ">$ 置換コード</i>を <codeph class="+ topic/ph pr-d/codeph ">repl</codeph> ストリングに使用することができます。</p>
    
    <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry NOWRAP="true" class="- topic/entry ">$ コード
      </entry><entry class="- topic/entry ">置換テキスト
      </entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$$</codeph>
      </entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$</codeph>
      </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$&amp;</codeph>
      </entry><entry class="- topic/entry ">パターンに一致したサブストリング
      </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$`</codeph> 
      </entry><entry class="- topic/entry ">ストリングのうち、パターンに一致したサブストリングより前の部分です。このコードで使用する記号は、直線状の左一重引用符（`）です。垂直の一重引用符（'）または曲がった左一重引用符（‘）ではありません。
      </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$'</codeph>
      </entry><entry class="- topic/entry ">ストリングのうち、パターンに一致したサブストリングより後の部分です。このコードで使用する記号は、垂直の一重引用符（'）です。
      </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$</codeph> <i class="+ topic/ph hi-d/i ">n</i>
      </entry><entry class="- topic/entry ">括弧指定されたグループの <i class="+ topic/ph hi-d/i ">n</i> 番目の一致です。<i class="+ topic/ph hi-d/i ">n</i> は 1 桁の数字（1 ～ 9）であり、<codeph class="+ topic/ph pr-d/codeph ">$</codeph> <i class="+ topic/ph hi-d/i ">n</i> の後に 10 進数字は続きません。 
      </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$</codeph> <i class="+ topic/ph hi-d/i ">nn</i>
      </entry><entry class="- topic/entry ">括弧指定されたグループの <i class="+ topic/ph hi-d/i ">nn</i> 番目一致です。<i class="+ topic/ph hi-d/i ">nn</i> は 2 桁の 10 進数字（01 ～ 99）です。<i class="+ topic/ph hi-d/i ">nn</i> 番目のパターンが未定義の場合、置換テキストは空のストリングになります。 
      </entry></row></tbody></tgroup></adobetable>
    
    <p class="- topic/p ">例えば、次の例は、1 番目および 2 番目に一致したキャプチャグループを表す <codeph class="+ topic/ph pr-d/codeph ">$2</codeph> および <codeph class="+ topic/ph pr-d/codeph ">$1</codeph> 置換コードを使用する方法を示しています。</p>
    
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">var str:String = "flip-flop";
    var pattern:RegExp = /(\w+)-(\w+)/g;
    trace(str.replace(pattern, "$2-$1")); // flop-flip</codeblock>
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">repl</codeph> として関数を指定した場合、<codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> メソッドは次のパラメーターを関数に渡します。
    </p>
    
    <ul class="- topic/ul "><li class="- topic/li ">
      ストリング内の一致する部分。
      </li><li class="- topic/li ">
      キャプチャされた、括弧指定されたグループとのすべての一致が次の引数として提供されます。この方法で渡される引数の数は、括弧内のパターンとの一致数によって異なります。括弧内のパターンとの一致数は、関数コード内の <codeph class="+ topic/ph pr-d/codeph ">arguments.length - 3</codeph> を確認して特定することができます。
      </li><li class="- topic/li ">
      ストリング内で一致部分が始まる場所のインデックス位置。
      </li><li class="- topic/li ">
      ストリング全体。
      </li></ul>
    
    <p class="- topic/p ">次に例を示します。</p>
    
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
    var str1:String = "abc12 def34";
    var pattern:RegExp = /([a-z]+)([0-9]+)/;
    var str2:String = str1.replace(pattern, replFN);
    trace (str2);   // 12abc 34def
    
    function replFN():String {
      return arguments[2] + arguments[1];
    }</codeblock>
    
    
    <p class="- topic/p ">この例では、<codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> メソッドの呼び出しに、関数を <codeph class="+ topic/ph pr-d/codeph ">repl</codeph> パラメーターとして使用しています。正規表現（<codeph class="+ topic/ph pr-d/codeph ">/([a-z]([0-9]/g</codeph>）は 2 回一致しています。1 回目は、パターンがサブストリング <codeph class="+ topic/ph pr-d/codeph ">"abc12"</codeph> に一致し、次の引数のリストが関数に渡されます。
    </p>
    
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
    {"abc12", "abc", "12", 0, "abc12 def34"}</codeblock>
    
    
    <p class="- topic/p ">2 回目は、パターンがサブストリング <codeph class="+ topic/ph pr-d/codeph ">"def23"</codeph> に一致し、次の引数のリストが関数に渡されます。
    </p>
    
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
    {"def34", "def", "34", 6, "abc123 def34"}</codeblock>
    
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    指定された <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> をストリングと照合し、新しいストリングを返します。この新しいストリングでは、<codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> と最初に一致した部分が <codeph class="+ topic/ph pr-d/codeph ">repl</codeph> で指定された内容に置き換えられます。<codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> パラメーターには、ストリングまたは正規表現を指定できます。<codeph class="+ topic/ph pr-d/codeph ">repl</codeph> パラメーターには、ストリングまたは関数を指定できます。関数を指定した場合、一致した部分は、関数によって返されるストリングに置き換えられます。元のストリングは変更されません。
    
    <p class="- topic/p ">次の例では、"sh"（大文字と小文字は区別）の最初のインスタンスのみが置き換えられます。 </p>
    
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
    var myPattern:RegExp = /sh/;  
    var str:String = "She sells seashells by the seashore.";
    trace(str.replace(myPattern, "sch"));  
       // She sells seaschells by the seashore.</codeblock>
    
    <p class="- topic/p ">次の例では、<codeph class="+ topic/ph pr-d/codeph ">g</codeph>（グローバル）フラグが正規表現で設定されているので、"sh"（大文字と小文字は区別）のすべてのインスタンスが置き換えられます。 </p>
    
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
    var myPattern:RegExp = /sh/g;  
    var str:String = "She sells seashells by the seashore.";
    trace(str.replace(myPattern, "sch"));  
       // She sells seaschells by the seaschore.</codeblock>
    
    <p class="- topic/p ">次の例では、正規表現の中に <codeph class="+ topic/ph pr-d/codeph ">g</codeph>（グローバル）フラグが設定されているので、"sh" のすべてのインスタンスが置き換えられます。また、一致は大文字と小文字を区別 <i class="+ topic/ph hi-d/i ">しません</i>。<codeph class="+ topic/ph pr-d/codeph ">i</codeph>（ignoreCase）フラグが設定されているためです。</p>
    
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
    var myPattern:RegExp = /sh/gi;  
    var str:String = "She sells seashells by the seashore.";
    trace(str.replace(myPattern, "sch"));  
       // sche sells seaschells by the seaschore.</codeblock>
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#RegExp" class="- topic/link "><linktext class="- topic/linktext ">RegExp</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:search" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">search</apiName><shortdesc class="- topic/shortdesc ">
    指定された pattern を検索し、最初に一致したサブストリングのインデックスを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample><pre xml:space="preserve" class="- topic/pre "><code>
       var str:String = "She sells seashells by the seashore.";
       var myPattern:RegExp = /sh/;  
          // This time, make it case insensitive (with the i flag).
       trace(str.match(myPattern));  
    
          // Output: 13
          // (The substring match starts at character position 13.)
    
       var myPattern:RegExp = /sh/i;
       trace(str.match(myPattern));  
    
          // Output: 0
          // (The substring match starts at character position 0 
          //   -- the first character of the source string.)
    </code></pre>
    
    </oldexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">最初に一致したサブストリングのインデックスを返します。また一致するサブストリングがない場合は <codeph class="+ topic/ph pr-d/codeph ">-1</codeph> を返します。ストリングのインデックスはゼロから始まり、ストリングの先頭の文字はインデックス 0、最後の文字は <codeph class="+ topic/ph pr-d/codeph ">string.length - 1</codeph> です。 
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pattern</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">照合するパターンです。パターンには任意の型のオブジェクトを指定できますが、一般的にストリングまたは正規表現を使用します。<codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> が正規表現でもストリングでもない場合、メソッドは実行する前にこれをストリングに変換します。正規表現を指定した場合、メソッドは正規表現のグローバルフラグ（"g"）を無視し、また正規表現の <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> プロパティを無視し、元のまま維持します。未定義の値を渡した場合、または値を渡さなかった場合、メソッドは <codeph class="+ topic/ph pr-d/codeph ">-1</codeph> を返します。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    指定された <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> を検索し、最初に一致したサブストリングのインデックスを返します。一致するサブストリングがなかった場合、メソッドは <codeph class="+ topic/ph pr-d/codeph ">-1</codeph> を返します。
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#RegExp" class="- topic/link "><linktext class="- topic/linktext ">RegExp</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:slice" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">slice</apiName><shortdesc class="- topic/shortdesc ">
     返されるストリングには、startIndex 文字から endIndex 文字の前までのすべての文字が含まれます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.slice, slice
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定されたインデックスに基づくサブストリングです。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">スライスの始点のゼロから始まるインデックスです。<codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> が負の数値の場合、スライスは右から左に作成されます。このとき、-1 が最後の文字です。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">endIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0x7fffffff</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">スライスの終点のインデックスより 1 大きい整数値です。<codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> パラメーターで指定されたインデックス位置の文字は、抽出されるストリングには含まれません。<codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> が負の数値の場合、終点はストリングの終わりからカウントされて決定されます。このとき、-1 が最後の文字になります。デフォルトは、インデックスに許可されている最大値です。このパラメーターを省略すると、<codeph class="+ topic/ph pr-d/codeph ">String.length</codeph> が使用されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     返されるストリングには、<codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> 文字から <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> 文字の前までのすべての文字が含まれます。元の String オブジェクトは変更されません。<codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> パラメーターを指定しない場合、サブストリングの終わりがストリングの終わりになります。<codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> で指定されたインデックス文字が、<codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> で指定されたインデックス文字と同じか、その右側にある場合、メソッドは空のストリングを返します。
     
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/substr()" class="- topic/link "><linktext class="- topic/linktext ">substr()</linktext></link><link href="#String/substring()" class="- topic/link "><linktext class="- topic/linktext ">substring()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:split" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">split</apiName><shortdesc class="- topic/shortdesc ">
     指定された delimiter パラメーターがある各位置で String オブジェクトをサブストリングの配列に分割します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.split, split
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">サブストリングの配列です。
     
     
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">delimiter</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このストリングを分割する場所を示すパターンです。パターンには任意の型のオブジェクトを指定できますが、一般的にストリングまたは正規表現を使用します。<codeph class="+ topic/ph pr-d/codeph ">delimiter</codeph> が正規表現でもストリングでもない場合、メソッドは実行する前にこれをストリングに変換します。 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">limit</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0x7fffffff</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">配列に挿入するアイテムの最大数です。デフォルトは、許可されている最大値です。 
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定された <codeph class="+ topic/ph pr-d/codeph ">delimiter</codeph> パラメーターがある各位置で String オブジェクトをサブストリングの配列に分割します。 
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">delimiter</codeph> パラメーターが正規表現の場合、ストリング内の特定の位置で見つかった最初の一致のみが考慮されます。バックトラッキングにより、同じ位置で空でないサブストリングの一致が見つかったとしても、それは考慮されません。次に実際の使用例を示します。</p>
     
     <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var str:String = "ab";
     var results:Array = str.split(/a~~?/); // results == ["","b"]
     
     results = str.split(/a~~/); // results == ["","b"].)</codeblock>
     
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">delimiter</codeph> パラメーターがグループ化括弧を含む正規表現の場合、<codeph class="+ topic/ph pr-d/codeph ">delimiter</codeph> が一致するたびに、未定義結果を含むグループ化括弧の結果が出力配列にスプライスされます。次に例を示します。</p>
     
     <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var str:String = "Thi5 is a tricky-66 example.";
     var re:RegExp = /(\d+)/;
     var results:Array = str.split(re);
         // results == ["Thi","5"," is a tricky-","66"," example."]</codeblock>
     
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">limit</codeph> パラメーターを指定した場合、配列には指定された数を超えるエレメントは返されません。</p>
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">delimiter</codeph> が空のストリング、空の正規表現、または空のストリングも一致とされる正規表現の場合、ストリング内のそれぞれの 1 文字が配列内のエレメントとして出力されます。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">delimiter</codeph> パラメーターが未定義の場合は、ストリング全体が、返される配列の最初のエレメントに挿入されます。 </p>     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/join()" class="- topic/link "><linktext class="- topic/linktext ">Array.join()</linktext></link><link href="#RegExp" class="- topic/link "><linktext class="- topic/linktext ">RegExp</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:substr" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">substr</apiName><shortdesc class="- topic/shortdesc ">
     startIndex で指定された位置から len で指定された長さの文字を含むサブストリングを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.substr, substr, substring
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定されたパラメーターに基づくサブストリングです。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">サブストリングの作成に使用する先頭文字のインデックスを示す整数です。<codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> が負の数値の場合、始点はストリングの終わりから決定されます。このとき、<codeph class="+ topic/ph pr-d/codeph ">-1</codeph> が最後の文字になります。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">len</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0x7fffffff</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">作成するサブストリングの文字数です。デフォルト値は、許可されている最大値です。<codeph class="+ topic/ph pr-d/codeph ">len</codeph> を指定しないと、サブストリングには <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> から終わりまでのすべての文字が含まれます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> で指定された位置から <codeph class="+ topic/ph pr-d/codeph ">len</codeph> で指定された長さの文字を含むサブストリングを返します。元のストリングは変更されません。
     
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="String:AS3:substring" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">substring</apiName><shortdesc class="- topic/shortdesc ">
     startIndex で指定された位置から endIndex - 1 までのすべての文字を含むストリングを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.substring, substring
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定されたパラメーターに基づくサブストリングです。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">サブストリングの作成に使用する先頭文字のインデックスを示す整数です。<codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> に指定できる値は、<codeph class="+ topic/ph pr-d/codeph ">0</codeph> ～ <codeph class="+ topic/ph pr-d/codeph ">String.length</codeph> です。<codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> が負の値の場合、<codeph class="+ topic/ph pr-d/codeph ">0</codeph> が使用されます。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">endIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0x7fffffff</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">抽出するサブストリングの最後の文字のインデックスに 1 を加えた整数です。<codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> に指定できる値は、<codeph class="+ topic/ph pr-d/codeph ">0</codeph> ～ <codeph class="+ topic/ph pr-d/codeph ">String.length</codeph> です。<codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> にある文字はサブストリングに含まれません。デフォルトは、インデックスに許可されている最大値です。このパラメーターを省略すると、<codeph class="+ topic/ph pr-d/codeph ">String.length</codeph> が使用されます。このパラメーターが負の値である場合は、<codeph class="+ topic/ph pr-d/codeph ">0</codeph> が使用されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> で指定された位置から <codeph class="+ topic/ph pr-d/codeph ">endIndex - 1</codeph> までにあるすべての文字を含むストリングを返します。<codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> が指定されていない場合、<codeph class="+ topic/ph pr-d/codeph ">String.length</codeph> が使用されます。<codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> の値が <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> の値と等しい場合、空のストリングが返されます。<codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> の値が <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> の値より大きい場合、関数を実行する前にパラメーターが自動的に入れ替わります。元のストリングは変更されません。
     
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="String:AS3:toLocaleLowerCase" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleLowerCase</apiName><shortdesc class="- topic/shortdesc ">
     このストリングのコピーを返します。すべての大文字が小文字に変換されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このストリングのコピーです。すべての大文字が小文字に変換されます。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このストリングのコピーを返します。すべての大文字が小文字に変換されます。元のストリングは変更されません。このメソッドはロケールに特化した方法で変換を処理することを目的としていますが、ActionScript 3.0 実装では、<codeph class="+ topic/ph pr-d/codeph ">toLowerCase()</codeph> メソッドと異なる結果を生成しません。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/toLowerCase()" class="- topic/link "><linktext class="- topic/linktext ">toLowerCase()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:toLocaleUpperCase" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleUpperCase</apiName><shortdesc class="- topic/shortdesc ">
     このストリングのコピーを返します。すべての小文字が大文字に変換されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このストリングのコピーです。すべての小文字が大文字に変換されます。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このストリングのコピーを返します。すべての小文字が大文字に変換されます。元のストリングは変更されません。このメソッドはロケールに特化した方法で変換を処理することを目的としていますが、ActionScript 3.0 実装では、<codeph class="+ topic/ph pr-d/codeph ">toUpperCase()</codeph> メソッドと異なる結果を生成しません。
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/toUpperCase()" class="- topic/link "><linktext class="- topic/linktext ">toUpperCase()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:toLowerCase" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLowerCase</apiName><shortdesc class="- topic/shortdesc ">
     このストリングのコピーを返します。すべての大文字が小文字に変換されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.tolowercase, tolowercase, to lowercase
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このストリングのコピーです。すべての大文字が小文字に変換されます。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このストリングのコピーを返します。すべての大文字が小文字に変換されます。元のストリングは変更されません。
     
     <p class="- topic/p ">このメソッドは、対応する Unicode の小文字が存在するすべての文字（単に A ～ Z ではない）を変換します。</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var str:String = " JOSÉ BARÇA";
     trace(str.toLowerCase()); // josé barça</codeblock>
     
     <p class="- topic/p ">大文字と小文字の対応は、<xref href="http://www.unicode.org/ucd/" scope="external" class="- topic/xref ">Unicode Character Database</xref> の仕様で定義されています。 </p>
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/toUpperCase()" class="- topic/link "><linktext class="- topic/linktext ">toUpperCase()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:toUpperCase" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toUpperCase</apiName><shortdesc class="- topic/shortdesc ">
     このストリングのコピーを返します。すべての小文字が大文字に変換されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.touppercase, touppercase, to uppercase
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このストリングのコピーです。すべての小文字が大文字に変換されます。
     
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     このストリングのコピーを返します。すべての小文字が大文字に変換されます。元のストリングは変更されません。
     
     <p class="- topic/p ">このメソッドは、対応する Unicode の大文字が存在するすべての文字（単に a ～ z ではない）を変換します。</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var str:String = "José Barça";
     trace(str.toUpperCase()); // JOSÉ BARÇA</codeblock>
     
     <p class="- topic/p ">大文字と小文字の対応は、<xref href="http://www.unicode.org/ucd/" scope="external" class="- topic/xref ">Unicode Character Database</xref> の仕様で定義されています。 </p>
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/toLowerCase()" class="- topic/link "><linktext class="- topic/linktext ">toLowerCase()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
     String インスタンスのプリミティブ値を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample>The following example creates a new instance of the String class
     and then shows that the <code>valueOf</code> method returns 
     the <i class="+ topic/ph hi-d/i ">primitive</i> value, rather than a reference to the new instance.
     
     <listing version="2.0">
     var str:String = new String("Hello World");
     var value:String = str.valueOf();
     trace(str instanceof String); // true
     trace(value instanceof String); // false
     trace(str === value); // false</listing>
     
     
     </oldexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリングの値です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     String インスタンスのプリミティブ値を返します。このメソッドは、String オブジェクトをプリミティブなストリング値に変換するように設計されています。Flash ランタイムは必要に応じて自動的に <codeph class="+ topic/ph pr-d/codeph ">valueOf()</codeph> を呼び出すようになっているので、このメソッドを明示的に呼び出す必要はほとんどありません。
     
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="String:length:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">length</apiName><shortdesc class="- topic/shortdesc ">
     指定した String オブジェクト内にある文字数を表す整数です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.length, length
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定した String オブジェクト内にある文字数を表す整数です。
     <p class="- topic/p ">
     すべてのストリングインデックスはゼロから始まるため、各ストリング <codeph class="+ topic/ph pr-d/codeph ">x</codeph> の最終文字のインデックスは <codeph class="+ topic/ph pr-d/codeph ">x.length - 1</codeph> のようになります。
     </p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:Class" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Class</apiName><shortdesc class="- topic/shortdesc ">
 Class オブジェクトはプログラム内の各クラス定義に対して作成されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Class
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Class オブジェクトはプログラム内の各クラス定義に対して作成されます。Class オブジェクトはすべて Class クラスのインスタンスです。Class オブジェクトにはクラスの静的プロパティとメソッドが含まれます。<codeph class="+ topic/ph pr-d/codeph ">new</codeph> 演算子を使用してクラスオブジェクトを呼び出すと、クラスのインスタンスが作成されます。
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">flash.net.getClassByAlias()</codeph> などの一部のメソッドは、Class 型のオブジェクトを返します。それ以外のメソッドは、<codeph class="+ topic/ph pr-d/codeph ">flash.net.registerClassAlias()</codeph> などの Class 型のパラメーターを持つ場合があります。 </p>
 <p class="- topic/p ">クラス名は、次に例を示すように、Class オブジェクトへの参照です。</p>
 <pre xml:space="preserve" class="- topic/pre "> 
 class Foo {
 }
 </pre> 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">class Foo{}</codeph> ステートメントは Class オブジェクト Foo を作成するクラス定義です。また、<codeph class="+ topic/ph pr-d/codeph ">new Foo()</codeph> ステートメントは、Foo クラスの新しいインスタンスを作成します。結果は Foo 型になります。</p>
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">class</codeph> ステートメントを使用してクラスを宣言します。次の例で示すように、Class オブジェクトは、実行時に既存インスタンスオブジェクトへクラスを割り当てるといった、高度な手法の場合に使用します。</p>
 <p class="- topic/p ">クラスの静的プロパティとメソッドは、クラスの Class オブジェクトに存在します。クラス自体は <codeph class="+ topic/ph pr-d/codeph ">prototype</codeph> を宣言します。</p>
 
 <p class="- topic/p ">通常は、Class 型の変数を手動で宣言または作成する必要はありません。ただし、次に示すコードでは、クラスがパブリックの Class プロパティ <codeph class="+ topic/ph pr-d/codeph ">circleClass</codeph> として割り当てられ、この Class プロパティをメインの Library クラスのプロパティとして参照することができます。</p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 package {
  import flash.display.Sprite;
  public class Library extends Sprite {
      
      public var circleClass:Class = Circle;
      public function Library() {
      }
  }
 }
  
 import flash.display.Shape;
 class Circle extends Shape {
  public function Circle(color:uint = 0xFFCC00, radius:Number = 10) {
      graphics.beginFill(color);
      graphics.drawCircle(radius, radius, radius);
  }
 }
 </codeblock>
 
 <p class="- topic/p ">別の SWF ファイルによって、作成された Library.swf ファイルがロードされ、Circle 型のオブジェクトがインスタンス化されることがあります。次の例は、子 SWF ファイルのアセットにアクセスする 1 つの方法を示しています。他に、<codeph class="+ topic/ph pr-d/codeph ">flash.utils.getDefnitionByName()</codeph> を使用するか、子 SWF ファイルのスタブ定義をインポートするという方法もあります。</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 package {
  import flash.display.Sprite;
  import flash.display.Shape;
  import flash.display.Loader;
  import flash.net.URLRequest;
  import flash.events.Event;
  public class LibaryLoader extends Sprite {
      public function LibaryLoader() {
          var ldr:Loader = new Loader();
          var urlReq:URLRequest = new URLRequest("Library.swf");
          ldr.load(urlReq);
          ldr.contentLoaderInfo.addEventListener(Event.COMPLETE, loaded);
      }
      private function loaded(event:Event):void {
          var library:Object = event.target.content;
          var circle:Shape = new library.circleClass();
          addChild(circle);
      }
  }
 }
 </codeblock>
 <p class="- topic/p ">ActionScript 3.0 では、SWF ファイルにコンパイルされる外部アセット（イメージ、サウンド、フォントなど）に対して埋め込みクラスを作成できます。以前のバージョンの ActionScript では、<codeph class="+ topic/ph pr-d/codeph ">MovieClip.attachMovie()</codeph> メソッドで、リンケージ識別子を使って外部アセットを関連付けていました。ActionScript 3.0 では、各埋め込みアセットが固有の埋め込みアセットクラスによって表されます。そのため、<codeph class="+ topic/ph pr-d/codeph ">new</codeph> 演算子を使用してアセットの関連クラスをインスタンス化することや、それらのアセットについてメソッドやプロパティを呼び出すことができます。</p>
 <p product="flex" class="- topic/p ">例えば、MXML コンパイラーを使用して SWF ファイルを生成する場合、次のように埋め込みクラスを作成します。</p>
 <codeblock product="flex" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     [Embed(source="bratwurst.jpg")]
     public var imgClass:Class;
 </codeblock>
 <p product="flex" class="- topic/p ">さらに、これをインスタンス化するために、次のコードを追加します。</p>
 <codeblock product="flex" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var myImg:Bitmap = new imgClass();
 </codeblock>
 
 </apiDesc><example conref="examples\Class.1.as" class="- topic/example "> 次の例は、以下に示す手順に従って、Class オブジェクを使用して、インスタンス化するクラスの決定を実行時まで保留する方法を示しています。
 <ol class="- topic/ol "><li class="- topic/li ">2 つのクラスを <codeph class="+ topic/ph pr-d/codeph ">ClassA</codeph> と <codeph class="+ topic/ph pr-d/codeph ">ClassB</codeph> として宣言します。 </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">classToConstruct</codeph> という名前の Class 型の変数と Boolean 型の変数 <codeph class="+ topic/ph pr-d/codeph ">chooseClassA</codeph> を宣言します。この例では、この Boolean 型の変数を <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定していますが、コードでカスタムテスト式を使用してこの変数の値を設定することができます。 </li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    
    public class ClassExample extends Sprite {
        public function ClassExample() {
            var classToConstruct:Class;            
            var classInstance:Object;

            classToConstruct = ClassA;
            classInstance = new classToConstruct();
            trace(classInstance);    // [object ClassA]

            classToConstruct = ClassB;
            classInstance = new classToConstruct();
            trace(classInstance);    // [object ClassB]
        }
    }
}

class ClassA {
}
    
class ClassB {
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#Object/prototype" class="- topic/link "><linktext class="- topic/linktext ">Object.prototype</linktext></link><link href="operators.html#new" class="- topic/link "><linktext class="- topic/linktext ">new 演算子</linktext></link></related-links></apiClassifier><apiClassifier languages="" id="globalClassifier:Namespace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Namespace</apiName><shortdesc class="- topic/shortdesc ">

Namespace クラスには、名前空間を定義して操作するためのメソッドとプロパティが含まれています。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Namespace
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Namespace クラスには、XML オブジェクトの名前空間を定義して操作するためのメソッドとプロパティが含まれています。

</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">

Namespace クラスには、名前空間を定義して操作するためのメソッドとプロパティが含まれています。名前空間を使用するシナリオには、次の 3 つがあります。

<ul class="- topic/ul "><li class="- topic/li "> <b class="+ topic/ph hi-d/b ">XML オブジェクトの名前空間：</b>名前空間により名前空間接頭辞と、名前空間を識別する URI（Uniform Resource Identifier）を関連付けます。接頭辞は、XML オブジェクト内の名前空間を参照する場合に使用されるストリングです。接頭辞が未定義の場合、XML がストリングに変換されたときに接頭辞が自動的に生成されます。
</li><li class="- topic/li "> <b class="+ topic/ph hi-d/b ">メソッドを区別するための名前空間：</b>名前空間により同名のメソッドを区別し、異なるタスクを実行できるようにします。2 つのメソッドの名前が同じでも、名前空間が異なる場合は、それぞれのメソッドで別のタスクを実行することができます。
</li><li class="- topic/li "> <b class="+ topic/ph hi-d/b ">アクセス制御するための名前空間：</b>名前空間を使用して、クラス内のプロパティとメソッドのグループへのアクセスを制御できるようにします。プロパティとメソッドをプライベートの名前空間に配置すると、その名前空間へのアクセス権を持たないコードからそれらのプロパティとメソッドにアクセスできなくなります。他のクラス、メソッド、または関数に名前空間を渡すことによって、プロパティとメソッドのグループへのアクセスを許可することができます。
</li></ul>

<p class="- topic/p ">このクラスは、2 つの形式のコンストラクターメソッドを示しています。それぞれの形式が異なるパラメーターを受け入れるからです。</p>

<p class="- topic/p ">XML、XMLList、および QName などのクラス同様、Namespace クラスには、ECMAScript for XML（E4X）仕様（ECMA-357 Edition 2）で定義されている強力な XML 処理規格が実装されています。</p>

</apiDesc><example conref="examples\NamespaceExample.as" class="- topic/example "> 次の例は、XML オブジェクトに定義されている名前空間を操作する方法を示しています。これを行うには、以下の手順を実行します。
 <ol class="- topic/ol "><li class="- topic/li ">この例では 3 つの Namespace オブジェクトを定義します。各オブジェクトには、名前空間を定義する一意の URI を関連付けます。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">myXML</codeph> という名前の XML 変数を定義し、これを <codeph class="+ topic/ph pr-d/codeph ">getRSS()</codeph> の戻り値に割り当てます。<codeph class="+ topic/ph pr-d/codeph ">getRSS()</codeph> メソッドは、いくつかの名前空間を持つ XML オブジェクトを定義し、この XML オブジェクトを返します。</li><li class="- topic/li ">この例では、<codeph class="+ topic/ph pr-d/codeph ">parseRSS()</codeph> メソッドに <codeph class="+ topic/ph pr-d/codeph ">myXML</codeph> を渡し、そのメソッドを呼び出すことで、Array 型の変数を宣言して評価しています。<codeph class="+ topic/ph pr-d/codeph ">parseRSS()</codeph> では、デフォルトの XML 名前空間として <codeph class="+ topic/ph pr-d/codeph ">rss</codeph> が定義されています。またこの例では <codeph class="+ topic/ph pr-d/codeph ">item</codeph> オブジェクト（<codeph class="+ topic/ph pr-d/codeph ">myXML</codeph> 内にある）のリストを割り当てて XMLList 変数が定義されています。配列が作成され、<codeph class="+ topic/ph pr-d/codeph ">myXML.item</codeph> 内の様々なノードが値として設定されます。その後、配列が返されます。</li><li class="- topic/li ">配列内のエレメントは、<codeph class="+ topic/ph pr-d/codeph ">for</codeph> ループを使用し、<codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> を 3 回呼び出すことで出力されます。</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class NamespaceExample extends Sprite {
        private var rss:Namespace = new Namespace("http://purl.org/rss/1.0/");
        private var rdf:Namespace = new Namespace("http://www.w3.org/1999/02/22-rdf-syntax-ns#");
        private var dc:Namespace  = new Namespace("http://purl.org/dc/elements/1.1/");

        public function NamespaceExample() {
            var myXML:XML = getRSS();
            var rssItems:Array = parseRSS(myXML);
            
            var len:uint = rssItems.length;
            for (var i:uint; i &lt; len; i++) {
                trace(rssItems[i].title);
                trace(rssItems[i].creator);
                trace(rssItems[i].date);
                // Adobe Flash Developer Center
                // Adobe
                // 2005-08-08
                // Flex Developer Center
                // Adobe
                // 2005-10-16                
            }
        }
        
        private function parseRSS(rssXML:XML):Array {
            default xml namespace = rss;

            var items:XMLList = rssXML.item;

            var arr:Array = new Array();            
            var len:uint = items.length();
            for (var i:uint; i &lt; len; i++) {
                arr.push({title:items[i].title, creator:items[i].dc::creator, date:items[i].dc::date});
            }
            
            return arr;
        }

        private function getRSS():XML {
            var myXML:XML =  &lt;rdf:RDF
              xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
              xmlns="http://purl.org/rss/1.0/"
              xmlns:dc="http://purl.org/dc/elements/1.1/"
            >
              &lt;channel rdf:about="http://www.xml.com/cs/xml/query/q/19">
                &lt;title>Test RSS&lt;/title>
                &lt;link>http://www.adobe.com/&lt;/link>
                &lt;description>This is a test RSS document.&lt;/description>
                &lt;language>en-us&lt;/language>
                &lt;items>
                  &lt;rdf:Seq>
                &lt;rdf:li rdf:resource="http://www.adobe.com/devnet/flash/"/>
                &lt;rdf:li rdf:resource="http://www.adobe.com/devnet/flex/"/>
                  &lt;/rdf:Seq>
                &lt;/items>
              &lt;/channel>
              &lt;item rdf:about="http://www.adobe.com/devnet/flash/">
                &lt;title>Adobe Flash Developer Center&lt;/title>
                &lt;link>http://www.adobe.com/devnet/flash/&lt;/link>
                &lt;description>Welcome to the Flash Developer Center&lt;/description>
                &lt;dc:creator>Adobe&lt;/dc:creator>
                &lt;dc:date>2005-08-08&lt;/dc:date>    
              &lt;/item>
              &lt;item rdf:about="http://www.adobe.com/devnet/flex/">
                &lt;title>Flex Developer Center&lt;/title>
                &lt;link>http://www.adobe.com/devnet/flex/&lt;/link>
                &lt;description>Welcome to the Flex Developer Center&lt;/description>
                &lt;dc:creator>Adobe&lt;/dc:creator>
                &lt;dc:date>2005-10-16&lt;/dc:date>    
              &lt;/item>
            &lt;/rdf:RDF>;
            
            return myXML;
        }
    }
}
</codeblock></example><example conref="examples\Namespace_2_Example.as" class="- topic/example "> 次の例は、名前空間を使用して、名前が同じでも実行するタスクが異なるメソッドを区別する方法を示しています。この例では、<codeph class="+ topic/ph pr-d/codeph ">hello()</codeph> という名前の 3 つのメソッドが別々の名前空間に存在しており、呼び出されたときにそれぞれが異なるストリングを返します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {

    import flash.display.Sprite;

    public class Namespace_2_Example extends Sprite {    
        public function Namespace_2_Example() {
            var vocab:MultilingualVocabulary = new MultilingualVocabulary();

            trace(vocab.hello());    // hello
            
            var languages:Array = vocab.getLanguages();
            
            for (var i:uint; i &lt; languages.length; i++) {
                var ns:Namespace = languages[i];
                if (ns != null) {
                    trace(ns.toString() + ": " + vocab.ns::hello());
                    // hello
                    // MultilingualVocabulary:Hawaiian: aloha
                    // MultilingualVocabulary:French: bon jour
                }
            }
        }
    }    
}

class MultilingualVocabulary {
    public namespace French;
    public namespace Hawaiian;
    private var languages:Array;

    public function MultilingualVocabulary() {
        languages = new Array(Hawaiian, French);
    }
        
    public function hello():String { 
        return "hello";
    }

    Hawaiian function hello():String {
        return "aloha";
    }

    French function hello():String { 
        return "bon jour";
    }
        
    public function getLanguages():Array {
        return languages;
    }
}
</codeblock></example><example conref="examples\Namespace_3_Example.as" class="- topic/example "> 次の例では、名前空間名を使用して、適切な変数値を選択します。この例は、名前空間の値を変数に格納し、その変数を使用してその名前空間内のオブジェクトを参照する方法を示しています。
 <p class="- topic/p ">この例は、長方形のボタンについてのマウス状態に対応する名前空間と色を定義します。ボタンを描画するたびに、<codeph class="+ topic/ph pr-d/codeph ">bgcolor</codeph> 変数を参照して、適切な色（マウスが置かれていない out 状態では赤、マウスが上に置かれている over 状態では黄色、マウスボタンが押されている down 状態では白）を適用します。変数は、対応する名前空間（<codeph class="+ topic/ph pr-d/codeph ">out</codeph>、<codeph class="+ topic/ph pr-d/codeph ">over</codeph>、<codeph class="+ topic/ph pr-d/codeph ">down</codeph>）に対するものです。 </p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
  
    public class Namespace_3_Example extends Sprite {     
        public function Namespace_3_Example() {
            addChild(new StateButton("Press Me."));
        }
    }
}

import flash.display.Sprite;
import flash.text.TextField;
import flash.events.Event;
import flash.events.MouseEvent;

class StateButton extends Sprite{
    private namespace out;
    private namespace over;
    private namespace down;
    private var label:TextField;
    private var labelTxt:String;
    private var ns:Namespace;
    out var bgColor:Number = 0xFF0000;
    over var bgColor:Number = 0xFFFF00;
    down var bgColor:Number = 0xFFFFFF;
      
    public function StateButton(str:String) {
        buttonMode = true;
        labelTxt = str;
        ns = out;
        draw();
        addLabel();
        addListeners();
    }

    private function addLabel():void {
        label = new TextField();
        label.text = labelTxt;
        label.width = 50;
        label.height = 20;
        label.mouseEnabled = false;
        addChild(label);
    }
      
    private function addListeners():void {
        addEventListener(MouseEvent.MOUSE_UP, mouseOverHandler);
        addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
        addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
        addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
    }
 
    private function mouseOutHandler(e:Event):void {
        ns = out;
        draw();
    }
 
    private function mouseOverHandler(e:Event):void {
        ns = over;
        draw();
    }
 
    private function mouseDownHandler(e:Event):void {
        ns = down;
        draw();
    }
 
    private function draw():void {
        this.graphics.clear();
        this.graphics.beginFill(ns::bgColor);
        this.graphics.drawRect(0, 0, 60, 20);
    }
} 
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#XML" class="- topic/link "><linktext class="- topic/linktext ">XML</linktext></link><link href="#XMLList" class="- topic/link "><linktext class="- topic/linktext ">XMLList</linktext></link><link href="#QName" class="- topic/link "><linktext class="- topic/linktext ">QName</linktext></link><link href="http://www.ecma-international.org/publications/standards/Ecma-357.htm" class="- topic/link "><linktext class="- topic/linktext ">ECMAScript for XML（E4X）specification（ECMA-357 edition 2）</linktext></link></related-links><apiConstructor id="Namespace:Namespace_0" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Namespace</apiName><shortdesc class="- topic/shortdesc "> 
	prefixValue パラメーターと uriValue パラメーターの値に従って Namespace オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
	</helpid></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">prefixValue</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">名前空間に使用する接頭辞です。   
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uriValue</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">名前空間の URI です。
	
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">指定された prefixValue と uriValue で Namespace オブジェクトを作成します。
	
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	<codeph class="+ topic/ph pr-d/codeph ">prefixValue</codeph> パラメーターと <codeph class="+ topic/ph pr-d/codeph ">uriValue</codeph> パラメーターの値に従って Namespace オブジェクトを作成します。このコンストラクターには両方のパラメーターが必要です。
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">prefixValue</codeph> パラメーターの値は、次のように <codeph class="+ topic/ph pr-d/codeph ">prefix</codeph> プロパティに割り当てられます。</p>
	<ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> が渡された場合、<codeph class="+ topic/ph pr-d/codeph ">prefix</codeph> は <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> に設定されます。</li><li class="- topic/li ">値が <codeph class="+ topic/ph pr-d/codeph ">isXMLName()</codeph> 関数により有効な XML 名として判定された場合、この引数はストリングに変換されて <codeph class="+ topic/ph pr-d/codeph ">prefix</codeph> プロパティに割り当てられます。</li><li class="- topic/li ">値が無効な XML 名の場合、<codeph class="+ topic/ph pr-d/codeph ">prefix</codeph> プロパティは <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> に設定されます。</li></ul>
	
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">uriValue</codeph> パラメーターの値は、次のように <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> プロパティに割り当てられます。</p>
	<ul class="- topic/ul "><li class="- topic/li ">QName オブジェクトが渡された場合、<codeph class="+ topic/ph pr-d/codeph ">uri</codeph> プロパティは QName オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> プロパティの値に設定されます。</li><li class="- topic/li "> それ以外の場合、<codeph class="+ topic/ph pr-d/codeph ">uriValue</codeph> パラメーターはストリングに変換され、<codeph class="+ topic/ph pr-d/codeph ">uri</codeph> プロパティに割り当てられます。</li></ul>
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このクラスは、2 つのコンストラクターメソッドを示しています。それぞれの形式が異なるパラメーターを受け入れるためです。コンストラクターの動作は、各項目で詳細を示すように、渡される引数の型と数によって異なります。ActionScript 3.0 はメソッドまたはコンストラクターのオーバーロードをサポートしていません。</p>
    
	</apiDesc></apiConstructorDetail></apiConstructor><apiConstructor id="Namespace:Namespace_1" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Namespace</apiName><shortdesc class="- topic/shortdesc "> 
	Namespace オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
	</helpid></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uriValue</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">名前空間の URI です。
	
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">指定された uriValue で Namespace オブジェクトを作成します。
	
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	Namespace オブジェクトを作成します。新しい Namespace オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> プロパティと <codeph class="+ topic/ph pr-d/codeph ">prefix</codeph> プロパティに割り当てられる値は、<codeph class="+ topic/ph pr-d/codeph ">uriValue</codeph> パラメーターに渡される値の型によって決まります。
	<ul class="- topic/ul "><li class="- topic/li ">値が渡されない場合、<codeph class="+ topic/ph pr-d/codeph ">prefix</codeph> プロパティと <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> プロパティは空のストリングに設定されます。</li><li class="- topic/li ">値が Namespace オブジェクトの場合、オブジェクトのコピーが作成されます。</li><li class="- topic/li ">値が QName オブジェクトの場合、<codeph class="+ topic/ph pr-d/codeph ">uri</codeph> プロパティは QName オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> プロパティに設定されます。</li></ul>
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このクラスは、2 つのコンストラクター項目を示しています。それぞれの形式が異なるパラメーターを受け入れるためです。コンストラクターの動作は、各項目で詳細を示すように、渡されるパラメーターの型と数によって異なります。ActionScript 3.0 はメソッドまたはコンストラクターのオーバーロードをサポートしていません。</p>
    
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Namespace:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	Namespace.uri プロパティと同等です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Namespace, Namespace.toString, toString
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリングとしての名前空間の URI です。
	
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Namespace.uri プロパティと同等です。 
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Namespace.uri</codeph> プロパティと同等です。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="Namespace:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
    指定されたオブジェクトの URI 値を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Namespace, Namespace.toString, toString
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリングとしての名前空間の URI です。
    
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Namespace.uri プロパティと同等です。 
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    指定されたオブジェクトの URI 値を返します。 
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="Namespace:prefix:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">prefix</apiName><shortdesc class="- topic/shortdesc ">
	名前空間の接頭辞です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Namespace, Namespace.prefix, prefix
	</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">名前空間の接頭辞です。
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	名前空間の接頭辞です。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="Namespace:uri:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">uri</apiName><shortdesc class="- topic/shortdesc ">
	名前空間の URI です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Namespace, Namespace.uri, uri
	</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">名前空間の URI です。
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	名前空間の URI です。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:XML" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">XML</apiName><shortdesc class="- topic/shortdesc ">
    XML クラスには、XML オブジェクトを操作するためのメソッドとプロパティが含まれています。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML クラスには、XML オブジェクトを操作するためのメソッドとプロパティが含まれています。XMLList、Namespace、および QName などのクラスと同様、XML クラスには ECMAScript for XML（E4X）仕様（ECMA-357 Edition 2）で定義されている強力な XML 処理規格が実装されています。
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> メソッドは、XML オブジェクトに単純内容が含まれるか複合内容が含まれるかに関係なく、XML オブジェクトのストリング表現を返します。</p>
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>ActionScript 2.0 の XML クラスと関連クラスは XMLDocument というクラス名に変更され、flash.xml パッケージに移行されています。XMLDocument は、後方互換性を維持する目的で ActionScript 3.0 に残されているものです。</p> 
    
    
    </apiDesc><example conref="examples\XMLExample.as" class="- topic/example "> 次の例では、最初に XML 変数を作成して、それにノードを追加します。次に XML プロパティを使用して、XML ノードを検出および出力します。属性名で情報を見つけるために、アットマーク（<codeph class="+ topic/ph pr-d/codeph ">@</codeph>）がいくつかの <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> 呼び出しで使用されています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class XmlExample extends Sprite {        
        public function XmlExample() {
            var employees:XML =
                &lt;employees>
                    &lt;employee ssn="123-123-1234">
                        &lt;name first="John" last="Doe"/>
                        &lt;address>
                            &lt;street>11 Main St.&lt;/street>
                            &lt;city>San Francisco&lt;/city>
                            &lt;state>CA&lt;/state>
                            &lt;zip>98765&lt;/zip>
                        &lt;/address>
                    &lt;/employee>
                    &lt;employee ssn="789-789-7890">
                        &lt;name first="Mary" last="Roe"/>
                        &lt;address>
                            &lt;street>99 Broad St.&lt;/street>
                            &lt;city>Newton&lt;/city>
                            &lt;state>MA&lt;/state>
                            &lt;zip>01234&lt;/zip>
                        &lt;/address>
                    &lt;/employee>
                &lt;/employees>;

            trace(employees.employee[0].address.zip);   // 98765

            trace(employees.employee[1].@ssn);          // 789-789-7890

            trace(employees.employee.name);             // &lt;name first="John" last="Doe"/>
                                                        // &lt;name first="Mary" last="Roe"/>

            trace(employees..zip[0]);                   // 98765

            trace(employees..@ssn[1]);                  // 789-789-7890

            trace(employees..name);                     // &lt;name first="John" last="Doe"/>
                                                        // &lt;name first="Mary" last="Roe"/>

            trace(employees.employee[0].address.*);     // &lt;street>11 Main St.&lt;/street>    
                                                        // &lt;city>San Francisco&lt;/city>
                                                        // &lt;state>CA&lt;/state>
                                                        // &lt;zip>98765&lt;/zip>
            var node:String = "zip";
            trace(employees.employee[0].address[node]); // 98765
            
            var attribute:String = "ssn";
            trace(employees.employee[1].@[attribute]);  // 789-789-7890
            
            for each (var num:XML in employees..@ssn) {
                trace(num);                             // 123-123-1234
            }                                           // 789-789-7890
            
            var ssnToFind:String = "789-789-7890";
            trace(employees.employee.(@ssn == ssnToFind).toXMLString());
                                                        // &lt;employee ssn="789-789-7890">
                                                        // &lt;name first="Mary" last="Roe"/>
                                                        // &lt;address>
                                                        // &lt;street>99 Broad St.&lt;/street>
                                                        // &lt;city>Newton&lt;/city>
                                                        // &lt;state>MA&lt;/state>
                                                        // &lt;zip>01234&lt;/zip>
                                                        // &lt;/address>
                                                        // &lt;/employee>
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#Namespace" class="- topic/link "><linktext class="- topic/linktext ">Namespace</linktext></link><link href="#QName" class="- topic/link "><linktext class="- topic/linktext ">QName</linktext></link><link href="#XMLList" class="- topic/link "><linktext class="- topic/linktext ">XMLList</linktext></link><link href="#XML/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">XML.toXMLString()</linktext></link><link href="http://www.ecma-international.org/publications/standards/Ecma-357.htm" class="- topic/link "><linktext class="- topic/linktext ">ECMAScript for XML（E4X）specification（ECMA-357 edition 2）</linktext></link></related-links><apiConstructor id="XML:XML" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">XML</apiName><shortdesc class="- topic/shortdesc "> 
    新しい XML オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML
    </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">トップレベル関数 <codeph class="+ topic/ph pr-d/codeph ">XML()</codeph> によって XML に変換可能なオブジェクトです。
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    新しい XML オブジェクトを作成します。XML クラスのメソッドを呼び出す前に、コンストラクターを使用して XML オブジェクトを作成する必要があります。 
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> メソッドは、XML オブジェクトに単純内容が含まれるか複合内容が含まれるかに関係なく、XML オブジェクトのストリング表現を返します。</p>
    
    </apiDesc><example conref="examples\XML_new.as" class="- topic/example "> 次の例は、Flash Professional の URLLoader クラスを使用して、ActionScript 3.0 でリモートの XML ドキュメントをロードする方法を示しています。<xref href="http://actionscriptexamples.com/2008/12/05/dynamically-loading-xml-files-in-actionscript-30/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref> で作成された例。 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
//
// Requires:
//   - TextArea control UI component in the Flash Professional Library.
//
import fl.controls.TextArea;
 
var xml:XML;
 
var urlRequest:URLRequest = new URLRequest("http://www.helpexamples.com/flash/xml/menu.xml");
 
var urlLoader:URLLoader = new URLLoader();
urlLoader.addEventListener(Event.COMPLETE, urlLoader_complete);
urlLoader.load(urlRequest);
 
var textArea:TextArea = new TextArea();
textArea.move(5, 5);
textArea.setSize(stage.stageWidth - 10, stage.stageHeight - 10);
addChild(textArea);
 
function urlLoader_complete(evt:Event):void {
    xml = new XML(evt.currentTarget.data);
    textArea.text = xml.toXMLString();
}
</codeblock></example><example conref="examples\XML_new_2.as" class="- topic/example "> 以下に、すべて ActionScript を使用した別の例を示します。<xref href="http://actionscriptexamples.com/2008/12/05/dynamically-loading-xml-files-in-actionscript-30/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref> で作成された例。 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML;
var textArea:TextField = new TextField();
textArea.width = 300;
 
var urlRequest:URLRequest = new URLRequest("http://www.helpexamples.com/flash/xml/menu.xml");
var urlLoader:URLLoader = new URLLoader();
urlLoader.dataFormat = URLLoaderDataFormat.TEXT;
urlLoader.addEventListener(Event.COMPLETE, urlLoader_complete);
urlLoader.load(urlRequest);
 
function urlLoader_complete(evt:Event):void {
    xml = new XML(evt.target.data);
    textArea.text = xml.toXMLString();
    addChild(textArea);
}
</codeblock></example></apiConstructorDetail><related-links class="- topic/related-links "><link href="package.html#XML()" class="- topic/link "><linktext class="- topic/linktext ">XML() グローバル関数</linktext></link><link href="#XML/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">XML.toXMLString()</linktext></link></related-links></apiConstructor><apiOperation id="XML:AS3:addNamespace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addNamespace</apiName><shortdesc class="- topic/shortdesc ">
    XML オブジェクトのスコープ内の名前空間セットに名前空間を追加します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.addNamespace, addNamespace
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">名前空間が追加された新しい XML オブジェクトです。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ns</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XML オブジェクトに追加する名前空間です。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML オブジェクトのスコープ内の名前空間セットに名前空間を追加します。その名前空間が XML オブジェクトのスコープ内の名前空間セットに既に存在する（指定されたパラメーターに一致する接頭辞を持つ）場合、既存の名前空間の接頭辞は <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> に設定されます。入力パラメーターが Namespace オブジェクトの場合は、このオブジェクトが直接使用されます。入力パラメーターが QName オブジェクトの場合は、新しい名前空間の作成に入力パラメーターの URI が使用され、それ以外の場合は、入力パラメーターは String に変換され、名前空間がその String から作成されます。
    
    </apiDesc><example conref="examples\XML.addNamespace.1.as" class="- topic/example "> 次の例では、1 つの XML オブジェクトに定義されている名前空間を使用して、これを別の XML オブジェクトに適用します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml1:XML = &lt;ns:foo xmlns:ns="www.example.com/ns" />;
var nsNamespace:Namespace = xml1.namespace();

var xml2:XML = &lt;bar />;
xml2.addNamespace(nsNamespace);
trace(xml2.toXMLString()); // &lt;bar xmlns:ns="www.example.com/ns"/>
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:appendChild" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">appendChild</apiName><shortdesc class="- topic/shortdesc ">
    指定された子を XML オブジェクトのプロパティの最後に追加します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.appendChild, appendChild
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">結果として作成される XML オブジェクトです。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">child</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">追加する XML オブジェクトです。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    指定された子を XML オブジェクトのプロパティの最後に追加します。<codeph class="+ topic/ph pr-d/codeph ">appendChild()</codeph> メソッドは、XML オブジェクト、XMLList オブジェクト、または他の任意のデータ型（後で String データ型に変換されます）を受け取ります。 
    
    <p class="- topic/p ">XML ノードを削除するには、<codeph class="+ topic/ph pr-d/codeph ">delete</codeph>（XML）演算子を使用します。</p>
    
    </apiDesc><example conref="examples\XML.appendChild.1.as" class="- topic/example "> この例では、新しいエレメントを XML オブジェクトの子リストの最後に追加します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;body>
            &lt;p>hello&lt;/p>
        &lt;/body>;
        
xml.appendChild(&lt;p>world&lt;/p>);    
trace(xml.p[0].toXMLString()); // &lt;p>hello&lt;/p>
trace(xml.p[1].toXMLString()); // &lt;p>world&lt;/p>
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="operators.html#delete_(XML)" class="- topic/link "><linktext class="- topic/linktext ">delete（XML）演算子</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:attribute" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attribute</apiName><shortdesc class="- topic/shortdesc ">
    attributeName パラメーターに一致する名前を持つ属性の XML 値を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.attribute, attribute
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XMLList オブジェクトまたは空の XMLList オブジェクトです。属性値が定義されていない場合は空の XMLList を返します。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">attributeName</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">属性の名前。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    <codeph class="+ topic/ph pr-d/codeph ">attributeName</codeph> パラメーターに一致する名前を持つ属性の XML 値を返します。属性は XML エレメント内にあります。例えば、<codeph class="+ topic/ph pr-d/codeph ">&lt;first gender="boy">John&lt;/first></codeph> の場合、エレメントは値 "<codeph class="+ topic/ph pr-d/codeph ">boy</codeph>" の "<codeph class="+ topic/ph pr-d/codeph ">gender</codeph>" という名前の属性を持ちます。
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">attributeName</codeph> パラメーターには任意のデータ型を指定できますが、String データ型を使用するのが最も一般的です。QName オブジェクト以外のオブジェクトを渡した場合、<codeph class="+ topic/ph pr-d/codeph ">attributeName</codeph> パラメーターは <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> メソッドを使用してパラメーターをストリングに変換します。 </p>
    
    <p class="- topic/p ">修飾名参照が必要な場合は、QName オブジェクトで渡すことができます。QName オブジェクトは名前空間とローカル名を定義するもので、属性の修飾名の定義に使用することができます。したがって、<codeph class="+ topic/ph pr-d/codeph ">attribute(qname)</codeph> の呼び出しは <codeph class="+ topic/ph pr-d/codeph ">attribute(qname.toString())</codeph> の呼び出しと同じではありません。</p>
    
    </apiDesc><example conref="examples\XMLAttributeExample1.as" class="- topic/example "> この例は、<codeph class="+ topic/ph pr-d/codeph ">attribute()</codeph> オブジェクトに渡される QName オブジェクトを示しています。<codeph class="+ topic/ph pr-d/codeph ">localName</codeph> プロパティは <codeph class="+ topic/ph pr-d/codeph ">attr</codeph> で、<codeph class="+ topic/ph pr-d/codeph ">namespace</codeph> プロパティは <codeph class="+ topic/ph pr-d/codeph ">ns</codeph> です。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var xml:XML = &lt;ns:node xmlns:ns = "http://uri" ns:attr = '7' />       
 var qn:QName = new QName("http://uri", "attr");
 trace (xml.attribute(qn)); // 7
</codeblock></example><example conref="examples\XMLAttributeExample2.as" class="- topic/example "> ActionScript の予約語と名前が一致する属性を返すには、次の例のように、属性識別（@）演算子ではなく <codeph class="+ topic/ph pr-d/codeph ">attribute()</codeph> メソッドを使用します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var xml:XML = &lt;example class="first" />
 trace(xml.attribute("class"));
 
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/attributes()" class="- topic/link "><linktext class="- topic/linktext ">XML.attributes()</linktext></link><link href="#QName" class="- topic/link "><linktext class="- topic/linktext ">QName</linktext></link><link href="#Namespace" class="- topic/link "><linktext class="- topic/linktext ">Namespace</linktext></link><link href="#XML/elements()" class="- topic/link "><linktext class="- topic/linktext ">XML.elements()</linktext></link><link href="operators.html#attribute_identifier" class="- topic/link "><linktext class="- topic/linktext ">attribute 識別子（&amp;#064;）演算子</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:attributes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attributes</apiName><shortdesc class="- topic/shortdesc ">
    指定された XML オブジェクトの属性値のリストを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.attributes, attributes
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">属性値のリストです。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    指定された XML オブジェクトの属性値のリストを返します。<codeph class="+ topic/ph pr-d/codeph ">name()</codeph> メソッドを <codeph class="+ topic/ph pr-d/codeph ">attributes()</codeph> メソッドと共に使用して属性の名前を返します。<codeph class="+ topic/ph pr-d/codeph ">xml.attributes()</codeph> は <codeph class="+ topic/ph pr-d/codeph ">xml.@*</codeph> と同じです。
    
    </apiDesc><example conref="examples\XMLAttributesExample1.as" class="- topic/example "> 次の例では、属性の名前を返します。

<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML=&lt;example id='123' color='blue'/>
trace(xml.attributes()[1].name()); //color
</codeblock></example><example conref="examples\XMLAttributesExample2.as" class="- topic/example "> この例は、すべての属性の名前を返します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 
var xml:XML = &lt;example id='123' color='blue'/>
var attNamesList:XMLList = xml.@*;

trace (attNamesList is XMLList); // true
trace (attNamesList.length()); // 2

for (var i:int = 0; i &lt; attNamesList.length(); i++)
{ 
    trace (typeof (attNamesList[i])); // xml
    trace (attNamesList[i].nodeKind()); // attribute
    trace (attNamesList[i].name()); // id and color
} 
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/attribute()" class="- topic/link "><linktext class="- topic/linktext ">XML.attribute()</linktext></link><link href="#XML/name()" class="- topic/link "><linktext class="- topic/linktext ">XML.name()</linktext></link><link href="operators.html#attribute_identifier" class="- topic/link "><linktext class="- topic/linktext ">&amp;#064; 演算子</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:childIndex" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">childIndex</apiName><shortdesc class="- topic/shortdesc ">
    親のコンテキスト内でのこの XML オブジェクトの 0 から始まるインデックス位置を識別します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.childindex, childindex
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">オブジェクトの位置です。正の整数だけでなく、-1 も返します。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    親のコンテキスト内でのこの XML オブジェクトの 0 から始まるインデックス位置を識別します。
    
    </apiDesc><example conref="examples\XML.childIndex.1.as" class="- topic/example "> この例は、<codeph class="+ topic/ph pr-d/codeph ">childIndex()</codeph> メソッドの使用法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
            &lt;foo>
                &lt;bar />
                text
                &lt;bob />
            &lt;/foo>;
trace(xml.bar.childIndex()); // 0
trace(xml.bob.childIndex()); // 2
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:child" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">child</apiName><shortdesc class="- topic/shortdesc ">
    XML オブジェクトの子を列挙します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.child, child
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">入力パラメーターに一致する子ノードの XMLList オブジェクトです。 
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">propertyName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XML の子のエレメント名または整数です。 
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML オブジェクトの子を列挙します。XML の 1 つの子は、1 つの XML エレメント、テキストノード、コメント、または処理命令です。 
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">propertyName</codeph> パラメーターを使用して、特定の XML の子の内容を列挙します。例えば、<codeph class="+ topic/ph pr-d/codeph ">&lt;first></codeph> という名前の子の内容を返すには、<codeph class="+ topic/ph pr-d/codeph ">child.name("first")</codeph> を使用します。子のインデックス番号を使用しても同じ結果が得られます。インデックス番号は、複数の XML の子のリスト内での子の位置を識別します。例えば、<codeph class="+ topic/ph pr-d/codeph ">name.child(0)</codeph> はリスト内の先頭の子を返します。 </p>
    
    <p class="- topic/p ">XML ドキュメント内のすべての子を出力するにはアスタリスク（~~）を使用します。例えば、<codeph class="+ topic/ph pr-d/codeph ">doc.child("~~")</codeph> となります。</p>  
    
    <p class="- topic/p ">子の総数を出力するには、<codeph class="+ topic/ph pr-d/codeph ">length()</codeph> メソッドを、アスタリスク（~~）パラメーターを指定した <codeph class="+ topic/ph pr-d/codeph ">child()</codeph> メソッドと共に使用します。例えば、<codeph class="+ topic/ph pr-d/codeph ">numChildren = doc.child("~~").length()</codeph> となります。</p>
    
    </apiDesc><example conref="examples\XML.child.1.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">child()</codeph> メソッドを使って指定された名前の子エレメントを識別する方法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;foo>
            &lt;bar>text1&lt;/bar>
            &lt;bar>text2&lt;/bar>
        &lt;/foo>;
trace(xml.child("bar").length());  // 2
trace(xml.child("bar")[0].toXMLString()); // &lt;bar>text1&lt;/bar>
trace(xml.child("bar")[1].toXMLString()); // &lt;bar>text2&lt;/bar>
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/elements()" class="- topic/link "><linktext class="- topic/linktext ">XML.elements()</linktext></link><link href="#XMLList" class="- topic/link "><linktext class="- topic/linktext ">XMLList クラス</linktext></link><link href="#XML/length()" class="- topic/link "><linktext class="- topic/linktext ">XML.length()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:children" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">children</apiName><shortdesc class="- topic/shortdesc ">
    XML オブジェクトの子を、出現する順序で列挙します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.children, children
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XML オブジェクトの子の XMLList オブジェクトです。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML オブジェクトの子を、出現する順序で列挙します。XML の 1 つの子は、1 つの XML エレメント、テキストノード、コメント、または処理命令です。 
    
    </apiDesc><example conref="examples\XML.children.1.as" class="- topic/example "> この例は、<codeph class="+ topic/ph pr-d/codeph ">children()</codeph> メソッドの使用法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
XML.ignoreProcessingInstructions = false;
var xml:XML = 
        &lt;foo id="22">
            &lt;bar>44&lt;/bar>
            text
            &lt;!-- comment -->
            &lt;?instruction ?>
        &lt;/foo>;
trace(xml.children().length()); // 4
trace(xml.children()[0].toXMLString()); // &lt;bar>44&lt;/bar>
trace(xml.children()[1].toXMLString()); // text
trace(xml.children()[2].toXMLString()); // &lt;!-- comment -->
trace(xml.children()[3].toXMLString()); // &lt;?instruction ?>
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:comments" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">comments</apiName><shortdesc class="- topic/shortdesc ">
    XML コメントを持つ XML オブジェクトのプロパティを列挙します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.comments, comments
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">コメントを持つプロパティの XMLList オブジェクトです。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML コメントを持つ XML オブジェクトのプロパティを列挙します。
    
    </apiDesc><example conref="examples\XML.comments.1.as" class="- topic/example "> この例は、<codeph class="+ topic/ph pr-d/codeph ">comments()</codeph> メソッドの使用法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
var xml:XML = 
        &lt;foo>
            &lt;!-- example -->
            &lt;!-- example2 -->
        &lt;/foo>;
trace(xml.comments().length()); // 2
trace(xml.comments()[1].toXMLString()); // &lt;!-- example2 -->
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:contains" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">contains</apiName><shortdesc class="- topic/shortdesc ">
    XML オブジェクトと、指定された value パラメーターを比較します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.contains, contains
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XML オブジェクトが <codeph class="+ topic/ph pr-d/codeph ">value</codeph> パラメーターに一致する場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph>、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">現在の XML オブジェクトと比較する値です。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML オブジェクトと、指定された <codeph class="+ topic/ph pr-d/codeph ">value</codeph> パラメーターを比較します。 
    
    </apiDesc><example conref="examples\XML.contains.1.as" class="- topic/example "> この例は、<codeph class="+ topic/ph pr-d/codeph ">contains()</codeph> メソッドの使用法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;order>
            &lt;item>Rice&lt;/item>
            &lt;item>Kung Pao Shrimp&lt;/item>
        &lt;/order>;
trace(xml.item[0].contains(&lt;item>Rice&lt;/item>)); // true
trace(xml.item[1].contains(&lt;item>Kung Pao Shrimp&lt;/item>)); // true
trace(xml.item[1].contains(&lt;item>MSG&lt;/item>)); // false
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:copy" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">copy</apiName><shortdesc class="- topic/shortdesc ">
    指定された XML オブジェクトのコピーを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.copy, copy
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">オブジェクトのコピーです。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    指定された XML オブジェクトのコピーを返します。コピーとはノードのツリー全体の複製です。コピーされた XML オブジェクトに親はないので、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> が返されます（<codeph class="+ topic/ph pr-d/codeph ">parent()</codeph> メソッドを呼び出した場合）。
    
    </apiDesc><example conref="examples\XML.copy.1.as" class="- topic/example "> この例では、<codeph class="+ topic/ph pr-d/codeph ">copy()</codeph> メソッドは XML オブジェクトの新しいインスタンスを作成しています。コピーを修正しても、元のオブジェクトは変更されません。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml1:XML = &lt;foo />;
var xml2:XML = xml1.copy();
xml2.appendChild(&lt;bar />);
trace(xml1.bar.length()); // 0
trace(xml2.bar.length()); // 1
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:defaultSettings" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">defaultSettings</apiName><shortdesc class="- topic/shortdesc ">
    プロパティ ignoreComments、ignoreProcessingInstructions、ignoreWhitespace、prettyIndent、および prettyPrinting をデフォルト値に設定したオブジェクトを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.defaultSettings, defaultSettings
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">プロパティをデフォルト値に設定したオブジェクトです。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    プロパティ <codeph class="+ topic/ph pr-d/codeph ">ignoreComments</codeph>、<codeph class="+ topic/ph pr-d/codeph ">ignoreProcessingInstructions</codeph>、<codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph>、<codeph class="+ topic/ph pr-d/codeph ">prettyIndent</codeph>、および <codeph class="+ topic/ph pr-d/codeph ">prettyPrinting</codeph> をデフォルト値に設定したオブジェクトを返します。デフォルト値は次のとおりです。
    
    <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreComments = true</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreProcessingInstructions = true</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace = true</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">prettyIndent = 2</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">prettyPrinting = true</codeph></li></ul>
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このメソッドを XML クラスのインスタンスには適用しません。次のコードのように、<codeph class="+ topic/ph pr-d/codeph ">XML</codeph> に適用します。<codeph class="+ topic/ph pr-d/codeph ">var df:Object = XML.defaultSettings()</codeph> . </p>
    
    </apiDesc><example conref="examples\XML.defaultSettings.1.as" class="- topic/example "> 次の例は、XML オブジェクトを設定する前に、コメントおよび処理命令を配置するカスタム設定を適用する方法、別のXML オブジェクトを設定する前にデフォルト設定に戻す方法、さらに別の XML オブジェクトの設定のために再度カスタム設定を適用する方法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
XML.ignoreProcessingInstructions = false;
var customSettings:Object = XML.settings();

var xml1:XML = 
        &lt;foo>
            &lt;!-- comment -->
            &lt;?instruction ?>
        &lt;/foo>;
trace(xml1.toXMLString());
//    &lt;foo>
//        &lt;!-- comment -->
//         &lt;?instruction ?>
//    &lt;/foo>

XML.setSettings(XML.defaultSettings());
var xml2:XML = 
        &lt;foo>
            &lt;!-- comment -->
            &lt;?instruction ?>
        &lt;/foo>;
trace(xml2.toXMLString());
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/ignoreComments" class="- topic/link "><linktext class="- topic/linktext ">XML.ignoreComments</linktext></link><link href="#XML/ignoreProcessingInstructions" class="- topic/link "><linktext class="- topic/linktext ">XML.ignoreProcessingInstructions</linktext></link><link href="#XML/ignoreWhitespace" class="- topic/link "><linktext class="- topic/linktext ">XML.ignoreWhitespace</linktext></link><link href="#XML/prettyIndent" class="- topic/link "><linktext class="- topic/linktext ">XML.prettyIndent</linktext></link><link href="#XML/prettyPrinting" class="- topic/link "><linktext class="- topic/linktext ">XML.prettyPrinting</linktext></link><link href="#XML/setSettings()" class="- topic/link "><linktext class="- topic/linktext ">XML.setSettings()</linktext></link><link href="#XML/settings()" class="- topic/link "><linktext class="- topic/linktext ">XML.settings()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:descendants" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">descendants</apiName><shortdesc class="- topic/shortdesc ">
    指定された name パラメーターを持つ XML オブジェクトのすべての子孫（子、孫、ひ孫など）を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.descendants, descendants
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一致する子孫の XMLList オブジェクトです。子孫がない場合は、空の XMLList オブジェクトを返します。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">*</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">照合するエレメントの名前です。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    指定された <codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターを持つ XML オブジェクトのすべての子孫（子、孫、ひ孫など）を返します。<codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターはオプションです。<codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターには、QName オブジェクト、String データ型、または他の任意のデータ型（後で String データ型に変換されます）を指定できます。
    
    <p class="- topic/p ">すべての子孫を返すには、"~~" パラメーターを使用します。パラメーターを指定しない場合はストリング "~~" が渡され、XML オブジェクトのすべての子孫が返されます。</p>
    
    </apiDesc><example conref="examples\XMLDescendantsExample1.as" class="- topic/example "> ActionScript の予約語に一致する名前の子孫を返すには、子孫演算子（..）ではなく、次の例のように <codeph class="+ topic/ph pr-d/codeph ">descendants()</codeph> メソッドを 使用します。 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
  &lt;enrollees>
    &lt;student id="239">
        &lt;class name="Algebra" />
        &lt;class name="Spanish 2"/>
    &lt;/student>
    &lt;student id="206">
        &lt;class name="Trigonometry" />
        &lt;class name="Spanish 2" />
    &lt;/student>
  &lt;/enrollees>
trace(xml.descendants("class")); 
</codeblock></example><example conref="examples\XML.descendants.1.as" class="- topic/example "> 次の例では、<codeph class="+ topic/ph pr-d/codeph ">descendants()</codeph> メソッドは、子、孫など、子孫オブジェクトの<i class="+ topic/ph hi-d/i ">すべて</i>を含む XMLList オブジェクトを返しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
var xml:XML = 
        &lt;body>
            &lt;!-- comment -->
            text1
            &lt;a>
                &lt;b>text2&lt;/b>
            &lt;/a>
        &lt;/body>;
trace(xml.descendants("*").length()); // 5
trace(xml.descendants("*")[0]); // // &lt;!-- comment -->
trace(xml.descendants("*")[1].toXMLString()); // text1
trace(xml.descendants("a").toXMLString()); // &lt;a>&lt;b>text2&lt;/b>&lt;/a>
trace(xml.descendants("b").toXMLString()); // &lt;b>text2&lt;/b>
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="operators.html#descendant_accessor" class="- topic/link "><linktext class="- topic/linktext ">descendant accessor (..) 演算子</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:elements" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">elements</apiName><shortdesc class="- topic/shortdesc ">
     XML オブジェクトのエレメントを列挙します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.elements, elements
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">エレメントの内容の XMLList オブジェクトです。エレメントの内容は開始タグと終了タグで囲まれます。すべてのエレメントの呼び出しでアスタリスク（~~）を使用すると、エレメントのタグと内容の両方を返します。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">*</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">エレメントの名前です。エレメントの名前は山括弧で囲まれています。例えば、<codeph class="+ topic/ph pr-d/codeph ">&lt;first>&lt;/first></codeph> の <codeph class="+ topic/ph pr-d/codeph ">name</codeph> は "<codeph class="+ topic/ph pr-d/codeph ">first</codeph>" です。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     XML オブジェクトのエレメントを列挙します。エレメントは、<codeph class="+ topic/ph pr-d/codeph ">&lt;first>&lt;/first></codeph> のように開始タグと終了タグで構成されます。<codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターはオプションです。<codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターには、QName オブジェクト、String データ型、または他の任意のデータ型（後で String データ型に変換されます）を指定できます。<codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターは、特定のエレメントの列挙に使用します。例えば、<codeph class="+ topic/ph pr-d/codeph ">&lt;first>John&lt;/first></codeph> では、エレメント "<codeph class="+ topic/ph pr-d/codeph ">first</codeph>" は "<codeph class="+ topic/ph pr-d/codeph ">John</codeph>" を返します。 
     
     <p class="- topic/p ">すべてのエレメントを列挙するには、パラメーターにアスタリスク（~~）を使用します。アスタリスクはデフォルトパラメーターでもあります。 </p>
     
     <p class="- topic/p ">エレメントの総数を出力するには、<codeph class="+ topic/ph pr-d/codeph ">length()</codeph> メソッドをアスタリスクパラメーターと共に使用します。例えば、<codeph class="+ topic/ph pr-d/codeph ">numElement = addressbook.elements("~~").length()</codeph> となります。</p>
     
     </apiDesc><example conref="examples\XML.elements.1.as" class="- topic/example "> 次の例では、<codeph class="+ topic/ph pr-d/codeph ">elements()</codeph> メソッドは、コメント、テキストプロパティ、または処理命令を返さずに、エレメントのリストのみを返しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;foo>
            &lt;!-- comment -->
            &lt;?instruction ?>
            text
            &lt;a>1&lt;/a>
            &lt;b>2&lt;/b>
        &lt;/foo>;
trace(xml.elements("*").length()); // 2
trace(xml.elements("*")[0].toXMLString()); // &lt;a>1&lt;/a>
trace(xml.elements("b").length()); // 1
trace(xml.elements("b")[0].toXMLString()); // &lt;b>2&lt;/b>
</codeblock></example><example conref="examples\XMLElementsExample1.as" class="- topic/example "> ActionScript の予約語に一致する名前のエレメントを返すには、XML ドット演算子（.）ではなく、次の例のように <codeph class="+ topic/ph pr-d/codeph ">elements()</codeph> メソッドを 使用します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML =
 &lt;student id="206">
    &lt;class name="Trigonometry" />
    &lt;class name="Spanish 2" />
 &lt;/student>
trace(xml.elements("class")); 
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/child()" class="- topic/link "><linktext class="- topic/linktext ">XML.child()</linktext></link><link href="#XMLList" class="- topic/link "><linktext class="- topic/linktext ">XMLList クラス</linktext></link><link href="#XML/length()" class="- topic/link "><linktext class="- topic/linktext ">XML.length()</linktext></link><link href="#XML/attribute()" class="- topic/link "><linktext class="- topic/linktext ">XML.attribute()</linktext></link><link href="operators.html#dot_(XML)" class="- topic/link "><linktext class="- topic/linktext ">XML dot (.) 演算子</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:hasComplexContent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasComplexContent</apiName><shortdesc class="- topic/shortdesc ">
    XML オブジェクトに複合内容が含まれるかどうかを確認します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.hasComplexContent, hasComplexContent
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XML オブジェクトに複合内容が含まれる場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph>、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML オブジェクトに複合内容が含まれるかどうかを確認します。子エレメントを持つ場合、XML オブジェクトには複合内容が含まれます。属性、コメント、処理命令、およびテキストノードを表す XML オブジェクトは複合内容を持ちません。ただし、これらを<i class="+ topic/ph hi-d/i ">含む</i>オブジェクトでも、子エレメントを持つ場合は、複合内容を含んでいると見なされます。
    
    </apiDesc><example conref="examples\XML.hasComplexContent.1.as" class="- topic/example "> 次の例は、単純内容を含む <codeph class="+ topic/ph pr-d/codeph ">a</codeph> という名前の 1 つのプロパティと、複合内容を含む <codeph class="+ topic/ph pr-d/codeph ">a</codeph> という名前の 1 つのプロパティを持つ XML オブジェクトを示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;foo>
            &lt;a>
                text
            &lt;/a>
            &lt;a>
                &lt;b/>
            &lt;/a>
        &lt;/foo>;
trace(xml.a[0].hasComplexContent()); // false
trace(xml.a[1].hasComplexContent()); // true

trace(xml.a[0].hasSimpleContent()); // true
trace(xml.a[1].hasSimpleContent()); // false
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/hasSimpleContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasSimpleContent()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:hasOwnProperty" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasOwnProperty</apiName><shortdesc class="- topic/shortdesc ">
    オブジェクトに p パラメーターで指定されたプロパティがあるかどうかを確認します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.hasOwnProperty, hasOwnProperty
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">パラメーターが存在する場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph>、それ以外は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">p</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">照合するプロパティです。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    オブジェクトに <codeph class="+ topic/ph pr-d/codeph ">p</codeph> パラメーターで指定されたプロパティがあるかどうかを確認します。 
    
    </apiDesc><example conref="examples\XML.hasOwnProperty.1.as" class="- topic/example "> 次の例では、<codeph class="+ topic/ph pr-d/codeph ">hasOwnProperty()</codeph> メソッドを使用してプロパティ（<codeph class="+ topic/ph pr-d/codeph ">b</codeph>）が存在することを確認してから、このプロパティを使用する式（<codeph class="+ topic/ph pr-d/codeph ">b == "11"</codeph>）を評価します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;foo>
            &lt;a />
            &lt;a>
                &lt;b>10&lt;/b>
            &lt;/a>
            &lt;a>
                &lt;b>11&lt;/b>
            &lt;/a>
        &lt;/foo>;
trace(xml.a.(hasOwnProperty("b") &amp;&amp; b == "11")); 
</codeblock> この例の最後の行が次のように記述されていると、<codeph class="+ topic/ph pr-d/codeph ">a</codeph> という名前の最初のエレメントに <codeph class="+ topic/ph pr-d/codeph ">b</codeph> という名前のプロパティが存在しないため、Flash Player は例外をスローします。
 <p class="- topic/p ">
 <pre xml:space="preserve" class="- topic/pre ">trace(xml.a.(b == "11"));</pre>
 </p>
</example><example conref="examples\XML.hasOwnProperty.2.as" class="- topic/example "> 次の例では、<codeph class="+ topic/ph pr-d/codeph ">hasOwnProperty()</codeph> メソッドを使用してプロパティ（<codeph class="+ topic/ph pr-d/codeph ">item</codeph>）が存在することを確認してから、このプロパティを使用する式（<codeph class="+ topic/ph pr-d/codeph ">item.contains("toothbrush")</codeph>）を評価します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;orders>
            &lt;order id='1'>
                &lt;item>toothbrush&lt;/item>
                &lt;item>toothpaste&lt;/item>
            &lt;/order>
            &lt;order>
                &lt;returnItem>shoe polish&lt;/returnItem>
            &lt;/order>
        &lt;/orders>;
trace(xml.order.(hasOwnProperty("item") &amp;&amp; item.contains("toothbrush"))); 
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:hasSimpleContent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasSimpleContent</apiName><shortdesc class="- topic/shortdesc ">
    XML オブジェクトに単純内容が含まれるかどうかを確認します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.hasSimpleContent, hasSimpleContent
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XML オブジェクトに単純内容が含まれる場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph>、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。
    
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML オブジェクトに単純内容が含まれるかどうかを確認します。XML オブジェクトが子エレメントを持たないテキストノード、属性ノード、または XML エレメントを表す場合には、このオブジェクトには単純内容が含まれます。コメントおよび処理命令を表す XML オブジェクトには単純内容は<i class="+ topic/ph hi-d/i ">含まれません</i>。
    
    </apiDesc><example conref="examples\XML.hasComplexContent.1.as" class="- topic/example "> 次の例は、単純内容を含む <codeph class="+ topic/ph pr-d/codeph ">a</codeph> という名前の 1 つのプロパティと、複合内容を含む <codeph class="+ topic/ph pr-d/codeph ">a</codeph> という名前の 1 つのプロパティを持つ XML オブジェクトを示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;foo>
            &lt;a>
                text
            &lt;/a>
            &lt;a>
                &lt;b/>
            &lt;/a>
        &lt;/foo>;
trace(xml.a[0].hasComplexContent()); // false
trace(xml.a[1].hasComplexContent()); // true

trace(xml.a[0].hasSimpleContent()); // true
trace(xml.a[1].hasSimpleContent()); // false
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/hasComplexContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasComplexContent()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:inScopeNamespaces" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">inScopeNamespaces</apiName><shortdesc class="- topic/shortdesc ">
    オブジェクトの親に基づいて、XML オブジェクトの名前空間を列挙します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.inScopeNamespaces, inScopeNamespaces
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Namespace オブジェクトの配列です。 
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    オブジェクトの親に基づいて、XML オブジェクトの名前空間を列挙します。 
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:insertChildAfter" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">insertChildAfter</apiName><shortdesc class="- topic/shortdesc ">
    指定された child2 パラメーターを、この XML オブジェクトの child1 パラメーターの後に挿入し、その結果のオブジェクトを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.insertChildAfter, insertChildAfter
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">結果として作成される XML オブジェクトまたは <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> です。
    
    </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">child1</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">child2</codeph> の前に挿入するソースオブジェクト内のオブジェクトです。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">child2</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">挿入するオブジェクトです。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    指定された <codeph class="+ topic/ph pr-d/codeph ">child2</codeph> パラメーターを、この XML オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">child1</codeph> パラメーターの後に挿入し、その結果のオブジェクトを返します。<codeph class="+ topic/ph pr-d/codeph ">child1</codeph> パラメーターが <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、このメソッドは <codeph class="+ topic/ph pr-d/codeph ">child2</codeph> の内容を、XML オブジェクトのすべての子の<i class="+ topic/ph hi-d/i ">前</i>、つまり<i class="+ topic/ph hi-d/i ">先頭</i>に挿入します。指定した <codeph class="+ topic/ph pr-d/codeph ">child1</codeph> が XML オブジェクトに存在しない場合、XML オブジェクトは変更されずに、<codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> が返されます。
    
    <p class="- topic/p ">テキスト、属性、コメント、パイなどのエレメントでない XML の子に対してこのメソッドを呼び出すと、<codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> を返します。</p>
    
    <p class="- topic/p ">XML ノードを削除するには、<codeph class="+ topic/ph pr-d/codeph ">delete</codeph>（XML）演算子を使用します。</p>
    
    </apiDesc><example conref="examples\XML.insertChildAfter.1.as" class="- topic/example "> 次の例では、XML オブジェクトの子エレメントの最後にエレメントを追加します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;menu>
            &lt;item>burger&lt;/item>
            &lt;item>soda&lt;/item>
        &lt;/menu>;
xml.insertChildAfter(xml.item[0], &lt;saleItem>fries&lt;/saleItem>);
trace(xml);
</codeblock> <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> の出力は次のようになります。
 <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph "> &lt;menu>
     &lt;item>burger&lt;/item>
     &lt;saleItem>fries&lt;/saleItem>
     &lt;item>soda&lt;/item>
 &lt;/menu></codeph></pre>
</example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/insertChildBefore()" class="- topic/link "><linktext class="- topic/linktext ">XML.insertChildBefore()</linktext></link><link href="operators.html#delete_(XML)" class="- topic/link "><linktext class="- topic/linktext ">delete（XML）演算子</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:insertChildBefore" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">insertChildBefore</apiName><shortdesc class="- topic/shortdesc ">
    指定された child2 パラメーターを、この XML オブジェクトの child1 パラメーターの前に挿入し、その結果のオブジェクトを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.insertChildBefore, insertChildBefore
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">結果として作成される XML オブジェクトまたは <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> です。
    
    </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">child1</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">child2</codeph> の後に挿入するソースオブジェクト内のオブジェクトです。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">child2</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">挿入するオブジェクトです。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    指定された <codeph class="+ topic/ph pr-d/codeph ">child2</codeph> パラメーターを、この XML オブジェクトの <codeph class="+ topic/ph pr-d/codeph ">child1</codeph> パラメーターの前に挿入し、その結果のオブジェクトを返します。<codeph class="+ topic/ph pr-d/codeph ">child1</codeph> パラメーターが <codeph class="+ topic/ph pr-d/codeph ">null</codeph> の場合、このメソッドは <codeph class="+ topic/ph pr-d/codeph ">child2</codeph> の内容を、XML オブジェクトのすべての子の<i class="+ topic/ph hi-d/i ">後</i>、つまり<i class="+ topic/ph hi-d/i ">最後</i>に挿入します。指定した <codeph class="+ topic/ph pr-d/codeph ">child1</codeph> が XML オブジェクトに存在しない場合、XML オブジェクトは変更されずに、<codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> が返されます。
    
    <p class="- topic/p ">テキスト、属性、コメント、パイなどのエレメントでない XML の子に対してこのメソッドを呼び出すと、<codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> を返します。</p>
    
    <p class="- topic/p ">XML ノードを削除するには、<codeph class="+ topic/ph pr-d/codeph ">delete</codeph>（XML）演算子を使用します。</p>
    
    </apiDesc><example conref="examples\XML.insertChildBefore.1.as" class="- topic/example "> 次の例では、XML オブジェクトの子エレメントの最後にエレメントを追加します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;menu>
            &lt;item>burger&lt;/item>
            &lt;item>soda&lt;/item>
        &lt;/menu>;
xml.insertChildBefore(xml.item[0], &lt;saleItem>fries&lt;/saleItem>);
trace(xml);
</codeblock> <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> の出力は次のようになります。
 <pre xml:space="preserve" class="- topic/pre ">
 &lt;menu>
     &lt;saleItem>fries&lt;/saleItem>
     &lt;item>burger&lt;/item>
     &lt;item>soda&lt;/item>
 &lt;/menu></pre>
</example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/insertChildAfter()" class="- topic/link "><linktext class="- topic/linktext ">XML.insertChildAfter()</linktext></link><link href="operators.html#delete_(XML)" class="- topic/link "><linktext class="- topic/linktext ">delete（XML）演算子</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:length" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">length</apiName><shortdesc class="- topic/shortdesc ">
    XML オブジェクトの場合、このメソッドは常に整数 1 を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.length, length
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">どのような XML オブジェクトに対しても、常に <codeph class="+ topic/ph pr-d/codeph ">1</codeph> を返します。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML オブジェクトの場合、このメソッドは常に整数 <codeph class="+ topic/ph pr-d/codeph ">1</codeph> を返します。XMLList クラスの <codeph class="+ topic/ph pr-d/codeph ">length()</codeph> メソッドは、1 つの値のみを含む XMLList オブジェクトの値 <codeph class="+ topic/ph pr-d/codeph ">1</codeph> を返します。
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:localName" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">localName</apiName><shortdesc class="- topic/shortdesc ">
    XML オブジェクトの修飾名のローカル名部分を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.localName, localName
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">String または <codeph class="+ topic/ph pr-d/codeph ">null</codeph> のいずれかのローカル名です。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML オブジェクトの修飾名のローカル名部分を指定します。
    
    </apiDesc><example conref="examples\XML.localName.1.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">localName()</codeph> メソッドの使用法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;soap:Envelope xmlns:soap="http://www.w3.org/2001/12/soap-envelope"
            soap:encodingStyle="http://www.w3.org/2001/12/soap-encoding">

                        &lt;soap:Body xmlns:wx = "http://example.com/weather">
                &lt;wx:forecast>
                    &lt;wx:city>Quito&lt;/wx:city>
                &lt;/wx:forecast>
            &lt;/soap:Body>
        &lt;/soap:Envelope>;
        
trace(xml.localName()); // Envelope
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:name" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
    XML オブジェクトの修飾名を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.name, name
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">修飾名には、QName または <codeph class="+ topic/ph pr-d/codeph ">null</codeph> のいずれかを指定します。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML オブジェクトの修飾名を指定します。 
    
    </apiDesc><example conref="examples\XML.name.1.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">name()</codeph> メソッドを使用して XML オブジェクトの修飾名を取得する方法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;soap:Envelope xmlns:soap="http://www.w3.org/2001/12/soap-envelope"
            soap:encodingStyle="http://www.w3.org/2001/12/soap-encoding">

                        &lt;soap:Body xmlns:wx = "http://example.com/weather">
                &lt;wx:forecast>
                    &lt;wx:city>Quito&lt;/wx:city>
                &lt;/wx:forecast>
            &lt;/soap:Body>
        &lt;/soap:Envelope>;
        
trace(xml.name().localName); // Envelope
trace(xml.name().uri); // "http://www.w3.org/2001/12/soap-envelope"
</codeblock></example><example conref="examples\XML.name.2.as" class="- topic/example "> 次の例は、XML プロパティ、テキストエレメント、および属性に対して呼び出す <codeph class="+ topic/ph pr-d/codeph ">name()</codeph> メソッドの使用法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;foo x="15" y="22">
            text
        &lt;/foo>;
        
trace(xml.name().localName); // foo
trace(xml.name().uri == ""); // true
trace(xml.children()[0]); // text
trace(xml.children()[0].name()); // null
trace(xml.attributes()[0]); // 15
trace(xml.attributes()[0].name()); // x
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/attributes()" class="- topic/link "><linktext class="- topic/linktext ">XML.attributes()</linktext></link><link href="operators.html#attribute_identifier" class="- topic/link "><linktext class="- topic/linktext ">attribute 識別子</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:namespaceDeclarations" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">namespaceDeclarations</apiName><shortdesc class="- topic/shortdesc ">
    親のコンテキストで XML オブジェクトに関連付けられている名前空間宣言を列挙します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.namespaceDeclarations, namespaceDeclarations
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Namespace オブジェクトの配列です。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    親のコンテキストで XML オブジェクトに関連付けられている名前空間宣言を列挙します。 
    
    </apiDesc><example conref="examples\XML.namespaceDeclarations.1.as" class="- topic/example "> 次の例は、XML オブジェクトの名前空間宣言を出力します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" 
            xmlns:dc="http://purl.org/dc/elements/1.1/" 
            xmlns="http://purl.org/rss/1.0/">

            &lt;!-- ... -->
            
        &lt;/rdf:RDF>;
                    
for (var i:uint = 0; i &lt; xml.namespaceDeclarations().length; i++) {
    var ns:Namespace = xml.namespaceDeclarations()[i]; 
    var prefix:String = ns.prefix;
    if (prefix == "") {
        prefix = "(default)";
    }
    trace(prefix + ":" , ns.uri);
}
</codeblock> <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> の出力は次のようになります。
 <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph ">rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns#
 dc: http://purl.org/dc/elements/1.1/
 (default): http://purl.org/rss/1.0/</codeph></pre>
</example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/namespace()" class="- topic/link "><linktext class="- topic/linktext ">XML.namespace()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:namespace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">namespace</apiName><shortdesc class="- topic/shortdesc ">
    パラメーターを指定しない場合、この XML オブジェクトの修飾名に関連付けられている名前空間を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.namespace, namespace
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">null</codeph> , <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>、または名前空間を返します。
    
    </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">prefix</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">照合する接頭辞です。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    パラメーターを指定しない場合、この XML オブジェクトの修飾名に関連付けられている名前空間を指定します。<codeph class="+ topic/ph pr-d/codeph ">prefix</codeph> パラメーターを指定した場合、<codeph class="+ topic/ph pr-d/codeph ">prefix</codeph> パラメーターに一致し、XML オブジェクトのスコープ内にある名前空間を返します。このような条件に一致する名前空間がなかった場合、メソッドは <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> を返します。
    
    </apiDesc><example conref="examples\XML.namespace.1.as" class="- topic/example "> 次の例では、<codeph class="+ topic/ph pr-d/codeph ">namespace()</codeph> メソッドを使用して XML オブジェクトの名前空間を取得し、それを <codeph class="+ topic/ph pr-d/codeph ">soap</codeph> という名前の Namespace オブジェクトに割り当てます。次にその Namespace オブジェクトを使用して <codeph class="+ topic/ph pr-d/codeph ">xml</codeph> オブジェクト（<codeph class="+ topic/ph pr-d/codeph ">xml.soap::Body[0]</codeph>）のプロパティを識別します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;soap:Envelope xmlns:soap="http://www.w3.org/2001/12/soap-envelope"
            soap:encodingStyle="http://www.w3.org/2001/12/soap-encoding">

                        &lt;soap:Body xmlns:wx = "http://example.com/weather">
                &lt;wx:forecast>
                    &lt;wx:city>Quito&lt;/wx:city>
                &lt;/wx:forecast>
            &lt;/soap:Body>
        &lt;/soap:Envelope>;
        
var soap:Namespace = xml.namespace();
trace(soap.prefix); // soap
trace(soap.uri); // http://www.w3.org/2001/12/soap-envelope

var body:XML = xml.soap::Body[0];
trace(body.namespace().prefix); // soap
trace(xml.namespace().uri); // http://www.w3.org/2001/12/soap-envelope
trace(body.namespace("wx").uri); // "http://example.com/weather"
</codeblock></example><example conref="examples\XML.namespace.2.as" class="- topic/example "> 次の例では、<codeph class="+ topic/ph pr-d/codeph ">namespace()</codeph> メソッドを使用し、ノードのデフォルトの名前空間と、特定の接頭辞（<codeph class="+ topic/ph pr-d/codeph ">"dc"</codeph>）の名前空間を取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" 
            xmlns:dc="http://purl.org/dc/elements/1.1/" 
            xmlns="http://purl.org/rss/1.0/">
                &lt;!-- ... -->
        &lt;/rdf:RDF>;
                    
trace(xml.namespace()); // http://www.w3.org/1999/02/22-rdf-syntax-ns#
trace(xml.namespace("dc")); // http://purl.org/dc/elements/1.1/
trace(xml.namespace("foo")); // undefined
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:nodeKind" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">nodeKind</apiName><shortdesc class="- topic/shortdesc ">
    ノードのタイプ（テキスト、コメント、処理命令、属性、またはエレメント）を指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.nodeKind, nodeKind
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">使用するノードタイプです。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    ノードのタイプ（テキスト、コメント、処理命令、属性、またはエレメント）を指定します。 
    
    </apiDesc><example conref="examples\XMLNodeKindExample1.as" class="- topic/example "> この例では、5 つのすべてのノードタイプをトレースします。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
XML.ignoreProcessingInstructions = false;

var xml:XML = 
    &lt;example id="10">
        &lt;!-- this is a comment -->
        &lt;?test this is a pi ?>
        and some text
    &lt;/example>;

trace(xml.nodeKind()); // element
trace(xml.children()[0].nodeKind()); // comment
trace(xml.children()[1].nodeKind()); // processing-instruction
trace(xml.children()[2].nodeKind()); // text
trace(xml.@id[0].nodeKind()); // attribute
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="operators.html#attribute_identifier" class="- topic/link "><linktext class="- topic/linktext ">attribute 識別子</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:normalize" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">normalize</apiName><shortdesc class="- topic/shortdesc ">
    XML オブジェクトとすべての子孫の XML オブジェクトについて、隣接するテキストノードを結合し、空のテキストノードを削除します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.normalize, normalize
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">結果として作成される、正規化された XML オブジェクトです。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML オブジェクトとすべての子孫の XML オブジェクトについて、隣接するテキストノードを結合し、空のテキストノードを削除します。
    
    </apiDesc><example conref="examples\XML.normalize.1.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">normalize()</codeph> メソッドを呼び出す場合の影響を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = &lt;body>&lt;/body>;
xml.appendChild("hello");
xml.appendChild(" world");
trace(xml.children().length()); // 2
xml.normalize();
trace(xml.children().length()); // 1
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:parent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">parent</apiName><shortdesc class="- topic/shortdesc ">
    XML オブジェクトの親を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.parent, parent
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">親ノードの XML 参照です。XML オブジェクトに親がない場合は <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> です。
    
    </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML オブジェクトの親を返します。XML オブジェクトに親がない場合、メソッドは、<codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> を返します。
    
    </apiDesc><example conref="examples\XML.parent.1.as" class="- topic/example "> 次の例では、<codeph class="+ topic/ph pr-d/codeph ">parent()</codeph> メソッドを使用して、XML 構造内の特定エレメントの親エレメントを識別します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;body>
        &lt;p id="p1">Hello&lt;/p>
        &lt;p id="p2">Test:
            &lt;ul>
                &lt;li>1&lt;/li>
                &lt;li>2&lt;/li>
            &lt;/ul>
        &lt;/p>
    &lt;/body>;
var node:XML = xml.p.ul.(li.contains("1"))[0]; // == &lt;ul> ... &lt;/ul>
trace(node.parent().@id); // p2
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:prependChild" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">prependChild</apiName><shortdesc class="- topic/shortdesc ">
    指定された child オブジェクトのコピーを、このエレメント内の既存のすべての XML プロパティの前に挿入します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.prependChild, prependChild
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">結果として作成される XML オブジェクトです。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">挿入するオブジェクトです。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    指定された <codeph class="+ topic/ph pr-d/codeph ">child</codeph> オブジェクトのコピーを、このエレメント内の既存のすべての XML プロパティの前に挿入します。
    
    <p class="- topic/p ">XML ノードを削除するには、<codeph class="+ topic/ph pr-d/codeph ">delete</codeph>（XML）演算子を使用します。</p> 
    
    </apiDesc><example conref="examples\XML.prependChild.1.as" class="- topic/example "> 次の例では、<codeph class="+ topic/ph pr-d/codeph ">prependChild()</codeph> メソッドを使用して、XML オブジェクトの子リストの先頭にエレメントを追加します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;body>
            &lt;p>hello&lt;/p>
        &lt;/body>;
        
xml.prependChild(&lt;p>world&lt;/p>);    
trace(xml.p[0].toXMLString()); // &lt;p>world&lt;/p>
trace(xml.p[1].toXMLString()); // &lt;p>hello&lt;/p>
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="operators.html#delete_(XML)" class="- topic/link "><linktext class="- topic/linktext ">delete（XML）演算子</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:processingInstructions" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">processingInstructions</apiName><shortdesc class="- topic/shortdesc ">
    name パラメーターを指定した場合、その name を持つ処理命令を含む XML オブジェクトのすべての子を列挙します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.processingInstructions, processingInstructions
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一致する子オブジェクトのリストです。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">*</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">照合する処理命令の名前です。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    <codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターを指定した場合、その <codeph class="+ topic/ph pr-d/codeph ">name</codeph> を持つ処理命令を含む XML オブジェクトのすべての子を列挙します。パラメーターを指定しなかった場合、メソッドは任意の処理命令を含む XML オブジェクトのすべての子を列挙します。
    
    </apiDesc><example conref="examples\XML.processingInstructions.1.as" class="- topic/example "> 次の例では、<codeph class="+ topic/ph pr-d/codeph ">processingInstructions()</codeph> メソッドを使用して、XML オブジェクトの処理命令の配列を取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreProcessingInstructions = false;
var xml:XML =
    &lt;body>
            foo
            &lt;?xml-stylesheet href="headlines.css" type="text/css" ?>
            &lt;?instructionX ?>
            
    &lt;/body>;

trace(xml.processingInstructions().length()); // 2
trace(xml.processingInstructions()[0].name()); // xml-stylesheet
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:propertyIsEnumerable" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">propertyIsEnumerable</apiName><shortdesc class="- topic/shortdesc ">
    XML オブジェクトに適用される for..in ステートメント内で反復処理されるプロパティセット内に、プロパティ p があるかどうかを確認します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.propertyIsEnumerable, propertyIsEnumerable
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">for..in</codeph> ステートメント内でプロパティを反復処理できる場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph>、それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">p</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">チェックするプロパティです。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    プロパティ <codeph class="+ topic/ph pr-d/codeph ">p</codeph> が、XMLList オブジェクトに適用される <codeph class="+ topic/ph pr-d/codeph ">for..in</codeph> ステートメント内で反復処理されるプロパティセット内にあるかどうかを確認します。<codeph class="+ topic/ph pr-d/codeph ">true</codeph> は、<codeph class="+ topic/ph pr-d/codeph ">toString(p) == "0"</codeph> の場合にのみ返されます。 
    
    </apiDesc><example conref="examples\XML.propertyIsEnumerable.1.as" class="- topic/example "> 次の例では、<codeph class="+ topic/ph pr-d/codeph ">propertyNameIsEnumerable()</codeph> メソッドは、XML オブジェクトの場合に値 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を、値 <codeph class="+ topic/ph pr-d/codeph ">0</codeph> に対してのみ返し、XMLList オブジェクトの場合は、XMLList オブジェクトの有効な各インデックス値に対して値 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;body>
             &lt;p>Hello&lt;/p>
               &lt;p>World&lt;/p>
        &lt;/body>;

trace(xml.propertyIsEnumerable(0)); // true
trace(xml.propertyIsEnumerable(1)); // false

for (var propertyName:String in xml) {
    trace(xml[propertyName]);
}

var list:XMLList = xml.p;
trace(list.propertyIsEnumerable(0)); // true
trace(list.propertyIsEnumerable(1)); // true
trace(list.propertyIsEnumerable(2)); // false

for (var propertyName:String in list) { 
    trace(list[propertyName]);
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:removeNamespace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">removeNamespace</apiName><shortdesc class="- topic/shortdesc ">
    このオブジェクトとすべての子孫に指定された名前空間を削除します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.removeNamespace, removeNamespace
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">結果として作成される XML オブジェクトのコピーです。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ns</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Namespace</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">削除する名前空間です。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    このオブジェクトとすべての子孫に指定された名前空間を削除します。名前空間がオブジェクトの修飾名またはオブジェクトの属性の修飾名によって参照されている場合、<codeph class="+ topic/ph pr-d/codeph ">removeNamespaces()</codeph> メソッドは名前空間を削除しません。
    
    </apiDesc><example conref="examples\XML.removeNamespace.1.as" class="- topic/example "> 次の例は、XML オブジェクトから名前空間宣言を削除する方法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" 
        xmlns:dc="http://purl.org/dc/elements/1.1/" 
        xmlns="http://purl.org/rss/1.0/">
    
        &lt;!-- ... -->
        
    &lt;/rdf:RDF>;

trace(xml.namespaceDeclarations().length); // 3
trace(xml.namespaceDeclarations()[0] is String); // 
var dc:Namespace = xml.namespace("dc");
xml.removeNamespace(dc);
trace(xml.namespaceDeclarations().length); // 2
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:replace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">replace</apiName><shortdesc class="- topic/shortdesc ">
    propertyName パラメーターで指定されたプロパティを、指定された value パラメーターに置き換えます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.replace, replace
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一致するプロパティが置き換えられた、結果として作成される XML オブジェクトです。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">propertyName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数値、XML エレメントセットの無修飾名、XML エレメントセットの修飾名、またはアスタリスクワイルドカード（"*"）を使用できます。無修飾名は、デフォルトの名前空間内での XML エレメントの識別に使用します。 
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">置換する値です。この値には、XML オブジェクト、XMLList オブジェクト、または <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> で変換可能な値を使用できます。 
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    <codeph class="+ topic/ph pr-d/codeph ">propertyName</codeph> パラメーターで指定されたプロパティを、指定された <codeph class="+ topic/ph pr-d/codeph ">value</codeph> パラメーターに置き換えます。<codeph class="+ topic/ph pr-d/codeph ">propertyName</codeph> に一致するプロパティがない場合、XML オブジェクトは変更されません。
    
    </apiDesc><example conref="examples\XML.replace.1.as" class="- topic/example "> 次の例では、1 番目のパラメーターに整数を指定して <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> メソッドを呼び出します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;body>
        &lt;p>Hello&lt;/p>
        &lt;p>World&lt;/p>
        &lt;hr/>
    &lt;/body>;

xml.replace(1, &lt;p>Bob&lt;/p>);
trace(xml);
</codeblock> この結果は、次の <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> 出力のようになります。
 <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph ">
 &lt;body>
     &lt;p>Hello&lt;/p>
     &lt;p>Bob&lt;/p>
     &lt;hr/>
 &lt;/body>
 </codeph></pre>
</example><example conref="examples\XML.replace.2.as" class="- topic/example "> 次の例は、1 番目のパラメーターにストリングを指定して <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> メソッドを呼び出します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;body>
        &lt;p>Hello&lt;/p>
        &lt;p>World&lt;/p>
        &lt;hr/>
    &lt;/body>;

xml.replace("p", &lt;p>Hi&lt;/p>); 
trace(xml);
</codeblock> この結果は、次の <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> 出力のようになります。
 
 <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph ">
 &lt;body>
     &lt;p>Hi&lt;/p>
     &lt;hr/>
 &lt;/body>;
 </codeph></pre>
</example><example conref="examples\XML.replace.3.as" class="- topic/example "> 次の例では、1 番目のパラメーターに QName を指定して <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> メソッドを呼び出します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;ns:body xmlns:ns = "myNS">
        &lt;ns:p>Hello&lt;/ns:p>
        &lt;ns:p>World&lt;/ns:p>
        &lt;hr/>
    &lt;/ns:body>;

var qname:QName = new QName("myNS", "p");
xml.replace(qname, &lt;p>Bob&lt;/p>);
trace(xml);

</codeblock> この結果は、次の <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> 出力のようになります。
 
 <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph ">
 &lt;ns:body xmlns:ns = "myNS">
     &lt;p>Bob&lt;/p>
     &lt;hr/>
 &lt;/ns:body>
 </codeph></pre>
</example><example conref="examples\XML.replace.4.as" class="- topic/example "> 次の例では、<codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> メソッドを呼び出します（1 番目のパラメーターにストリング <codeph class="+ topic/ph pr-d/codeph ">"*"</codeph> を指定）。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;body>
        &lt;p>Hello&lt;/p>
        &lt;p>World&lt;/p>
        &lt;hr/>
    &lt;/body>;

xml.replace("*", &lt;img src = "hello.jpg"/>);
trace(xml);
</codeblock> この結果は、次の <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> 出力のようになります。
 
 <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph ">
 &lt;body>
     &lt;img src="hello.jpg"/>
 &lt;/body>
 </codeph></pre>
</example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:setChildren" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setChildren</apiName><shortdesc class="- topic/shortdesc ">
    XML オブジェクトの子プロパティを、value パラメーターで指定された XML プロパティのセットに置き換えます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.setChildren, setChildren
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">結果として作成される XML オブジェクトです。 
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">置き換えに使用する XML プロパティです。単一の XML オブジェクト、または XMLList オブジェクトにすることができます。 
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML オブジェクトの子プロパティを、<codeph class="+ topic/ph pr-d/codeph ">value</codeph> パラメーターで指定された XML プロパティのセットに置き換えます。
    
    </apiDesc><example conref="examples\XML.setChildren.1.as" class="- topic/example "> 次の例では、まず、XML オブジェクトをパラメーターに指定して <codeph class="+ topic/ph pr-d/codeph ">setChildren()</codeph> メソッドを呼び出し、次に XMLList オブジェクトをパラメーターに指定して呼び出しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;body>
        &lt;p>Hello&lt;/p>
        &lt;p>World&lt;/p>
    &lt;/body>;

var list:XMLList = xml.p;

xml.setChildren(&lt;p>hello&lt;/p>);
trace(xml);

//    &lt;body>
//        &lt;p>hello&lt;/p>
//    &lt;/body>

xml.setChildren(list);
trace(xml);

//    &lt;body>
//        &lt;p>Hello&lt;/p>
//        &lt;p>World&lt;/p>
//    &lt;/body>
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:setLocalName" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setLocalName</apiName><shortdesc class="- topic/shortdesc ">
    XML オブジェクトのローカル名を、指定された name パラメーターに変更します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.setLocalName, setLocalName
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ローカル名に置き換える名前です。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML オブジェクトのローカル名を、指定された <codeph class="+ topic/ph pr-d/codeph ">name</codeph> パラメーターに変更します。 
    
    </apiDesc><example conref="examples\XML.setLocalName.1.as" class="- topic/example "> 次の例では、<codeph class="+ topic/ph pr-d/codeph ">setLocalName()</codeph> メソッドを使用して、XML エレメントのローカル名を変更します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;ns:item xmlns:ns="http://example.com">
        toothbrush
    &lt;/ns:item>;
    
xml.setLocalName("orderItem");
trace(xml.toXMLString()); // &lt;ns:orderItem xmlns:ns="http://example.com">toothbrush&lt;/ns:orderItem>
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:setName" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setName</apiName><shortdesc class="- topic/shortdesc ">
    XML オブジェクトの名前を、指定された修飾名または属性名に設定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.setName, setName
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">オブジェクトの新しい名前です。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML オブジェクトの名前を、指定された修飾名または属性名に設定します。 
    
    </apiDesc><example conref="examples\XML.setName.1.as" class="- topic/example "> 次の例では、<codeph class="+ topic/ph pr-d/codeph ">setName()</codeph> メソッドを使用して、XML エレメント名を変更します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;item>
        toothbrush
    &lt;/item>;
    
xml.setName("orderItem");
trace(xml.toXMLString()); // &lt;orderItem>toothbrush&lt;/orderItem>
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:setNamespace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setNamespace</apiName><shortdesc class="- topic/shortdesc ">
    XML オブジェクトに関連付けられている名前空間を設定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.setNamespace, setNamespace
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ns</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Namespace</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">新しい名前空間です。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML オブジェクトに関連付けられている名前空間を設定します。
    
    </apiDesc><example conref="examples\XML.setNamespace.1.as" class="- topic/example "> 次の例では、ある XML オブジェクトに定義した <codeph class="+ topic/ph pr-d/codeph ">soap</codeph> 名前空間を使用して、別の XML オブジェクト（<codeph class="+ topic/ph pr-d/codeph ">xml2</codeph>）の名前空間に適用します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml1:XML = 
        &lt;soap:Envelope xmlns:soap="http://www.w3.org/2001/12/soap-envelope"
            soap:encodingStyle="http://www.w3.org/2001/12/soap-encoding">
            &lt;!-- ... -->
        &lt;/soap:Envelope>;
var ns:Namespace = xml1.namespace("soap");

var xml2:XML = 
    &lt;Envelope>
        &lt;Body/>
    &lt;/Envelope>;
    
xml2.setNamespace(ns);

trace(xml2);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:setSettings" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setSettings</apiName><shortdesc class="- topic/shortdesc ">
    XML プロパティ ignoreComments、ignoreProcessingInstructions、ignoreWhitespace、prettyIndent、および prettyPrinting を取得します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.setSettings, setSettings
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rest</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">次の各プロパティを持つオブジェクトです。 
    
    <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreComments</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreProcessingInstructions</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">prettyIndent</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">prettyPrinting</codeph></li></ul>
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML プロパティ <codeph class="+ topic/ph pr-d/codeph ">ignoreComments</codeph>、<codeph class="+ topic/ph pr-d/codeph ">ignoreProcessingInstructions</codeph>、<codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph>、<codeph class="+ topic/ph pr-d/codeph ">prettyIndent</codeph>、<codeph class="+ topic/ph pr-d/codeph ">prettyPrinting</codeph> の値を設定します。デフォルト設定は次のとおりです。デフォルト設定は、<codeph class="+ topic/ph pr-d/codeph ">setObj</codeph> パラメーターが指定されていない場合に適用されます。
    
    <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">XML.ignoreComments = true</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">XML.ignoreProcessingInstructions = true</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">XML.ignoreWhitespace = true</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">XML.prettyIndent = 2</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">XML.prettyPrinting = true</codeph></li></ul>
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>このメソッドは XML クラスのインスタンスには適用しません。次のコードのように、<codeph class="+ topic/ph pr-d/codeph ">XML</codeph> に適用します。<codeph class="+ topic/ph pr-d/codeph ">XML.setSettings()</codeph> .</p>
    
    </apiDesc><example conref="examples\XML.defaultSettings.1.as" class="- topic/example "> 次の例は、XML オブジェクトを設定する前に、コメントおよび処理命令を配置するカスタム設定を適用する方法、別のXML オブジェクトを設定する前にデフォルト設定に戻す方法、さらに別の XML オブジェクトの設定のために再度カスタム設定を適用する方法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
XML.ignoreProcessingInstructions = false;
var customSettings:Object = XML.settings();

var xml1:XML = 
        &lt;foo>
            &lt;!-- comment -->
            &lt;?instruction ?>
        &lt;/foo>;
trace(xml1.toXMLString());
//    &lt;foo>
//        &lt;!-- comment -->
//         &lt;?instruction ?>
//    &lt;/foo>

XML.setSettings(XML.defaultSettings());
var xml2:XML = 
        &lt;foo>
            &lt;!-- comment -->
            &lt;?instruction ?>
        &lt;/foo>;
trace(xml2.toXMLString());
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/ignoreComments" class="- topic/link "><linktext class="- topic/linktext ">ignoreComments</linktext></link><link href="#XML/ignoreProcessingInstructions" class="- topic/link "><linktext class="- topic/linktext ">ignoreProcessingInstructions</linktext></link><link href="#XML/ignoreWhitespace" class="- topic/link "><linktext class="- topic/linktext ">ignoreWhitespace</linktext></link><link href="#XML/prettyIndent" class="- topic/link "><linktext class="- topic/linktext ">prettyIndent</linktext></link><link href="#XML/prettyPrinting" class="- topic/link "><linktext class="- topic/linktext ">prettyPrinting</linktext></link><link href="#XML/defaultSettings()" class="- topic/link "><linktext class="- topic/linktext ">defaultSettings()</linktext></link><link href="#XML/settings()" class="- topic/link "><linktext class="- topic/linktext ">settings()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:settings" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">settings</apiName><shortdesc class="- topic/shortdesc ">
    プロパティ ignoreComments、ignoreProcessingInstructions、ignoreWhitespace、prettyIndent、および prettyPrinting を取得します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.settings, settings
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">次の XML プロパティを持つオブジェクトです。
    <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreComments</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreProcessingInstructions</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">prettyIndent</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">prettyPrinting</codeph></li></ul>
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    プロパティ <codeph class="+ topic/ph pr-d/codeph ">ignoreComments</codeph>、<codeph class="+ topic/ph pr-d/codeph ">ignoreProcessingInstructions</codeph>、<codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph>、<codeph class="+ topic/ph pr-d/codeph ">prettyIndent</codeph>、<codeph class="+ topic/ph pr-d/codeph ">prettyPrinting</codeph> を取得します。
    
    </apiDesc><example conref="examples\XML.defaultSettings.1.as" class="- topic/example "> 次の例は、XML オブジェクトを設定する前に、コメントおよび処理命令を配置するカスタム設定を適用する方法、別のXML オブジェクトを設定する前にデフォルト設定に戻す方法、さらに別の XML オブジェクトの設定のために再度カスタム設定を適用する方法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
XML.ignoreProcessingInstructions = false;
var customSettings:Object = XML.settings();

var xml1:XML = 
        &lt;foo>
            &lt;!-- comment -->
            &lt;?instruction ?>
        &lt;/foo>;
trace(xml1.toXMLString());
//    &lt;foo>
//        &lt;!-- comment -->
//         &lt;?instruction ?>
//    &lt;/foo>

XML.setSettings(XML.defaultSettings());
var xml2:XML = 
        &lt;foo>
            &lt;!-- comment -->
            &lt;?instruction ?>
        &lt;/foo>;
trace(xml2.toXMLString());
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/ignoreComments" class="- topic/link "><linktext class="- topic/linktext ">XML.ignoreComments</linktext></link><link href="#XML/ignoreProcessingInstructions" class="- topic/link "><linktext class="- topic/linktext ">XML.ignoreProcessingInstructions</linktext></link><link href="#XML/ignoreWhitespace" class="- topic/link "><linktext class="- topic/linktext ">XML.ignoreWhitespace</linktext></link><link href="#XML/prettyIndent" class="- topic/link "><linktext class="- topic/linktext ">XML.prettyIndent</linktext></link><link href="#XML/prettyPrinting" class="- topic/link "><linktext class="- topic/linktext ">XML.prettyPrinting</linktext></link><link href="#XML/defaultSettings()" class="- topic/link "><linktext class="- topic/linktext ">XML.defaultSettings()</linktext></link><link href="#XML/setSettings()" class="- topic/link "><linktext class="- topic/linktext ">XML.setSettings()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:text" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">text</apiName><shortdesc class="- topic/shortdesc ">
    XML テキストノードを表す XML オブジェクトのすべての XML プロパティの XMLList オブジェクトを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.text, text
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">プロパティのリストです。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML テキストノードを表す XML オブジェクトのすべての XML プロパティの XMLList オブジェクトを返します。
    
    </apiDesc><example conref="examples\XML.text.1.as" class="- topic/example "> 次の例では、<codeph class="+ topic/ph pr-d/codeph ">text()</codeph> メソッドを使用して、XML オブジェクトのテキストノードを取得します。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML =
        &lt;body>
            text1
            &lt;hr/>
            text2
        &lt;/body>;
trace(xml.text()[0]); // text1
trace(xml.text()[1]); // text2
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
    XML オブジェクトのストリング表現を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.toString, toString 
    
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XML オブジェクトのストリング表現です。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML オブジェクトのストリング表現を返します。この変換の規則は、XML オブジェクトに単純内容が含まれるか、複合内容が含まれるかによって決まります。
    
    <ul class="- topic/ul "><li class="- topic/li ">XML オブジェクトに単純内容が含まれる場合、<codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> は XML オブジェクトのストリング内容を返し、開始タグ、属性、名前空間宣言、および終了タグを削除します。</li></ul>
    
    <ul class="- topic/ul "><li class="- topic/li "> XML オブジェクトに複合内容が含まれる場合、<codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> は、開始タグ、属性、名前空間宣言および終了タグを含み、XML オブジェクト全体を表す XML エンコードされた String を返します。</li></ul>
    
    <p class="- topic/p ">XML オブジェクト全体を毎回返すには、<codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> を使用します。</p>
    
    
    </apiDesc><example conref="examples\XMLToStringExample1.as" class="- topic/example "> 次の例は、XML オブジェクトに単純内容が含まれる場合に <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> メソッドによって何が返されるかを示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var test:XML = &lt;type name="Joe">example&lt;/type>;
trace(test.toString()); //example
</codeblock></example><example conref="examples\XMLToStringExample2.as" class="- topic/example "> 次の例は、XML オブジェクトに複合内容が含まれる場合に <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> メソッドによって何が返されるかを示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var test:XML = 
&lt;type name="Joe">
    &lt;base name="Bob">&lt;/base>
    example
&lt;/type>;
trace(test.toString());
  // &lt;type name="Joe">
  // &lt;base name="Bob"/>
  // example
  // &lt;/type> 
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/hasSimpleContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasSimpleContent()</linktext></link><link href="#XML/hasComplexContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasComplexContent()</linktext></link><link href="#XML/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">XML.toXMLString()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:toXMLString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toXMLString</apiName><shortdesc class="- topic/shortdesc ">
    XML オブジェクトのストリング表現を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.toXMLString, toXMLString
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XML オブジェクトのストリング表現です。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML オブジェクトのストリング表現を返します。<codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> メソッドとは異なり、<codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> メソッドは、XML オブジェクトに単純内容が含まれるか、複合内容が含まれるかに関係なく、常に XML オブジェクトの開始タグ、属性、および終了タグを返します。<codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> メソッドは、単純内容を持つ XML オブジェクトの開始タグ、属性、および終了タグを削除します。
      
    </apiDesc><example conref="examples\XML.toXMLString.1.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> メソッド（デフォルトでは、<codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> メソッドのすべてのパラメーターに適用される）を使った場合と、<codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> メソッドを使った場合の違いを示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML =
        &lt;p>hello&lt;/p>;
trace(xml); // hello
trace(xml.toXMLString()); // &lt;p>hello&lt;/p>
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/toString()" class="- topic/link "><linktext class="- topic/linktext ">XML.toString()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
    XML オブジェクトを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.valueOf, valueOf
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XML インスタンスのプリミティブ値です。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML オブジェクトを返します。 
    
    </apiDesc><example conref="examples\XML.valueOf.1.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">valueOf()</codeph> メソッドで返された値が、ソースの XML オブジェクトと同じであることを示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = &lt;p>hello&lt;/p>;
trace(xml.valueOf() === xml); // true
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="XML:ignoreComments:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ignoreComments</apiName><shortdesc class="- topic/shortdesc ">
    XML オブジェクトがソースの XML データを解析する際に、XML コメントを無視するかどうかを決定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.ignoreComments, ignoreComments
    </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML オブジェクトがソースの XML データを解析する際に、XML コメントを無視するかどうかを決定します。デフォルトでは、コメントを無視します（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）。XML コメントを含めるには、このプロパティを <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定します。<codeph class="+ topic/ph pr-d/codeph ">ignoreComments</codeph> プロパティは、<codeph class="+ topic/ph pr-d/codeph ">myXMLObject.child(~~).toXMLString()</codeph> などのメソッドの呼び出し時でなく、XML の解析時にのみ使用します。ソースの XML にコメントノードが含まれる場合、このノードは XML の解析時には保持されるか、または破棄されます。 
    
    </apiDesc><example conref="examples\XML.ignoreComments.1.as" class="- topic/example "> この例は、<codeph class="+ topic/ph pr-d/codeph ">XML.ignoreComments</codeph> を <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定した場合と <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定した場合の影響を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
var xml1:XML = 
        &lt;foo>
            &lt;!-- comment -->
        &lt;/foo>;
trace(xml1.toXMLString()); // &lt;foo>&lt;!-- comment -->&lt;/foo>

XML.ignoreComments = true;
var xml2:XML = 
        &lt;foo>
            &lt;!-- example -->
        &lt;/foo>;
trace(xml2.toXMLString()); // &lt;foo/>
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="#XML/child()" class="- topic/link "><linktext class="- topic/linktext ">XML.child()</linktext></link><link href="#XML/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">XML.toXMLString()</linktext></link></related-links></apiValue><apiValue id="XML:ignoreProcessingInstructions:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ignoreProcessingInstructions</apiName><shortdesc class="- topic/shortdesc ">
    XML オブジェクトがソースの XML データを解析する際に、XML 処理命令を無視するかどうかを決定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.ignoreProcessingInstructions, ignoreProcessingInstructions
    </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    XML オブジェクトがソースの XML データを解析する際に、XML 処理命令を無視するかどうかを決定します。デフォルトでは、処理命令を無視します（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）。XML 処理命令を含めるには、このプロパティを <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定します。<codeph class="+ topic/ph pr-d/codeph ">ignoreProcessingInstructions</codeph> プロパティは、<codeph class="+ topic/ph pr-d/codeph ">myXMLObject.child(~~).toXMLString()</codeph> などのメソッドの呼び出し時でなく、XML の解析時にのみ使用します。ソースの XML に処理命令ノードが含まれる場合、このノードは XML の解析時には保持されるか、または破棄されます。
    
    </apiDesc><example conref="examples\XML.ignoreProcessingInstructions.1.as" class="- topic/example "> この例は、<codeph class="+ topic/ph pr-d/codeph ">XML.ignoreProcessingInstructions</codeph> を <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定した場合と <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定した場合の影響を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreProcessingInstructions = false;
var xml1:XML = 
        &lt;foo>
            &lt;?exampleInstruction ?>
        &lt;/foo>;
trace(xml1.toXMLString()); // &lt;foo>&lt;?exampleInstruction ?>&lt;/foo>

XML.ignoreProcessingInstructions = true;
var xml2:XML = 
        &lt;foo>
            &lt;?exampleInstruction ?>
        &lt;/foo>;
trace(xml2.toXMLString()); // &lt;foo/>
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="#XML/child()" class="- topic/link "><linktext class="- topic/linktext ">XML.child()</linktext></link><link href="#XML/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">XML.toXMLString()</linktext></link></related-links></apiValue><apiValue id="XML:ignoreWhitespace:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ignoreWhitespace</apiName><shortdesc class="- topic/shortdesc ">
    テキストノードの先頭および最後の空白文字を、解析時に無視するかどうかを決定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.ignoreWhitespace, ignoreWhitespace
    </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    テキストノードの先頭および最後の空白文字を、解析時に無視するかどうかを決定します。デフォルトでは、空白文字を無視します（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）。テキストノードが 100% 空白文字で、<codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph> プロパティが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定されている場合、ノードは作成されません。テキストノード内の空白文字を表示するには、<codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph> プロパティを <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定します。 
    
    <p class="- topic/p ">XML オブジェクトを作成すると、<codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph> プロパティの現在の値がキャッシュされます。<codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph> を変更しても、既存の XML オブジェクトの動作は変化しません。</p>
    
    </apiDesc><example conref="examples\XML.ignoreWhitespace.1.as" class="- topic/example "> この例は、<codeph class="+ topic/ph pr-d/codeph ">XML.ignoreWhitespace</codeph> を <codeph class="+ topic/ph pr-d/codeph ">false</codeph> に設定した場合と <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定した場合の影響を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreWhitespace = false;
var xml1:XML = &lt;foo>    &lt;/foo>;
trace(xml1.children().length()); // 1

XML.ignoreWhitespace = true;
var xml2:XML = &lt;foo>    &lt;/foo>;
trace(xml2.children().length()); // 0
</codeblock></example></apiValueDetail></apiValue><apiValue id="XML:prettyIndent:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">prettyIndent</apiName><shortdesc class="- topic/shortdesc ">
    XML.prettyPrinting プロパティを true に設定した場合に、toString() メソッドと toXMLString() メソッドが適用するインデントの量を決定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.prettyIndent, prettyIndent
    </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> メソッドと <codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> メソッドが適用するインデントの量を決定します（<codeph class="+ topic/ph pr-d/codeph ">XML.prettyPrinting</codeph> プロパティを <codeph class="+ topic/ph pr-d/codeph ">true</codeph> に設定した場合）。インデントは、タブ文字でなく、空白文字で適用されます。デフォルト値は <codeph class="+ topic/ph pr-d/codeph ">2</codeph> です。
    
    </apiDesc><example conref="examples\XML.prettyIndent.1.as" class="- topic/example "> この例は、<codeph class="+ topic/ph pr-d/codeph ">XML.prettyIndent</codeph> 静的プロパティを設定した場合の影響を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = &lt;foo>&lt;bar/>&lt;/foo>;
XML.prettyIndent = 0;
trace(xml.toXMLString());

XML.prettyIndent = 1;
trace(xml.toXMLString());

XML.prettyIndent = 2;
trace(xml.toXMLString());
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="#XML/prettyPrinting" class="- topic/link "><linktext class="- topic/linktext ">prettyPrinting</linktext></link><link href="#XML/toString()" class="- topic/link "><linktext class="- topic/linktext ">toString()</linktext></link><link href="#XML/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">toXMLString()</linktext></link></related-links></apiValue><apiValue id="XML:prettyPrinting:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">prettyPrinting</apiName><shortdesc class="- topic/shortdesc ">
    toString() メソッドと toXMLString() メソッドが、タグ間の空白文字を正規化するかどうかを決定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.prettyPrinting, prettyPrinting
    </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> メソッドと <codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> メソッドが、タグ間の空白文字を正規化するかどうかを決定します。デフォルト値は <codeph class="+ topic/ph pr-d/codeph ">true</codeph> です。
    
    </apiDesc><example conref="examples\XML.prettyPrinting.1.as" class="- topic/example "> この例は、<codeph class="+ topic/ph pr-d/codeph ">XML.prettyPrinting</codeph> 静的プロパティを設定した場合の影響を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = &lt;foo>&lt;bar/>&lt;/foo>;
XML.prettyPrinting = false;
trace(xml.toXMLString());

XML.prettyPrinting = true;
trace(xml.toXMLString());
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="#XML/prettyIndent" class="- topic/link "><linktext class="- topic/linktext ">prettyIndent</linktext></link><link href="#XML/toString()" class="- topic/link "><linktext class="- topic/linktext ">toString()</linktext></link><link href="#XML/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">toXMLString()</linktext></link></related-links></apiValue></apiClassifier><apiOperation id="globalOperation:Array" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">Array</apiName><shortdesc class="- topic/shortdesc ">
	 新しい配列を作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ゼロ以上の長さの配列です。
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">引数を渡さない場合は空の配列が作成され、整数の引数を 1 つ渡すと特定の長さの配列が作成されます。また、1 つのオブジェクトを渡すと、指定したオブジェクトを含む配列が作成されます。
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 新しい配列を作成します。配列は 0 以上の長さにするか、1 つの指定したオブジェクトで設定された配列にすることができます。 
	 <ul class="- topic/ul "><li class="- topic/li ">引数なしで <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> を呼び出すと、空の配列が返されます。</li><li class="- topic/li ">単一の整数の引数を指定して <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> を呼び出すと、指定された長さの配列が返されますが、その各エレメントの値は未定義です。</li><li class="- topic/li ">オブジェクトを指定して <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> を呼び出すことで、指定したオブジェクトの 1 つのエレメントを含む配列が返されます。</li></ul>
	 <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> 関数の使用は、Array クラスのコンストラクタを使用した配列を作成する場合と<i class="+ topic/ph hi-d/i ">似ています</i>が、<codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> 関数で指定できるパラメーター値は 1 個または 0 個です。複数の値を持つ新しい配列を設定する場合、<codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> 関数は使用できません。
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b><codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> 関数を使用して新しい配列を作成し、複数の値をパラメーターとして渡して配列を設定しようとすると、コンパイラーエラーが発生します。<codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> 関数では 1 つのパラメーターのみを指定できます。複数の値を持つ配列を作成および設定するには、代わりに Array クラスコンストラクターを使用します。</p>
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> 関数はオブジェクトの型を配列にキャストしません。引数がプリミティブな値ではない場合は、明示的な型の変換や型のキャストには <codeph class="+ topic/ph pr-d/codeph ">as</codeph> 演算子を使用します。詳細については、この項の「例」のセクションを参照してください。<codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> 関数にパラメーターとしてオブジェクトを渡すと、オブジェクトをエレメントとして含む新しい配列が作成されます。</p>
	 </apiDesc><example conref="examples\Array.func.4.as" class="- topic/example "> 次の例は、引数がプリミティブな値でない場合の <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> 関数の動作を表しています。配列へのキャストの一般的な使用方法は、配列形式で値を保存する Object インスタンスの変換です。<codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> を、<codeph class="+ topic/ph pr-d/codeph ">Object</codeph> 型またはその他のプリミティブでないデータ型の引数を使って呼び出した場合は、オブジェクトへの参照が新しい配列のエレメントに格納されます。つまり、渡された唯一の引数がオブジェクトである場合、そのオブジェクトへの参照が新しい配列の最初のエレメントになります。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var obj:Object = [ "a", "b", "c" ];
      
var newArray:Array = Array( obj );

trace(newArray == obj);    // false
trace(newArray[0] == obj); // true
trace(newArray[0][0])      // a
trace(newArray[0][1])      // b
trace(newArray[0][2])      // c
</codeblock></example><example conref="examples\Array.func.5.as" class="- topic/example "> <codeph class="+ topic/ph pr-d/codeph ">obj</codeph> を配列にキャストするには、<codeph class="+ topic/ph pr-d/codeph ">as</codeph> 演算子を使用します。<codeph class="+ topic/ph pr-d/codeph ">obj</codeph> が有効な配列の場合は配列の参照が返され、そうでない場合は <codeph class="+ topic/ph pr-d/codeph ">null</codeph> が返されます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var obj:Object = [ "a", "b", "c" ];
      
var newArray:Array = obj as Array;

trace(newArray == obj); // true
trace(newArray[0]);     // a
trace(newArray[1]);     // b
trace(newArray[2]);     // c
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array" class="- topic/link "><linktext class="- topic/linktext ">Array クラス</linktext></link><link href="operators.html#as" class="- topic/link "><linktext class="- topic/linktext ">as 演算子</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:Boolean" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">Boolean</apiName><shortdesc class="- topic/shortdesc ">
	 expression パラメーターをブール値に変換し、その値を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ブール値への変換の結果です。
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">expression</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ブール値に変換する式またはオブジェクトです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">expression</codeph> パラメーターをブール値に変換し、その値を返します。 
	 <p class="- topic/p ">戻り値は、次の表に示すように、引数のデータ型および値によって異なります。</p>
	 
	 <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">入力値</entry><entry class="- topic/entry ">例</entry><entry class="- topic/entry ">戻り値</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean(0)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean(NaN)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">数値（<codeph class="+ topic/ph pr-d/codeph ">0</codeph> でも <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> でもない）</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean(4)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">空のストリング</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean("")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">空ではないストリング</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean("6")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean(null)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">undefined</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean(undefined)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Object クラスのインスタンス</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean(new Object())</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">引数なし</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean()</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row></tbody></tgroup></adobetable>
	 <p class="- topic/p ">ActionScript の以前のバージョンとは異なり、<codeph class="+ topic/ph pr-d/codeph ">Boolean()</codeph> 関数は Boolean クラスのコンストラクターと同じ結果を返します。</p>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:Number" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">Number</apiName><shortdesc class="- topic/shortdesc ">
	 指定した数値を Number 値に変換します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">変換された数値の値です。
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">expression</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数値に変換される値です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 指定した数値を Number 値に変換します。次の表に、さまざまな入力タイプの結果を示します。
	 
	 <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">入力タイプと値</entry><entry class="- topic/entry ">例</entry><entry class="- topic/entry ">戻り値</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">undefined</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number(undefined)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number(null)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number(true)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">1</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number(false)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number(NaN)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">空のストリング</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number("")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Number に変換されるストリング</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number("5")</codeph></entry><entry class="- topic/entry ">数値（例：<codeph class="+ topic/ph pr-d/codeph ">5</codeph>）</entry></row><row class="- topic/row "><entry class="- topic/entry ">Number に変換されないストリング</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number("5a")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph></entry></row></tbody></tgroup></adobetable>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:Object" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">Object</apiName><shortdesc class="- topic/shortdesc ">
	 ActionScript 3.0 ではすべての値がオブジェクトであるため、値に対して Object() を呼び出すと、その値が返されます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">value</codeph> パラメーターで指定された値です。
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">変換するオブジェクトまたは数値、ストリング、またはブール値です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ActionScript 3.0 ではすべての値がオブジェクトであるため、値に対して <codeph class="+ topic/ph pr-d/codeph ">Object()</codeph> を呼び出すと、その値が返されます。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:String" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">String</apiName><shortdesc class="- topic/shortdesc ">
	 指定されたパラメーターのストリング表現を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">expression</codeph> パラメーターに渡された値のストリング表現です。
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">expression</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> ストリングに変換される式です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 指定されたパラメーターのストリング表現を返します。
	 <p class="- topic/p ">次の表に、さまざまな入力タイプの結果を示します。</p>
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">入力タイプと値</entry><entry class="- topic/entry ">戻り値</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">undefined</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">undefined</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"null"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"true"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"false"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NaN"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">String</entry><entry class="- topic/entry ">String</entry></row><row class="- topic/row "><entry class="- topic/entry ">Object</entry><entry class="- topic/entry ">Object.toString()</entry></row><row class="- topic/row "><entry class="- topic/entry ">Number</entry><entry class="- topic/entry ">数値のストリング表現です。</entry></row></tbody></tgroup></adobetable>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:Vector" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">Vector</apiName><shortdesc class="- topic/shortdesc ">
	 エレメントが指定されたデータ型のインスタンスである新しい Vector インスタンスを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><commentPrivate>The reason this compiles with the .&lt;T> designation is because
	 a dummy class "T" is declared in the top level Vector.as file. If this file is
	 built without that one, the build will fail.
	 
	 </commentPrivate></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> 引数に、指定されたデータ型に変換できないエレメントが含まれる場合。
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> 配列のエレメントによって作成された Vector インスタンス。
	 
	 </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sourceArray</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">エレメントが結果ベクターのエレメントとなる Array または Vector インスタンス。関連するデータ型が指定されたデータ型と同じ Vector インスタンスである引数の場合、引数は関数の結果として返されます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 エレメントが指定されたデータ型のインスタンスである新しい Vector インスタンスを作成します。この関数を呼び出す場合、type パラメーターを使用して結果ベクターのエレメント（ベクターのベース型）のデータ型を指定します。<i class="+ topic/ph hi-d/i "/>この関数は、Vector インスタンスを宣言する場合、または新しい <codeph class="+ topic/ph pr-d/codeph ">Vector.&lt;T>()</codeph> コンストラクターを呼び出す場合に使用するシンタックスと同じシンタックスを使用します。
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">var v:Vector.&lt;String> = Vector.&lt;String>(["Hello", "World"]);</codeblock>
	 
	 <p class="- topic/p ">生成されるベクターには <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> 引数のエレメントの値が設定されます。<codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> 引数が Vector.&lt;T> インスタンス（ここで、<codeph class="+ topic/ph pr-d/codeph ">T</codeph> はベース型です）の場合、関数はそのベクターを返します。それ以外の場合、結果ベクターには <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> 配列（ベクター）のエレメントが設定されます。</p>
	 
	 <p class="- topic/p ">どちらの場合も、<codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> 引数のすべてのエレメントのデータ型が、関数呼出しで指定されたベース型 <codeph class="+ topic/ph pr-d/codeph ">T</codeph> と一致する必要があります。</p>
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> 引数が <codeph class="+ topic/ph pr-d/codeph ">length</codeph> 0 を持つ場合、関数は空のベクターを返します。</p>
	 
	 <p class="- topic/p ">ベクターが <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> 引数として渡され、そのベース型が <codeph class="+ topic/ph pr-d/codeph ">T</codeph> ではない場合、または配列が渡され、そのエレメントがデータ型 <codeph class="+ topic/ph pr-d/codeph ">T</codeph> のすべてのインスタンスではない場合、ベース型の値の変換が試行されます。値が自動的に変換される場合、結果ベクターは変換された値を取り込みます。変換が行われない場合、エラーが発生します。</p>
	 
	 <p class="- topic/p ">同様に、<codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> 引数のエレメントがベース型 <codeph class="+ topic/ph pr-d/codeph ">T</codeph> のサブクラスのインスタンスの場合、呼出しは成功し、エレメントが生成されるベクターに追加されます。<codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> 引数がベース型 <codeph class="+ topic/ph pr-d/codeph ">T</codeph> のサブクラスのベクターである場合でも、この機能は有効です。実際に、この機能は、ベース型 <codeph class="+ topic/ph pr-d/codeph ">T</codeph> を持つベクターを <codeph class="+ topic/ph pr-d/codeph ">T</codeph> のスーパークラスであるベース型を持つベクターに変換する唯一の方法です。</p>
	 
	 <p class="- topic/p ">例えば、次のコードは、Strict モードの場合にコンパイルエラーを引き起こすか、実行時に TypeError を引き起こします。これは、Vector.&lt;Sprite> を Vector.&lt;DisplayObject> 変数に割り当てようとするためです（Sprite は DisplayObject のサブクラスです）。</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 var v1:Vector.&lt;Sprite> = new Vector.&lt;Sprite>();
	 v1[0] = new Sprite();
	 var v2:Vector.&lt;DisplayObject> = v1;
	 </codeblock>
	 
	 <p class="- topic/p ">次の代替バージョンのコードは、Vector.&lt;Sprite> インスタンスを Vector.&lt;DisplayObject> インスタンスに正常にコピーします。</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 var v1:Vector.&lt;Sprite> = new Vector.&lt;Sprite>();
	 v1[0] = new Sprite();
	 var v2:Vector.&lt;DisplayObject> = Vector.&lt;DisplayObject>(v1);
	 </codeblock>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector" class="- topic/link "><linktext class="- topic/linktext ">Vector クラス</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:XMLList" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">XMLList</apiName><shortdesc class="- topic/shortdesc ">
     オブジェクトを XMLList オブジェクトに変換します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">変換するオブジェクトが保持していた値を含む XMLList オブジェクトです。
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">expression</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XMLList オブジェクトに変換されるオブジェクトです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     オブジェクトを XMLList オブジェクトに変換します。
     <p class="- topic/p ">次の表に、さまざまな入力タイプでの戻り値を示します。</p>
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">パラメータータイプ</entry><entry class="- topic/entry ">戻り値</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry ">Boolean</entry><entry class="- topic/entry ">値は最初にストリングに変換され、次に XMLList オブジェクトに変換されます。</entry></row><row class="- topic/row "><entry class="- topic/entry ">Null</entry><entry class="- topic/entry ">ランタイムエラーが発生します（TypeError 例外）。</entry></row><row class="- topic/row "><entry class="- topic/entry ">Number</entry><entry class="- topic/entry ">値は最初にストリングに変換され、次に XMLList オブジェクトに変換されます。</entry></row><row class="- topic/row "><entry class="- topic/entry ">Object</entry><entry class="- topic/entry ">値が String、Number、または Boolean の場合にのみ XMLList に変換します。それ以外の場合は、ランタイムエラーが発生します（TypeError 例外）。</entry></row><row class="- topic/row "><entry class="- topic/entry ">String</entry><entry class="- topic/entry ">値は XMLList オブジェクトに変換されます。</entry></row><row class="- topic/row "><entry class="- topic/entry ">未定義</entry><entry class="- topic/entry ">ランタイムエラーが発生します（TypeError 例外）。</entry></row><row class="- topic/row "><entry class="- topic/entry ">XML</entry><entry class="- topic/entry ">値は XMLList オブジェクトに変換されます。</entry></row><row class="- topic/row "><entry class="- topic/entry ">XMLList</entry><entry class="- topic/entry ">入力値は変更されずに返されます。</entry></row></tbody></tgroup></adobetable>
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/XML()" class="- topic/link "><linktext class="- topic/linktext ">XML()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:XML" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">XML</apiName><shortdesc class="- topic/shortdesc ">
	 オブジェクトを XML オブジェクトに変換します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">変換するオブジェクトが保持していた値を含む XML オブジェクトです。
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">expression</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XML に変換されるオブジェクトです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 オブジェクトを XML オブジェクトに変換します。 
	 <p class="- topic/p ">次の表に、さまざまな入力タイプでの戻り値を示します。</p>
	 	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">パラメータータイプ</entry><entry class="- topic/entry ">戻り値</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry ">Boolean</entry><entry class="- topic/entry ">値は最初にストリングに変換され、次に XML オブジェクトに変換されます。</entry></row><row class="- topic/row "><entry class="- topic/entry ">Null</entry><entry class="- topic/entry ">ランタイムエラーが発生します（TypeError 例外）。</entry></row><row class="- topic/row "><entry class="- topic/entry ">Number</entry><entry class="- topic/entry ">値は最初にストリングに変換され、次に XML オブジェクトに変換されます。</entry></row><row class="- topic/row "><entry class="- topic/entry ">Object</entry><entry class="- topic/entry ">値が String、Number、または Boolean の場合にのみ XML に変換されます。それ以外の場合は、ランタイムエラーが発生します（TypeError 例外）。</entry></row><row class="- topic/row "><entry class="- topic/entry ">String</entry><entry class="- topic/entry ">値が XML に変換されます。</entry></row><row class="- topic/row "><entry class="- topic/entry ">未定義</entry><entry class="- topic/entry ">ランタイムエラーが発生します（TypeError 例外）。</entry></row><row class="- topic/row "><entry class="- topic/entry ">XML</entry><entry class="- topic/entry ">入力値は変更されずに返されます。</entry></row><row class="- topic/row "><entry class="- topic/entry ">XMLList</entry><entry class="- topic/entry ">XMLList オブジェクトに XML 型のプロパティが 1 つだけ含まれている場合にのみ、XML オブジェクトを返します。それ以外の場合は、ランタイムエラーが発生します（TypeError 例外）。</entry></row></tbody></tgroup></adobetable>
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/XMLList()" class="- topic/link "><linktext class="- topic/linktext ">XMLList()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:decodeURIComponent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">decodeURIComponent</apiName><shortdesc class="- topic/shortdesc ">
	 エンコードされた URI コンポーネントをストリングにデコードします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">encodeURIComponent</codeph> 関数でエスケープされていたすべての文字が、アンエスケープされた表現に復元されたストリングです。
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uri</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">encodeURIComponent</codeph> 関数でエンコードされたストリングです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 エンコードされた URI コンポーネントをストリングにデコードします。<codeph class="+ topic/ph pr-d/codeph ">encodeURIComponent</codeph> 関数でエスケープされていたすべての文字が、エンコードされていない表現に復元されたストリングを返します。
	 <p class="- topic/p ">この関数は、URI ストリングの一部（URI コンポーネントと呼びます）のみの変換を目的とします。この点で、<codeph class="+ topic/ph pr-d/codeph ">decodeURI()</codeph> 関数とは異なります。URI コンポーネントは、<i class="+ topic/ph hi-d/i ">コンポーネントセパレーター</i>と呼ばれる特殊文字（<codeph class="+ topic/ph pr-d/codeph ">: / ; ?</codeph>）の間に表示される任意のテキストです。 URI コンポーネントの一般的な例は、"http" および "www.adobe.com" です。</p>
	 <p class="- topic/p ">この関数と <codeph class="+ topic/ph pr-d/codeph ">decodeURI()</codeph> のもう 1 つの重要な相違点は、この関数は URI コンポーネントを処理することを想定しているので、特殊なセパレーター文字（<codeph class="+ topic/ph pr-d/codeph ">; / ? : @ &amp; = + $ , #</codeph>）を表すエスケープシーケンスが、デコードの必要がある通常のテキストとして扱われることです。 </p>
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/decodeURI()" class="- topic/link "><linktext class="- topic/linktext ">decodeURI()</linktext></link><link href="#global/encodeURI()" class="- topic/link "><linktext class="- topic/linktext ">encodeURI()</linktext></link><link href="#global/encodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">encodeURIComponent()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:decodeURI" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">decodeURI</apiName><shortdesc class="- topic/shortdesc ">
	 エンコードされた URI をストリングにデコードします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">encodeURI</codeph> 関数でエスケープされていたすべての文字が、アンエスケープされた表現に復元されたストリングです。
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uri</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">encodeURI</codeph> 関数でエンコードされたストリングです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 エンコードされた URI をストリングにデコードします。<codeph class="+ topic/ph pr-d/codeph ">encodeURI</codeph> 関数でエンコードされていたすべての文字が、エンコードされていない表現に復元されたストリングを返します。
	 <p class="- topic/p ">次の表に、文字にデコードされない<i class="+ topic/ph hi-d/i "/>（<codeph class="+ topic/ph pr-d/codeph ">decodeURI</codeph> 関数において）エスケープシーケンスのセットを示します。この表にあるエスケープシーケンスをデコードするには、<codeph class="+ topic/ph pr-d/codeph ">decodeURIComponent()</codeph> を使用してください。</p>
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">デコードされないエスケープシーケンス</entry><entry class="- topic/entry ">相当する文字</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%23</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">#</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%24</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%26</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">&amp;</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%2B</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">+</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%2C</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">,</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%2F</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">/</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%3A</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">:</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%3B</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">;</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%3D</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">=</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%3F</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">?</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%40</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">@</codeph></entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\DecodeURIExample.as" class="- topic/example "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">package {
    import flash.display.Sprite;

    public class DecodeURIExample extends Sprite {
        public function DecodeURIExample() {
            var uri:String = "http://www.example.com/application.jsp?user=&lt;user name='some user'>&lt;/user>";
            var encoded:String = encodeURI(uri);
            var decoded:String = decodeURI(encoded);
            trace(uri);        // http://www.example.com/application.jsp?user=&lt;user name='some user'>&lt;/user>
            trace(encoded);    // http://www.example.com/application.jsp?user=%3Cuser%20name='some%20user'%3E%3C/user%3E
            trace(decoded);    // http://www.example.com/application.jsp?user=&lt;user name='some user'>&lt;/user>
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/decodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">decodeURIComponent()</linktext></link><link href="#global/encodeURI()" class="- topic/link "><linktext class="- topic/linktext ">encodeURI()</linktext></link><link href="#global/encodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">encodeURIComponent()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:encodeURIComponent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">encodeURIComponent</apiName><shortdesc class="- topic/shortdesc ">
	 ストリングを有効な URI コンポーネントにエンコードします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uri</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ストリングを有効な URI コンポーネントにエンコードします。URI のサブストリングをストリングに変換します。基本文字の非常に小さなグループに属していない限り、すべての文字が UTF-8 エスケープシーケンスとしてエンコードされます。
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">encodeURIComponent()</codeph> 関数は、URI ストリングの一部（URI コンポーネントと呼びます）のみの変換を目的とします。この点で、<codeph class="+ topic/ph pr-d/codeph ">encodeURI()</codeph> 関数とは異なります。URI コンポーネントは、<i class="+ topic/ph hi-d/i ">コンポーネントセパレーター</i>と呼ばれる特殊文字（<codeph class="+ topic/ph pr-d/codeph ">: / ; ?</codeph>）の間に表示される任意のテキストです。 URI コンポーネントの一般的な例は、"http" および "www.adobe.com" です。</p>
	 <p class="- topic/p ">この関数と <codeph class="+ topic/ph pr-d/codeph ">encodeURI()</codeph> のもう 1 つの重要な相違点は、この関数は URI コンポーネントを処理することを想定しているので、特殊なセパレーター文字（<codeph class="+ topic/ph pr-d/codeph ">; / ? : @ &amp; = + $ , #</codeph>）が、エンコードの必要がある通常のテキストとして扱われることです。 </p>
	 <p class="- topic/p ">次の表に、UTF-8 エスケープシーケンスに変換<i class="+ topic/ph hi-d/i ">されない</i>（<codeph class="+ topic/ph pr-d/codeph ">encodeURIComponent</codeph> 関数で変換されない）すべての文字を示します。</p>
	 <adobetable class="innertable"><tgroup cols="1" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">エンコードされない文字</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0 1 2 3 4 5 6 7 8 9</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">a b c d e f g h i j k l m n o p q r s t u v w x y z</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">- _ . ! ~ ~~ ' ( )</codeph></entry></row></tbody></tgroup></adobetable>	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/decodeURI()" class="- topic/link "><linktext class="- topic/linktext ">decodeURI()</linktext></link><link href="#global/decodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">decodeURIComponent()</linktext></link><link href="#global/encodeURI()" class="- topic/link "><linktext class="- topic/linktext ">encodeURI()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:encodeURI" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">encodeURI</apiName><shortdesc class="- topic/shortdesc ">
	 ストリングを有効な URI（Uniform Resource Identifier）にエンコードします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">特定の文字が UTF-8 エスケープシーケンスとしてエンコードされているストリングです。
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uri</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">完全な URI を表すストリングです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ストリングを有効な URI（Uniform Resource Identifier）にエンコードします。完全 URI をストリングに変換します。基本文字の小さなグループに属していない限り、すべての文字が UTF-8 エスケープシーケンスとしてエンコードされます。
	 <p class="- topic/p ">次の表に、UTF-8 エスケープシーケンスに変換<i class="+ topic/ph hi-d/i ">されない</i>（<codeph class="+ topic/ph pr-d/codeph ">encodeURI</codeph> 関数で変換されない）すべての文字を示します。</p>
	 <adobetable class="innertable"><tgroup cols="1" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">エンコードされない文字</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0 1 2 3 4 5 6 7 8 9</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">a b c d e f g h i j k l m n o p q r s t u v w x y z</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">; / ? : @ &amp; = + $ , #</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">- _ . ! ~ ~~ ' ( )</codeph></entry></row></tbody></tgroup></adobetable>
	 </apiDesc><example conref="examples\EncodeURIExample.as" class="- topic/example "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">package {
    import flash.display.Sprite;

    public class EncodeURIExample extends Sprite {
        public function EncodeURIExample() {
            var uri:String = "http://www.example.com/application.jsp?user=&lt;user name='some user'>&lt;/user>";
            var encoded:String = encodeURI(uri);
            var decoded:String = decodeURI(encoded);
            trace(uri);        // http://www.example.com/application.jsp?user=&lt;user name='some user'>&lt;/user>
            trace(encoded);    // http://www.example.com/application.jsp?user=%3Cuser%20name='some%20user'%3E%3C/user%3E
            trace(decoded);    // http://www.example.com/application.jsp?user=&lt;user name='some user'>&lt;/user>
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/decodeURI()" class="- topic/link "><linktext class="- topic/linktext ">decodeURI()</linktext></link><link href="#global/decodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">decodeURIComponent()</linktext></link><link href="#global/encodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">encodeURIComponent()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:escape" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">escape</apiName><shortdesc class="- topic/shortdesc ">
	 パラメーターをストリングに変換し、URL エンコード形式にエンコードします。この場合、英数字以外のほとんどの文字は % が付いた 16 進シーケンスで置き換えられます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">URL エンコードされたストリングです。
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">str</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリングに変換し、URL エンコードする対象の式です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 パラメーターをストリングに変換し、URL エンコード形式にエンコードします。この場合、英数字以外のほとんどの文字は <codeph class="+ topic/ph pr-d/codeph ">%</codeph> が付いた 16 進シーケンスで置き換えられます。URL エンコードされたストリング内のパーセント記号（<codeph class="+ topic/ph pr-d/codeph ">%</codeph>）は、エスケープ文字の開始を表すもので、剰余演算子（<codeph class="+ topic/ph pr-d/codeph ">%</codeph>）ではありません。
	 <p class="- topic/p ">次の表に、エスケープシーケンスに変換<i class="+ topic/ph hi-d/i ">されない</i>（<codeph class="+ topic/ph pr-d/codeph ">escape()</codeph> 関数で変換されない）すべての文字を示します。</p>
	 <adobetable class="innertable"><tgroup cols="1" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">エンコードされない文字</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0 1 2 3 4 5 6 7 8 9</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">a b c d e f g h i j k l m n o p q r s t u v w x y z</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">@ - _ . ~~ + /</codeph></entry></row></tbody></tgroup></adobetable>	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>特殊なセパレーター文字（<codeph class="+ topic/ph pr-d/codeph ">@ + /</codeph>）を通常のテキストとしてエンコードするには、<codeph class="+ topic/ph pr-d/codeph ">escape()</codeph> 関数ではなく <codeph class="+ topic/ph pr-d/codeph ">encodeURIComponent()</codeph> 関数を使用します。</p>
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/unescape()" class="- topic/link "><linktext class="- topic/linktext ">unescape()</linktext></link><link href="#global/encodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">encodeURIComponent()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:int" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">int</apiName><shortdesc class="- topic/shortdesc ">
	 指定した数値を整数値に変換します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">変換された整数値です。
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">整数に変換される値です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 指定した数値を整数値に変換します。10 進数値は小数点で切り捨てられます。
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/uint()" class="- topic/link "><linktext class="- topic/linktext ">uint()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:isFinite" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">isFinite</apiName><shortdesc class="- topic/shortdesc ">
	 値が有限大である場合は true を返し、Infinity または -Infinity である場合は false を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0." class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">有限大である場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返し、無限大または負の無限大である場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">num</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">有限大または無限大として評価する数値です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 値が有限の場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返します。<codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返すのは、値が <codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> または <codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph> である場合です。<codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> または <codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph> は、0 による除算などの数学的なエラーの可能性を示します。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:isNaN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">isNaN</apiName><shortdesc class="- topic/shortdesc ">
	 値が NaN（非数）の場合は、true を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返します（値が <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>（非数）の場合）。それ以外の場合は、<codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">num</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">評価する数値または数式です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返します（値が <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>（非数）の場合）。<codeph class="+ topic/ph pr-d/codeph ">isNaN()</codeph> 関数は、数式が正常に数値に評価されるかどうかをチェックするのに便利です。<codeph class="+ topic/ph pr-d/codeph ">isNaN()</codeph> は、<codeph class="+ topic/ph pr-d/codeph ">parseInt()</codeph> 関数および <codeph class="+ topic/ph pr-d/codeph ">parseFloat()</codeph> 関数から返された値をチェックするために最もよく使用されます。<codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> 値は、"非数" の値を表す Number データ型の特殊メンバーです。 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> 値は、int または uint データ型のメンバーではありません。</p>
	 <p class="- topic/p ">次の表に、さまざまな入力タイプや値での <codeph class="+ topic/ph pr-d/codeph ">isNaN()</codeph> の戻り値を示します。 コンパイラー警告が Strict モードに設定されている場合、次の演算の一部がコンパイラー警告を生成する場合があります。</p>
	 <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">入力タイプと値</entry><entry class="- topic/entry ">例</entry><entry class="- topic/entry ">戻り値</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry ">0 を 0 で除算</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isNaN(0/0)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">ゼロ以外の数値を <codeph class="+ topic/ph pr-d/codeph ">0</codeph> で除算</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isNaN(5/0)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">負の数の平方根</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isNaN(Math.sqrt(-1))</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">0 ～ 1 以外の数値のアークサイン</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isNaN(Math.asin(2))</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Number に変換できるストリング</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isNaN("5")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Number に変換できないストリング</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isNaN("5a")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row></tbody></tgroup></adobetable>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:isXMLName" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">isXMLName</apiName><shortdesc class="- topic/shortdesc ">
	 指定されたストリングが、XML エレメントまたは属性に対して有効な名前かどうかを判断します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返します（<codeph class="+ topic/ph pr-d/codeph ">str</codeph> 引数が有効な XML 名である場合）。それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">str</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">評価するストリングです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 指定されたストリングが、XML エレメントまたは属性に対して有効な名前かどうかを判断します。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:parseFloat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">parseFloat</apiName><shortdesc class="- topic/shortdesc ">
	 ストリングを浮動小数に変換します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数値または <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>（非数）です。
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">str</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">読み込まれて浮動小数に変換されるストリングです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ストリングを浮動小数に変換します。この関数は、初期数の一部でない文字に達するまで、ストリング内の数値を読み取り（<i class="+ topic/ph hi-d/i ">解析</i>し）、結果を返します。ストリングが解析できる数値で始まっていない場合、<codeph class="+ topic/ph pr-d/codeph ">parseFloat()</codeph> は <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> を返します。有効な整数の前の空白は、後続の非数値文字と同様に無視されます。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:parseInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">parseInt</apiName><shortdesc class="- topic/shortdesc ">
	 ストリングを整数に変換します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数値または <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>（非数）です。
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">str</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">整数に変換されるストリングです。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">radix</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">解析する数値の基数を表す整数です。有効な値は、2 ～ 36 です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 ストリングを整数に変換します。パラメーターで指定されたストリングを数値に変換できない場合は <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> を返します。0x から始まる整数は、16 進数と解釈されます。ActionScript の以前のバージョンと異なり、0 から始まる整数は 8 進数と解釈<i class="+ topic/ph hi-d/i ">されません</i>。8 進数には 8 の基数を指定する必要があります。有効な整数の前の空白およびゼロは、後続の非数値文字と同様に無視されます。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:trace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">trace</apiName><shortdesc class="- topic/shortdesc ">
	 デバッグ中に式を表示、またはログファイルに書き込みます。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">arguments</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">評価する 1 つ以上のカンマ区切りの式です。複数の式がある場合、出力では各式の間に空白が挿入されます。
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 デバッグ中に式を表示、またはログファイルに書き込みます。単一のトレースステートメントに複数の引数を指定できます。trace ステートメント内の引数に String 以外のデータ型が含まれている場合は、trace 関数によって、そのデータ型に関連付けられた <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> メソッドが呼び出されます。例えば、引数がブール値の場合、trace 関数で <codeph class="+ topic/ph pr-d/codeph ">Boolean.toString()</codeph> が呼び出され、戻り値が表示されます。 
	 </apiDesc><example conref="examples\TraceExample.as" class="- topic/example "> 次の例は、クラス <codeph class="+ topic/ph pr-d/codeph ">TraceExample</codeph> を使用して、<codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> メソッドで単純なストリングをプリントする方法を示しています。通常、メッセージは "デバッグ" コンソールに出力されます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class TraceExample extends Sprite {

        public function TraceExample() {
            trace("Hello World");
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="globalOperation:uint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">uint</apiName><shortdesc class="- topic/shortdesc ">
	 指定した数値を符号なし整数値に変換します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">変換された整数値です。
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">整数に変換される値です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 指定した数値を符号なし整数値に変換します。10 進数値は小数点で切り捨てられます。
	 <p class="- topic/p ">次の表に、さまざまな入力タイプや値での <codeph class="+ topic/ph pr-d/codeph ">uint()</codeph> の戻り値を示します。</p>
	 <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">入力タイプと値</entry><entry class="- topic/entry ">例</entry><entry class="- topic/entry ">戻り値</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">undefined</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(undefined)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(null)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(0)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(NaN)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">正の浮動小数</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(5.31)</codeph></entry><entry class="- topic/entry ">切り捨てられた符号なし整数（例：<codeph class="+ topic/ph pr-d/codeph ">5</codeph>）</entry></row><row class="- topic/row "><entry class="- topic/entry ">負の浮動小数</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(-5.78)</codeph></entry><entry class="- topic/entry ">切り捨てて整数にし、負の整数の規則を適用します。</entry></row><row class="- topic/row "><entry class="- topic/entry ">負の整数</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(-5)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint.MAX_VALUE</codeph> と負の整数の合計（例えば、<codeph class="+ topic/ph pr-d/codeph ">uint.MAX_VALUE + (-5)</codeph>）</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(true)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">1</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(false)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">空のストリング</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint("")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Number に変換されるストリング</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint("5")</codeph></entry><entry class="- topic/entry ">数値</entry></row><row class="- topic/row "><entry class="- topic/entry ">Number に変換されないストリング</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint("5a")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row></tbody></tgroup></adobetable>

	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/int()" class="- topic/link "><linktext class="- topic/linktext ">int()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:unescape" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">unescape</apiName><shortdesc class="- topic/shortdesc ">
	 パラメーター str をストリングとして評価し、URL エンコードされた形式からストリングをデコード（すべての 16 進シーケンスを ASCII 文字に変換）して、ストリングを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">URL エンコードされたパラメーターからデコードしたストリングです。
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">str</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">16 進シーケンスをエスケープするストリングです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 パラメーター <codeph class="+ topic/ph pr-d/codeph ">str</codeph> をストリングとして評価し、URL エンコードされた形式からストリングをデコード（すべての 16 進シーケンスを ASCII 文字に変換）して、ストリングを返します。
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="globalValue:-Infinity" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">-Infinity</apiName><shortdesc class="- topic/shortdesc ">
 負の Infinity を表す特殊な値です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 負の <codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> を表す特殊な値です。この定数の値は、<codeph class="+ topic/ph pr-d/codeph ">Number.NEGATIVE_INFINITY</codeph> と同じです。
 </apiDesc><example conref="examples\Constants.NegInfinity.1.as" class="- topic/example "> 0 で除算した結果が <codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph> になるのは、除数が負の数値である場合のみです。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

trace(0 / 0);  // NaN
trace(7 / 0);  // Infinity
trace(-7 / 0); // -Infinity


</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="#Number/NEGATIVE_INFINITY" class="- topic/link "><linktext class="- topic/linktext ">Number.NEGATIVE_INFINITY</linktext></link></related-links></apiValue><apiValue id="globalValue:Infinity" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">Infinity</apiName><shortdesc class="- topic/shortdesc ">
 正の Infinity を表す特殊な値です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 正の <codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> を表す特殊な値です。この定数の値は、<codeph class="+ topic/ph pr-d/codeph ">Number.POSITIVE_INFINITY</codeph> と同じです。
 </apiDesc><example conref="examples\Constants.Infinity.1.as" class="- topic/example "> 0 で除算した結果が <codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> になるのは、除数が正の数値である場合のみです。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

trace(0 / 0);  // NaN
trace(7 / 0);  // Infinity
trace(-7 / 0); // -Infinity


</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="#Number/POSITIVE_INFINITY" class="- topic/link "><linktext class="- topic/linktext ">Number.POSITIVE_INFINITY</linktext></link></related-links></apiValue><apiValue id="globalValue:NaN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NaN</apiName><shortdesc class="- topic/shortdesc ">
 "非数"（NaN）の値を表す Number データ型の特殊メンバーです。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 "非数"（<codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>）の値を表す Number データ型の特殊メンバーです。数式の結果が数値として表現できない値になる場合、その結果は <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> になります。次のリストでは、結果が <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> になる一般的な式について説明します。
 <ul class="- topic/ul "><li class="- topic/li ">除数も 0 の場合にのみ、0 による除算の結果が <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> になります。 除数が 0 よりも大きい場合は、0 による除算の結果は <codeph class="+ topic/ph pr-d/codeph "><codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph></codeph> になります。 除数が 0 よりも小さい場合は、0 による除算の結果は <codeph class="+ topic/ph pr-d/codeph "> <codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph> </codeph> になります。</li><li class="- topic/li ">負の数の平方根です。</li><li class="- topic/li ">有効な範囲（0 ～ 1）外の数値のアークサインです。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> から減算された <codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> です。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> または <codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph>（<codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> または <codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph> で除算）です。</li><li class="- topic/li ">0 で乗算された <codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> または <codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph> です。</li></ul>
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> 値は、int または uint データ型のメンバーではありません。</p>
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> 値は、<codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> を含む他のどの値とも等しいと見なされないため、等価演算子を使用して、式が <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> であるかどうかをテストできません。数値が <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> 関数かどうかを判別するには、<codeph class="+ topic/ph pr-d/codeph ">isNaN()</codeph> を使用します。</p>
 
 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#global/isNaN()" class="- topic/link "><linktext class="- topic/linktext ">isNaN()</linktext></link><link href="#Number/NaN" class="- topic/link "><linktext class="- topic/linktext ">Number.NaN</linktext></link></related-links></apiValue><apiValue id="globalValue:undefined" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">undefined</apiName><shortdesc class="- topic/shortdesc ">
 初期化されていない型指定のない変数、または初期化されていないダイナミックオブジェクトプロパティに適用される特殊な値です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiType value="" name="type" class="- topic/state reference/state apiRef/apiType "/></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 初期化されていない型指定のない変数、または初期化されていないダイナミックオブジェクトプロパティに適用される特殊な値です。ActionScript 3.0 では、型指定のない変数のみが値 <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> を保持できます。ただしこれは、ActionScript 1.0 および ActionScript 2.0 には当てはまりません。例えば、次の変数は型指定も初期化も行われていないため、いずれも <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> になります。
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">var foo;</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">var bar:~~;</codeph></li></ul>
 <p class="- topic/p ">また、<codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> 値は初期化されていない、または定義されていないダイナミックオブジェクトのプロパティにも適用されます。例えば、オブジェクトが Object クラスのインスタンスの場合、動的に割り当てられたプロパティに値が割り当てられるまで、そのプロパティの値は <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> です。
 </p>
 <p class="- topic/p ">さまざまな関数で <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> が使用されている場合は、結果が異なります。</p>
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">String(undefined)</codeph> によって返される値は <codeph class="+ topic/ph pr-d/codeph ">"undefined"</codeph> です（<codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> はストリングに変換されます）。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Number(undefined)</codeph> によって返される値は <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> です。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">int(undefined)</codeph> および <codeph class="+ topic/ph pr-d/codeph ">uint(undefined)</codeph> によって返される値は 0 です。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Object(undefined)</codeph> によって返される値は、新しい Object インスタンスです。</li><li class="- topic/li ">値 <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> を型指定されている変数に割り当てると、その値はそのデータ型のデフォルト値に変換されます。</li></ul>
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> を <codeph class="+ topic/ph pr-d/codeph ">null</codeph> と混同しないようにしてください。<codeph class="+ topic/ph pr-d/codeph ">null</codeph> と <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> を等価演算子（<codeph class="+ topic/ph pr-d/codeph ">==</codeph>）で比較すると、結果は true になります。ただし、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> と <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> を厳密な等価演算子（<codeph class="+ topic/ph pr-d/codeph ">===</codeph>）で比較すると、結果は false になります。</p>
 </apiDesc><example conref="examples\Constants.undefined.1.as" class="- topic/example "> 次の例では、型指定されていない変数 <codeph class="+ topic/ph pr-d/codeph ">myVar</codeph> が宣言されていますが、初期化されていません。変数の型が指定されていないため、<codeph class="+ topic/ph pr-d/codeph ">myVar</codeph> の値は <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> です。変数に型注釈があるか、または特殊な（~~）型指定されていない注釈（<codeph class="+ topic/ph pr-d/codeph ">var myVar:~~;</codeph>）が使用されているかは関係ありません。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

// trace value of untyped and uninitialized variable
var myVar;
trace(myVar); // undefined
</codeblock></example><example conref="examples\Constants.undefined.2.as" class="- topic/example "> 同じ規則が、初期化されていないダイナミックオブジェクトのプロパティに適用されます。例えば、インスタンス <codeph class="+ topic/ph pr-d/codeph ">obj</codeph>（ダイナミッククラス <codeph class="+ topic/ph pr-d/codeph ">A</codeph>）が指定された場合、<codeph class="+ topic/ph pr-d/codeph ">obj.propName</codeph>（<codeph class="+ topic/ph pr-d/codeph ">obj</codeph> インスタンスの初期化されていないプロパティ）の値は、<codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> です。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

dynamic class A {}
var obj:A = new A()

// trace undefined property of obj
trace(obj.propName); // undefined

</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="statements.html#null" class="- topic/link "><linktext class="- topic/linktext ">null</linktext></link></related-links></apiValue><apiClassifier languages="" id="globalClassifier:uint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">uint</apiName><shortdesc class="- topic/shortdesc ">
 uint クラスには、32 ビットの符号なし整数を表すデータ型を操作するメソッドがあります。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">uint object, uint, built-in class
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 uint クラスには、32 ビットの符号なし整数を表すデータ型を操作するメソッドがあります。符号なし整数は正のみなので、最大値は int クラスの値の 2 倍になります。
 <p class="- topic/p ">uint クラスで表される値の範囲は、0 ～ 4,294,967,295（2^32-1）です。</p>
 <p class="- topic/p ">uint オブジェクトは、uint 型の変数を宣言して変数にリテラル値を割り当てることによって作成することができます。uint 型の変数のデフォルト値は <codeph class="+ topic/ph pr-d/codeph ">0</codeph> です。</p>
 <p class="- topic/p ">uint クラスは主に、int データ型が適さない、ピクセルカラー値（ARGB および RGBA）やその他の状況で役に立ちます。例えば、255 のアルファ値で白のカラー値を表す数値 0xFFFFFFFF は int 値の有効な範囲外なので、int データ型を使用して表すことはできません。</p> 
 
 <p class="- topic/p ">次の例では、uint オブジェクトを作成し、<codeph class="+ topic/ph pr-d/codeph "> toString()</codeph> メソッドを呼び出します。</p>
 <pre xml:space="preserve" class="- topic/pre ">
 var myuint:uint = 1234;
 trace(myuint.toString()); // 1234
 </pre>
 <p class="- topic/p ">次の例では、コンストラクターを使用せずに、<codeph class="+ topic/ph pr-d/codeph ">MIN_VALUE</codeph> プロパティの値を変数に割り当てます。</p>
 <pre xml:space="preserve" class="- topic/pre ">
 var smallest:uint = uint.MIN_VALUE;
 trace(smallest.toString()); // 0
 </pre> 
 
 </apiDesc><example conref="examples\UintExample.as" class="- topic/example "> 次の例では、uint <codeph class="+ topic/ph pr-d/codeph ">i</codeph> を <codeph class="+ topic/ph pr-d/codeph ">for</codeph> ループ内で宣言し、0 ～ 9 の桁を出力します（uint のデフォルトが 0 のため）。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;

    public class UintExample extends Sprite {
        public function UintExample() {
            for(var i:uint; i &lt; 10; i++) {
                trace(i);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="int.html" class="- topic/link "><linktext class="- topic/linktext ">int</linktext></link><link href="Number.html" class="- topic/link "><linktext class="- topic/linktext ">Number</linktext></link></related-links><apiConstructor id="uint:uint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">uint</apiName><shortdesc class="- topic/shortdesc ">
	 新しい uint オブジェクトを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">new number, constructor
	  
	  </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">num</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">作成される uint オブジェクトの数値、または数値に変換される値です。<codeph class="+ topic/ph pr-d/codeph ">num</codeph> を指定しない場合のデフォルト値は <codeph class="+ topic/ph pr-d/codeph ">0</codeph> です。
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 新しい uint オブジェクトを作成します。uint 型の変数を作成して、リテラル値を割り当てることができます。<codeph class="+ topic/ph pr-d/codeph ">new uint()</codeph> コンストラクターは、主にプレースホルダーとして使用します。uint オブジェクトは、パラメーターをプリミティブ値に変換する <codeph class="+ topic/ph pr-d/codeph ">uint()</codeph> 関数とは異なります。
	 
	 </apiDesc><example class="- topic/example ">次のコードは、2 つの新しい uint オブジェクトを作成します。1 つ目はリテラル値を割り当てて、2 つ目はコンストラクター関数を使用して作成します。
	 <pre xml:space="preserve" class="- topic/pre ">
	 var n1:uint = 3;
	 var n2:uint = new uint(10);
	 </pre>
	 
	 </example></apiConstructorDetail></apiConstructor><apiOperation id="uint:AS3:toExponential" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toExponential</apiName><shortdesc class="- topic/shortdesc ">
      数値のストリング表現を指数表現で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> 引数が 0 ～ 20 の範囲を超える場合、例外がスローされます。
	  </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fractionDigits</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">必要な小数の桁数を表す 0 ～ 20 の整数です。
      </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      数値のストリング表現を指数表現で返します。ストリングには、<codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> パラメーターでの指定に従って小数点の前に 1 桁、小数点以下に最大 20 桁が含まれます。
      </apiDesc><example conref="examples\Number.toExponential.1.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">toExponential(2)</codeph> を使用して、ストリングを指数表現で返す方法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 315003;
trace(num.toExponential(2)); // 3.15e+5

</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="uint:AS3:toFixed" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toFixed</apiName><shortdesc class="- topic/shortdesc ">
     数値のストリング表現を固定小数点表現で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> 引数が 0 ～ 20 の範囲を超える場合、例外がスローされます。
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fractionDigits</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">必要な小数の桁数を表す 0 ～ 20 の整数です。
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     数値のストリング表現を固定小数点表現で返します。固定小数点表現とは、<codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> パラメーターの指定に従って、小数点以下の特定の桁数をストリングに含めたものです。<codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> パラメーターの有効範囲は 0 ～ 20 です。 この範囲外の値を指定すると例外がスローされます。
     
     </apiDesc><example conref="examples\Number.toFixed.1.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">toFixed(3)</codeph> を使用して、小数点以下 3 桁に四捨五入したストリングを返す方法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 7.31343;
trace(num.toFixed(3)); // 7.313
</codeblock></example><example conref="examples\Number.toFixed.2.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">toFixed(2)</codeph> を使用して、末尾にゼロを追加したストリングを返す方法を示しています。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 4;
trace(num.toFixed(2)); // 4.00
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="uint:AS3:toPrecision" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toPrecision</apiName><shortdesc class="- topic/shortdesc ">
      数値のストリング表現を指数表現または固定小数点表現で返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">precision</codeph> 引数が 1 ～ 21 の範囲を超える場合、例外がスローされます。
	  </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">precision</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">結果のストリングに必要な桁数を表す 1 ～ 21 の整数です。
      </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      数値のストリング表現を指数表現または固定小数点表現で返します。ストリングには、<codeph class="+ topic/ph pr-d/codeph ">precision</codeph> パラメーターで指定された桁数が含まれます。
      </apiDesc><example conref="examples\Number.toPrecision.1.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">toPrecision(3)</codeph> を使用して、ストリングを 3 桁のみで返す方法を示しています。指数表現は必要ないので、ストリングは固定小数点表現で表されます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 31.570;
trace(num.toPrecision(3)); // 31.6
</codeblock></example><example conref="examples\Number.toPrecision.2.as" class="- topic/example "> 次の例は、<codeph class="+ topic/ph pr-d/codeph ">toPrecision(3)</codeph> を使用して、ストリングを 3 桁のみで返す方法を示しています。結果の数値には固定小数点表現に必要な桁が含まれないため、ストリングは指数表現で表されます。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 4000;
trace(num.toPrecision(3)); // 4.00e+3
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="uint:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 uint オブジェクトのストリング表現を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">uint, uint.tostring, tostring
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">uint オブジェクトのストリング表現です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">radix</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数値からストリングへの変換に使用する基数（2 ～ 36）を指定します。<codeph class="+ topic/ph pr-d/codeph ">radix</codeph> パラメーターを指定しない場合、デフォルト値は <codeph class="+ topic/ph pr-d/codeph ">10</codeph> です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 uint オブジェクトのストリング表現を返します。
	 
     </apiDesc><example class="- topic/example ">次の例では、<codeph class="+ topic/ph pr-d/codeph ">radix</codeph> パラメーターに 2 および 8 を使用し、数値 9 に対応する表現を含むストリング値を返します。
	 <pre xml:space="preserve" class="- topic/pre ">
	 var myuint:uint = 9;
	 trace(myuint.toString(2)); // 1001
	 trace(myuint.toString(8)); // 11
	 </pre>
	 次の例では、16 進数の値を作成します。
	 <pre xml:space="preserve" class="- topic/pre ">
	 var r:uint = 250;
	 var g:uint = 128;
	 var b:uint = 114;
	 var rgb:String = "0x" + r.toString(16) + g.toString(16) + b.toString(16);
	 trace(rgb); // 0xfa8072 
	 </pre>
	 
	 </example></apiOperationDetail></apiOperation><apiOperation id="uint:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
	 指定された uint オブジェクトのプリミティブな uint 型の値を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.valueof, valueof, value of
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">この uint オブジェクトのプリミティブな uint 型の値です。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 指定された uint オブジェクトのプリミティブな uint 型の値を返します。
	 
	 </apiDesc><example class="- topic/example ">次の例では、<codeph class="+ topic/ph pr-d/codeph ">numSocks</codeph> オブジェクトのプリミティブ値を出力します。
	 <pre xml:space="preserve" class="- topic/pre ">
	 var numSocks:uint = 2;
	 trace(numSocks.valueOf()); // 2
	 </pre>
	 
	 </example></apiOperationDetail></apiOperation><apiValue id="uint:MAX_VALUE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MAX_VALUE</apiName><shortdesc class="- topic/shortdesc "> 
	表現可能な 32 ビット符号なし整数の最大値、4,294,967,295 です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">uint, uint.max_value, max_value, max value
	 
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">4294967295</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	表現可能な 32 ビット符号なし整数の最大値、4,294,967,295 です。
	
   	</apiDesc><example class="- topic/example ">次の ActionScript は、<codeph class="+ topic/ph pr-d/codeph ">uint</codeph> の表現可能な最大値および最小値を表示します。
	<pre xml:space="preserve" class="- topic/pre ">
	trace("uint.MIN_VALUE = " + uint.MIN_VALUE);
	trace("uint.MAX_VALUE = " + uint.MAX_VALUE);
	</pre>
	<p class="- topic/p ">値は次のとおりです。</p>
	<pre xml:space="preserve" class="- topic/pre ">
	uint.MIN_VALUE = 0
	uint.MAX_VALUE = 4294967295
	</pre>
	
	</example></apiValueDetail></apiValue><apiValue id="uint:MIN_VALUE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MIN_VALUE</apiName><shortdesc class="- topic/shortdesc ">
	 表現可能な符号なし整数の最小値、0 です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">uint, uint.min_value, min_value, min value
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 表現可能な符号なし整数の最小値、<codeph class="+ topic/ph pr-d/codeph ">0</codeph> です。
	 
	 </apiDesc><example class="- topic/example ">次の ActionScript は、<codeph class="+ topic/ph pr-d/codeph ">uint</codeph> の表現可能な最大値および最小値を表示します。
	 <pre xml:space="preserve" class="- topic/pre ">
	 trace("uint.MIN_VALUE = " + uint.MIN_VALUE);
	 trace("uint.MAX_VALUE = " + uint.MAX_VALUE);
	 </pre>
	 <p class="- topic/p ">値は次のとおりです。</p>
	 <pre xml:space="preserve" class="- topic/pre ">
	 uint.MIN_VALUE = 0
	 uint.MAX_VALUE = 4294967295
	 </pre>
     
     </example></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:Vector" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Vector</apiName><shortdesc class="- topic/shortdesc ">
 Vector クラスを使用すると、ベクターにアクセスして操作することができます。ベクターとはすべてのエレメントが同じデータ型を持つ配列です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector, Vector object, built-in class
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">ベクターを定義できます（型指定された配列)。
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Vector クラスを使用すると、ベクターにアクセスして操作することができます。ベクターとはすべてのエレメントが同じデータ型を持つ配列です。ベクターのエレメントのデータ型は、ベクターのベース型と呼ばれています。<i class="+ topic/ph hi-d/i "/>ベース型は、ビルトインクラスとカスタムクラスを含む任意のクラスです。ベース型は、Vector 変数の宣言時とクラスコンストラクターの呼び出しによるインスタンスの作成時に指定されます。
 
 <p class="- topic/p ">配列の場合と同様に、配列アクセス演算子（<codeph class="+ topic/ph pr-d/codeph ">[]</codeph>）を使用すると、ベクターエレメントの値を設定または取得できます。また、いくつかのベクターのメソッドは、エレメントの値を設定および取得するためのメカニズムを備えています。これらのメソッドには、<codeph class="+ topic/ph pr-d/codeph ">push()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">pop()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">shift()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">unshift()</codeph> などがあります。Vector オブジェクトのプロパティとメソッドは、配列のプロパティとメソッドと似ており、ほとんどの場合は同じです。すべてのエレメントが同じデータ型を持つ配列を使用する場合には、通常は Vector インスタンスが推奨されます。ただし、Vector インスタンスは密な配列であり、インデックスごとに値（または <codeph class="+ topic/ph pr-d/codeph ">null</codeph>）を持つ必要があります。Array インスタンスにはこの制限はありません。</p>
 
 <p class="- topic/p ">ベクターのベース型は、後置型パラメーターシンタックスを使用して指定されます。型パラメーターシンタックスは、ドット（<codeph class="+ topic/ph pr-d/codeph ">.</codeph>）、左山括弧（<codeph class="+ topic/ph pr-d/codeph ">&lt;</codeph>）、クラス名、右山括弧（<codeph class="+ topic/ph pr-d/codeph ">></codeph>）で構成されるシーケンスです。次に例を示します。</p>
 
 <p class="- topic/p ">この例の最初の行では、変数 <codeph class="+ topic/ph pr-d/codeph ">v</codeph> が Vector.&lt;String> インスタンスとして宣言されます。 つまり、この行は String インスタンスのみ保持することができ、String インスタンスのみ取得できるベクター（配列）を表します。2 番目の行は、同じ Vector 型（つまり、エレメントがすべて String オブジェクトであるベクター）のインスタンスを構築し、<codeph class="+ topic/ph pr-d/codeph ">v</codeph> に割り当てます。</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var v:Vector.&lt;String>;
 v = new Vector.&lt;String>();
 </codeblock>
 
 
 
  
 
 
 
  
 
 
 
 <p class="- topic/p ">Vector.&lt;T> データ型によって宣言された変数は、同じベース型 <codeph class="+ topic/ph pr-d/codeph ">T</codeph> を使用して構築された Vector インスタンスのみ格納することができます。例えば、新しい <codeph class="+ topic/ph pr-d/codeph ">Vector.&lt;String>()</codeph> を呼び出すことによって構築されたベクターは、Vector.&lt;int> データ型によって宣言された変数に割り当てることはできません。ベース型は完全に一致する必要があります。例えば、次のコードは、オブジェクトのベース型が宣言された変数のベース型と同じでないため（Sprite が DisplayObject のサブクラスであっても）コンパイルされません。</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 // This code doesn't compile even though Sprite is a DisplayObject subclass
 var v:Vector.&lt;DisplayObject> = new Vector.&lt;Sprite>();
 </codeblock>
 
 <p class="- topic/p ">ベース型 <codeph class="+ topic/ph pr-d/codeph ">T</codeph> を持つベクターを <codeph class="+ topic/ph pr-d/codeph ">T</codeph> のスーパークラスのベクターに変換するには、<codeph class="+ topic/ph pr-d/codeph ">Vector()</codeph> グローバル関数を使用します。</p>
 
 <p class="- topic/p ">データ型の制限に加えて、Vector クラスには Array クラスと区別される次のようなその他の制限があります。</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">ベクターは高密度の配列です。位置 1 ～ 6 に値がない場合でもインデックス 0 と 7 に値を指定することができる配列とは異なり、ベクターでは各インデックスに値（または <codeph class="+ topic/ph pr-d/codeph ">null</codeph>）を指定する必要があります。</li><li class="- topic/li ">ベクターは、オプションで固定長、つまり含まれるエレメントの数を変更できないように設定できます。</li><li class="- topic/li ">ベクターのエレメントへのアクセスは範囲チェックが行われます。最後のエレメント（<codeph class="+ topic/ph pr-d/codeph ">length - 1</codeph>）より長いインデックスから値を読み取ることはできません。現在の最後のインデックスを越えて値を設定することはできません（つまり、既存のインデックスまたはインデックス <codeph class="+ topic/ph pr-d/codeph ">[length]</codeph> でのみ値を設定することができます）。</li></ul>
 
 <p class="- topic/p ">このような制限の結果として、Vector インスタンスには、エレメントがすべて単一クラスのインスタンスとなる Array インスタンスにはない、次の 3 つの主要な利点があります。</p>
 <ul class="- topic/ul "><li class="- topic/li ">パフォーマンス：Array インスタンスを使用するよりも、Vector インスタンスを使用する方が、配列エレメントのアクセスと繰り返しが高速になります。</li><li class="- topic/li ">型の安全性：strict モードでは、コンパイラーでデータ型エラーを特定できます。このようなデータ型エラーの例としては、ベクターに不正なデータ型の値を割り当てたり、ベクターから値を読み取るときに誤ったデータ型を要求したりすることが挙げられます。ただし、<codeph class="+ topic/ph pr-d/codeph ">push()</codeph> メソッドまたは <codeph class="+ topic/ph pr-d/codeph ">unshift()</codeph> メソッドを使用してベクターに値を追加する場合、引数のデータ型はコンパイル時にチェックされないことに注意してください。その代わりに、実行時にチェックされます。</li><li class="- topic/li ">信頼性：実行時範囲チェック（固定長チェック）は、Array に対する信頼性を著しく高めます。</li></ul> 
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="operators.html#array_access" class="- topic/link "><linktext class="- topic/linktext ">[] array access</linktext></link><link href="package.html#Vector()" class="- topic/link "><linktext class="- topic/linktext ">Vector() グローバル関数</linktext></link><link href="#Array" class="- topic/link "><linktext class="- topic/linktext ">Array クラス</linktext></link></related-links><apiConstructor id="Vector:Vector" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Vector</apiName><shortdesc class="- topic/shortdesc ">
     指定されたベース型を持つベクターを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ベクターの初期長さ（エレメント数）です。このパラメーターが 0 より大きい場合、指定された数のベクターエレメントが作成され、ベース型に適したデフォルト値が設定されます（参照型の場合、<codeph class="+ topic/ph pr-d/codeph ">null</codeph>）。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fixed</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ベクターの長さが固定されるか（<codeph class="+ topic/ph pr-d/codeph ">true</codeph>）、または変更できるか（<codeph class="+ topic/ph pr-d/codeph ">false</codeph>）を指定します。この値は <codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> プロパティを使用して設定することもできます。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定されたベース型を持つベクターを作成します。
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">Vector.&lt;T>()</codeph> コンストラクターを呼び出すときに、型パラメーターシンタックスを使用してベース型を指定します。型パラメーターシンタックスは、ドット（<codeph class="+ topic/ph pr-d/codeph ">.</codeph>）、左山括弧（<codeph class="+ topic/ph pr-d/codeph ">&lt;</codeph>）、クラス名、右山括弧（<codeph class="+ topic/ph pr-d/codeph ">></codeph>）で構成されるシーケンスです。次に例を示します。</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var v:Vector.&lt;String> = new Vector.&lt;String>();
     </codeblock>
     
     
     
     
     
     <p class="- topic/p ">配列または他のベクター（異なるベース型を持つベクターなど）から Vector インスタンスを作成するには、<codeph class="+ topic/ph pr-d/codeph ">Vector()</codeph> グローバル関数を使用します。</p>
       
     <p class="- topic/p ">事前に値が設定された Vector インスタンスを作成するには、後述するパラメーターではなく、次のシンタックスを使用します。</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     // var v:Vector.&lt;T> = new &lt;T>[E0, ..., En-1 ,];
     // For example: 
     var v:Vector.&lt;int> = new &lt;int>[0,1,2,];
     </codeblock>
     
     <p class="- topic/p ">このシンタックスには、次の情報が適用されます。 
     <ul class="- topic/ul "><li class="- topic/li ">このシンタックスは、Flash Professional CS5 以降、Flash Builder 4 以降および Flex 4 以降でサポートされます。 </li><li class="- topic/li "> 末尾のカンマは省略してもかまいません。 </li><li class="- topic/li "> 配列内の空白のアイテムはサポートされていません。<codeph class="+ topic/ph pr-d/codeph ">var v:Vector.&lt;int> = new &lt;int>[0,,2,]</codeph> のようなステートメントは、コンパイラーエラーをスローします。</li><li class="- topic/li ">Vector インスタンスのデフォルトの長さは指定できません。指定はできませんが、デフォルトの長さは初期化リスト内のエレメントの数と同じになります。 </li><li class="- topic/li ">Vector インスタンスを固定長にするかどうかは指定できません。代わりに、<codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> プロパティを使用します。 </li><li class="- topic/li "> 値として渡されたアイテムが指定した型と一致しない場合、データの損失またはエラーが発生する可能性があります。次に実際の使用例を示します。</li><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var v:Vector.&lt;int> = new &lt;int>[4.2]; // compiler error when running in strict mode
     trace(v[0]); //returns 4 when not running in strict mode
     </codeblock></ul> </p>
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="#Vector/fixed" class="- topic/link "><linktext class="- topic/linktext ">fixed</linktext></link><link href="package.html#Vector()" class="- topic/link "><linktext class="- topic/linktext ">Vector() グローバル関数</linktext></link></related-links></apiConstructor><apiOperation id="Vector:AS3:concat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">concat</apiName><shortdesc class="- topic/shortdesc ">
     パラメーターで指定されたエレメントをベクター内のエレメントと連結して、新しいベクターを作成します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.concat, concat, concatenate
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">引数がベース型のインスタンスではない場合で、ベース型に変換できない場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このベクターの後にパラメーターのエレメントが続くベクターと同じベース型を持つベクター。
     
     </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">新しいベクターに連結されるこのベクターのベース型の 1 つ以上の値。 
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">パラメーターに指定されたエレメントを連結します。
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     パラメーターで指定されたエレメントをベクター内のエレメントと連結して、新しいベクターを作成します。パラメーターでベクターを指定すると、そのベクターのエレメントが連結されます。パラメーターを渡さない場合、新しいベクターは元のベクターの複製（浅い複製）になります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:AS3:every" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">every</apiName><shortdesc class="- topic/shortdesc ">
    指定された関数について false を返すアイテムに達するまで、ベクター内の各アイテムにテスト関数を実行します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ブール値です。指定された関数について、ベクター内のいずれかのアイテムが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返す場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返します。それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ベクター内の各アイテムについて実行する関数です。この関数は、ベクターの現在のアイテム、アイテムのインデックス、および Vector オブジェクトの 3 つの引数によって呼び出されます。
    <pre xml:space="preserve" class="- topic/pre ">function callback(item:T, index:int, vector:Vector.&lt;T>):Boolean {
       // your code here
    }
    </pre> 
    
    <p class="- topic/p ">コールバック関数はブール値を返します。</p>
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">関数が呼び出されるときにコールバック関数の識別子 <codeph class="+ topic/ph pr-d/codeph ">this</codeph> が参照するオブジェクトです。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    指定された関数について <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返すアイテムに達するまで、ベクター内の各アイテムにテスト関数を実行します。 このメソッドを使用して、ベクター内のすべてのアイテムがある基準（値が特定の数値より小さいなど）を満たしているかどうかを判別できます。
    
    <p class="- topic/p ">このメソッドで、2 番目のパラメーター <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> は、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> でなければなりません（最初のパラメーター <codeph class="+ topic/ph pr-d/codeph ">callback</codeph> がメソッド閉包である場合）。これは、このメソッドの最も一般的な使用方法です。</p>
    
    <p product="flash" class="- topic/p ">ただし、Flash Professional を使用して、メインタイムライン上のフレームで関数を作成し、それを異なる <codeph class="+ topic/ph pr-d/codeph ">this</codeph> コンテキストで呼び出す必要があるとします。</p>
    
    <pre product="flash" xml:space="preserve" class="- topic/pre ">
    function myFunction(item:T, index:int, vector:Vector.&lt;T>):Boolean {
       // your code here
    }
    </pre>
    
    <p product="flash" class="- topic/p ">次に、<codeph class="+ topic/ph pr-d/codeph ">every()</codeph> メソッドを、<codeph class="+ topic/ph pr-d/codeph ">myVector</codeph> というベクターに対して使用するとします。</p>
    
    <pre product="flash" xml:space="preserve" class="- topic/pre ">
    myVector.every(myFunction, someObject);
    </pre>
    
    <p product="flash" class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> は SWF ファイルのメインクラスのメンバーなので、異なる <codeph class="+ topic/ph pr-d/codeph ">this</codeph> コンテキストでは実行できません。このコードを実行すると、Flash ランタイムはエラーをスローします。このランタイムエラーは、次のように関数を変数に割り当てることによって回避できます。</p>
    
    <pre product="flash" xml:space="preserve" class="- topic/pre ">
    var myFunction:Function = function(item:T, index:int, vector:Vector.&lt;T>):Boolean {
        //your code here
    };
    myVector.every(myFunction, someObject);
    </pre>
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/some()" class="- topic/link "><linktext class="- topic/linktext ">Vector.some()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:filter" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">filter</apiName><shortdesc class="- topic/shortdesc ">
     ベクター内の各アイテムについてテスト関数を実行し、指定された関数について true を返すすべてのアイテムを含む新しいベクターを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">元のベクター内のアイテムで <codeph class="+ topic/ph pr-d/codeph ">callback</codeph> 関数が <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返したものをすべて含む新しいベクター。
     
     </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ベクター内の各アイテムについて実行する関数です。この関数は、ベクターの現在のアイテム、アイテムのインデックス、および Vector オブジェクトの 3 つの引数によって呼び出されます。
     <pre xml:space="preserve" class="- topic/pre ">function callback(item:T, index:int, vector:Vector.&lt;T>):Boolean;</pre> 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">関数が呼び出されるときにコールバック関数の識別子 <codeph class="+ topic/ph pr-d/codeph ">this</codeph> が参照するオブジェクトです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ベクター内の各アイテムについてテスト関数を実行し、指定された関数について <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返すすべてのアイテムを含む新しいベクターを返します。<codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返すアイテムは、結果ベクターに含められません。戻りベクターのベース型はメソッドが呼び出されるベクターのベース型と一致します。
     
     <p class="- topic/p ">このメソッドで、2 番目のパラメーター <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> は、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> でなければなりません（最初のパラメーター <codeph class="+ topic/ph pr-d/codeph ">callback</codeph> がメソッド閉包である場合）。これは、このメソッドの最も一般的な使用方法です。</p>
     
     <p product="flash" class="- topic/p ">ただし、Flash Professional を使用して、メインタイムライン上のフレームで関数を作成し、それを異なる <codeph class="+ topic/ph pr-d/codeph ">this</codeph> コンテキストで呼び出す必要があるとします。</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(item:T, index:int, vector:Vector.&lt;T>):Boolean {
        // your code here
     }
     </pre>
     
     <p product="flash" class="- topic/p ">次に、<codeph class="+ topic/ph pr-d/codeph ">filter()</codeph> メソッドを、<codeph class="+ topic/ph pr-d/codeph ">myVector</codeph> というベクターに対して使用するとします。</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var result:Vector.&lt;T> = myVector.filter(myFunction, someObject);
     </pre>
     
     <p product="flash" class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> は SWF ファイルのメインクラスのメンバーなので、異なる <codeph class="+ topic/ph pr-d/codeph ">this</codeph> コンテキストでは実行できません。このコードを実行すると、Flash ランタイムはエラーをスローします。このランタイムエラーは、次のように関数を変数に割り当てることによって回避できます。</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(item:T, index:int, vector:Vector.&lt;T>):Boolean {
         //your code here
     };
     myVector.filter(myFunction, someObject);
     </pre>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/map()" class="- topic/link "><linktext class="- topic/linktext ">Vector.map()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:forEach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">forEach</apiName><shortdesc class="- topic/shortdesc ">
     ベクター内の各アイテムについて関数を実行します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ベクター内の各アイテムについて実行する関数です。この関数は、ベクターの現在のアイテム、アイテムのインデックス、および Vector オブジェクトの 3 つの引数によって呼び出されます。
     <pre xml:space="preserve" class="- topic/pre ">function callback(item:T, index:int, vector:Vector.&lt;T>):void;</pre>
     <p class="- topic/p ">関数呼び出しの戻り値は破棄されます。</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">関数が呼び出されるときにコールバック関数の識別子 <codeph class="+ topic/ph pr-d/codeph ">this</codeph> が参照するオブジェクトです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ベクター内の各アイテムについて関数を実行します。
     
     <p class="- topic/p ">このメソッドで、2 番目のパラメーター <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> は、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> でなければなりません（最初のパラメーター <codeph class="+ topic/ph pr-d/codeph ">callback</codeph> がメソッド閉包である場合）。これは、このメソッドの最も一般的な使用方法です。</p>
     
     <p product="flash" class="- topic/p ">ただし、Flash Professional を使用して、メインタイムライン上のフレームで関数を作成し、それを異なる <codeph class="+ topic/ph pr-d/codeph ">this</codeph> コンテキストで呼び出す必要があるとします。</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(item:T, index:int, vector:Vector.&lt;T>):void {
        // your code here
     }
     </pre>
     
     <p product="flash" class="- topic/p ">次に、<codeph class="+ topic/ph pr-d/codeph ">forEach()</codeph> メソッドを、<codeph class="+ topic/ph pr-d/codeph ">myVector</codeph> というベクターに対して使用するとします。</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     myVector.forEach(myFunction, someObject);
     </pre>
     
     <p product="flash" class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> は SWF ファイルのメインクラスのメンバーなので、異なる <codeph class="+ topic/ph pr-d/codeph ">this</codeph> コンテキストでは実行できません。このコードを実行すると、Flash ランタイムはエラーをスローします。このランタイムエラーは、次のように関数を変数に割り当てることによって回避できます。</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(item:T, index:int, vector:Vector.&lt;T>):void {
         //your code here
     };
     myVector.forEach(myFunction, someObject);
     </pre>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:AS3:indexOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">indexOf</apiName><shortdesc class="- topic/shortdesc ">
     ベクター内のアイテムを検索し、アイテムのインデックス位置を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ベクター内のアイテムの 0 から始まるインデックス位置です。<codeph class="+ topic/ph pr-d/codeph ">searchElement</codeph> 引数が見つからなかった場合、戻り値は -1 です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">searchElement</apiItemName><apiType value="T" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ベクター内で検索するアイテムです。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fromIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">アイテムの検索を開始するベクター内の場所です。このパラメーターが負の場合、<codeph class="+ topic/ph pr-d/codeph ">length + fromIndex</codeph> として扱われます。つまり、検索は最後の <codeph class="+ topic/ph pr-d/codeph ">-fromIndex</codeph> アイテムから開始し、その位置から前方に向かってベクターの最後まで検索します。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ベクター内のアイテムを検索し、アイテムのインデックス位置を返します。アイテムは、厳密な等価（<codeph class="+ topic/ph pr-d/codeph ">===</codeph>）を使用してベクターエレメントと比較されます。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/lastIndexOf()" class="- topic/link "><linktext class="- topic/linktext ">Vector.lastIndexOf()</linktext></link><link href="operators.html#strict_equality" class="- topic/link "><linktext class="- topic/linktext ">=== (strict equality)</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:join" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">join</apiName><shortdesc class="- topic/shortdesc ">
     ベクター内のエレメントをストリングに変換し、指定されたセパレーターをエレメント間に挿入し、エレメントを連結して、その結果をストリングとして返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.join, join
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ストリングに変換されたベクターのエレメントで構成され、指定されたストリングで区切られているストリングです。
     
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sep</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">,</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">返されたストリング内のベクターエレメントを区切る文字またはストリングです。このパラメーターを省略すると、デフォルトのセパレーターとしてカンマが使用されます。 
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">ベクター内のエレメントをストリングに変換します。
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ベクター内のエレメントをストリングに変換し、指定されたセパレーターをエレメント間に挿入し、エレメントを連結して、その結果をストリングとして返します。ネストされたベクターは、<codeph class="+ topic/ph pr-d/codeph ">join()</codeph> メソッドに渡されるセパレーターで区切るのではなく、常にカンマ（,）で区切ります。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/split()" class="- topic/link "><linktext class="- topic/linktext ">String.split()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:lastIndexOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">lastIndexOf</apiName><shortdesc class="- topic/shortdesc ">
     ベクター内のアイテムを、指定されたインデックス位置から後方に向かって検索し、一致したアイテムのインデックス位置を返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ベクター内のアイテムの 0 から始まるインデックス位置です。<codeph class="+ topic/ph pr-d/codeph ">searchElement</codeph> 引数が見つからなかった場合、戻り値は -1 です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">searchElement</apiItemName><apiType value="T" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ベクター内で検索するアイテムです。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fromIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0x7fffffff</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">アイテムの検索を開始するベクター内の場所です。デフォルトは、許容される最大インデックス値です。つまり、検索はベクター内の最後のアイテムから開始されます。
     <p class="- topic/p ">このパラメーターが負の場合、<codeph class="+ topic/ph pr-d/codeph ">length + fromIndex</codeph> として扱われます。つまり、検索は最後の <codeph class="+ topic/ph pr-d/codeph ">-fromIndex</codeph> アイテムから開始し、その位置から後方に向かってインデックス 0 まで検索します。</p>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ベクター内のアイテムを、指定されたインデックス位置から後方に向かって検索し、一致したアイテムのインデックス位置を返します。アイテムは、厳密な等価（<codeph class="+ topic/ph pr-d/codeph ">===</codeph>）を使用してベクターエレメントと比較されます。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/indexOf()" class="- topic/link "><linktext class="- topic/linktext ">Vector.indexOf()</linktext></link><link href="operators.html#strict_equality" class="- topic/link "><linktext class="- topic/linktext ">=== (strict equality)</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:map" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">map</apiName><shortdesc class="- topic/shortdesc ">
     ベクター内の各アイテムについて関数を実行し、このベクター内の各アイテムに対する関数の呼び出しの結果に対応するアイテムの新しいベクターを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ベクター内の各アイテムに対する関数の呼び出しの結果が含まれる新しいベクターです。結果ベクターには、元のベクターと同じベース型と <codeph class="+ topic/ph pr-d/codeph ">length</codeph> が指定されます。
     
     </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ベクター内の各アイテムについて実行する関数です。この関数は、ベクターの現在のアイテム、アイテムのインデックス、および Vector オブジェクトの 3 つの引数によって呼び出されます。
     <pre xml:space="preserve" class="- topic/pre ">function callback(item:T, index:int, vector:Vector.&lt;T>):T;</pre> 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">関数が呼び出されるときにコールバック関数の識別子 <codeph class="+ topic/ph pr-d/codeph ">this</codeph> が参照するオブジェクトです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ベクター内の各アイテムについて関数を実行し、このベクター内の各アイテムに対する関数の呼び出しの結果に対応するアイテムの新しいベクターを返します。結果ベクターには、元のベクターと同じベース型と <codeph class="+ topic/ph pr-d/codeph ">length</codeph> が指定されます。結果ベクターのインデックス <codeph class="+ topic/ph pr-d/codeph ">i</codeph> のエレメントは、元のベクターのインデックス <codeph class="+ topic/ph pr-d/codeph ">i</codeph> のエレメントでの呼び出しの結果です。
     
     <p class="- topic/p ">このメソッドで、2 番目のパラメーター <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> は、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> でなければなりません（最初のパラメーター <codeph class="+ topic/ph pr-d/codeph ">callback</codeph> がメソッド閉包である場合）。これは、このメソッドの最も一般的な使用方法です。</p>
     
     <p product="flash" class="- topic/p ">ただし、Flash Professional を使用して、メインタイムライン上のフレームで関数を作成し、それを異なる <codeph class="+ topic/ph pr-d/codeph ">this</codeph> コンテキストで呼び出す必要があるとします。</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(item:Object, index:int, vector:Vector.&lt;T>):T {
        // your code here
     }
     </pre>
     
     <p product="flash" class="- topic/p ">次に、<codeph class="+ topic/ph pr-d/codeph ">map()</codeph> メソッドを、<codeph class="+ topic/ph pr-d/codeph ">myVector</codeph> というベクターに対して使用するとします。</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     myVector.map(myFunction, someObject);
     </pre>
     
     <p product="flash" class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> は SWF ファイルのメインクラスのメンバーなので、異なる <codeph class="+ topic/ph pr-d/codeph ">this</codeph> コンテキストでは実行できません。このコードを実行すると、Flash ランタイムはエラーをスローします。このランタイムエラーは、次のように関数を変数に割り当てることによって回避できます。</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(item:T, index:int, vector:Vector.&lt;T>):void {
         //your code here
     };
     myVector.map(myFunction, someObject);
     </pre>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/filter()" class="- topic/link "><linktext class="- topic/linktext ">Vector.filter()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:pop" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">pop</apiName><shortdesc class="- topic/shortdesc ">
     ベクターの最後のエレメントを削除して、そのエレメントを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.pop, pop
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> が <codeph class="+ topic/ph pr-d/codeph ">true</codeph> のときにこのメソッドが呼び出された場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定されたベクターの最後のエレメントの値です。
     
     </apiDesc><apiType value="T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ベクターの最後のエレメントを削除して、そのエレメントを返します。この関数が呼び出されるときに、ベクターの <codeph class="+ topic/ph pr-d/codeph ">length</codeph> プロパティは 1 つ減少します。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/push()" class="- topic/link "><linktext class="- topic/linktext ">Vector.push()</linktext></link><link href="#Vector/shift()" class="- topic/link "><linktext class="- topic/linktext ">Vector.shift()</linktext></link><link href="#Vector/unshift()" class="- topic/link "><linktext class="- topic/linktext ">Vector.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:push" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">push</apiName><shortdesc class="- topic/shortdesc ">
     エレメントをベクターの最後に追加して、ベクターの新しい長さを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.push, push
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">引数がベクターのベース型 <codeph class="+ topic/ph pr-d/codeph ">T</codeph> のインスタンスではない場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> が <codeph class="+ topic/ph pr-d/codeph ">true</codeph> のときにこのメソッドが呼び出された場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">新しいエレメントが追加された後のベクターの長さです。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ベクターに追加される値です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     エレメントをベクターの最後に追加して、ベクターの新しい長さを返します。
     
     <p class="- topic/p ">この関数は複数の引数を受け入れることができるので、Strict モードの場合でも、コンパイル時に引数のデータ型はチェックされません。ただし、ベース型のインスタンスではない引数が渡されると、実行時に例外が発生します。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/pop()" class="- topic/link "><linktext class="- topic/linktext ">Vector.pop()</linktext></link><link href="#Vector/shift()" class="- topic/link "><linktext class="- topic/linktext ">Vector.shift()</linktext></link><link href="#Vector/unshift()" class="- topic/link "><linktext class="- topic/linktext ">Vector.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:reverse" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">reverse</apiName><shortdesc class="- topic/shortdesc ">
     ベクター内のエレメントの順序を反転します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.reverse, reverse
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">逆の順序のエレメントを持つベクター。
     
     </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ベクター内のエレメントの順序を反転します。このメソッドは呼び出されるベクターを変更します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:AS3:shift" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">shift</apiName><shortdesc class="- topic/shortdesc ">
     ベクターの最初のエレメントを削除して、そのエレメントを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.shift, shift
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> が <codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ベクター内の最初のエレメント。
     
     </apiDesc><apiType value="T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ベクターの最初のエレメントを削除して、そのエレメントを返します。残りのベクターエレメントは、元の位置 i から i - 1 に移動されます。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/pop()" class="- topic/link "><linktext class="- topic/linktext ">Vector.pop()</linktext></link><link href="#Vector/push()" class="- topic/link "><linktext class="- topic/linktext ">Vector.push()</linktext></link><link href="#Vector/unshift()" class="- topic/link "><linktext class="- topic/linktext ">Vector.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:slice" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">slice</apiName><shortdesc class="- topic/shortdesc ">
     元のベクターから一連のエレメントを取り出して、新しいベクターを返します。元のベクターは変更されません。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.slice, slice
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">元のベクターから取り出した一連のエレメントから成るベクターです。
     
     </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">スライスの始点のインデックスを示す数値です。<codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> が負の数値の場合、始点はベクターの末尾から開始します。つまり、-1 が最後のエレメントです。  
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">endIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">16777215</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">スライスの終点のインデックスを示す数値です。 このパラメーターを省略すると、スライスにはベクターの最初から最後までのすべてのエレメントが取り込まれます。<codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> が負の数値の場合、終点はベクターの末尾から開始します。つまり、-1 が最後のエレメントです。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">元のベクターから取り出した一連のエレメントから成る新しいベクターを返します。
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     元のベクターから一連のエレメントを取り出して、新しいベクターを返します。元のベクターは変更されません。返されるベクターには、<codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> エレメントから <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> の前のエレメントまでのすべてのエレメントが含まれます。
     
     <p class="- topic/p "> パラメーターを渡さない場合、新しいベクターは元のベクターの複製（浅い複製）になります。両方のパラメーターに 0 を渡すと、元のベクターと同じ型の新しい空のベクターが作成されます。</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:AS3:some" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">some</apiName><shortdesc class="- topic/shortdesc ">
     true を返すアイテムに達するまで、ベクター内の各アイテムにテスト関数を実行します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ブール値です。指定された関数についてベクター内のいずれかのアイテムが <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返す場合は <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返します。それ以外の場合は <codeph class="+ topic/ph pr-d/codeph ">false</codeph> を返します。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ベクター内の各アイテムについて実行する関数です。この関数は、ベクターの現在のアイテム、アイテムのインデックス、および Vector オブジェクトの 3 つの引数によって呼び出されます。
     <pre xml:space="preserve" class="- topic/pre ">function callback(item:T, index:int, vector:Vector.&lt;T>):Boolean</pre> 
     
     <p class="- topic/p ">コールバック関数はブール値を返します。</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">関数が呼び出されるときにコールバック関数の識別子 <codeph class="+ topic/ph pr-d/codeph ">this</codeph> が参照するオブジェクトです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">true</codeph> を返すアイテムに達するまで、ベクター内の各アイテムにテスト関数を実行します。このメソッドを使用して、ベクター内のいずれのアイテムもある基準（値が特定の数値より小さいなど）を満たしているかどうかを判別できます。
     
     <p class="- topic/p ">このメソッドで、2 番目のパラメーター <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> は、<codeph class="+ topic/ph pr-d/codeph ">null</codeph> でなければなりません（最初のパラメーター <codeph class="+ topic/ph pr-d/codeph ">callback</codeph> がメソッド閉包である場合）。これは、このメソッドの最も一般的な使用方法です。</p>
     
     <p product="flash" class="- topic/p ">ただし、メインタイムライン上のフレームで関数を作成するが、異なる <codeph class="+ topic/ph pr-d/codeph ">this</codeph> コンテキストで呼び出す必要があるとします。</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(item:Object, index:int, vector:Vector.&lt;T>):Boolean {
        // your code here
     }
     </pre>
     
     <p product="flash" class="- topic/p ">次に、<codeph class="+ topic/ph pr-d/codeph ">some()</codeph> メソッドを、<codeph class="+ topic/ph pr-d/codeph ">myVector</codeph> というベクターに対して使用するとします。</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     myVector.some(myFunction, someObject);
     </pre>
     
     <p product="flash" class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> は SWF ファイルのメインクラスのメンバーなので、異なる <codeph class="+ topic/ph pr-d/codeph ">this</codeph> コンテキストでは実行できません。このコードを実行すると、Flash ランタイムはエラーをスローします。このランタイムエラーは、次のように関数を変数に割り当てることによって回避できます。</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(item:T, index:int, vector:Vector.&lt;T>):Boolean {
         //your code here
     };
     myVector.some(myFunction, someObject);
     </pre>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/every()" class="- topic/link "><linktext class="- topic/linktext ">every()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:sort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sort</apiName><shortdesc class="- topic/shortdesc ">
     ベクター内のエレメントをソートします。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.sort, sort
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">新しい順序のエレメントを持つベクター。
     
     </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">compareFunction</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ソートの動作を設定する比較メソッドです。
     
     <p class="- topic/p ">指定したメソッドはベクターのベース型（<codeph class="+ topic/ph pr-d/codeph ">T</codeph>）の 2 つの引数を受け取り、数値を返す必要があります。</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">function compare(x:T, y:T):Number {}</codeblock>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">compareFunction</codeph> 関数のロジックにより、2 つのエレメント <codeph class="+ topic/ph pr-d/codeph ">x</codeph> と <codeph class="+ topic/ph pr-d/codeph ">y</codeph> が指定された場合、この関数は次の 3 つの値のいずれかを返します。</p>
     
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">x</codeph> が <codeph class="+ topic/ph pr-d/codeph ">y</codeph> の前に表示されるソート順の場合は負の数。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">x</codeph> と <codeph class="+ topic/ph pr-d/codeph ">y</codeph> が等しい場合は 0。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">x</codeph> が <codeph class="+ topic/ph pr-d/codeph ">y</codeph> の後に表示されるソート順の場合は正の数。</li></ul>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ベクター内のエレメントをソートします。このメソッドは、<codeph class="+ topic/ph pr-d/codeph ">compareFunction</codeph> パラメーターとして提供される関数に基づいてソートを実行します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:AS3:splice" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">splice</apiName><shortdesc class="- topic/shortdesc ">
     ベクターのエレメントを追加および削除します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.splice, splice
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> と <codeph class="+ topic/ph pr-d/codeph ">deleteCount</codeph> 引数がベクターの境界外にあるインデックスを削除するように指定する場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このメソッドが <codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> が <codeph class="+ topic/ph pr-d/codeph ">true</codeph> のときに呼び出され、<codeph class="+ topic/ph pr-d/codeph ">splice()</codeph> 演算によってベクターの <codeph class="+ topic/ph pr-d/codeph ">length</codeph> が変更された場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">元のベクターから削除されたエレメントを含むベクターです。
     
     </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">挿入または削除を開始するベクターエレメントのインデックスを示す整数です。負の整数を使用すると、ベクターの末尾を基準として位置を指定できます。例えば、-1 はベクターの最後のエレメントです。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">deleteCount</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">4294967295</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">削除するエレメント数を示す整数です。この数には、<codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> パラメーターで指定するエレメントが含まれます。<codeph class="+ topic/ph pr-d/codeph ">deleteCount</codeph> パラメーターに値を指定しないと、ベクター内の <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> の位置のエレメントから最後のエレメントまで、すべての値が削除されます。（デフォルト値は <codeph class="+ topic/ph pr-d/codeph ">uint.MAX_VALUE</codeph> です。）値として 0 を指定すると、エレメントは削除されません。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">items</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> パラメーターで指定したベクター内の位置に挿入するカンマ区切り値のオプションリストです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ベクターのエレメントを追加および削除します。このメソッドは、コピーを作成しないで、ベクターを変更します。
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>ベクターのサブクラス内でこのメソッドをオーバーライドするには、次の例に示すように、パラメーターに <codeph class="+ topic/ph pr-d/codeph ">...args</codeph> を使用します。</p>
     
     <pre xml:space="preserve" class="- topic/pre ">
     public override function splice(...args) {
       // your statements here
     }
     </pre>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:toLocaleString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleString</apiName><shortdesc class="- topic/shortdesc ">
     指定されたベクター内のエレメントを表すストリングを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ベクターエレメントのストリングです。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     指定されたベクター内のエレメントを表すストリングを返します。インデックス 0 から最大インデックスまでのベクター内のすべてのエレメントを、カンマで区切られた連結ストリングに変換して返します。ActionScript 3.0 実装において、このメソッドは、<codeph class="+ topic/ph pr-d/codeph ">Vector.toString()</codeph> と同じ値を返します。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/toString()" class="- topic/link "><linktext class="- topic/linktext ">Vector.toString()</linktext></link></related-links></apiOperation><apiOperation id="Vector:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
     ベクター内のエレメントを表すストリングを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.toString, toString
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ベクターエレメントのストリングです。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ベクター内のエレメントを表すストリングを返します。インデックス 0 から最大インデックスまでのベクター内のすべてのエレメントを、カンマで区切られた連結ストリングに変換して返します。カスタムセパレーターを指定するには、<codeph class="+ topic/ph pr-d/codeph ">Vector.join()</codeph> メソッドを使用します。
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/split()" class="- topic/link "><linktext class="- topic/linktext ">String.split()</linktext></link><link href="#Vector/join()" class="- topic/link "><linktext class="- topic/linktext ">Vector.join()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:unshift" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">unshift</apiName><shortdesc class="- topic/shortdesc ">
     エレメントをベクターの先頭に追加して、ベクターの新しい長さを返します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.unshift, unshift
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">引数がベクターのベース型 <codeph class="+ topic/ph pr-d/codeph ">T</codeph> のインスタンスではない場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> が <codeph class="+ topic/ph pr-d/codeph ">true</codeph> のときにこのメソッドが呼び出された場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ベクターの新しい長さを表す整数です。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ベクターの先頭に挿入されるこのベクターのベース型の 1 つ以上のインスタンス。  
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     エレメントをベクターの先頭に追加して、ベクターの新しい長さを返します。ベクター内のその他のエレメントは、元の位置 i から i に新しいエレメントの数を加えた位置に移動されます。
     
     <p class="- topic/p ">この関数は複数の引数を受け入れることができるので、Strict モードの場合でも、コンパイル時に引数のデータ型はチェックされません。ただし、ベース型のインスタンスではない引数が渡されると、実行時に例外が発生します。</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/pop()" class="- topic/link "><linktext class="- topic/linktext ">Vector.pop()</linktext></link><link href="#Vector/push()" class="- topic/link "><linktext class="- topic/linktext ">Vector.push()</linktext></link><link href="#Vector/shift()" class="- topic/link "><linktext class="- topic/linktext ">Vector.shift()</linktext></link></related-links></apiOperation><apiValue id="Vector:fixed:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fixed</apiName><shortdesc class="- topic/shortdesc ">
     ベクターの length プロパティを変更できるかどうかを指定します。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">vector.fixed, fixed
     
     </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ベクターの <codeph class="+ topic/ph pr-d/codeph ">length</codeph> プロパティを変更できるかどうかを指定します。値が <codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合、<codeph class="+ topic/ph pr-d/codeph ">length</codeph> プロパティは変更できません。これは、<codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> が <codeph class="+ topic/ph pr-d/codeph ">true</codeph> の場合、次の操作は行うことができないことを意味します。
     
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">length</codeph> プロパティの直接的な設定</li><li class="- topic/li ">インデックス位置 <codeph class="+ topic/ph pr-d/codeph ">length</codeph> への値の割り当て</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">length</codeph> プロパティを変更する以下のメソッドの呼び出し
         <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">pop()</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">push()</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Shift()</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">unshift()</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">splice()</codeph>（<codeph class="+ topic/ph pr-d/codeph ">splice()</codeph> 呼び出しがベクターの <codeph class="+ topic/ph pr-d/codeph ">length</codeph> を変更する場合）</li></ul>
       </li></ul>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="Vector:length:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">length</apiName><shortdesc class="- topic/shortdesc ">
     ベクター内で使用できる有効なインデックスの範囲です。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">vector.length, length
     
     </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> が <codeph class="+ topic/ph pr-d/codeph ">true</codeph> のときにこのプロパティが変更された場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">このプロパティが、許容される最大インデックス（2<sup class="+ topic/ph hi-d/sup ">32</sup>）より大きい値に設定された場合。
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     ベクター内で使用できる有効なインデックスの範囲です。Vector インスタンスは、<codeph class="+ topic/ph pr-d/codeph ">length</codeph> 値（ただし、最大値は除く）までのインデックス位置を持ちます。
     
     <p class="- topic/p ">ずべてのベクターエレメントは、常にベース型のインスタンスまたは <codeph class="+ topic/ph pr-d/codeph ">null</codeph> のいずれかの値を持ちます。<codeph class="+ topic/ph pr-d/codeph ">length</codeph> プロパティが前の値より大きい値に設定されている場合、追加のエレメントが作成され、ベース型に適したデフォルト値（参照型の場合は <codeph class="+ topic/ph pr-d/codeph ">null</codeph>）が設定されます。</p>
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">length</codeph> プロパティが前の値より小さい値に設定されている場合、新しい <codeph class="+ topic/ph pr-d/codeph ">length</codeph> 値以上のインデックス位置にあるすべてのエレメントがベクターから削除されます。</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>