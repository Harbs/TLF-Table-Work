<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="flash.accessibility" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiPackage/apiPackage "><apiName class="- topic/title reference/title apiRef/apiName ">flash.accessibility</apiName><apiDetail class="- topic/body reference/refbody apiRef/apiDetail "/><apiClassifier languages="" id="flash.accessibility:ISimpleTextSelection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ISimpleTextSelection</apiName><shortdesc class="- topic/shortdesc ">
	
	ISimpleTextSelection 类可用于向 AccessibilityImplementation 添加对 MSAA ISimpleTextSelection 接口的支持。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiInterface class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiInterface "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier "/></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
	ISimpleTextSelection 类可用于向 AccessibilityImplementation 添加对 MSAA ISimpleTextSelection 接口的支持。
	
	<p class="- topic/p ">如果 AccessibilityImplementation 子类在此类中实现了两个 getter，JAWS 等屏幕阅读器可通过调用这两个 getter 来确定文本选择范围。AccessibilityImplementation 子类不必正式声明它实现了此接口；您可以直接为这两个属性声明 getter，如下所示：</p>
	
	<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	class TextAreaAccImpl extends AccesibilityImplementation
	{
	...
		public function get selectionAnchorIndex():int
		{
		...
		}
		public function get selectionActiveIndex():int
		{
		...
	}
	}
	</codeblock>
	</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#AccessibilityImplementation" class="- topic/link "><linktext class="- topic/linktext ">flash.accessibility.AccessibilityImplementation</linktext></link></related-links><apiValue id="flash.accessibility:ISimpleTextSelection:flash.accessibility:ISimpleTextSelection:selectionActiveIndex:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">selectionActiveIndex</apiName><shortdesc class="- topic/shortdesc "> 
		 当前所选内容中最后一个字符从零开始的字符索引值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		 当前所选内容中最后一个字符从零开始的字符索引值。如果希望组件支持内联 IME 或辅助功能，请覆盖此方法。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:ISimpleTextSelection:flash.accessibility:ISimpleTextSelection:selectionAnchorIndex:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">selectionAnchorIndex</apiName><shortdesc class="- topic/shortdesc "> 
		 当前所选内容中第一个字符从零开始的字符索引值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		 当前所选内容中第一个字符从零开始的字符索引值。如果希望组件支持内联 IME 或辅助功能，请覆盖此方法。
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.accessibility:AccessibilityImplementation" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">AccessibilityImplementation</apiName><shortdesc class="- topic/shortdesc ">
 
 AccessibilityImplementation 类是 Flash Player 中的基类，可以实现组件中的辅助功能。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 
 AccessibilityImplementation 类是 Flash Player 中的基类，可以实现组件中的辅助功能。该类可实现组件与屏幕读取器之间的通信。 屏幕阅读器用于将屏幕内容转换为合成语音或盲文，为视力有缺陷的用户提供方便。
 
 <p class="- topic/p ">AccessibilityImplementation 类提供了一组方法，组件开发人员可以利用这组方法，使得有关系统角色、基于对象的事件以及状态的信息可供辅助性技术使用。</p>
 
 <p class="- topic/p ">Adobe Flash Player 使用 Microsoft Active Accessibility (MSAA)，该技术为应用程序和屏幕阅读器提供了描述性和标准化的通信方式。有关 Flash Player 如何使用 MSAA 的更多信息，请参阅<i class="+ topic/ph hi-d/i ">使用 Flex SDK</i> 中的“辅助功能”一章。</p>
 
 <p class="- topic/p ">AccessibilityImplementation 类的方法是某个组件实例的 <xref href="http://msdn.microsoft.com/en-us/library/ms696097(VS.85).aspx" class="- topic/xref ">IAccessible</xref> 接口的子集。</p>
 
 <p class="- topic/p ">AccessibilityImplementation 实现 IAccessible 接口的方式和发送的事件都取决于要实现的组件的类型。</p>
 
 <p class="- topic/p ">请勿通过调用 AccessibilityImplementation 的构造函数直接将它实例化，通过为每个新组件扩展 AccImpl 类来创建新的辅助功能实现。在 Flash 中，请参阅 fl.accessibility 包。在 Flex 中，请参阅 mx.accessibility 包和<i class="+ topic/ph hi-d/i ">使用 Flex SDK</i> 中的“辅助功能”一章。</p>
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>AIR 2 之前的 AIR 运行时版本不支持 AccessibilityImplementation 类。此类可用于 AIR 2 之前的 AIR 版本中的编译，但是在 AIR 2 之前的运行时版本不支持此类。</p>
 
 </apiDesc></apiClassifierDetail><apiConstructor id="flash.accessibility:AccessibilityImplementation:AccessibilityImplementation" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">AccessibilityImplementation</apiName><shortdesc class="- topic/shortdesc ">
	 静态构造函数。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 静态构造函数。请勿通过调用 AccessibilityImplementation 的构造函数直接将它实例化，而应通过扩展每个新组件的 mx.accessibility.AccImpl 类来创建新的辅助功能实现。
	 
	 </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="" invalidHref="mx.accessibility.AccImpl.xml" class="- topic/link "><linktext class="- topic/linktext ">mx.accessibility.AccImpl</linktext></link></related-links></apiConstructor><apiOperation id="flash.accessibility:AccessibilityImplementation:accDoDefaultAction" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">accDoDefaultAction</apiName><shortdesc class="- topic/shortdesc ">
	 一个 IAccessible 方法，执行与此 AccessibilityImplementation 表示的组件关联的默认操作，或执行该组件的子元素之一的默认操作。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">childID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">对应于由 <codeph class="+ topic/ph pr-d/codeph ">getChildIDArray()</codeph> 定义的组件子元素之一的无符号整数。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">执行与此组件关联的默认操作。
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 一个 IAccessible 方法，执行与此 AccessibilityImplementation 表示的组件关联的默认操作，或执行该组件的子元素之一的默认操作。
	 
	 <p class="- topic/p ">仅当 AccessibilityImplementation 表示一个在 MSAA 模型中具有默认操作的 UI 元素时，才能实现此方法。</p>
	 
	 <p class="- topic/p ">如果只针对 AccessibilityImplementation 本身或其子元素实现 <codeph class="+ topic/ph pr-d/codeph ">accDoDefaultAction()</codeph>，则有时需要指明传递的特定 childID 没有默认操作。为 <codeph class="+ topic/ph pr-d/codeph ">E_MEMBERNOTFOUND</codeph> 设置 <codeph class="+ topic/ph pr-d/codeph ">errno</codeph> 属性即可指明这一点。</p>
	 
	 </apiDesc><example class="- topic/example ">下面的示例演示如何实现此方法，以便在 Flex mx.accessibility.ListBaseAccImpl 类（即 ListBase 辅助功能实现）中执行适当的默认操作。对于 ListBase 和从其继承的类，针对其某个子列表项元素执行“双击”默认操作，即会选中该元素。
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 override public function accDoDefaultAction(childID:uint):void
	 {
	 	if (childID > 0)
	 		ListBase(master).selectedIndex = childID - 1;
	 }</codeblock>
	 </example></apiOperationDetail></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:accLocation" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">accLocation</apiName><shortdesc class="- topic/shortdesc ">
	 MSAA 方法，返回指定 AccessibilityImplementation 中子元素边框的 DisplayObject 或 Rectangle。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">DisplayObject</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">Rectangle</codeph>，指定 <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> 参数所指定的子元素的边框。
	 
	 
	 </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">childID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">对应于由 <codeph class="+ topic/ph pr-d/codeph ">getChildIDArray()</codeph> 定义的组件子元素之一的无符号整数。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">返回指定子元素边框的 DisplayObject 或 Rectangle 对象。
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 MSAA 方法，返回指定 AccessibilityImplementation 中子元素边框的 <codeph class="+ topic/ph pr-d/codeph ">DisplayObject</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">Rectangle</codeph>。
	 
	 <p class="- topic/p ">从不会使用零值的 <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> 调用此方法。如果 AccessibilityImplementation 始终不会包含子元素，则不应实现此方法。如果 AccessibilityImplementation 可以包含子元素，则强制实现此方法。</p>
	 
	 <p class="- topic/p ">通常可以通过返回表示子元素本身的对象来满足对此方法的要求。只要子元素为 <codeph class="+ topic/ph pr-d/codeph ">DisplayObject</codeph>，就可以采用这种方式。在这些情况下，将只返回与实例名称对应的 <codeph class="+ topic/ph pr-d/codeph ">DisplayObject</codeph>，该实例名称与显示列表中的相关可视对象相关联。</p>	
	 
	 <p class="- topic/p ">如果子元素不满足上述技术要求，您可以自己进行边框计算，返回具有以下属性的 <codeph class="+ topic/ph pr-d/codeph ">Rectangle</codeph>：<codeph class="+ topic/ph pr-d/codeph ">x</codeph>、<codeph class="+ topic/ph pr-d/codeph ">y</codeph>、<codeph class="+ topic/ph pr-d/codeph ">width</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">height</codeph>。<codeph class="+ topic/ph pr-d/codeph ">x</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">y</codeph> 成员指定边框的左上角，<codeph class="+ topic/ph pr-d/codeph ">width</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">height</codeph> 成员指定边框的大小。所有四个成员都应以舞台像素为单位，其值相对于 AccessibilityImplementation 所表示的组件的原点。<codeph class="+ topic/ph pr-d/codeph ">x</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">y</codeph> 属性可能具有负值，因为 <codeph class="+ topic/ph pr-d/codeph ">DisplayObject</codeph> 的原点未必在其左上角。</p>
	 
	 <p class="- topic/p ">如果 <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> 所指定的子元素不可见（即该子元素的 <codeph class="+ topic/ph pr-d/codeph ">get_accState</codeph> 将返回 <codeph class="+ topic/ph pr-d/codeph ">STATE_SYSTEM_INVISIBLE</codeph> 值），则您可能会从 <codeph class="+ topic/ph pr-d/codeph ">accLocation</codeph> 得到 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>。您也可以返回一个 <codeph class="+ topic/ph pr-d/codeph ">Rectangle</codeph>，表示可见子元素显示处的坐标。</p>
	 
	 </apiDesc><example class="- topic/example ">下面的示例演示如何实现此方法来返回 Flex mx.accessibility.ListBaseAccImpl 类（即 ListBase 辅助功能实现）中指定子元素的位置。
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 override public function accLocation(childID:uint):*
	 
	 {
	 	var listBase:ListBase = ListBase(master);
	 
	 	var index:uint = childID - 1;
	 	
	 	if (index &amp;lt; listBase.verticalScrollPosition ||
	 		index &amp;gt;= listBase.verticalScrollPosition + listBase.rowCount)
	 	{
	 		return null;
	 	}
	 	var item:Object = getItemAt(index);
	 
	 	return listBase.itemToItemRenderer(item);
	 }
	 </codeblock>
	 </example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject</linktext></link><link href="flash.geom.xml#Rectangle" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Rectangle</linktext></link><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()" class="- topic/link "><linktext class="- topic/linktext ">getChildIDArray()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms696118(VS.85).aspx" class="- topic/link "><linktext class="- topic/linktext ">Microsoft Accessibility 开发人员中心：IAccessible::accLocation</linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:accSelect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">accSelect</apiName><shortdesc class="- topic/shortdesc ">
	 IAccessible 方法，更改此 AccessibilityImplementation 所表示组件中的选定内容。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">operation</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个包含一个或多个选择标志常量的位域，这些常量表示如何选择项或者使项获得焦点。  
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">childID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">对应于由 <codeph class="+ topic/ph pr-d/codeph ">getChildIDArray()</codeph> 定义的组件子元素之一的无符号整数。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 IAccessible 方法，更改此 AccessibilityImplementation 所表示组件中的选定内容。 
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">childID</codeph> 参数始终是非零参数。此方法始终应用于子元素，而不是应用于整个组件；Flash Player 自身管理整个组件的选择。</p>
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">selFlag</codeph> 参数是包含一个或多个选择标志常量的位域，MSAA 客户端可以使用该参数表示应如何选择 <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> 所引用的项，或者使该项获得焦点。该参数后面是对选择标志常量的描述，以及这些常量向辅助功能实现传达的信息。实际操作时，此方法在辅助功能实现中继承自 Flex mx.accessibility.ListBaseAccImpl 类的大多数实现会忽略 <codeph class="+ topic/ph pr-d/codeph ">selFlag</codeph> 常量，而依赖该组件的键盘选择行为来处理多项选择。</p>
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">selFlag</codeph> 参数不一定包含 <codeph class="+ topic/ph pr-d/codeph ">SELFLAG_TAKEFOCUS</codeph> 标志。如果该参数确实包含此标志，则应将子焦点设置为指定的 <codeph class="+ topic/ph pr-d/codeph ">childID</codeph>，并且，除非参数也包含 <codeph class="+ topic/ph pr-d/codeph ">SELFLAG_EXTENDSELECTION</codeph>，否则请将该子元素设为选择锚点。另外，尽管下述其他标志可能会修改选定内容，但是仍然不应修改子焦点和选择锚点。</p>
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">selFlag</codeph> 参数将始终包含以下四个标志之一，表示需要哪种选择修改：</p>
	 <ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">SELFLAG_TAKESELECTION</codeph>：清除所有现有的选定内容，并将选定内容设置为指定的 <codeph class="+ topic/ph pr-d/codeph ">childID</codeph>。</p>
	 </li><li class="- topic/li "><p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">SELFLAG_EXTENDSELECTION</codeph>：计算选择锚点和所指定 <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> 之间（含）的子元素范围。如果存在 <codeph class="+ topic/ph pr-d/codeph ">SELFLAG_ADDSELECTION</codeph>，则将所有这些子元素添加到选定内容中。如果存在 <codeph class="+ topic/ph pr-d/codeph ">SELFLAG_REMOVESELECTION</codeph>，则从选定内容中删除所有这些子元素。如果 <codeph class="+ topic/ph pr-d/codeph ">SELFLAG_ADDSELECTION</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">SELFLAG_REMOVESELECTION</codeph> 不存在，则所有这些子元素都应采用选择锚点的选择状态：如果选择了选择锚点，则将这些子元素添加到选定内容中；否则，将从选定内容中删除这些子元素。</p>
	 </li><li class="- topic/li "><p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">SELFLAG_ADDSELECTION</codeph>（没有 <codeph class="+ topic/ph pr-d/codeph ">SELFLAG_EXTENDSELECTION</codeph>）：将指定的 <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> 添加到选定内容中。</p>
	 </li><li class="- topic/li "><p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">SELFLAG_REMOVESELECTION</codeph>（没有 <codeph class="+ topic/ph pr-d/codeph ">SELFLAG_EXTENDSELECTION</codeph>）：从选定内容中删除指定的 <codeph class="+ topic/ph pr-d/codeph ">childID</codeph>。</p></li></ul>
	 
	 <p class="- topic/p ">请注意，对于非多项选择组件，唯一有效的 <codeph class="+ topic/ph pr-d/codeph ">selFlag</codeph> 参数值为 <codeph class="+ topic/ph pr-d/codeph ">SELFLAG_TAKEFOCUS</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">SELFLAG_TAKESELECTION</codeph>。对于允许用户强制执行 <codeph class="+ topic/ph pr-d/codeph ">null</codeph> 选择的非多项选择组件，从理论上也可以选择支持 <codeph class="+ topic/ph pr-d/codeph ">SELFLAG_REMOVESELECTION</codeph>，但实际上大多数非多项选择组件不采用此种方式，MSAA 客户端也可能不会尝试进行此类操作。</p>
	 
	 <p class="- topic/p ">如果遇到看似无效的标志，请为 <codeph class="+ topic/ph pr-d/codeph ">E_INVALIDARG</codeph> 设置 <codeph class="+ topic/ph pr-d/codeph ">errno</codeph>。</p>
	 <p class="- topic/p ">最后请注意，调用 <codeph class="+ topic/ph pr-d/codeph ">accSelect</codeph> 时，Flash Player 可确保它具有<i class="+ topic/ph hi-d/i ">宿主焦点</i>（即容器应用程序的窗口焦点），并确保组件在 Flash Player 中具有焦点。</p>
	 
	 </apiDesc><example class="- topic/example ">下面的示例演示如何实现此方法，以便选择 Flex mx.accessibility.ListBaseAccImpl 类（即 ListBase 辅助功能实现）中的子项。
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">override public function accSelect(selFlag:uint, childID:uint):void
	 {
	 	
	 	var listBase:ListBase = ListBase(master);
	 	
	 	var index:uint = childID - 1;
	 	
	 	if (index &amp;gt;= 0 &amp;&amp; index &amp;lt; listBase.dataProvider.length)
	 		listBase.selectedIndex = index;
	 }
	 </codeblock>
	 	
	 </example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()" class="- topic/link "><linktext class="- topic/linktext ">getChildIDArray()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms697291(VS.85).aspx" class="- topic/link "><linktext class="- topic/linktext ">Microsoft Accessibility 开发人员中心：IAccessible::accSelect</linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:getChildIDArray" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getChildIDArray</apiName><shortdesc class="- topic/shortdesc ">
	 返回一个数组，其中包含 AccessibilityImplementation 中所有子元素的无符号整数 ID。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">包含 AccessibilityImplementation 中所有子元素的无符号整数 ID 的数组。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 返回一个数组，其中包含 AccessibilityImplementation 中所有子元素的无符号整数 ID。 
	 
	 <p class="- topic/p ">数组长度可以为零。数组中 ID 的显示顺序应与它们代表的子元素的逻辑顺序相同。如果 AccessibilityImplementation 可以包含子元素，则必须实现此方法；否则，请勿实现此方法。</p>
	 
	 <p class="- topic/p ">为子元素分配子元素 ID 时，可以使用在 AccessibilityImplementation 的每个实例内保持唯一性的任何方案。子元素 ID 不一定连续，并且其顺序不必与子元素的逻辑顺序一致。您应妥善安排，<i class="+ topic/ph hi-d/i ">避免</i>重用子元素 ID；如果已删除某个子元素，则其 ID 在该 AccessibilityImplementation 实例的生命周期内始终不应再次使用。请注意，由于可以使用 Flash Player 代码进行多种形式的实现，因此使用的子元素 ID 数目超过一百万个时会导致意外行为发生。</p>
	 
	 </apiDesc><example class="- topic/example ">下面的示例演示如何实现此方法，以便在 Flex mx.accessibility.ListBaseAccImpl 类（即 ListBase 辅助功能实现）中返回 childID 数组。
	 
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 override public function getChildIDArray():Array
	 {
	 	var childIDs:Array = [];
	 
	 	if (ListBase(master).dataProvider)
	 	{
	 		var n:uint = ListBase(master).dataProvider.length;
	 		for (var i:int = 0; i &amp;lt; n; i++)
	 		{
	 			childIDs[i] = i + 1;
	 		}
	 	}
	 	return childIDs;
	 }
	 </codeblock>
	 
	 </example></apiOperationDetail></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accDefaultAction" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">get_accDefaultAction</apiName><shortdesc class="- topic/shortdesc ">
	 MSAA 方法，返回此 AccessibilityImplementation 所表示组件的默认操作，或该组件的子元素之一的默认操作。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">在 MSAA 模型中针对 AccessibilityImplementation 或其子元素之一指定的默认操作字符串。
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">childID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">对应于由 <codeph class="+ topic/ph pr-d/codeph ">getChildIDArray()</codeph> 定义的组件子元素之一的无符号整数。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">返回组件的默认操作。
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 MSAA 方法，返回此 AccessibilityImplementation 所表示组件的默认操作，或该组件的子元素之一的默认操作。
	 
	 <p class="- topic/p ">仅当 AccessibilityImplementation 表示在 MSAA 模型中具有默认操作的 UI 元素时，才实现此方法；请确保返回 MSAA 模型指定的确切字符串。例如，Button 组件的默认操作字符串是“Press”。</p>
	 
	 <p class="- topic/p ">如果只针对 AccessibilityImplementation 本身或其子元素实现 <codeph class="+ topic/ph pr-d/codeph ">get_accDefaultAction</codeph>，则有时需要指明传递的特定 <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> 没有默认操作。只需返回 <codeph class="+ topic/ph pr-d/codeph ">null</codeph> 即可执行此操作。</p>
	 
	 </apiDesc><example class="- topic/example ">下面的示例演示如何实现此方法，以便在 Flex mx.accessibility.ListBaseAccImpl 类（即 ListBase 辅助功能实现）中返回适当的默认操作。
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">override public function get_accDefaultAction(childID:uint):String
	 {
	 	if (childID == 0)
	 		return null;
	 
	 	return "Double Click";
	 }</codeblock>
	  
	 </example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()" class="- topic/link "><linktext class="- topic/linktext ">getChildIDArray()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms696144(VS.85).aspx" class="- topic/link "><linktext class="- topic/linktext ">Microsoft Accessibility 开发人员中心：IAccessible::get_accDefaultAction</linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accFocus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">get_accFocus</apiName><shortdesc class="- topic/shortdesc ">
	 MSAA 方法，返回在组件内具有子焦点的子元素（如果有）的无符号整数 ID。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">在组件内具有子焦点的子元素（如果有）的无符号整数 ID。
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">返回在组件内具有子焦点的子元素的无符号整数 ID。
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 MSAA 方法，返回在组件内具有子焦点的子元素（如果有）的无符号整数 ID。如果不存在具有子焦点的子元素，则该方法返回零。
	 
	 </apiDesc><example class="- topic/example ">下面的示例演示如何实现此方法，以便在 Flex mx.accessibility.ListBaseAccImpl 类（即 ListBase 辅助功能实现）中返回具有焦点的 childID。
	 
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">override public function get_accFocus():uint
	 {
	 var index:uint = ListBase(master).selectedIndex;
	 
	 return index >= 0 ? index + 1 : 0;
	 }</codeblock>
	 
	 </example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()" class="- topic/link "><linktext class="- topic/linktext ">getChildIDArray()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms696150(VS.85).aspx" class="- topic/link "><linktext class="- topic/linktext ">Microsoft Accessibility 开发人员中心：IAccessible::get_accFocus</linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accName" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">get_accName</apiName><shortdesc class="- topic/shortdesc ">
	 MSAA 方法，返回此 AccessibilityImplementation 所表示组件的名称或组件子元素之一的名称。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>3000
	 
	 </helpid></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">组件或其子元素之一的名称。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">childID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">对应于由 <codeph class="+ topic/ph pr-d/codeph ">getChildIDArray()</codeph> 定义的组件子元素之一的无符号整数。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">返回组件的名称
	  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 MSAA 方法，返回此 AccessibilityImplementation 所表示组件的名称或组件子元素之一的名称。
	 
	 <p class="- topic/p ">对于 AccessibilityImplementation 本身 (<codeph class="+ topic/ph pr-d/codeph ">childID == 0</codeph>)，如果不实现此方法，或者不返回值，则 Flash Player 将使用 <codeph class="+ topic/ph pr-d/codeph ">AccessibilityProperties.name</codeph> 属性值（如果存在）。</p>
	 
	 <p class="- topic/p ">对于可以包含子元素的 AccessibilityImplementation，必须实现此方法，并且在 <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> 不为零时必须返回一个字符串值。</p>
	 
	 <p class="- topic/p ">根据用户界面元素的类型，MSAA 中的名称表示以下两种不同类型的内容之一：作者分配的名称或元素的实际文本内容。通常，AccessibilityImplementation 本身属于前一类，它的 <codeph class="+ topic/ph pr-d/codeph ">name</codeph> 属性就是作者分配的名称。子元素始终属于第二类，子元素名称表示其文本内容。</p>
	 
	 <p class="- topic/p ">如果 AccessibilityImplementation 的 <codeph class="+ topic/ph pr-d/codeph ">name</codeph> 属性表示作者分配的名称，则组件从作者处获得名称的方式有两种。第一种方式采用组件本身内含的名称，例如，复选框组件可能将其包含的文本标签用作该组件的名称。第二种方式是第一种方式的后备方式，它采用 UI 中指定的名称，并以 <codeph class="+ topic/ph pr-d/codeph ">AccessibilityProperties.name</codeph> 结尾。通过此后备选项，用户指定名称的方式完全与任何其他 Sprite 或 MovieClip 名称的指定方式相同。</p>
	 
	 <p class="- topic/p ">因此，对于 AccessibilityImplementation 本身 (<codeph class="+ topic/ph pr-d/codeph ">childID == 0</codeph>)，有三种可能：</p>
	 <ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p "><b class="+ topic/ph hi-d/b ">组件内由作者分配的名称。</b>如果 <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> 为零，应实现 <codeph class="+ topic/ph pr-d/codeph ">get_accName</codeph> 方法，并应返回包含 AccessibilityImplementation 名称的字符串值。如果 <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> 为零，但 AccessibilityImplementation 没有名称，则 <codeph class="+ topic/ph pr-d/codeph ">get_accName</codeph> 方法应返回一个空字符串，以避免 Player 转而使用 <codeph class="+ topic/ph pr-d/codeph ">AccessibilityProperties.name</codeph> 属性。</p>
	 </li><li class="- topic/li "><p class="- topic/p "><b class="+ topic/ph hi-d/b ">UI 中作者分配的名称。</b>如果 AccessibilityImplementation 可以包含子元素，则当 <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> 为零时，应实现 <codeph class="+ topic/ph pr-d/codeph ">get_accName</codeph> 方法，但该方法不应返回任何值。如果 AccessibilityImplementation 不能包含子元素，则不应实现 <codeph class="+ topic/ph pr-d/codeph ">get_accName</codeph> 方法。</p>
     	 </li><li class="- topic/li "><p class="- topic/p "><b class="+ topic/ph hi-d/b ">表示内容的名称。</b>如果 <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> 为零，应实现 <codeph class="+ topic/ph pr-d/codeph ">get_accName</codeph> 方法并由它返回适当的字符串值。如果 <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> 为零，但 AccessibilityImplementation 没有内容，则 <codeph class="+ topic/ph pr-d/codeph ">get_accName</codeph> 方法应返回一个空字符串，以避免 Player 转而使用 <codeph class="+ topic/ph pr-d/codeph ">AccessibilityProperties.name</codeph> 属性。</p>
     	 </li></ul>
     	 <p class="- topic/p ">请注意，对于子元素（如果 AccessibilityImplementation 可以包含子元素），总是适合第三种情况。如果 <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> 不为零，应实现 <codeph class="+ topic/ph pr-d/codeph ">get_accName</codeph> 方法并由它返回适当的字符串值。 </p>
     	 
     	 </apiDesc><example class="- topic/example ">下面的示例演示如何在 Flex mx.accessibility.AccImpl 类（即 Flex 中的基本辅助功能实现）中实现此方法。
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">override public function get_accName(childID:uint):String
	 {
	 	// Start with the name of the component's parent form 
	  	// if the component is contained within a form
	 	var accName:String = UIComponentAccImpl.getFormName(master);
	 
	 	// If the element requested is the component itself, 
	 	// append the value of any assigned accessibilityProperties.name	
	 	if (childID == 0 &amp;&amp; master.accessibilityProperties 
	 		&amp;&amp; master.accessibilityProperties.name 
	 			&amp;&amp; master.accessibilityProperties.name != "")
	 		accName += master.accessibilityProperties.name + " ";
	 
	 	// Append the value of the childIDs name 
	 // returned by the component-specific override 
	 // of the mx.accessibility.AccImpl.getName() utility function,
	 	// and append the component's status returned by the 
	 // component-specific override of the 
	 // mx.accessibility.AccImpl.getStatusName() utility function
	 	accName += getName(childID) + getStatusName();
	 
	 // Return the assembled String if it is neither empty nor null, 
	 // otherwise return null
	 	return (accName != null &amp;&amp; accName != "") ? accName : null;
	 }</codeblock>
	 
	 
	  </example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()" class="- topic/link "><linktext class="- topic/linktext ">getChildIDArray()</linktext></link><link href="flash.accessibility.xml#AccessibilityProperties" class="- topic/link "><linktext class="- topic/linktext ">flash.accessibility.AccessibilityProperties</linktext></link><link href="flash.accessibility.xml#AccessibilityProperties/name" class="- topic/link "><linktext class="- topic/linktext ">flash.accessibility.AccessibilityProperties.name</linktext></link><link href="" invalidHref="mx.accessibility.xml#AccImpl/get_accName()" class="- topic/link "><linktext class="- topic/linktext ">mx.accessibility.AccImpl.get_accName()</linktext></link><link href="" invalidHref="mx.accessibility.xml#AccImpl/getName()" class="- topic/link "><linktext class="- topic/linktext ">mx.accessibility.AccImpl.getName()</linktext></link><link href="" invalidHref="mx.accessibility.xml#AccImpl/getStatusName()" class="- topic/link "><linktext class="- topic/linktext ">mx.accessibility.AccImpl.getStatusName()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms696177(VS.85).aspx" class="- topic/link "><linktext class="- topic/linktext ">Microsoft Accessibility 开发人员中心：IAccessible::get_accName</linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accRole" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">get_accRole</apiName><shortdesc class="- topic/shortdesc ">
	 MSAA 方法，返回此 AccessibilityImplementation 所表示组件的名称或组件子元素之一的系统角色。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">错误代码 <xref href="../../runtimeErrors.html#2143" class="- topic/xref ">2143</xref>，表示必须用默认值覆盖 AccessibilityImplementation.get_accRole()。
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">与组件关联的系统角色。 
	  
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">childID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">对应于由 <codeph class="+ topic/ph pr-d/codeph ">getChildIDArray()</codeph> 定义的组件子元素之一的无符号整数。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">返回组件的系统角色
	  
	 
	  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 MSAA 方法，返回此 AccessibilityImplementation 所表示组件的名称或组件子元素之一的系统角色。为 MSAA 中的所有组件预定义系统角色。	 
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()" class="- topic/link "><linktext class="- topic/linktext ">getChildIDArray()</linktext></link><link href="../../accessibilityImplementationConstants.html" class="- topic/link "><linktext class="- topic/linktext ">AccessibilityImplementation 常量：对象角色常量</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms696113(VS.85).aspx" class="- topic/link "><linktext class="- topic/linktext ">Microsoft Accessibility 开发人员中心：IAccessible::get_accRole</linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accSelection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">get_accSelection</apiName><shortdesc class="- topic/shortdesc ">
	 MSAA 方法，返回包含全部所选子元素的 ID 的数组。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">全部所选子元素的 ID 的数组。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">返回包含所有所选子元素的 ID 的数组。
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 MSAA 方法，返回包含全部所选子元素的 ID 的数组。返回的数组可以包含零个、一个或多个 ID，这些 ID 全部是无符号整数。
	 
	 </apiDesc><example class="- topic/example ">下面的示例演示如何实现此方法，以便在 Flex mx.accessibility.ListBaseAccImpl 类（即 ListBase 辅助功能实现）中返回所选 childID。
	 
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 override public function get_accSelection():Array
	 {
	 	var accSelection:Array = [];
	 
	 	var selectedIndices:Array = ListBase(master).selectedIndices;
	 	
	 	var n:int = selectedIndices.length;
	 	for (var i:int = 0; i &amp;lt; n; i++)
	 	{
	 		accSelection[i] = selectedIndices[i] + 1;
	 	}
	 	
	 	return accSelection;
	 }
	 </codeblock>
	 
	 </example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()" class="- topic/link "><linktext class="- topic/linktext ">getChildIDArray()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms696179(VS.85).aspx" class="- topic/link "><linktext class="- topic/linktext ">Microsoft Accessibility 开发人员中心：IAccessible::get_accSelection</linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accState" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">get_accState</apiName><shortdesc class="- topic/shortdesc ">
	 IAccessible 方法，返回此 AccessibilityImplementation 所表示组件的当前运行时状态，或该组件的子元素之一的当前运行时状态。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">错误代码 <xref href="../../runtimeErrors.html#2144" class="- topic/xref ">2144</xref>，表示必须用默认值覆盖 AccessibilityImplementation.get_accState()。
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">零个、一个或多个系统状态常量的组合。使用 <codeph class="+ topic/ph pr-d/codeph ">|</codeph>（按位的 OR 运算符）将多个常量组合成一个位域。 
	 
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">childID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">对应于由 <codeph class="+ topic/ph pr-d/codeph ">getChildIDArray()</codeph> 定义的组件子元素之一的无符号整数。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">返回组件的状态
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 IAccessible 方法，返回此 AccessibilityImplementation 所表示组件的当前运行时状态，或该组件的子元素之一的当前运行时状态。
	 
	 <p class="- topic/p ">此方法必须为 MSAA 中的组件返回零个、一个或多个预定义<xref href="../../accessibilityImplementationConstants.html" class="- topic/xref ">对象状态常量</xref>的组合。当要应用多个状态时，应使用 <codeph class="+ topic/ph pr-d/codeph ">|</codeph>（按位的 OR 运算符）将状态常量合并为一个位域。</p>
	 
	 <p class="- topic/p ">要表示当前未应用任何状态常量，此方法应返回零。</p>
	 
	 <p class="- topic/p ">无需跟踪或报告 STATE_SYSTEM_FOCUSABLE 或 STATE_SYSTEM_FOCUSED 状态，Flash Player 会自动处理这两种状态。</p>
	 
	 </apiDesc><example class="- topic/example ">下面的示例演示如何实现此方法，以便合并 mx.accessibility.ListBaseAccImpl（即 Flex ListBase 辅助功能实现）中的多个状态常量。
	 
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 override public function get_accState(childID:uint):uint
	 {
	 	var accState:uint = getState(childID);
	 
	 	if (childID &amp;gt; 0) 
	 	{
	 		var listBase:ListBase = ListBase(master);
	 
	 		var index:uint = childID - 1;
	 
	 		// For returning states (OffScreen and Invisible)
	 		// when the list Item is not in the displayed rows.
	 		if (index &amp;lt; listBase.verticalScrollPosition ||
	 			index &amp;gt;= listBase.verticalScrollPosition + listBase.rowCount)
	 		{
	 			accState |= (STATE_SYSTEM_OFFSCREEN |
	 						 STATE_SYSTEM_INVISIBLE);
	 		}
	 		else
	 		{
	 			accState |= STATE_SYSTEM_SELECTABLE;
	 
	 			var item:Object = getItemAt(index);
	 
	 			var renderer:IListItemRenderer =
	 				listBase.itemToItemRenderer(item);
	 
	 			if (renderer != null &amp;&amp; listBase.isItemSelected(renderer.data))
	 				accState |= STATE_SYSTEM_SELECTED | STATE_SYSTEM_FOCUSED;
	 		}
	 	}
	 
	 	return accState;
	 }</codeblock>
	 
	 </example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()" class="- topic/link "><linktext class="- topic/linktext ">getChildIDArray()</linktext></link><link href="../../accessibilityImplementationConstants.html" class="- topic/link "><linktext class="- topic/linktext ">AccessibilityImplementation 常量：对象状态常量</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms696191(VS.85).aspx" class="- topic/link "><linktext class="- topic/linktext ">Microsoft Accessibility 开发人员中心：IAccessible::get_accState</linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accValue" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">get_accValue</apiName><shortdesc class="- topic/shortdesc ">
	 MSAA 方法，返回此 AccessibilityImplementation 所表示组件的运行时值，或该组件的子元素之一的运行时值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，表示组件或其子元素之一的运行时值。
	  
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">childID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">对应于由 <codeph class="+ topic/ph pr-d/codeph ">getChildIDArray()</codeph> 定义的组件子元素之一的无符号整数。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">返回组件的值
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 MSAA 方法，返回此 AccessibilityImplementation 所表示组件的运行时值，或该组件的子元素之一的运行时值。
	 
	 <p class="- topic/p ">仅当 AccessibilityImplementation 表示一个在 MSAA 模型中具有值的 UI 元素时，才能实现此方法。请注意，某些具有外观“值”的 UI 元素实际上会通过不同方式公开此值，例如通过 <codeph class="+ topic/ph pr-d/codeph ">get_accName</codeph>（如文本）、<codeph class="+ topic/ph pr-d/codeph ">get_accState</codeph>（如复选框）或 <codeph class="+ topic/ph pr-d/codeph ">get_accSelection</codeph>（如列表框）。</p>
	 
	 <p class="- topic/p ">如果只针对 AccessibilityImplementation 本身或其子元素实现 <codeph class="+ topic/ph pr-d/codeph ">get_accValue</codeph>，则有时需要指明传递的特定 <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> 没有值的概念。只需返回 <codeph class="+ topic/ph pr-d/codeph ">null</codeph> 即可执行此操作。</p>
	 
	 </apiDesc><example class="- topic/example ">下面的示例演示如何实现此方法，以便根据 Flex mx.accessibility.ListBaseAccImpl 类（即 ListBase 辅助功能实现）中组件的 <codeph class="+ topic/ph pr-d/codeph ">selectedIndex</codeph> 值返回一个适当的值。
	 
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">override public function get_accValue(childID:uint):String
	 {
	 	var accValue:String;
	 	
	 	var listBase:ListBase = ListBase(master);
	 	
	 	var index:int = listBase.selectedIndex;
	 	if (childID == 0)
	 	{
	 		if (index > -1)
	 		{
	 			var item:Object = getItemAt(index);
	 
	 			if (item is String)
	 			{
	 				accValue = item + " " + (index + 1) + " of " + listBase.dataProvider.length;
	 			}
	 			else
	 			{
	 				accValue = listBase.itemToLabel(item) + " " + (index + 1) +
	 						   " of " + listBase.dataProvider.length;
	 			}
	 		}
	 	}
	 
	 	return accValue;
	 }</codeblock>
	 
	 </example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()" class="- topic/link "><linktext class="- topic/linktext ">getChildIDArray()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms697312(VS.85).aspx" class="- topic/link "><linktext class="- topic/linktext ">Microsoft Accessibility 开发人员中心：IAccessible::get_accValue</linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:isLabeledBy" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">isLabeledBy</apiName><shortdesc class="- topic/shortdesc ">
	 
	 返回 true 或 false，以表示边框由 x、y、width 和 height 指定的文本对象是否应该视为 AccessibilityImplementation 表示的组件的标签。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">false</codeph> 表示具有给定标签边框的文本对象是否应该视为 AccessibilityImplementation 表示的组件的标签。
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">labelBounds</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Rectangle</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示文本对象的边框的 Rectangle。
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">表示附近的文本对象是否是此组件的标签。 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 
	 返回 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>，以表示边框由 <codeph class="+ topic/ph pr-d/codeph ">x</codeph>、<codeph class="+ topic/ph pr-d/codeph ">y</codeph>、<codeph class="+ topic/ph pr-d/codeph ">width</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">height</codeph> 指定的文本对象是否应该视为 AccessibilityImplementation 表示的组件的标签。 
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">x</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">y</codeph> 坐标是相对于应用 AccessibilityImplementation 的组件的左上角，可能为负值。所有坐标都以舞台像素为单位。</p>
	 
	 <p class="- topic/p ">此方法允许可访问组件符合 Flash Player 对自动标签关系的搜索，从而允许对象外的文本提供对象的名称。之所以提供此方法，是因为预计用于识别标签的标准会因组件而异。如果实现了此方法，应该致力于使用与 Player 代码内部用于按钮和文本字段的标准类似的几何标准。这些标准如下所示：</p>
	 
	 <p class="- topic/p "><ul class="- topic/ul "><li class="- topic/li ">对于按钮，将任何完全位于按钮内部的文本视为标签。</li><li class="- topic/li ">对于文本字段，将任何在上方附近和左对齐或左侧附近显示的文本都视为标签。</li></ul></p>
	 
	 <p class="- topic/p ">如果 AccessibilityImplementation 表示的组件始终不应参与自动标签关系，则不要实现 <codeph class="+ topic/ph pr-d/codeph ">isLabeledBy</codeph>。这等效于始终返回 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。不应实现 <codeph class="+ topic/ph pr-d/codeph ">isLabeledBy</codeph> 的一种情况是，当 AccessibilityImplementation 属于上述 <codeph class="+ topic/ph pr-d/codeph ">get_accName</codeph> 中介绍的“组件内由作者分配的名称”这种情况时。</p>
	 <p class="- topic/p ">请注意，此方法不基于任何 <b class="+ topic/ph hi-d/b ">IAccessible</b> 方法；它特定于 Flash。</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.accessibility:AccessibilityImplementation:errno" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">errno</apiName><shortdesc class="- topic/shortdesc ">
	 表示错误代码。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 表示错误代码。表示错误为带外错误，而不是返回值错误。要表示错误，请将 <codeph class="+ topic/ph pr-d/codeph ">errno</codeph> 属性设置为“AccessibilityImplementation 常量”附录中记录的错误代码之一。这样会导致忽略返回值。在调用任何 AccessibilityImplementation 方法之前，Player 始终会清除 AccessibilityImplementation 的 <codeph class="+ topic/ph pr-d/codeph ">errno</codeph> 属性（设置为 0）。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="../../accessibilityImplementationConstants.html" class="- topic/link "><linktext class="- topic/linktext ">AccessibilityImplementation 常量</linktext></link></related-links></apiValue><apiValue id="flash.accessibility:AccessibilityImplementation:stub" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">stub</apiName><shortdesc class="- topic/shortdesc ">
	 用于创建组件辅助功能存根。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 用于创建组件辅助功能存根。如果释放的组件不具有 ActionScript 辅助功能实现，Adobe 建议您添加组件辅助功能存根。在组件内，为实现辅助功能，此存根会使 Flash Player 将组件视为简单图形，而不会公开按钮和 Textfield 等的内部结构。 
	 
	 <p class="- topic/p ">要创建组件辅助功能存根，请对相关的 AccImpl 类进行子分类，从而用 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> 值覆盖属性存根。</p> 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="" class="- topic/link "><linktext class="- topic/linktext ">Flex 中的 mx.accessibility.AccImpl 类 (\sdks\4.0.0\frameworks\projects\framework\src\mx\accessibility\AccImpl.as)</linktext></link><link href="" class="- topic/link "><linktext class="- topic/linktext ">Flash 中的 fl.accessibility.AccImpl 类 (\Local Settings\Application Data\Adobe\Flash CS5\en_US\Configuration\Classes\mx\accessibility\AccImpl.as)</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.accessibility:AccessibilityProperties" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">AccessibilityProperties</apiName><shortdesc class="- topic/shortdesc ">
 利用 AccessibilityProperties 类可控制 Flash 对象辅助功能（如屏幕阅读器）演示。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 利用 AccessibilityProperties 类可控制 Flash 对象辅助功能（如屏幕阅读器）演示。
 
 <p class="- topic/p ">您可以将 AccessibilityProperties 对象附加到任何显示对象，但是 Flash Player 只会读取以下某些类型的对象的 AccessibilityProperties 对象：所有 SWF 文件（以 <codeph class="+ topic/ph pr-d/codeph ">DisplayObject.root</codeph> 形式表示）、容器对象（<codeph class="+ topic/ph pr-d/codeph ">DisplayObjectContainer</codeph> 和子类）、按钮（<codeph class="+ topic/ph pr-d/codeph ">SimpleButton</codeph> 和子类）以及文本（<codeph class="+ topic/ph pr-d/codeph ">TextField</codeph> 和子类）。</p>
 
 <p class="- topic/p ">这些对象的 <codeph class="+ topic/ph pr-d/codeph ">name</codeph> 属性是要指定的最重要的属性，因为辅助功能向用户提供对象名称以作为基本的导航方法。不要将 <codeph class="+ topic/ph pr-d/codeph ">AccessibilityProperties.name</codeph> 与 <codeph class="+ topic/ph pr-d/codeph ">DisplayObject.name</codeph> 混淆；这二者有区别且不相关。<codeph class="+ topic/ph pr-d/codeph ">AccessibilityProperties.name</codeph> 属性是通过辅助功能用语音读出的名称，而 <codeph class="+ topic/ph pr-d/codeph ">DisplayObject.name</codeph> 本质上是仅向 ActionScript 代码显示的变量名称。</p>
 
 <p class="- topic/p ">在 Flash Professional 中，<codeph class="+ topic/ph pr-d/codeph ">AccessibilityProperties</codeph> 对象的属性在创作期间将覆盖“辅助功能”面板中的相应设置。</p>
 
 <p class="- topic/p ">要确定 Flash Player 是否正在支持辅助功能的环境中运行，请使用 <codeph class="+ topic/ph pr-d/codeph ">Capabilities.hasAccessibility</codeph> 属性。如果修改 AccessibilityProperties 对象，则需要调用 <codeph class="+ topic/ph pr-d/codeph ">Accessibility.updateProperties()</codeph> 方法以使更改生效。</p>
 
 
 </apiDesc><example conref="examples\AccessibilityPropertiesExample.as" class="- topic/example "> 下例使用 <codeph class="+ topic/ph pr-d/codeph ">AccessibilityExample</codeph>、<codeph class="+ topic/ph pr-d/codeph ">CustomAccessibleButton</codeph>、<codeph class="+ topic/ph pr-d/codeph ">CustomSimpleButton</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">ButtonDisplayState</codeph> 类创建与辅助功能兼容且可用于大多数屏幕阅读器的菜单。<codeph class="+ topic/ph pr-d/codeph ">AccessibilityProperties</codeph> 类的主要功能如下：
 
 <ol TYPE="1" class="- topic/ol "><li class="- topic/li "> 调用 <codeph class="+ topic/ph pr-d/codeph ">configureAssets</codeph>，它创建自定义按钮并设置其标签和说明。这些是屏幕阅读器传达给最终用户的值。</li><li class="- topic/li ">调用 <codeph class="+ topic/ph pr-d/codeph ">setTimeOut()</codeph>，以确保在更新属性之前，Flash Player 有足够的时间来检测屏幕阅读器。</li></ol>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>在检查 <codeph class="+ topic/ph pr-d/codeph ">Accessibility.active</codeph> 之前应先调用 <codeph class="+ topic/ph pr-d/codeph ">setTimeout()</codeph>，以给 Flash Player 提供与屏幕阅读器（如果有）连接所需的 2 秒钟时间。如果未提供足够长的延迟时间，则即使在有屏幕阅读器的情况下，<codeph class="+ topic/ph pr-d/codeph ">setTimeout</codeph> 调用也可能会返回 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</p>
 
 <p class="- topic/p ">只有在对 <codeph class="+ topic/ph pr-d/codeph ">Accessibility.active</codeph> 的调用返回 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> 时（只有在 Flash Player 当前连接到活动的屏幕阅读器时才会发生这种情况），以下示例才会处理 <codeph class="+ topic/ph pr-d/codeph ">Accessibility.updateProperties()</codeph> 方法。如果在没有活动的屏幕阅读器的情况下调用 <codeph class="+ topic/ph pr-d/codeph ">updateProperties</codeph>，则会引发 <codeph class="+ topic/ph pr-d/codeph ">IllegalOperationError</codeph> 异常。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.accessibility.Accessibility;
    import flash.utils.setTimeout;
    
    public class AccessibilityPropertiesExample extends Sprite {
        public static const BUTTON_WIDTH:uint = 90;
        public static const BUTTON_HEIGHT:uint = 20;
        
        private var gutter:uint = 5;
        private var menuLabels:Array = new Array("PROJECTS", "PORTFOLIO", "CONTACT");
        private var menuDescriptions:Array = new Array("Learn more about our projects"
                                                     , "See our portfolio"
                                                     , "Get in touch with our team");
        
        public function AccessibilityPropertiesExample() {
            configureAssets();
            setTimeout(updateAccessibility, 2000); 
        }
        
        private function updateAccessibility():void {
            trace("Accessibility.active: " + Accessibility.active);
            if(Accessibility.active) {
                Accessibility.updateProperties();
            }
        }
        
        private function configureAssets():void {
            var child:CustomAccessibleButton;
            for(var i:uint; i &lt; menuLabels.length; i++) {
                child = new CustomAccessibleButton();
                child.y = (numChildren * (BUTTON_HEIGHT + gutter));
                child.setLabel(menuLabels[i]);
                child.setDescription(menuDescriptions[i]);
                addChild(child);
            }
        }
    }


import flash.accessibility.AccessibilityProperties;
import flash.display.Shape;
import flash.display.SimpleButton;
import flash.display.Sprite;
import flash.events.Event;
import flash.text.TextFormat;
import flash.text.TextField;
    
class CustomAccessibleButton extends Sprite {
    private var button:SimpleButton;
    private var label1:TextField;
    private var description:String;
    private var _name:String;
        
    public function CustomAccessibleButton(_width:uint = 0, _height:uint = 0) {
        _width = (_width == 0) ? AccessibilityPropertiesExample.BUTTON_WIDTH : _width;
        _height = (_height == 0) ? AccessibilityPropertiesExample.BUTTON_HEIGHT : _height;
            
        button = buildButton(_width, _height);
        label1 = buildLabel(_width, _height);
            
        addEventListener(Event.ADDED, addedHandler);
    }
        
    private function addedHandler(event:Event):void {
        trace("addedHandler: " + name);
        var accessProps:AccessibilityProperties = new AccessibilityProperties();
        accessProps.name = this._name;
        accessProps.description = description;
        accessibilityProperties = accessProps;
        removeEventListener(Event.ADDED, addedHandler);
    }
        
    private function buildButton(_width:uint, _height:uint):SimpleButton {
        var child:SimpleButton = new CustomSimpleButton(_width, _height);
        addChild(child);
        return child;
    }

    private function buildLabel(_width:uint, _height:uint):TextField {
        var format:TextFormat = new TextFormat();
        format.font = "Verdana";
        format.size = 11;
        format.color = 0xFFFFFF;
        format.align = TextFormatAlign.CENTER;
        format.bold = true;
            
        var child:TextField = new TextField();
        child.y = 1;
        child.width = _width;
        child.height = _height;
        child.selectable = false;
        child.defaultTextFormat = format;
        child.mouseEnabled = false;
            
        addChild(child);
        return child;
    }
        
    public function setLabel(text:String):void {
        label1.text = text;
        this._name = text;
    }
        
    public function setDescription(text:String):void {
        description = text;
    }
}
    
class CustomSimpleButton extends SimpleButton {
    private var upColor:uint = 0xFFCC00;
    private var overColor:uint = 0xCCFF00;
    private var downColor:uint = 0x00CCFF;

    public function CustomSimpleButton(_width:uint, _height:uint) {
        downState = new ButtonDisplayState(downColor, _width, _height);
        overState = new ButtonDisplayState(overColor, _width, _height);
        upState = new ButtonDisplayState(upColor, _width, _height);
        hitTestState = new ButtonDisplayState(upColor, _width, _height);
        useHandCursor = true;
    }        
}

class ButtonDisplayState extends Shape {
    private var bgColor:uint;
    private var _width:uint;
    private var _height:uint;

    public function ButtonDisplayState(bgColor:uint, _width:uint, _height:uint) {
        this.bgColor = bgColor;
        this._width = _width;
        this._height = _height;
        draw();
    }

    private function draw():void {
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, _width, _height);
        graphics.endFill();
    }
}
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#Accessibility/updateProperties()" class="- topic/link "><linktext class="- topic/linktext ">flash.accessibility.Accessibility.updateProperties()</linktext></link><link href="flash.display.xml#DisplayObject/accessibilityProperties" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.accessibilityProperties</linktext></link><link href="flash.display.xml#InteractiveObject/tabIndex" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.tabIndex</linktext></link><link href="flash.system.xml#Capabilities/hasAccessibility" class="- topic/link "><linktext class="- topic/linktext ">flash.system.Capabilities.hasAccessibility</linktext></link></related-links><apiConstructor id="flash.accessibility:AccessibilityProperties:AccessibilityProperties" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">AccessibilityProperties</apiName><shortdesc class="- topic/shortdesc ">
	 创建一个新的 AccessibilityProperties 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 创建一个新的 AccessibilityProperties 对象。
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.accessibility:AccessibilityProperties:description" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">description</apiName><shortdesc class="- topic/shortdesc ">
	 在呈现辅助功能时为该显示对象提供一个说明。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 在呈现辅助功能时为该显示对象提供一个说明。如果要显示有关对象的大量信息，最佳的方法就是选择一个简洁的名称并将大部分内容放在 <codeph class="+ topic/ph pr-d/codeph ">description</codeph> 属性中。适用于整个 SWF 文件、容器、按钮和文本。默认值为空字符串。
     <p class="- topic/p ">在 Flash Professional 中，此属性对应于“辅助功能”面板中的“描述”字段。</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:forceSimple" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">forceSimple</apiName><shortdesc class="- topic/shortdesc ">
	 如果为 true，则会导致 Flash Player 从辅助演示中排除该显示对象内的子对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 如果为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，则会导致 Flash Player 从辅助演示中排除该显示对象内的子对象。默认值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。适用于所有 SWF 文件和容器。
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:name" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
	 在呈现辅助功能时为该显示对象提供一个名称。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 在呈现辅助功能时为该显示对象提供一个名称。适用于整个 SWF 文件、容器、按钮和文本。不要将其与不相关的 <codeph class="+ topic/ph pr-d/codeph ">DisplayObject.name</codeph> 混淆。默认值为空字符串。
     <p class="- topic/p ">在 Flash Professional 中，此属性对应于“辅助功能”面板中的“名称”字段。</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:noAutoLabeling" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">noAutoLabeling</apiName><shortdesc class="- topic/shortdesc ">
	 如果为 true，则禁用 Flash Player 的默认自动标签系统。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 如果为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，则禁用 Flash Player 的默认自动标记系统。自动标签导致按钮内的文本对象被视为按钮名称，文本字段附近的文本对象被视为文本字段名称。默认值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。仅适用于所有 SWF 文件。
     <p class="- topic/p ">将忽略 <codeph class="+ topic/ph pr-d/codeph ">noAutoLabeling</codeph> 属性值，除非在某个辅助功能第一次检查 SWF 文件之前指定它。如果打算将 <codeph class="+ topic/ph pr-d/codeph ">noAutoLabeling</codeph> 设置为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，应尽早在代码中执行此操作。</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:shortcut" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">shortcut</apiName><shortdesc class="- topic/shortdesc ">
	 表示与该显示对象关联的快捷键。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 表示与该显示对象关联的快捷键。仅为与快捷键关联的 UI 控件提供此字符串。适用于容器、按钮和文本。默认值为空字符串。
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意</b>：分配此属性并不会自动将指定的按键组合分配给该对象；您必须自己执行该操作，例如，通过侦听 <codeph class="+ topic/ph pr-d/codeph ">KeyboardEvent</codeph>。</p>
	 
	 <p class="- topic/p ">该字符串的语法使用组合键的长名称，并使用加号 (+) 字符来表示按键组合。有效的字符串示例如“Ctrl+F”、“Ctrl+Shift+Z”等等。</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:silent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">silent</apiName><shortdesc class="- topic/shortdesc ">
	 如果为 true，则在呈现辅助功能时排除该显示对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 如果为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，则从辅助功能演示中排除该显示对象。默认值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。适用于整个 SWF 文件、容器、按钮和文本。
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.accessibility:ISearchableText" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ISearchableText</apiName><shortdesc class="- topic/shortdesc ">
	ISearchableText 接口可由包含在 Web 上应可搜索到的文本的对象实现。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiInterface class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiInterface "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier "/></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	ISearchableText 接口可由包含在 Web 上应可搜索到的文本的对象实现。 
	
	</apiDesc></apiClassifierDetail><apiValue id="flash.accessibility:ISearchableText:flash.accessibility:ISearchableText:searchText:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">searchText</apiName><shortdesc class="- topic/shortdesc "> 
		 从实现 ISearchableText 的组件中获取搜索文本。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		 从实现 ISearchableText 的组件中获取搜索文本。
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.accessibility:Accessibility" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Accessibility</apiName><shortdesc class="- topic/shortdesc ">
 Accessibility 类管理与屏幕阅读器之间的通信。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Accessibility, Accessibility object, built-in class
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Accessibility 类管理与屏幕阅读器之间的通信。屏幕读取器是一种辅助性技术，可以为视力有缺陷的用户提供屏幕内容的音频版本。Accessibility 类的方法是静态方法，也就是说，您不必创建该类的实例即可使用其方法。
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">移动浏览器支持：</b>移动浏览器不支持此类。</p>
 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">AIR 配置文件支持：</i> 所有桌面操作系统均支持此功能，但移动设备或用于电视的 AIR 设备不支持此功能。有关在多个配置文件之间支持 API 的详细信息，请参阅 <xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">AIR 配置文件支持</xref>。</p>
 
 <p class="- topic/p ">要获取和设置特定对象（例如按钮、影片剪辑或文本字段）的可访问属性，请使用 <codeph class="+ topic/ph pr-d/codeph ">DisplayObject.accessibilityProperties</codeph> 属性。要确定播放器或运行时是否正在支持辅助功能的环境中运行，请使用 <codeph class="+ topic/ph pr-d/codeph ">Capabilities.hasAccessibility</codeph> 属性。 </p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>AIR 2 支持 JAWS 11（或更高版本）的屏幕阅读器软件。有关详细信息，请参阅 http://www.adobe.com/accessibility/。</p>
 
 </apiDesc><example conref="examples\AccessibilityExample.as" class="- topic/example "> 下例使用 <codeph class="+ topic/ph pr-d/codeph ">AccessibilityExample</codeph>、<codeph class="+ topic/ph pr-d/codeph ">CustomAccessibleButton</codeph>、<codeph class="+ topic/ph pr-d/codeph ">CustomSimpleButton</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">ButtonDisplayState</codeph> 范例类创建与辅助功能兼容且可用于大多数屏幕阅读器的菜单。该示例执行下列任务：
 <ol class="- topic/ol "><li class="- topic/li ">它跟踪 <codeph class="+ topic/ph pr-d/codeph ">Accessibility.active</codeph> 属性，以确定屏幕阅读器当前是否处于活动状态，以及播放器是否正在与它通信。</li><li class="- topic/li ">如果 <codeph class="+ topic/ph pr-d/codeph ">active</codeph> 属性返回 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，该示例将调用 <codeph class="+ topic/ph pr-d/codeph ">updateProperties()</codeph> 方法来应用对本示例中的按钮进行的辅助功能更改。</li><li class="- topic/li ">该示例调用 <codeph class="+ topic/ph pr-d/codeph ">flash.utils.setTimeout()</codeph> 方法，指定 <codeph class="+ topic/ph pr-d/codeph ">updateAccessibility()</codeph> 结束方法应在 2 秒钟之后调用。</li></ol>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>在检查 <codeph class="+ topic/ph pr-d/codeph ">Accessibility.active</codeph> 之前应先调用 <codeph class="+ topic/ph pr-d/codeph ">setTimeout()</codeph>，以给 Flash Player 提供与屏幕阅读器（如果有）连接所需的 2 秒钟时间。如果未提供足够长的延迟时间，则即使在有屏幕阅读器的情况下，<codeph class="+ topic/ph pr-d/codeph ">setTimeout</codeph> 调用也可能会返回 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
 </p>
 <p class="- topic/p ">只有在对 <codeph class="+ topic/ph pr-d/codeph ">Accessibility.active</codeph> 的调用返回 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> 时（只有在 Flash Player 当前连接到活动的屏幕阅读器时才会发生这种情况），以下示例才会处理 <codeph class="+ topic/ph pr-d/codeph ">Accessibility.updateProperties()</codeph> 方法。如果在没有活动的屏幕阅读器的情况下调用 <codeph class="+ topic/ph pr-d/codeph ">updateProperties</codeph>，则会引发 <codeph class="+ topic/ph pr-d/codeph ">IllegalOperationError</codeph> 异常。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.accessibility.Accessibility;
    import flash.utils.setTimeout;
    
    public class AccessibilityExample extends Sprite {
        public static const BUTTON_WIDTH:uint = 90;
        public static const BUTTON_HEIGHT:uint = 20;
        
        private var gutter:uint = 5;
        private var menuLabels:Array = new Array("PROJECTS", "PORTFOLIO", "CONTACT");
        private var menuDescriptions:Array = new Array("Learn more about our projects"
                                                     , "See our portfolio"
                                                     , "Get in touch with our team");
        
        public function AccessibilityExample() {
            configureAssets();
            setTimeout(updateAccessibility, 2000); 
        }
        
        private function updateAccessibility():void {
            trace("Accessibility.active: " + Accessibility.active);
            if(Accessibility.active) {
                Accessibility.updateProperties();
            }
        }
        
        private function configureAssets():void {
            var child:CustomAccessibleButton;
            for(var i:uint; i &lt; menuLabels.length; i++) {
                child = new CustomAccessibleButton();
                child.y = (numChildren * (BUTTON_HEIGHT + gutter));
                child.setLabel(menuLabels[i]);
                child.setDescription(menuDescriptions[i]);
                addChild(child);
            }
        }
    }
}
    
import flash.accessibility.AccessibilityProperties;
import flash.display.Shape;
import flash.display.SimpleButton;
import flash.display.Sprite;
import flash.events.Event;
import flash.text.TextFormat;
import flash.text.TextField;


class CustomAccessibleButton extends Sprite {
    private var button:SimpleButton;
    private var label:TextField;
    private var description:String;
    private var _name:String;
        
    public function CustomAccessibleButton(_width:uint = 0, _height:uint = 0) {
        _width = (_width == 0) ? AccessibilityExample.BUTTON_WIDTH : _width;
        _height = (_height == 0) ? AccessibilityExample.BUTTON_HEIGHT : _height;
        
        button = buildButton(_width, _height);
        label = buildLabel(_width, _height);
            
        addEventListener(Event.ADDED, addedHandler);
    }
        
    private function addedHandler(event:Event):void {
        trace("addedHandler: " + this._name);
        var accessProps:AccessibilityProperties = new AccessibilityProperties();
        accessProps.name = this._name;
        accessProps.description = description;
        accessibilityProperties = accessProps;
        removeEventListener(Event.ADDED, addedHandler);
    }
        
    private function buildButton(_width:uint, _height:uint):SimpleButton {
        var child:SimpleButton = new CustomSimpleButton(_width, _height);
        addChild(child);
        return child;
    }

    private function buildLabel(_width:uint, _height:uint):TextField {
        var format:TextFormat = new TextFormat();
        format.font = "Verdana";
        format.size = 11;
        format.color = 0xFFFFFF;
        format.align = TextFormatAlign.CENTER;
        format.bold = true;
        
        var child:TextField = new TextField();
        child.y = 1;
        child.width = _width;
        child.height = _height;
        child.selectable = false;
        child.defaultTextFormat = format;
        child.mouseEnabled = false;
            
        addChild(child);
        return child;
    }
        
    public function setLabel(text:String):void {
        label.text = text;
        this._name = text;
    }
        
    public function setDescription(text:String):void {
        description = text;
    }
}
    
class CustomSimpleButton extends SimpleButton {
    private var upColor:uint = 0xFFCC00;
    private var overColor:uint = 0xCCFF00;
    private var downColor:uint = 0x00CCFF;

    public function CustomSimpleButton(_width:uint, _height:uint) {
        downState = new ButtonDisplayState(downColor, _width, _height);
        overState = new ButtonDisplayState(overColor, _width, _height);
        upState = new ButtonDisplayState(upColor, _width, _height);
        hitTestState = new ButtonDisplayState(upColor, _width, _height);
        useHandCursor = true;
    }        
}

class ButtonDisplayState extends Shape {
    private var bgColor:uint;
    private var _width:uint;
    private var _height:uint;

    public function ButtonDisplayState(bgColor:uint, _width:uint, _height:uint) {
        this.bgColor = bgColor;
        this._width = _width;
        this._height = _height;
        draw();
    }

    private function draw():void {
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, _width, _height);
        graphics.endFill();
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/accessibilityProperties" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.accessibilityProperties</linktext></link><link href="flash.system.xml#Capabilities/hasAccessibility" class="- topic/link "><linktext class="- topic/linktext ">flash.system.Capabilities.hasAccessibility</linktext></link><link href="flash.net.xml#Socket" class="- topic/link "><linktext class="- topic/linktext ">Socket</linktext></link><link href="http://www.adobe.com/accessibility/" class="- topic/link "><linktext class="- topic/linktext ">http://www.adobe.com/accessibility/</linktext></link></related-links><apiOperation id="flash.accessibility:Accessibility:updateProperties" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">updateProperties</apiName><shortdesc class="- topic/shortdesc ">
	通知 Flash Player 应用使用 DisplayObject.accessibilityProperties 属性所做的任何辅助功能更改。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">accessibility; Accessibility.updateProperties, updateProperties, screen reader,
	MSAA
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">在此版本的 Flash Player 中不支持辅助功能。如果 <codeph class="+ topic/ph pr-d/codeph ">flash.system.Capabilities.hasAccessibility</codeph> 属性为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>，则不要调用 <codeph class="+ topic/ph pr-d/codeph ">Accessibility.updateProperties()</codeph> 方法。
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	通知 Flash Player 应用使用 <codeph class="+ topic/ph pr-d/codeph ">DisplayObject.accessibilityProperties</codeph> 属性所做的任何辅助功能更改。需要调用此方法以使更改生效。 
	
	<p class="- topic/p ">如果您修改多个对象的辅助功能属性，则只需调用 <codeph class="+ topic/ph pr-d/codeph ">Accessibility.updateProperties()</codeph> 方法一次；多次调用可能导致性能降低以及屏幕阅读器输出不正确。</p>
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#Accessibility/active" class="- topic/link "><linktext class="- topic/linktext ">active</linktext></link><link href="flash.display.xml#DisplayObject/accessibilityProperties" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.accessibilityProperties</linktext></link><link href="flash.system.xml#Capabilities/hasAccessibility" class="- topic/link "><linktext class="- topic/linktext ">flash.system.Capabilities.hasAccessibility</linktext></link></related-links></apiOperation><apiValue id="flash.accessibility:Accessibility:active:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">active</apiName><shortdesc class="- topic/shortdesc ">
	表示某个屏幕阅读器是否处于活动状态，以及应用程序是否正在与之通信。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Accessibility.isActive, Accessibility, isActive, screen reader, MSAA
    </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	表示某个屏幕阅读器是否处于活动状态，以及应用程序是否正在与之通信。如果希望应用程序在有屏幕阅读器的情况下表现出不同的行为方式，可使用此方法。 
	
	<p class="- topic/p ">将此属性设置为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> 后，它在应用程序运行期间将保持为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。（用户通常不会在屏幕阅读器后启动关闭屏幕阅读器。）</p>
	
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>在启动 AIR 应用程序之后或在播放文档的 Flash<sup class="+ topic/ph hi-d/sup ">®</sup> Player 窗口第一次出现之后，请等待 1 秒或 2 秒，再调用此方法。否则，即使存在活动的辅助功能客户端，也可能返回值 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。这是辅助功能客户端和 Flash Player 或 AIR 之间的异步通信机制造成的。</p>
	
	要确定播放器是否正在支持屏幕读取器的环境中运行，请使用 <codeph class="+ topic/ph pr-d/codeph ">Capabilities.hasAccessibility</codeph> 属性。 
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Capabilities/hasAccessibility" class="- topic/link "><linktext class="- topic/linktext ">flash.system.Capabilities.hasAccessibility</linktext></link><link href="flash.accessibility.xml#Accessibility/updateProperties()" class="- topic/link "><linktext class="- topic/linktext ">updateProperties()</linktext></link></related-links></apiValue></apiClassifier></apiPackage>